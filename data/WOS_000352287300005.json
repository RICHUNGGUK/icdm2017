{"auto_keywords": [{"score": 0.03621068587559536, "phrase": "correlated_variables"}, {"score": 0.01521126284789667, "phrase": "concurrency_bugs"}, {"score": 0.010684639795428413, "phrase": "data_races"}, {"score": 0.00481495049065317, "phrase": "high-level_synchronization_anomalies"}, {"score": 0.0046797114400479135, "phrase": "parallel_programs"}, {"score": 0.004548253531664032, "phrase": "unsynchronized_accesses"}, {"score": 0.0045052562941109734, "phrase": "shared_memory_locations"}, {"score": 0.004195418010131832, "phrase": "correct_parallel_programs"}, {"score": 0.003603549914861701, "phrase": "single_memory_location"}, {"score": 0.0035189057079817285, "phrase": "multiple_accesses"}, {"score": 0.0029793675408245047, "phrase": "novel_approach"}, {"score": 0.0029511579080222137, "phrase": "data_race_detection"}, {"score": 0.0028409576481842457, "phrase": "logical_operations"}, {"score": 0.002632716358833918, "phrase": "lockset_analysis"}, {"score": 0.002304264150614091, "phrase": "valgrind"}, {"score": 0.0022500695985527668, "phrase": "dynamic_binary_instrumentation"}, {"score": 0.0021352776064254195, "phrase": "existing_detectors"}, {"score": 0.0021049977753042253, "phrase": "additional_information"}], "paper_keywords": ["Data race detection", " Parallel programs", " Dynamic analysis", " Correlated variables", " High-level data races"], "paper_abstract": "In parallel programs concurrency bugs are often caused by unsynchronized accesses to shared memory locations, which are called data races. In order to support programmers in writing correct parallel programs, it is therefore highly desired to have tools on hand that automatically detect such data races. Today, most of these tools only consider unsynchronized read and write operations on a single memory location. Concurrency bugs that involve multiple accesses on a set of correlated variables may be completely missed. Tools may overwhelm programmers with data races on various memory locations, without noticing that the locations are correlated. In this paper, we propose a novel approach to data race detection that automatically infers sets of correlated variables and logical operations by analyzing data and control dependencies. We develop an algorithm that is inspired by lockset analysis and combine it with happens-before analysis to provide the first hybrid, dynamic race detector for correlated variables. We implemented our approach on top of the Valgrind, a framework for dynamic binary instrumentation. Our evaluation confirmed that we can catch data races missed by existing detectors and provide additional information for effective bug fixing.", "paper_title": "Detection of High-Level Synchronization Anomalies in Parallel Programs", "paper_id": "WOS:000352287300005"}