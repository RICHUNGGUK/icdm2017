{"auto_keywords": [{"score": 0.028296010032106494, "phrase": "cbr_adjustment"}, {"score": 0.01540181578678468, "phrase": "moving_objects"}, {"score": 0.011851365402466032, "phrase": "query_processing"}, {"score": 0.009000054634664955, "phrase": "cost_model"}, {"score": 0.00481495049065317, "phrase": "diverse_applications"}, {"score": 0.004563182153397349, "phrase": "efficient_index_schemes"}, {"score": 0.004525629293824217, "phrase": "spatio-temporal_databases"}, {"score": 0.004360412703519539, "phrase": "index_structure"}, {"score": 0.0043066860455264, "phrase": "future-time_queries"}, {"score": 0.004149429072483132, "phrase": "future_locations"}, {"score": 0.004014452814186653, "phrase": "conservative_bounding_rectangle"}, {"score": 0.0036502716977381004, "phrase": "serious_performance_degradation"}, {"score": 0.003473529187092258, "phrase": "novel_method"}, {"score": 0.0033190180867511605, "phrase": "performance_degradation"}, {"score": 0.003093595537995837, "phrase": "leaf_node"}, {"score": 0.003042812778470762, "phrase": "user_query"}, {"score": 0.0028010985923790036, "phrase": "correct_decision"}, {"score": 0.0026324658253309673, "phrase": "performance_gain"}, {"score": 0.0024637379406427856, "phrase": "unusual_expansions"}, {"score": 0.0023346234464901978, "phrase": "unnecessary_execution"}, {"score": 0.0022773309395419427, "phrase": "performance_evaluation"}], "paper_keywords": ["moving objects", " spatio-temporal databases", " spatio", " temporal indexing", " futuretime queries", " TPR-tree", " TPR*-tree"], "paper_abstract": "Recently, with the advent of diverse applications based on locations of moving objects, it has become crucial to develop efficient index schemes for spatio-temporal databases. The TPR*-tree is popularly accepted as an index structure for processing future-time queries on such spatio-temporal databases. In the TPR*-tree, the future locations of moving objects are predicted based on the Conservative Bounding Rectangle (CBR). Since the areas predicted from CBRs tend to grow rapidly over time. CBRs thus enlarged lead to serious performance degradation in query processing. To solve the problem, we propose a novel method to adjust CBRs to be tight, thereby preventing the performance degradation of query processing. Our method examines whether the adjustment of a CBR is necessary when accessing a leaf node for processing a user query. Thus, it does not incur extra disk I/Os in this examination. Also, in order to make a correct decision, we devise a cost model that considers the I/O overhead for the CBR adjustment and the performance gain in the future-time owing to the CBR adjustment. With the cost model, we can prevent unusual expansions of BRs even when updates on nodes are infrequent and also avoid unnecessary execution of the CBR adjustment. For performance evaluation, we conducted a variety of experiments. The results show that our method improves the performance of the original TPR*-tree significantly.", "paper_title": "Active Adjustment: An Effective Method for Keeping the TPR*-tree Compact", "paper_id": "WOS:000282396700002"}