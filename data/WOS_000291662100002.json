{"auto_keywords": [{"score": 0.04900761970662832, "phrase": "partitioned_synchronisation"}, {"score": 0.00481496979919977, "phrase": "bsp"}, {"score": 0.004550029253278477, "phrase": "bsp_superstep"}, {"score": 0.004398094237005956, "phrase": "distributed_computation"}, {"score": 0.003882970272082245, "phrase": "asynchronous_messages"}, {"score": 0.0034279721355412285, "phrase": "global_synchronisation"}, {"score": 0.0032760377953971248, "phrase": "ongoing_communications"}, {"score": 0.0032026066791743866, "phrase": "multilevel_supersteps"}, {"score": 0.002795228413298423, "phrase": "shared_memories"}, {"score": 0.0023848164282879885, "phrase": "state-based_semantics"}, {"score": 0.0022278779300543548, "phrase": "classical_sequential_programming_model"}, {"score": 0.0021049977753042253, "phrase": "distributed_bsp"}], "paper_keywords": ["BSP", " State-based reasoning", " Partitioned synchronisation", " UTP", " Parallel by merge", " Refinement", " Weakest preconditions"], "paper_abstract": "A BSP superstep is a distributed computation comprising a number of simultaneously executing processes which may generate asynchronous messages. A superstep terminates with a barrier which enforces a global synchronisation and delivers all ongoing communications. Multilevel supersteps can utilise barriers in which subsets of processes, interacting through shared memories, are locally synchronised (partitioned synchronisation). In this paper a state-based semantics, closely related to the classical sequential programming model, is derived for distributed BSP with partitioned synchronisation.", "paper_title": "A programming model for BSP with partitioned synchronisation", "paper_id": "WOS:000291662100002"}