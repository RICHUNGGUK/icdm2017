{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed"}, {"score": 0.00470862827326028, "phrase": "network_intruders"}, {"score": 0.004338390136272005, "phrase": "distributed_setting"}, {"score": 0.004179824713643488, "phrase": "distributed_protocol"}, {"score": 0.004027031316965272, "phrase": "logarithmic_size_memory"}, {"score": 0.0037940502405699765, "phrase": "fully_decentralized_manner"}, {"score": 0.0037101871762082153, "phrase": "search_strategy"}, {"score": 0.0029447150254434842, "phrase": "asynchronous_environment"}, {"score": 0.0027949428646076627, "phrase": "necessary_synchronization_mechanism"}, {"score": 0.0027331033178323145, "phrase": "decentralized_manner"}, {"score": 0.0025556529150386168, "phrase": "connected_strategy"}, {"score": 0.002389696110283506, "phrase": "minimum_number"}, {"score": 0.0021049977753042253, "phrase": "centralized_and_synchronous_setting"}], "paper_keywords": [""], "paper_abstract": "This paper addresses the graph searching problem in a distributed setting. We describe a distributed protocol that enables searchers with logarithmic size memory to clear any network, in a fully decentralized manner. The search strategy for the network in which the searchers are launched is computed online by the searchers themselves without knowing the topology of the network in advance. It performs in an asynchronous environment, i.e., it implements the necessary synchronization mechanism in a decentralized manner. In every network, our protocol performs a connected strategy using at most k + 1 searchers, where k is the minimum number of searchers required to clear the network in a monotone connected way, computed in the centralized and synchronous setting.", "paper_title": "Distributed chasing of network intruders", "paper_id": "WOS:000239484100007"}