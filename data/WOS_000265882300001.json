{"auto_keywords": [{"score": 0.04315995617089535, "phrase": "srpt"}, {"score": 0.012309357851221338, "phrase": "faster_machines"}, {"score": 0.007960271216793973, "phrase": "optimal_algorithm"}, {"score": 0.0062774609687671025, "phrase": "worst-case_approximation_ratio"}, {"score": 0.00481495049065317, "phrase": "srpt_optimally"}, {"score": 0.004727837281331949, "phrase": "minimize_flow_time"}, {"score": 0.004621148492564008, "phrase": "shortest_remaining_processing_time"}, {"score": 0.004374772264092067, "phrase": "n_jobs"}, {"score": 0.004335000368745273, "phrase": "release_times"}, {"score": 0.004237138632255772, "phrase": "total_flow_time"}, {"score": 0.00366116875012706, "phrase": "delta"}, {"score": 0.0035133644847622383, "phrase": "longest_job"}, {"score": 0.0034027387694902287, "phrase": "shortest_job"}, {"score": 0.0030491497463386924, "phrase": "slower_machines"}, {"score": 0.0025162511343171, "phrase": "srpt's_flow_time"}, {"score": 0.0024147474002390763, "phrase": "flow_time"}, {"score": 0.002275299774554847, "phrase": "better_worst-case_guarantee"}, {"score": 0.0022136780933978612, "phrase": "existing_algorithms"}, {"score": 0.002193509835371438, "phrase": "similar_performance_guarantees"}, {"score": 0.0021537217025910356, "phrase": "resource_augmentation"}, {"score": 0.0021049977753042253, "phrase": "extra_resources"}], "paper_keywords": ["SRPT", " scheduling", " resource augmentation", " flow time", " parallel machines"], "paper_abstract": "We analyze the shortest remaining processing time (SRPT) algorithm with respect to the problem of scheduling n jobs with release times on m identical machines to minimize total flow time. It is known that SRPT is optimal if m = 1 but that SRPT has a worst-case approximation ratio of Theta(min(log n/m, log Delta)) for this problem, where Delta is the ratio of the length of the longest job divided by the length of the shortest job. It has previously been shown that SRPT is able to use faster machines to produce a schedule as good as an optimal algorithm using slower machines. We now show that SRPT optimally uses these faster machines with respect to the worst-case approximation ratio. That is, if SRPT is given machines that are s >= 2-1/m times as fast as those used by an optimal algorithm, SRPT's flow time is at least s times smaller than the flow time incurred by the optimal algorithm. Clearly, no algorithm can offer a better worst-case guarantee, and we show that existing algorithms with similar performance guarantees to SRPT without resource augmentation do not optimally use extra resources.", "paper_title": "SRPT Optimally Utilizes Faster Machines to Minimize Flow Time", "paper_id": "WOS:000265882300001"}