{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "undirected_graph"}, {"score": 0.00450456611645112, "phrase": "directed_graphs"}, {"score": 0.004327981760540394, "phrase": "all-pairs_shortest_paths_problem"}, {"score": 0.004021954624114115, "phrase": "undirected_graphs"}, {"score": 0.0038900709793274484, "phrase": "truly_sub-cubic_randomized_algorithm"}, {"score": 0.0036390887584943723, "phrase": "n_vertices"}, {"score": 0.0035908627899097407, "phrase": "integer_weights"}, {"score": 0.0031006232333900055, "phrase": "matrix_multiplication"}, {"score": 0.0024875444192203485, "phrase": "bounded_real_edge_weights"}, {"score": 0.002295964130868963, "phrase": "additive_error"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Graph algorithms", " Girth", " Shortest path", " Undirected graph"], "paper_abstract": "We present an algorithm that finds, for each vertex of an undirected graph, a shortest cycle containing it. While for directed graphs this problem reduces to the All-Pairs Shortest Paths problem, this is not known to be the case for undirected graphs. We present a truly sub-cubic randomized algorithm for the undirected case. Given an undirected graph with n vertices and integer weights in 1,...,M, it runs in (O) over tilde(root Mn(omega+3)/2) time where omega < 2.376 is the exponent of matrix multiplication. As a by-product, our algorithm can be used to determine which vertices lie on cycles of length at most t in <(O)over tilde>(Mn(omega)t) time. For the case of bounded real edge weights, a variant of our algorithm solves the problem up to an additive error of epsilon in (O) over tilde (n((omega+6)/3)) time. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A shortest cycle for each vertex of a graph", "paper_id": "WOS:000296990400006"}