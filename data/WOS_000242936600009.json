{"auto_keywords": [{"score": 0.04804050199975018, "phrase": "new_strategy"}, {"score": 0.015719716506582538, "phrase": "asynchronous_strategy"}, {"score": 0.004081385289516914, "phrase": "additive_group"}, {"score": 0.0038737214010638745, "phrase": "multiplicative_group"}, {"score": 0.003340768341189764, "phrase": "partial_results"}, {"score": 0.003170667618004276, "phrase": "nonzero_bits"}, {"score": 0.002931569771634119, "phrase": "binary_code"}, {"score": 0.0027104531025934865, "phrase": "computational_cost"}, {"score": 0.0025500402081330394, "phrase": "sparse_signed-digit_code"}, {"score": 0.0024842242921857705, "phrase": "minimum_computational_cost"}, {"score": 0.0021049977753042253, "phrase": "h_positions"}], "paper_keywords": ["public key cryptosystems", " multicomputations", " multi-exponentiations", " multiscalar-multiplications", " binary signed-digit codes", " joint sparse forms"], "paper_abstract": "We propose a new strategy to improve the performance of multicomputations, such as computing xA + yB in an additive group or a(x)b(y) in a multiplicative group. This new strategy is called asynchronous strategy. In each iteration, it tries to compute partial results by pairing nearby zero and nonzero bits. The new strategy can be applied to any binary code of x and y to further reduce the computational cost. However, our experiments show that sparse signed-digit code can achieve minimum computational cost. The algorithms using the asynchronous strategy need only O(h) extra registers when they try to do computation with bits which are h positions apart.", "paper_title": "Fast multicomputation with asynchronous strategy", "paper_id": "WOS:000242936600009"}