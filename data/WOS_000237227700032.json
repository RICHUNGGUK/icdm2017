{"auto_keywords": [{"score": 0.04114413525833456, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "c_programs"}, {"score": 0.0047517225918491226, "phrase": "dynamic_type_checking"}, {"score": 0.004689321062844586, "phrase": "flexible_features"}, {"score": 0.004418456827500267, "phrase": "potential_vulnerabilities"}, {"score": 0.0041357305373417455, "phrase": "existing_tools"}, {"score": 0.004027751272984522, "phrase": "run-time_type_checking"}, {"score": 0.0036472537997966938, "phrase": "pointer_types"}, {"score": 0.0033465923623290034, "phrase": "dynamic_checking_approach"}, {"score": 0.003091036449708673, "phrase": "physical_layout"}, {"score": 0.003050376875258722, "phrase": "data_types"}, {"score": 0.0029706504420983896, "phrase": "proper_granularity"}, {"score": 0.0028173769301594745, "phrase": "dynamic_types"}, {"score": 0.0026194209399161184, "phrase": "target_program"}, {"score": 0.002451527111936163, "phrase": "dynamic_type"}, {"score": 0.00234043119560776, "phrase": "run-time_type_errors"}, {"score": 0.002279217896185919, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "system_vulnerabilities"}], "paper_keywords": [""], "paper_abstract": "Flexible features of C can be misused and result in potential vulnerabilities which are hard to detect by performing only static checking. Existing tools either give up run-time type checking or employ a type system whose granularity is too coarse (it does not differentiate between pointer types) so that many errors may go undetected. This paper presents a dynamic checking approach to conquer them. A type system that is based on the physical layout of data types and has the proper granularity has been employed. Rules for propagating dynamic types and checking for compatibility of types during execution of the target program are also set up. Then a model of dynamic type checking on this type system to capture run-time type errors is built. Experimental results show that it can catch most errors, including those may become system vulnerabilities and the overhead is moderate.", "paper_title": "Securing C programs by dynamic type checking", "paper_id": "WOS:000237227700032"}