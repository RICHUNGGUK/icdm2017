{"auto_keywords": [{"score": 0.033540621407726914, "phrase": "query_performance"}, {"score": 0.029305203799766633, "phrase": "dynamic_labeling_scheme"}, {"score": 0.00481495049065317, "phrase": "dynamic_xml_trees"}, {"score": 0.004700193486903964, "phrase": "growing_importance"}, {"score": 0.0046159158660556985, "phrase": "semi-structure_data"}, {"score": 0.004398457709182882, "phrase": "increasing_need"}, {"score": 0.004267757384195032, "phrase": "xml_data"}, {"score": 0.004017846065981189, "phrase": "twig_pattern"}, {"score": 0.003969640975997097, "phrase": "xml_documents"}, {"score": 0.003898411343926653, "phrase": "considerable_amount"}, {"score": 0.0038516336597530614, "phrase": "twig_pattern_matching_algorithms"}, {"score": 0.0035609154384221567, "phrase": "static_documents"}, {"score": 0.0034342161742428666, "phrase": "dynamic_documents"}, {"score": 0.0033725614574134396, "phrase": "previous_approaches"}, {"score": 0.0032920678776655783, "phrase": "high_updating_cost"}, {"score": 0.0029887957779347394, "phrase": "efficient_method"}, {"score": 0.0029351141718104725, "phrase": "twig_pattern_matching"}, {"score": 0.002899861600151726, "phrase": "dynamic_xml_documents"}, {"score": 0.0027133856739937133, "phrase": "successive_queries"}, {"score": 0.0026646374739979694, "phrase": "dynamic_environment"}, {"score": 0.0024632912250657636, "phrase": "unnecessary_re-labeling"}, {"score": 0.0022633993976138387, "phrase": "extensive_experiments"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Labeling scheme", " Structural relationships", " Dynamic XML"], "paper_abstract": "With the growing importance of the semi-structure data in information exchange, there is an increasing need for querying and searching XML data. In order to find all occurrences of a twig pattern in XML documents, a considerable amount of twig pattern matching algorithms have been proposed. Those algorithms are quite efficient for queries in static documents. But for queries in dynamic documents, the previous approaches often suffer from high updating cost, which significantly decrease the query performance. To overcome this limitation, we develop an efficient method to perform twig pattern matching in dynamic XML documents in this paper. Our approach adopts a dynamic labeling scheme and supports successive queries in a dynamic environment. More importantly, depending on the dynamic labeling scheme, it completely avoids unnecessary re-labeling after updates, and significantly improves the query performance. Finally, we run extensive experiments to validate our approach and show its significant superiority. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Efficient labeling scheme for dynamic XML trees", "paper_id": "WOS:000313146700025"}