{"auto_keywords": [{"score": 0.036705165440882495, "phrase": "sxsi"}, {"score": 0.00481495049065317, "phrase": "xpath_search"}, {"score": 0.004775726266706856, "phrase": "compressed_indexes"}, {"score": 0.004621984064678252, "phrase": "text_data"}, {"score": 0.0045843245695654875, "phrase": "structured_data"}, {"score": 0.004491516128986183, "phrase": "xpath"}, {"score": 0.0041555469216463855, "phrase": "in-memory_evaluation"}, {"score": 0.004121672175779706, "phrase": "xpath_search_queries"}, {"score": 0.003892126266260425, "phrase": "advanced_features"}, {"score": 0.0038446194432899183, "phrase": "backward_axes"}, {"score": 0.0036602993802452863, "phrase": "query_fragment"}, {"score": 0.0036008372531664726, "phrase": "forward_core_xpath"}, {"score": 0.003513443975425428, "phrase": "succinct_xml_self-index"}, {"score": 0.003414153126809511, "phrase": "existing_systems"}, {"score": 0.0029824560656987855, "phrase": "xml_data"}, {"score": 0.0029460197288680864, "phrase": "compact_indexed_form"}, {"score": 0.0028627183712016894, "phrase": "larger_collections"}, {"score": 0.002839352319679885, "phrase": "main_memory"}, {"score": 0.0028046593475268174, "phrase": "powerful_search_and_navigation_operations"}, {"score": 0.002637433799290365, "phrase": "execution_engine"}, {"score": 0.002605201547405916, "phrase": "tree_automata"}, {"score": 0.0025628355581338563, "phrase": "evaluation_orders"}, {"score": 0.0024903420152789135, "phrase": "respective_indexes"}, {"score": 0.00241989408309933, "phrase": "seamless_replacement"}, {"score": 0.0022849068677290836, "phrase": "text_index"}, {"score": 0.0022385401780982204, "phrase": "bio_sequences"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["XML", " succinct data structures", " XPath", " tree automata"], "paper_abstract": "Extensible Markup Language (XML) documents consist of text data plus structured data (markup). XPath allows to query both text and structure. Evaluating such hybrid queries is challenging. We present a system for in-memory evaluation of XPath search queries, that is, queries with text and structure predicates, yet without advanced features such as backward axes, arithmetics, and joins. We show that for this query fragment, which contains Forward Core XPath, our system, dubbed Succinct XML Self-Index (SXSI'), outperforms existing systems by 1-3 orders of magnitude. SXSI is based on state-of-the-art indexes for text and structure data. It combines two novelties. On one hand, it represents the XML data in a compact indexed form, which allows it to handle larger collections in main memory while supporting powerful search and navigation operations over the text and the structure. On the other hand, it features an execution engine that uses tree automata and cleverly chooses evaluation orders that leverage the speeds of the respective indexes. SXSI is modular and allows seamless replacement of its indexes. This is demonstrated through experiments with (1) a text index specialized for search of bio sequences, and (2) a word-based text index specialized for natural language search. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Fast in-memory XPath search using compressed indexes", "paper_id": "WOS:000348429500005"}