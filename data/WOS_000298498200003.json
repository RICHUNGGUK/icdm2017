{"auto_keywords": [{"score": 0.034356391305085915, "phrase": "dexter"}, {"score": 0.01335986229017591, "phrase": "built-in_set"}, {"score": 0.012314606692377515, "phrase": "underlying_middleware_implementation"}, {"score": 0.00481495049065317, "phrase": "distributed_object_systems"}, {"score": 0.004745665541429529, "phrase": "modern_distributed_object_systems"}, {"score": 0.004610058444728656, "phrase": "remote_method"}, {"score": 0.004435230698216773, "phrase": "design_choice"}, {"score": 0.004225950334493496, "phrase": "distributed_applications"}, {"score": 0.003949377440799037, "phrase": "distributed_object_system"}, {"score": 0.0036730297909962142, "phrase": "design_shortcomings"}, {"score": 0.003399466007862412, "phrase": "parameter_types"}, {"score": 0.00328625950643742, "phrase": "plugin-based_framework"}, {"score": 0.002855934865505357, "phrase": "remote_parameter"}, {"score": 0.002801166393333128, "phrase": "distributed_cross-cutting_concern"}, {"score": 0.002760778494680823, "phrase": "aspect-oriented_and_generative_techniques"}, {"score": 0.0026687841359431105, "phrase": "different_parameter"}, {"score": 0.0026175952455594277, "phrase": "reusable_application-level_plugins"}, {"score": 0.0025059724686541263, "phrase": "third-party_library_classes"}, {"score": 0.0021566056345478373, "phrase": "java_remote_method_invocation"}, {"score": 0.002135814760335687, "phrase": "rmi"}, {"score": 0.0021049977753042253, "phrase": "dexter_plugins"}], "paper_keywords": ["Languages", " Design", " Extensible middleware", " metadata", " aspect-oriented programming (AOP)", " generative programming", " declarative programming"], "paper_abstract": "In modern distributed object systems, reference parameters to a remote method are passed according to their runtime type. This design choice limits the expressiveness, readability, and maintainability of distributed applications. Further, to extend the built-in set of parameter passing semantics of a distributed object system, the programmer has to understand and modify the underlying middleware implementation. To address these design shortcomings, this article presents (i) a declarative and extensible approach to remote parameter passing that decouples parameter passing semantics from parameter types, and (ii) a plugin-based framework, DeXteR, which enables the programmer to extend the built-in set of remote parameter passing semantics, without having to understand or modify the underlying middleware implementation. DeXteR treats remote parameter passing as a distributed cross-cutting concern and uses aspect-oriented and generative techniques. DeXteR enables the implementation of different parameter passing semantics as reusable application-level plugins, applicable to application, system, and third-party library classes. The expressiveness, flexibility, and extensibility of the approach is validated by adding several nontrivial remote parameter passing semantics (i.e., copy-restore, lazy, streaming) to Java Remote Method Invocation (RMI) as DeXteR plugins.", "paper_title": "Expressive and Extensible Parameter Passing for Distributed Object Systems", "paper_id": "WOS:000298498200003"}