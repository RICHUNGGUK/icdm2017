{"auto_keywords": [{"score": 0.04593811340084708, "phrase": "dba"}, {"score": 0.007740485711952379, "phrase": "variable_large_data_sets"}, {"score": 0.0046797114400479135, "phrase": "new_challenges"}, {"score": 0.004613516457919661, "phrase": "membership_representation_scheme"}, {"score": 0.004569905085027681, "phrase": "storage_systems"}, {"score": 0.00431672882791019, "phrase": "bloom"}, {"score": 0.004038943596016986, "phrase": "scalable_way"}, {"score": 0.003944112858235306, "phrase": "dynamically_created_groups"}, {"score": 0.003906804492585634, "phrase": "space-efficient_bloom_filters"}, {"score": 0.0037610536973798113, "phrase": "set_sizes"}, {"score": 0.003569451476205552, "phrase": "data_layout"}, {"score": 0.003485605409687907, "phrase": "bit_level"}, {"score": 0.003436242862104006, "phrase": "parallel_access"}, {"score": 0.003371508176308189, "phrase": "high_query_performance"}, {"score": 0.003199687131875466, "phrase": "error_rate"}, {"score": 0.003154360892955196, "phrase": "constructing_bfs"}, {"score": 0.0030949417648270996, "phrase": "bf"}, {"score": 0.003036595866130994, "phrase": "independent_subset"}, {"score": 0.002854505078275351, "phrase": "element_deletion"}, {"score": 0.0028006988338192375, "phrase": "lazy_update_policy"}, {"score": 0.002683304054823427, "phrase": "scalable_fast_index"}, {"score": 0.0024747842618794255, "phrase": "significantly_higher_query_performance"}, {"score": 0.0021251363422701446, "phrase": "theoretical_analysis"}, {"score": 0.0021049977753042253, "phrase": "experimental_evaluation"}], "paper_keywords": ["Data management", " fast index", " membership representation", " Bloom filter"], "paper_abstract": "Cloud computing has raised new challenges for the membership representation scheme of storage systems that manage very large data sets. This paper proposes DBA, a dynamic Bloom filter array aimed at representing membership for variable large data sets in storage systems in a scalable way. DBA consists of dynamically created groups of space-efficient Bloom filters (BFs) to accommodate changes in set sizes. Within a group, BFs are homogeneous and the data layout is optimized at the bit level to enable parallel access and thus achieve high query performance. DBA can effectively control its query accuracy by partially adjusting the error rate of the constructing BFs, where each BF only represents an independent subset to help locate elements and confirm membership. Further, DBA supports element deletion by introducing a lazy update policy. We prototype and evaluate our DBA scheme as a scalable fast index in the MAD2 deduplication storage system. Experimental results reveal that DBA (with 64 BFs per group) shows significantly higher query performance than the state-of-the-art approach while scaling up to 160 BFs. DBA is also shown to excel in scalability, query accuracy, and space efficiency by theoretical analysis and experimental evaluation.", "paper_title": "Efficiently Representing Membership for Variable Large Data Sets", "paper_id": "WOS:000334672900013"}