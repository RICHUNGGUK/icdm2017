{"auto_keywords": [{"score": 0.03957295822022711, "phrase": "local_data_structures"}, {"score": 0.00481495049065317, "phrase": "general_three-dimensional_hybrid_meshes"}, {"score": 0.004753194996637899, "phrase": "new_parallel_dynamic_mesh_adaptation"}, {"score": 0.004632039024076267, "phrase": "general_hybrid_grids"}, {"score": 0.004035946043145475, "phrase": "mesh_adaptation"}, {"score": 0.004001335931796133, "phrase": "additional_complexity"}, {"score": 0.003899269293218826, "phrase": "multiple_types"}, {"score": 0.0038326698261576023, "phrase": "especially_data_migration"}, {"score": 0.0037348894128879082, "phrase": "interpartition_data_structures"}, {"score": 0.0037028514035425037, "phrase": "efficient_partition"}, {"score": 0.0036710872046569532, "phrase": "hybrid_meshes"}, {"score": 0.003546722347907148, "phrase": "suitable_graphs"}, {"score": 0.003501175642882274, "phrase": "serial_graph"}, {"score": 0.003296212583539166, "phrase": "interpartition_boundary"}, {"score": 0.0032538723984338615, "phrase": "termination_detection_algorithm"}, {"score": 0.003225962565315821, "phrase": "dijkstra"}, {"score": 0.003050166508545763, "phrase": "inexpensive_dynamic_load_balancing_strategy"}, {"score": 0.002985130390111069, "phrase": "work_load"}, {"score": 0.002726740692380339, "phrase": "computation_time"}, {"score": 0.0026570998719084153, "phrase": "mesh_quality_preservation_rules"}, {"score": 0.0025892330566358503, "phrase": "refined_elements"}, {"score": 0.002566997205079849, "phrase": "special_algorithms"}, {"score": 0.0023346234464901978, "phrase": "resulting_interpartibon_boundary"}, {"score": 0.002255431275670053, "phrase": "communication_pattern"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Parallel computing", " Hybrid meshes", " Mesh adaptation", " Load balancing", " Data structures"], "paper_abstract": "A new parallel dynamic mesh adaptation and load balancing algorithm for general hybrid grids has been developed. The meshes considered in this work are composed of four kinds of elements; tetrahedra, prisms, hexahedra and pyramids, which poses a challenge to parallel mesh adaptation. Additional complexity imposed by the presence of multiple types of elements affects especially data migration, updates of local data structures and interpartition data structures. Efficient partition of hybrid meshes has been accomplished by transforming them to suitable graphs and using serial graph partitioning algorithms. Communication among processors is based on the faces of the interpartition boundary and the termination detection algorithm of Dijkstra is employed to ensure proper flagging of edges for refinement. An inexpensive dynamic load balancing strategy is introduced to redistribute work load among processors after adaptation. In particular, only the initial coarse mesh, with proper weighting, is balanced which yields savings in computation time and relatively simple implementation of mesh quality preservation rules, while facilitating coarsening of refined elements. Special algorithms are employed for (i) data migration and dynamic updates of the local data structures, (ii) determination of the resulting interpartibon boundary and (iii) identification of the communication pattern of processors. Several representative applications are included to evaluate the method. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Parallel adaptation of general three-dimensional hybrid meshes", "paper_id": "WOS:000276124400020"}