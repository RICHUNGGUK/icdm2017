{"auto_keywords": [{"score": 0.04934553301452924, "phrase": "parallel_applications"}, {"score": 0.00481495049065317, "phrase": "inefficiency_patterns"}, {"score": 0.004668510065740584, "phrase": "event_tracing"}, {"score": 0.00456159659731398, "phrase": "powerful_method"}, {"score": 0.004422827355213055, "phrase": "performance_behavior"}, {"score": 0.004125773078637226, "phrase": "temporal_and_spatial_relationships"}, {"score": 0.00406250784433007, "phrase": "individual_runtime_events"}, {"score": 0.00393886140366453, "phrase": "application_developers"}, {"score": 0.003789561910103601, "phrase": "performance_phenomena"}, {"score": 0.0037314328720368453, "phrase": "concurrent_control_flows"}, {"score": 0.0035076666315744525, "phrase": "large_amounts"}, {"score": 0.003374655868348244, "phrase": "contemporary_parallel_machines"}, {"score": 0.00317221667574882, "phrase": "purely_manual_analysis"}, {"score": 0.002981885091155911, "phrase": "event_traces"}, {"score": 0.002891032998395276, "phrase": "inefficient_behavior"}, {"score": 0.00282470997972535, "phrase": "detected_instances"}, {"score": 0.002675797331220082, "phrase": "associated_performance_penalty"}, {"score": 0.002419708657850547, "phrase": "high_level"}, {"score": 0.0023099082804523044, "phrase": "significantly_less_time"}, {"score": 0.0022222152430170254, "phrase": "manual_analysis"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["performance tools", " event tracing", " pattern search"], "paper_abstract": "Event tracing is a powerful method for analyzing the performance behavior of parallel applications. Because event traces record the temporal and spatial relationships between individual runtime events, they allow application developers to analyze dependences of performance phenomena across concurrent control flows. However, in view of the large amounts of data generated on contemporary parallel machines, the depth and coverage of a purely manual analysis is often limited. Our approach automatically searches event traces for patterns of inefficient behavior, classifies detected instances by category, and quantifies the associated performance penalty. This enables developers to study the performance of their applications at a high level of abstraction, while requiring significantly less time and expertise than a manual analysis. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Automatic analysis of inefficiency patterns in parallel applications", "paper_id": "WOS:000248578200004"}