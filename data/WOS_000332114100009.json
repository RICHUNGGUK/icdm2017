{"auto_keywords": [{"score": 0.03336092529345877, "phrase": "optimal_alignment"}, {"score": 0.00481495049065317, "phrase": "edit-distance_between_a_regular_language_and_a_context-free_language."}, {"score": 0.004058180509184539, "phrase": "smallest_edit-distance"}, {"score": 0.0030164423559955896, "phrase": "edit_operations"}, {"score": 0.0026604207233593973, "phrase": "worst_case"}, {"score": 0.0024984517279573906, "phrase": "finite_automation"}, {"score": 0.0021908807203548345, "phrase": "polynomial_time_algorithm"}, {"score": 0.0021049977753042253, "phrase": "unary_homomorphisms"}], "paper_keywords": ["Edit-distance", " Levenshtein distance", " regular languages", " context-free languages"], "paper_abstract": "The edit-distance two strings is the smallest number of operations required to transform one string into the other. The distance between languages L-1 and L-2 is the smallest edit-distance between string w(i) is an element of L-i, i = 1, 2. We consider the problem of computing the edit-distance of a given regular language and a given context-free language. First, we present an algorithm that finds for the languages an optimal alignment, that is, a sequence of edit operations that transforms a string in one language to a string in the other. The length of the optimal alignment, in the worst case, is exponential in the size of the given grammar and finite automation. Then, we investigate the problem of computing only the edit-distance of the languages without explicitly producing an optimal alignment. We design a polynomial time algorithm that calculates the edit-distance based on unary homomorphisms.", "paper_title": "THE EDIT-DISTANCE BETWEEN A REGULAR LANGUAGE AND A CONTEXT-FREE LANGUAGE", "paper_id": "WOS:000332114100009"}