{"auto_keywords": [{"score": 0.050077805486931894, "phrase": "elliptic_curve_cryptography"}, {"score": 0.04853750751694913, "phrase": "ecc"}, {"score": 0.039411623136519594, "phrase": "hardware_implementation"}, {"score": 0.024838846093405025, "phrase": "iterative_frobenius_map"}, {"score": 0.004565618334988228, "phrase": "koblitz"}, {"score": 0.004528549210658926, "phrase": "miller"}, {"score": 0.0044005599565517875, "phrase": "vast_amount"}, {"score": 0.004189698902282913, "phrase": "finite_fields"}, {"score": 0.003782174375003052, "phrase": "extensive_literature"}, {"score": 0.0037207397635410327, "phrase": "prime_fields"}, {"score": 0.0036903962975894634, "phrase": "binary_fields"}, {"score": 0.0036453427552753533, "phrase": "almost_nothing"}, {"score": 0.0034990853199511982, "phrase": "first_glance"}, {"score": 0.0033176589215021353, "phrase": "efficient_software_implementation"}, {"score": 0.003145609726536791, "phrase": "heterogeneous_processors"}, {"score": 0.0030441844088874366, "phrase": "single_cryptographic_protocol"}, {"score": 0.002994701080666466, "phrase": "ecc_software_implementation"}, {"score": 0.0029581155916843663, "phrase": "weaker_processor"}, {"score": 0.0029100272315053253, "phrase": "reasonable_performance"}, {"score": 0.0028744731986533076, "phrase": "customized_ecc_coprocessor"}, {"score": 0.002827740707723551, "phrase": "good_solution"}, {"score": 0.0027253441561528495, "phrase": "ecc_coprocessor"}, {"score": 0.0026482660253173075, "phrase": "fpca."}, {"score": 0.0025315126622525424, "phrase": "efficient_design"}, {"score": 0.002510843167476253, "phrase": "inversion_modules"}, {"score": 0.0024398167078355224, "phrase": "inversion_operation"}, {"score": 0.002380534385718454, "phrase": "extended_euclidian_algorithm"}, {"score": 0.002266246304762945, "phrase": "building_blocks"}, {"score": 0.002229380111189829, "phrase": "oef."}, {"score": 0.002131054594847684, "phrase": "best_performance"}], "paper_keywords": ["elliptic curve coprocessor", " finite field", " optimal extension field", " FPGA"], "paper_abstract": "Elliptic curve cryptography (ECC) was discovered by Koblitz and Miller, and there has been a vast amount of research on its secure and efficient implementation. To implement ECC, three kinds of finite fields are being widely used, i.e. prime field GF(p), binary field GF(2(m)) and optimal extension field GF(p(m)). There is an extensive literature on hardware implementation of prime fields and binary fields, but almost nothing is known about hardware implementation of OEFs. At a first glance, this may seem natural because OEF has been devised originally for efficient software implementation of ECC. However, we still need its hardware implementation for the environments where heterogeneous processors are communicating with each other using a single cryptographic protocol. Since the ECC software implementation over the weaker processor may not guarantee reasonable performance, a customized ECC coprocessor would be a good solution. In this paper, we propose an ECC coprocessor over GF(p(m)) on an FPCA. Since the most resource-consuming operation is inversion, we focus on the efficient design of inversion modules. First we provide four different implementations for inversion operation, i.e. three variants of Extended Euclidian Algorithm and inversion using the iterative Frobenius map. We use them as the building blocks of our ECC coprocessor over OEF. According to our analysis, inversion using the iterative Frobenius map shows the best performance among the four choices, from the viewpoints of speed and area.", "paper_title": "Efficient hardware implementation of elliptic curve cryptography over GF(p(m))", "paper_id": "WOS:000236882500016"}