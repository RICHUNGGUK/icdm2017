{"auto_keywords": [{"score": 0.033002348931367075, "phrase": "spl"}, {"score": 0.00481495049065317, "phrase": "multithreaded_programs"}, {"score": 0.004739773204474094, "phrase": "asynchronous_atomic_methods"}, {"score": 0.0042452552248398445, "phrase": "design_principle"}, {"score": 0.003742711659195878, "phrase": "different_threads"}, {"score": 0.0035141291835319682, "phrase": "model_checking_programs"}, {"score": 0.00327356326590461, "phrase": "programming_language_spl"}, {"score": 0.0031719830393831115, "phrase": "design_pattern"}, {"score": 0.0030735451757603555, "phrase": "simplified_form"}, {"score": 0.0030254743224136273, "phrase": "sequential_java"}, {"score": 0.00281826552772148, "phrase": "asynchronous_method_invocations"}, {"score": 0.0027093285574752457, "phrase": "standard_synchronous_method_calls"}, {"score": 0.0025841336988141235, "phrase": "asynchronous_methods"}, {"score": 0.0023694065215394593, "phrase": "control_state_reachability_problem"}, {"score": 0.002332322771009122, "phrase": "finite_spl_programs"}, {"score": 0.0021049977753042253, "phrase": "counterexample_guided_abstraction-refinement_framework"}], "paper_keywords": [""], "paper_abstract": "In order to make multithreaded programming manageable, programmers often follow a design principle where they break the problem into tasks which are then solved asynchronously and concurrently on different threads. This paper investigates the problem of model checking programs that follow this idiom. We present a programming language SPL that encapsulates this design pattern. SPL extends simplified form of sequential Java to which we add the capability of making asynchronous method invocations in addition to the standard synchronous method calls and the ability to execute asynchronous methods in threads atomically and concurrently. Our main result shows that the control state reachability problem for finite SPL programs is decidable. Therefore, such multithreaded programs can be model checked using the counterexample guided abstraction-refinement framework.", "paper_title": "Model checking multithreaded programs with asynchronous atomic methods", "paper_id": "WOS:000240257000027"}