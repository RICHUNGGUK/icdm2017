{"auto_keywords": [{"score": 0.04541096184471793, "phrase": "compile_time"}, {"score": 0.042644343381250185, "phrase": "run-time_polymorphism"}, {"score": 0.030333460791285072, "phrase": "gil"}, {"score": 0.00481495049065317, "phrase": "generic_programming"}, {"score": 0.004775726266706856, "phrase": "minimal_code_bloat"}, {"score": 0.004737139432581338, "phrase": "generic"}, {"score": 0.004603115982404017, "phrase": "efficient_but_inflexible_code"}, {"score": 0.004491506786670695, "phrase": "exact_types"}, {"score": 0.004418601451254075, "phrase": "generic_functions"}, {"score": 0.003956379470617348, "phrase": "generic_algorithm"}, {"score": 0.003908091457759849, "phrase": "comprehensive_set"}, {"score": 0.003876226041373242, "phrase": "possible_parameter_types"}, {"score": 0.003797690272118125, "phrase": "appropriate_instantiation"}, {"score": 0.0037667216301666196, "phrase": "run_time"}, {"score": 0.0036304470230058413, "phrase": "excessive_template_bloat"}, {"score": 0.0035861227263414537, "phrase": "large_number"}, {"score": 0.003556873173040169, "phrase": "template_instantiations"}, {"score": 0.00342816445816304, "phrase": "assembly_level"}, {"score": 0.003372460634140967, "phrase": "practical_examples"}, {"score": 0.0029581155916843663, "phrase": "necessary_template_instantiations"}, {"score": 0.002839353164780121, "phrase": "adobe"}, {"score": 0.0027931892160452513, "phrase": "generic_image_library"}, {"score": 0.0027365364488693656, "phrase": "notable_reduction"}, {"score": 0.002659142621852998, "phrase": "executable_sizes"}, {"score": 0.0025211567863488962, "phrase": "aggressive_template"}, {"score": 0.002480154140902474, "phrase": "compiler_level"}, {"score": 0.0024398167078355224, "phrase": "significantly_smaller_dispatching_code"}, {"score": 0.002322689143237591, "phrase": "fine_tune"}, {"score": 0.002275557501858879, "phrase": "generic_library"}, {"score": 0.0021662983565317283, "phrase": "real_world_industrial_setting"}, {"score": 0.0021398115287338693, "phrase": "code_size"}, {"score": 0.0021049977753042253, "phrase": "important_factor"}], "paper_keywords": ["Generic programming", " C plus plus templates", " Template bloat", " Template metaprogramming"], "paper_abstract": "Generic programming with C++ templates results in efficient but inflexible code: efficient, because the exact types of inputs to generic functions are known at compile time; inflexible because they must be known at compile time. We show how to achieve run-time polymorphism without compromising performance by instantiating the generic algorithm with a comprehensive set of possible parameter types, and choosing the appropriate instantiation at run time. Applying this approach naively can result in excessive template bloat: a large number of template instantiations. many of which are identical at the assembly level. We show practical examples of this approach quickly approaching the limits of the compiler. Consequently, we combine this method of run-time polymorphism for generic programming, with a strategy for reducing the number of necessary template instantiations. We report on using our approach in GIL, Adobe's open source Generic Image Library. We observed a notable reduction, up to 70% at times, in executable sizes of our test programs. This was the case even with compilers that perform aggressive template hoisting at the compiler level, due to significantly smaller dispatching code. The framework draws from both the generic and generative programming paradigms, using static metaprogramming to fine tune the compilation of a generic library. Our test bed. GIL, is deployed in a real world industrial setting, where code size is often an important factor. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Efficient run-time dispatching in generic programming with minimal code bloat", "paper_id": "WOS:000287834500003"}