{"auto_keywords": [{"score": 0.04743405832670911, "phrase": "efficient_processing"}, {"score": 0.00481495049065317, "phrase": "query_reports"}, {"score": 0.004754600386388821, "phrase": "k_items"}, {"score": 0.004665483918844599, "phrase": "highest_domination_score"}, {"score": 0.003297080148944292, "phrase": "k_best_items"}, {"score": 0.002999012736727594, "phrase": "multi-dimensional_index"}, {"score": 0.002905752244360772, "phrase": "grid-based_index"}, {"score": 0.0027451110240633144, "phrase": "performance_degradation"}, {"score": 0.002676587673012276, "phrase": "high_dimensionalities"}, {"score": 0.002512650904797186, "phrase": "vertically_decomposed_data"}, {"score": 0.0023887436047824386, "phrase": "efficient_algorithms"}, {"score": 0.002228263890334039, "phrase": "progressive_manner"}, {"score": 0.0021726139494880653, "phrase": "studied_algorithms"}, {"score": 0.0021049977753042253, "phrase": "best_overall_performance"}], "paper_keywords": ["Dominating queries", " Progressive algorithms", " Subspaces"], "paper_abstract": "A top-k dominating query reports the k items with the highest domination score. Algorithms for efficient processing of this query have been recently proposed in the literature. Those methods, either index based or index free, apply a series of pruning criteria toward efficient processing. However, they are characterized by several limitations, such as (1) they lack progressiveness (they report the k best items at the end of the processing), (2) they require a multi-dimensional index or they build a grid-based index on-the-fly, which suffers from performance degradation, especially in high dimensionalities, and (3) they do not support vertically decomposed data. In this paper, we design efficient algorithms that can handle any subset of the dimensions in a progressive manner. Among the studied algorithms, the Differential Algorithm shows the best overall performance.", "paper_title": "Progressive processing of subspace dominating queries", "paper_id": "WOS:000297123000006"}