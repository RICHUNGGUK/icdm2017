{"auto_keywords": [{"score": 0.049031285206733555, "phrase": "separation_logic"}, {"score": 0.004815059535982149, "phrase": "modular"}, {"score": 0.004779564521350969, "phrase": "automatic_assertion_checking"}, {"score": 0.004539005582217309, "phrase": "program_logic"}, {"score": 0.004310501708408856, "phrase": "pointer_data_structures"}, {"score": 0.00418510912785895, "phrase": "smallfoot"}, {"score": 0.003774164192882704, "phrase": "data_structures"}, {"score": 0.0028715299874549245, "phrase": "novel_aspects"}, {"score": 0.002706659627293686, "phrase": "frame_axioms"}, {"score": 0.0024405312482831646, "phrase": "\"dirty\"_features"}, {"score": 0.0023869914500743083, "phrase": "memory_disposal"}, {"score": 0.0021049977753042253, "phrase": "concurrent_programs"}], "paper_keywords": [""], "paper_abstract": "Separation logic is a program logic for reasoning about programs that manipulate pointer data structures. We describe Smallfoot, a tool for checking certain lightweight separation logic specifications. The assertions describe the shapes of data structures rather than their detailed contents, and this allows reasoning to be fully automatic. The presentation in the paper is tutorial in style. We illustrate what the tool can do via examples which are oriented toward novel aspects of separation logic, namely: avoidance of frame axioms (which say what a procedure does not change); embracement of \"dirty\" features such as memory disposal and address arithmetic; information hiding in the presence of pointers; and modular reasoning about concurrent programs.", "paper_title": "Smallfoot: Modular automatic assertion checking with separation logic", "paper_id": "WOS:000240360000006"}