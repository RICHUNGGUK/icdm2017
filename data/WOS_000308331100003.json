{"auto_keywords": [{"score": 0.04531239791485491, "phrase": "optimal_use"}, {"score": 0.00481495049065317, "phrase": "-core_matrix_algorithms"}, {"score": 0.004673290248999786, "phrase": "multithreaded_architectures"}, {"score": 0.0045357787854931894, "phrase": "core_implementations"}, {"score": 0.004446349752828045, "phrase": "dense_matrix_computations"}, {"score": 0.0038869467872381957, "phrase": "current_state"}, {"score": 0.003753738096719609, "phrase": "programmability_problem"}, {"score": 0.0032164136388931805, "phrase": "new_algorithms_view"}, {"score": 0.0028822890425197582, "phrase": "high_level"}, {"score": 0.0026217213613095322, "phrase": "runtime_system"}, {"score": 0.0025571463140118805, "phrase": "sharp_contrast"}, {"score": 0.002444883254621769, "phrase": "core_memory"}, {"score": 0.002349228457383314, "phrase": "considerable_programming_complexity"}, {"score": 0.0023259039577313294, "phrase": "explicit_overlap"}, {"score": 0.0021798257311714665, "phrase": "multicore_architectures"}, {"score": 0.0021049977753042253, "phrase": "hardware_accelerators"}], "paper_keywords": ["Algorithms", " Performance", " High-performance", " libraries", " linear algebra", " multithreaded architectures", " out-of-core algorithms"], "paper_abstract": "Out-of-core implementations of algorithms for dense matrix computations have traditionally focused on optimal use of memory so as to minimize I/O, often trading programmability for performance. In this article we show how the current state of hardware and software allows the programmability problem to be addressed without sacrificing performance. This comes from the realizations that memory is cheap and large, making it less necessary to optimally orchestrate I/O, and that new algorithms view matrices as collections of submatrices and computation as operations with those submatrices. This enables libraries to be coded at a high level of abstraction, leaving the tasks of scheduling the computations and data movement in the hands of a runtime system. This is in sharp contrast to more traditional approaches that leverage optimal use of in-core memory and, at the expense of introducing considerable programming complexity, explicit overlap of I/O with computation. Performance is demonstrated for this approach on multicore architectures as well as platforms equipped with hardware accelerators.", "paper_title": "A Runtime System for Programming Out-of-Core Matrix Algorithms-by-Tiles on Multithreaded Architectures", "paper_id": "WOS:000308331100003"}