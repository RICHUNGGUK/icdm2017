{"auto_keywords": [{"score": 0.044702849001308755, "phrase": "general-purpose_processor"}, {"score": 0.03541239344095569, "phrase": "communication_cost"}, {"score": 0.03455018268948868, "phrase": "main_memory"}, {"score": 0.0337082311858877, "phrase": "accelerator's_local_memory"}, {"score": 0.02431531332796967, "phrase": "relative_cost"}, {"score": 0.00481495049065317, "phrase": "efficient_memory_management_for_hardware_accelerated_java_virtual_machines"}, {"score": 0.004774324145784758, "phrase": "application-specific_hardware_accelerators"}, {"score": 0.00467424463996457, "phrase": "system's_performance"}, {"score": 0.00459568664065473, "phrase": "java-based_system"}, {"score": 0.0044424917428102445, "phrase": "hybrid_architecture"}, {"score": 0.004349337717774093, "phrase": "java_virtual_machine"}, {"score": 0.004204320052179726, "phrase": "hardware_accelerator"}, {"score": 0.003928572641266562, "phrase": "significant_cost"}, {"score": 0.003813669883040509, "phrase": "original_performance_improvement"}, {"score": 0.0037021153060910164, "phrase": "careful_layout"}, {"score": 0.0036090884921108086, "phrase": "memory_structure"}, {"score": 0.003548368289666932, "phrase": "major_importance"}, {"score": 0.0034886660821793576, "phrase": "acceleration_performance_benefits"}, {"score": 0.003315499339103866, "phrase": "distributed_shared_memory_consisting"}, {"score": 0.003097865379563127, "phrase": "java_heap"}, {"score": 0.0030586736004285216, "phrase": "memory_access_times"}, {"score": 0.003032820755030689, "phrase": "highly_nonuniform"}, {"score": 0.0027274643070540733, "phrase": "optimal_location"}, {"score": 0.0026929458952693465, "phrase": "java_object's_data"}, {"score": 0.0024423826953133844, "phrase": "specjvm_and_dacapo_benchmarks"}, {"score": 0.0023708445073819277, "phrase": "best_strategy"}, {"score": 0.0022434880661725493, "phrase": "local_accesses"}, {"score": 0.0021501863832966966, "phrase": "self-learning_dynamic_approach"}, {"score": 0.0021049977753042253, "phrase": "best_performance"}], "paper_keywords": ["Algorithms", " Experimentation", " Performance", " Dynamic memory management", " Java Virtual Machine", " hardware acceleration"], "paper_abstract": "Application-specific hardware accelerators can significantly improve a system's performance. In a Java-based system, we then have to consider a hybrid architecture that consists of a Java Virtual Machine running on a general-purpose processor connected to the hardware accelerator. In such a hybrid architecture, data communication between the accelerator and the general-purpose processor can incur a significant cost, which may even annihilate the original performance improvement of adding the accelerator. A careful layout of the data in the memory structure is therefore of major importance to maintain the acceleration performance benefits. This article addresses the reduction of the communication cost in a distributed shared memory consisting of the main memory of the processor and the accelerator's local memory, which are unified in the Java heap. Since memory access times are highly nonuniform, a suitable allocation of objects in either main memory or the accelerator's local memory can significantly reduce the communication cost. We propose several techniques for finding the optimal location for each Java object's data, either statically through profiling or dynamically at runtime. We show how we can reduce communication cost by up to 86% for the SPECjvm and DaCapo benchmarks. We also show that the best strategy is application dependent and also depends on the relative cost of remote versus local accesses. For a relative cost higher than 10, a self-learning dynamic approach often results in the best performance.", "paper_title": "Efficient Memory Management for Hardware Accelerated Java Virtual Machines", "paper_id": "WOS:000269276100001"}