{"auto_keywords": [{"score": 0.0306414280304833, "phrase": "ecoop"}, {"score": 0.00481495049065317, "phrase": "object-oriented_programming"}, {"score": 0.004579780586951551, "phrase": "continuing_quest"}, {"score": 0.00421297029755273, "phrase": "computational_artifacts"}, {"score": 0.004074574278425223, "phrase": "essential_nature"}, {"score": 0.0038112201846057445, "phrase": "irrelevant_details"}, {"score": 0.0033622909109253616, "phrase": "basic_object-oriented_paradigm"}, {"score": 0.0032246835734680377, "phrase": "active_objects"}, {"score": 0.0031712256091350316, "phrase": "message_passing"}, {"score": 0.0027510752634224726, "phrase": "future_developments"}, {"score": 0.0025730425700096365, "phrase": "computational_ideas"}, {"score": 0.0023864566654035924, "phrase": "functional_abstraction"}, {"score": 0.0022696277881969896, "phrase": "textual_programming_languages"}, {"score": 0.0022133711375320244, "phrase": "natural_language"}], "paper_keywords": [""], "paper_abstract": "The history of Object-Oriented Programming can be interpreted as a continuing quest to capture the notion of abstraction - to create computational artifacts that represent the essential nature of a situation, and to ignore irrelevant details. Objects are defined by their essential behavior, not by their physical representation as data. The basic Object-Oriented paradigm of organizing programs as active objects and message passing has now been accepted by the mainstream, for which ECOOP can be justifiably proud. Future developments in the field will focus on capturing computational ideas that can't be expressed well simply by functional abstraction. Programming will evolve from textual programming languages to using natural language, graphics, demonstrated actions, and other techniques.", "paper_title": "The continuing quest for abstraction", "paper_id": "WOS:000239558900011"}