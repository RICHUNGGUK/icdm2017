{"auto_keywords": [{"score": 0.04526211521024841, "phrase": "data_types"}, {"score": 0.00481495049065317, "phrase": "efficient_hta_programs"}, {"score": 0.004746065479362881, "phrase": "oriented_languages"}, {"score": 0.004611224230543916, "phrase": "new_data_types"}, {"score": 0.004501774379030109, "phrase": "new_language_extensions"}, {"score": 0.004270003565426343, "phrase": "parallel_operations"}, {"score": 0.004168618849008299, "phrase": "parallel_programming_productivity"}, {"score": 0.004030695216899165, "phrase": "class_libraries"}, {"score": 0.0037322713756404295, "phrase": "performance_overhead"}, {"score": 0.00334144503360907, "phrase": "data_parallel_operations"}, {"score": 0.0031845067058084583, "phrase": "efficient_parallel_codes"}, {"score": 0.003123808471618783, "phrase": "high_degree"}, {"score": 0.003049555059533735, "phrase": "initial_performance"}, {"score": 0.0030058503645435455, "phrase": "hta_programs"}, {"score": 0.002716915166374506, "phrase": "temporary_htas"}, {"score": 0.0025892330566358503, "phrase": "index_computations"}, {"score": 0.0024914105981393127, "phrase": "performance_problems"}, {"score": 0.0022956075241520064, "phrase": "optimization_process"}, {"score": 0.002198242191529979, "phrase": "mpi-based_codes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel programming", " Optimization", " Programmability", " Libraries", " Data-parallel", " Tiling", " Locality", " Runtime overheads"], "paper_abstract": "Object oriented languages can be easily extended with new data types, which facilitate prototyping new language extensions. A very challenging problem is the development of data types encapsulating data parallel operations, which could improve parallel programming productivity. However, the use of class libraries to implement data types, particularly when they encapsulate parallelism, comes at the expense of performance overhead. This paper describes our experience with the implementation of a C++ data type called hierarchically tiled array (HTA). This object includes data parallel operations and allows the manipulation of tiles to facilitate developing efficient parallel codes and codes with high degree of locality. The initial performance of the HTA programs we wrote was lower than that of their conventional MPI-based counterparts. The overhead was due to factors such as the creation of temporary HTAs and the inability of the compiler to properly inline index computations, among others. We describe the performance problems and the optimizations applied to overcome them as well as their impact on programmability. After the optimization process, our HTA-based implementations run only slightly slower than the MPI-based codes while having much better programmability metrics. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Optimization techniques for efficient HTA programs", "paper_id": "WOS:000308120700001"}