{"auto_keywords": [{"score": 0.029938294659738327, "phrase": "aht-dapp_decoder"}, {"score": 0.00481495049065317, "phrase": "high_rate_convolutional_codes"}, {"score": 0.0048111816723768325, "phrase": "code_rate"}, {"score": 0.004755650013733963, "phrase": "dual_trellis"}, {"score": 0.004620093797504386, "phrase": "posteriori_probability"}, {"score": 0.004506968388996092, "phrase": "high-rate_convolutional_codes"}, {"score": 0.00443308765153716, "phrase": "dual_code's_trellis"}, {"score": 0.004342430078306461, "phrase": "dual_app"}, {"score": 0.004218602458288531, "phrase": "app_relation"}, {"score": 0.004047781270412204, "phrase": "practical_implementation"}, {"score": 0.003997891221012094, "phrase": "dapp_decoder"}, {"score": 0.003916098498242888, "phrase": "metric_representation_schemes"}, {"score": 0.0038518661517315533, "phrase": "log_domain"}, {"score": 0.003804381587788162, "phrase": "log-app_decoding"}, {"score": 0.0036958398682001015, "phrase": "dapp"}, {"score": 0.0036352070472201086, "phrase": "quantization_requirements"}, {"score": 0.003516898780234098, "phrase": "dapp_metrics"}, {"score": 0.003473529187092258, "phrase": "arc_hyperbolic_tangent"}, {"score": 0.0033190180867511605, "phrase": "efficient_approximation"}, {"score": 0.003171358146412577, "phrase": "aht_domain"}, {"score": 0.0031452231581533814, "phrase": "efficient_techniques"}, {"score": 0.003093595537995837, "phrase": "extrinsic_log-likelihood_ratio"}, {"score": 0.0029805015010906013, "phrase": "implementation_complexity"}, {"score": 0.002907405102646616, "phrase": "different_high-rate_codes"}, {"score": 0.0027665315772006575, "phrase": "log-app_decoder"}, {"score": 0.0026324658253309673, "phrase": "punctured_code"}, {"score": 0.0025999744005191713, "phrase": "fully_fixed-point_model"}, {"score": 0.0024842242921857705, "phrase": "optimum_decoder"}, {"score": 0.0024535580495414783, "phrase": "decoding_complexity"}, {"score": 0.00240328454980006, "phrase": "aht-dapp"}, {"score": 0.0021049977753042253, "phrase": "max-log-app_decoder"}], "paper_keywords": ["Arc hyperbolic tangent (AHT)", " a posteriori probability (APP)", " complexity", " convolutional code", " dual code", " fixed point", " high rate", " implementation", " maximum a posteriori probability (MAP) decoder"], "paper_abstract": "This paper deals with a posteriori probability (APP) decoding of high-rate convolutional codes, using the dual code's trellis. After deriving the dual APP (DAPP) algorithm from the APP relation, its trellis-based implementation is addressed. The challenge involved in practical implementation of a DAPP decoder is then highlighted. Metric representation schemes similar to the log domain used for log-APP decoding are shown to be unattractive for DAPP decoding due to quantization requirements. After explaining the nature of the DAPP metrics, an arc hyperbolic tangent (AHT) scheme is proposed and its equivalent arithmetic operations derived. By using an efficient approximation, an addition is translated to an addition in the AHT domain. Efficient techniques for normalization and extrinsic log-likelihood ratio (LLR) calculation are presented which reduce implementation complexity significantly. Simulation results with different high-rate codes are given to show that the AHT-DAPP decoder performs similarly to a log-APP decoder and at the same time performs better than a decoder for a punctured code. A fully fixed-point model of an AHT-DAPP decoder is shown to perform close to an optimum decoder. The decoding complexity of the log-APP and AHT-DAPP decoders are listed and compared for several rate-k/(k+1) codes. It is shown that an AHT-DAPP decoder starts to be less complex from a code rate of 7/8. When compared against a max-log-APP decoder, the AHT-DAPP decoder is less complex at a code rate of 9/10 and above.", "paper_title": "Decoding of High Rate Convolutional Codes Using the Dual Trellis", "paper_id": "WOS:000273134100021"}