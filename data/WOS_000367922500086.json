{"auto_keywords": [{"score": 0.036419388385157375, "phrase": "backend_services"}, {"score": 0.006835580510848551, "phrase": "authorization_file"}, {"score": 0.004814952397682485, "phrase": "mashups"}, {"score": 0.0047468516620285525, "phrase": "multiple_sources"}, {"score": 0.0046797114400479135, "phrase": "new_service"}, {"score": 0.004483909657713567, "phrase": "scalable_access_control"}, {"score": 0.004265760046406154, "phrase": "legacy_applications"}, {"score": 0.004131135118662576, "phrase": "mashup_host_orders"}, {"score": 0.003944112858235306, "phrase": "privacy_protection"}, {"score": 0.003902165732101058, "phrase": "authorization_approach"}, {"score": 0.0038332390893263844, "phrase": "least_privilege"}, {"score": 0.0036990033106718183, "phrase": "malicious_mashups"}, {"score": 0.003569451476205552, "phrase": "privacy-preserving_authorization_method"}, {"score": 0.003432160899769594, "phrase": "different_private_sensitivity_degrees"}, {"score": 0.003395640013786862, "phrase": "authorization_process"}, {"score": 0.0033119237381809617, "phrase": "data-user_relationship_model"}, {"score": 0.003218764138744059, "phrase": "private_sensitivity_degrees"}, {"score": 0.003195885276330599, "phrase": "users'_data"}, {"score": 0.0031170783606525856, "phrase": "encapsulation_file"}, {"score": 0.002986461855862617, "phrase": "authorization_steps"}, {"score": 0.0029024303666003153, "phrase": "regular_use"}, {"score": 0.0028006988338192375, "phrase": "authorization_mechanism"}, {"score": 0.002751174423568564, "phrase": "proposed_method"}, {"score": 0.002635850034826311, "phrase": "real_data_owners"}, {"score": 0.0022851491693940272, "phrase": "application_example"}, {"score": 0.0022447206386952126, "phrase": "experimental_study"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["security", " private", " authorization model"], "paper_abstract": "Mashups, which use multiple sources to create a new service, emerged as an evolution of Web 2.0. However, scalable access control for mashups is difficult. To enable a mashup to gather data from legacy applications and services, users must obey as the mashup host orders. These orders are created without any standard or limits about the privacy protection. This authorization approach violated the principle of least privilege and leaves users vulnerable to misuse of their private information by malicious mashups. To overcome the limitations, we introduce the privacy-preserving authorization method for mashups, which encapsulates the data of backend services with different private sensitivity degrees before the authorization process executes. We also give the data-user relationship model to make standard for backend services when defining private sensitivity degrees of users' data. In this progress, standard encapsulation file and authorization file are created successively. In the end, the authorization steps, which could be set stored for regular use of the mashups, are created based on the authorization mechanism and authorization file. The proposed method mainly focuses on the users and backend services, which are the real data owners. Through this method, users have the ability to observe and control the data involved in the mashup, and the backend services can take the responsibility of their users' private information protecting. In the end of the paper, the application example and a series of experimental study are given to demonstrate the feasibility and efficiency of this method. Copyright (C) 2015 John Wiley & Sons, Ltd.", "paper_title": "Privacy-preserving authorization method for mashups", "paper_id": "WOS:000367922500086"}