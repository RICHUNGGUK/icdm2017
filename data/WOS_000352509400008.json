{"auto_keywords": [{"score": 0.04760245961521714, "phrase": "functional_logic_programming"}, {"score": 0.00481495049065317, "phrase": "functional_logic_programs"}, {"score": 0.004635881163634672, "phrase": "new_type_system"}, {"score": 0.004330099613414957, "phrase": "classical_damas-milner"}, {"score": 0.003953409087444568, "phrase": "type_soundness"}, {"score": 0.0038352452380298464, "phrase": "damas-milner_typing"}, {"score": 0.0036368625017975343, "phrase": "new_notion"}, {"score": 0.0035820833812158035, "phrase": "well-typed_program"}, {"score": 0.003448705829033573, "phrase": "type-indexed_functions"}, {"score": 0.0032951702142329357, "phrase": "existential_types"}, {"score": 0.003245520963944678, "phrase": "opaque_higher-order_patterns"}, {"score": 0.0030311679447397725, "phrase": "extensive_collection"}, {"score": 0.0027671619871474764, "phrase": "negative_side"}, {"score": 0.0021049977753042253, "phrase": "'free_theorems"}], "paper_keywords": [""], "paper_abstract": "We propose a new type system for functional logic programming which is more liberal than the classical Damas-Milner usually adopted, but it is also restrictive enough to ensure type soundness. Starting from Damas-Milner typing of expressions, we propose a new notion of well-typed program that adds support for type-indexed functions, a particular form of existential types, opaque higher-order patterns and generic functions - as shown by an extensive collection of examples that illustrate the possibilities of our proposal. In the negative side, the types of functions must be declared, and therefore types are checked but not inferred. Another consequence is that parametricity is lost, although the impact of this flaw is limited as 'free theorems' were already compromised in functional logic programming because of non-determinism.", "paper_title": "A liberal type system for functional logic programs", "paper_id": "WOS:000352509400008"}