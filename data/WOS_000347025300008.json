{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ca"}, {"score": 0.0047113960612140335, "phrase": "multiple_updating_cycles"}, {"score": 0.004610058444728656, "phrase": "classical_cellular_automata"}, {"score": 0.004002242925856335, "phrase": "clock_cycle"}, {"score": 0.0035507457285983268, "phrase": "cellular_automata"}, {"score": 0.0034742854447532678, "phrase": "different_cells"}, {"score": 0.003362660648932247, "phrase": "different_clocks_cycles"}, {"score": 0.0030157628075954588, "phrase": "different_times"}, {"score": 0.002675252546913683, "phrase": "firing_squad_synchronization_problem"}, {"score": 0.0025892330566358503, "phrase": "new_setting"}, {"score": 0.0024788167298469455, "phrase": "synchronization_algorithm"}, {"score": 0.0022472527731744974, "phrase": "automata_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Firing squad synchronization problem", " Cellular automata", " Asynchronicity"], "paper_abstract": "Classical cellular automata have a single, global clock that allows all the cells to update their states simultaneously at every clock cycle. Here, we overturn this assumption and we study cellular automata where different cells can use different clocks cycles and, as a consequence, they update at different times. We show how it is possible to solve the firing squad synchronization problem in this new setting and propose a synchronization algorithm operating in time linear with respect to the automata size. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "The firing squad synchronization problem on CA with multiple updating cycles", "paper_id": "WOS:000347025300008"}