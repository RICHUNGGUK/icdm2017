{"auto_keywords": [{"score": 0.035043302957613695, "phrase": "impredicative_encodings"}, {"score": 0.00481495049065317, "phrase": "modular_datatypes"}, {"score": 0.004761132425263795, "phrase": "mendler_induction"}, {"score": 0.004681525814235883, "phrase": "functional_programming"}, {"score": 0.004475659507646842, "phrase": "convenient_modular_representation"}, {"score": 0.004425616928975799, "phrase": "recursive_datatypes"}, {"score": 0.004044822781630218, "phrase": "proof_assistants"}, {"score": 0.003932654396285872, "phrase": "type_theory"}, {"score": 0.0036966717141736355, "phrase": "type_definitions"}, {"score": 0.00357395617690842, "phrase": "type-level_fixpoint_operators"}, {"score": 0.0033974527047473044, "phrase": "known_work"}, {"score": 0.003175556211659149, "phrase": "conventional_inductive_reasoning"}, {"score": 0.003140004304719746, "phrase": "weak_induction_principles"}, {"score": 0.0028373742057129126, "phrase": "simpler_technique"}, {"score": 0.0026971491199975083, "phrase": "mendler-style_induction"}, {"score": 0.0025928815987676535, "phrase": "dependent_induction"}, {"score": 0.0024097920845706795, "phrase": "relational_formulations"}, {"score": 0.0023694065215394593, "phrase": "case_study"}, {"score": 0.0023296961971785357, "phrase": "subject_reduction"}, {"score": 0.0023035922232490106, "phrase": "structural_operational_semantics"}, {"score": 0.0022270182923887012, "phrase": "modular_proofs"}, {"score": 0.0021049977753042253, "phrase": "conventional_ones"}], "paper_keywords": [""], "paper_abstract": "In functional programming, datatypes a la carte provide a convenient modular representation of recursive datatypes, based on their initial algebra semantics. Unfortunately it is highly challenging to implement this technique in proof assistants that are based on type theory, like Coq. The reason is that it involves type definitions, such as those of type-level fixpoint operators, that are not strictly positive. The known work-around of impredicative encodings is problematic, insofar as it impedes conventional inductive reasoning. Weak induction principles can be used instead, but they considerably complicate proofs. This paper proposes a novel and simpler technique to reason inductively about impredicative encodings, based on Mendler-style induction. This technique involves dispensing with dependent induction, ensuring that datatypes can be lifted to predicates and relying on relational formulations. A case study on proving subject reduction for structural operational semantics illustrates that the approach enables modular proofs, and that these proofs are essentially similar to conventional ones.", "paper_title": "Reasoning about modular datatypes with Mendler induction", "paper_id": "WOS:000367340500012"}