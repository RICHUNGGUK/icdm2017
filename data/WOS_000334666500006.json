{"auto_keywords": [{"score": 0.0046221918332842995, "phrase": "interactive_machine_learning_systems"}, {"score": 0.004317848984770719, "phrase": "software_testing"}, {"score": 0.003925004567341077, "phrase": "machine-learned_classifiers"}, {"score": 0.003767738552860633, "phrase": "common_kind"}, {"score": 0.0037336520904376687, "phrase": "machine-generated_program"}, {"score": 0.0036332251283046997, "phrase": "end_user"}, {"score": 0.0033937776228549557, "phrase": "test_selection_methods"}, {"score": 0.00330246222643051, "phrase": "small_test_suites"}, {"score": 0.0031556799865964974, "phrase": "large-scale_random_experiments"}, {"score": 0.0031129269142224194, "phrase": "\"gold_standard"}, {"score": 0.0030291453183733897, "phrase": "real_users"}, {"score": 0.0026913130726432645, "phrase": "traditional_software_testing"}, {"score": 0.0025833500717948343, "phrase": "time-pressured_end_users"}, {"score": 0.0023694065215394593, "phrase": "large_number"}, {"score": 0.002213065910356615, "phrase": "arguably_most_difficult-to-detect_faults"}, {"score": 0.002153450937601075, "phrase": "machine_learning_algorithms"}, {"score": 0.002133937537670314, "phrase": "high_confidence"}, {"score": 0.0021049977753042253, "phrase": "incorrect_result"}], "paper_keywords": ["Machine learning", " end-user testing", " test suite size"], "paper_abstract": "How do you test a program when only a single user, with no expertise in software testing, is able to determine if the program is performing correctly? Such programs are common today in the form of machine-learned classifiers. We consider the problem of testing this common kind of machine-generated program when the only oracle is an end user: e.g., only you can determine if your email is properly filed. We present test selection methods that provide very good failure rates even for small test suites, and show that these methods work in both large-scale random experiments using a \"gold standard\" and in studies with real users. Our methods are inexpensive and largely algorithm-independent. Key to our methods is an exploitation of properties of classifiers that is not possible in traditional software testing. Our results suggest that it is plausible for time-pressured end users to interactively detect failures-even very hard-to-find failures-without wading through a large number of successful (and thus less useful) tests. We additionally show that some methods are able to find the arguably most difficult-to-detect faults of classifiers: cases where machine learning algorithms have high confidence in an incorrect result.", "paper_title": "You Are the Only Possible Oracle: Effective Test Selection for End Users of Interactive Machine Learning Systems", "paper_id": "WOS:000334666500006"}