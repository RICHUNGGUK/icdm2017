{"auto_keywords": [{"score": 0.031763843900136826, "phrase": "weakest_failure_detector"}, {"score": 0.00481495049065317, "phrase": "atomic_object_implementations"}, {"score": 0.004178935413340453, "phrase": "weakest_failure_detectors"}, {"score": 0.0038930368103015467, "phrase": "shared_atomic_objects"}, {"score": 0.003626626504149897, "phrase": "distributed_system"}, {"score": 0.003459191419478298, "phrase": "crash-prone_processes"}, {"score": 0.0027961342030212353, "phrase": "basic_register_object"}, {"score": 0.0021049977753042253, "phrase": "popular_atomic_objects"}], "paper_keywords": ["Algorithms", " Theory", " Reliability", " Atomic objects", " failure detection"], "paper_abstract": "This article determines the weakest failure detectors to implement shared atomic objects in a distributed system with crash-prone processes. We first determine the weakest failure detector for the basic register object. We then use that to determine the weakest failure detector for all popular atomic objects including test-and-set, fetch-and-add, queue, consensus and compare-and-swap, which we show is the same.", "paper_title": "Tight Failure Detection Bounds on Atomic Object Implementations", "paper_id": "WOS:000279362300003"}