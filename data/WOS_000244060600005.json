{"auto_keywords": [{"score": 0.04516370013541131, "phrase": "data_sets"}, {"score": 0.04254082380850069, "phrase": "missing_data"}, {"score": 0.00481495049065317, "phrase": "small_software_project_data_sets"}, {"score": 0.004657653216262924, "phrase": "software_project_management"}, {"score": 0.004619134710069517, "phrase": "historical_project_data_sets"}, {"score": 0.00396110232316167, "phrase": "originally_small_software_project_database"}, {"score": 0.003721735062704032, "phrase": "missing_data_imputation"}, {"score": 0.003630073540438812, "phrase": "software_data_sets"}, {"score": 0.0035113478590679133, "phrase": "sophisticated_imputation_methods"}, {"score": 0.003482276061796395, "phrase": "larger_data_sets"}, {"score": 0.003368367923339975, "phrase": "simple_methods"}, {"score": 0.0032990689963715157, "phrase": "small_project_effort_data_sets"}, {"score": 0.003231191164622055, "phrase": "class_mean_imputation"}, {"score": 0.0031254704616199614, "phrase": "k-nn_hot_deck_imputation_method"}, {"score": 0.0030357976028714557, "phrase": "continuous_and_nominal_missing_data"}, {"score": 0.0029242629306714773, "phrase": "incremental_approach"}, {"score": 0.0028052061794607477, "phrase": "mini"}, {"score": 0.002747393616961189, "phrase": "cmi"}, {"score": 0.002581165831422692, "phrase": "larger_industrial_data"}, {"score": 0.002496659907186784, "phrase": "missing_data_percentages"}, {"score": 0.0022782315534795516, "phrase": "mini_method"}, {"score": 0.002231310272815607, "phrase": "k-nn_methods"}, {"score": 0.002176275802465835, "phrase": "new_imputation_technique"}, {"score": 0.0021225958499898182, "phrase": "missing_values"}, {"score": 0.0021049977753042253, "phrase": "small_data_sets"}], "paper_keywords": ["software effort prediction", " missing data", " data imputation", " class mean imputation", " k-NN imputation"], "paper_abstract": "Effort prediction is a very important issue for software project management. Historical project data sets are frequently used to Support such prediction. But missing data are often contained in these data sets and this makes prediction more difficult. One common practice is to ignore the cases with missing data, but this makes the originally small software project database even smaller and call further decrease the accuracy of prediction. The alternative is missing data imputation. There are many imputation methods. Software data sets are frequently characterised by their small size but unfortunately sophisticated imputation methods prefer larger data sets. For this reason we explore using simple methods to impute missing data in small project effort data sets. We propose a class mean imputation (CMI) method based on the k-NN hot deck imputation method (MINI) to impute both continuous and nominal missing data in small data sets. We use an incremental approach to increase the variance of population. To evaluate MINI (and k-NN and CMI methods as benchmarks) we use data sets with 50 cases and 100 cases sampled from a larger industrial data set with 10%, 15%, 20% and 30% missing data percentages respectively. We also simulate Missing Completely at Random (MCAR) and Missing at Random (MAR) missingness mechanisms. The results suggest that the MINI method outperforms both CMI and the k-NN methods. We conclude that this new imputation technique can be used to impute missing values in small data sets. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "A new imputation method for small software project data sets", "paper_id": "WOS:000244060600005"}