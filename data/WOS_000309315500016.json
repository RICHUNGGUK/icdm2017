{"auto_keywords": [{"score": 0.04234913202518394, "phrase": "data_dependencies"}, {"score": 0.04056623242689927, "phrase": "systematic_way"}, {"score": 0.030840627566015025, "phrase": "pattern_language"}, {"score": 0.00481495049065317, "phrase": "service_compositions"}, {"score": 0.004726184966910756, "phrase": "service-based_systems"}, {"score": 0.0046390482426405324, "phrase": "coordination_logic"}, {"score": 0.004553510708976456, "phrase": "service_interactions"}, {"score": 0.004274257668843717, "phrase": "services_context"}, {"score": 0.004195418010131832, "phrase": "'control_flow"}, {"score": 0.004133390261297075, "phrase": "sequence_dependencies"}, {"score": 0.004102719715406821, "phrase": "'data_flow"}, {"score": 0.004012061349250865, "phrase": "current_research"}, {"score": 0.0036553070575015344, "phrase": "'data_flow'_pattern_language"}, {"score": 0.0035216195857272403, "phrase": "data_flow_aspects"}, {"score": 0.0034824716857663114, "phrase": "coordination_scenario"}, {"score": 0.003367611042980526, "phrase": "control_flow"}, {"score": 0.003256526411907174, "phrase": "fundamental_and_basic_building_blocks"}, {"score": 0.003160854709666311, "phrase": "data_flow_design"}, {"score": 0.0030909442697163356, "phrase": "design_criteria"}, {"score": 0.0027741761880779535, "phrase": "potential_coordination_scenario"}, {"score": 0.0027331033178323145, "phrase": "data_dependency"}, {"score": 0.0025556529150386168, "phrase": "real-life_insurance_case"}, {"score": 0.0024620842899061614, "phrase": "complex_data"}, {"score": 0.0023368018449680295, "phrase": "configurable_model-to-code_transformations"}, {"score": 0.0023021922827844276, "phrase": "bpel"}, {"score": 0.0021687806803474367, "phrase": "different_sets"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Data dependencies", " Data flow", " Service composition", " Service coordination", " Coordination logic", " Patterns", " Guided design"], "paper_abstract": "Composing services into service-based systems requires the design of coordination logic, which describes all service interactions realizing the composition. Coordination can be defined as the management of dependencies; in a services context we can discriminate between 'control flow' that manages sequence dependencies and 'data flow' for managing data dependencies. Current research fails to address the management of data dependencies in a systematic way and mostly treats it as subordinate to sequence dependencies. In this article a 'data flow' pattern language is presented that provides a systematic way of designing the data flow aspects of a coordination scenario, orthogonally to the way in which the control flow is designed. Starting from a set of fundamental and basic building blocks, each data dependency will yield a data flow design that takes a set of design criteria (e.g. loose coupling, data confidentiality, etc.) into account. The pattern language is evaluated in three ways. First, it is shown that every potential coordination scenario for managing a data dependency can be composed by the set of patterns. Second, the pattern language was applied in a real-life insurance case to show how it can guide the design of complex data flows. Third, the patterns were implemented in a tool that provides configurable model-to-code transformations for automatically generating BPEL coordination scenarios. In this tool both the data flow and control flow can be designed separately using different sets of patterns. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Managing data dependencies in service compositions", "paper_id": "WOS:000309315500016"}