{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "graphplan"}, {"score": 0.03408785193799398, "phrase": "planning_graph"}, {"score": 0.014060924522110487, "phrase": "functional_goals"}, {"score": 0.013052188360342186, "phrase": "planning_algorithm"}, {"score": 0.011244208175270465, "phrase": "dijkstra's_algorithm"}, {"score": 0.00478218760286811, "phrase": "automatic_service_composition"}, {"score": 0.004685224205630963, "phrase": "business_process"}, {"score": 0.004637478829869904, "phrase": "business_goals"}, {"score": 0.004527947981009528, "phrase": "individual_services"}, {"score": 0.004497129150551236, "phrase": "planning_algorithms"}, {"score": 0.0042725481832853315, "phrase": "recent_research"}, {"score": 0.004185874747231179, "phrase": "best_services"}, {"score": 0.0040869663676860535, "phrase": "result_business_process"}, {"score": 0.003922794571908569, "phrase": "shortest_plan"}, {"score": 0.0038431888954930083, "phrase": "unit_execution_time"}, {"score": 0.0037653254893540472, "phrase": "qos"}, {"score": 0.0037267877774290374, "phrase": "longer_plan"}, {"score": 0.003688773272422118, "phrase": "better_qos_values"}, {"score": 0.0036015684625793775, "phrase": "shorter_one"}, {"score": 0.003456827226847432, "phrase": "systematic_search_algorithm"}, {"score": 0.0032952735750239924, "phrase": "qos_optimization"}, {"score": 0.0031628027642565527, "phrase": "compact_representation"}, {"score": 0.0031305230217636495, "phrase": "execution_paths"}, {"score": 0.0030460403366412126, "phrase": "dijkstra's_principle"}, {"score": 0.0029235593748707495, "phrase": "single-source_graph"}, {"score": 0.0028446460307503343, "phrase": "multiple_sources"}, {"score": 0.0027584046728703297, "phrase": "best_qos_value"}, {"score": 0.002720916895509682, "phrase": "response_time"}, {"score": 0.002702363975375762, "phrase": "polynomial_time"}, {"score": 0.0026565317818265394, "phrase": "single_criteria"}, {"score": 0.0025848074189353397, "phrase": "execution_time"}, {"score": 0.002472352057126189, "phrase": "single_criterion_problem"}, {"score": 0.002455489835065937, "phrase": "multiple_criteria_problem"}, {"score": 0.0023728841359713106, "phrase": "beam_search"}, {"score": 0.002340623433237658, "phrase": "combination_explosion_problem"}, {"score": 0.002293051006249274, "phrase": "optimal_solution"}, {"score": 0.0021782980803068505, "phrase": "anytime_algorithms"}, {"score": 0.0021560445153869985, "phrase": "better_solutions"}, {"score": 0.0021049977753042253, "phrase": "longer_time"}], "paper_keywords": ["QoS optimization", " GraphPlan", " Web service composition"], "paper_abstract": "Automatic service composition is the generation of a business process to fulfill business goals that cannot be fulfilled by individual services. Planning algorithms are frequently used to solve this problem. In addition to satisfying functional goals, recent research is geared toward selecting the best services to optimize the QoS of the result business process. Without considering QoS, the planning algorithm normally searches for the shortest plan, which actually implies the unit execution time for each service. With QoS, a longer plan may have better QoS values and thus is preferred over a shorter one. In this paper, we are motivated to combine a systematic search algorithm like Dijkstra's algorithm with a planning algorithm, GraphPlan, to achieve both functional goals and QoS optimization at the same time. The planning graph generated by GraphPlan is a compact representation of all execution paths, which makes it feasible to apply Dijkstra's principle. In our new QoSGraphPlan algorithm, we extend Dijkstra's algorithm from working on a single-source graph to working on the planning graph whose nodes have multiple sources. Using our method, we can get the best QoS value for throughput and response time in polynomial time when they are the single criteria. For the other QoS criteria, such as execution time, reputation, successful execution rate, and availability, our algorithm is exponential for both single criterion problem and multiple criteria problem. In this case, we extend QoSGraphPlan with beam search to solve the combination explosion problem. As our algorithms search for an optimal solution during the process of constructing the planning graph, they belong to the category of anytime algorithms that return better solutions if they keep running for a longer time.", "paper_title": "Anytime QoS-aware service composition over the GraphPlan", "paper_id": "WOS:000355742000001"}