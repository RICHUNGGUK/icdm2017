{"auto_keywords": [{"score": 0.012296909584276811, "phrase": "linux_kernel"}, {"score": 0.012147458645193036, "phrase": "windows"}, {"score": 0.010435409021063343, "phrase": "dynamic_invariant_detector"}, {"score": 0.010181349045233627, "phrase": "false_alarms"}, {"score": 0.009651699171166747, "phrase": "wrk"}, {"score": 0.00481495049065317, "phrase": "invariant_detection"}, {"score": 0.004775335634705251, "phrase": "commodity_operating_systems"}, {"score": 0.004736045157669388, "phrase": "recent_interest"}, {"score": 0.0046970764288494764, "phrase": "runtime_attestation"}, {"score": 0.004601045179623499, "phrase": "program's_runtime_behavior"}, {"score": 0.004324521292490181, "phrase": "static_source_code_analysis"}, {"score": 0.004271234971981848, "phrase": "integrity_models"}, {"score": 0.004218602458288531, "phrase": "commodity_operating_systems_kernel"}, {"score": 0.004132312946154097, "phrase": "precise_and_static_analysis-based_data_invariant_detection_tool"}, {"score": 0.0033190180867511605, "phrase": "ten_real-world_linux_rootkits"}, {"score": 0.0030680994147125364, "phrase": "dynamic_detector"}, {"score": 0.003030247482854539, "phrase": "constant_invariants_category"}, {"score": 0.0028127163745564777, "phrase": "nine_real-world_windows_malware"}, {"score": 0.002643386043540555, "phrase": "similar_results"}, {"score": 0.002546708483171714, "phrase": "static_analysis"}, {"score": 0.002515272856011004, "phrase": "viable_option"}, {"score": 0.002494531100339247, "phrase": "automated_integrity_property_derivation"}, {"score": 0.0023540387251475615, "phrase": "constant_invariants"}, {"score": 0.002305799666781492, "phrase": "false_positive_rate"}, {"score": 0.0022306602656266545, "phrase": "false_negative_rate"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Integrity modeling", " Invariants detection", " Malware detection", " Static analysis", " Tools"], "paper_abstract": "Recent interest in runtime attestation requires modeling of a program's runtime behavior to formulate its integrity properties. In this paper, we study the possibility of employing static source code analysis to derive integrity models of a commodity operating systems kernel. We develop a precise and static analysis-based data invariant detection tool that overcomes several technical challenges: field-sensitivity, array-sensitivity, and pointer analysis. We apply our tool to Linux kernel 2.4.32 and Windows Research Kernel (WRK). For Linux kernel 2.4.32, our tool identifies 284,471 data invariants that are critical to its runtime integrity, e.g., we use them to detect ten real-world Linux rootkits. Furthermore, comparison with the result of a dynamic invariant detector reveals 17,182 variables that can cause false alarms for the dynamic detector in the constant invariants category. Our tool also works successfully for WRK and reports 202,992 invariants, which we use to detect nine real-world Windows malware and one synthetic Windows malware. When compared with a dynamic invariant detector, we see similar results in terms of false alarms. Our experience suggests that static analysis is a viable option for automated integrity property derivation, and it can have very low false positive rate and very low false negative rate (e.g., for the constant invariants of WRK, the false positive rate is one out of 100,822 and the false negative rate is 0.007% or seven out of 100,822). (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Static analysis based invariant detection for commodity operating systems", "paper_id": "WOS:000337014000005"}