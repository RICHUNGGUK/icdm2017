{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "model_consistency"}, {"score": 0.004731638279336065, "phrase": "core_problem"}, {"score": 0.004676895436217523, "phrase": "model_driven_engineering"}, {"score": 0.004622783000449884, "phrase": "model_consistency_achievement"}, {"score": 0.004361428012479218, "phrase": "active_consistency_techniques"}, {"score": 0.004043541331944951, "phrase": "automatic_errors"}, {"score": 0.003950453462399077, "phrase": "main_problem"}, {"score": 0.0038148090091532933, "phrase": "strict_enforcement"}, {"score": 0.003705323407433896, "phrase": "modeler's_possibilities"}, {"score": 0.0036411406244705557, "phrase": "conflicting_or_tradeoff_solutions"}, {"score": 0.0035366216368204182, "phrase": "temporaries_inconsistencies"}, {"score": 0.003336468343971626, "phrase": "hybrid_approach"}, {"score": 0.0032786537599187125, "phrase": "active_consistency_characteristics"}, {"score": 0.0031476068430779367, "phrase": "inconsistent_models"}, {"score": 0.003093054709625219, "phrase": "managed_mode"}, {"score": 0.002867348342846275, "phrase": "modelling_operations"}, {"score": 0.0025221759076833124, "phrase": "sufficient_part"}, {"score": 0.0024784363584530976, "phrase": "model_state_space"}, {"score": 0.002421291757425244, "phrase": "inconsistent_situation"}, {"score": 0.002310915790114425, "phrase": "consistency_relationship"}, {"score": 0.0022184630090454132, "phrase": "security_design_pattern"}], "paper_keywords": [""], "paper_abstract": "A core problem in Model Driven Engineering is model consistency achievement: all models must satisfy relationships constraining them. Active consistency techniques monitor and control models edition for preventing inconsistencies, e.g., using automatic errors correction. The main problem of these approaches is that strict enforcement of consistency narrows the modeler's possibilities for exploring conflicting or tradeoff solutions; this is just what temporaries inconsistencies enable. In this article, we propose a hybrid approach capitalizing on active consistency characteristics while allowing the user to edit inconsistent models in a managed mode: at any moment we are able to propose a sequence of modelling operations that, when executed, make the model consistent. The solution consists in defining a set of automatons capturing a sufficient part of the model state space for managing any inconsistent situation. We illustrate this approach on a consistency relationship implied by the application of a security design pattern impacting both class and sequence diagrams of a UML2 model.", "paper_title": "Finding a path to model consistency", "paper_id": "WOS:000239521500009"}