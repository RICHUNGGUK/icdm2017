{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "linguistic_tools"}, {"score": 0.04966229511350135, "phrase": "constraint_solvers"}, {"score": 0.047232975924705364, "phrase": "software_system"}, {"score": 0.04060552250529574, "phrase": "current_methods"}, {"score": 0.029672211346433313, "phrase": "snipr"}, {"score": 0.025993233812318835, "phrase": "weighted_sum_model"}, {"score": 0.004710854091689325, "phrase": "controlled_experiment"}, {"score": 0.00462919213721188, "phrase": "entire_set"}, {"score": 0.004278807087784626, "phrase": "key_driver"}, {"score": 0.0042415434489566995, "phrase": "successful_delivery"}, {"score": 0.00406001734835979, "phrase": "large_number"}, {"score": 0.003903269701018361, "phrase": "key_challenge"}, {"score": 0.003752550907120244, "phrase": "realistic_number"}, {"score": 0.003607630811220324, "phrase": "market-driven_software_development_projects"}, {"score": 0.0034835017385881385, "phrase": "prioritization_technique"}, {"score": 0.0032621183241997777, "phrase": "large-scale_projects"}, {"score": 0.00308163068747474, "phrase": "prioritization_method"}, {"score": 0.0029886047149545025, "phrase": "linguistic_tool"}, {"score": 0.002962543869356265, "phrase": "constraint_solver"}, {"score": 0.0027620516806198354, "phrase": "requirements_prioritization"}, {"score": 0.00270221723573854, "phrase": "natural_language_processing_and_satisfiability_modulo_theories_solvers"}, {"score": 0.0023798115577749225, "phrase": "snipr_method"}, {"score": 0.002328238264850759, "phrase": "selection_accuracy"}, {"score": 0.0021049977753042253, "phrase": "large_sets"}], "paper_keywords": ["Requirements prioritization", " Requirements engineering", " Release planning", " NLP", " SMT solver", " Controlled experiment"], "paper_abstract": "Implementing the entire set of requirements for a software system is often not feasible owing to time and resource limitations. A key driver for successful delivery of any software system is the ability to prioritize the large number of requirements. Prioritization of requirements is a key challenge because current methods are not scalable to handle a realistic number of requirements. Current methods for requirements prioritization in market-driven software development projects are neither sufficient nor proven. A prioritization technique that is more time-efficient, accurate, and easier to implement for large-scale projects than current practices is needed. We address these challenges with a prioritization method that incorporates the use of a linguistic tool and constraint solver. In this paper we propose a method, referred to as SNIPR, for requirements prioritization and selection based on natural language processing and satisfiability modulo theories solvers. We present a controlled experiment in which 40 systems engineers prioritized and selected 20 requirements from a list of 100 using SNIPR and the weighted sum model. Results show that the SNIPR method consumes less time, improves selection accuracy, and is easier to perform than the weighted sum model. These results motivate further research using linguistic tools and constraint solvers for the prioritization of large sets of requirements.", "paper_title": "Software requirements prioritization and selection using linguistic tools and constraint solvers-a controlled experiment", "paper_id": "WOS:000363032900009"}