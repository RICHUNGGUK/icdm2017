{"auto_keywords": [{"score": 0.04950097558699653, "phrase": "multi-threaded_applications"}, {"score": 0.00481495049065317, "phrase": "conscious_scheduling"}, {"score": 0.004699381486391658, "phrase": "smp"}, {"score": 0.004614483128885678, "phrase": "extensive_use"}, {"score": 0.004449280529563265, "phrase": "smp_machines"}, {"score": 0.0043161190928529755, "phrase": "thread_scheduling_algorithms"}, {"score": 0.004238134740341528, "phrase": "threads'_characteristics"}, {"score": 0.004061584718427419, "phrase": "current_schedulers"}, {"score": 0.003964052575906845, "phrase": "linux"}, {"score": 0.0036627245728600073, "phrase": "unwarranted_data_cache"}, {"score": 0.0034465894339710864, "phrase": "different_cpus"}, {"score": 0.003070340620983981, "phrase": "linux_scheduler"}, {"score": 0.0030147970456037274, "phrase": "inter-task_data_relations"}, {"score": 0.0028367868542874737, "phrase": "smp_platforms"}, {"score": 0.002735052488172277, "phrase": "memory_throughput"}, {"score": 0.002685558057339722, "phrase": "energy_consumption"}, {"score": 0.0024963543716522087, "phrase": "relevant_data"}, {"score": 0.002392188222609101, "phrase": "highest_affinity"}, {"score": 0.0021700901058417602, "phrase": "chat_benchmark"}, {"score": 0.0021049977753042253, "phrase": "cpu_time"}], "paper_keywords": [""], "paper_abstract": "Extensive use of multi-threaded applications that run on SMP machines, justifies modifications in thread scheduling algorithms to consider threads' characteristics in order to improve performance. Current schedulers (e.g. in Linux, AIX) avoid migrating tasks between CPUs unless absolutely necessary. Unwarranted data cache misses occur when tasks that share data run on different CPUs, or are far apart time-wise on the same CPU. This work presents an extension to the Linux scheduler that exploits inter-task data relations to reduce data cache misses in multi-threaded applications running on SMP platforms, thus improving runtime, memory throughput, and energy consumption. Our approach schedules the tasks to the CPU that holds the relevant data rather than to the one with highest affinity. We observed improvements in CPU 141 time and throughput on several benchmarks. For the Chat benchmark, the improvement in CPU time and cache misses is over 30% on average.", "paper_title": "Data sharing conscious scheduling for multi-threaded applications on SMP machines", "paper_id": "WOS:000241469500024"}