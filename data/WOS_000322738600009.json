{"auto_keywords": [{"score": 0.040988944830941225, "phrase": "processor_failures"}, {"score": 0.00481495049065317, "phrase": "synchronous_data_flow_graphs"}, {"score": 0.004771435352180973, "phrase": "real-time_constraints"}, {"score": 0.0046221918332842995, "phrase": "multiprocessor_system-"}, {"score": 0.004457309741979921, "phrase": "relentless_technology_scaling"}, {"score": 0.004088807948906792, "phrase": "unexpected_processor_failures"}, {"score": 0.004015182362035361, "phrase": "design_time"}, {"score": 0.003960831041259951, "phrase": "popular_approach"}, {"score": 0.0037848978618663684, "phrase": "faulty_processor"}, {"score": 0.0032282396745967504, "phrase": "entire_application"}, {"score": 0.0031845067058084583, "phrase": "throughput_degradation"}, {"score": 0.003141364320497748, "phrase": "latency_constraint"}, {"score": 0.0030017207229983385, "phrase": "synchronous_data_flow"}, {"score": 0.0028944757265206332, "phrase": "sub-optimal_re-scheduling_results"}, {"score": 0.0026188490199688013, "phrase": "live_processors"}, {"score": 0.0025833500717948343, "phrase": "saved_schedule"}, {"score": 0.002548331088496964, "phrase": "task_transfer"}, {"score": 0.002491015208328868, "phrase": "remaining_tasks"}, {"score": 0.00245724480030654, "phrase": "current_iteration"}, {"score": 0.0024129269611844794, "phrase": "preemptive_and_non-preemptive_migration_policies"}, {"score": 0.002326669201839705, "phrase": "better_performance"}, {"score": 0.0022434880661725493, "phrase": "proposed_technique"}, {"score": 0.002203016940021265, "phrase": "real-life_dsp_applications"}, {"score": 0.002124247104243502, "phrase": "timing_constraints"}, {"score": 0.0021049977753042253, "phrase": "random_fault_scenarios"}], "paper_keywords": ["Failure-aware scheduling", " Task rescheduling", " Permanent fault", " Genetic algorithm", " Task migration"], "paper_abstract": "As more processors are integrated into Multiprocessor System-on-Chips (MPSoCs) via relentless technology scaling, the mean-time-to-failure (MTTF) is reduced to the extent that unexpected processor failures are considered during design time. A popular approach to tolerate processor failures is to migrate tasks on the faulty processor to live processors. This approach, however, is not suitable for real-time digital signal processing (DSP) applications since it may not guarantee real-time constraints. In this paper, we propose the re-scheduling of the entire application to minimize throughput degradation under a latency constraint, given that the application is specified by a Synchronous Data Flow (SDF) graph. We obtain sub-optimal re-scheduling results using a genetic algorithm for each scenario of processor failures at compile-time. If a failure is detected at run-time, the live processors obtain the saved schedule, perform task transfer, and execute the remaining tasks of the current iteration. We compare preemptive and non-preemptive migration policies and propose a hybrid policy to obtain better performance. We demonstrate the viability of the proposed technique through experiments with real-life DSP applications as well as randomly generated graphs under timing constraints and random fault scenarios.", "paper_title": "Failure-Aware Task Scheduling of Synchronous Data Flow Graphs Under Real-Time Constraints", "paper_id": "WOS:000322738600009"}