{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mutual_exclusion"}, {"score": 0.015587848514431341, "phrase": "software_solutions"}, {"score": 0.010391314068338268, "phrase": "existing_algorithms"}, {"score": 0.004575053987970206, "phrase": "complex_ad_hoc_algorithms"}, {"score": 0.0044786435725543685, "phrase": "formal_ones"}, {"score": 0.0040779081518317415, "phrase": "atomic_hardware_instructions"}, {"score": 0.003841699919521703, "phrase": "low-cost_processors"}, {"score": 0.0037446875860947916, "phrase": "n-thread_solutions"}, {"score": 0.003557924423642353, "phrase": "exceptionally_subtle_aspects"}, {"score": 0.0031981188104809994, "phrase": "extensive_survey"}, {"score": 0.0026620655619396263, "phrase": "worst-case_high-contention_performance_experiment"}, {"score": 0.0025076619172878945, "phrase": "hardware_atomic_instructions"}, {"score": 0.0023926387830753033, "phrase": "equivalent_hardware_lock"}, {"score": 0.002372298201966367, "phrase": "mellor-crummey"}, {"score": 0.002352159550851133, "phrase": "scott"}, {"score": 0.0022251433045184454, "phrase": "viable_alternative"}, {"score": 0.0022062235065459274, "phrase": "event-driven_programming"}, {"score": 0.002187464225869713, "phrase": "complex_embedded_systems"}, {"score": 0.0021688641066186817, "phrase": "atomic_instructions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software solution", " mutual exclusion", " performance experiment"], "paper_abstract": "Software solutions for mutual exclusion developed over a 30-year period, starting with complex ad hoc algorithms and progressing to simpler formal ones. While it is easy to dismiss software solutions for mutual exclusion, as this family of algorithms is antiquated and most platforms support atomic hardware instructions, there is still a need for these algorithms in threaded, embedded systems running on low-cost processors lacking atomic instructions. While N-thread solutions are usually short (10-25 lines of code), each is ingenious with exceptionally subtle aspects, often making it difficult to prove correctness or construct an implementation. This work examines correctness and performance of the implementations. An extensive survey of existing algorithms is presented, with explanations of the intuition behind the algorithms and how they work. Several errors were found and corrections made, as well as a few small improvements, in the existing algorithms; two new high-performance algorithms were developed. Finally, a worst-case high-contention performance experiment is performed to compare the algorithms and contrast them with three common locks based on hardware atomic instructions. The results show our two new algorithms are highly competitive with an equivalent hardware lock (Mellor-Crummey and Scott) over a range of 1-32 processors. Hence, threading is a viable alternative to event-driven programming for complex embedded systems without atomic instructions. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "High-performance N-thread software solutions for mutual exclusion", "paper_id": "WOS:000350142600008"}