{"auto_keywords": [{"score": 0.03700385809508468, "phrase": "run-time_functions"}, {"score": 0.00481495049065317, "phrase": "grid-based_workflow_tools"}, {"score": 0.004556901872357751, "phrase": "computational_and_data_access_components"}, {"score": 0.0036553070575015344, "phrase": "distributed_resources"}, {"score": 0.0030494153169181334, "phrase": "\"structural\"_patterns"}, {"score": 0.0028630535573013686, "phrase": "workflow_system"}, {"score": 0.0027307746993761035, "phrase": "composition_process"}, {"score": 0.0025038930574283174, "phrase": "\"behavioral\"_patterns"}, {"score": 0.002445347925313158, "phrase": "enactment_process"}, {"score": 0.002407078478216306, "phrase": "application_examples"}], "paper_keywords": ["workflow management", " grid computing", " design patterns", " scheduling", " reconfiguration"], "paper_abstract": "Many grid applications involve combining computational and data access components into complex workflows. A distinction is generally made between mechanisms to compose components (referred to as build-time functions) and subsequent mechanisms to execute these components on distributed resources (referred to as run-time functions). An approach to supporting such build- and run-time functions using specialist patterns and operators is presented. \"Structural\" patterns may be treated as meta-components within a workflow system, and used within the composition process. Subsequently, such components may be scheduled for execution using \"behavioral\" patterns via the enactment process. Application examples are presented to demonstrate how such patterns - and subsequently operators may be used. Their implementation within the Triana Problem Solving Environment is also described.", "paper_title": "Extending grid-based workflow tools with patterns/operators", "paper_id": "WOS:000258920200006"}