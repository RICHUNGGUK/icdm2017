{"auto_keywords": [{"score": 0.04933866662045337, "phrase": "type_dependency"}, {"score": 0.00481495049065317, "phrase": "linear_types"}, {"score": 0.0044887360242000275, "phrase": "benton"}, {"score": 0.003931402465972151, "phrase": "proof-theoretic_account"}, {"score": 0.0036080776793146843, "phrase": "computationally_irrelevant_quantification"}, {"score": 0.0035522043770933828, "phrase": "proof_irrelevance"}, {"score": 0.0031107911390188055, "phrase": "realizability_model"}, {"score": 0.0029916938452328058, "phrase": "nuprl"}, {"score": 0.002461044825190643, "phrase": "hoare_triples"}, {"score": 0.002366763442497185, "phrase": "simpler_type-theoretic_connectives"}, {"score": 0.0022939396079753463, "phrase": "rich_equational_theory"}, {"score": 0.0022583704173318123, "phrase": "dependently-typed_higher-order_imperative_programs"}], "paper_keywords": ["Linear types", " dependent types", " intersection types", " proof irrelevance", " separation logic", " Hoare triples"], "paper_abstract": "In this paper, we show how to integrate linear types with type dependency, by extending the linear/non-linear calculus of Benton to support type dependency. Next, we give an application of this calculus by giving a proof-theoretic account of imperative programming, which requires extending the calculus with computationally irrelevant quantification, proof irrelevance, and a monad of computations. We show the soundness of our theory by giving a realizability model in the style of Nuprl, which permits us to validate not only the beta-laws for each type, but also the eta-laws. These extensions permit us to decompose Hoare triples into a collection of simpler type-theoretic connectives, yielding a rich equational theory for dependently-typed higher-order imperative programs. Furthermore, both the type theory and its model are relatively simple, even when all of the extensions are considered.", "paper_title": "Integrating Dependent and Linear Types", "paper_id": "WOS:000354800500003"}