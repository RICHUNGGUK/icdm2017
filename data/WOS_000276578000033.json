{"auto_keywords": [{"score": 0.03881357674286589, "phrase": "block_constraint"}, {"score": 0.010115302814772213, "phrase": "interleaving_relationship"}, {"score": 0.004140924670517666, "phrase": "target_sequence_t"}, {"score": 0.003945754887845885, "phrase": "huang_et_al"}, {"score": 0.0038054151244558123, "phrase": "merged_lcs_problem"}, {"score": 0.0035181731203867456, "phrase": "longest_common_subsequence"}, {"score": 0.003312009953245191, "phrase": "huang's_algorithm"}, {"score": 0.0031367803372203498, "phrase": "vertical_bar_t_vertical_bar"}, {"score": 0.0030069062905274976, "phrase": "longer_and_shorter_length"}, {"score": 0.0021827653135510225, "phrase": "previous_results"}, {"score": 0.0021049977753042253, "phrase": "large_alphabets"}], "paper_keywords": ["Algorithm", " Dynamic programming", " Longest common subsequence", " Bioinformatics", " Merged sequence"], "paper_abstract": "Detecting the interleaving relationship between sequences has become important because of its wide applications to genomic and signal comparison. Given a target sequence T and two merging sequences A and B, recently Huang et al. propose algorithms for the merged LCS problem, without or with block constraint, whose aim, is to find the longest common subsequence (LCS) with interleaving relationship. Without block constraint, Huang's algorithm requires O(nmr)-time and O(mr)-space, where n = vertical bar T vertical bar, m and r denote the longer and shorter length of A and B, respectively. In this paper; for solving the problem without block constraint, we first propose an algorithm with O(Lnr) time and O(m + Lr) space. We also propose an algorithm to solve the problem, with block constraint. Our algorithms are more efficient than previous results, especially for sequences over large alphabets.", "paper_title": "EFFICIENT SPARSE DYNAMIC PROGRAMMING FOR THE MERGED LCS PROBLEM WITH BLOCK CONSTRAINTS", "paper_id": "WOS:000276578000033"}