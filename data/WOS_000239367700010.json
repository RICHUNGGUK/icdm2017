{"auto_keywords": [{"score": 0.04117275374122391, "phrase": "parity_trees"}, {"score": 0.010484790668864829, "phrase": "power_consumption"}, {"score": 0.00481495049065317, "phrase": "low-overhead_concurrent_error_detection"}, {"score": 0.00452670409375785, "phrase": "parity-tree_selection"}, {"score": 0.004462663711734448, "phrase": "concurrent_error_detection"}, {"score": 0.004420475622957718, "phrase": "ced"}, {"score": 0.004357927940322685, "phrase": "low_overhead"}, {"score": 0.004316722156877335, "phrase": "finite_state_machines"}, {"score": 0.004136044939878838, "phrase": "nonintrusive_ced_method"}, {"score": 0.0038332390893263844, "phrase": "correct_responses"}, {"score": 0.003725470458263889, "phrase": "additional_on-chip_parity_prediction_hardware"}, {"score": 0.0036553070575015344, "phrase": "off-line_testresponse-_compaction_practices"}, {"score": 0.003436242862104006, "phrase": "lossless_compaction"}, {"score": 0.003154360892955196, "phrase": "corresponding_parity_predictor"}, {"score": 0.0030078460113945136, "phrase": "implemented_functions"}, {"score": 0.0029511579080222137, "phrase": "parity-tree-selection_methods"}, {"score": 0.002854505078275351, "phrase": "parity_predictor"}, {"score": 0.002570817338292482, "phrase": "systematic_search"}, {"score": 0.0022824314760583834, "phrase": "incurred_overhead"}, {"score": 0.0022608057001451414, "phrase": "experimental_results"}, {"score": 0.0022393843660697484, "phrase": "benchmark_circuits"}, {"score": 0.0021763278640166707, "phrase": "significant_reduction"}, {"score": 0.0021049977753042253, "phrase": "basic_method"}], "paper_keywords": ["concurrent error detection (CED)", " entropy", " on-line test", " parity trees"], "paper_abstract": "This paper presents discuss the problem of parity-tree selection for performing concurrent error detection (CED) with low overhead in finite state machines (FSMs). We first develop a nonintrusive CED method based on compaction of the state/output bits of an FSM via parity trees and comparison to the correct responses, which are generated through additional on-chip parity prediction hardware. Similar to off-line testresponse- compaction practices, this method minimizes the number, of parity trees required for performing lossless compaction. However, while a few parity trees are typically sufficient, the area and the power consumption of the corresponding parity predictor is not always in proportion with the number of implemented functions. Therefore, parity-tree-selection methods that minimize the overhead of the parity predictor, rather than the number of parity trees, are required. Towards this end, we then extend our method into a systematic search that exploits the correlation between the area and the power consumption of a function and its entropy, in order to select parity trees that minimize the incurred overhead. Experimental results on benchmark circuits demonstrate that this solution achieves significant reduction in area and power consumption over the basic method that simply minimizes the number of parity trees.", "paper_title": "Entropy-driven parity-tree selection for low-overhead concurrent error detection in finite state machines", "paper_id": "WOS:000239367700010"}