{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "large-scale_systems"}, {"score": 0.004637478829869904, "phrase": "powerful_approach"}, {"score": 0.004551199992546761, "phrase": "formal_verification"}, {"score": 0.004438642216475526, "phrase": "software_systems"}, {"score": 0.004195418010131832, "phrase": "state_space_explosion_problem"}, {"score": 0.003965468669507077, "phrase": "space_shortage"}, {"score": 0.0036324746826127997, "phrase": "external_memory_algorithms"}, {"score": 0.0032449610741097992, "phrase": "time_efficiency"}, {"score": 0.0025892330566358503, "phrase": "new_algorithm"}, {"score": 0.002327310963701377, "phrase": "iterative-deepening_depth-first_search"}, {"score": 0.0021049977753042253, "phrase": "selected_representative_benchmarks"}], "paper_keywords": ["Duplicate detection", " dynamic search path management", " linear hash-sorting", " model checking", " state space explosion"], "paper_abstract": "Model checking is a powerful approach for the formal verification of hardware and software systems. However, this approach suffers from the state space explosion problem, which limits its application to large-scale systems due to space shortage. To overcome this drawback, one of the most effective solutions is to use external memory algorithms. In this paper, we propose an I/O efficient model checking algorithm for large-scale systems. To lower I/O complexity and improve time efficiency, we combine three new techniques: 1) a linear hash-sorting technique; 2) a cached duplicate detection technique; and 3) a dynamic path management technique. We show that the new algorithm has a lower I/O complexity than state-of-the-art I/O efficient model checking algorithms, including detect accepting cycle, maximal accepting predecessors, and iterative-deepening depth-first search. In addition, the experiments show that our algorithm obviously outperforms these three algorithms on the selected representative benchmarks in terms of performance.", "paper_title": "An I/O Efficient Model Checking Algorithm for Large-Scale Systems", "paper_id": "WOS:000355212000010"}