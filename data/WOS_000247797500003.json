{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "locality_phases"}, {"score": 0.028680244072852672, "phrase": "phase-sequence_prediction"}, {"score": 0.0047468516620285525, "phrase": "dynamic_memory_optimization"}, {"score": 0.0046797114400479135, "phrase": "dynamic_data"}, {"score": 0.004515967518891287, "phrase": "memory_adaptation"}, {"score": 0.004389089062127892, "phrase": "program_performance"}, {"score": 0.004205395707787349, "phrase": "long_continuous_phases"}, {"score": 0.004058180509184539, "phrase": "dynamic_but_predictable_locality"}, {"score": 0.003944112858235306, "phrase": "phase-based_adaptation"}, {"score": 0.0036207206487324506, "phrase": "four-component_analysis_technique"}, {"score": 0.003569451476205552, "phrase": "locality-based_phase_detection"}, {"score": 0.0034444213065548688, "phrase": "signal_processing_techniques"}, {"score": 0.0033001333942688778, "phrase": "data_access_trace"}, {"score": 0.0031845067058084613, "phrase": "frequency-based_phase"}, {"score": 0.002861302930564756, "phrase": "phase_hierarchy_construction"}, {"score": 0.0027610089418453614, "phrase": "multiple_phases"}, {"score": 0.0026452734009203764, "phrase": "phase_sequence"}, {"score": 0.0026077803487003, "phrase": "program_input_parameters"}, {"score": 0.0022770057597574734, "phrase": "dynamic_data_packing"}, {"score": 0.0022447206386952126, "phrase": "memory_remapping"}, {"score": 0.0021971473452127126, "phrase": "cache_resizing"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["program phase prediction", " phase hierarchy", " locality analysis and optimization", " reconfigurable architecture", " dynamic optimization"], "paper_abstract": "Dynamic data, cache, and memory adaptation can significantly improve program performance when they are applied on long continuous phases of execution that have dynamic but predictable locality. To support phase-based adaptation, this paper defines the concept of locality phases and describes a four-component analysis technique. Locality-based phase detection uses locality analysis and signal processing techniques to identify phases from the data access trace of a program; frequency-based phase marking inserts code markers that mark phases in all executions of the program; phase hierarchy construction identifies the structure of multiple phases; and phase-sequence prediction predicts the phase sequence from program input parameters. The paper shows the accuracy and the granularity of phase and phase-sequence prediction as well as its uses in dynamic data packing, memory remapping, and cache resizing. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Predicting locality phases for dynamic memory optimization", "paper_id": "WOS:000247797500003"}