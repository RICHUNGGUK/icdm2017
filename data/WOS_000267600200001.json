{"auto_keywords": [{"score": 0.04882655221850921, "phrase": "devs_unified_process"}, {"score": 0.014153545111365377, "phrase": "devs"}, {"score": 0.00481495049065317, "phrase": "cross-platform_framework"}, {"score": 0.004772593750252861, "phrase": "net-centric_modeling"}, {"score": 0.004486307844889308, "phrase": "hla"}, {"score": 0.004446827578047345, "phrase": "rmi"}, {"score": 0.004407698117761352, "phrase": "corba"}, {"score": 0.004106725110985659, "phrase": "system_behavior"}, {"score": 0.004052616113326177, "phrase": "physical_and_behavioral_perspectives"}, {"score": 0.003911771812701971, "phrase": "object-oriented_languages"}, {"score": 0.0038774362191574094, "phrase": "java"}, {"score": 0.0038093479435377764, "phrase": "research_work"}, {"score": 0.003759142310009214, "phrase": "java_platform"}, {"score": 0.0034714553759044664, "phrase": "testing_environment"}, {"score": 0.003335948601271999, "phrase": "model_continuity-based_lifecycle_methodology"}, {"score": 0.0032774280543222843, "phrase": "devs-based_modeling_and_simulation"}, {"score": 0.0032057142600527, "phrase": "net-centric_platforms"}, {"score": 0.0030942116765996426, "phrase": "crucial_feature"}, {"score": 0.003066945490483524, "phrase": "run-time_composability"}, {"score": 0.0029998249911619207, "phrase": "soa."}, {"score": 0.002807118943000936, "phrase": "client_application"}, {"score": 0.0027700855441353165, "phrase": "multiple_servers"}, {"score": 0.0027456676902333304, "phrase": "devs_simulation_services"}, {"score": 0.0027094427948305515, "phrase": "simulation_services"}, {"score": 0.0026501241093379786, "phrase": "proposed_symmetrical_services_architecture"}, {"score": 0.0025241429061867633, "phrase": "service_consumer_contrary"}, {"score": 0.002490833392316362, "phrase": "unidirectional_client-server_paradigm"}, {"score": 0.0024148064819862337, "phrase": "services-based_architecture"}, {"score": 0.0022595974985992664, "phrase": "joint_close_air_support"}, {"score": 0.0022297712188622293, "phrase": "business_process_modeling_notation"}, {"score": 0.0021426288417854987, "phrase": "real-world_application"}, {"score": 0.002123730137917387, "phrase": "network_health_monitoring"}], "paper_keywords": ["DEVS", " simulation system architecture", " DUNIP", " DoDAF", " SOA", " web services", " DEVSML", " MDA"], "paper_abstract": "Discrete Event Specification (DEVS) environments are implemented over middleware systems such as HLA, RMI, CORBA and others. DEVS exhibits concepts of systems theory and modeling and supports capturing the system behavior from the physical and behavioral perspectives. Further, they are implemented using object-oriented languages like Java and C++. This research work uses the Java platform to implement DEVS over a Service Oriented Architecture (SOA) framework. Called the DEVS/SOA, the framework supports a development and testing environment known as DEVS Unified Process that is built on a model continuity-based lifecycle methodology. DEVS Unified Process allows DEVS-based Modeling and Simulation (M&S) over net-centric platforms using DEVS/SOA. This framework also provides the crucial feature of run-time composability of coupled systems using SOA. We describe the architecture and designs of the server and the client. The client application communicates with multiple servers hosting DEVS simulation services. These simulation services are developed using the proposed symmetrical services architecture wherein the server can act as both a service provider and a service consumer contrary to the unidirectional client-server paradigm. We also discuss how this services-based architecture provides solutions for cross-platform distributed M&S. We demonstrate the DEVS/SOA framework with a scenario of Joint Close Air Support specified in Business Process Modeling Notation (BPMN). We also provide a real-world application of network health monitoring using DEVS/SOA-layered architectural framework.", "paper_title": "DEVS/SOA: A Cross-Platform Framework for Net-centric Modeling and Simulation in DEVS Unified Process", "paper_id": "WOS:000267600200001"}