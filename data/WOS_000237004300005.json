{"auto_keywords": [{"score": 0.049146612112995924, "phrase": "normal_logic_programs"}, {"score": 0.041864354852283986, "phrase": "local_variables"}, {"score": 0.00481495049065317, "phrase": "local_variable_elimination"}, {"score": 0.004236908273106904, "phrase": "clause_body"}, {"score": 0.0038397509389856625, "phrase": "practical_logic_programming"}, {"score": 0.0033452741392850523, "phrase": "static_analysis"}, {"score": 0.0032800186243040663, "phrase": "program_approximation"}, {"score": 0.0032160319265621285, "phrase": "neural_networks"}, {"score": 0.0028574164693918433, "phrase": "better_performance"}, {"score": 0.0022777800735119405, "phrase": "wide_proper_subclass"}, {"score": 0.0021682027434117095, "phrase": "proposed_transformation"}, {"score": 0.0021049977753042253, "phrase": "clark-kunen_semantics"}], "paper_keywords": [""], "paper_abstract": "A variable is local if it occurs in a clause body but not in its head. Local variables appear naturally in practical logic programming, but they complicate several aspects such as negation, compilation, memoization, static analysis, program approximation by neural networks etc. As a consequence, the absence of local variables yields better performance of several tools and is a prerequisite for many technical results. In this paper, we introduce an algorithm that eliminates local variables from a wide proper subclass of normal logic programs. The proposed transformation preserves the Clark-Kunen semantics for normal logic programs.", "paper_title": "An algorithm for local variable elimination in normal logic programs", "paper_id": "WOS:000237004300005"}