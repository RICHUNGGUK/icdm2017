{"auto_keywords": [{"score": 0.026843733575594938, "phrase": "proposed_scheme"}, {"score": 0.012612819810020139, "phrase": "memory_protection"}, {"score": 0.011505062509262634, "phrase": "dmc"}, {"score": 0.01037791398819056, "phrase": "ert"}, {"score": 0.007928283188496438, "phrase": "pds"}, {"score": 0.00481495049065317, "phrase": "enhanced_memory_reliability_against_multiple_cell_upsets_using_decimal_matrix_code"}, {"score": 0.004779406424192843, "phrase": "transient_multiple_cell"}, {"score": 0.0046570462031865385, "phrase": "major_issues"}, {"score": 0.00452101969521343, "phrase": "radiation_environment"}, {"score": 0.0044052452943364314, "phrase": "data_corruption"}, {"score": 0.004167001961564886, "phrase": "main_problem"}, {"score": 0.00407533728096378, "phrase": "higher_delay_overhead"}, {"score": 0.004015345955907906, "phrase": "matrix_codes"}, {"score": 0.003927004211021119, "phrase": "hamming_codes"}, {"score": 0.0038122196479548425, "phrase": "main_issue"}, {"score": 0.0037421829222825964, "phrase": "double_error_correction_codes"}, {"score": 0.00370077772049505, "phrase": "error_correction_capabilities"}, {"score": 0.003539671663910004, "phrase": "novel_decimal_matrix_code"}, {"score": 0.0033981387193790353, "phrase": "memory_reliability"}, {"score": 0.0033730181385496186, "phrase": "lower_delay_overhead"}, {"score": 0.0032987614613108345, "phrase": "decimal_algorithm"}, {"score": 0.0032501644753165555, "phrase": "maximum_error_detection_capability"}, {"score": 0.0031904205547902695, "phrase": "encoder-reuse_technique"}, {"score": 0.0030856268625708695, "phrase": "area_overhead"}, {"score": 0.0030628094110419697, "phrase": "extra_circuits"}, {"score": 0.0030176779201170306, "phrase": "whole_encoding_and_decoding_processes"}, {"score": 0.0029732094730218488, "phrase": "dmc_encoder"}, {"score": 0.0028648759706752162, "phrase": "proposed_dmc"}, {"score": 0.002822652835367827, "phrase": "well-known_codes"}, {"score": 0.0027810502577708105, "phrase": "existing_hamming"}, {"score": 0.0026401983633087267, "phrase": "obtained_results"}, {"score": 0.0026012779346272848, "phrase": "mean_time"}, {"score": 0.002335707508067455, "phrase": "delay_overhead"}], "paper_keywords": ["Decimal algorithm", " error correction codes (ECCs)", " mean time to failure (MTTF)", " memory", " multiple cells upsets (MCUs)"], "paper_abstract": "Transient multiple cell upsets (MCUs) are becoming major issues in the reliability of memories exposed to radiation environment. To prevent MCUs from causing data corruption, more complex error correction codes (ECCs) are widely used to protect memory, but the main problem is that they would require higher delay overhead. Recently, matrix codes (MCs) based on Hamming codes have been proposed for memory protection. The main issue is that they are double error correction codes and the error correction capabilities are not improved in all cases. In this paper, novel decimal matrix code (DMC) based on divide-symbol is proposed to enhance memory reliability with lower delay overhead. The proposed DMC utilizes decimal algorithm to obtain the maximum error detection capability. Moreover, the encoder-reuse technique (ERT) is proposed to minimize the area overhead of extra circuits without disturbing the whole encoding and decoding processes. ERT uses DMC encoder itself to be part of the decoder. The proposed DMC is compared to well-known codes such as the existing Hamming, MCs, and punctured difference set (PDS) codes. The obtained results show that the mean time to failure (MTTF) of the proposed scheme is 452.9%, 154.6%, and 122.6% of Hamming, MC, and PDS, respectively. At the same time, the delay overhead of the proposed scheme is 73.1%, 69.0%, and 26.2% of Hamming, MC, and PDS, respectively. The only drawback to the proposed scheme is that it requires more redundant bits for memory protection.", "paper_title": "Enhanced Memory Reliability Against Multiple Cell Upsets Using Decimal Matrix Code", "paper_id": "WOS:000329067400011"}