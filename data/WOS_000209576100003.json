{"auto_keywords": [{"score": 0.0295732543972935, "phrase": "gp"}, {"score": 0.00481495049065317, "phrase": "disk_accesses"}, {"score": 0.00470862827326028, "phrase": "energy_efficient_cache_buffer_management"}, {"score": 0.004678681971460014, "phrase": "disk_based_storage_systems"}, {"score": 0.00458997570994803, "phrase": "greedy_prefetching_technique"}, {"score": 0.0045317702763072445, "phrase": "disk_idle_intervals"}, {"score": 0.00446004569562802, "phrase": "large_number"}, {"score": 0.004431673309295777, "phrase": "known_future_requests"}, {"score": 0.0043199694330708464, "phrase": "sub-optimal_solution"}, {"score": 0.004157648639294148, "phrase": "application_pattern"}, {"score": 0.004014196517907476, "phrase": "cpu-bound_application"}, {"score": 0.003912974119795913, "phrase": "required_cpu_time"}, {"score": 0.0038633204164544802, "phrase": "energy_conservation"}, {"score": 0.0037062400890170064, "phrase": "existing_efficient_prefetching_scheme"}, {"score": 0.003544186382527181, "phrase": "disk_power_consumption"}, {"score": 0.0035216195857272403, "phrase": "performance_guarantee"}, {"score": 0.0034218279328844746, "phrase": "disk_characteristic"}, {"score": 0.0034000375671935953, "phrase": "power-optimal_prefetching"}, {"score": 0.003230620599529342, "phrase": "theoretical_model"}, {"score": 0.0031794236141757, "phrase": "energy-efficient_cache_buffer_management"}, {"score": 0.0030696193341147866, "phrase": "optimization_problem"}, {"score": 0.0028520942752886507, "phrase": "offline_cases"}, {"score": 0.0028068790615886755, "phrase": "greedy_partition_algorithm"}, {"score": 0.00266693888510356, "phrase": "proposed_ilp_algorithm"}, {"score": 0.002616274347640382, "phrase": "online_cases"}, {"score": 0.0025583777916403437, "phrase": "lazy_start_power-optimal_prefetching"}, {"score": 0.002477878389967939, "phrase": "simple_threshold_controlled_algorithms"}, {"score": 0.002376994899030373, "phrase": "trace-driven_simulation"}, {"score": 0.0022948394240866555, "phrase": "traditional_aggressive_prefetching"}, {"score": 0.002222613784010603, "phrase": "online_heuristic_algorithms"}, {"score": 0.0021943626624131413, "phrase": "disk_energy_saving"}, {"score": 0.0021595521075096808, "phrase": "power_cycle"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Energy efficient", " Buffer management", " Prefetching", " Disk energy", " Performance guarantee"], "paper_abstract": "Much research has been conducted on energy efficient cache buffer management for disk based storage systems. Some of them use greedy prefetching technique to artificially increase disk idle intervals if there is a large number of known future requests. However, this might result in sub-optimal solution by not exploiting the relationship between I/O access pattern (sequential/random) and application pattern (cpu time required for computing). In a cpu-bound application, by explicitly taking into account the required CPU time it may reduce energy conservation by up to 50% and increase power cycle number by 100% compared to an existing efficient prefetching scheme without this consideration. In this paper, we consider the tradeoff between disk power consumption, performance guarantee and disk reliability all together by proposing a Disk characteristic based Power-Optimal Prefetching (DiscPOP) scheme. Specifically, we make three contributions: (i) A theoretical model is proposed to analyze energy-efficient cache buffer management in disk I/O system and it was formulated as an optimization problem. We have shown it can be solved via an Integer Linear Programming (ILP) technique, we further conduct the following research. (ii) For offline cases, we proposed a Greedy Partition algorithm (GP) to divide the problem into several small ones and solve them separately via the proposed ILP algorithm. (iii) For online cases, we proposed two heuristic algorithms based on Lazy Start Power-Optimal Prefetching (LSPOP) technique. Both of them use simple threshold controlled algorithms to select a prefetching start judiciously and cautiously. We use a trace-driven simulation to evaluate our proposed schemes. The results show GP outperforms the traditional aggressive prefetching by up to 26.9% more disk energy conservation and 17.8% power cycle reduction. The online heuristic algorithms can also improve disk energy saving by up to 20.5% and reduce power cycle by 14.3%. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "DiscPOP: Power-aware buffer management for disk accesses", "paper_id": "WOS:000209576100003"}