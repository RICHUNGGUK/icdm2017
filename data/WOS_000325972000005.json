{"auto_keywords": [{"score": 0.039801378681983475, "phrase": "tile_sizes"}, {"score": 0.00481495049065317, "phrase": "adaptive_parallel_tiled_code_generation"}, {"score": 0.0046798087496851375, "phrase": "tiling"}, {"score": 0.004600389726895716, "phrase": "important_program_transformation"}, {"score": 0.004420472010542188, "phrase": "cache_locality"}, {"score": 0.0043208252177835815, "phrase": "coarse-grained_parallelism"}, {"score": 0.004035107125458193, "phrase": "adaptive_parametric_tiled_code"}, {"score": 0.003989351600022163, "phrase": "parallel_execution_contexts"}, {"score": 0.0038551626276406175, "phrase": "parallel_tiled_code"}, {"score": 0.0034988876789164235, "phrase": "pipelined_parallel_execution"}, {"score": 0.0031393948330209224, "phrase": "novel_solutions"}, {"score": 0.00308610073274614, "phrase": "adaptive_parallel_tiled_code_generation_problem"}, {"score": 0.0029483516334882862, "phrase": "tile_size_selection"}, {"score": 0.0028328599839713866, "phrase": "single_run"}, {"score": 0.002784755056588371, "phrase": "tiled_code"}, {"score": 0.002585539416877115, "phrase": "adaptive_tiling"}, {"score": 0.0023463203637929466, "phrase": "changing_execution_environments"}, {"score": 0.0022933216359142736, "phrase": "dynamically_resized_caches"}, {"score": 0.0022672718785099666, "phrase": "power_savings"}, {"score": 0.00224151735457093, "phrase": "experimental_evaluation"}, {"score": 0.0021049977753042253, "phrase": "developed_approach"}], "paper_keywords": ["parallel parametric tiling", " dynamic tile size adaptation", " accelerated auto-tuning", " code generation", " tile size selection"], "paper_abstract": "Tiling is an important program transformation that is often used to enhance cache locality and to obtain coarse-grained parallelism. In this paper, we address the problem of generating adaptive parametric tiled code for parallel execution contexts; in other words, generating parallel tiled code in which tile sizes can be changed on the fly during execution. Changing of tile sizes during pipelined parallel execution of tiles presents the following fundamental code-generation challenge: the unscanned iteration space may become non-convex. We develop novel solutions for the adaptive parallel tiled code generation problem. Using adaptive tiling, auto-tuning for tile size selection can be accelerated: in a single run of the tiled code, several tile sizes may be tested for their performance and thus expedite auto-tuning. Adaptive tiling is also useful in scenarios where tile sizes need to be dynamically altered to tailor to the changing execution environments, such as dynamically resized caches for power savings. Experimental evaluation on a number of benchmarks demonstrates the effectiveness of the developed approach.", "paper_title": "Adaptive parallel tiled code generation and accelerated auto-tuning", "paper_id": "WOS:000325972000005"}