{"auto_keywords": [{"score": 0.028104815143682498, "phrase": "drum"}, {"score": 0.00481495049065317, "phrase": "scientific_computation"}, {"score": 0.004648609688625397, "phrase": "grid_computing"}, {"score": 0.004527619017250708, "phrase": "hierarchical_and_heterogeneous_computing_systems"}, {"score": 0.004371160978838441, "phrase": "target_environments"}, {"score": 0.004294962474996283, "phrase": "large-scale_scientific_computation"}, {"score": 0.0038309141193444015, "phrase": "grid_computation"}, {"score": 0.0036660436272785476, "phrase": "slow_interfaces"}, {"score": 0.0036020923276404403, "phrase": "modern_supercomputers"}, {"score": 0.0035082436540296406, "phrase": "large_clusters"}, {"score": 0.003447035529485425, "phrase": "hierarchical_network_structures"}, {"score": 0.0033572130837348623, "phrase": "maximum_efficiency"}, {"score": 0.0031565959573536194, "phrase": "computing_environment"}, {"score": 0.002967931416941965, "phrase": "dynamic_load_balancing"}, {"score": 0.00284009509859163, "phrase": "hierarchical_procedures"}, {"score": 0.0027417911324611917, "phrase": "zoltan_toolkit"}, {"score": 0.0025106241866273897, "phrase": "different_balancing_procedures"}, {"score": 0.0024236964502593254, "phrase": "different_parts"}, {"score": 0.0023192471808039746, "phrase": "preliminary_results"}, {"score": 0.002258745901862197, "phrase": "hierarchical_partitionings"}, {"score": 0.0021613897794439227, "phrase": "best_traditional_methods"}, {"score": 0.0021049977753042253, "phrase": "small_hierarchical_cluster"}], "paper_keywords": [""], "paper_abstract": "Cluster and grid computing has made hierarchical and heterogeneous Computing systems increasingly common as target environments for large-scale scientific computation. A cluster may consist of a network of multiprocessors. A grid computation may involve communication across slow interfaces. Modern supercomputers are often large clusters with hierarchical network structures. For maximum efficiency, software must adapt to the computing environment. We focus on partitioning and dynamic load balancing, in particular on hierarchical procedures implemented within the Zoltan Toolkit, guided by DRUM, the Dynamic Resource Utilization Model. Here, different balancing procedures are used in different parts of the domain. Preliminary results show that hierarchical partitionings are competitive with the best traditional methods on a small hierarchical Cluster.", "paper_title": "Hierarchical partitioning and dynamic load balancing for scientific computation", "paper_id": "WOS:000237003200110"}