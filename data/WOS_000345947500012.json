{"auto_keywords": [{"score": 0.03292201043488166, "phrase": "new_package-modularization_metrics"}, {"score": 0.01802168884293881, "phrase": "traditional_package-level_metrics"}, {"score": 0.015719716506582538, "phrase": "package-modularization_metrics"}, {"score": 0.0070736751415118974, "phrase": "software_fault-proneness"}, {"score": 0.006211008847184104, "phrase": "sarkar"}, {"score": 0.00617670749611322, "phrase": "kak"}, {"score": 0.006125617685898971, "phrase": "rama"}, {"score": 0.004880784619752868, "phrase": "fault-proneness_prediction"}, {"score": 0.004683292152590589, "phrase": "large_object-oriented_software_system"}, {"score": 0.004530023871441992, "phrase": "well-identified_services"}, {"score": 0.004285594361623147, "phrase": "large_influence"}, {"score": 0.004065563703649516, "phrase": "new_metrics"}, {"score": 0.004020694957098141, "phrase": "modularization_quality"}, {"score": 0.003976319418067584, "phrase": "important_perspectives"}, {"score": 0.0039433581938239926, "phrase": "inter-module_call_traffic"}, {"score": 0.0038782499819752423, "phrase": "fragile_base-class_design"}, {"score": 0.0038036426379851915, "phrase": "plugin_pollution"}, {"score": 0.0036790558936222566, "phrase": "software_quality"}, {"score": 0.0034039393854836965, "phrase": "useful_predictors"}, {"score": 0.0030715948036518603, "phrase": "object-oriented_systems"}, {"score": 0.003012458457616017, "phrase": "principal_component_analysis"}, {"score": 0.002873524721802591, "phrase": "univariate_prediction_models"}, {"score": 0.0027562523218174996, "phrase": "multivariate_prediction_models"}, {"score": 0.0026807346783271095, "phrase": "fault-prone_packages"}, {"score": 0.002621809123168788, "phrase": "six_open-source_object-oriented_software_systems"}, {"score": 0.002542890176213921, "phrase": "new_and_complementary_views"}, {"score": 0.002385452024255879, "phrase": "expected_direction"}, {"score": 0.002140400526572388, "phrase": "quality_software_systems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Modularization", " Metrics", " Package", " Fault-proneness", " Prediction", " Object-oriented"], "paper_abstract": "Context: In a large object-oriented software system, packages play the role of modules which group related classes together to provide well-identified services to the rest of the system. In this context, it is widely believed that modularization has a large influence on the quality of packages. Recently, Sarkar, Kak, and Rama proposed a set of new metrics to characterize the modularization quality of packages from important perspectives such as inter-module call traffic, state access violations, fragile base-class design, programming to interface, and plugin pollution. These package-modularization metrics are quite different from traditional package-level metrics, which measure software quality mainly from size, extensibility, responsibility, independence, abstractness, and instability perspectives. As such, it is expected that these package-modularization metrics should be useful predictors for fault-proneness. However, little is currently known on their actual usefulness for fault-proneness prediction, especially compared with traditional package-level metrics. Objective: In this paper, we examine the role of these new package-modularization metrics for determining software fault-proneness in object-oriented systems. Method: We first use principal component analysis to analyze whether these new package-modularization metrics capture additional information compared with traditional package-level metrics. Second, we employ univariate prediction models to investigate how these new package-modularization metrics are related to fault-proneness. Finally, we build multivariate prediction models to examine the ability of these new package-modularization metrics for predicting fault-prone packages. Results: Our results, based on six open-source object-oriented software systems, show that: (I) these new package-modularization metrics provide new and complementary views of software complexity compared with traditional package-level metrics; (2) most of these new package-modularization metrics have a significant association with fault-proneness in an expected direction; and (3) these new package-modularization metrics can substantially improve the effectiveness of fault-proneness prediction when used with traditional package-level metrics together. Conclusions: The package-modularization metrics proposed by Sarkar, Kak, and Rama are useful for practitioners to develop quality software systems. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "An empirical analysis of package-modularization metrics: Implications for software fault-proneness", "paper_id": "WOS:000345947500012"}