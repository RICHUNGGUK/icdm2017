{"auto_keywords": [{"score": 0.03614022543627639, "phrase": "lac"}, {"score": 0.014325770562208025, "phrase": "cache_utilization"}, {"score": 0.007786706641688951, "phrase": "block_access_time"}, {"score": 0.00481495049065317, "phrase": "networked_file_system_performance"}, {"score": 0.0047631192993526465, "phrase": "locality-aware_cooperative_cache_protocol"}, {"score": 0.004594326191526569, "phrase": "file_buffer_caches"}, {"score": 0.0045612889352793584, "phrase": "different_clients"}, {"score": 0.004479726755921316, "phrase": "cooperative_caching"}, {"score": 0.004320932773749168, "phrase": "shared_usage"}, {"score": 0.0042898529847155255, "phrase": "distributed_caches"}, {"score": 0.004122850924351265, "phrase": "larger_caches"}, {"score": 0.004078439401031372, "phrase": "data_objects"}, {"score": 0.004049096735491828, "phrase": "peer_clients"}, {"score": 0.004019964326034457, "phrase": "relatively_underutilized_caches"}, {"score": 0.003933813742509612, "phrase": "global_cache_utilization"}, {"score": 0.003753411452669234, "phrase": "effective_analysis"}, {"score": 0.003726398477619122, "phrase": "application_data_access_patterns"}, {"score": 0.003699579190650754, "phrase": "existing_coordination_protocols"}, {"score": 0.003581252556182843, "phrase": "inefficient_memory_utilization"}, {"score": 0.0035554741718298085, "phrase": "undue_interference"}, {"score": 0.0034666972896389777, "phrase": "locality-aware_cooperative_caching_protocol"}, {"score": 0.0033076455392068095, "phrase": "data_block_reuse_distance"}, {"score": 0.003110579040263398, "phrase": "dynamically_adaptive_synchronization_technique"}, {"score": 0.003065938050346064, "phrase": "local_information"}, {"score": 0.002862462250995423, "phrase": "global_coordination"}, {"score": 0.002821371992763293, "phrase": "centralized_control"}, {"score": 0.0027708353425467927, "phrase": "thorough_trace-driven_simulation_experiments"}, {"score": 0.002643624979574088, "phrase": "general_class"}, {"score": 0.00260566789186855, "phrase": "realistic_and_representative_cost_model"}, {"score": 0.002549749054599413, "phrase": "lac_protocol"}, {"score": 0.0025040655195012465, "phrase": "existing_cooperative_caching_protocols"}, {"score": 0.0024770482478966896, "phrase": "high_and_balanced_utilization"}, {"score": 0.0022547515816852266, "phrase": "peer_cache_coordination"}, {"score": 0.002127965733093433, "phrase": "best_performer"}, {"score": 0.0021049977753042253, "phrase": "existing_protocols"}], "paper_keywords": ["Replacement algorithm", " locality", " cooperative caching", " networked file system"], "paper_abstract": "In a distributed environment, the utilization of file buffer caches in different clients may greatly vary. Cooperative caching has been proposed to increase cache utilization by coordinating the shared usage of distributed caches. It allows clients that would more greatly benefit from larger caches to forward data objects to peer clients with relatively underutilized caches. To support such coordination, global cache utilization must be dynamically evaluated. This, in turn, requires an effective analysis of application data access patterns. Existing coordination protocols are demonstrably suboptimal in this respect, exhibiting inefficient memory utilization and undue interference among clients. We propose a locality-aware cooperative caching protocol, called LAC, that is based on analysis and manipulation of data block reuse distance to effectively predict cache utilization and the probability of data reuse at each client. Using a dynamically adaptive synchronization technique, we keep local information up to date and consistently comparable across clients. The system is highly scalable in the sense that global coordination is achieved without centralized control. We have conducted thorough trace-driven simulation experiments to assess the performance differences between LAC and various existing protocols representative of the general class. Using a realistic and representative cost model, we show that the LAC protocol significantly and consistently outperforms existing cooperative caching protocols, demonstrating high and balanced utilization of caches across all clients. In our experiments, LAC reduces block access time by up to 36 percent, with an average of 31 percent, over the system without peer cache coordination, and reduces block access time by up to 22 percent, with an average of 13 percent, over the best performer of the existing protocols.", "paper_title": "Improving Networked File System Performance Using a Locality-Aware Cooperative Cache Protocol", "paper_id": "WOS:000282091200006"}