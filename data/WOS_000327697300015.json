{"auto_keywords": [{"score": 0.03927191262393186, "phrase": "encrypted_data"}, {"score": 0.01341778752363927, "phrase": "mrcrypt"}, {"score": 0.00481495049065317, "phrase": "secure_cloud_computations"}, {"score": 0.004688321299229397, "phrase": "common_use_case"}, {"score": 0.004626255242038005, "phrase": "cloud_computing"}, {"score": 0.00421410521089045, "phrase": "third-party_infrastructure_provider"}, {"score": 0.003942299471749811, "phrase": "data_confidentiality"}, {"score": 0.00378767277402891, "phrase": "client_computations"}, {"score": 0.003381607100127276, "phrase": "input_data_column"}, {"score": 0.0032272929113113203, "phrase": "appropriate_homomorphic_encryption_scheme"}, {"score": 0.002861961643289598, "phrase": "transformed_program"}, {"score": 0.0024875444192203485, "phrase": "client_side"}, {"score": 0.002373997712308394, "phrase": "java"}], "paper_keywords": ["cloud computing", " data confidentiality", " homomorphic encryption", " encryption scheme inference"], "paper_abstract": "In a common use case for cloud computing, clients upload data and computation to servers that are managed by a third-party infrastructure provider. We describe MrCrypt, a system that provides data confidentiality in this setting by executing client computations on encrypted data. MrCrypt statically analyzes a program to identify the set of operations on each input data column, in order to select an appropriate homomorphic encryption scheme for that column, and then transforms the program to operate over encrypted data. The encrypted data and transformed program are uploaded to the server and executed as usual, and the result of the computation is decrypted on the client side. We have implemented MrCrypt for Java and illustrate its practicality on three standard benchmark suites for the Hadoop MapReduce framework. We have also formalized the approach and proven several soundness and security guarantees.", "paper_title": "MrCrypt: Static Analysis for Secure Cloud Computations", "paper_id": "WOS:000327697300015"}