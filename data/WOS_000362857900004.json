{"auto_keywords": [{"score": 0.04834807320597273, "phrase": "information_base"}, {"score": 0.01375353564251095, "phrase": "requested_update"}, {"score": 0.00481495049065317, "phrase": "constraint_violations"}, {"score": 0.0044005599565517875, "phrase": "classical_way"}, {"score": 0.0040880724328903, "phrase": "constraint_violation"}, {"score": 0.003988901168289797, "phrase": "alternative_approach"}, {"score": 0.003513443975425428, "phrase": "new_state"}, {"score": 0.0031327496009959464, "phrase": "logic_formalization"}, {"score": 0.0030193580793871975, "phrase": "uml"}, {"score": 0.002994703308658404, "phrase": "ocl"}, {"score": 0.002898127432512101, "phrase": "conceptual_modeling_community"}, {"score": 0.0025628355581338563, "phrase": "non-executable_operations"}, {"score": 0.0023903140267755576, "phrase": "relational_algebra"}, {"score": 0.002275557501858879, "phrase": "nice_properties"}, {"score": 0.0022477377970612847, "phrase": "repair-computation_process"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Conceptual schema", " UML/OCL", " Integrity constraint", " Repair"], "paper_abstract": "Updating the contents of an information base may violate some of the constraints defined over the schema. The classical way to deal with this problem has been to reject the requested update when its application would lead to some constraint violation. We follow here an alternative approach aimed at automatically computing the repairs of an update, i.e., the minimum additional changes that, when applied together with the requested update, bring the information base to a new state where all constraints are satisfied. Our approach is independent of the language used to define the schema and the constraints, since it is based on a logic formalization of both, although we apply it to UML and OCL because they are widely used in the conceptual modeling community. Our method can be used for maintaining the consistency of an information base after the application of some update, and also for dealing with the problem of fixing up non-executable operations. The fragment of OCL that we use to define the constraints has the same expressiveness as relational algebra and we also identify a subset of it which provides some nice properties in the repair-computation process. Experiments are conducted to analyze the efficiency of our approach. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Computing repairs for constraint violations in UML/OCL conceptual schemas", "paper_id": "WOS:000362857900004"}