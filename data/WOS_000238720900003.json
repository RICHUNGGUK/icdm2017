{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "lr_parser"}, {"score": 0.034241131526864005, "phrase": "lalr_parser"}, {"score": 0.0037273513742154237, "phrase": "state_merging"}, {"score": 0.002680932410366204, "phrase": "even_erroneous_inputs"}, {"score": 0.0022321322970228308, "phrase": "misleading_manner"}, {"score": 0.0021049977753042253, "phrase": "string_matching"}], "paper_keywords": [""], "paper_abstract": "Here a scheme is presented, which reduces the size of an LR parser. It is accomplished by merging two states, which do not perform differently on the same input symbol or non-terminal. This state merging has following advantages: 1. The reduction in number of states is greater than the reduction in an LALR parser. 2. The power of parser is not reduced as it would be in an LALR parser. The above merging scheme has following disadvantages: 1. Even erroneous inputs are accepted. However, it is stopped by changing the notion of acceptance. 2. Errors are report late and in a misleading manner. 3. Parsing takes more time because string matching is done during reduction.", "paper_title": "States merging in LR parser", "paper_id": "WOS:000238720900003"}