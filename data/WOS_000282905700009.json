{"auto_keywords": [{"score": 0.03299320863498854, "phrase": "false_alarms"}, {"score": 0.010240040083641513, "phrase": "large_organizations"}, {"score": 0.007753113517577745, "phrase": "information_content"}, {"score": 0.007706973484887397, "phrase": "software_data"}, {"score": 0.007615509235861631, "phrase": "naive_bayes_classifier"}, {"score": 0.0061417821514585845, "phrase": "version_history_information"}, {"score": 0.0061051724106397694, "phrase": "code_metrics"}, {"score": 0.00481495049065317, "phrase": "statistical_methods"}, {"score": 0.004795772211170926, "phrase": "defect_prediction"}, {"score": 0.0047292449487169345, "phrase": "turkish_telecommunications_industry"}, {"score": 0.004598933498016774, "phrase": "limited_resources"}, {"score": 0.004580611668821347, "phrase": "tight_schedules"}, {"score": 0.004553265070135597, "phrase": "software_development_lifecycle"}, {"score": 0.004392565073466714, "phrase": "permanent_model"}, {"score": 0.00429715240295033, "phrase": "large_telecommunications_company"}, {"score": 0.004280040399277017, "phrase": "turkey"}, {"score": 0.0042459818200777846, "phrase": "software_measurement_program"}, {"score": 0.004212205636322852, "phrase": "pre-release_defects"}, {"score": 0.004096082254543022, "phrase": "project_steps"}, {"score": 0.003999089046152065, "phrase": "new_techniques"}, {"score": 0.0038965930422333035, "phrase": "similar_predictors"}, {"score": 0.0038810583785936505, "phrase": "data_representative"}, {"score": 0.003729065012001506, "phrase": "broader_class"}, {"score": 0.0036045431006006554, "phrase": "experience_report"}, {"score": 0.0035403060198952244, "phrase": "different_techniques"}, {"score": 0.0034289106230496816, "phrase": "prediction_model"}, {"score": 0.0033011569787033297, "phrase": "module_dependency_data"}, {"score": 0.003133989834499141, "phrase": "defect_detection_rates"}, {"score": 0.0030781126453776723, "phrase": "cost-benefit_analysis"}, {"score": 0.0029752625904947974, "phrase": "general_defect_predictors"}, {"score": 0.002939786624664734, "phrase": "wide_range"}, {"score": 0.002893140560765452, "phrase": "turkish_organizations"}, {"score": 0.0026547761341670505, "phrase": "decision_threshold_optimization"}, {"score": 0.0025405019456703325, "phrase": "default_decision_threshold"}, {"score": 0.0025152225484608155, "phrase": "statistical_techniques"}, {"score": 0.0024852182623941494, "phrase": "real_life_scenario"}, {"score": 0.0024703502756471514, "phrase": "difficult_yet_possible_task"}, {"score": 0.0024555710186747615, "phrase": "simple_statistical_and_algorithmic_techniques"}, {"score": 0.0024408799645640345, "phrase": "average_detection_rate"}, {"score": 0.0024117603727471654, "phrase": "dependency_data"}, {"score": 0.002294112789362658, "phrase": "proposed_technique"}, {"score": 0.002284952126640633, "phrase": "naive_bayes"}, {"score": 0.002262209824105154, "phrase": "defect_prediction_model"}, {"score": 0.0022041312401435346, "phrase": "statistical_and_algorithmic_methods"}, {"score": 0.0021389638834794136, "phrase": "pragmatic_considerations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software defect prediction", " Experience report", " Naive Bayes", " Static code attributes"], "paper_abstract": "Context: Building defect prediction models in large organizations has many challenges due to limited resources and tight schedules in the software development lifecycle. It is not easy to collect data, utilize any type of algorithm and build a permanent model at once. We have conducted a study in a large telecommunications company in Turkey to employ a software measurement program and to predict pre-release defects. Based on our prior publication, we have shared our experience in terms of the project steps (i.e. challenges and opportunities). We have further introduced new techniques that improve our earlier results. Objective: In our previous work, we have built similar predictors using data representative for US software development. Our task here was to check if those predictors were specific solely to US organizations or to a broader class of software. Method: We have presented our approach and results in the form of an experience report. Specifically, we have made use of different techniques for improving the information content of the software data and the performance of a Naive Bayes classifier in the prediction model that is locally tuned for the company. We have increased the information content of the software data by using module dependency data and improved the performance by adjusting the hyper-parameter (decision threshold) of the Naive Bayes classifier. We have reported and discussed our results in terms of defect detection rates and false alarms. We also carried out a cost-benefit analysis to show that our approach can be efficiently put into practice. Results: Our general result is that general defect predictors, which exist across a wide range of software (in both US and Turkish organizations), are present. Our specific results indicate that concerning the organization subject to this study, the use of version history information along with code metrics decreased false alarms by 22%, the use of dependencies between modules further reduced false alarms by 8%, and the decision threshold optimization for the Naive Bayes classifier using code metrics and version history information further improved false alarms by 30% in comparison to a prediction using only code metrics and a default decision threshold. Conclusion: Implementing statistical techniques and machine learning on a real life scenario is a difficult yet possible task. Using simple statistical and algorithmic techniques produces an average detection rate of 88%. Although using dependency data improves our results, it is difficult to collect and analyze such data in general. Therefore, we would recommend optimizing the hyper-parameter of the proposed technique, Naive Bayes, to calibrate the defect prediction model rather than employing more complex classifiers. We also recommend that researchers who explore statistical and algorithmic methods for defect prediction should spend less time on their algorithms and more time on studying the pragmatic considerations of large organizations. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Practical considerations in deploying statistical methods for defect prediction: A case study within the Turkish telecommunications industry", "paper_id": "WOS:000282905700009"}