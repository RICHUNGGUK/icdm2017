{"auto_keywords": [{"score": 0.04054795283962518, "phrase": "functional_scenario"}, {"score": 0.00481495049065317, "phrase": "software_inspection"}, {"score": 0.004755353864362941, "phrase": "static_analysis_technique"}, {"score": 0.004638354165775803, "phrase": "defect_detection"}, {"score": 0.0042157995925335544, "phrase": "formal_specification"}, {"score": 0.004112020122418323, "phrase": "systematic_and_rigorous_inspection_method"}, {"score": 0.0036756196381448015, "phrase": "program_paths"}, {"score": 0.003615016816532732, "phrase": "program_path"}, {"score": 0.0033266163944946185, "phrase": "five_steps"}, {"score": 0.003285380677401785, "phrase": "functional_scenarios"}, {"score": 0.0030231983220281836, "phrase": "corresponding_scenarios"}, {"score": 0.002960979624379786, "phrase": "inspection_report"}, {"score": 0.00288800021194675, "phrase": "systematic_and_automatic_generation"}, {"score": 0.0025385621498128243, "phrase": "perspective-based_reading"}, {"score": 0.0023750478314945303, "phrase": "function-related_defects"}, {"score": 0.0022877332844249065, "phrase": "implementation-related_defects"}, {"score": 0.002231310272815607, "phrase": "prototype_tool"}], "paper_keywords": ["Specification-based program inspection", " software inspection", " formal specification", " program verification"], "paper_abstract": "Software inspection is a static analysis technique that is widely used for defect detection, but which suffers from a lack of rigor. In this paper, we address this problem by taking advantage of formal specification and analysis to support a systematic and rigorous inspection method. The aim of the method is to use inspection to determine whether every functional scenario defined in the specification is implemented correctly by a set of program paths and whether every program path of the program contributes to the implementation of some functional scenario in the specification. The method is comprised of five steps: deriving functional scenarios from the specification, deriving paths from the program, linking scenarios to paths, analyzing paths against the corresponding scenarios, and producing an inspection report, and allows for a systematic and automatic generation of a checklist for inspection. We present an example to show how the method can be used, and describe an experiment to evaluate its performance by comparing it to perspective-based reading (PBR). The result shows that our method may be more effective in detecting function-related defects than PBR but slightly less effective in detecting implementation-related defects. We also describe a prototype tool to demonstrate the supportability of the method, and draw some conclusions about our work.", "paper_title": "Formal Specification-Based Inspection for Verification of Programs", "paper_id": "WOS:000308999100008"}