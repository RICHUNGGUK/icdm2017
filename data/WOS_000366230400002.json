{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "component-based_systems"}, {"score": 0.0046993598473345395, "phrase": "component-based_safety-critical_embedded_systems"}, {"score": 0.004195418010131832, "phrase": "safety_property"}, {"score": 0.003964007795174772, "phrase": "precise_alert"}, {"score": 0.0037150687722055727, "phrase": "safe_state"}, {"score": 0.0035100601949451028, "phrase": "component_providers"}, {"score": 0.003107935254560724, "phrase": "single_execution_trace"}, {"score": 0.00303319936111073, "phrase": "safety_property_p."}, {"score": 0.0029126002350975634, "phrase": "counterfactual_reasoning"}, {"score": 0.002685558057339722, "phrase": "component_c"}, {"score": 0.0024963543716522087, "phrase": "component_failures"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Causality", " Failure", " Log", " Counterfactual analysis"], "paper_abstract": "In component-based safety-critical embedded systems it is crucial to determine the cause(s) of the violation of a safety property, be it to issue a precise alert, to steer the system into a safe state, or to determine liability of component providers. In this paper we present an approach to blame components based on a single execution trace violating a safety property P. The diagnosis relies on counterfactual reasoning (\"what would have been the outcome if component C had behaved correctly?\") to distinguish component failures that actually contributed to the outcome from failures that had little or no impact on the violation of P. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "A general framework for blaming in component-based systems", "paper_id": "WOS:000366230400002"}