{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "c._locksmith"}, {"score": 0.004714023408114857, "phrase": "static_analysis_tool"}, {"score": 0.004582722012454012, "phrase": "data_races"}, {"score": 0.004518442937844318, "phrase": "c_programs"}, {"score": 0.0042102651938187114, "phrase": "locksmith's_component"}, {"score": 0.004064117897000019, "phrase": "present_systematic_measurements"}, {"score": 0.003978866233891427, "phrase": "interesting_trade-offs"}, {"score": 0.003681238363808568, "phrase": "benchmark_suite"}, {"score": 0.003629557750546267, "phrase": "stand-alone_applications"}, {"score": 0.003578600071301459, "phrase": "linux_device_drivers"}, {"score": 0.003334309053314909, "phrase": "simple_no-worklist_strategy"}, {"score": 0.0027159094186967247, "phrase": "c_structs"}, {"score": 0.002677744558540711, "phrase": "void_pointers"}, {"score": 0.0024597305738431226, "phrase": "context_sensitivity"}, {"score": 0.0023408288327263294, "phrase": "decreased_scalability"}, {"score": 0.002180848602315088, "phrase": "key_engineering_challenges"}, {"score": 0.0021049977753042253, "phrase": "data_race_detection_analyses"}], "paper_keywords": ["Languages", " Verification", " Reliability", " Algorithms", " Data race", " race detection", " static analysis", " context sensitivity", " correlation inference", " sharing analysis", " contextual effects", " Locksmith"], "paper_abstract": "LOCKSMITH is a static analysis tool for automatically detecting data races in C programs. In this article, we describe each of LOCKSMITH's component analyses precisely, and present systematic measurements that isolate interesting trade-offs between precision and efficiency in each analysis. Using a benchmark suite comprising stand-alone applications and Linux device drivers totaling more than 200,000 lines of code, we found that a simple no-worklist strategy yielded the most efficient interprocedural dataflow analysis; that our sharing analysis was able to determine that most locations are thread-local, and therefore need not be protected by locks; that modeling C structs and void pointers precisely is key to both precision and efficiency; and that context sensitivity yields a much more precise analysis, though with decreased scalability. Put together, our results illuminate some of the key engineering challenges in building LOCKSMITH and data race detection analyses in particular, and constraint-based program analyses in general.", "paper_title": "LOCKSMITH: Practical Static Race Detection for C", "paper_id": "WOS:000286463800002"}