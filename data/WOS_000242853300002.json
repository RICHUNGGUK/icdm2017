{"auto_keywords": [{"score": 0.04857657807930299, "phrase": "bapa"}, {"score": 0.010066258873363512, "phrase": "uninterpreted_elements"}, {"score": 0.010013904402814409, "phrase": "ba"}, {"score": 0.00915243092263702, "phrase": "verification_conditions"}, {"score": 0.008819684110556768, "phrase": "integer_variable"}, {"score": 0.008082048494588752, "phrase": "data_structure"}, {"score": 0.00481495049065317, "phrase": "boolean_algebra"}, {"score": 0.004789437335126437, "phrase": "presburger_arithmetic"}, {"score": 0.0046762829599982245, "phrase": "first-order_multisorted_theory"}, {"score": 0.004614573278897633, "phrase": "boolean_algebras"}, {"score": 0.004505531506839144, "phrase": "presburger_arithmetic_operations"}, {"score": 0.004375735866188847, "phrase": "integer_variables"}, {"score": 0.004329466192376432, "phrase": "unbounded_finite_sets"}, {"score": 0.0042723135679965975, "phrase": "arbitrary_quantification"}, {"score": 0.004094425626777551, "phrase": "static_analysis"}, {"score": 0.004072714718555654, "phrase": "data_structure_consistency_properties"}, {"score": 0.003537350397547142, "phrase": "resulting_constraints"}, {"score": 0.0034906177145305403, "phrase": "bapa._bapa_formulas"}, {"score": 0.003472097367267687, "phrase": "quantifier_alternations"}, {"score": 0.003363013780610744, "phrase": "simulation_relation_conditions"}, {"score": 0.0033097596691947593, "phrase": "program_fragments"}, {"score": 0.0032747247100407416, "phrase": "bapa_constraints"}, {"score": 0.0031718222834860492, "phrase": "data_structures"}, {"score": 0.003121586251550337, "phrase": "constraint_database_query_evaluation_and_loop_invariant_inference"}, {"score": 0.002951925359532765, "phrase": "optimal_alternating_time_complexity"}, {"score": 0.002696514237799097, "phrase": "decidable_extension"}, {"score": 0.0026537861998143365, "phrase": "ba_formulas"}, {"score": 0.0025771976533995205, "phrase": "optimal_alternating_time"}, {"score": 0.0025228853687229978, "phrase": "individual_quantifiers"}, {"score": 0.0024895215136201618, "phrase": "free_variables"}, {"score": 0.002443550243357295, "phrase": "desirable_set"}, {"score": 0.002341628146530332, "phrase": "jahob_system"}, {"score": 0.0023291898023664517, "phrase": "data_structure_consistency_checking"}, {"score": 0.0023168600297519054, "phrase": "java"}, {"score": 0.00227402797304554, "phrase": "straightforward_implementation"}, {"score": 0.002232027082211918, "phrase": "nontrivial_formulas"}, {"score": 0.0021908002369518693, "phrase": "set_variables"}, {"score": 0.0021389088390106033, "phrase": "new_algorithm"}, {"score": 0.002116241428289309, "phrase": "quantifier-free_fragment"}, {"score": 0.0021049977753042253, "phrase": "bapa."}], "paper_keywords": ["Boolean algebra", " Presburger arithmetic", " decision procedure", " quantifier elimination", " complexity", " program verification"], "paper_abstract": "We describe an algorithm for deciding the first-order multisorted theory BAPA, which combines Boolean algebras of sets of uninterpreted elements (BA) and Presburger arithmetic operations (PA). BAPA can express the relationship between integer variables and cardinalities of unbounded finite sets, and it supports arbitrary quantification over sets and integers. Our motivation for BAPA is deciding verification conditions that arise in the static analysis of data structure consistency properties. Data structures often use an integer variable to keep track of the number of elements they store; an invariant of such a data structure is that the value of the integer variable is equal to the number of elements stored in the data structure. When the data structure content is represented by a set, the resulting constraints can be captured in BAPA. BAPA formulas with quantifier alternations arise when verifying programs with annotations containing quantifiers or when proving simulation relation conditions for refinement and equivalence of program fragments. Furthermore, BAPA constraints can be used for proving the termination of programs that manipulate data structures, as well as in constraint database query evaluation and loop invariant inference. We give a formal description of an algorithm for deciding BAPA. We analyze our algorithm and show that it has optimal alternating time complexity and that the complexity of BAPA matches the complexity of PA. Because it works by a reduction to PA, our algorithm yields the decidability of a combination of sets of uninterpreted elements with any decidable extension of PA. When restricted to BA formulas, the algorithm can be used to decide BA in optimal alternating time. Furthermore, the algorithm can eliminate individual quantifiers from a formula with free variables and therefore perform projection onto a desirable set of variables. We have implemented our algorithm and used it to discharge verification conditions in the Jahob system for data structure consistency checking of Java programs; our experience suggest that a straightforward implementation of the algorithm is effective on nontrivial formulas as long as the number of set variables is small. We also report on a new algorithm for solving the quantifier-free fragment of BAPA.", "paper_title": "Deciding Boolean algebra with Presburger arithmetic", "paper_id": "WOS:000242853300002"}