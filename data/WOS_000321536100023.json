{"auto_keywords": [{"score": 0.04067851598209213, "phrase": "lda"}, {"score": 0.00481495049065317, "phrase": "appropriate_number"}, {"score": 0.004771672073078768, "phrase": "latent_topics"}, {"score": 0.004728780808284175, "phrase": "source_code_analysis"}, {"score": 0.00468627326602559, "phrase": "latent_dirichlet_allocation"}, {"score": 0.004561019117546361, "phrase": "data_clustering_algorithm"}, {"score": 0.004439097815805505, "phrase": "text_documents"}, {"score": 0.0043793594257092805, "phrase": "natural-language_applications"}, {"score": 0.004262273304740847, "phrase": "related_words"}, {"score": 0.003772793879444995, "phrase": "source_code"}, {"score": 0.003671865026158296, "phrase": "natural_source_code_units"}, {"score": 0.003400274964240732, "phrase": "programmer-defined_names"}, {"score": 0.0031203609829058587, "phrase": "source_code_documents"}, {"score": 0.0030783143919343972, "phrase": "open_problem"}, {"score": 0.002942196368747418, "phrase": "different_numbers"}, {"score": 0.0028764048059439205, "phrase": "large_number"}, {"score": 0.0028505007899807446, "phrase": "software_systems"}, {"score": 0.002712131567923321, "phrase": "source_code_locality"}, {"score": 0.002687702958515561, "phrase": "topic_model_similarity"}, {"score": 0.0026157259734105, "phrase": "topic_structure"}, {"score": 0.002592163447843447, "phrase": "related_source_code_units"}, {"score": 0.002522738549524317, "phrase": "topic_count"}, {"score": 0.0024111277643627154, "phrase": "software_code_fragments"}, {"score": 0.002252880693912436, "phrase": "arbitrary_software_systems"}, {"score": 0.002162951519368368, "phrase": "open_source_systems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Source code analysis", " Latent Dirichlet Allocation", " Latent topic model", " Code clusters"], "paper_abstract": "Latent Dirichlet Allocation (LDA) is a data clustering algorithm that performs especially well for text documents. In natural-language applications it automatically finds groups of related words (called \"latent topics\") and clusters the documents into sets that are about the same \"topic\". LDA has also been applied to source code, where the documents are natural source code units such as methods or classes, and the words are the keywords, operators, and programmer-defined names in the code. The problem of determining a topic count that most appropriately describes a set of source code documents is an open problem. We address this empirically by constructing clusterings with different numbers of topics for a large number of software systems, and then use a pair of measures based on source code locality and topic model similarity to assess how well the topic structure identifies related source code units. Results suggest that the topic count required can be closely approximated using the number of software code fragments in the system. We extend these results to recommend appropriate topic counts for arbitrary software systems based on an analysis of a set of open source systems. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Using heuristics to estimate an appropriate number of latent topics in source code analysis", "paper_id": "WOS:000321536100023"}