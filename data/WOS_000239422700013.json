{"auto_keywords": [{"score": 0.04557122035267363, "phrase": "generic_functions"}, {"score": 0.004769958800452922, "phrase": "generic_programming"}, {"score": 0.00444559516711374, "phrase": "different_types"}, {"score": 0.0039716833701918365, "phrase": "radically_different_approach"}, {"score": 0.0038794730876377057, "phrase": "f_structure"}, {"score": 0.003789395499639015, "phrase": "previous_work"}, {"score": 0.003548111729206587, "phrase": "generic_views"}, {"score": 0.0032602525602322832, "phrase": "v_view"}, {"score": 0.0030097975788892896, "phrase": "spine_view"}, {"score": 0.0028850668183221947, "phrase": "large_class"}, {"score": 0.0028580564897994175, "phrase": "data_types"}, {"score": 0.002818013056816282, "phrase": "generalised_algebraic_data_types"}, {"score": 0.0024241817763927163, "phrase": "abstract_over_type_constructors"}, {"score": 0.0021652891317252994, "phrase": "main_technical_contributions"}, {"score": 0.0021349310877334378, "phrase": "'type_spine'_view"}, {"score": 0.0021049977753042253, "phrase": "'lifted_spine"}], "paper_keywords": [""], "paper_abstract": "Generic programming allows you to write a function once, and use it many times at different types. Traditionally, generic functions are defined by induction on the structure of types. \"Scrap your boilerplate\" (SYB) is a radically different approach that dispatches on the F structure of values. In previous work, we have shown how to reconcile both approaches using the concept of generic views: many generic functions can be based either on the classical sum-of-products view or on the V view that underlies SYB, the so-called 'spine' view. One distinct advantage of the spine view is its generality: it is applicable to a large class of data types, including generalised algebraic data types. Its main weakness roots in the value-orientation: one can only define generic functions that consume data (show) but not ones that produce data (read). Furthermore, functions that abstract over type constructors (map, reduce) are out of reach. In this paper, we show how to overcome both limitations. The main technical contributions are the 'type spine' view and the 'lifted spine' view.", "paper_title": "Scrap your boilerplate revolutions", "paper_id": "WOS:000239422700013"}