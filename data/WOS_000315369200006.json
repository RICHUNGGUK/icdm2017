{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "famiware"}, {"score": 0.049866074319411424, "phrase": "cardinality-based_feature_models"}, {"score": 0.021188040060127058, "phrase": "evolution_changes"}, {"score": 0.008771010995141052, "phrase": "ambient_intelligence_systems"}, {"score": 0.004708911691961388, "phrase": "modern_systems"}, {"score": 0.004667149874736771, "phrase": "permanent_evolution"}, {"score": 0.00463607061562845, "phrase": "new_devices"}, {"score": 0.004365466946844569, "phrase": "deployed_systems"}, {"score": 0.0042979155971756815, "phrase": "software_product_line_engineering_process"}, {"score": 0.004175212466627628, "phrase": "ambient_intelligence_environments"}, {"score": 0.004101443275426048, "phrase": "famiware_middleware_configurations"}, {"score": 0.003993216345115755, "phrase": "structural_variability"}, {"score": 0.0038619242937768194, "phrase": "structural_variability_present"}, {"score": 0.003802135020791801, "phrase": "large_variety"}, {"score": 0.003785222369604764, "phrase": "heterogeneous_devices"}, {"score": 0.0037516215763875225, "phrase": "management_evolution"}, {"score": 0.003718317938585126, "phrase": "clonable_features"}, {"score": 0.003660743770164945, "phrase": "high_number"}, {"score": 0.003564104190804656, "phrase": "feature_level"}, {"score": 0.003540344153257487, "phrase": "architectural_components"}, {"score": 0.003516741952550531, "phrase": "famiware_middleware"}, {"score": 0.0034315341803108444, "phrase": "evolution_management"}, {"score": 0.00337086009350476, "phrase": "code_generation"}, {"score": 0.0033186480164475655, "phrase": "model_mappings"}, {"score": 0.0032599633778910516, "phrase": "variability_modelling_language"}, {"score": 0.003195178689452538, "phrase": "corresponding_famiware_middleware_architectural_components"}, {"score": 0.002968424524565369, "phrase": "variability_language"}, {"score": 0.0029486238238501804, "phrase": "automatic_code_generation"}, {"score": 0.0028707292563950014, "phrase": "famiware_architectural_model"}, {"score": 0.0027886573969044042, "phrase": "architectural_differences"}, {"score": 0.0027700524906802927, "phrase": "evolved_configuration"}, {"score": 0.0027515713671182785, "phrase": "previous_one"}, {"score": 0.002631467304101826, "phrase": "customized_products"}, {"score": 0.002499798127196099, "phrase": "new_configuration"}, {"score": 0.0024174886546871003, "phrase": "middleware_family"}, {"score": 0.002401354087983099, "phrase": "existing_configurations"}, {"score": 0.0022258348049775, "phrase": "defined_operators"}, {"score": 0.0021766909261431433, "phrase": "evolved_configurations"}, {"score": 0.0021477258390613123, "phrase": "cloned_features"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Middleware family", " Software Product Lines", " Feature Models", " Evolution"], "paper_abstract": "Context: Ambient Intelligence systems domain is an outstanding example of modern systems that are in permanent evolution, as new devices, technologies or facilities are continuously appearing. This means it would be desirable to have a mechanism that helps with the propagation of evolution changes in deployed systems. Objective: We present a software product line engineering process to manage the evolution of FamiWare, a family of middleware for ambient intelligence environments. This process drives the evolution of FamiWare middleware configurations using cardinality-based feature models, which are especially well suited to express the structural variability of ambient intelligence systems. Method: FamiWare uses cardinality-based feature models and clonable features to model the structural variability present in ambient intelligence systems, composed of a large variety of heterogeneous devices. Since the management evolution of configurations with clonable features is manually untreatable due to the high number of features, our process automates it and propagates changes made at feature level to the architectural components of the FamiWare middleware. This is a model driven development process as the evolution management, the propagation of evolution changes and the code generation are performed using some kind of model mappings and transformations. Concretely we present a variability modelling language to map the selection of features to the corresponding FamiWare middleware architectural components. Results: Our process is able to manage the evolution of cardinality-based feature models with thousands of features, something which is not possible to tackle manually. Thanks to the use of the variability language and the automatic code generation it is possible to propagate and maintain a correspondence between the FamiWare architectural model and the code. The process is then able to calculate the architectural differences between the evolved configuration and the previous one. Checking these differences, our process helps to calculate the effort needed to perform the evolution changes in the customized products. To perform those tasks we have defined two operators, one to calculate the differences between two feature model configurations and another to create a new configuration from a previous one. Conclusion: Our process automatically propagates the evolution changes of the middleware family into the existing configurations where the middleware is already deployed and also helps us to calculate the effort in performing the changes in every configuration. Finally, we validated our approach, demonstrating the functioning of the defined operators and showing that by using our tool we can generate evolved configurations for FamiWare with thousands of cloned features, for several case studies. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Architectural evolution of FamiWare using cardinality-based feature models", "paper_id": "WOS:000315369200006"}