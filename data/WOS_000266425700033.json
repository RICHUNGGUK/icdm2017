{"auto_keywords": [{"score": 0.04836250326740319, "phrase": "keyword_search"}, {"score": 0.03347678520709377, "phrase": "return_information"}, {"score": 0.029803522994788154, "phrase": "search_results"}, {"score": 0.00481495049065317, "phrase": "lca_based_xml_semantic_search"}, {"score": 0.004688823162073856, "phrase": "xml_data"}, {"score": 0.004505771917193237, "phrase": "xml_structure"}, {"score": 0.004446349752828045, "phrase": "new_user_interface"}, {"score": 0.004258563634666145, "phrase": "different_terms"}, {"score": 0.003919350990355722, "phrase": "return_node"}, {"score": 0.003691913669486176, "phrase": "xml_semantic_search"}, {"score": 0.003352825186671963, "phrase": "ambiguous_keywords"}, {"score": 0.003308557560574077, "phrase": "domain_ontology"}, {"score": 0.003243246027166794, "phrase": "semantic_meaningful_answers"}, {"score": 0.0031372369299648203, "phrase": "user_queries"}, {"score": 0.003075296862372287, "phrase": "shortest_path"}, {"score": 0.0030447855364295015, "phrase": "meaningful_connections"}, {"score": 0.002955050521440921, "phrase": "semantic_ranking"}, {"score": 0.002848947756758754, "phrase": "semantic_relationship"}, {"score": 0.0027834145465170292, "phrase": "higher_relevance"}, {"score": 0.0026304533650262545, "phrase": "proximity_search"}, {"score": 0.002436765760924074, "phrase": "lcea"}, {"score": 0.002357055030818803, "phrase": "schema_information"}, {"score": 0.0023259185028598932, "phrase": "dtd"}, {"score": 0.002310482790486003, "phrase": "xml_schema"}, {"score": 0.002287542098172185, "phrase": "first_experiment"}, {"score": 0.002190729937598138, "phrase": "compact_meaningful_results"}, {"score": 0.0021049977753042253, "phrase": "second_experiment"}], "paper_keywords": ["LCA", " ontology", " semantic search", " XML", " XSemantic"], "paper_abstract": "One of the most convenient ways to query XML data is a keyword search because it does not require any knowledge of XML structure or learning a new user interface. However, the keyword search is ambiguous. The users may use different terms to search for the same information. Furthermore, it is difficult for a system to decide which node is likely to be chosen as a return node and how much information should be included in the result. To address these challenges, we propose an XML semantic search based on keywords called XSemantic. On the one hand, we give three definitions to complete in terms of semantics. Firstly, the semantic term expansion, our system is robust from the ambiguous keywords by using the domain ontology. Secondly, to return semantic meaningful answers,, we automatically infer the return information from the user queries and take advantage of the shortest path to return meaningful connections between keywords. Thirdly, we present the semantic ranking that reflects the degree of similarity as well as the semantic relationship so that the search results with the higher relevance are presented to the users first. On the other hand, in the LCA and the proximity search approaches, we investigated the problem of information included in the search results. Therefore, we introduce the notion of the Lowest Common Element Ancestor (LCEA) and define our simple rule without any requirement on the schema information such as the DTD or XML Schema. The first experiment indicated that XSemantic not only properly infers the return information but also generates compact meaningful results. Additionally, the benefits of our proposed semantics are demonstrated by the second experiment.", "paper_title": "XSemantic: An Extension of LCA Based XML Semantic Search", "paper_id": "WOS:000266425700033"}