{"auto_keywords": [{"score": 0.04814050608144561, "phrase": "loop_formulas"}, {"score": 0.00481495049065317, "phrase": "lin-zhao_theorem"}, {"score": 0.004506968388996092, "phrase": "fangzhen_lin"}, {"score": 0.00443308765153716, "phrase": "yuting_zhao"}, {"score": 0.004218602458288531, "phrase": "logic_program"}, {"score": 0.004115267130977749, "phrase": "propositional_formula"}, {"score": 0.0039813976794342, "phrase": "program's_stable_models"}, {"score": 0.0029805015010906013, "phrase": "corresponding_propositional_formula"}, {"score": 0.002676418520290942, "phrase": "intermediate_step"}, {"score": 0.0025892330566358503, "phrase": "program's_completion"}, {"score": 0.00240328454980006, "phrase": "loop_formula"}, {"score": 0.002344311033783139, "phrase": "stable_models"}, {"score": 0.002175913488493802, "phrase": "disjunctive_programs"}, {"score": 0.0021049977753042253, "phrase": "nested_expressions"}], "paper_keywords": ["logic programming", " stable models", " answer set programming", " nonmonotonic reasoning", " Clark's completion", " loop formulas"], "paper_abstract": "The theorem on loop formulas due to Fangzhen Lin and Yuting Zhao shows how to turn a logic program into a propositional formula that describes the program's stable models. In this paper we simplify and generalize the statement of this theorem. The simplification is achieved by modifying the definition of a loop in such a way that a program is turned into the corresponding propositional formula by adding loop formulas directly to the conjunction of its rules, without the intermediate step of forming the program's completion. The generalization makes the idea of a loop formula applicable to stable models in the sense of a very general definition that covers disjunctive programs, programs with nested expressions, and more.", "paper_title": "A generalization of the Lin-Zhao theorem", "paper_id": "WOS:000241947500004"}