{"auto_keywords": [{"score": 0.0045820747375409435, "phrase": "online_algorithms_paging"}, {"score": 0.00428892403807229, "phrase": "randomized_paging_algorithms"}, {"score": 0.004218602458288531, "phrase": "tight_bound"}, {"score": 0.003948613642680196, "phrase": "competitive_ratio"}, {"score": 0.0036958398682001015, "phrase": "existing_algorithms"}, {"score": 0.0035461111918923117, "phrase": "high_running_times"}, {"score": 0.0034024277222012597, "phrase": "new_randomized_paging_algorithm"}, {"score": 0.0032916702592724217, "phrase": "optimal_competitiveness"}, {"score": 0.0032109670662222416, "phrase": "fast_implementations"}, {"score": 0.0029559346879594254, "phrase": "internal_memory"}, {"score": 0.002907405102646616, "phrase": "best_previous_solution"}, {"score": 0.0024842242921857705, "phrase": "onlinemin"}, {"score": 0.0021049977753042253, "phrase": "page_request"}], "paper_keywords": ["On-line algorithms", " Competitive analysis", " Paging", " Randomized algorithms"], "paper_abstract": "In the field of online algorithms paging is one of the most studied problems. For randomized paging algorithms a tight bound of H (k) on the competitive ratio has been known for decades, yet existing algorithms matching this bound have high running times. We present a new randomized paging algorithm OnlineMin that has optimal competitiveness and allows fast implementations. In fact, if k pages fit in internal memory the best previous solution required O(k (2)) time per request and O(k) space. We present two implementations of OnlineMin which use O(k) space, but only O(logk) worst case time and O(logk/loglogk) worst case time per page request respectively.", "paper_title": "OnlineMin: A Fast Strongly Competitive Randomized Paging Algorithm", "paper_id": "WOS:000348448100003"}