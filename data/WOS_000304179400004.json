{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "sound_foundation"}, {"score": 0.0047588556219929756, "phrase": "autonomous_objects"}, {"score": 0.004675930527604869, "phrase": "remote_method_invocations"}, {"score": 0.0045143706249204905, "phrase": "distributed_extension"}, {"score": 0.004232475065285966, "phrase": "functional_objects"}, {"score": 0.0040385352882334235, "phrase": "request-reply_mechanism"}, {"score": 0.0039449104968131655, "phrase": "method_calls"}, {"score": 0.0038085117064624208, "phrase": "awaited_results"}, {"score": 0.003633927813203731, "phrase": "object_language"}, {"score": 0.0035705347414368726, "phrase": "concise_representation"}, {"score": 0.0034673190692473903, "phrase": "active_objects"}, {"score": 0.0034068225125064586, "phrase": "asynchronous_method_invocations"}, {"score": 0.0030653094605910727, "phrase": "type_system"}, {"score": 0.002941913249957503, "phrase": "\"progress\"_property"}, {"score": 0.0026313840069327713, "phrase": "isabelle_theorem_prover"}, {"score": 0.0025254115243261875, "phrase": "important_step"}, {"score": 0.002452333524620638, "phrase": "distributed_languages"}, {"score": 0.0023124457559811087, "phrase": "different_binder_representations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Theorem proving", " Object calculus", " Futures", " Distribution", " Typing", " Binders"], "paper_abstract": "This paper provides a sound foundation for autonomous objects communicating by remote method invocations and futures. As a distributed extension of zeta-calculus we define ASP(fun), a calculus of functional objects, behaving autonomously and communicating by a request-reply mechanism: requests are method calls handled asynchronously and futures represent awaited results for requests. This results in an object language enabling a concise representation of a set of active objects interacting by asynchronous method invocations. This paper first presents the ASP(fun) calculus and its semantics. Then, we provide a type system for ASP(fun) which guarantees the \"progress\" property. Most importantly, ASP(fun) has been formalised; its properties have been formalised and proved using the Isabelle theorem prover and we consider this as an important step in the formalization of distributed languages. This work was also an opportunity to study different binder representations and experiment with two of them in the Isabelle/HOL theorem prover. (c) 2011 Elsevier B.V. All rights reserved.", "paper_title": "ASP(fun): A typed functional active object calculus", "paper_id": "WOS:000304179400004"}