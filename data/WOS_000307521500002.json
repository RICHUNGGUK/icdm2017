{"auto_keywords": [{"score": 0.03640035723222646, "phrase": "uml_diagrams"}, {"score": 0.00481495049065317, "phrase": "rule-based_application_models"}, {"score": 0.004710620078577185, "phrase": "paper_challenges"}, {"score": 0.004666598697538815, "phrase": "knowledge_engineering_methods"}, {"score": 0.004536976344964643, "phrase": "visual_design_methods"}, {"score": 0.004508661664944657, "phrase": "software_applications"}, {"score": 0.004397151276300207, "phrase": "practical_design_issues"}, {"score": 0.004369705395855237, "phrase": "rule-based_models"}, {"score": 0.004328856052035968, "phrase": "business_applications"}, {"score": 0.004248300851273616, "phrase": "mvc"}, {"score": 0.004195418010131832, "phrase": "equivalent_architectural_pattern"}, {"score": 0.004117329555194574, "phrase": "standardized_notation"}, {"score": 0.0040916230716372265, "phrase": "software_engineers"}, {"score": 0.003940706575253453, "phrase": "way_alternative"}, {"score": 0.003795335309109018, "phrase": "new_way"}, {"score": 0.0037480753312398754, "phrase": "functional_requirements"}, {"score": 0.0037130155038449554, "phrase": "designer-friendly_fashion"}, {"score": 0.003621111838638197, "phrase": "rule-based_representation"}, {"score": 0.003520465085648261, "phrase": "uml"}, {"score": 0.003306559295382181, "phrase": "rule_bases"}, {"score": 0.0032145922365231093, "phrase": "uml_design"}, {"score": 0.003134986603941304, "phrase": "core_logic"}, {"score": 0.0029816229984366374, "phrase": "declarative_way"}, {"score": 0.0027916287357898544, "phrase": "application_logic"}, {"score": 0.0027139447110929586, "phrase": "common_and_well-known_limitations"}, {"score": 0.0025892330566358503, "phrase": "expressive_visual_rule_design_formalism"}, {"score": 0.0025409639091476363, "phrase": "direct_translation"}, {"score": 0.002477998427152547, "phrase": "practical_translators"}, {"score": 0.0024547897375637308, "phrase": "logical_model"}, {"score": 0.002439437869554093, "phrase": "mof-based_uml_model"}, {"score": 0.0023127544795063263, "phrase": "rule_base"}, {"score": 0.0022413233627905696, "phrase": "existing_visual_uml_rule_notations"}, {"score": 0.0022064376000055764, "phrase": "visual_design_tools"}, {"score": 0.0021450029487459403, "phrase": "custom_uml_artifacts"}, {"score": 0.0021049977753042253, "phrase": "standard_uml_tools"}], "paper_keywords": ["Business rules", " UML", " MVC", " XTT2", " knowledge representation and integration"], "paper_abstract": "In this paper challenges of using Knowledge Engineering methods in the Software Engineering practice, with focus on the visual design methods for software applications, are discussed. The paper concerns practical design issues of rule-based models integrated with business applications built using the Model-View-Controller (MVC), or equivalent architectural pattern. The Unified Modeling Language (UML) constitutes a standardized notation among software engineers. Various attempts has been made to design the model in a way alternative to UML. Recently, the Business Rules approach has been proposed as a new way of capturing the functional requirements in a designer-friendly fashion. However, concepts on which the rule-based representation is based cannot be directly modeled in UML, because the semantics of UML diagrams does not correspond to rule semantics. Our research considers a method of designing rule bases which will be proper and consistent with the UML design. The approach has several important features: the core logic of the application is clearly identified and separated, and it is built in a declarative way, which makes the design transparent, easier to follow and develop. When rules are used to model the application logic, one has to keep in mind some common and well-known limitations of the existing rule tools. Our solution to these problems consists of using an expressive visual rule design formalism called XTT2, defining a direct translation between XTT2 and selected UML diagrams, implementing practical translators between the logical model and MOF-based UML model, and using the verification features provided with the XTT2 framework to assure the quality of the rule base. This solution seems to be superior both to existing visual UML rule notations, as well as visual design tools for rules. It does not extend any custom UML artifacts and can be used with standard UML tools.", "paper_title": "UML REPRESENTATION FOR RULE-BASED APPLICATION MODELS WITH XTT2-BASED BUSINESS RULES", "paper_id": "WOS:000307521500002"}