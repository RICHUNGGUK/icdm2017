{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "linux"}, {"score": 0.004733347359490221, "phrase": "existing_package"}, {"score": 0.0046797114400479135, "phrase": "system_configuration_management"}, {"score": 0.004548253531664032, "phrase": "imperative_model"}, {"score": 0.003789763907758991, "phrase": "multiple_versions"}, {"score": 0.003725470458263889, "phrase": "package_side"}, {"score": 0.0030164423559955896, "phrase": "purely_functional_system_configuration_model"}, {"score": 0.0029148831519944358, "phrase": "static_parts"}, {"score": 0.0028006988338192375, "phrase": "software_packages"}, {"score": 0.0027689017918347755, "phrase": "configuration_files"}, {"score": 0.0027374647587075935, "phrase": "system_startup_scripts"}, {"score": 0.0026604207233593973, "phrase": "pure_functions"}, {"score": 0.002442025065383455, "phrase": "purely_functional_language"}, {"score": 0.0023329572140896237, "phrase": "nixos"}, {"score": 0.0021908807203548345, "phrase": "nix_package_manager"}, {"score": 0.0021413855297794946, "phrase": "entire_system_configuration"}], "paper_keywords": [""], "paper_abstract": "Existing package and system configuration management tools suffer from an imperative model, where system administration actions such as package upgrades or changes to system configuration files are stateful: they destructively update the state of the system. This leads to many problems, such as the inability to roll back changes easily, to deploy multiple versions of a package side-by-side, to reproduce a configuration deterministically on another machine, or to reliably upgrade a system. In this paper we show that we can overcome these problems by moving to a purely functional system configuration model. This means that all static parts of a system (such as software packages, configuration files and system startup scripts) are built by pure functions and are immutable, stored in a way analogous to a heap in a purely functional language. We have implemented this model in NixOS, a non-trivial Linux distribution that uses the Nix package manager to build the entire system configuration from a modular, purely functional specification.", "paper_title": "NixOS: A purely functional Linux distribution", "paper_id": "WOS:000288428700005"}