{"auto_keywords": [{"score": 0.027574967571943197, "phrase": "chopper"}, {"score": 0.00481495049065317, "phrase": "mining_embedded_subtrees"}, {"score": 0.0046269981365987915, "phrase": "subtree_pattern_mining"}, {"score": 0.004490842671590769, "phrase": "important_data_mining_problem"}, {"score": 0.003906357144047631, "phrase": "subtree_mining_algorithm"}, {"score": 0.003500812175550438, "phrase": "embedded-subtree_pattern"}, {"score": 0.0032975819773787985, "phrase": "subtree_pattern"}, {"score": 0.0031686717525002935, "phrase": "frequent_prefix-tree"}, {"score": 0.002955050521440921, "phrase": "prefix-tree-projected"}, {"score": 0.0027557911038816256, "phrase": "complete_set"}, {"score": 0.002701361707441567, "phrase": "frequent_patterns"}, {"score": 0.0023028105026714533, "phrase": "checking_process"}, {"score": 0.0021474369836979048, "phrase": "apriori-like_algorithm"}], "paper_keywords": [""], "paper_abstract": "Frequent embedded subtree pattern mining is an important data mining problem with broad applications. In this paper, we propose a novel embedded subtree mining algorithm, called PrefixTreeESpan (i.e. Prefix-Tree-projected Embedded-Subtree pattern), which finds a subtree pattern by growing a frequent prefix-tree. Thus, using divide and conquer, mining local length-1 frequent subtree patterns in Prefix-Tree-Projected database recursively will lead to the complete set of frequent patterns. Different from Chopper and XSpanner [4], PrefixTreeESpan does not need a checking process. Our performance study shows that PrefixTreeESpan outperforms Apriori-like algorithm: TreeMiner [6], and pattern-growth algorithms: Chopper, XSpanner.", "paper_title": "PrefixTreeESpan: A pattern growth algorithm for mining embedded subtrees", "paper_id": "WOS:000241624200048"}