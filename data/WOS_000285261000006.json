{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "user-level_cache"}, {"score": 0.004727837281331949, "phrase": "conventional_remote_data"}, {"score": 0.004621148492564008, "phrase": "client_applications"}, {"score": 0.004516856326107826, "phrase": "on-demand_access_scheme"}, {"score": 0.0043947942344037105, "phrase": "pre-staging_scheme"}, {"score": 0.004256533389293113, "phrase": "completed_input_file"}, {"score": 0.0042178318724732005, "phrase": "multiple_data_sources"}, {"score": 0.004029517895918228, "phrase": "unnecessary_data_transmission_time"}, {"score": 0.003867206750827, "phrase": "on-demand_scheme"}, {"score": 0.0037798652680135106, "phrase": "single_data_source"}, {"score": 0.003660879039645457, "phrase": "downstream_bandwidth"}, {"score": 0.003611034322786669, "phrase": "computing_nodes"}, {"score": 0.0031483163191080425, "phrase": "on-demand_concept"}, {"score": 0.003105428650735113, "phrase": "unnecessary_data_transfer"}, {"score": 0.0030491497463386924, "phrase": "co-allocation_download_algorithm"}, {"score": 0.002993887707344862, "phrase": "data_transfer_performance"}, {"score": 0.0028995712226514746, "phrase": "pre-fetching_strategy"}, {"score": 0.0027954035431845344, "phrase": "overlapping_data_acquisition"}, {"score": 0.002769950045729965, "phrase": "data_processing"}, {"score": 0.0026949679939994226, "phrase": "client_application"}, {"score": 0.0025862736445290088, "phrase": "larger_cache_space"}, {"score": 0.0025047659706737215, "phrase": "kernel-level_cache"}, {"score": 0.002403724423251419, "phrase": "data_consistency"}, {"score": 0.0023818288346547692, "phrase": "spigot_nodes"}, {"score": 0.002349357968054711, "phrase": "experimental_results"}, {"score": 0.0022962183207691188, "phrase": "superior_performance"}, {"score": 0.0021735249249471614, "phrase": "on-demand_access_schemes"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["data Grid", " on-demand access", " data co-allocation download", " pre-fetching", " user-level cache", " distributed shared memory (DSM)"], "paper_abstract": "Conventional remote data access middlewares usually provide client applications with either a pre-staging scheme or an on-demand access scheme to fetch data. The pre-staging scheme uses parallel downloads to fetch a completed input file from multiple data sources, even when only a tiny file fragment is required. Such a transfer scheme consumes unnecessary data transmission time and storage space. In contrast, the on-demand scheme downloads only the required data blocks from a single data source and does not fully utilize the downstream bandwidth of the computing nodes. This paper presents a middleware called 'Spigot' that facilitates legacy (grid-unaware) applications to transparently access remote data by using native I/O function calls. Spigot uses the on-demand concept to avoid unnecessary data transfer and adopts a co-allocation download algorithm to improve the data transfer performance. Moreover, it uses the pre-fetching strategy to reduce the data waiting time by overlapping data acquisition and data processing. It also provides the client application with its own user-level cache, which is advantageous since a larger cache space is available in comparison with the kernel-level cache. Further, it is easy to maintain data consistency between Spigot nodes. The experimental results indicate that Spigot achieves superior performance in reducing the data waiting time than the pre-staging and the on-demand access schemes. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "On-demand data co-allocation with user-level cache for grids", "paper_id": "WOS:000285261000006"}