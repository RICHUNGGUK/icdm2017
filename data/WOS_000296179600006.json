{"auto_keywords": [{"score": 0.049111338868629374, "phrase": "scientific_and_engineering_applications"}, {"score": 0.040295974628627725, "phrase": "repetitive_computations"}, {"score": 0.03534709650342606, "phrase": "large_scale_computing_systems"}, {"score": 0.00481495049065317, "phrase": "pipelined_computations"}, {"score": 0.004797105759205987, "phrase": "heterogeneous_systems"}, {"score": 0.00473516593179706, "phrase": "performance_degradation"}, {"score": 0.004700129787901321, "phrase": "high_performance_computing_systems"}, {"score": 0.004674022110123918, "phrase": "uneven_distribution"}, {"score": 0.004648058774681983, "phrase": "computational_work"}, {"score": 0.004520379712234995, "phrase": "load_imbalance"}, {"score": 0.004437206103538406, "phrase": "irregular_applications"}, {"score": 0.00442075511513978, "phrase": "heterogeneous_distributed_systems"}, {"score": 0.004355556168010664, "phrase": "computing_research_community"}, {"score": 0.00429929296240706, "phrase": "good_load"}, {"score": 0.004235877762745273, "phrase": "efficient_load_balancing_and_scheduling_methods"}, {"score": 0.004006256537439497, "phrase": "large_number"}, {"score": 0.003991396893421613, "phrase": "computational_methods"}, {"score": 0.00395448751346833, "phrase": "complex_phenomena"}, {"score": 0.003678023470672862, "phrase": "poor_performance"}, {"score": 0.0036237387361720934, "phrase": "simulation_codes"}, {"score": 0.003563622080057161, "phrase": "computational_nature"}, {"score": 0.003395476752295819, "phrase": "successful_and_timely_results"}, {"score": 0.0033828748627992193, "phrase": "large_scale_simulations"}, {"score": 0.0032412606751022243, "phrase": "multiple_users"}, {"score": 0.003181547247751023, "phrase": "available_resources"}, {"score": 0.003134567058294007, "phrase": "numerous_load_balancing_methods"}, {"score": 0.0031055562792077903, "phrase": "different_parallel_architectures"}, {"score": 0.003042671307232108, "phrase": "master-worker_paradigm"}, {"score": 0.0030201201629036782, "phrase": "single_coordinator"}, {"score": 0.002909839667028764, "phrase": "application_requirements"}, {"score": 0.0028936475513755546, "phrase": "scheduling_policy"}, {"score": 0.002877545278459206, "phrase": "computational_environment"}, {"score": 0.002762160429246837, "phrase": "number_of_processors_increases"}, {"score": 0.0027011800626129574, "phrase": "scheduling_decisions"}, {"score": 0.0026761695620848448, "phrase": "outdated_information"}, {"score": 0.002502783963809821, "phrase": "distributed_fashion"}, {"score": 0.0023537101705489957, "phrase": "proposed_scheme"}, {"score": 0.0023232456129539266, "phrase": "comparative_performance_tests"}, {"score": 0.0022804059942245236, "phrase": "target_system"}, {"score": 0.002267708463966758, "phrase": "smp_cluster"}, {"score": 0.0022341921933713084, "phrase": "system_load_fluctuation"}, {"score": 0.002192991070694667, "phrase": "distributed_approach"}, {"score": 0.0021848422732893926, "phrase": "greater_performance"}, {"score": 0.0021767236894319965, "phrase": "better_scalability"}, {"score": 0.0021525481058490264, "phrase": "overall_improvement"}, {"score": 0.0021286404533901134, "phrase": "master-worker_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Dynamic load balancing algorithms", " Master-worker model", " Distributed model", " Loops with dependencies", " Synchronization", " Weighting", " Non-dedicated heterogeneous systems"], "paper_abstract": "One of the most significant causes for performance degradation of scientific and engineering applications on high performance computing systems is the uneven distribution of the computational work to the resources of the system. This effect, which is known as load imbalance, is even more noticeable in the case of irregular applications and heterogeneous distributed systems. This motivated the parallel and distributed computing research community to focus on methods that provide good load balancing for scientific and engineering applications running on (heterogeneous) distributed systems. Efficient load balancing and scheduling methods are employed for scientific applications from various fields, such as mechanics, materials, physics, chemistry, biology, applied mathematics, etc. Such applications typically employ a large number of computational methods in order to simulate complex phenomena, on very large scales of time and magnitude. These simulations consist of routines that perform repetitive computations (in the form of DO/FOR loops) over very large data sets, which, if not properly implemented and executed, may suffer from poor performance. The number of repetitive computations in the simulation codes is not always constant. Moreover, the computational nature of these simulations may be in fact irregular, leading to the case when one computation takes (unpredictably) more time than others. For successful and timely results, large scale simulations require the use of large scale computing systems, which often are widely distributed and highly heterogeneous. Moreover, large scale computing systems are usually shared among multiple users, which causes the quality and quantity of the available resources to be highly unpredictable. There are numerous load balancing methods in the literature for different parallel architectures. The most recent of these methods typically follow the master-worker paradigm, where a single coordinator (master) is responsible for making all the scheduling decisions based on information provided by the workers. Depending on the application requirements, the scheduling policy and the computational environment, the benefits of this paradigm may be limited as follows: (1) its efficiency may not scale as the number of processors increases, and (2) it is quite probable that the scheduling decisions are made based on outdated information, especially on systems where the workload changes rapidly. In an effort to address these limitations, we propose a distributed (master-less) load balancing scheme, in which the scheduling decisions are made by the workers in a distributed fashion. We implemented this method along with other two master-worker schemes (a previously existing one and a recently modified one) for three different scientific computational kernels. In order to validate the usefulness and efficiency of the proposed scheme, we conducted a series of comparative performance tests with the two master-worker schemes for each computational kernel. The target system is an SMP cluster, on which we simulated three different patterns of system load fluctuation. The experiments strongly support the belief that the distributed approach offers greater performance and better scalability on such systems, showing an overall improvement ranging from 13% to 24% over the master-worker approaches. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Distributed dynamic load balancing for pipelined computations on heterogeneous systems", "paper_id": "WOS:000296179600006"}