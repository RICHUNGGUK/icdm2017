{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_reduction"}, {"score": 0.004772593750252861, "phrase": "concurrent_object-oriented_programs"}, {"score": 0.004506171772318298, "phrase": "non-trivial_concurrent_object-oriented_software_systems"}, {"score": 0.00436890075128947, "phrase": "high_computational_and_memory_costs"}, {"score": 0.0042734067085669885, "phrase": "model_reduction_techniques"}, {"score": 0.004179991181159956, "phrase": "current_limitations"}, {"score": 0.004070573090297285, "phrase": "conventional_wisdom"}, {"score": 0.004016938499717623, "phrase": "static_program_slicing"}, {"score": 0.003946519058822334, "phrase": "effective_model_reduction_technique"}, {"score": 0.003894512634265439, "phrase": "anecdotal_evidence"}, {"score": 0.0034714553759044664, "phrase": "source_code"}, {"score": 0.00344087639309216, "phrase": "realistic_systems"}, {"score": 0.0032629585038738856, "phrase": "sophisticated_indus_program_slicer"}, {"score": 0.0031774686451753477, "phrase": "full_java"}, {"score": 0.0030942116765996426, "phrase": "interesting_off-the-shelf_concurrent_java_programs"}, {"score": 0.0030399229120268694, "phrase": "indus"}, {"score": 0.0029471818883482688, "phrase": "next_generation"}, {"score": 0.002908306074124806, "phrase": "bandera_model_checking_framework"}, {"score": 0.0028446460307503343, "phrase": "significant_benefits"}, {"score": 0.0027700855441353165, "phrase": "fully_automatic_model_reduction_technique"}, {"score": 0.002661883310629088, "phrase": "java_systems"}, {"score": 0.0026384167183586015, "phrase": "varying_structural_properties"}, {"score": 0.002404136142279618, "phrase": "different_classes"}, {"score": 0.002320449502337321, "phrase": "concurrent_object-oriented_source_code"}], "paper_keywords": [""], "paper_abstract": "Model checking techniques have proven effective for checking a number of non-trivial concurrent object-oriented software systems. However, due to the high computational and memory costs, a variety of model reduction techniques are needed to overcome current limitations on applicability and scalability. Conventional wisdom holds that static program slicing can be an effective model reduction technique, yet anecdotal evidence is mixed, and there has been no work that has systematically studied the costs/benefits of slicing for model reduction in the context of model checking source code for realistic systems. In this paper, we present an overview of the sophisticated Indus program slicer that is capable of handling full Java and is readily applicable to interesting off-the-shelf concurrent Java programs. Using the Indus program slicer as part of the next generation of the Bandera model checking framework, we experimentally demonstrate significant benefits from using slicing as a fully automatic model reduction technique. Our experimental results consider a number of Java systems with varying structural properties, the effects of combining slicing with other well-known model reduction techniques such as partial order reductions, and the effects of slicing for different classes of properties. Our conclusions are that slicing concurrent object-oriented source code provides significant reductions that are orthogonal to a number of other reduction techniques, and that slicing should always be applied due to its automation and low computational costs.", "paper_title": "Evaluating the effectiveness of slicing for model reduction of concurrent object-oriented programs", "paper_id": "WOS:000236941100005"}