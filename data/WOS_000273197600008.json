{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "existential_variables"}, {"score": 0.008839178586126034, "phrase": "linear_inequations"}, {"score": 0.004739056045644449, "phrase": "constraint_logic_programs"}, {"score": 0.004412000844879264, "phrase": "constraint_logic_program"}, {"score": 0.0036456298076415652, "phrase": "transformation_technique"}, {"score": 0.0034482025128821548, "phrase": "program_efficiency"}, {"score": 0.0033668870709083884, "phrase": "program_properties"}, {"score": 0.0032355864829403413, "phrase": "folding_transformation_rule"}, {"score": 0.0026518169452004465, "phrase": "rational_or_real_numbers"}, {"score": 0.002508073621696602, "phrase": "matching_terms"}, {"score": 0.002488183412451029, "phrase": "modulo_equational_theories"}, {"score": 0.0021049977753042253, "phrase": "good_performance"}], "paper_keywords": ["Program transformation", " folding rule", " variable elimination", " constraint logic programming"], "paper_abstract": "The existential variables of a clause in a constraint logic program are the variables which occur in the body of the clause and not in its head. The elimination of these variables is a transformation technique which is often used for improving program efficiency and verifying program properties. We consider a folding transformation rule which ensures the elimination of existential variables and we propose an algorithm for applying this rule in the case where the constraints are linear inequations over rational or real numbers. The algorithm combines techniques for matching terms modulo equational theories and techniques for solving systems of linear inequations. Through some examples we show that an implementation of our folding algorithm has a good performance in practice.", "paper_title": "A Folding Rule for Eliminating Existential Variables from Constraint Logic Programs", "paper_id": "WOS:000273197600008"}