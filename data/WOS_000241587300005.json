{"auto_keywords": [{"score": 0.048778468893892965, "phrase": "sized_types"}, {"score": 0.04360247103779726, "phrase": "recursive_function"}, {"score": 0.00481495049065317, "phrase": "type-based_approach"}, {"score": 0.004372442291178139, "phrase": "data_structure"}, {"score": 0.004081385289516914, "phrase": "sized_type"}, {"score": 0.003835972725191194, "phrase": "type_system"}, {"score": 0.0037834649508375544, "phrase": "recursive_calls"}, {"score": 0.0036553070575015344, "phrase": "smaller_size"}, {"score": 0.0031626225189867354, "phrase": "size_index"}, {"score": 0.0029518598926717332, "phrase": "admissible_functions"}, {"score": 0.002851790448644913, "phrase": "higher-kinded_data_types"}, {"score": 0.0024842242921857705, "phrase": "strongly_normalizing_terms"}, {"score": 0.0023834640793589435, "phrase": "upper_semi-continuity"}, {"score": 0.002286781334850213, "phrase": "sufficient_semantical_criterion"}, {"score": 0.0021789194955896124, "phrase": "syntactical_criterion"}, {"score": 0.0021049977753042253, "phrase": "semi-continuous_function"}], "paper_keywords": [""], "paper_abstract": "A type-based approach to termination uses sized types: an ordinal bound for the size of a data structure is stored in its type. A recursive function over a sized type is accepted if it is visible in the type system that recursive calls occur just at a smaller size. This approach is only sound if the type of the recursive function is admissible, i.e., depends on the size index in a certain way. To explore the space of admissible functions in the presence of higher-kinded data types and impredicative polymorphism, a semantics is developed where sized types are interpreted as functions from ordinals into sets of strongly normalizing terms. It is shown that upper semi-continuity of such functions is a sufficient semantical criterion for admissibility. To provide a syntactical criterion, a calculus for semi-continuous function is developed.", "paper_title": "Semi-continuous sized types and termination", "paper_id": "WOS:000241587300005"}