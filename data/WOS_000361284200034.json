{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "verdi"}, {"score": 0.009970419352220754, "phrase": "distributed_systems"}, {"score": 0.0040942189695983185, "phrase": "arbitrary_points"}, {"score": 0.0036680857629458816, "phrase": "exhaustive_testing"}, {"score": 0.003444732262403694, "phrase": "critical_data"}, {"score": 0.0034088473318056537, "phrase": "unacceptable_service_outages"}, {"score": 0.0031513409369204565, "phrase": "coq"}, {"score": 0.0030538300202383106, "phrase": "different_faults"}, {"score": 0.0027936239349923464, "phrase": "verification_burden"}, {"score": 0.002637160140011997, "phrase": "idealized_fault_model"}, {"score": 0.00256895975568914, "phrase": "resulting_correctness_guarantees"}, {"score": 0.0024894376091589244, "phrase": "additional_proof_burden"}, {"score": 0.0024377918036784336, "phrase": "verdi's_utility"}, {"score": 0.002374735066990346, "phrase": "first_mechanically_checked_proof"}, {"score": 0.0023133055945761235, "phrase": "raft_state_machine_replication_algorithm"}, {"score": 0.002253461585851626, "phrase": "verified_implementations"}, {"score": 0.002218299213266519, "phrase": "primary-backup_replication_system"}, {"score": 0.002183684303511462, "phrase": "key-value_store"}, {"score": 0.0021496083700137305, "phrase": "verified_systems"}, {"score": 0.002127186380459509, "phrase": "similar_performance"}, {"score": 0.0021049977753042253, "phrase": "unverified_equivalents"}], "paper_keywords": ["Formal verification", " distributed systems", " proof assistants", " Coq", " Verdi"], "paper_abstract": "Distributed systems are difficult to implement correctly because they must handle both concurrency and failures: machines may crash at arbitrary points and networks may reorder, drop, or duplicate packets. Further, their behavior is often too complex to permit exhaustive testing. Bugs in these systems have led to the loss of critical data and unacceptable service outages. We present Verdi, a framework for implementing and formally verifying distributed systems in Coq. Verdi formalizes various network semantics with different faults, and the developer chooses the most appropriate fault model when verifying their implementation. Furthermore, Verdi eases the verification burden by enabling the developer to first verify their system under an idealized fault model, then transfer the resulting correctness guarantees to a more realistic fault model without any additional proof burden. To demonstrate Verdi's utility, we present the first mechanically checked proof of linearizability of the Raft state machine replication algorithm, as well as verified implementations of a primary-backup replication system and a key-value store. These verified systems provide similar performance to unverified equivalents.", "paper_title": "Verdi: A Framework for Implementing and Formally Verifying Distributed Systems", "paper_id": "WOS:000361284200034"}