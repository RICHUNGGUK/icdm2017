{"auto_keywords": [{"score": 0.0494208158242398, "phrase": "function_return_address"}, {"score": 0.041584008648741164, "phrase": "smashguard"}, {"score": 0.036870309326606863, "phrase": "hardware_stack"}, {"score": 0.00481495049065317, "phrase": "security_attacks"}, {"score": 0.0046834372388970405, "phrase": "buffer_overflow_attack"}, {"score": 0.0041154571996523505, "phrase": "attacker's_code"}, {"score": 0.0040215052006051235, "phrase": "hardware-based_solution"}, {"score": 0.0038577428353448596, "phrase": "known_forms"}, {"score": 0.0037696519417841287, "phrase": "function_return_addresses"}, {"score": 0.0037006243674469657, "phrase": "program_stack"}, {"score": 0.0036328561748082138, "phrase": "function_call_instruction"}, {"score": 0.0035828427627676075, "phrase": "current_return_address"}, {"score": 0.0034528025626422154, "phrase": "return_instruction"}, {"score": 0.0033739270918502285, "phrase": "return_address"}, {"score": 0.00309023627455429, "phrase": "stack_operations"}, {"score": 0.002936997013291548, "phrase": "usual_execution"}, {"score": 0.002652878591019016, "phrase": "zero_overhead"}, {"score": 0.0026163210719740847, "phrase": "actual_hardware_implementation"}, {"score": 0.0025683581446365165, "phrase": "previous_software-based_approaches'_average_performance_degradation"}, {"score": 0.0022772782536385717, "phrase": "software_approaches'_key_disadvantages"}], "paper_keywords": ["buffer overflow", " function return address", " hardware stack"], "paper_abstract": "A buffer overflow attack is perhaps the most common attack used to compromise the security of a host. This attack can be used to change the function return address and redirect execution to the attacker's code. We present a hardware-based solution, called SmashGuard, to protect against all known forms of attack on the function return addresses stored on the program stack. With each function call instruction, the current return address is pushed onto a hardware stack. A return instruction compares its address to the return address from the top of the hardware stack. An exception is raised to signal the mismatch. Because the stack operations and checks are done in hardware in parallel with the usual execution of instructions, our best-performing implementation scheme has virtually no performance overhead (because we are modifying hardware, it is impossible to guarantee zero overhead without an actual hardware implementation). While previous software-based approaches' average performance degradation for the SPEC2000 benchmarks is only 2.8 percent, their worst-case degradation is up to 8.3 percent. Apart from the lack of robustness in performance, the software approaches' key disadvantages are less security coverage and the need for recompilation of applications. SmashGuard, on the other hand, is secure and does not require recompilation of applications.", "paper_title": "SmashGuard: A hardware solution to prevent security attacks on the function return address", "paper_id": "WOS:000240736300006"}