{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "library_migrations"}, {"score": 0.03254376137231176, "phrase": "large_set"}, {"score": 0.03227538934261934, "phrase": "software_projects"}, {"score": 0.004774378659569706, "phrase": "java"}, {"score": 0.004653667500876187, "phrase": "external_libraries"}, {"score": 0.004440648141548589, "phrase": "software_developers"}, {"score": 0.003991932110277654, "phrase": "library_migration"}, {"score": 0.0039077616208517026, "phrase": "best_replacement"}, {"score": 0.003468053168607071, "phrase": "right_choice"}, {"score": 0.0031845067058084613, "phrase": "library_migrations_trends"}, {"score": 0.0029116257477000617, "phrase": "automatic_approach"}, {"score": 0.0028745946327439656, "phrase": "library_dependencies"}, {"score": 0.002838033152426417, "phrase": "semi-automatic_approach"}, {"score": 0.0027194778713860715, "phrase": "deep_analysis"}, {"score": 0.00268488398249084, "phrase": "library_migration_phenomena"}, {"score": 0.0026394405584281443, "phrase": "descriptive_study"}, {"score": 0.002539978170928796, "phrase": "githubplatform"}, {"score": 0.0023221983158528163, "phrase": "main_result"}, {"score": 0.0021688641066186817, "phrase": "migration_trends"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software evolution", " software repositories", " API analysis"], "paper_abstract": "Software intensively depends on external libraries whose relevance may change during its life cycle. As a consequence, software developers must periodically reconsider the libraries they depend on, and must think about replacing them for more relevant ones. We refer to this practice as library migration. To find the best replacement for their library, they can rely on information over the Web, but they get quickly overwhelmed by the amount of data they gather. Making the right choice in this context constitutes the topic of our work. The solution we propose is to exhibit and mine the library migrations trends computed by performing a study of a large set of software projects. To perform this analysis, we have defined an automatic approach to compute library dependencies and a semi-automatic approach that identifies library migrations. Then, we propose a deep analysis of the library migration phenomena by performing a descriptive study of a large set of software projects stored on the Githubplatform. Second, based on our descriptive study, we propose a support to developers who want to migrate their libraries. The main result of our study is that recommendations of libraries can be inferred from the analysis of the migration trends. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "A study of library migrations in Java", "paper_id": "WOS:000345595400005"}