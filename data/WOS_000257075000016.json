{"auto_keywords": [{"score": 0.049146612112995945, "phrase": "source_code"}, {"score": 0.00481495049065317, "phrase": "structural_evolution"}, {"score": 0.004583878086896926, "phrase": "detailed_changes"}, {"score": 0.004321118442104989, "phrase": "great_importance"}, {"score": 0.004236908273106904, "phrase": "software_maintenance"}, {"score": 0.004073359218158693, "phrase": "code_flows"}, {"score": 0.003445591238183763, "phrase": "mid-level_scale_changes"}, {"score": 0.0031532895341013297, "phrase": "existing_visual_metaphor"}, {"score": 0.0028016507334576216, "phrase": "unchanged_code"}, {"score": 0.0026148807877309417, "phrase": "important_events"}, {"score": 0.002538687900036229, "phrase": "code_drift"}], "paper_keywords": [""], "paper_abstract": "Understanding detailed changes done to source code is of great importance in software maintenance. We present Code Flows, a method to visualize the evolution of source code geared to the understanding of fine and mid-level scale changes across several file versions. We enhance an existing visual metaphor to depict software structure changes with techniques that emphasize both following unchanged code as well as detecting and highlighting important events such as code drift, splits, merges, insertions and deletions. The method is illustrated with the analysis of a real-world C++ code system.", "paper_title": "Code flows: Visualizing structural evolution of source code", "paper_id": "WOS:000257075000016"}