{"auto_keywords": [{"score": 0.04893449354219281, "phrase": "complex_software_systems"}, {"score": 0.041872648619414365, "phrase": "specification_inference"}, {"score": 0.036640167850705334, "phrase": "e._g."}, {"score": 0.00481495049065317, "phrase": "predicate_mining"}, {"score": 0.004603352344461032, "phrase": "well-defined_specifications"}, {"score": 0.003912712778141845, "phrase": "speci_fications"}, {"score": 0.003740615400423586, "phrase": "static_inference_mechanism"}, {"score": 0.0035025644647418983, "phrase": "dataflow_properties"}, {"score": 0.0032682787834955856, "phrase": "control-flow_properties"}, {"score": 0.002997269132281551, "phrase": "inter-procedural_path-sensitive_dataflow_analysis"}, {"score": 0.0028852371404397862, "phrase": "mining_techniques"}, {"score": 0.0027108484507501907, "phrase": "higher-level_specifications"}, {"score": 0.002692132776447632, "phrase": "abstract_structural_similarities"}, {"score": 0.0026367554281038572, "phrase": "procedure_p"}, {"score": 0.00258251424573557, "phrase": "conditional_test"}, {"score": 0.002538164420139397, "phrase": "variable_v"}, {"score": 0.002319503690965857, "phrase": "large_open-source_benchmarks"}, {"score": 0.002164180792169302, "phrase": "-_the_implementation"}, {"score": 0.0021049977753042253, "phrase": "well-tested_libraries"}], "paper_keywords": ["algorithms", " documentation", " verification", " specification inference", " preconditions", " predicate mining", " program analysis"], "paper_abstract": "The reliability and correctness of complex software systems can be significantly enhanced through well-defined specifications that dictate the use of various units of abstraction (e. g., modules, or procedures). Oftentimes, however, specifications are either missing, imprecise, or simply too complex to encode within a signature, necessitating specification inference. The process of inferring speci fications from complex software systems forms the focus of this paper. We describe a static inference mechanism for identifying the preconditions that must hold whenever a procedure is called. These preconditions may reflect both dataflow properties (e. g., whenever p is called, variable x must be non-null) as well as control-flow properties (e. g., every call to p must be preceded by a call to q). We derive these preconditions using an inter-procedural path-sensitive dataflow analysis that gathers predicates at each program point. We apply mining techniques to these predicates to make specification inference robust to errors. This technique also allows us to derive higher-level specifications that abstract structural similarities among predicates (e. g., procedure p is called immediately after a conditional test that checks whether some variable v is non-null.) We describe an implementation of these techniques, and validate the effectiveness of the approach on a number of large open-source benchmarks. Experimental results confirm that our mining algorithms are efficient, and that the specifications derived are both precise and useful - the implementation discovers several critical, yet previously, undocumented preconditions for well-tested libraries.", "paper_title": "Static specification inference using predicate mining", "paper_id": "WOS:000253409000014"}