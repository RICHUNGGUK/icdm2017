{"auto_keywords": [{"score": 0.034346980230826815, "phrase": "high-fidelity_emulator"}, {"score": 0.00481495049065317, "phrase": "path-exploration_lifting"}, {"score": 0.004637478829869904, "phrase": "lo-fi_emulators"}, {"score": 0.0045879792359519375, "phrase": "processor_emulators"}, {"score": 0.0043482604833437735, "phrase": "binary_software"}, {"score": 0.00409895142748329, "phrase": "processor_specifications"}, {"score": 0.003926626018798576, "phrase": "common_workloads"}, {"score": 0.0034148795808317555, "phrase": "required_trust"}, {"score": 0.003100085797251317, "phrase": "test_cases"}, {"score": 0.003034158379493625, "phrase": "lower-fidelity_emulator"}, {"score": 0.002875391177926809, "phrase": "hardware_specification"}, {"score": 0.002681315076008658, "phrase": "real_hardware"}, {"score": 0.0024209250169088575, "phrase": "complete_path_coverage"}, {"score": 0.0023314867226678555, "phrase": "individual_differences"}, {"score": 0.002174041708084857, "phrase": "root_causes"}, {"score": 0.002127765807039172, "phrase": "atomicity_violations"}, {"score": 0.0021049977753042253, "phrase": "missing_security_features"}], "paper_keywords": ["Reliability", " Security", " Verification", " Symbolic binary execution", " CPU emulators", " cross-validation"], "paper_abstract": "Processor emulators are widely used to provide isolation and instrumentation of binary software. However they have proved difficult to implement correctly: processor specifications have many corner cases that are not exercised by common workloads. It is untenable to base other system security properties on the correctness of emulators that have received only ad-hoc testing. To obtain emulators that are worthy of the required trust, we propose a technique to explore a high-fidelity emulator with symbolic execution, and then lift those test cases to test a lower-fidelity emulator. The high-fidelity emulator serves as a proxy for the hardware specification, but we can also further validate by running the tests on real hardware. We implement our approach and apply it to generate about 610,000 test cases; for about 95% of the instructions we achieve complete path coverage. The tests reveal thousands of individual differences; we analyze those differences to shed light on a number of root causes, such as atomicity violations and missing security features.", "paper_title": "Path-Exploration Lifting: Hi-Fi Tests for Lo-Fi Emulators", "paper_id": "WOS:000209339300028"}