{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "large_suffix_trees"}, {"score": 0.0047026237903774895, "phrase": "computational_grid"}, {"score": 0.004592905436175987, "phrase": "suffix_tree"}, {"score": 0.004485735417293941, "phrase": "key_data_structure"}, {"score": 0.004415675459182871, "phrase": "biological_sequence_analysis"}, {"score": 0.0042452552248398445, "phrase": "efficient_solutions"}, {"score": 0.003923815926819606, "phrase": "high_memory_overheads"}, {"score": 0.0038624981944755813, "phrase": "poor_memory_locality"}, {"score": 0.003742711659195878, "phrase": "efficient_suffix_tree_construction_algorithms"}, {"score": 0.00348655247465418, "phrase": "long_dna_sequences"}, {"score": 0.003405109584265324, "phrase": "whole_human_chromosomes"}, {"score": 0.00314708280192844, "phrase": "hierarchical_grid_system"}, {"score": 0.003073545175760353, "phrase": "computational_platform"}, {"score": 0.0027961342030212353, "phrase": "efficient_mapping"}, {"score": 0.0026045914281028473, "phrase": "parallel_suffix_tree_construction_algorithm"}, {"score": 0.0024842242921857705, "phrase": "new_data_structure"}, {"score": 0.002224510044064184, "phrase": "dynamic_load_balancing_strategy"}, {"score": 0.0021049977753042253, "phrase": "significant_run-time_savings"}], "paper_keywords": ["suffix tree", " biological sequence analysis", " parallel algorithms", " grid computing", " MPI"], "paper_abstract": "The suffix tree is a key data structure for biological sequence analysis, since it permits efficient solutions to many string-based problems. Constructing large suffix trees is challenging because of high memory overheads and poor memory locality. Even though efficient suffix tree construction algorithms exist, their run-time is still very high for long DNA sequences such as whole human chromosomes. In this paper, we are using a hierarchical grid system as a computational platform in order to reduce this run-time significantly. To achieve an efficient mapping onto this type of architecture we introduce a parallel suffix tree construction algorithm that makes use of a new data structure called the common prefix suffix tree. Using this algorithm together with a dynamic load balancing strategy we show that our distributed grid implementation leads to significant run-time savings. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Constructing large suffix trees on a computational grid", "paper_id": "WOS:000243085200005"}