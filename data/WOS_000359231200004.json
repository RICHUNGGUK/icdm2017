{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_test_reconfiguration_for_composite_web_services"}, {"score": 0.0045843245695654875, "phrase": "testing_strategy"}, {"score": 0.004364696693320128, "phrase": "service-based_applications"}, {"score": 0.003988901168289797, "phrase": "service_operation"}, {"score": 0.003924121879214595, "phrase": "operation_arguments"}, {"score": 0.0038603905208013482, "phrase": "service_composition_changes"}, {"score": 0.0036753171449945654, "phrase": "concept_test_system"}, {"score": 0.0036156119373414067, "phrase": "runtime_testing"}, {"score": 0.003331275574328097, "phrase": "random_testing_technique"}, {"score": 0.003250403288147613, "phrase": "novel_change_identification_method"}, {"score": 0.0030441844088874366, "phrase": "service_interface"}, {"score": 0.002970260970134645, "phrase": "test_system"}, {"score": 0.002759058732719621, "phrase": "service_operations"}, {"score": 0.0027141975147496264, "phrase": "operational_arguments"}, {"score": 0.0026482660253173075, "phrase": "service_description"}, {"score": 0.002583931950389087, "phrase": "test_candidate"}, {"score": 0.002480154140902474, "phrase": "new_method"}, {"score": 0.0023610946923597405, "phrase": "service_inventory"}, {"score": 0.002322689143237591, "phrase": "automated_reconfiguration"}, {"score": 0.0022111720236287547, "phrase": "continuous_operation"}, {"score": 0.002157433262687853, "phrase": "testing_systems"}, {"score": 0.0021049977753042253, "phrase": "test_candidate_change"}], "paper_keywords": ["Runtime testing", " SOA", " software testing"], "paper_abstract": "This paper introduces a testing strategy that is suitable for testing service-based applications. We describe an architecture that responds to changes of service operation, operation arguments and service composition changes. Our proof-of-concept test system performs runtime testing on our model atomic and composite web services using a random testing technique. A novel change identification method was developed to capture changes at the service interface. The test system is able to identify changes that occur in service operations and operational arguments in a service description of a test candidate. Our approach uses a new method to detect changes in a service inventory. Automated reconfiguration is used to support the continuous operation of the testing systems during a test candidate change.", "paper_title": "Dynamic Test Reconfiguration for Composite Web Services", "paper_id": "WOS:000359231200004"}