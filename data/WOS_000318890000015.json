{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "maximal_palindromes"}, {"score": 0.004494570360108983, "phrase": "maximal_palindrome"}, {"score": 0.0035722806911457545, "phrase": "text_t"}, {"score": 0.0034512514926836667, "phrase": "n_and_a_pattern_p"}, {"score": 0.003221316290858497, "phrase": "palindrome_pattern"}, {"score": 0.002361632539339945, "phrase": "linear-time_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Palindromes", " Pattern matching", " Linear time algorithms", " Border arrays", " Suffix trees"], "paper_abstract": "A palindrome is a string that reads the same forward and backward. For a string x, let Pals(x) be the set of all maximal palindromes of x, where each maximal palindrome in Pals(x) is encoded by a pair (c, r) of its center c and its radius r. Given a text t of length n and a pattern p of length m, the palindrome pattern matching problem is to compute all positions i oft such that Pals(p) = Pals(t[i : i + m - 1]). We present linear-time algorithms to solve this problem. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Palindrome pattern matching", "paper_id": "WOS:000318890000015"}