{"auto_keywords": [{"score": 0.028920159270475015, "phrase": "time_complexity"}, {"score": 0.00481495049065317, "phrase": "constrained_k-tree_core_problem"}, {"score": 0.00440976345264104, "phrase": "free_tree"}, {"score": 0.004310714119029961, "phrase": "vertex"}, {"score": 0.003968112038249246, "phrase": "vertical_bar_v_vertical_bar"}, {"score": 0.0035705347414368696, "phrase": "subtree_x"}, {"score": 0.0034068225125064586, "phrase": "k_leaves"}, {"score": 0.0032505921489759224, "phrase": "weighted_distances"}, {"score": 0.0028069426877159664, "phrase": "first_algorithm"}, {"score": 0.0025854347094662247, "phrase": "arbitrary_length"}, {"score": 0.002540285736232124, "phrase": "second_algorithm"}, {"score": 0.00224551648748308, "phrase": "core_problem"}, {"score": 0.0021805201234139475, "phrase": "distributed_database_systems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["algorithms", " trees", " cores", " diameters", " centers"], "paper_abstract": "Let T = (V, E) be a free tree in which each vertex has a weight and each edge has a length. Let n = vertical bar V vertical bar. Given T and parameters k and 1, a (k, l)-tree core is a subtree X of T with diameter 1, having k leaves, which minimizes the sum of the weighted distances from all vertices in T to X. In this paper, two efficient algorithms are presented for finding a (k,l)-tree core of T. The first algorithm has O(n(2)) time complexity for the case that each edge has an arbitrary length. The second algorithm has O(lkn) time complexity for the case that the lengths of all edges are 1. The (k,l)-tree core problem has an application in distributed database systems. (c) 2005 Elsevier Inc. All rights reserved.", "paper_title": "Efficient algorithms for a constrained k-tree core problem in a tree network", "paper_id": "WOS:000237705100002"}