{"auto_keywords": [{"score": 0.03839353580215102, "phrase": "fault-based_prioritization"}, {"score": 0.03629072055616761, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "specification-based_testing"}, {"score": 0.004745362527093198, "phrase": "existing_test_suite_prioritization_techniques"}, {"score": 0.00467677555573346, "phrase": "code_coverage_information"}, {"score": 0.004642852977065663, "phrase": "historical_execution"}, {"score": 0.004493207015584002, "phrase": "fault-detecting_ability"}, {"score": 0.004132237700479874, "phrase": "sound_estimates"}, {"score": 0.003969957613513855, "phrase": "source_code"}, {"score": 0.003800156761779008, "phrase": "first_time"}, {"score": 0.0036775717816768133, "phrase": "novel_notion"}, {"score": 0.0035459819741057836, "phrase": "theoretical_knowledge"}, {"score": 0.0033696019683761274, "phrase": "prescribed_fault_model"}, {"score": 0.0030537595549694134, "phrase": "logical_expressions"}, {"score": 0.0029444248503861167, "phrase": "empirical_study"}, {"score": 0.0028807066376546502, "phrase": "prioritization_techniques"}, {"score": 0.002808104467715375, "phrase": "theoretically_guided_fault-based_prioritization_technique"}, {"score": 0.002582159550634798, "phrase": "target_faults"}, {"score": 0.002526261001496249, "phrase": "prioritized_test_suite"}, {"score": 0.0024092539025697014, "phrase": "fault-based_prioritization_approach"}, {"score": 0.0021992217442375157, "phrase": "new_research_directions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Fault-based prioritization", " Fault-based testing", " Fault class hierarchy", " Software testing", " Specification-based testing", " Test suite prioritization"], "paper_abstract": "Context: Existing test suite prioritization techniques usually rely on code coverage information or historical execution data that serve as indicators for estimating the fault-detecting ability of test cases. Such indicators are primarily empirical in nature and not theoretically driven; hence, they do not necessarily provide sound estimates. Also, these techniques are not applicable when the source code is not available or when the software is tested for the first time. Objective: We propose and develop the novel notion of fault-based prioritization of test cases which directly utilizes the theoretical knowledge of their fault-detecting ability and the relationships among the test cases and the faults in the prescribed fault model, based on which the test cases are generated. Method: We demonstrate our approach of fault-based prioritization by applying it to the testing of the implementation of logical expressions against their specifications. We then validate our proposal by an empirical study that evaluates the effectiveness of prioritization techniques using two different metrics. Results: A theoretically guided fault-based prioritization technique generally outperforms other techniques under study, as assessed by two different metrics. Our empirical results also show that the technique helps to reveal all target faults by executing only about 72% of the prioritized test suite, thereby reducing the effort required in testing. Conclusions: The fault-based prioritization approach is not only applicable to the instance empirically validated in this paper, but should also be adaptable to other fault-based testing strategies. We also envisage new research directions to be opened up by our work. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Fault-based test suite prioritization for specification-based testing", "paper_id": "WOS:000298220400004"}