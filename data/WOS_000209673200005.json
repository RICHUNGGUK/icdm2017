{"auto_keywords": [{"score": 0.048843518180451954, "phrase": "sysml_activity_diagrams"}, {"score": 0.004815077777076625, "phrase": "quantitative"}, {"score": 0.004641890423057823, "phrase": "model-driven_engineering"}, {"score": 0.0043367547691560175, "phrase": "software_development_life_cycle"}, {"score": 0.0040942189695983185, "phrase": "model-based_verification_framework"}, {"score": 0.0040094142308666975, "phrase": "quantitative_and_qualitative_analysis"}, {"score": 0.0037066895459425824, "phrase": "activity_diagrams"}, {"score": 0.003669109927191359, "phrase": "markov"}, {"score": 0.0034992667091713813, "phrase": "probabilistic_symbolic_model_checker"}, {"score": 0.0031845067058084583, "phrase": "sysml_activity"}, {"score": 0.0031513240597392843, "phrase": "operational_semantics"}, {"score": 0.0029905104479072482, "phrase": "generated_models"}, {"score": 0.002808298910480358, "phrase": "probabilistic_computation_tree_logic"}, {"score": 0.002678944072162297, "phrase": "prototype_tool"}, {"score": 0.0026233771102489394, "phrase": "modeling_environment"}, {"score": 0.0025824576209656676, "phrase": "probabilistic_model_checker"}, {"score": 0.002476424729269258, "phrase": "adversary_generation"}, {"score": 0.0023133055945761235, "phrase": "verified_properties"}, {"score": 0.002253461585851626, "phrase": "established_theoretical_foundations"}, {"score": 0.0021951623041245897, "phrase": "illustrative_case_study"}], "paper_keywords": ["Probabilistic verification", " SysML activity diagrams", " Markov decision process", " Model-driven engineering", " Activity calculus"], "paper_abstract": "Model-driven engineering refers to a range of approaches that uses models throughout systems and software development life cycle. Towards sustaining such a successful approach in practice, we present a model-based verification framework that supports the quantitative and qualitative analysis of SysML activity diagrams. To this end, we propose an algorithm that maps SysML activity diagrams into Markov decision processes expressed using the language of the probabilistic symbolic model checker PRISM. Furthermore, we elaborate on the correctness of our translation algorithm by proving its soundness with respect to a SysML activity diagrams operational semantics that we also present in this work. The generated models can be verified against a set of properties expressed in the probabilistic computation tree logic. To automate our approach, we developed a prototype tool that interfaces a modeling environment and the probabilistic model checker. We also show how to leverage adversary generation to provide the developer with a useful counterexample/witness as a feedback on the verified properties. Finally, the established theoretical foundations are complemented with an illustrative case study that demonstrates the usability and benefit of such a framework.", "paper_title": "Quantitative and qualitative analysis of SysML activity diagrams", "paper_id": "WOS:000209673200005"}