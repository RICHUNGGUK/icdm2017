{"auto_keywords": [{"score": 0.041588098013486105, "phrase": "ram"}, {"score": 0.03572519422287071, "phrase": "storage_wastes"}, {"score": 0.03534752278718556, "phrase": "storage_utilization"}, {"score": 0.029910539058787163, "phrase": "mean_number"}, {"score": 0.028150909823365537, "phrase": "sufficient_number"}, {"score": 0.00481495049065317, "phrase": "growing_amount"}, {"score": 0.004693300099911199, "phrase": "efficient_parallel"}, {"score": 0.004659108142668152, "phrase": "distributed_indexing_mechanisms"}, {"score": 0.004608284537368354, "phrase": "large_resource_requirements"}, {"score": 0.004574709094672837, "phrase": "unpredictable_system_failures"}, {"score": 0.004508286991825192, "phrase": "distributed_indices"}, {"score": 0.004459101239560164, "phrase": "commodity_hardware"}, {"score": 0.004426607895888934, "phrase": "personal_computers"}, {"score": 0.003995697901740734, "phrase": "random_access_memory"}, {"score": 0.003908940988435398, "phrase": "effective_utilization"}, {"score": 0.00385214804128572, "phrase": "in-memory_inversion"}, {"score": 0.003741016338085083, "phrase": "analytical_investigation"}, {"score": 0.003700170452390401, "phrase": "empirical_evaluation"}, {"score": 0.0036198068824262464, "phrase": "memory_extensible_inverted_files"}, {"score": 0.003541182515693916, "phrase": "fixed-_or_variable-sized_linked_list_nodes"}, {"score": 0.0034642599795044445, "phrase": "linked_list_nodes"}, {"score": 0.003327534497764259, "phrase": "different_conditions"}, {"score": 0.0032671775301001483, "phrase": "different_storage_allocation_schemes"}, {"score": 0.003161271802988128, "phrase": "address_indirections"}, {"score": 0.0030032915123993837, "phrase": "reference_collections"}, {"score": 0.0029380187414193653, "phrase": "arrival_rate_scheme"}, {"score": 0.0027505663559338825, "phrase": "final_storage_utilization"}, {"score": 0.0023582694348219233, "phrase": "final_storage_utilization_of_the_extensible_compressed_inverted_file"}, {"score": 0.0022077244919858218, "phrase": "proposed_storage_allocation_schemes"}, {"score": 0.0021597049163247476, "phrase": "compressed_extensible_inverted_files"}], "paper_keywords": ["information retrieval", " indexing", " optimization"], "paper_abstract": "The growing amount of on-line data demands efficient parallel and distributed indexing mechanisms to manage large resource requirements and unpredictable system failures. Parallel and distributed indices built using commodity hardware like personal computers (PCs) can substantially save cost because PCs are produced in bulk, achieving the scale of economy. However, PCs have limited amount of random access memory (RAM) and the effective utilization of RAM for in-memory inversion is crucial. This paper presents an analytical investigation and an empirical evaluation of storage-efficient in memory extensible inverted files, which are represented by fixed- or variable-sized linked list nodes. The size of these linked list nodes is determined by minimizing the storage wastes or maximizing storage utilization under different conditions, which lead to different storage allocation schemes. Minimizing storage wastes also reduces the number of address indirections (i.e., chaining). We evaluated our storage allocation schemes using a number of reference collections. We found that the arrival rate scheme is the best in terms of both storage utilization and the mean number of chainings per term. The final storage utilization can be over 90% in our evaluation if there is a sufficient number of documents indexed. The mean number of chainings is not large (less than 2.6 for all the reference collections). We have also showed that our best storage allocation scheme can be used for our extensible compressed inverted file. The final storage utilization of the extensible compressed inverted file can be over 90% in our evaluation provided that there is a sufficient number of documents indexed. The proposed storage allocation schemes can also be used by compressed extensible inverted files with word positions (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Efficient in-memory extensible inverted file", "paper_id": "WOS:000246598200006"}