{"auto_keywords": [{"score": 0.03431706017654562, "phrase": "initial_model"}, {"score": 0.013258328759006028, "phrase": "refactoring_opportunities"}, {"score": 0.011345264521914226, "phrase": "refactoring_examples"}, {"score": 0.00481495049065317, "phrase": "important_challenges"}, {"score": 0.004779085953614184, "phrase": "model-driven_engineering"}, {"score": 0.004620957579769604, "phrase": "models'_design"}, {"score": 0.004418192459607072, "phrase": "efficient_technique"}, {"score": 0.004192803336288522, "phrase": "existing_work"}, {"score": 0.0040997480534580065, "phrase": "declarative_rules"}, {"score": 0.003978866233891427, "phrase": "appropriate_refactorings"}, {"score": 0.003905124669323623, "phrase": "complete_specification"}, {"score": 0.0038327445210488355, "phrase": "huge_number"}, {"score": 0.0036781781340563748, "phrase": "refactoring_mechanism"}, {"score": 0.003637112258469488, "phrase": "combinatorial_optimization_problem"}, {"score": 0.003543059748318891, "phrase": "good_refactoring_suggestions"}, {"score": 0.0034904076588243315, "phrase": "small_set"}, {"score": 0.00342568771304873, "phrase": "similar_contexts"}, {"score": 0.0031666711243198992, "phrase": "structural_metrics"}, {"score": 0.0029381648092259064, "phrase": "different_software_systems"}, {"score": 0.0027466028572379455, "phrase": "refactoring_operations"}, {"score": 0.002655544981260646, "phrase": "structural_similarity"}, {"score": 0.0024916819803100635, "phrase": "heuristic_method"}, {"score": 0.002418099158357658, "phrase": "possible_refactoring_solutions"}, {"score": 0.002320449502337321, "phrase": "genetic_algorithm"}, {"score": 0.002294507393862231, "phrase": "global_heuristic_search"}, {"score": 0.0022434880661725493, "phrase": "different_systems"}, {"score": 0.002226734412397011, "phrase": "real-world_models"}, {"score": 0.0022018377054878534, "phrase": "open-source_projects"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software maintenance", " model evolution", " model refactoring", " refactoring by example", " heuristic method", " genetic algorithm"], "paper_abstract": "One of the important challenges in model-driven engineering is how to improve the quality of the models' design in order to help designers understand them. Refactoring represents an efficient technique to improve the quality of a design while preserving its behavior. Most of existing work on model refactoring relies on declarative rules to detect refactoring opportunities and to apply the appropriate refactorings. However, a complete specification of refactoring opportunities requires a huge number of rules. In this paper, we consider the refactoring mechanism as a combinatorial optimization problem where the goal is to find good refactoring suggestions starting from a small set of refactoring examples applied to similar contexts. Our approach, named model refactoring by example, takes as input an initial model to refactor, a set of structural metrics calculated on both initial model and models in the base of examples, and a base of refactoring examples extracted from different software systems and generates as output a sequence of refactorings. A solution is defined as a combination of refactoring operations that should maximize as much as possible the structural similarity based on metrics between the initial model and the models in the base of examples. A heuristic method is used to explore the space of possible refactoring solutions. To this end, we used and adapted a genetic algorithm as a global heuristic search. The validation results on different systems of real-world models taken from open-source projects confirm the effectiveness of our approach. Copyright (C) 2014 John Wiley & Sons, Ltd.", "paper_title": "Model refactoring using examples: a search-based approach", "paper_id": "WOS:000339660300005"}