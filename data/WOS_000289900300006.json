{"auto_keywords": [{"score": 0.045823130012453445, "phrase": "fingerprint_lookup"}, {"score": 0.015719716506582538, "phrase": "efficient_deduplication"}, {"score": 0.008960210708900934, "phrase": "deduplication_ratio"}, {"score": 0.004748371393578422, "phrase": "modern_backup_operation"}, {"score": 0.0045119929871912405, "phrase": "deduplication_system"}, {"score": 0.0044289730051264116, "phrase": "pertinent_factors"}, {"score": 0.004208427318712072, "phrase": "key_ingredients"}, {"score": 0.00411182818527434, "phrase": "efficient_fingerprint_lookup"}, {"score": 0.004036141321779216, "phrase": "fingerprint_management_scheme"}, {"score": 0.003998828459674951, "phrase": "lru"}, {"score": 0.003943481134959376, "phrase": "index_partitioning"}, {"score": 0.003888905257972882, "phrase": "efficient_chunking"}, {"score": 0.00372965096877929, "phrase": "optimized_rabin's_algorithm"}, {"score": 0.003593555152077465, "phrase": "arithmetic_operations"}, {"score": 0.003543804852018315, "phrase": "algebraic_nature"}, {"score": 0.0035110198699787013, "phrase": "modulo_arithmetic"}, {"score": 0.0034785371344994197, "phrase": "lru-based_index_partitioning"}, {"score": 0.0033515736929172644, "phrase": "access_locality"}, {"score": 0.0031697368057340895, "phrase": "lru_manner"}, {"score": 0.003125835572347772, "phrase": "temporal_locality"}, {"score": 0.0030257422786589723, "phrase": "access_correlation"}, {"score": 0.0028882701690741467, "phrase": "tablet_list"}, {"score": 0.0028402908853518622, "phrase": "context"}, {"score": 0.0027570267191549774, "phrase": "chunking_speed"}, {"score": 0.0026811531172346676, "phrase": "prototype_backup_system"}, {"score": 0.0026440008776012665, "phrase": "comprehensive_analysis"}, {"score": 0.0023210846870653757, "phrase": "average_chunk_size"}, {"score": 0.0021545524633190985, "phrase": "overall_backup_speed_increases"}], "paper_keywords": ["Deduplication", " chunking", " backup", " index partitioning", " fingerprint lookup"], "paper_abstract": "In this work, we focus on optimizing the deduplication system by adjusting the pertinent factors in fingerprint lookup and chunking, the factors which we identify as the key ingredients of efficient deduplication. For efficient fingerprint lookup, we propose fingerprint management scheme called LRU-based Index Partitioning. For efficient chunking, we propose Incremental Modulo-K(INC-K) algorithm which is optimized Rabin's algorithm where we significantly reduce the number of arithmetic operations exploiting the algebraic nature of modulo arithmetic. LRU-based Index Partitioning uses the notion of tablet and enforces access locality of the fingerprint lookup in storing fingerprints. We maintain tablets with LRU manner to exploit temporal locality of the fingerprint lookup. To preserve access correlation across the tablets, we apply prefetching in maintaining tablet list. We propose Context-aware chunking to maximize chunking speed and deduplication ratio. We develop prototype backup system and performed comprehensive analysis on various factors and their relationship: average chunk size, chunking speed, deduplication ratio, tablet management algorithms, and overall backup speed. By increasing the average chunk size from 4 KB to 10 KB, chunking time increases by 34.3 percent, deduplication ratio decreases by 0.66 percent and the overall backup speed increases by 50 percent (from 51.4 MB/sec to 77.8 MB/sec).", "paper_title": "Efficient Deduplication Techniques for Modern Backup Operation", "paper_id": "WOS:000289900300006"}