{"auto_keywords": [{"score": 0.04940778266965044, "phrase": "syntactic_sugar"}, {"score": 0.00481495049065317, "phrase": "compositional_desugaring"}, {"score": 0.004582722012454012, "phrase": "language_implementation"}, {"score": 0.004270178957872099, "phrase": "comprehension_problems"}, {"score": 0.003813669883040509, "phrase": "transformed_program"}, {"score": 0.003503497128638099, "phrase": "black-box_process"}, {"score": 0.003241312187060814, "phrase": "new_approach"}, {"score": 0.003195787852087248, "phrase": "resugaring_programs"}, {"score": 0.0030199761431186434, "phrase": "evaluation_steps"}, {"score": 0.0029565620771207003, "phrase": "core_language"}, {"score": 0.0026967596578196325, "phrase": "prior_work"}, {"score": 0.0024597305738431226, "phrase": "almost_arbitrary_rewriting_rules"}, {"score": 0.0023742031943872464, "phrase": "restricted_patterns"}, {"score": 0.002196342933346204, "phrase": "dag_representation"}], "paper_keywords": ["syntactic sugar", " resugaring", " hygiene", " abstract syntax DAG"], "paper_abstract": "Syntactic sugar is widely used in language implementation. Its benefits are, however, offset by the comprehension problems it presents to programmers once their program has been transformed. In particular, after a transformed program has begun to evaluate (or otherwise be altered by a black-box process), it can become unrecognizable. We present a new approach to resugaring programs, which is the act of reflecting evaluation steps in the core language in terms of the syntactic sugar that the programmer used. Relative to prior work, our approach has two important advances: it handles hygiene, and it allows almost arbitrary rewriting rules (as opposed to restricted patterns). We do this in the context of a DAG representation of programs, rather than more traditional trees.", "paper_title": "Hygienic Resugaring of Compositional Desugaring", "paper_id": "WOS:000367255800008"}