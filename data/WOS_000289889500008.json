{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lambda_calculus"}, {"score": 0.004442824994700736, "phrase": "strict_intersection_types"}, {"score": 0.003952082333580496, "phrase": "equivalence_classes"}, {"score": 0.003754731210715724, "phrase": "barendregt_et_al"}, {"score": 0.003489714006817602, "phrase": "essential_intersection_type_assignment"}, {"score": 0.0031267359296488118, "phrase": "major_properties"}, {"score": 0.002863652837038965, "phrase": "approximation_theorem"}, {"score": 0.002622647280008795, "phrase": "type_assignment"}, {"score": 0.002584494385587982, "phrase": "filter_semantics"}, {"score": 0.002437339565360659, "phrase": "principal_pair_property"}, {"score": 0.002136087390959268, "phrase": "essential_system"}], "paper_keywords": ["Theory", " Strict intersection types", " lambda-calculus", " filter semantics", " principal pairs", " approximation", " normalization"], "paper_abstract": "This article will show the usefulness and elegance of strict intersection types for the Lambda Calculus, that are strict in the sense that they are the representatives of equivalence classes of types in the BCD-system [Barendregt et al. 1983]. We will focus on the essential intersection type assignment; this system is almost syntax directed, and we will show that all major properties hold that are known to hold for other intersection systems, like the approximation theorem, the characterization of (head/strong) normalization, completeness of type assignment using filter semantics, strong normalization for cut-elimination and the principal pair property. In part, the proofs for these properties are new; we will briefly compare the essential system with other existing systems.", "paper_title": "Strict Intersection Types for the Lambda Calculus", "paper_id": "WOS:000289889500008"}