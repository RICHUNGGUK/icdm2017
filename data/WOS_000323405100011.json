{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "task_migration"}, {"score": 0.009270771548654879, "phrase": "input_application"}, {"score": 0.005844178839342143, "phrase": "disjoint_regions"}, {"score": 0.004762202897268383, "phrase": "non-contiguous_processor_allocation"}, {"score": 0.0047273577269638725, "phrase": "noc-based_cmps"}, {"score": 0.0046073860169839305, "phrase": "processor_allocation_mechanism"}, {"score": 0.0045736684402340275, "phrase": "noc-based_chip_multiprocessors"}, {"score": 0.004506968388996092, "phrase": "processor_allocation"}, {"score": 0.004457579615095599, "phrase": "well-known_problem"}, {"score": 0.004424953471635011, "phrase": "parallel_computer_systems"}, {"score": 0.004328494656899359, "phrase": "processing_nodes"}, {"score": 0.0042497136254424995, "phrase": "different_tasks"}, {"score": 0.004172360444377281, "phrase": "run_time"}, {"score": 0.0038061298318563925, "phrase": "fast_heuristic_algorithm"}, {"score": 0.0037505809981715024, "phrase": "free_processors"}, {"score": 0.003668768542734106, "phrase": "incoming_application"}, {"score": 0.0036285315458900284, "phrase": "new_application"}, {"score": 0.003562444653947001, "phrase": "task-migration_algorithm"}, {"score": 0.003408688677676014, "phrase": "allocated_resources"}, {"score": 0.0033465923623290034, "phrase": "recently_deallocated_processors"}, {"score": 0.00327356326590461, "phrase": "current_tasks"}, {"score": 0.0032021226849872054, "phrase": "better_mapping"}, {"score": 0.0031437775259091794, "phrase": "proposed_method"}, {"score": 0.003086492169113408, "phrase": "dynamic_traffic_pattern"}, {"score": 0.002975024676463106, "phrase": "current_communication_demands"}, {"score": 0.0028675712105299496, "phrase": "task_mapping"}, {"score": 0.0028360962841331634, "phrase": "current_network_status"}, {"score": 0.0027844017803674444, "phrase": "non-contiguous_processor_allocation_strategy"}, {"score": 0.002521064923851732, "phrase": "virtual_point-to-point_circuits"}, {"score": 0.0022081920438290193, "phrase": "contiguous_allocation_schemes"}, {"score": 0.002183938718432764, "phrase": "experimental_results"}, {"score": 0.0021679176844660074, "phrase": "considerable_improvement"}, {"score": 0.0021520139248317333, "phrase": "existing_allocation_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Network-on-chip", " Processor allocation", " Non-contiguous allocation", " Task migration", " Power", " Performance"], "paper_abstract": "In this paper, a processor allocation mechanism for NoC-based chip multiprocessors is presented. Processor allocation is a well-known problem in parallel computer systems and aims to allocate the processing nodes of a multiprocessor to different tasks of an input application at run time. The proposed mechanism targets optimizing the on-chip communication power/latency and relies on two procedures: processor allocation and task migration. Allocation is done by a fast heuristic algorithm to allocate the free processors to the tasks of an incoming application when a new application begins execution. The task-migration algorithm is activated when some application completes execution and frees up the allocated resources. Task migration uses the recently deallocated processors and tries to rearrange the current tasks in order to find a better mapping for them. The proposed method can also capture the dynamic traffic pattern of the network and perform task migration based on the current communication demands of the tasks. Consequently, task migration adapts the task mapping to the current network status. We adopt a non-contiguous processor allocation strategy in which the tasks of the input application are allowed to be mapped onto disjoint regions (groups of processors) of the network. We then use virtual point-to-point circuits, a state-of-the-art fast on-chip connection designed for network-on-chips, to virtually connect the disjoint regions and make the communication latency/power closer to the values offered by contiguous allocation schemes. The experimental results show considerable improvement over existing allocation mechanisms. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Using task migration to improve non-contiguous processor allocation in NoC-based CMPs", "paper_id": "WOS:000323405100011"}