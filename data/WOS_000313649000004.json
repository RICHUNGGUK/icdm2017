{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "unified_compression-based"}, {"score": 0.004800454757143987, "phrase": "acceleration_of_edit-distance_computation"}, {"score": 0.004757227624616643, "phrase": "edit_distance_problem"}, {"score": 0.004714387899814988, "phrase": "classical_fundamental_problem"}, {"score": 0.004686041610317898, "phrase": "computer_science"}, {"score": 0.004602016568817581, "phrase": "combinatorial_pattern"}, {"score": 0.004519491332356944, "phrase": "standard_dynamic_programming_solution"}, {"score": 0.004029988158236421, "phrase": "general_strings"}, {"score": 0.0039576799833721315, "phrase": "known_techniques"}, {"score": 0.003771114171630529, "phrase": "particular_compression_scheme"}, {"score": 0.0037371212381934853, "phrase": "basic_idea"}, {"score": 0.003593311381057356, "phrase": "edit_distance"}, {"score": 0.0035609154384221567, "phrase": "compressed_strings"}, {"score": 0.003252542052430779, "phrase": "single_edit-distance_algorithm"}, {"score": 0.003155784719225786, "phrase": "compression_scheme"}, {"score": 0.0030434561939032597, "phrase": "single_algorithm"}, {"score": 0.0030069062905274976, "phrase": "compressibility_properties"}, {"score": 0.002961833719935782, "phrase": "compression_method"}, {"score": 0.0028736995088566083, "phrase": "different_compression"}, {"score": 0.002754687859754749, "phrase": "straight_line_programs"}, {"score": 0.0027133856739937133, "phrase": "generic_platform"}, {"score": 0.0026088674879389826, "phrase": "byte-pair_encoding"}, {"score": 0.0025388705701873075, "phrase": "total_length_n"}, {"score": 0.0025235718883452585, "phrase": "straight-line_program_representations"}, {"score": 0.0023399219122055177, "phrase": "rational_scoring_function"}, {"score": 0.002256567862969091, "phrase": "time_algorithm"}, {"score": 0.0022429664506287577, "phrase": "arbitrary_scoring_functions"}, {"score": 0.002176176622950153, "phrase": "compressible_strings"}, {"score": 0.0021370591426091833, "phrase": "quadratic_time"}, {"score": 0.0021049977753042253, "phrase": "worst_case_scenario"}], "paper_keywords": ["Combinatorial pattern matching", " Edit-distance", " Straight-line-programming", " Data compression"], "paper_abstract": "The edit distance problem is a classical fundamental problem in computer science in general, and in combinatorial pattern matching in particular. The standard dynamic programming solution for this problem computes the edit-distance between a pair of strings of total length O(N) in O(N (2)) time. To this date, this quadratic upper-bound has never been substantially improved for general strings. However, there are known techniques for breaking this bound in case the strings are known to compress well under a particular compression scheme. The basic idea is to first compress the strings, and then to compute the edit distance between the compressed strings. As it turns out, practically all known o(N (2)) edit-distance algorithms work, in some sense, under the same paradigm described above. It is therefore natural to ask whether there is a single edit-distance algorithm that works for strings which are compressed under any compression scheme. A rephrasing of this question is to ask whether a single algorithm can exploit the compressibility properties of strings under any compression method, even if each string is compressed using a different compression. In this paper we set out to answer this question by using straight line programs. These provide a generic platform for representing many popular compression schemes including the LZ-family, Run-Length Encoding, Byte-Pair Encoding, and dictionary methods. For two strings of total length N having straight-line program representations of total size n, we present an algorithm running in O(nNlg(N/n)) time for computing the edit-distance of these two strings under any rational scoring function, and an O(n (2/3) N (4/3)) time algorithm for arbitrary scoring functions. Our new result, while providing a speed up for compressible strings, does not surpass the quadratic time bound even in the worst case scenario.", "paper_title": "Unified Compression-Based Acceleration of Edit-Distance Computation", "paper_id": "WOS:000313649000004"}