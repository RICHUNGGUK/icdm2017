{"auto_keywords": [{"score": 0.04154041880609474, "phrase": "category_theory"}, {"score": 0.033790902612291396, "phrase": "configuration_language"}, {"score": 0.00481495049065317, "phrase": "multi-level_specifications"}, {"score": 0.004532988904965752, "phrase": "specified_sharing"}, {"score": 0.0044289730051264116, "phrase": "modular_language"}, {"score": 0.004388035083357706, "phrase": "configuring_systems"}, {"score": 0.004208427318712072, "phrase": "new_language"}, {"score": 0.003446353878654566, "phrase": "configured_specifications"}, {"score": 0.0033828748627992193, "phrase": "algebraic_presentations"}, {"score": 0.0030117065110966414, "phrase": "new_notion"}, {"score": 0.0029838294169759663, "phrase": "instance_reduction"}, {"score": 0.0029288446848334576, "phrase": "component_instances"}, {"score": 0.0028882701690741467, "phrase": "particular_configuration"}, {"score": 0.002795762692061496, "phrase": "hierarchical_structuring"}, {"score": 0.0027698788736535865, "phrase": "multi-level_configured_specifications"}, {"score": 0.0026195184143518713, "phrase": "speicification_language"}, {"score": 0.002278284823857861, "phrase": "configuration_morphisms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["formal languages", " formal semantics", " software engineering", " configuration specification languages"], "paper_abstract": "This paper shows how systems can be built from their component parts with specified sharing. Its principle contribution is a modular language for configuring systems. A configuration is a description in the new language of how a system is constructed hierarchically from specifications of its component parts. Category theory has been used to represent the composition of specifications that share a component part by constructing colimits of diagrams. We reformulated this application of category theory to view both configured specifications and their diagrams as algebraic presentations of presheaves. The framework of presheaves leads naturally to a configuration language that expresses structuring from instances of specifications, and also incorporates a new notion of instance reduction to extract the component instances from a particular configuration. The configuration language now expresses the hierarchical structuring of multi-level configured specifications. The syntax is simple because it is independent of any speicification language; structuring a diagram to represent a configuration is simple because there is no need to calculate a colimit; and combining specifications is simple because structuring is by configuration morphisms with no need to flatten either specifications or their diagrams to calculate colimits. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "A language for configuring multi-level specifications", "paper_id": "WOS:000235571600003"}