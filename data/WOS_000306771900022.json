{"auto_keywords": [{"score": 0.04709285457636537, "phrase": "python"}, {"score": 0.015719240930250657, "phrase": "aloha"}, {"score": 0.013445258787883394, "phrase": "fortran"}, {"score": 0.012182810031001119, "phrase": "distributed_program"}, {"score": 0.012112327398635657, "phrase": "test_data"}, {"score": 0.01084718716054757, "phrase": "helicity_routines"}, {"score": 0.004768269217639729, "phrase": "helicity_amplitudes"}, {"score": 0.004749723071004129, "phrase": "feynman_diagram_computations"}, {"score": 0.004622220883473785, "phrase": "feynman"}, {"score": 0.00458600558590272, "phrase": "quantum_field_theory"}, {"score": 0.00457869799743995, "phrase": "lagrangian"}, {"score": 0.0044799936615283215, "phrase": "universal_feynrules_output"}, {"score": 0.004359392842355907, "phrase": "complete_set"}, {"score": 0.004233762728640565, "phrase": "feynman_diagrams"}, {"score": 0.004176375532543663, "phrase": "higher_orders"}, {"score": 0.004127803456371936, "phrase": "independent_and_currently_it_can_output_routines"}, {"score": 0.0039710365542976935, "phrase": "program"}, {"score": 0.003946766004066276, "phrase": "aloha_catalogue"}, {"score": 0.0038554737609608255, "phrase": "cpc_program_library"}, {"score": 0.0038404642251010797, "phrase": "queen's_university"}, {"score": 0.0038255131820150922, "phrase": "belfast"}, {"score": 0.0038106195546165574, "phrase": "n._ireland"}, {"score": 0.0035383712891119937, "phrase": "tar.gz_programming_language"}, {"score": 0.0033699205939645557, "phrase": "squared_matrix_element"}, {"score": 0.0032855095476183372, "phrase": "helas_library"}, {"score": 0.0032472646337850042, "phrase": "static_library"}, {"score": 0.003228308906356781, "phrase": "limited_number"}, {"score": 0.0032157330701257283, "phrase": "helicity_functions"}, {"score": 0.0031535826056633873, "phrase": "needed_routine"}, {"score": 0.0031168685826545367, "phrase": "arbitrary_interaction"}, {"score": 0.0030506626796257077, "phrase": "corresponding_routines"}, {"score": 0.0029858588546373306, "phrase": "feynman_rules"}, {"score": 0.0029395925668102185, "phrase": "model_information"}, {"score": 0.002916728171131277, "phrase": "ufo_format"}, {"score": 0.002854761308379149, "phrase": "different_wavefunctions"}, {"score": 0.002810520668490478, "phrase": "analytical_expression"}, {"score": 0.0027240799841720957, "phrase": "requested_language"}, {"score": 0.0026661950520772636, "phrase": "allowed_fields"}, {"score": 0.0025051903162739233, "phrase": "mssm"}, {"score": 0.0023993575159598933, "phrase": "watanabe"}, {"score": 0.00238067302970908, "phrase": "hagiwara"}, {"score": 0.0023346234464901978, "phrase": "feynman_diagram_evaluations"}, {"score": 0.0022583704173318123, "phrase": "c._degrande"}, {"score": 0.0022495644368875686, "phrase": "c._duhr"}, {"score": 0.0022407927161620855, "phrase": "b._fuks"}, {"score": 0.0022320551224679526, "phrase": "d._grellscheid"}, {"score": 0.002223351523626989, "phrase": "o._mattelaer"}, {"score": 0.002197443382039439, "phrase": "ufo-_the_universal_feynrules_output"}, {"score": 0.002188924314996122, "phrase": "comput"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Phenomenological and Empirical Models and Theories", " Helicity Routine", " Matrix Element", " BSM theories"], "paper_abstract": "We present an application that automatically writes the HELAS (HELicity Amplitude Subroutines) library corresponding to the Feynman rules of any quantum field theory Lagrangian. The code is written in Python and takes the Universal FeynRules Output (UFo) as an input. From this input it produces the complete set of routines, wave-functions and amplitudes, that are needed for the computation of Feynman diagrams at leading as well as at higher orders. The representation is language independent and currently it can output routines in Fortran. C++, and Python. A few sample applications implemented in the MADGRAPH 5 framework are presented. Program summary Program title: ALOHA Catalogue identifier: AEMS_v 1_0 Program summtny URL: http://cpc.cs.qub.ac.uk/summaries/AEMS_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: http://www.opensource.org/licenses/Uol-NCSA.php No. of lines in distributed program, including test data, etc.: 6094320 No. of bytes in distributed program, including test data, etc.: 7479819 Distribution format: tar.gz Programming language: Python2.6 Computer: 32/64 bit Operating system: Linux/Mac/Windows RAM: 512 Mbytes Classification: 4.4, 11.6 Nature of problem: An effcient numerical evaluation of a squared matrix element can be done with the help of the helicity routines implemented in the HELAS library [1]. This static library contains a limited number of helicity functions and is therefore not always able to provide the needed routine in the presence of an arbitrary interaction. This program provides a way to automatically create the corresponding routines for any given model. Solution method: ALOHA takes the Feynman rules associated to the vertex obtained from the model information (in the UFO format [2]), and multiplies it by the different wavefunctions or propagators. As a result the analytical expression of the helicity routines is obtained. Subsequently, this expression is automatically written in the requested language (Python, Fortran or C++) Restrictions: The allowed fields are currently spin 0, 1/2, 1 and 2, and the propagators of these particles are canonical. Running time: A few seconds for the SM and the MSSM, and up to a few minutes for models with spin 2 particles. References: [1] Murayama, H. and Watanabe, I. and Hagiwara, K., HELAS: HELicity Amplitude Subroutines for Feynman diagram evaluations, KEK-91-11, (1992) http://www-lib.kek.jp/cgi-bin/img_index?199124011 [2] C. Degrande, C. Duhr, B. Fuks, D. Grellscheid, O. Mattelaer, et al., UFO- The Universal FeynRules Output, Comput. Phys. Commun. 183 (2012) 1201-1214. arXiv:1108.2040, doi:10.1016/j.cpc.2012.01.022. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "ALOHA: Automatic libraries of helicity amplitudes for Feynman diagram computations", "paper_id": "WOS:000306771900022"}