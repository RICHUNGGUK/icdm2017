{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "feathertrait_java"}, {"score": 0.00458488025289647, "phrase": "featherweight_java"}, {"score": 0.004529095466484662, "phrase": "igarashi"}, {"score": 0.00447399268433818, "phrase": "pierce"}, {"score": 0.004392566052486504, "phrase": "wadler"}, {"score": 0.004182593563464564, "phrase": "ftj"}, {"score": 0.0038389110156920926, "phrase": "trait_composition"}, {"score": 0.0033548062793973144, "phrase": "\"incomplete_stateless_class"}, {"score": 0.003253560798692431, "phrase": "already_written_behavior"}, {"score": 0.002825681384008326, "phrase": "state_variables"}, {"score": 0.002791239714439304, "phrase": "additional_methods"}, {"score": 0.0027403605798830984, "phrase": "conflicting_names"}, {"score": 0.002673957615079041, "phrase": "imported_traits"}, {"score": 0.002183938718432764, "phrase": "regular_types"}, {"score": 0.0021049977753042253, "phrase": "behavioral_content"}], "paper_keywords": ["object-oriented language design", " inheritance", " types"], "paper_abstract": "In the context of Featherweight Java by Igarashi, Pierce, and Wadler, and its recent extension FeatherTrait Java (FTJ) by the authors, we investigate classes that can be extended with trait composition. A trait is a collection of methods, i.e., behaviors without state; it can be viewed as an \"incomplete stateless class\" i.e., an interface with some already written behavior. Traits can be composed in any order, but only make sense when \"imported\" by a class that provides state variables and additional methods to disambiguate conflicting names arising between the imported traits. We introduce FeatherTrait Java with Interfaces (iFTJ), where traits need to be typechecked only once, which is necessary for compiling them in isolation, and considering them as regular types, like Java-interfaces with a behavioral content. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Extending FeatherTrait Java with Interfaces", "paper_id": "WOS:000256461400016"}