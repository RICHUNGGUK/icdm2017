{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "space_requirement"}, {"score": 0.03250938140687978, "phrase": "lower_order_terms"}, {"score": 0.030489443458718794, "phrase": "constant_worst-case_time"}, {"score": 0.028714196829425873, "phrase": "distance_queries"}, {"score": 0.004822020739766114, "phrase": "graphs"}, {"score": 0.004772818068176176, "phrase": "small_treewidth"}, {"score": 0.004201571673071299, "phrase": "space-efficient_encodings"}, {"score": 0.003968332027661981, "phrase": "ram"}, {"score": 0.0037311260623089436, "phrase": "first_oracle"}, {"score": 0.0036179751816682454, "phrase": "navigation_oracle"}, {"score": 0.0035705347414368696, "phrase": "primitive_navigation_operations"}, {"score": 0.0033572130837348623, "phrase": "enumeration_argument"}, {"score": 0.003007389443770562, "phrase": "n_vertices"}, {"score": 0.002981026404927824, "phrase": "treewidth_k."}, {"score": 0.0029161225023394363, "phrase": "mentioned_queries"}, {"score": 0.0027417911324611917, "phrase": "exact_distance_oracle"}, {"score": 0.002142426911242168, "phrase": "popular_interest"}, {"score": 0.0021049977753042253, "phrase": "bounded_treewidth"}], "paper_keywords": ["Graph decomposition", " Treewidth", " Navigation oracles", " Distance oracles"], "paper_abstract": "Given an unlabeled, unweighted, and undirected graph with n vertices and small (but not necessarily constant) treewidth k, we consider the problem of preprocessing the graph to build space-efficient encodings (oracles) to perform various queries efficiently. We assume the word RAM model where the size of a word is Omega(logn) bits. The first oracle, we present, is the navigation oracle which facilitates primitive navigation operations of adjacency, neighborhood, and degree queries. By way of an enumeration argument, which is of interest in its own right, we show the space requirement of the oracle is optimal to within lower order terms for all graphs with n vertices and treewidth k. The oracle supports the mentioned queries all in constant worst-case time. The second oracle, we present, is an exact distance oracle which facilitates distance queries between any pair of vertices (i.e., an all-pairs shortest-path oracle). The space requirement of the oracle is also optimal to within lower order terms. Moreover, the distance queries perform in O(k (3)log(3) k) time. Particularly, for the class of graphs of popular interest, graphs of bounded treewidth (where k is constant), the distances are reported in constant worst-case time.", "paper_title": "Compact Navigation and Distance Oracles for Graphs with Small Treewidth", "paper_id": "WOS:000332582900005"}