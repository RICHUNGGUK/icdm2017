{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "embedded_real-time_systems"}, {"score": 0.03847360652690384, "phrase": "processing_time"}, {"score": 0.0319266224781995, "phrase": "stereo_matching"}, {"score": 0.004693887748239161, "phrase": "fast_stereo_matching"}, {"score": 0.004667399058297227, "phrase": "embedded_systems"}, {"score": 0.004423061344624088, "phrase": "robotic_applications"}, {"score": 0.0042391934825554076, "phrase": "different_matching_approaches"}, {"score": 0.004167795561137289, "phrase": "well-suited_solution"}, {"score": 0.004097595199141165, "phrase": "census-based_stereo_matching_algorithm"}, {"score": 0.003983201879164145, "phrase": "explicit_adaption"}, {"score": 0.003927203683176278, "phrase": "well-known_census"}, {"score": 0.003763870829723604, "phrase": "classic_census_transform"}, {"score": 0.00370044870195814, "phrase": "sparse_census_mask"}, {"score": 0.0036380913496453994, "phrase": "nearly_unchanged_matching_quality"}, {"score": 0.0035565739009596267, "phrase": "large_sparse_census_masks"}, {"score": 0.0035165002796966895, "phrase": "small_dense_masks"}, {"score": 0.0033416652198400986, "phrase": "different_mask_sizes"}, {"score": 0.0032299490885442103, "phrase": "complete_stereo_matching_system"}, {"score": 0.0030955250132409964, "phrase": "optimized_high_speed_realization"}, {"score": 0.003078028357912228, "phrase": "different_embedded_and_pc_platforms"}, {"score": 0.0030347168513348835, "phrase": "difficult_areas"}, {"score": 0.002966678750599945, "phrase": "low_texture"}, {"score": 0.0029083942467546305, "phrase": "state-of-the-art_real-time_methods"}, {"score": 0.0027325449069867222, "phrase": "high_flexibility"}, {"score": 0.0026940816246330494, "phrase": "high_performance"}, {"score": 0.0026262033625248445, "phrase": "good_quality"}, {"score": 0.0025892330566358503, "phrase": "detailed_performance_analysis"}, {"score": 0.0025383451160985488, "phrase": "optimized_reference_implementations"}, {"score": 0.0024257693435515903, "phrase": "dsp"}, {"score": 0.002405377071546674, "phrase": "gpu"}, {"score": 0.0023780623297398576, "phrase": "frame_rate"}, {"score": 0.002311562103644741, "phrase": "matching_quality"}, {"score": 0.002253299769886694, "phrase": "middlebury_stereo_evaluation_website"}, {"score": 0.002234206434819338, "phrase": "middle_quality"}, {"score": 0.0022215673111923915, "phrase": "top_performance_rank"}, {"score": 0.0022089995300212588, "phrase": "additional_evaluation"}, {"score": 0.0021049977753042253, "phrase": "real-world_scenarios"}], "paper_keywords": ["Stereo matching", " Real-time stereo", " Census", " Embedded computer vision", " DSP", " GPU"], "paper_abstract": "In this paper, the challenge of fast stereo matching for embedded systems is tackled. Limited resources, e.g. memory and processing power, and most importantly real-time capability on embedded systems for robotic applications, do not permit the use of most sophisticated stereo matching approaches. The strengths and weaknesses of different matching approaches have been analyzed and a well-suited solution has been found in a Census-based stereo matching algorithm. The novelty of the algorithm used is the explicit adaption and optimization of the well-known Census transform in respect to embedded real-time systems in software. The most important change in comparison with the classic Census transform is the usage of a sparse Census mask which halves the processing time with nearly unchanged matching quality. This is due the fact that large sparse Census masks perform better than small dense masks with the same processing effort. The evidence of this assumption is given by the results of experiments with different mask sizes. Another contribution of this work is the presentation of a complete stereo matching system with its correlation-based core algorithm, the detailed analysis and evaluation of the results, and the optimized high speed realization on different embedded and PC platforms. The algorithm handles difficult areas for stereo matching, such as areas with low texture, very well in comparison to state-of-the-art real-time methods. It can successfully eliminate false positives to provide reliable 3D data. The system is robust, easy to parameterize and offers high flexibility. It also achieves high performance on several, including resource-limited, systems without losing the good quality of stereo matching. A detailed performance analysis of the algorithm is given for optimized reference implementations on various commercial of the shelf (COTS) platforms, e.g. a PC, a DSP and a GPU, reaching a frame rate of up to 75 fps for 640 x 480 images and 50 disparities. The matching quality and processing time is compared to other algorithms on the Middlebury stereo evaluation website reaching a middle quality and top performance rank. Additional evaluation is done by comparing the results with a very fast and well-known sum of absolute differences algorithm using several Middlebury datasets and real-world scenarios. (c) 2010 Elsevier Inc. All rights reserved.", "paper_title": "A fast stereo matching algorithm suitable for embedded real-time systems", "paper_id": "WOS:000283834900007"}