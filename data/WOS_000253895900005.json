{"auto_keywords": [{"score": 0.04044563975550593, "phrase": "modulus_r"}, {"score": 0.00481495049065317, "phrase": "modular_counting"}, {"score": 0.00470341117804131, "phrase": "multivariate_polynomials"}, {"score": 0.004358368398332723, "phrase": "finite_field"}, {"score": 0.0039449104968131655, "phrase": "modular_root_counting_problem"}, {"score": 0.0035705347414368726, "phrase": "computing_n"}, {"score": 0.003138124398958758, "phrase": "efficient_algorithm"}, {"score": 0.0024969414243312133, "phrase": "np"}, {"score": 0.0023953929817357882, "phrase": "hardness_results"}, {"score": 0.002272053079580848, "phrase": "prime_fields"}, {"score": 0.0021805201234139475, "phrase": "maximum-likelihood_decoding"}, {"score": 0.0021550692219752788, "phrase": "reed-solomon"}, {"score": 0.0021049977753042253, "phrase": "root-finding_problem"}], "paper_keywords": ["polynomials", " modular counting", " Reed-Solomon codes"], "paper_abstract": "Given a multivariate polynomial P(X(1),...,X (n) ) over a finite field F(q), let N(P) denote the number of roots over F(q)(n). The modular root counting problem is given a modulus r, to determine N (r)(P)=N(P)mod r. We study the complexity of computing N (r) (P), when the polynomial is given as a sum of monomials. We give an efficient algorithm to compute N (r) (P) when the modulus r is a power of the characteristic of the field. We show that for all other moduli, the problem of computing N(r) (P) is NP-hard. We present some hardness results which imply that our algorithm is essentially optimal for prime fields. We show an equivalence between maximum-likelihood decoding for Reed-Solomon codes and a root-finding problem for symmetric polynomials.", "paper_title": "Algorithms for modular counting of roots of multivariate polynomials", "paper_id": "WOS:000253895900005"}