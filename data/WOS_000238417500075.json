{"auto_keywords": [{"score": 0.04721825881327069, "phrase": "automatic_differentiation"}, {"score": 0.00481495049065317, "phrase": "time-stepping_procedures"}, {"score": 0.0047310525657970615, "phrase": "adol-c."}, {"score": 0.0046079260641779755, "phrase": "basic_reverse_mode"}, {"score": 0.004183137595671171, "phrase": "discrete_adjoints"}, {"score": 0.003539252646181146, "phrase": "large-scale_problems"}, {"score": 0.0033572130837348623, "phrase": "time-stepping_procedure"}, {"score": 0.0031565959573536194, "phrase": "checkpointing_mechanism"}, {"score": 0.0028151944356239952, "phrase": "checkpointing_procedure"}, {"score": 0.0024667783849055634, "phrase": "minimal_number"}, {"score": 0.0023604768913655463, "phrase": "resulting_effects"}, {"score": 0.002298902547676131, "phrase": "run-time_behavior"}, {"score": 0.0021613897794439227, "phrase": "derivative_computation"}, {"score": 0.0021049977753042253, "phrase": "ode-based_optimization_problem"}], "paper_keywords": [""], "paper_abstract": "Using the basic reverse mode of automatic differentiation, the memory needed for the computation of discrete adjoints is proportional to the number of operations performed. This behavior is frequently not acceptable, especially for large-scale problems that involve a kind of time-stepping procedure. Therefore, we integrate a checkpointing mechanism into ADOL-C, a tool for the automatic differentiation of C and C++ programs. This checkpointing procedure is optimal for a given number of checkpoints in the sense that it yields the minimal number of recomputations. The resulting effects on the run-time behavior are illustrated by means of the derivative computation for an ODE-based optimization problem.", "paper_title": "Optimal checkpointing for time-stepping procedures in ADOL-C", "paper_id": "WOS:000238417500075"}