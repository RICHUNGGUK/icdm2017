{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "finite_countermodel_based_verification_for_program_transformation"}, {"score": 0.004568871736067739, "phrase": "automatic_program_verification"}, {"score": 0.00450933377534525, "phrase": "program_transformation"}, {"score": 0.004392565073466714, "phrase": "program_analysis"}, {"score": 0.0038271712887391015, "phrase": "unreachability_properties"}, {"score": 0.003777261911983744, "phrase": "computing_systems"}, {"score": 0.003269266730193333, "phrase": "unfold-fold_program_transformation_methods"}, {"score": 0.0031429517477457925, "phrase": "reachability_tasks"}, {"score": 0.0029238768315330305, "phrase": "semantics_tree"}, {"score": 0.002737960968372391, "phrase": "general-purpose_verification_methods"}, {"score": 0.0026321198895843173, "phrase": "program_transformation_techniques"}, {"score": 0.002480961181275199, "phrase": "safety_verification_method"}, {"score": 0.0023538840032613535, "phrase": "turchin's_supercompilation_method"}, {"score": 0.0022480304016499605, "phrase": "supercompilation_sub-algorithms"}, {"score": 0.0021896891011033105, "phrase": "reachability_problems"}, {"score": 0.0021049977753042253, "phrase": "external_model_finder"}], "paper_keywords": ["program specialization", " supercompilation", " program analysis", " program transformation", " safety verification", " finite countermodels"], "paper_abstract": "Both automatic program verification and program transformation are based on program analysis. In the past decade a number of approaches using various automatic general-purpose program transformation techniques (partial deduction, specialization, supercompilation) for verification of unreachability properties of computing systems were introduced and demonstrated [10, 19, 30, 36]. On the other hand, the semantics based unfold-fold program transformation methods pose themselves diverse kinds of reachability tasks and try to solve them, aiming at improving the semantics tree of the program being transformed. That means some general-purpose verification methods may be used for strengthening program transformation techniques. This paper considers the question how finite countermodels for safety verification method [34] might be used in Turchin's supercompilation method. We extract a number of supercompilation sub-algorithms trying to solve reachability problems and demonstrate use of an external model finder for solving some of the problems.", "paper_title": "Finite Countermodel Based Verification for Program Transformation (A Case Study)", "paper_id": "WOS:000367349400003"}