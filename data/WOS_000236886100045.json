{"auto_keywords": [{"score": 0.04824341868882559, "phrase": "connected_treewidth"}, {"score": 0.00481495049065317, "phrase": "constructive_proof"}, {"score": 0.004306205029641728, "phrase": "n-node_width-k_tree-decomposition"}, {"score": 0.00409508755819924, "phrase": "connected_tree-decomposition"}, {"score": 0.003311604528903634, "phrase": "connected_graph"}, {"score": 0.0027535633837592597, "phrase": "connected_search"}, {"score": 0.002475898613632249, "phrase": "n-node_m-edge"}, {"score": 0.002251227801482381, "phrase": "fastest_algorithm"}, {"score": 0.002105020344953754, "phrase": "opt"}], "paper_keywords": [""], "paper_abstract": "We give a constructive proof of the equality between treewidth and connected treewidth. More precisely, we describe an O(nk(3))- time algorithm that, given any n-node width-k tree-decomposition of a connected graph G, returns a connected tree-decomposition of G of width <= k. The equality between treewidth and connected treewidth finds applications in graph searching problems. First, using equality between treewidth and connected treewidth, we prove that the connected search number cs(G) of a connected graph G is at most log n + 1 times larger than its search number. Second, using our constructive proof of equality between treewidth and connected treewidth, we design an O(log n root log OPT)-approximation algorithm for connected search, running in time O(t(n) + nk(3) log(3/2) k + m log n) for n-node m-edge connected graphs of treewidth at most k, where t(n) is the time-complexity of the fastest algorithm for approximating the treewidth, up to a factor O(root log OPT).", "paper_title": "Connected Treewidth and connected graph searching", "paper_id": "WOS:000236886100045"}