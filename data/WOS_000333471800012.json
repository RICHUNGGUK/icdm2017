{"auto_keywords": [{"score": 0.037198643942021645, "phrase": "noc"}, {"score": 0.01171053248499505, "phrase": "fpga"}, {"score": 0.00481495049065317, "phrase": "noc_simulation"}, {"score": 0.004717960684395242, "phrase": "increased_demand"}, {"score": 0.0046797114400479135, "phrase": "on-chip_communication_bandwidth"}, {"score": 0.004566805735863274, "phrase": "multicore_trend"}, {"score": 0.004226856126282259, "phrase": "noc_designs"}, {"score": 0.00399260264462941, "phrase": "control_mechanisms"}, {"score": 0.0038803710796509227, "phrase": "new_noc_designs"}, {"score": 0.003665253570776976, "phrase": "dart"}, {"score": 0.003310236836421397, "phrase": "previous_approaches"}, {"score": 0.003076052206618737, "phrase": "generic_noc_simulation_engine"}, {"score": 0.0030139837612215728, "phrase": "fully_connected_collection"}, {"score": 0.0029895074299598275, "phrase": "fundamental_components"}, {"score": 0.0024882810071079797, "phrase": "significant_time"}, {"score": 0.0024580159789774516, "phrase": "large_fpga_design"}, {"score": 0.0023310544011985253, "phrase": "virtex-ii_pro_fpga"}, {"score": 0.002274684393868218, "phrase": "cycle-based_software_simulator"}, {"score": 0.00220163445285539, "phrase": "simulation_accuracy"}], "paper_keywords": ["Network-on-chip", " simulation", " FPGA"], "paper_abstract": "The increased demand for on-chip communication bandwidth as a result of the multicore trend has made packet-switched networks-on-chip (NoCs) a more compelling choice for the communication backbone in next-generation systems [1]. However, NoC designs have many power, area, and performance tradeoffs in topology, buffer sizes, routing algorithms, and flow control mechanisms-hence, the study of new NoC designs can be very time intensive. To address these challenges, we propose DART, a fast and flexible FPGA-based NoC simulation architecture. Rather than laying the NoC out in hardware on the FPGA like previous approaches [2], [3], our design virtualizes the NoC by mapping its components to a generic NoC simulation engine, composed of a fully connected collection of fundamental components (e.g., routers and flit queues). This approach has two main advantages: 1) since it is virtualized it can simulate any NoC, and 2) any NoC can be mapped to the engine without rebuilding it, which can take significant time for a large FPGA design. We demonstrate 1) that an implementation of DART on a Virtex-II Pro FPGA can achieve over 100 x speedup over the cycle-based software simulator Booksim [4], while maintaining the same level of simulation accuracy, and 2) that a more modern Virtex-6 FPGA can accommodate a 49-node DART implementation.", "paper_title": "DART: A Programmable Architecture for NoC Simulation on FPGAs", "paper_id": "WOS:000333471800012"}