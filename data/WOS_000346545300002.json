{"auto_keywords": [{"score": 0.034960769918278005, "phrase": "parametric_traits"}, {"score": 0.009024955213009807, "phrase": "fine-grained_reuse"}, {"score": 0.007433808058693869, "phrase": "product_functionality"}, {"score": 0.006867419784671529, "phrase": "interface_names"}, {"score": 0.006813194035714672, "phrase": "class_names"}, {"score": 0.00481495049065317, "phrase": "type-safe_software_product_lines"}, {"score": 0.004701556483912018, "phrase": "software_product_line"}, {"score": 0.004664361961003668, "phrase": "spl"}, {"score": 0.004554488671294504, "phrase": "related_software_systems"}, {"score": 0.004518442937844318, "phrase": "well-defined_commonality"}, {"score": 0.004377077848734575, "phrase": "common_artifacts"}, {"score": 0.004223299391912042, "phrase": "novel_technique"}, {"score": 0.004010624853427534, "phrase": "class-based_inheritance"}, {"score": 0.0037634608487353153, "phrase": "different_and_orthogonal_linguistic_concepts"}, {"score": 0.003531474887552889, "phrase": "featherweight_parametric_trait_java"}, {"score": 0.003248483521309273, "phrase": "well-known_construct"}, {"score": 0.0026836723685046407, "phrase": "explicit_operators"}, {"score": 0.0026203386550421558, "phrase": "code_manipulations"}, {"score": 0.0025892330566358503, "phrase": "product_variability"}, {"score": 0.002558495760339272, "phrase": "fptj_type_system"}, {"score": 0.0023626775529531486, "phrase": "different_products"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Featherweight Java", " Feature model", " Software product line", " Trait", " Type system"], "paper_abstract": "A software product line (SPL) is a set of related software systems with well-defined commonality and variability that are developed by reusing common artifacts. In this paper, we present a novel technique for implementing SPLs by exploiting mechanisms for fine-grained reuse which are orthogonal to class-based inheritance. In our approach the concepts of type, behavior, and state are separated into different and orthogonal linguistic concepts: interfaces, traits and classes, respectively. We formalize our proposal by means Of FEATHERWEIGHT PARAMETRIC TRAIT JAVA (FPTJ), a minimal core calculus where units of product functionality are modeled by parametric traits. Traits are a well-known construct for fine-grained reuse of behavior. Parametric traits are traits parameterized by interface names and class names. Parametric traits are applied to interface names and class names to generate traits that can be assembled in other (possibly parametric) traits or in classes that are used to build products. The composition of product functionality is realized by explicit operators of the calculus, allowing code manipulations for modeling product variability. The FPTJ type system ensures that the products in the SPL are type-safe by inspecting the parametric traits and classes shared by different products only once. Therefore, type-safety of an extension of a (type-safe) FPTJ SPL can be guaranteed by inspecting only the newly added parts. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Implementing type-safe software product lines using parametric traits", "paper_id": "WOS:000346545300002"}