{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "distinct_palindromes"}, {"score": 0.04747663842253327, "phrase": "linear_time"}, {"score": 0.0031140747752837826, "phrase": "maximal_palindromes"}, {"score": 0.0028795712616923462, "phrase": "longest_previous_factor_array"}, {"score": 0.0027535633837592597, "phrase": "direct_consequence"}, {"score": 0.002574788013427524, "phrase": "palindromic_richness"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Palindrome", " Palindromic richness", " Palindromic fullness", " Algorithms"], "paper_abstract": "We design an algorithm to count the number of distinct palindromes in a word w in time O(vertical bar w vertical bar), by adapting an algorithm to detect all occurrences of maximal palindromes in a given word and using the longest previous factor array. As a direct consequence, this shows that the palindromic richness (or fullness) of a word can be checked in linear time. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Counting distinct palindromes in a word in linear time", "paper_id": "WOS:000281457000013"}