{"auto_keywords": [{"score": 0.049273293170208544, "phrase": "synchronous_guarded_actions"}, {"score": 0.00481495049065317, "phrase": "concurrent_action"}, {"score": 0.00478778190213169, "phrase": "oriented_specifications"}, {"score": 0.004348580182733617, "phrase": "synchronous_hardware_circuit"}, {"score": 0.004299621153829837, "phrase": "asynchronous_guarded_actions"}, {"score": 0.004227209809791869, "phrase": "abstraction_level"}, {"score": 0.004039995317682942, "phrase": "previous_approaches"}, {"score": 0.0039050280761085713, "phrase": "caos"}, {"score": 0.0037320255482878365, "phrase": "underlying_model"}, {"score": 0.0035869274480340727, "phrase": "guarded_actions"}, {"score": 0.003546513036085932, "phrase": "clock_cycle"}, {"score": 0.003467040410632942, "phrase": "tightly_integrated_step"}, {"score": 0.0032946562900625187, "phrase": "new_compilation_procedure"}, {"score": 0.003148612096891635, "phrase": "caos_models"}, {"score": 0.0030606302942851027, "phrase": "explicit_interface"}, {"score": 0.002843180211561427, "phrase": "better_analyses"}, {"score": 0.0027794243746094905, "phrase": "custom_schedulers"}, {"score": 0.0025097154697345096, "phrase": "scheduler_synthesis"}, {"score": 0.0024395426929046415, "phrase": "supervisory_control"}, {"score": 0.002190280748985751, "phrase": "formal_verification"}, {"score": 0.002129020447793464, "phrase": "caos_specifications"}, {"score": 0.0021049977753042253, "phrase": "previously_known_formal_verification_approaches"}], "paper_keywords": ["Algorithms", " Languages", " Concurrent Action-Oriented Specifications", " Guarded Commands", " Synchronous Languages", " Code Generation"], "paper_abstract": "Concurrent Action-Oriented Specifications (CAOS) model the behavior of a synchronous hardware circuit as asynchronous guarded actions at an abstraction level higher than the Register Transfer Level (RTL). Previous approaches always considered the compilation of CAOS, which includes a transformation of the underlying model of computation and the scheduling of guarded actions per clock cycle, as a tightly integrated step. In this paper, we present a new compilation procedure, which separates these two tasks and translates CAOS models to synchronous guarded actions with an explicit interface to a scheduler. This separation of concerns has many advantages, including better analyses and integration of custom schedulers. Our method also generates assertions that each scheduler must obey that can be fulfilled by algorithms for scheduler synthesis like those developed in supervisory control. We present our translation procedure in detail and illustrate it by various examples. We also show that our method simplifies formal verification of hardware synthesized from CAOS specifications over previously known formal verification approaches.", "paper_title": "Translating Concurrent Action Oriented Specifications to Synchronous Guarded Actions", "paper_id": "WOS:000277056500006"}