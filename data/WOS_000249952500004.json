{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "constant_multiplications"}, {"score": 0.04362260194050128, "phrase": "common_subexpressions"}, {"score": 0.0047689174754929195, "phrase": "linear_systems"}, {"score": 0.004416079619543104, "phrase": "nested_additions"}, {"score": 0.003953932197201054, "phrase": "algebraic_methods"}, {"score": 0.0038600230206554792, "phrase": "algebraic_techniques"}, {"score": 0.0037864980290391354, "phrase": "multi-level_logic_synthesis"}, {"score": 0.0035570425396761122, "phrase": "boolean_logic"}, {"score": 0.003049555059533735, "phrase": "linear_arithmetic_expressions"}, {"score": 0.0030058503645435455, "phrase": "main_advantage"}, {"score": 0.002837188425640173, "phrase": "multiple_variables"}, {"score": 0.002730023736069673, "phrase": "conventional_optimization_techniques"}, {"score": 0.00247944491239733, "phrase": "conventional_techniques"}, {"score": 0.0024556852466581527, "phrase": "synthesis_and_simulation_results"}, {"score": 0.002208853811052348, "phrase": "common_subexpression_elimination"}, {"score": 0.0021049977753042253, "phrase": "particular_value"}], "paper_keywords": ["algebraic methods", " constant multiplications", " linear systems", " DSP synthesis", " high level synthesis", " common subexpression elimination"], "paper_abstract": "Constant multiplications can be efficiently implemented in hardware by converting them into a sequence of nested additions and shift operations. They can be optimized further by finding common subexpressions among these operations. In this work, we present algebraic methods for eliminating common subexpressions. Algebraic techniques are established in multi-level logic synthesis for the minimization of the number of literals and hence gates to implement Boolean logic. In this work we use the concepts of two of these methods, namely rectangle covering and fast extract (FX) and adapt them to the problem of optimizing linear arithmetic expressions. The main advantage of using such methods is that we can optimize systems consisting of multiple variables, which is not possible using the conventional optimization techniques. Our optimizations are aimed at reducing the area and power consumption of the hardware, and experimental results show up to 30.3% improvement in the number of operations over conventional techniques. Synthesis and simulation results show up to 30% area reduction and up to 27% power reduction. We also modified our algorithm to perform delay aware optimization, where we perform common subexpression elimination such that the delay is not exceeded beyond a particular value.", "paper_title": "Algebraic methods for optimizing constant multiplications in linear systems", "paper_id": "WOS:000249952500004"}