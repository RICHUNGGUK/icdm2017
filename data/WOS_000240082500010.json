{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "non-clausal_formulas"}, {"score": 0.004208881856146758, "phrase": "input_formula"}, {"score": 0.004050116768809519, "phrase": "clausal_form"}, {"score": 0.0037864980290391354, "phrase": "typical_formulas"}, {"score": 0.00334144503360907, "phrase": "new_non-clausal_sat-solver"}, {"score": 0.0032463805170627686, "phrase": "general_matings_instead_of_dpll_search"}, {"score": 0.002703869368554536, "phrase": "new_variables"}, {"score": 0.002527654365712841, "phrase": "search_space_pruning"}, {"score": 0.0023178219772486868, "phrase": "general_matings_based_sat_solver"}, {"score": 0.0021049977753042253, "phrase": "current_state-of-the-art_sat_solvers"}], "paper_keywords": [""], "paper_abstract": "Most state-of-the-art SAT solvers are based on DPLL search and require the input formula to be in clausal form (cnf). However, typical formulas that arise in practice are non-clausal. We present a new non-clausal SAT-solver based on General Matings instead of DPLL search. Our technique is able to handle non-clausal formulas involving boolean AND, boolean OR, - operators without destroying their structure or introducing new variables. We present techniques for performing search space pruning, learning, non-chronological backtracking in the context of a General Matings based SAT solver. Experimental results show that our SAT solver is competitive to current state-of-the-art SAT solvers on a class of non-clausal benchmarks.", "paper_title": "Satisfiability checking of non-clausal formulas using general matings", "paper_id": "WOS:000240082500010"}