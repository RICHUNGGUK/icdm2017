{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concurrent_distributed_objects"}, {"score": 0.004518442937844318, "phrase": "novel_object-oriented_implementation"}, {"score": 0.0041074234667687875, "phrase": "dynamic_finite_element_analysis_interfaces"}, {"score": 0.00385431710959668, "phrase": "program_maintainability"}, {"score": 0.0034299649219748513, "phrase": "microsoft_net"}, {"score": 0.002833689453299307, "phrase": "program_development"}, {"score": 0.002687235334499192, "phrase": "better_program_portability"}, {"score": 0.0026307897899760383, "phrase": "memory_architectures"}, {"score": 0.0021049977753042253, "phrase": "proposed_implementation"}], "paper_keywords": ["Finite element analysis", " Component mode synthesis", " Mode superposition", " Object oriented", " Parallel programming", " Microsoft NET"], "paper_abstract": "This paper presents a novel object-oriented implementation of component mode synthesis and mode superposition for dynamic finite element analysis Interfaces are used extensively to maximize program maintainability and flexibility Parallelization is achieved using concurrent distributed objects (facilitated by Microsoft NET) Instead of the message passing approach The methodology allows consistency in modelling and implementation this eases program development It also results in better program portability across memory architectures Tests on a cluster of computers and on a shared memory multi-core machine demonstrate the effectiveness of the proposed implementation (C) 2008 Elsevier Ltd All rights reserved", "paper_title": "Parallel modal analysis with concurrent distributed objects", "paper_id": "WOS:000284439300014"}