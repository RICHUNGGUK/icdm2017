{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "class_level"}, {"score": 0.015587848514431341, "phrase": "clustering_techniques"}, {"score": 0.0045556080393342165, "phrase": "new_requirements"}, {"score": 0.0040779081518317415, "phrase": "soft_ware's_complexity"}, {"score": 0.003958049372486465, "phrase": "software_complexity"}, {"score": 0.0035883942463601688, "phrase": "challenging_task"}, {"score": 0.0034977560416755726, "phrase": "software_designer"}, {"score": 0.0033232673019931206, "phrase": "ill-structured_software"}, {"score": 0.003239304090565123, "phrase": "heuristic_refactoring_advice"}, {"score": 0.003211788912325178, "phrase": "software_designers"}, {"score": 0.0030645676308053444, "phrase": "pattern_recognition_techniques"}, {"score": 0.0029998918671747168, "phrase": "ill-structured_code"}, {"score": 0.002639440558428147, "phrase": "arithmetic_averages"}, {"score": 0.002475755804232436, "phrase": "adaptive_k-nearest_neighbour"}, {"score": 0.0021049977753042253, "phrase": "computational_complexity"}], "paper_keywords": ["Software refactoring", " code restructuring", " clustering", " coupling", " cohesion"], "paper_abstract": "Software becomes more and more complex as it adapts new requirements, is enhanced or is modified. Thus, the quality of the software decreases. Therefore, there is a need to reduce the soft ware's complexity and improve its quality. Refactoring reduces software complexity and improves quality by restructuring the code into a more readable form that improves its internal structure without changing its external functionality. However, it is a challenging task and requires effort from the software designer. In this paper, we propose a method for identifying ill-structured software at the class level that provides heuristic refactoring advice to software designers in order to create balance between coupling and cohesion using pattern recognition techniques. To identify the ill-structured code we use three clustering techniques, namely, the Single Linkage algorithm (SLINK), the Complete Linkage algorithm (CLINK) and the Weighted Pair-Group Method using Arithmetic averages (WPGMA). In addition to these clustering techniques, we also use the Adaptive K-Nearest Neighbour (A-KNN) algorithm and compare its performance with the other clustering techniques. The results show that software structuring at the class level using A-KNN is superior to SLINK, CLINK and WPGMA in terms of performance and computational complexity.", "paper_title": "Software Refactoring at the Class Level using Clustering Techniques", "paper_id": "WOS:000209183000002"}