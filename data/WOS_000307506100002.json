{"auto_keywords": [{"score": 0.04606292823894879, "phrase": "lazy_initialization_algorithm"}, {"score": 0.030898713099490025, "phrase": "improved_algorithms"}, {"score": 0.00481495049065317, "phrase": "dynamic_heap_objects"}, {"score": 0.0043080553835735825, "phrase": "classical_symbolic_execution"}, {"score": 0.0036167509502276294, "phrase": "formal_study"}, {"score": 0.003503497128638099, "phrase": "inefficiency_issue"}, {"score": 0.003287482882222731, "phrase": "significant_analysis_time_reduction"}, {"score": 0.0032099453192629976, "phrase": "original_lazy_initialization_algorithm"}, {"score": 0.0028715299874549245, "phrase": "operational_semantics"}, {"score": 0.0028037753646260937, "phrase": "core_subset"}, {"score": 0.002737615043512257, "phrase": "java_virtual_machine"}, {"score": 0.0023346234464901978, "phrase": "jvm_concrete_semantics"}, {"score": 0.0021731423856364003, "phrase": "extensive_experiments"}], "paper_keywords": ["Symbolic execution", " Operational semantics", " JVM", " Soundness", " Completeness"], "paper_abstract": "Programs that manipulate dynamic heap objects are difficult to analyze due to issues like aliasing. Lazy initialization algorithm enables the classical symbolic execution to handle such programs. Despite its successes, there are two unresolved issues: (1) inefficiency; (2) lack of formal study. For the inefficiency issue, we have proposed two improved algorithms that give significant analysis time reduction over the original lazy initialization algorithm. In this article, we formalize the lazy initialization algorithm and the improved algorithms as operational semantics of a core subset of the Java Virtual Machine (JVM) instructions, and prove that all algorithms are relatively sound and complete with respect to the JVM concrete semantics. Finally, we conduct a set of extensive experiments that compare the three algorithms and demonstrate the efficiency of the improved algorithms.", "paper_title": "Efficient and formal generalized symbolic execution", "paper_id": "WOS:000307506100002"}