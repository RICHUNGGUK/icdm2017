{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "large-scale_object-oriented_software"}, {"score": 0.004597754207658615, "phrase": "modularization_quality"}, {"score": 0.004555499634179394, "phrase": "object-oriented_software"}, {"score": 0.004390312150344245, "phrase": "synonymous_concepts"}, {"score": 0.004290112502811656, "phrase": "typical_class"}, {"score": 0.0042506731642425275, "phrase": "object-oriented_programming"}, {"score": 0.0041154571996523505, "phrase": "large_object-oriented_software"}, {"score": 0.003929689573550262, "phrase": "typical_module"}, {"score": 0.003734979290204709, "phrase": "large_object-oriented_software_system"}, {"score": 0.0036328561748082138, "phrase": "large_number"}, {"score": 0.003517223847512266, "phrase": "access_discipline"}, {"score": 0.0034052594710793664, "phrase": "\"clean\"_class-level_partitioning"}, {"score": 0.0028698706191651155, "phrase": "large_object-oriented_software_systems"}, {"score": 0.0023741093119014436, "phrase": "associational_relationships"}, {"score": 0.002204697943520258, "phrase": "two-pronged_approach"}, {"score": 0.0021049977753042253, "phrase": "popular_open-source_software_systems"}], "paper_keywords": ["superpackage", " modularization", " software metrics/measurement", " module", " interface", " object-oriented software", " large-scale software", " maintenance and enhancement", " maintainability", " coupling"], "paper_abstract": "The metrics formulated to date for characterizing the modularization quality of object-oriented software have considered module and class to be synonymous concepts. But, a typical class in object-oriented programming exists at too low a level of granularity in large object-oriented software consisting of millions of lines of code. A typical module (sometimes referred to as a superpackage) in a large object-oriented software system will typically consist of a large number of classes. Even when the access discipline encoded in each class makes for \"clean\" class-level partitioning of the code, the intermodule dependencies created by associational, inheritance-based, and method invocations may still make it difficult to maintain and extend the software. The goal of this paper is to provide a set of metrics that characterizes large object-oriented software systems with regard to such dependencies. Our metrics characterize the quality of modularization with respect to the APIs of the modules, on the one hand, and, on the other, with respect to such object-oriented intermodule dependencies as caused by inheritance, associational relationships, state access violations, fragile base-class design, etc. Using a two-pronged approach, we validate the metrics by applying them to popular open-source software systems.", "paper_title": "Metrics for measuring the quality of modularization of large-scale object-oriented software", "paper_id": "WOS:000259456600009"}