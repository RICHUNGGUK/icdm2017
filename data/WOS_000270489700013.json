{"auto_keywords": [{"score": 0.042599325952589605, "phrase": "twig_pattern"}, {"score": 0.030194697002565607, "phrase": "partial_semantic_constraints"}, {"score": 0.00481495049065317, "phrase": "partially_specified_twig"}, {"score": 0.004709193603747991, "phrase": "huge_volumes"}, {"score": 0.004544770921520536, "phrase": "tree-structured_form"}, {"score": 0.004386063799793622, "phrase": "useful_information"}, {"score": 0.004327981760540394, "phrase": "data_collections"}, {"score": 0.004289686492089571, "phrase": "effective_and_efficient_query_processing_methods"}, {"score": 0.004158290806404304, "phrase": "desired_information"}, {"score": 0.004121490798711703, "phrase": "xml_documents"}, {"score": 0.0038728151007982378, "phrase": "existing_xml_query_languages"}, {"score": 0.0038385334675132897, "phrase": "twig"}, {"score": 0.003770869401884267, "phrase": "inherent_feature"}, {"score": 0.003737485125097945, "phrase": "query_nodes"}, {"score": 0.0036553070575015344, "phrase": "concrete_precedence_relationships"}, {"score": 0.003329368827624161, "phrase": "complete_specification"}, {"score": 0.003198705576491802, "phrase": "single_query_expression"}, {"score": 0.003073154478201771, "phrase": "query_evaluation"}, {"score": 0.0030459283281463953, "phrase": "partially_specified_twig_pattern"}, {"score": 0.002811464848641341, "phrase": "query_expression"}, {"score": 0.002725235414366096, "phrase": "xpath"}, {"score": 0.0026182085765020548, "phrase": "concise_but_effective_way"}, {"score": 0.0025492038831408715, "phrase": "stack_based_algorithm"}, {"score": 0.00241658945942583, "phrase": "concrete_twig_patterns"}, {"score": 0.002220551141101661, "phrase": "ptwigstack_algorithm"}, {"score": 0.0021049977753042253, "phrase": "existing_ones"}], "paper_keywords": ["XML database", " query processing", " partially specified twig pattern", " holistic twig join", " XPath"], "paper_abstract": "As huge volumes of data are organized or exported in tree-structured form, it is quite necessary to extract useful information from these data collections using effective and efficient query processing methods. A natural way of retrieving desired information from XML documents is using twig pattern (TP), which is, actually, the core component of existing XML query languages. Twig pattern possesses the inherent feature that query nodes on the same path have concrete precedence relationships. It is this feature that makes it infeasible in many actual scenarios. This has driven the requirement of relaxing the complete specification of a twig pattern to express more flexible semantic constraints in a single query expression. In this paper, we focus on query evaluation of partially specified twig pattern (PSTP) queries, through which we can reap the most flexibility of specifying partial semantic constraints in a query expression. We propose an extension to XPath through introducing two Samepath axes to support partial semantic constraints in a concise but effective way. Then we propose a stack based algorithm, pTwigStack, to process a PSTP holistically without deriving the concrete twig patterns and then processing them one by one. Further, we propose two DTD schema based optimization methods to improve the performance of pTwigStack algorithm. Our experimental results on various datasets indicate that our method performs significantly better than existing ones when processing PSTPs.", "paper_title": "Efficient processing of partially specified twig pattern queries", "paper_id": "WOS:000270489700013"}