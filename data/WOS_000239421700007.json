{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "word_suffix_trees"}, {"score": 0.015550496262925529, "phrase": "suffix_trees"}, {"score": 0.014029784853323407, "phrase": "sparse_suffix_trees"}, {"score": 0.004685012337701536, "phrase": "key_data_structure"}, {"score": 0.004634019674525974, "phrase": "text_string_matching"}, {"score": 0.004484332781147261, "phrase": "wide_application_areas"}, {"score": 0.0040192915527630995, "phrase": "input_string"}, {"score": 0.003228434077467506, "phrase": "k_words"}, {"score": 0.003193585145752492, "phrase": "d."}, {"score": 0.0030899524399043863, "phrase": "w_w.r.t"}, {"score": 0.0030064251340251196, "phrase": "path-compressed_trie"}, {"score": 0.0027843339377323878, "phrase": "typical_example"}, {"score": 0.0026213749921120623, "phrase": "natural_language_documents"}, {"score": 0.002592784882557155, "phrase": "andersson_et_al"}, {"score": 0.002273025527678093, "phrase": "new_word_suffix_tree_construction_algorithm"}, {"score": 0.002128220632893247, "phrase": "worst_cases"}], "paper_keywords": [""], "paper_abstract": "Suffix trees are the key data structure for text string matching, and are used in wide application areas such as bioinformatics and data compression. Sparse suffix trees are kind of suffix trees that represent only a subset of suffixes of the input string. In this paper we study word suffix trees, which are one variation of sparse suffix trees. Let D be a dictionary of words and w be a string in D+, namely, w is a sequence w(1)...w(k) of k words in D. The word suffix tree of w w.r.t. D is a path-compressed trie that represents only the k suffixes in the form of w(i)...w(k). A typical example of its application is word- and phrase-level search on natural language documents. Andersson et al. proposed an algorithm to build word suffix trees in O(n) expected time with O(k) space. In this paper we present a new word suffix tree construction algorithm with O(n) running time and O(k) space in the worst cases. Our algorithm is on-line, which means that it can sequentially process the characters in the input, each by each, from left to right.", "paper_title": "On-line linear-time construction of word suffix trees", "paper_id": "WOS:000239421700007"}