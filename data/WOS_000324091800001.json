{"auto_keywords": [{"score": 0.04769632635828977, "phrase": "global-edf"}, {"score": 0.04586846484671967, "phrase": "run-time_overhead"}, {"score": 0.00481495049065317, "phrase": "real-time_os."}, {"score": 0.004622450915803531, "phrase": "experimental_comparison"}, {"score": 0.0043258453436258405, "phrase": "real-time_operating_system"}, {"score": 0.004216880725292, "phrase": "recent_works"}, {"score": 0.0041316803676012155, "phrase": "os_implementation_aspects"}, {"score": 0.003986684503518077, "phrase": "scheduling_data_structures"}, {"score": 0.0038467574225322086, "phrase": "real-time_schedulability"}, {"score": 0.0037498152007206815, "phrase": "theoretic_aspects"}, {"score": 0.0036181717017041387, "phrase": "real-time_patches"}, {"score": 0.003545024951402821, "phrase": "general-purpose_os."}, {"score": 0.003250238918180901, "phrase": "schedulability_ratio"}, {"score": 0.0032172054825137866, "phrase": "task_sets"}, {"score": 0.0031521392193570846, "phrase": "theoretical_hard_real-time_schedulability_tests"}, {"score": 0.003025915966640355, "phrase": "well-designed_object-oriented_rtos"}, {"score": 0.0025826247025542213, "phrase": "real-time_patch"}, {"score": 0.0025564169259157726, "phrase": "linux"}, {"score": 0.0024918548761791435, "phrase": "task_set_schedulability_ratio"}, {"score": 0.0023197548918958777, "phrase": "rtos"}, {"score": 0.0022041312401435346, "phrase": "patched_linux"}, {"score": 0.0021049977753042253, "phrase": "hard_real-time_schedulers"}], "paper_keywords": ["Real-time scheduling", " Multicore processors", " Real-time operating systems", " Global EDF", " Partitioned EDF"], "paper_abstract": "In this work, we provide an experimental comparison between Global-EDF and Partitioned-EDF, considering the run-time overhead of a real-time operating system (RTOS). Recent works have confirmed that OS implementation aspects, such as the choice of scheduling data structures and interrupt handling mechanisms, impact real-time schedulability as much as scheduling theoretic aspects. However, these studies used real-time patches applied into a general-purpose OS. By measuring the run-time overhead of an RTOS designed from scratch, we show how close the schedulability ratio of task sets is to the theoretical hard real-time schedulability tests. Moreover, we show how a well-designed object-oriented RTOS allows code reuse of scheduling components (e.g., thread, scheduling criteria, and schedulers) and easy real-time scheduling extensions. We compare our RTOS to a real-time patch for Linux in terms of the task set schedulability ratio of several generated task sets. In some cases, Global-EDF considering the overhead of the RTOS is superior to Partitioned-EDF considering the overhead of the patched Linux, which clearly shows how different OSs impact hard real-time schedulers.", "paper_title": "Implementation and evaluation of global and partitioned scheduling in a real-time OS", "paper_id": "WOS:000324091800001"}