{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "xml_types"}, {"score": 0.004081385289516914, "phrase": "unordered_types"}, {"score": 0.003516898780234098, "phrase": "polynomial_time"}, {"score": 0.0030808211830129304, "phrase": "kleene_star"}, {"score": 0.002907405102646616, "phrase": "single_elements"}, {"score": 0.0024637379406427856, "phrase": "generated_language"}, {"score": 0.002363806685815014, "phrase": "inclusion_checking"}, {"score": 0.0023249757987087033, "phrase": "constraint_implication"}, {"score": 0.0022306602656266545, "phrase": "quadratic_algorithm"}, {"score": 0.0021049977753042253, "phrase": "ram_machine"}], "paper_keywords": ["XML", " Regular expressions", " Subtyping", " XML Schema"], "paper_abstract": "Inclusion between XML types is important but expensive, and is much more expensive when unordered types are considered. We prove here that inclusion for XML types with interleaving and counting can be decided in polynomial time in the presence of two important restrictions: no element appears twice in the same content model, and Kleene star is only applied to disjunctions of single elements. Our approach is based on the transformation of each such content model into a set of constraints that completely characterizes the generated language. We then reduce inclusion checking to constraint implication. We exhibit a quadratic algorithm to perform inclusion checking on a RAM machine. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Efficient inclusion for a class of XML types with interleaving and counting", "paper_id": "WOS:000268515400005"}