{"auto_keywords": [{"score": 0.04927872927155838, "phrase": "early_stages"}, {"score": 0.00481495049065317, "phrase": "availability_requirements"}, {"score": 0.004681525814235883, "phrase": "system_development"}, {"score": 0.00462919213721188, "phrase": "non-functional_aspects"}, {"score": 0.004551781491498328, "phrase": "timing_constraints"}, {"score": 0.004425616928975799, "phrase": "fault_tolerance"}, {"score": 0.004207230913063179, "phrase": "distributed_real-time_systems"}, {"score": 0.003888659470009222, "phrase": "nonfunctional_requirements"}, {"score": 0.0037595947142663997, "phrase": "software_development_life_cycle"}, {"score": 0.0036966717141736355, "phrase": "widespread_interest"}, {"score": 0.0036553070575015344, "phrase": "dependability_modeling"}, {"score": 0.0036144035798673967, "phrase": "analysis_techniques"}, {"score": 0.0035539019235553897, "phrase": "requirements_phase"}, {"score": 0.0034944094552943, "phrase": "major_motivation"}, {"score": 0.0033218213825698417, "phrase": "novel_approach"}, {"score": 0.0032296377835432533, "phrase": "high-level_availability_requirements"}, {"score": 0.003035711716881469, "phrase": "itu-t_user_requirements_notation_standard"}, {"score": 0.0028695095228791724, "phrase": "availability_architectural_tactics"}, {"score": 0.0028373742057129126, "phrase": "ucm_models"}, {"score": 0.0027898428590137515, "phrase": "resulting_extensions"}, {"score": 0.0026222551419772867, "phrase": "jucmnav_tool"}, {"score": 0.0025928815987676535, "phrase": "early_assessment"}, {"score": 0.0024097920845706795, "phrase": "amatrix_representation"}, {"score": 0.0023694065215394593, "phrase": "feature-based_availability_composition"}, {"score": 0.0022145052062614514, "phrase": "case_study"}, {"score": 0.0021896891011033105, "phrase": "lawful_intercept"}, {"score": 0.0021049977753042253, "phrase": "ip_routers"}], "paper_keywords": ["Non-functional requirements", " Availability", " URN", " Use Case Maps", " Availability analysis", " Architectural tactics"], "paper_abstract": "Non-functional aspects such as timing constraints, availability, and fault tolerance are critical in the design and implementation of distributed real-time systems. As a result, it is becoming crucial to model and analyze nonfunctional requirements at the early stages of the software development life cycle. The widespread interest in dependability modeling and analysis techniques at the requirements phase provides the major motivation for this research. This paper presents a novel approach to describe and validate high-level availability requirements using theUse Case Maps (UCM) language of the ITU-T User Requirements Notation standard. The proposed approach relies on a mapping of availability architectural tactics to UCM models. The resulting extensions are described using a metamodel and are implemented within the jUCMNav tool. Early assessment and characterization of the means to achieve availability are then performed using amatrix representation allowing for feature-based availability composition and reasoning. We demonstrate the applicability of our approach through a case study of lawful intercept andACL-based forwarding features on IP routers.", "paper_title": "Describing and assessing availability requirements in the early stages of system development", "paper_id": "WOS:000365427900008"}