{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "coarse-grain_dataflow_specification"}, {"score": 0.00999936517337198, "phrase": "dataflow_graph"}, {"score": 0.004563427013973105, "phrase": "new_methodology"}, {"score": 0.004514714250357749, "phrase": "automatic_rtl_code_generation"}, {"score": 0.004077127568184696, "phrase": "fir"}, {"score": 0.004033490114063784, "phrase": "dct"}, {"score": 0.0039055990919333082, "phrase": "multiple_data_samples"}, {"score": 0.0038638811223100184, "phrase": "block_invocation"}, {"score": 0.00366185681714204, "phrase": "behavioral_synthesis_problem"}, {"score": 0.003603327452846714, "phrase": "optimized_hw_library_blocks"}, {"score": 0.0034148795808317555, "phrase": "rtl_codes"}, {"score": 0.0033602844686125375, "phrase": "entire_hardware_system"}, {"score": 0.0033243718810317254, "phrase": "glue_logics"}, {"score": 0.0032362564039911034, "phrase": "mux"}, {"score": 0.003167441161387607, "phrase": "central_controller"}, {"score": 0.003100085797251317, "phrase": "proposed_design_methodology"}, {"score": 0.0029064676523923886, "phrase": "resource_allocation"}, {"score": 0.0027102997281261733, "phrase": "hardware_design"}, {"score": 0.002652639568848117, "phrase": "design_space"}, {"score": 0.0026242699269026204, "phrase": "hardware_implementation"}, {"score": 0.0025137856138000014, "phrase": "fractional_rate_dataflow"}, {"score": 0.0023694065215394593, "phrase": "additional_hardware_area"}, {"score": 0.0023189818169615135, "phrase": "synthesized_architecture"}, {"score": 0.0022453451864218477, "phrase": "buffer_overhead"}, {"score": 0.002174041708084857, "phrase": "real_examples"}, {"score": 0.0021049977753042253, "phrase": "proposed_technique"}], "paper_keywords": ["HW", " SW codesign", " system level design", " dataflow graph (DFG)", " RTL", " VHDL"], "paper_abstract": "This paper presents a new methodology of automatic RTL code generation from coarse-grain dataflow specification for fast HW/SW cosynthesis. A node in a coarse-grain dataflow specification represents a functional block such as FIR and DCT and an arc may deliver multiple data samples per block invocation, which complicates the problem and distinguishes it from behavioral synthesis problem. Given optimized HW library blocks for dataflow nodes, we aim to generate the RTL codes for the entire hardware system including glue logics such as buffer and MUX, and the central controller. In the proposed design methodology, a dataflow graph can be mapped to various hardware structures by changing the resource allocation and schedule information. It simplifies the management of the area/performance tradeoff in hardware design and widens the design space of hardware implementation of a dataflow graph. We also support Fractional Rate Dataflow (FRDF) specification for more efficient hardware implementation. To overcome the additional hardware area overhead in the synthesized architecture, we propose two techniques reducing buffer overhead. Through experiments with some real examples, the usefulness of the proposed technique is demonstrated.", "paper_title": "Optimized RTL code generation from coarse-grain dataflow specification for fast HW/SW cosynthesis", "paper_id": "WOS:000255742500002"}