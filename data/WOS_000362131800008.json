{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "turing_machines"}, {"score": 0.004644146045859622, "phrase": "reasonable_functions"}, {"score": 0.004129607015893271, "phrase": "tight_bound"}, {"score": 0.003983016985197904, "phrase": "function_t"}, {"score": 0.003235305151177897, "phrase": "one-tape_turing_machines"}, {"score": 0.0027867539356701302, "phrase": "n._we"}, {"score": 0.002592163447843447, "phrase": "arbitrary_large_constants"}, {"score": 0.002232579371411546, "phrase": "turing_machine"}, {"score": 0.002162951519368368, "phrase": "polynomial_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Turing machine", " Running time", " Decidable", " Crossing sequence", " Regular expression"], "paper_abstract": "We show that, for all reasonable functions T(n) = o(nlogn), we can algorithmically verify whether a given one-tape Turing machine runs in time at most T (n). This is a tight bound on the order of growth for the function T because we prove that, for T (n) >= (n + 1) and T(n) = Omega(nlogn), there exists no algorithm that would verify whether a given one-tape Turing machine runs in time at most T (n). As opposed to one-tape Turing machines, we show that we can verify whether a given multi-tape Turing machine runs in time at most T(n) iff T(n(0)) < (n(0) + 1) for some n(0) epsilon N. We also prove a very general undecidability result stating that, for any class of functions F that contains arbitrary large constants, we cannot verify whether a given Turing machine runs in time T(n) for some T epsilon F. This is an extension of the following folkloric results: we cannot verify whether a Turing machine runs in constant, linear or polynomial time. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Verifying time complexity of Turing machines", "paper_id": "WOS:000362131800008"}