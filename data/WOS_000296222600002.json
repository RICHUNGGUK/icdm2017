{"auto_keywords": [{"score": 0.032638054815571645, "phrase": "basic_block"}, {"score": 0.02233322897275927, "phrase": "embedded_systems"}, {"score": 0.010612387000973441, "phrase": "memory_space_consumption"}, {"score": 0.004772367030970874, "phrase": "dataflow_analysis"}, {"score": 0.004667541072056214, "phrase": "key_parameter"}, {"score": 0.004565007074039171, "phrase": "code_complexity"}, {"score": 0.004524624065803229, "phrase": "embedded_applications"}, {"score": 0.004232875294230749, "phrase": "memory_capacity"}, {"score": 0.0040309035566691645, "phrase": "application_complexity"}, {"score": 0.003804550737731054, "phrase": "memory_space_demand"}, {"score": 0.003465350958971198, "phrase": "control_flow_graph"}, {"score": 0.0034346666012715203, "phrase": "cfg"}, {"score": 0.0032129675521135616, "phrase": "basic_block_level"}, {"score": 0.0031422859551159506, "phrase": "cfg_analysis"}, {"score": 0.0029263562233195423, "phrase": "program_execution"}, {"score": 0.0028875481626754696, "phrase": "instruction_memory_space"}, {"score": 0.0023739321566540682, "phrase": "chip_memory"}, {"score": 0.0022806798371116698, "phrase": "on-chip_memory"}, {"score": 0.0021620042653528846, "phrase": "previously_proposed_cfg-based_memory_reduction_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Memory", " Dataflow analysis", " CFG", " Compiler"], "paper_abstract": "Memory is a key parameter in embedded systems since both code complexity of embedded applications and amount of data they process are increasing. While it is true that the memory capacity of embedded systems is continuously increasing, the increases in the application complexity and dataset sizes are far greater. As a consequence, the memory space demand of code and data should be kept minimum. To reduce the memory space consumption of embedded systems, this paper proposes a control flow graph (CFG) based technique. Specifically, it tracks the lifetime of instructions at the basic block level. Based on the CFG analysis, if a basic block is known to be not accessible in the rest of the program execution, the instruction memory space allocated to this basic block is reclaimed. On the other hand, if the memory allocated to this basic block cannot be reclaimed, we try to compress this basic block. This way, it is possible to effectively use the available on-chip memory, thereby satisfying most of instruction/data requests from the on-chip memory. Our experiments with this framework show that it outperforms the previously proposed CFG-based memory reduction approaches. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Reducing memory space consumption through dataflow analysis", "paper_id": "WOS:000296222600002"}