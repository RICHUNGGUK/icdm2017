{"auto_keywords": [{"score": 0.03573098347551127, "phrase": "gpu"}, {"score": 0.03275967147489929, "phrase": "comparison_study"}, {"score": 0.032456357941688545, "phrase": "different_implementations"}, {"score": 0.00481495049065317, "phrase": "collision_detection"}, {"score": 0.004784331242964228, "phrase": "large-scale_crowd_simulation"}, {"score": 0.00475390577915698, "phrase": "multi-core_and_many-core_architectures"}, {"score": 0.004663779981986642, "phrase": "current_multi-core_and_many-core_architectures"}, {"score": 0.0045317702763072445, "phrase": "enhancing_crowd"}, {"score": 0.0044742996274375404, "phrase": "continuum_crowds"}, {"score": 0.004361526027730043, "phrase": "crowd_simulation_systems"}, {"score": 0.004306205029641728, "phrase": "inherent_parallelism"}, {"score": 0.004211069233133584, "phrase": "open_issue"}, {"score": 0.004104902932459142, "phrase": "different_parallelization_strategies"}, {"score": 0.004065781456356258, "phrase": "collision_check_procedure"}, {"score": 0.004001402461081236, "phrase": "agent-based_simulations"}, {"score": 0.003826492478418294, "phrase": "many-core_architectures"}, {"score": 0.003802135020791801, "phrase": "graphic_processing_units"}, {"score": 0.0037062400890170064, "phrase": "many-core_implementations"}, {"score": 0.0036127549845584, "phrase": "previous_gpu_version"}, {"score": 0.003578307035551443, "phrase": "collision_check_algorithm"}, {"score": 0.003532885029484907, "phrase": "new_gpu_version"}, {"score": 0.0033568708392230544, "phrase": "multi-core_implementations"}, {"score": 0.003303679745153929, "phrase": "parallel_cpu_version"}, {"score": 0.0032721691785599833, "phrase": "read--copy_update"}, {"score": 0.002973081656751767, "phrase": "first_performance_evaluation"}, {"score": 0.002954140458190344, "phrase": "rcu"}, {"score": 0.0029259540174253426, "phrase": "real_user-space_application"}, {"score": 0.0027535633837592597, "phrase": "collision_test"}, {"score": 0.0026840435773116127, "phrase": "multi-core_cpus"}, {"score": 0.0025502118431246276, "phrase": "theoretical_performance"}, {"score": 0.0025339578578194143, "phrase": "power_consumption"}, {"score": 0.002485813299166851, "phrase": "evaluation_results"}, {"score": 0.0024542249391904256, "phrase": "gpu-based_implementation"}, {"score": 0.0023999058090187985, "phrase": "minimum_speedup"}, {"score": 0.002331825625142384, "phrase": "cpu-based_implementations"}, {"score": 0.0022875127203850027, "phrase": "hard_constraint"}, {"score": 0.0022729292542096077, "phrase": "crowd_simulations"}, {"score": 0.0022297330866277738, "phrase": "collision_check_process"}, {"score": 0.0022084431489676993, "phrase": "significant_improvement"}, {"score": 0.002187356046251648, "phrase": "overall_system_throughput_and_response_time"}, {"score": 0.0021049977753042253, "phrase": "system_throughput"}], "paper_keywords": ["Multi-core programming", " GPU programming", " crowd simulations", " collision check procedure", " performance improvement"], "paper_abstract": "The computing capabilities of current multi-core and many-core architectures have been used in crowd simulations for both enhancing crowd rendering and simulating continuum crowds. However, improving the scalability of crowd simulation systems by exploiting the inherent parallelism of these architectures is still an open issue. In this paper, we propose different parallelization strategies for the collision check procedure that takes place in agent-based simulations. These strategies are designed for exploiting the parallelism in both multi-core and many-core architectures like graphic processing units (GPUs). As for the many-core implementations, we analyse the bottlenecks of a previous GPU version of the collision check algorithm, proposing a new GPU version that removes the bottlenecks detected. In order to fairly compare the GPU with the multi-core implementations, we propose a parallel CPU version that uses read--copy update (RCU), a new synchronization method which significantly improves performance. We perform a comparison study of these different implementations. On the one hand, the comparison study shows the first performance evaluation of RCU in a real user-space application with complex data structures. On the other hand, the comparison shows that the GPU greatly accelerates the collision test with respect to any other implementation optimized for multi-core CPUs. In addition, we analyse the efficiency of the different implementations taking into account the theoretical performance and power consumption of each platform. The evaluation results show that the GPU-based implementation consumes less energy and provides a minimum speedup of 45x with respect to any of the CPU-based implementations. Since interactivity is a hard constraint in crowd simulations, this acceleration of the collision check process represents a significant improvement in the overall system throughput and response time. Therefore, the simulations are significantly accelerated, and the system throughput and scalability are improved.", "paper_title": "Accelerating collision detection for large-scale crowd simulation on multi-core and many-core architectures", "paper_id": "WOS:000329833500003"}