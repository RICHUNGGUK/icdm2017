{"auto_keywords": [{"score": 0.027304790045058425, "phrase": "tomasulo's_algorithm"}, {"score": 0.00481495049065317, "phrase": "multi-core_cpus"}, {"score": 0.004766487181100495, "phrase": "power-performance_trade-off"}, {"score": 0.004686791459644141, "phrase": "major_considerations"}, {"score": 0.004655285779819366, "phrase": "micro-architecture_design"}, {"score": 0.004546666837896004, "phrase": "radical_change"}, {"score": 0.004425616928975799, "phrase": "parallel_operation"}, {"score": 0.004336939968686303, "phrase": "instruction_execution_process"}, {"score": 0.004221450123456042, "phrase": "modern_processors"}, {"score": 0.004150829420202823, "phrase": "instruction_level_parallelism"}, {"score": 0.004053932711987671, "phrase": "potential_overlap"}, {"score": 0.003789322824699646, "phrase": "data_dependencies"}, {"score": 0.003763827319426842, "phrase": "resource_conflicts"}, {"score": 0.0035062280202127136, "phrase": "problematic_situation"}, {"score": 0.0033218213825698417, "phrase": "stall_approach"}, {"score": 0.0031577303835881964, "phrase": "input_data"}, {"score": 0.0030220695120265974, "phrase": "new_algorithm"}, {"score": 0.0029414903557512663, "phrase": "pipelined_processors"}, {"score": 0.0026134084008199933, "phrase": "instruction_input"}, {"score": 0.0024842242921857705, "phrase": "in-order_instruction_execution"}, {"score": 0.002442594378453517, "phrase": "proposed_algorithm's_efficiency"}, {"score": 0.0023935561037315375, "phrase": "power-performance_gain"}, {"score": 0.0023375847850353355, "phrase": "sim-panalyzer"}, {"score": 0.002222004614440872, "phrase": "effective_increase"}, {"score": 0.0021773853011112882, "phrase": "energy_consumption_benefits"}, {"score": 0.0021049977753042253, "phrase": "in-order_algorithm"}], "paper_keywords": ["Instruction pipeline", " Stall reduction", " Optimizing algorithm"], "paper_abstract": "The power-performance trade-off is one of the major considerations in micro-architecture design. Pipelined architecture has brought a radical change in the design to capitalize on the parallel operation of various functional blocks involved in the instruction execution process, which is widely used in all modern processors. Pipeline introduces the instruction level parallelism (ILP) because of the potential overlap of instructions, and it does have drawbacks in the form of hazards, which is a result of data dependencies and resource conflicts. To overcome these hazards, stalls were introduced, which are basically delayed execution of instructions to diffuse the problematic situation. Out-of-order (OOO) execution is a ramification of the stall approach since it executes the instruction in an order governed by the availability of the input data rather than by their original order in the program. This paper presents a new algorithm called Left-Right (LR) for reducing stalls in pipelined processors. This algorithm is built by combining the traditional in-order and the out-of-order (OOO) instruction execution, resulting in the best of both approaches. As instruction input, we take the Tomasulo's algorithm for scheduling out-of-order and the in-order instruction execution and we compare the proposed algorithm's efficiency against both in terms of power-performance gain. Experimental simulations are conducted using Sim-Panalyzer, an instruction level simulator, showing that our proposed algorithm optimizes the power-performance with an effective increase of 30% in terms of energy consumption benefits compared to the Tomasulo's algorithm and 3% compared to the in-order algorithm.", "paper_title": "An optimizing pipeline stall reduction algorithm for power and performance on multi-core CPUs", "paper_id": "WOS:000360332800001"}