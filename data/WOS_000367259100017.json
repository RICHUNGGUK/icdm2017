{"auto_keywords": [{"score": 0.029075000270154094, "phrase": "run-time_va_stacks"}, {"score": 0.00481495049065317, "phrase": "run-time_virtual_address_stacks"}, {"score": 0.0037506567448470163, "phrase": "conventional_wisdom"}, {"score": 0.003683097597914604, "phrase": "run-time_va_stack"}, {"score": 0.003600351201298387, "phrase": "critical_subtleties"}, {"score": 0.0034403745992576808, "phrase": "va_stack_area"}, {"score": 0.0032282396745967504, "phrase": "va-stack-area_accesses"}, {"score": 0.0031845067058084583, "phrase": "non-stack-area_accesses"}, {"score": 0.00304295114679455, "phrase": "va_stack_data"}, {"score": 0.002855251306715901, "phrase": "representative_selection"}, {"score": 0.0028293966058473476, "phrase": "related_work"}, {"score": 0.002778385486855157, "phrase": "micro-architectural_concept"}, {"score": 0.0026913130726432645, "phrase": "general-purpose_register_file"}, {"score": 0.0025137856138000014, "phrase": "prior_work"}, {"score": 0.002468450551616404, "phrase": "potential_hazards"}, {"score": 0.0024460897937643032, "phrase": "data_consistency"}, {"score": 0.0024129269611844794, "phrase": "memory_consistency"}, {"score": 0.002203016940021265, "phrase": "function-critical_issues"}, {"score": 0.0021830553825770097, "phrase": "future_operating_systems"}], "paper_keywords": ["Run-time stack", " register file", " synonym page", " data decoupling", " shared memory", " cache coherence", " memory consistency"], "paper_abstract": "The run-time virtual address (VA) stack has some unique properties, which have garnered the attention of researchers. The stack one-dimensionally grows and shrinks at its top, and contains data that is seemingly local/private to one thread, or process. Most prior related research has focused on these properties. However, this article aims to demonstrate how conventional wisdom pertaining to the run-time VA stack fails to capture some critical subtleties and complexities. We first explore two widely established assumptions surrounding the VA stack area: (1) Data accesses can be classified as falling either under VA-stack-area accesses, or non-stack-area accesses, with no aliasing; (2) The VA stack data is completely private and invisible to other threads/processes. Subsequently, we summarize a representative selection of related work that pursued the micro-architectural concept of using run-time VA stacks to extend the general-purpose register file. We then demonstrate why these assumptions are invalid, by using examples from prior work to highlight the potential hazards regarding data consistency, shared memory consistency, and cache coherence. Finally, we suggest safeguards against these hazards. Overall, we explore the function-critical issues that future operating systems and compilers should address to effectively reap all the benefits of using run-time VA stacks.", "paper_title": "Subtleties of Run-Time Virtual Address Stacks", "paper_id": "WOS:000367259100017"}