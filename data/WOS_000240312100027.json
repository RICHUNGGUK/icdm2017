{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "automatic_exception_safety_verification"}, {"score": 0.004470823343432748, "phrase": "structured_way"}, {"score": 0.004195418010131832, "phrase": "abnormal_conditions"}, {"score": 0.0033579708256295847, "phrase": "exception_related_mistakes"}, {"score": 0.0032184697893776052, "phrase": "software_products"}, {"score": 0.0027741761880779535, "phrase": "safe_way"}, {"score": 0.0026307897899760383, "phrase": "static_analysis"}, {"score": 0.0024423826953133844, "phrase": "possible_exception-raising_execution_paths"}, {"score": 0.002316105585203396, "phrase": "potential_utility"}], "paper_keywords": ["static analysis", " model checking", " verification", " exceptions"], "paper_abstract": "Many programming languages provide exceptions as a structured way for detecting and recovering from abnormal conditions. However, using exceptions properly is non-trivial. Programmers are often careless when handling exceptions, and exception related mistakes are common in software products. We present a technique for verifying that exceptions are used in a safe way. This technique integrates static analysis with model checking to visit all possible exception-raising execution paths. To demonstrate the potential utility of our approach, we applied it to two open source Java applications.", "paper_title": "Towards automatic exception safety verification", "paper_id": "WOS:000240312100027"}