{"auto_keywords": [{"score": 0.048877326221094676, "phrase": "pidgin"}, {"score": 0.010523361106427013, "phrase": "program_dependence_graphs"}, {"score": 0.007865982121902064, "phrase": "pdg"}, {"score": 0.00481495049065317, "phrase": "security_guarantees"}, {"score": 0.004404994123834589, "phrase": "precise_application-specific_information_security_guarantees"}, {"score": 0.00378145978325955, "phrase": "whole_application"}, {"score": 0.0037178503842258087, "phrase": "custom_pdg_query_language"}, {"score": 0.003259702394241964, "phrase": "global_security_policies"}, {"score": 0.0029067881142952664, "phrase": "query_language"}, {"score": 0.002833689453299307, "phrase": "large_class"}, {"score": 0.0025591748412278174, "phrase": "security_regression_testing"}, {"score": 0.0023408288327263316, "phrase": "information_security_guarantees"}, {"score": 0.0023210293050850276, "phrase": "legacy_programs"}, {"score": 0.0022339789476489877, "phrase": "security_policies"}, {"score": 0.002205692205167157, "phrase": "application_development"}, {"score": 0.0021049977753042253, "phrase": "known_vulnerabilities"}], "paper_keywords": ["Application-specific security", " program dependence graph", " graph query language"], "paper_abstract": "We present PIDGIN, a program analysis and understanding tool that enables the specification and enforcement of precise application-specific information security guarantees. PIDGIN also allows developers to interactively explore the information flows in their applications to develop policies and investigate counter-examples. PIDGIN combines program dependence graphs (PDGs), which precisely capture the information flows in a whole application, with a custom PDG query language. Queries express properties about the paths in the PDG; because paths in the PDG correspond to information flows in the application, queries can be used to specify global security policies. PIDGIN is scalable. Generating a PDG for a 330k line Java application takes 90 seconds, and checking a policy on that PDG takes under 14 seconds. The query language is expressive, supporting a large class of precise, application-specific security guarantees. Policies are separate from the code and do not interfere with testing or development, and can be used for security regression testing. We describe the design and implementation of PIDGIN and report on using it: (1) to explore information security guarantees in legacy programs; (2) to develop and modify security policies concurrently with application development; and (3) to develop policies based on known vulnerabilities.", "paper_title": "Exploring and Enforcing Security Guarantees via Program Dependence Graphs", "paper_id": "WOS:000361284200028"}