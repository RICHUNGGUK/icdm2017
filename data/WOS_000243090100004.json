{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "performance_degradation"}, {"score": 0.004766487181100495, "phrase": "software_systems"}, {"score": 0.0047026237903774895, "phrase": "highly_configurable_performance-intensive_software_systems"}, {"score": 0.004293267161763508, "phrase": "time_and_resource_constraints"}, {"score": 0.004164858807302222, "phrase": "relatively_small_number"}, {"score": 0.00413684709497912, "phrase": "possible_configurations"}, {"score": 0.004081385289516914, "phrase": "unreliable_extrapolation"}, {"score": 0.003999578057088828, "phrase": "entire_configuration_space"}, {"score": 0.0036635429301869527, "phrase": "initial_quality_assurance_process"}, {"score": 0.0034359094594153304, "phrase": "appropriate_subset"}, {"score": 0.003344332868248692, "phrase": "performance-oriented_regression_testing"}, {"score": 0.00314708280192844, "phrase": "tool_support"}, {"score": 0.0030839447259626215, "phrase": "in-the-field_and_in-house_computing_resources"}, {"score": 0.002805597755796506, "phrase": "strong_and_untested_assumptions"}, {"score": 0.002640038329840458, "phrase": "new_quality_assurance_process"}, {"score": 0.0024591621759745648, "phrase": "key_assumptions"}, {"score": 0.002442594378453517, "phrase": "process_execution"}, {"score": 0.0023694065215394593, "phrase": "process_configuration_and_execution_much_easier_and_less_error"}, {"score": 0.0022370795358896784, "phrase": "performance-intensive_software_frameworks"}, {"score": 0.002192158173303153, "phrase": "reliable_effects_screening"}, {"score": 0.002155412043665635, "phrase": "large-scale_systems"}, {"score": 0.0021192805640815817, "phrase": "significantly_less_resources"}, {"score": 0.0021049977753042253, "phrase": "conventional_techniques"}], "paper_keywords": ["distributed continuous quality assurance", " performance-oriented regression testing", " design-of-experiments theory"], "paper_abstract": "Developers of highly configurable performance-intensive software systems often use in-house performance-oriented \"regression testing\" to ensure that their modifications do not adversely affect their software's performance across its large configuration space. Unfortunately, time and resource constraints can limit in-house testing to a relatively small number of possible configurations, followed by unreliable extrapolation from these results to the entire configuration space. As a result, many performance bottlenecks escape detection until systems are fielded. In our earlier work, we improved the situation outlined above by developing an initial quality assurance process called \"main effects screening.\" This process 1) executes formally designed experiments to identify an appropriate subset of configurations on which to base the performance-oriented regression testing, 2) executes benchmarks on this subset whenever the software changes, and 3) provides tool support for executing these actions on in-the-field and in-house computing resources. Our initial process had several limitations, however, since it was manually configured (which was tedious and error-prone) and relied on strong and untested assumptions for its accuracy (which made its use unacceptably risky in practice). This paper presents a new quality assurance process called \"reliable effects screening\" that provides three significant improvements to our earlier work. First, it allows developers to economically verify key assumptions during process execution. Second, it integrates several model-driven engineering tools to make process configuration and execution much easier and less error prone. Third, we evaluate this process via several feasibility studies of three large, widely used performance-intensive software frameworks. Our results indicate that reliable effects screening can detect performance degradation in large-scale systems more reliably and with significantly less resources than conventional techniques.", "paper_title": "Reliable effects screening: A distributed continuous quality assurance process for monitoring performance degradation in evolving software systems", "paper_id": "WOS:000243090100004"}