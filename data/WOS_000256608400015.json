{"auto_keywords": [{"score": 0.03999449666921275, "phrase": "advanced_architectures"}, {"score": 0.00481495049065317, "phrase": "neural_networks"}, {"score": 0.00471700544744796, "phrase": "embedded_software"}, {"score": 0.004678384952779725, "phrase": "high-level_performance_estimation"}, {"score": 0.004545675105321216, "phrase": "particular_processor"}, {"score": 0.00445318311339027, "phrase": "fast_design_space_exploration"}, {"score": 0.00430907756010007, "phrase": "different_processor_architectures"}, {"score": 0.004101579688745222, "phrase": "multiprocessor_system"}, {"score": 0.004018087343963485, "phrase": "fast_and_adequate_performance_estimators"}, {"score": 0.003920128102807887, "phrase": "necessary_speed"}, {"score": 0.0038720442355114045, "phrase": "design_phase"}, {"score": 0.0036855132234738736, "phrase": "branch_prediction_mechanisms"}, {"score": 0.0035661605757956096, "phrase": "non-linear_impact_oil"}, {"score": 0.003394314924677555, "phrase": "simple_linear_methods"}, {"score": 0.003204232566468624, "phrase": "high-level_performance_estimator"}, {"score": 0.0031518989079229714, "phrase": "neural_network"}, {"score": 0.0030623570435946977, "phrase": "non-linear_behaviour"}, {"score": 0.0030247625535682987, "phrase": "execution_time"}, {"score": 0.0028670988845838296, "phrase": "cycle-accurate_simulators"}, {"score": 0.0027856252557826467, "phrase": "target_architecture"}, {"score": 0.002728847267539957, "phrase": "automatic_domain_classification"}, {"score": 0.002684257009647205, "phrase": "group_applications"}, {"score": 0.0026622351303038885, "phrase": "similar_characteristics"}, {"score": 0.002575934917174136, "phrase": "estimation_precision"}, {"score": 0.002492425259337031, "phrase": "mean_estimation_error"}, {"score": 0.002391825892939338, "phrase": "domain-specific_estimators"}, {"score": 0.0023624435546097658, "phrase": "precision_level"}, {"score": 0.002333421318779658, "phrase": "fast_estimation_time"}, {"score": 0.002295277579105177, "phrase": "high-level_design_space_exploration"}, {"score": 0.002239225269052105, "phrase": "processor_versions"}, {"score": 0.002220846338732873, "phrase": "different_task_allocations"}, {"score": 0.002157697367447098, "phrase": "fast_way"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["performance estimation", " embedded software", " neural networks"], "paper_abstract": "High-level performance estimation of embedded software implemented in a particular processor is essential for a fast design space exploration, when the designer needs to evaluate different processor architectures (and their different versions) and also different task allocations in a multiprocessor system. The development of fast and adequate performance estimators is required to achieve the necessary speed in this design phase. However, advanced architectures present many features, such as pipelines, branch prediction mechanisms, and caches, which have a non-linear impact oil the execution time, which thus becomes hard to evaluate using simple linear methods. In order to cope with this problem, this paper presents a high-level performance estimator based on a neural network, which easily adapts to the non-linear behaviour of the execution time in advanced architectures and presents a speed-up up to 190 times in comparison with cycle-accurate simulators, using the PowerPC 750 as target architecture. A method for automatic domain classification is proposed to group applications with similar characteristics, resulting in an increase of the estimation precision. For the PowerPC 750, the mean estimation error has been reduced from 7.90% to 6.41% thanks to domain-specific estimators. This precision level and the fast estimation time are suitable for high-level design space exploration, when different architectures or processor versions and different task allocations need to be evaluated in a fast way. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Applying neural networks to performance estimation of embedded software", "paper_id": "WOS:000256608400015"}