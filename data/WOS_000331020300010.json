{"auto_keywords": [{"score": 0.03926714714893431, "phrase": "spill_code"}, {"score": 0.011996222539470313, "phrase": "distributed_register_files"}, {"score": 0.010889710571980045, "phrase": "different_register_banks"}, {"score": 0.00481495049065317, "phrase": "transformed_interference_equations"}, {"score": 0.004777569299319633, "phrase": "pac_dsp_architecture"}, {"score": 0.004740476936977635, "phrase": "digital_signal_processors"}, {"score": 0.004488734023485018, "phrase": "multimedia_processing_applications"}, {"score": 0.004402088928254543, "phrase": "power_consumption"}, {"score": 0.004367898947304223, "phrase": "design_cost"}, {"score": 0.004333973355873714, "phrase": "vliw_dsp_processors"}, {"score": 0.004233762728640565, "phrase": "multibank_register_architectures"}, {"score": 0.003993216345115755, "phrase": "register_files"}, {"score": 0.003931402465972151, "phrase": "new_challenges"}, {"score": 0.003885668358145471, "phrase": "compiler_optimization_schemes"}, {"score": 0.003693533648584145, "phrase": "vliw_dsp"}, {"score": 0.0035940277928341265, "phrase": "register_allocation"}, {"score": 0.0035245918797629804, "phrase": "memory_spills"}, {"score": 0.0034700069041302003, "phrase": "multibank_register-file_architecture"}, {"score": 0.0032599633778910516, "phrase": "conceptual_framework"}, {"score": 0.0031721009574803127, "phrase": "proxy_interference_graphs"}, {"score": 0.0031229578623834394, "phrase": "live_ranges"}, {"score": 0.0029916929549256297, "phrase": "heuristic_algorithms"}, {"score": 0.002821516317503421, "phrase": "register_pressure"}, {"score": 0.0027886573969044042, "phrase": "register_file"}, {"score": 0.0027240799841720957, "phrase": "optional_spilling_locations"}, {"score": 0.002681859084438076, "phrase": "traditional_spilling"}, {"score": 0.0025892330566358503, "phrase": "parallel_architecture_core"}, {"score": 0.0024610448251906453, "phrase": "experimental_results"}, {"score": 0.00233918825079714, "phrase": "mibench"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["register allocation", " spilling", " VLIW DSP"], "paper_abstract": "Digital signal processors (DSPs) with very long instruction word (VLIW) data-path architectures are increasingly being deployed on embedded devices for multimedia processing applications. To reduce the power consumption and design cost of VLIW DSP processors, distributed register files and multibank register architectures are being adopted to reduce the number of read and write ports associated with register files, which presents new challenges for devising compiler optimization schemes. This paper addresses the issues of reducing the spill code for a VLIW DSP with distributed register files. Spill code produced by register allocation is traditionally handled by memory spills, but the multibank register-file architecture provides the opportunity to spill-out register values onto different register banks. We present a conceptual framework based on the universal and the proxy interference graphs to model the live ranges of registers for spilling codes to different register banks. Heuristic algorithms are then developed on the basis of this concept. By heuristically estimating the register pressure for each register file, we treat different register banks as optional spilling locations in addition to traditional spilling to memory. Experiments were performed on the parallel architecture core VLIW DSP with distributed register files by incorporating our proposed optimization schemes into an Open64-based compiler. The experimental results show that our approach can improve the performances on average for DSPStone and MiBench benchmarks with spilling cases by 7.1% and 21.6%, respectively, compared with the one always handling spill code in memory. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Register spilling via transformed interference equations for PAC DSP architecture", "paper_id": "WOS:000331020300010"}