{"auto_keywords": [{"score": 0.0046429592670444945, "phrase": "abundant_visual_tracking_literature"}, {"score": 0.004362226376603478, "phrase": "graphic_processing_units"}, {"score": 0.00422826362023938, "phrase": "efficient_implementations"}, {"score": 0.004184526032558792, "phrase": "computer_vision_algorithms"}, {"score": 0.003712796038920873, "phrase": "joint_use"}, {"score": 0.0034881076466982226, "phrase": "existing_tracking_algorithm"}, {"score": 0.0034162643819889054, "phrase": "triangular_meshes"}, {"score": 0.003380897678672156, "phrase": "point-based_models"}, {"score": 0.0033285306462537884, "phrase": "particular_interest"}, {"score": 0.0031762308449055305, "phrase": "direct_output"}, {"score": 0.0029224275921964724, "phrase": "point-based_rendering"}, {"score": 0.0028178463431115562, "phrase": "real-time_intermediate_values"}, {"score": 0.002592606058287124, "phrase": "novel_views"}, {"score": 0.0025524176761139413, "phrase": "tracked_object"}, {"score": 0.002473895542219933, "phrase": "wide-baseline_matching"}, {"score": 0.002171836484200008, "phrase": "real-time_tracking_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Visual tracking", " Point-based model", " Surface splatting", " GPGPU"], "paper_abstract": "This paper adds to the abundant visual tracking literature with two main contributions. First, we illustrate the interest of using Graphic Processing Units (CPU) to support efficient implementations of computer vision algorithms, and secondly, we introduce the use of point-based 3D models as a shape prior for real-time 3D tracking with a monocular camera. The joint use of point-based 3D models together with CPU allows to adapt and simplify an existing tracking algorithm originally designed for triangular meshes. Point-based models are of particular interest in this context, because they are the direct output of most laser scanners. We show that state-of-the-art techniques developed for point-based rendering can be used to compute in real-time intermediate values required for visual tracking. In particular, apparent motion predictors at each pixel are computed in parallel, and novel views of the tracked object are generated online to help wide-baseline matching. Both computations derive from the same general surface splatting technique which we implement, along with other low-level vision tasks, on the CPU, leading to a real-time tracking algorithm. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "From rendering to tracking point-based 3D models", "paper_id": "WOS:000279506700006"}