{"auto_keywords": [{"score": 0.04818042291546328, "phrase": "smt"}, {"score": 0.025306737717982815, "phrase": "proposed_dispatching_technique"}, {"score": 0.004440780432053927, "phrase": "resource_utilization_ability"}, {"score": 0.004364446928620496, "phrase": "key_data-path_components"}, {"score": 0.004191377834552202, "phrase": "critical_resources"}, {"score": 0.004095567486538121, "phrase": "multiple_threads"}, {"score": 0.004048483412089098, "phrase": "effective_use"}, {"score": 0.003755307753574745, "phrase": "system_potential"}, {"score": 0.0037121208432871118, "phrase": "transient_behaviors"}, {"score": 0.003503497128638099, "phrase": "utilization_efficiency"}, {"score": 0.003443219062200627, "phrase": "shared_resources"}, {"score": 0.0032309093154028663, "phrase": "better_resource_utilization"}, {"score": 0.0029967610945411593, "phrase": "real-time_dynamic_scheduler"}, {"score": 0.0028119023819663472, "phrase": "thread-activeness_information"}, {"score": 0.0027634902834910184, "phrase": "real_time"}, {"score": 0.0025929837295811673, "phrase": "extensive_simulation"}, {"score": 0.002548331088496964, "phrase": "significant_gain"}, {"score": 0.0023228223366301226, "phrase": "different_workload_mixtures"}, {"score": 0.0022696277881969896, "phrase": "instruction-level_parallelism"}], "paper_keywords": [""], "paper_abstract": "Simultaneous Multi-Threading (SMT) provides a technique to improve resource utilization ability by sharing key data-path components among multiple independent threads. When critical resources are shared by multiple threads, effective use of these resources proves to be the most important factor in fully exploiting the system potential. Transient behaviors of various threads in terms of their execution parallelism can easily affect utilization efficiency of these shared resources. To commit more resources to threads that are more active allows for better resource utilization and thus higher throughput. In this paper, we propose a real-time dynamic scheduler for the SMT which dispatches instructions from threads based on thread-activeness information gathered in real time and dynamically adjusts dispatching priorities among threads accordingly. An extensive simulation shows a significant gain in system throughput by this technique. The performance of the proposed dispatching technique is evaluated on different workload mixtures created based on instruction-level parallelism available in each thread. An average of 6.5% and maximum of 15% performance improvement is observed with the proposed dispatching technique. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Adaptive instruction dispatching techniques for Simultaneous Multi-Threading (SMT) processors", "paper_id": "WOS:000312978300020"}