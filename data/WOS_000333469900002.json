{"auto_keywords": [{"score": 0.029420333683948783, "phrase": "large_number"}, {"score": 0.00481495049065317, "phrase": "performance_analysis"}, {"score": 0.004746897490645879, "phrase": "multicore"}, {"score": 0.004701985831087475, "phrase": "multithreaded_processors"}, {"score": 0.004635477242873163, "phrase": "key_challenge"}, {"score": 0.004548253531664032, "phrase": "chip_multiprocessor"}, {"score": 0.0038332390893263844, "phrase": "thread-level_modeling_methodology"}, {"score": 0.0036379729015583975, "phrase": "thread-level_activities"}, {"score": 0.0035189057079817285, "phrase": "microarchitectural_details"}, {"score": 0.003436242862104006, "phrase": "significant_impact"}, {"score": 0.0033875770020590796, "phrase": "thread-level_performance"}, {"score": 0.0032922964156452696, "phrase": "thread-level_modeling"}, {"score": 0.003199687131875466, "phrase": "instruction-level_modeling"}, {"score": 0.0029511579080222137, "phrase": "instruction_level"}, {"score": 0.0028140548269469934, "phrase": "fast_performance_evaluation"}, {"score": 0.0027479040199262393, "phrase": "program-task-to-core_mapping_choices"}, {"score": 0.002522344964242888, "phrase": "fast_simulation_tool"}, {"score": 0.0024397017438101726, "phrase": "fast_performance_prediction"}, {"score": 0.0023936956017015696, "phrase": "case_studies"}, {"score": 0.002326304140277375, "phrase": "code_samples"}, {"score": 0.0022500695985527668, "phrase": "maximal_sustainable_line_rates"}, {"score": 0.002186712881521657, "phrase": "network_models"}, {"score": 0.0021049977753042253, "phrase": "cycle-accurate_simulation_results"}], "paper_keywords": ["Design space", " thread-level modeling", " queuing theory", " performance evaluation of chip multiprocessor"], "paper_abstract": "A key challenge to program a chip multiprocessor (CMP) is how to evaluate the performance of various possible program-task-to-core mapping choices during the initial programming phase, when the executable program is yet to be developed. In this paper, we put forward a thread-level modeling methodology to meet this challenge. The idea is to model thread-level activities only and overlook the instruction-level and microarchitectural details, except those having significant impact on the thread-level performance. Moreover, since the thread-level modeling is much coarser than the instruction-level modeling, the analysis at this level turns out to be significantly faster than that at the instruction level. These features make the methodology particularly amenable for fast performance evaluation of a large number of program-task-to-core mapping choices during the initial programming phase. Based on this methodology, an analytic modeling technique based on queuing theory and a fast simulation tool are developed, both allowing for fast performance prediction of CMPs. Case studies based on a large number of code samples available in IXP1200/2400 workbenches demonstrate that the maximal sustainable line rates estimated using our simulation tool and queuing network models are consistently within 6 and 8 percent of cycle-accurate simulation results, respectively.", "paper_title": "A Performance Analysis Methodology for Multicore, Multithreaded Processors", "paper_id": "WOS:000333469900002"}