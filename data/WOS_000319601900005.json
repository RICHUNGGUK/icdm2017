{"auto_keywords": [{"score": 0.04872092944777349, "phrase": "virtual_machines"}, {"score": 0.04311843980440526, "phrase": "physical_machine"}, {"score": 0.03343810862317848, "phrase": "concurrent_applications"}, {"score": 0.031241821999075915, "phrase": "vmm"}, {"score": 0.00481495049065317, "phrase": "hybrid_cpu_management"}, {"score": 0.004602085616330634, "phrase": "important_cornerstone"}, {"score": 0.004471530397729526, "phrase": "vital_role"}, {"score": 0.004398589723893764, "phrase": "emerging_infrastructure"}, {"score": 0.004067977399245212, "phrase": "cloud_platform"}, {"score": 0.004018087343963485, "phrase": "scheduling_algorithm"}, {"score": 0.003968806706727518, "phrase": "xen_schedules"}, {"score": 0.0038403808246148217, "phrase": "vm"}, {"score": 0.0037159680715717056, "phrase": "cpu_time"}, {"score": 0.003655311405769274, "phrase": "vm."}, {"score": 0.003625347557965931, "phrase": "proportional_sharing"}, {"score": 0.003479180627368156, "phrase": "cpu_scheduling"}, {"score": 0.0034364867143322304, "phrase": "virtual_machine_monitor"}, {"score": 0.0033251716926666437, "phrase": "near-native_performance"}, {"score": 0.0031260524791486347, "phrase": "multithreaded_programs"}, {"score": 0.0030876784650745973, "phrase": "synchronization_operation"}, {"score": 0.002843581231499026, "phrase": "negative_impact"}, {"score": 0.002684257009647205, "phrase": "hybrid_scheduling_framework"}, {"score": 0.0026622351303038885, "phrase": "cpu_management"}, {"score": 0.00245168871716047, "phrase": "hybrid_scheduler"}, {"score": 0.002391825892939338, "phrase": "experimental_results"}, {"score": 0.0023527296826339225, "phrase": "hybrid_cpu_management_method"}, {"score": 0.002295277579105177, "phrase": "negative_influence"}, {"score": 0.002166607745253829, "phrase": "virtualized_system"}, {"score": 0.0021049977753042253, "phrase": "high-throughput_applications"}], "paper_keywords": ["Virtual machine", " virtual machine monitor", " CPU management", " Xen"], "paper_abstract": "As an important cornerstone for clouds, virtualization plays a vital role in building this emerging infrastructure. Virtual machines (VMs) with a variety of workloads may run simultaneously on a physical machine in the cloud platform. The scheduling algorithm used in Xen schedules virtual CPUs (VCPUs) of a VM asynchronously and guarantees the proportion of the CPU time allocated to the VM. This proportional sharing (PS) method is beneficial as it simplifies the implementation of CPU scheduling in the virtual machine monitor (VMM), and can deliver near-native performance for some workloads. However, when workloads in VMs are concurrent applications such as multithreaded programs with the synchronization operation, it has been demonstrated that this method in the VMM can reduce the performance, due to the negative impact of virtualization on synchronization. To address this issue, we present a hybrid scheduling framework for CPU management in the VMM to adapt to the diversity of VMs running simultaneously on a physical machine. We implement a hybrid scheduler based on Xen, and experimental results indicate that the hybrid CPU management method is feasible to mitigate the negative influence of virtualization on synchronization, and improve the performance of concurrent applications in the virtualized system, while maintaining the performance of high-throughput applications.", "paper_title": "Hybrid CPU Management for Adapting to the Diversity of Virtual Machines", "paper_id": "WOS:000319601900005"}