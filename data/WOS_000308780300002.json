{"auto_keywords": [{"score": 0.027118160115319177, "phrase": "spad"}, {"score": 0.026679095624438088, "phrase": "debugging_behavior"}, {"score": 0.00481495049065317, "phrase": "anti-debugging_using_hardware-assisted_virtualization"}, {"score": 0.004466519142879166, "phrase": "runtime_application"}, {"score": 0.004392565073466714, "phrase": "software_development"}, {"score": 0.003875424718379985, "phrase": "malicious_attackers"}, {"score": 0.003535165233011893, "phrase": "major_challenges"}, {"score": 0.0032517484445814334, "phrase": "compromised_strategy"}, {"score": 0.0030160945545795468, "phrase": "software_protection"}, {"score": 0.002594652434287807, "phrase": "hardware_virtualization"}, {"score": 0.002447101794397243, "phrase": "debug_events"}, {"score": 0.0023864566654035924, "phrase": "higher_privilege_level"}, {"score": 0.002327310963701377, "phrase": "conventional_kernel_space"}], "paper_keywords": ["software protection", " anti-debugging", " hardware-assisted virtualization", " self-protection", " system security"], "paper_abstract": "Debugging usually facilitates the dynamic analysis of runtime application for software development. Yet it can also be a threat to system security when adopted by malicious attackers, and hence anti-debugging becomes valuable. The major challenges of software-only anti-debugging are the compromised strategy and lack of self-protection. This paper proposes software protection through anti-debugging (SPAD), a technique that imperceptibly monitors the behavior of debuggers. Leveraging hardware virtualization, SPAD detects debugging behavior by intercepting debug events on a higher privilege level than the conventional kernel space. Our experiment shows that SPAD can effectively prohibit the debugging behavior from 8 popular debuggers while the overhead incurred is 1.14%.", "paper_title": "SPAD: Software Protection Through Anti-Debugging Using Hardware-Assisted Virtualization", "paper_id": "WOS:000308780300002"}