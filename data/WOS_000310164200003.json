{"auto_keywords": [{"score": 0.049188612914091503, "phrase": "load_value_speculation"}, {"score": 0.00481495049065317, "phrase": "load_value_speculation_for_reconfigurable_computers"}, {"score": 0.004182301599359094, "phrase": "memory_accesses"}, {"score": 0.003916098498242888, "phrase": "actual_processors"}, {"score": 0.003701401653850141, "phrase": "high_overhead"}, {"score": 0.003598492288058048, "phrase": "misspeculated_computations"}, {"score": 0.0032449610741097992, "phrase": "application-specific_microarchitectures"}, {"score": 0.003125175084962886, "phrase": "reconfigurable_computers"}, {"score": 0.002953711377604328, "phrase": "lightweight_speculation"}, {"score": 0.0027139447110929586, "phrase": "actual_data_value_prediction_units"}, {"score": 0.0025171669791790438, "phrase": "nonspeculative_parts"}, {"score": 0.002447101794397243, "phrase": "memory_system"}, {"score": 0.0023127544795063263, "phrase": "precore"}, {"score": 0.0021049977753042253, "phrase": "nonspeculative_implementations"}], "paper_keywords": ["Design", " Performance", " FPGA", " high-level language compilation", " speculative execution", " memory interface"], "paper_abstract": "Load value speculation has long been proposed as a method to hide the latency of memory accesses. It has seen very limited use in actual processors, often due to the high overhead of reexecuting misspeculated computations. We present PreCoRe, a framework capable of generating application-specific microarchitectures supporting load value speculation on reconfigurable computers. The article examines the lightweight speculation and replay mechanisms, the architecture of the actual data value prediction units as well as the impact on the nonspeculative parts of the memory system. In experiments, using PreCoRe has achieved speedups of up to 2.48 times over nonspeculative implementations.", "paper_title": "Memory Latency Hiding by Load Value Speculation for Reconfigurable Computers", "paper_id": "WOS:000310164200003"}