{"auto_keywords": [{"score": 0.029808225765253462, "phrase": "b-queue"}, {"score": 0.015105298965886738, "phrase": "fast_core-to-core_communication"}, {"score": 0.011495933816263697, "phrase": "deadlock_problem"}, {"score": 0.007150615705733935, "phrase": "fastforward"}, {"score": 0.007055421164389483, "phrase": "mcringbuffer"}, {"score": 0.004563028873351776, "phrase": "core-to-core_communication"}, {"score": 0.004412285905508977, "phrase": "effective_use"}, {"score": 0.0043533862892678864, "phrase": "multi-core_processors"}, {"score": 0.00418134346679498, "phrase": "based_concurrent_lock-free_queues"}, {"score": 0.003935892934907777, "phrase": "existing_solutions"}, {"score": 0.003780286517897356, "phrase": "performance_degradation"}, {"score": 0.0037297918570822876, "phrase": "real_testbeds"}, {"score": 0.0036064757492752703, "phrase": "auxiliary_hardware_or_software_timers"}, {"score": 0.002927626967420519, "phrase": "existing_concurrent_lock-free_queues"}, {"score": 0.002869115451202179, "phrase": "dummy_and_real_testbeds"}, {"score": 0.0023603078194781965, "phrase": "self-adaptive_backtracking_mechanism"}, {"score": 0.0022668507535947976, "phrase": "real_massively-parallel_applications"}], "paper_keywords": ["Nonblocking synchronization", " Lock-free queue", " Parallelization", " Multi-core", " Backtracking"], "paper_abstract": "Core-to-core communication is critical to the effective use of multi-core processors. A number of software based concurrent lock-free queues have been proposed to address this problem. Existing solutions, however, suffer from performance degradation in real testbeds, or rely on auxiliary hardware or software timers to handle the deadlock problem when batching is used, making those solutions good in theory but difficult to use in practice. This paper describes the pros and cons of existing concurrent lock-free queues in both dummy and real testbeds and proposes B-Queue, an efficient and practical single-producer-single-consumer concurrent lock-free queue that solves the deadlock problem gracefully by introducing a self-adaptive backtracking mechanism. Experiments show that in real massively-parallel applications, B-Queue is faster than FastForward and MCRingBuffer, the two state-of-the-art concurrent lock-free queues, by up to 10x and 5x, respectively. Moreover, B-Queue outperforms FastForward and MCRingBuffer in terms of stability and scalability, making it a good candidate for fast core-to-core communication on multi-core architectures.", "paper_title": "B-Queue: Efficient and Practical Queuing for Fast Core-to-Core Communication", "paper_id": "WOS:000313061500005"}