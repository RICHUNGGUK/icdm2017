{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "spider_diagrams"}, {"score": 0.04409655240764186, "phrase": "temporal_policies"}, {"score": 0.00477513738640734, "phrase": "policy_definition"}, {"score": 0.004619134710069517, "phrase": "well-established_visual_language"}, {"score": 0.004146327465630697, "phrase": "timed_sds"}, {"score": 0.004010785080336424, "phrase": "temporal_constraints"}, {"score": 0.003928321515373316, "phrase": "interval-based_model"}, {"score": 0.003831591603702392, "phrase": "diagram_elements"}, {"score": 0.003630073540438812, "phrase": "basic_tsds"}, {"score": 0.003585089792133518, "phrase": "time_constraints"}, {"score": 0.00352597432462803, "phrase": "entire_diagram"}, {"score": 0.003482276061796395, "phrase": "individual_elements"}, {"score": 0.003424850089214916, "phrase": "canonical_form"}, {"score": 0.003340475943517995, "phrase": "complex_tsds"}, {"score": 0.0033128141572497704, "phrase": "comic_strip-like_sequences"}, {"score": 0.003177892611195514, "phrase": "innovative_usage"}, {"score": 0.003048449231088915, "phrase": "oo-modelling_context"}, {"score": 0.0028521858876446654, "phrase": "specific_object"}, {"score": 0.0024149139610228887, "phrase": "permissible_states"}, {"score": 0.002316476356455291, "phrase": "temporal_gaps"}, {"score": 0.002158233639156017, "phrase": "time-annotated_instances"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Visual logic", " Temporal constraint specification", " Spider Diagrams", " Policy", " Visual modelling"], "paper_abstract": "Spider Diagrams (SDs) are a well-established visual language used to specify sets, their relationships, and constraints on their cardinalities. We propose two extensions allowing their use in the definition of temporal policies. Firstly, Timed SDs (TSDs) enable the expression of temporal constraints. We adopt an interval-based model of calendar time, permitting diagram elements to be specified to exist only over some interval. We introduce basic TSDs, where time constraints refer to an entire diagram rather than individual elements, as a canonical form for TSDs, and decompose complex TSDs into comic strip-like sequences of basic TSDs. Secondly, we introduce an innovative usage of SDs by specialising and adapting them to an OO-modelling context: in type-SDs a spider represents a type, whereas in instance-SDs a spider represents a specific object of a given type. A notion of conformance of an instance-SD to a type-SD ensues and we extend the concepts to instance-TSDs and type-TSDs. Finally, we combine extensions to allow the specification of temporal policies, which define permissible states for instances of some given type over a period without temporal gaps in it, and introduce a notion of conformance to a policy for a sequence of time-annotated instances. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Extending Spider Diagrams for policy definition", "paper_id": "WOS:000320636800003"}