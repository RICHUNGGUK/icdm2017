{"auto_keywords": [{"score": 0.034706354447783826, "phrase": "future_tasks"}, {"score": 0.00481495049065317, "phrase": "parallel_machines"}, {"score": 0.004712726613162057, "phrase": "novel_algorithms"}, {"score": 0.004662434526356164, "phrase": "dvs"}, {"score": 0.004612662942073808, "phrase": "dynamic_voltage_scaling"}, {"score": 0.0044665612806142835, "phrase": "dag"}, {"score": 0.004143196873246147, "phrase": "dynamic_environments"}, {"score": 0.004011867299107537, "phrase": "dag_execution_use"}, {"score": 0.0038638811223100184, "phrase": "estimated_time"}, {"score": 0.0034890505116128606, "phrase": "actual_execution"}, {"score": 0.003378385493203297, "phrase": "extra_available_slack"}, {"score": 0.00323625520042892, "phrase": "energy_requirements"}, {"score": 0.0030834712590249863, "phrase": "increased_time"}, {"score": 0.0029221351585970922, "phrase": "slack"}, {"score": 0.0025962029048520324, "phrase": "novel_dynamic_scheduling_algorithms"}, {"score": 0.002447101794397243, "phrase": "deadline_constraints"}, {"score": 0.0024209250169088575, "phrase": "experimental_results"}, {"score": 0.0023314867226678555, "phrase": "static_algorithms"}, {"score": 0.0022453451864218477, "phrase": "energy_minimization"}, {"score": 0.0022213218042340735, "phrase": "deadline_satisfaction"}, {"score": 0.002174041708084857, "phrase": "considerably_smaller_computational_overhead"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Energy-aware dynamic scheduling", " Dynamic voltage scaling", " Real time and embedded systems", " Parallel and distributed computing", " Multiprocessor systems"], "paper_abstract": "We explore novel algorithms for DVS (Dynamic Voltage Scaling) based energy minimization of DAG (Directed Acyclic Graph) based applications on parallel and distributed machines in dynamic environments. Static DVS algorithms for DAG execution use the estimated execution time. The estimated time in practice is overestimated or underestimated. Therefore, many tasks may be completed earlier or later than expected during the actual execution. For overestimation, the extra available slack can be added to future tasks so that energy requirements can be reduced. For underestimation, the increased time may cause the application to miss the deadline. Slack can be reduced for future tasks to reduce the possibility of not missing the deadline. In this paper, we present novel dynamic scheduling algorithms for reallocating the slack for future tasks to reduce energy and/or satisfy deadline constraints. Experimental results show that our algorithms are comparable to static algorithms applied at runtime in terms of energy minimization and deadline satisfaction, but require considerably smaller computational overhead. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Dynamic slack allocation algorithms for energy minimization on parallel machines", "paper_id": "WOS:000276557700001"}