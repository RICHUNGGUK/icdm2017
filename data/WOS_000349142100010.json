{"auto_keywords": [{"score": 0.004814954066330628, "phrase": "spmv"}, {"score": 0.004747620102130588, "phrase": "key_linear_algebra_algorithm"}, {"score": 0.004424768776701965, "phrase": "numerous_attempts"}, {"score": 0.004123781267600542, "phrase": "previous_work"}, {"score": 0.004066076430818046, "phrase": "impressive_progress"}, {"score": 0.004028054020045027, "phrase": "load_imbalance"}, {"score": 0.003990385737207714, "phrase": "high_memory_bandwidth"}, {"score": 0.003934540154108188, "phrase": "critical_performance_bottlenecks"}, {"score": 0.0038977432320806806, "phrase": "spmv."}, {"score": 0.003598492288058048, "phrase": "new_spmv_format"}, {"score": 0.0033851984021896287, "phrase": "bit_flags"}, {"score": 0.003322140088192527, "phrase": "row_indices"}, {"score": 0.0032756158688245, "phrase": "blocked_common_coordinate"}, {"score": 0.003125175084962886, "phrase": "bandwidth_problem"}, {"score": 0.002953711377604328, "phrase": "vertical_slices"}, {"score": 0.0028986672783671147, "phrase": "cache_hit_rates"}, {"score": 0.0027139447110929586, "phrase": "segmented_scan_approach"}, {"score": 0.0026384167183586015, "phrase": "load_imbalance_problem"}, {"score": 0.002470237978694949, "phrase": "global_synchronization"}, {"score": 0.0023902026696615473, "phrase": "auto-tuning_framework"}, {"score": 0.0023566987138026285, "phrase": "optimization_parameters"}, {"score": 0.002291089893848235, "phrase": "input_sparse_matrices"}, {"score": 0.0022696277881969896, "phrase": "target_hardware_platforms"}, {"score": 0.0021551222226685648, "phrase": "significant_performance_improvement"}], "paper_keywords": ["SpMV", " Segmented Scan", " BCCOO", " OpenCL", " CUDA", " GPU", " Parallel algorithms"], "paper_abstract": "SpMV is a key linear algebra algorithm and has been widely used in many important application domains As a result, numerous attempts have been made to optimize SpMV on GPUs to leverage their massive computational throughput. Although the previous work has shown impressive progress, load imbalance and high memory bandwidth remain the critical performance bottlenecks for SpMV. In this paper, we present our novel solutions to these problems. First, we devise a new SpMV format, called blocked compressed common coordinate (BCCOO), which uses bit flags to store the row indices in a blocked common coordinate (COO) format so as to alleviate the bandwidth problem. We further improve this format by partitioning the matrix into vertical slices to enhance the cache hit rates when accessing the vector to be multiplied. Second, we revisit the segmented scan approach for SpMV to address the load imbalance problem. We propose a highly efficient matrix-based segmented sum/scan for SpMV and further improve it by eliminating global synchronization. Then, we introduce an auto-tuning framework to choose optimization parameters based on the characteristics of input sparse matrices and target hardware platforms. Our experimental results on GTX680 GPUs and GTX480 GPUs show that our proposed framework achieves significant performance improvement over the vendor tuned CUSPARSE V5.0 (up to 229% and 65% on average on GTX680 GPUs, up to 150% and 42% on average on GTX480 GPUs) and some most recently proposed schemes (e.g., up to 195% and 70% on average over c1SpMV on GTX680 GPUs, up to 162% and 40% on average over c1SpMV on GTX480 GPUs).", "paper_title": "yaSpMV: Yet Another SpMV Framework on GPUs", "paper_id": "WOS:000349142100010"}