{"auto_keywords": [{"score": 0.03922232778675158, "phrase": "garbage_collection"}, {"score": 0.0048149562117234136, "phrase": "lightweight"}, {"score": 0.004726970265271088, "phrase": "concurrent_sweeping"}, {"score": 0.004692227830462433, "phrase": "javascript_garbage_collection"}, {"score": 0.004657771723747802, "phrase": "javascript"}, {"score": 0.004606479650820579, "phrase": "dynamic-typed_language"}, {"score": 0.00447251540886613, "phrase": "dynamic_client-side_behaviors"}, {"score": 0.004310501708408856, "phrase": "web_application_development"}, {"score": 0.004216112320418982, "phrase": "rapid_development_style"}, {"score": 0.0040334640350288, "phrase": "data_processing_requirements"}, {"score": 0.004003798249233137, "phrase": "growing_usage"}, {"score": 0.003916098498242888, "phrase": "mobile_devices"}, {"score": 0.003830312347175889, "phrase": "javascript_implementations"}, {"score": 0.0036914757355166966, "phrase": "aggressive_use"}, {"score": 0.003664315990489347, "phrase": "time_consuming_operations"}, {"score": 0.0035708152831417104, "phrase": "javascript_application"}, {"score": 0.0035054881943660096, "phrase": "trade-off_relationship"}, {"score": 0.003428665921276366, "phrase": "execution_time"}, {"score": 0.0032558762499901727, "phrase": "mark-_and-sweep_garbage_collector"}, {"score": 0.0031494088980556934, "phrase": "additional_thread"}, {"score": 0.0031032109441552287, "phrase": "free_memory_blocks"}, {"score": 0.002925077525258983, "phrase": "mutator_thread"}, {"score": 0.0028928306994090453, "phrase": "new_sweeping_thread"}, {"score": 0.0028293966058473476, "phrase": "course_grained_block-level_collecting_scheme"}, {"score": 0.002726740692380339, "phrase": "object_destruction"}, {"score": 0.0026768142335374156, "phrase": "object_destruction_phase"}, {"score": 0.002551231163230566, "phrase": "javascript_core"}, {"score": 0.0024768883044869023, "phrase": "webkit_browser"}, {"score": 0.0023606625824479956, "phrase": "javascript_objects"}, {"score": 0.0023346234464901978, "phrase": "original_garbage_collection_implementation"}, {"score": 0.002258212866482022, "phrase": "free_blocks"}, {"score": 0.0022005118194652704, "phrase": "arm-based_mobile_system"}, {"score": 0.0021682027434117095, "phrase": "memory_utilization"}, {"score": 0.0021049977753042253, "phrase": "performance_degradation"}], "paper_keywords": ["Languages", " Performance", " Algorithms", " concurrent", " garbage collection", " JavaScript", " memory management"], "paper_abstract": "JavaScript is a dynamic-typed language originally developed for the purpose of giving dynamic client-side behaviors to web pages. It is mainly used in web application development and because of its popularity and rapid development style it is now also used in other types of applications. Increasing data processing requirements and growing usage in more resource-limited environments, such as mobile devices, has given demands for JavaScript implementations to handle memory more efficiently through garbage collection. Since aggressive use of time consuming operations in garbage collection can slow down the JavaScript application, there is a trade-off relationship between the effectiveness and the execution time of garbage collection. In this paper, we present a lightweight, block-level concurrent sweeping mechanism for a mark- and-sweep garbage collector. The sweeping process is detached to an additional thread to eagerly collect free memory blocks and recycle it. To minimize the overhead that comes from the synchronization between the mutator thread and the new sweeping thread, we have chosen a course grained block-level collecting scheme for sweeping. To avoid contention that comes from object destruction, we execute the object destruction phase concurrently with the foreground marking phase. We have implemented our algorithm in JavaScript Core (JSC) engine embedded in the WebKit browser that uses a variant of mark- and-sweep algorithm to manage JavaScript objects. The original garbage collection implementation performs lazy sweeping that cannot reuse the free blocks. We evaluate our implementation on an ARM-based mobile system and show that memory utilization of the system is significantly improved without performance degradation.", "paper_title": "Lightweight and Block-level Concurrent Sweeping for JavaScript Garbage Collection", "paper_id": "WOS:000341937800018"}