{"auto_keywords": [{"score": 0.015719716506582538, "phrase": "behavior_model"}, {"score": 0.013415039848369986, "phrase": "object-oriented_systems"}, {"score": 0.004753670676591174, "phrase": "program_comprehension"}, {"score": 0.004693167092003573, "phrase": "dynamic_information"}, {"score": 0.004574449773348889, "phrase": "key_tasks"}, {"score": 0.0045162169185355, "phrase": "software_maintenance"}, {"score": 0.004458722048888919, "phrase": "software_visualization"}, {"score": 0.004401955895933783, "phrase": "sequence_diagrams"}, {"score": 0.0043181530164057135, "phrase": "promising_technique"}, {"score": 0.003872414709826833, "phrase": "automatic_generation"}, {"score": 0.003798654583736764, "phrase": "sequence_diagram"}, {"score": 0.003750260412839128, "phrase": "execution_traces"}, {"score": 0.0034063576796640603, "phrase": "automatically_generated_sequence_diagrams"}, {"score": 0.00334144503360907, "phrase": "massive_amounts"}, {"score": 0.003194736764837261, "phrase": "developer's_capacity"}, {"score": 0.0028100102841877835, "phrase": "slice_calculation"}, {"score": 0.0026184796288543878, "phrase": "static_and_dynamic_analysis"}, {"score": 0.0022882500116799777, "phrase": "eclipse_platform"}], "paper_keywords": ["program slicing", " program comprehension", " program maintenance", " sequence diagram", " reverse engineering", " debugging"], "paper_abstract": "Program comprehension using dynamic information is one of key tasks of software maintenance. Software visualization with sequence diagrams is a promising technique to help developer comprehend the behavior of object-oriented systems effectively. There are many tools that can support automatic generation of a sequence diagram from execution traces. However it is still difficult to understand the behavior because the size of automatically generated sequence diagrams from the massive amounts of execution traces tends lobe beyond developer's capacity. In this paper, we propose an execution trace slicing and visualization method. Our proposed method is capable of slice calculation based on a behavior model which can treat dependencies based on static and dynamic analysis and supports for various programs including exceptions and multi-threading. We also introduce our tool that perform our proposed slice calculation on the Eclipse platform. We show the applicability of our proposed method by applying the tool to two Java programs as case studies. As a result, we confirm effectiveness of our proposed method for understanding the behavior of object-oriented systems.", "paper_title": "Reticella: An Execution Trace Slicing and Visualization Tool Based on a Behavior Model", "paper_id": "WOS:000302834400006"}