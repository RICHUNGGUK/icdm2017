{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "program_code"}, {"score": 0.003870541730075597, "phrase": "genetic_programming"}, {"score": 0.003693533648584145, "phrase": "substantial_part"}, {"score": 0.0032094634756436595, "phrase": "fitness_function"}, {"score": 0.0027886573969044042, "phrase": "intermediate_memory_states"}, {"score": 0.002619748321217153, "phrase": "executing_programs"}, {"score": 0.002385326947545194, "phrase": "potentially_useful_intermediate_states"}, {"score": 0.0021049977753042253, "phrase": "evolutionary_search"}], "paper_keywords": ["Genetic programming", " Emergence", " Semantics", " Modularity", " Interactions"], "paper_abstract": "Program behavior results from the interactions of instructions with data. In genetic programming, a substantial part of that behavior is not explicitly rewarded by fitness function, and thus emergent. This includes the intermediate memory states traversed by the executing programs. We argue that the potentially useful intermediate states can be detected and used to make evolutionary search more effective.", "paper_title": "Genetic programming: where meaning emerges from program code", "paper_id": "WOS:000330968500006"}