{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "simultaneous_consensus"}, {"score": 0.04960770684597511, "phrase": "crash_failures"}, {"score": 0.004582528208024817, "phrase": "simultaneous_decision\"_problem"}, {"score": 0.004515004397496303, "phrase": "synchronous_system"}, {"score": 0.0036673959568781734, "phrase": "double_agreement"}, {"score": 0.003577691211998842, "phrase": "decided_value"}, {"score": 0.003421697038352743, "phrase": "decision_round"}, {"score": 0.003224223418301668, "phrase": "dwork"}, {"score": 0.0031924170149749778, "phrase": "moses"}, {"score": 0.002834409847642238, "phrase": "current_paper"}, {"score": 0.0027925723953701083, "phrase": "simple_algorithm"}, {"score": 0.002618278365749875, "phrase": "simultaneous_decision"}, {"score": 0.00240662380079115, "phrase": "initial_value"}, {"score": 0.0023710856920150574, "phrase": "design_principle"}, {"score": 0.002278856202878812, "phrase": "first-class_criterion"}, {"score": 0.0022452005651385095, "phrase": "new_optimality_proof"}, {"score": 0.002168586864007222, "phrase": "purely_combinatorial_terms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Agreement problem", " Consensus", " Distributed algorithm", " Early decision", " Process crash failure", " Simultaneity", " Synchronous message-passing system", " Knowledge", " Common knowledge"], "paper_abstract": "This paper addresses the \"consensus with simultaneous decision\" problem in a synchronous system prone to t process crashes. This problem requires that all the processes that do not crash decide on the same value (consensus), and that all decisions are made during the very same round (simultaneity). So, there is a double agreement, one on the decided value (data agreement) and one on the decision round (time agreement). This problem was first defined by Dwork and Moses who analyzed it and solved it using an analysis of the evolution of states of knowledge in a system with crash failures. The current paper presents a simple algorithm that optimally solves simultaneous consensus. Optimality means in this case that the simultaneous decision is taken in each and every run as soon as any protocol decides, given the same failure pattern and initial value. The design principle of this algorithm is simplicity, a first-class criterion. A new optimality proof is given that is stated in purely combinatorial terms. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Revisiting simultaneous consensus with crash failures", "paper_id": "WOS:000264502200007"}