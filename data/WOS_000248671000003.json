{"auto_keywords": [{"score": 0.045100492615217605, "phrase": "task_automata"}, {"score": 0.015719716506582524, "phrase": "real_time_systems"}, {"score": 0.015200497599516258, "phrase": "timed_automata"}, {"score": 0.0047787596516662, "phrase": "non-uniformly_recurring_computation_tasks"}, {"score": 0.004689462599037994, "phrase": "extended_version"}, {"score": 0.0046192222897398685, "phrase": "asynchronous_processes"}, {"score": 0.004567230180529598, "phrase": "computation_tasks"}, {"score": 0.004448169552315403, "phrase": "timed_events"}, {"score": 0.004381527499253281, "phrase": "classical_task_models"}, {"score": 0.004062937864702115, "phrase": "timing_constraints"}, {"score": 0.0039124037252916055, "phrase": "interval_execution_times"}, {"score": 0.0038683363637006902, "phrase": "best_case"}, {"score": 0.0038247634489737142, "phrase": "worst_case"}, {"score": 0.003627800727103479, "phrase": "task_instances"}, {"score": 0.0035599338383885447, "phrase": "classical_notion"}, {"score": 0.003467040410632942, "phrase": "task_automaton"}, {"score": 0.0033765627434550432, "phrase": "scheduling_strategy"}, {"score": 0.003325921766364862, "phrase": "possible_sequences"}, {"score": 0.003154566400499823, "phrase": "associated_tasks"}, {"score": 0.002859345731792013, "phrase": "best_case_and_the_worst_case_execution_times"}, {"score": 0.0027325449069867222, "phrase": "decidable_class"}, {"score": 0.0026511422582578027, "phrase": "bounded_subtraction"}, {"score": 0.002543148295176345, "phrase": "bounded_zone"}, {"score": 0.002458061764297103, "phrase": "decidable_and_undecidable_cases"}, {"score": 0.002402921062033032, "phrase": "schedulability_checking_problem"}, {"score": 0.0022110892229209407, "phrase": "new_task_releases"}, {"score": 0.0021049977753042253, "phrase": "running_task"}], "paper_keywords": ["real time systems", " schedulability analysis", " timed automata", " modeling and verification"], "paper_abstract": "We present a model, task automata, for real time systems with non-uniformly recurring computation tasks. It is an extended version of timed automata with asynchronous processes that are computation tasks generated (or triggered) by timed events. Compared with classical task models for real time systems, task automata may be used to describe tasks (1) that are generated non-deterministically according to timing constraints in timed automata, (2) that may have interval execution times representing the best case and the worst case execution times, and (3) whose completion times may influence the releases of task instances. We generalize the classical notion of schedulability to task automata. A task automaton is schedulable if there exists a scheduling strategy such that all possible sequences of events generated by the automaton are schedulable in the sense that all associated tasks can be computed within their deadlines. Our first technical result is that the schedulability for a given scheduling strategy can be checked algorithmically for the class of task automata when the best case and the worst case execution times of tasks are equal. The proof is based on a decidable class of suspension automata: timed automata with bounded subtraction in which clocks may be updated by subtractions within a bounded zone. We shall also study the borderline between decidable and undecidable cases. Our second technical result shows that the schedulability checking problem will be undecidable if the following three conditions hold: (1) the execution times of tasks are intervals, (2) the precise finishing time of a task instance may influence new task releases, and (3) a task is allowed to preempt another running task. (c) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Task automata: Schedulability, decidability and undecidability", "paper_id": "WOS:000248671000003"}