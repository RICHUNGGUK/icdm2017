{"auto_keywords": [{"score": 0.03317280490355695, "phrase": "gpu_memory"}, {"score": 0.014231300534337533, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "recent_gpu_algorithms"}, {"score": 0.00476334344613564, "phrase": "spatial_hierarchies"}, {"score": 0.00471228691115201, "phrase": "promising_performance"}, {"score": 0.00467855218490191, "phrase": "moderately_complex_models"}, {"score": 0.0046118021635786315, "phrase": "breadth-first_search"}, {"score": 0.004578800151969792, "phrase": "bfs"}, {"score": 0.004401342842183475, "phrase": "massive_parallelism"}, {"score": 0.004307459965946991, "phrase": "bfs_order"}, {"score": 0.004261268957001927, "phrase": "excessive_gpu_memory"}, {"score": 0.004185377431624781, "phrase": "serious_issue"}, {"score": 0.004155399041702324, "phrase": "interactive_applications"}, {"score": 0.003937273640906994, "phrase": "partial_breadth-first_search"}, {"score": 0.0038256426589560774, "phrase": "memory_consumption"}, {"score": 0.0037171648669537287, "phrase": "pbfs_order"}, {"score": 0.0036509280916606937, "phrase": "first_algorithm"}, {"score": 0.0034841647157189985, "phrase": "intermediate_memory_usage"}, {"score": 0.0034220655476652683, "phrase": "peak_memory_consumption"}, {"score": 0.0033249931673591457, "phrase": "costly_cpu-gpu_data_transfer"}, {"score": 0.00326572165784246, "phrase": "memory_allocation_strategies"}, {"score": 0.0032190636347671675, "phrase": "memory_fragmentation"}, {"score": 0.0031845067058084583, "phrase": "resulting_algorithm"}, {"score": 0.0030171910207671205, "phrase": "interactive_rates"}, {"score": 0.002931569771634119, "phrase": "existing_algorithms"}, {"score": 0.002747676657869163, "phrase": "second_algorithm"}, {"score": 0.0027181663098561066, "phrase": "out-of-core_bounding_volume_hierarchy"}, {"score": 0.0026220625042810706, "phrase": "pbfs_construction_order"}, {"score": 0.0025568135952982345, "phrase": "constructed_nodes"}, {"score": 0.0025112011945912327, "phrase": "cpu_memory"}, {"score": 0.0024311346712789553, "phrase": "next_iteration's_use"}, {"score": 0.0021049977753042253, "phrase": "previous_gpu_algorithms"}], "paper_keywords": ["Memory bound", " kd-tree", " bounding volume hierarchy"], "paper_abstract": "Recent GPU algorithms for constructing spatial hierarchies have achieved promising performance for moderately complex models by using the breadth-first search (BFS) construction order. While being able to exploit the massive parallelism on the GPU, the BFS order also consumes excessive GPU memory, which becomes a serious issue for interactive applications involving very complex models with more than a few million triangles. In this paper, we propose to use the partial breadth-first search (PBFS) construction order to control memory consumption while maximizing performance. We apply the PBFS order to two hierarchy construction algorithms. The first algorithm is for kd-trees that automatically balances between the level of parallelism and intermediate memory usage. With PBFS, peak memory consumption during construction can be efficiently controlled without costly CPU-GPU data transfer. We also develop memory allocation strategies to effectively limit memory fragmentation. The resulting algorithm scales well with GPU memory and constructs kd-trees of models with millions of triangles at interactive rates on GPUs with 1 GB memory. Compared with existing algorithms, our algorithm is an order of magnitude more scalable for a given GPU memory bound. The second algorithm is for out-of-core bounding volume hierarchy (BVH) construction for very large scenes based on the PBFS construction order. At each iteration, all constructed nodes are dumped to the CPU memory, and the GPU memory is freed for the next iteration's use. In this way, the algorithm is able to build trees that are too large to be stored in the GPU memory. Experiments show that our algorithm can construct BVHs for scenes with up to 20 M triangles, several times larger than previous GPU algorithms.", "paper_title": "Memory-Scalable GPU Spatial Hierarchy Construction", "paper_id": "WOS:000287199600006"}