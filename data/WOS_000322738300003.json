{"auto_keywords": [{"score": 0.042625106793030804, "phrase": "parallel_applications"}, {"score": 0.00481495049065317, "phrase": "application-level_checkpoint-recovery"}, {"score": 0.004710502210573142, "phrase": "checkpoint"}, {"score": 0.004574709094672837, "phrase": "execution_times"}, {"score": 0.004508286991825192, "phrase": "large-scale_parallel_applications"}, {"score": 0.004252063063815893, "phrase": "mean_time"}, {"score": 0.003981106369547929, "phrase": "hardware_failures"}, {"score": 0.0036731870109004993, "phrase": "machine_failures"}, {"score": 0.0035671997165370403, "phrase": "rollback_recovery"}, {"score": 0.00336428077531883, "phrase": "fault-tolerant_applications"}, {"score": 0.0031039212233596415, "phrase": "computing_time"}, {"score": 0.0030587884803931964, "phrase": "network_utilization"}, {"score": 0.0030143100083252516, "phrase": "storage_resources"}, {"score": 0.002927278301452369, "phrase": "current_checkpoint-recovery_techniques"}, {"score": 0.0027006464509273806, "phrase": "large_scale_systems"}, {"score": 0.002419542935774618, "phrase": "application-level_checkpointing"}, {"score": 0.0023154527779996213, "phrase": "detailed_experimental_results"}, {"score": 0.002248553559414903, "phrase": "multicore_cluster"}, {"score": 0.0021518035978153878, "phrase": "proposed_methods"}, {"score": 0.0021049977753042253, "phrase": "checkpointing_cost"}], "paper_keywords": ["Parallel Programming", " Message-Passing", " MPI", " Fault Tolerance", " Checkpointing"], "paper_abstract": "The execution times of large-scale parallel applications on nowadays multi/many-core systems are usually longer than the mean time between failures. Therefore, parallel applications must tolerate hardware failures to ensure that not all computation done is lost on machine failures. Checkpointing and rollback recovery is one of the most popular techniques to implement fault-tolerant applications. However, checkpointing parallel applications is expensive in terms of computing time, network utilization and storage resources. Thus, current checkpoint-recovery techniques should minimize these costs in order to be useful for large scale systems. In this paper three different and complementary techniques to reduce the size of the checkpoints generated by application-level checkpointing are proposed and implemented. Detailed experimental results obtained on a multicore cluster show the effectiveness of the proposed methods to reduce checkpointing cost.", "paper_title": "Improving Scalability of Application-Level Checkpoint-Recovery by Reducing Checkpoint Sizes", "paper_id": "WOS:000322738300003"}