{"auto_keywords": [{"score": 0.024388045028109453, "phrase": "ocaml"}, {"score": 0.02335064297227425, "phrase": "pvs"}, {"score": 0.00481495049065317, "phrase": "program_transformation"}, {"score": 0.004682708592184678, "phrase": "square_roots"}, {"score": 0.0045119929871912405, "phrase": "functional_programs"}, {"score": 0.0039252049353279556, "phrase": "different_subsets"}, {"score": 0.003610292749660581, "phrase": "certifying_mechanism"}, {"score": 0.0035110198699787013, "phrase": "targeted_language"}, {"score": 0.0030825404960282713, "phrase": "function_definition"}, {"score": 0.002997735656669146, "phrase": "output_code"}, {"score": 0.0028087949095629955, "phrase": "input_code"}, {"score": 0.002607362103727335, "phrase": "produced_function"}, {"score": 0.0021646022201798247, "phrase": "different_algorithms"}, {"score": 0.0021049977753042253, "phrase": "nasa_accord_project"}], "paper_keywords": ["Program transformation", " Real number computation", " Certifying transformation", " Semantics preservation"], "paper_abstract": "This paper presents the implementation of a program transformation that removes square roots and divisions from functional programs without recursion, producing code that can be exactly computed. This transformation accepts different subsets of languages as input and it provides a certifying mechanism when the targeted language is Pvs. In this case, we provide a relation between every function definition in the output code and its corresponding one in the input code, that specifies the behavior of the produced function with respect to the input one. This transformation has been implemented in OCaml and has been tested on different algorithms from the NASA ACCoRD project.", "paper_title": "A Certifying Square Root and Division Elimination", "paper_id": "WOS:000365196900012"}