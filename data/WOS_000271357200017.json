{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mpi_source_code"}, {"score": 0.04487700616034956, "phrase": "mpi_communication_patterns"}, {"score": 0.004728624975677976, "phrase": "communication_patterns"}, {"score": 0.004643839937761046, "phrase": "high-level_understanding"}, {"score": 0.004478782833067256, "phrase": "performance_optimization"}, {"score": 0.004425072111844721, "phrase": "hpc_applications"}, {"score": 0.004116012194714212, "phrase": "code_transformations"}, {"score": 0.0038749521906474593, "phrase": "application_developer"}, {"score": 0.0037597491055035895, "phrase": "novel_algorithm"}, {"score": 0.0035609154384221567, "phrase": "source_code_transformations"}, {"score": 0.0034759420565135253, "phrase": "observed_patterns"}, {"score": 0.003332072426367186, "phrase": "rose_compiler_framework"}, {"score": 0.003252542052430779, "phrase": "abstract_syntax_tree"}, {"score": 0.0031941384895530426, "phrase": "static_analysis"}, {"score": 0.0027463775689957255, "phrase": "realistic_applications"}, {"score": 0.002600995957987461, "phrase": "simple_benchmarks"}, {"score": 0.0025542617599268323, "phrase": "low_overhead"}, {"score": 0.0024932498388507084, "phrase": "job_size"}, {"score": 0.002361236012575149, "phrase": "mpi_code_fragments"}, {"score": 0.0023328599525181707, "phrase": "collective_operations"}, {"score": 0.002304824112812496, "phrase": "highly_optimized_native_mpi_functions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["MPI communication pattern", " ROSE compiler framework", " Source code transformation", " Abstract syntax tree", " Suffix tree"], "paper_abstract": "A high-level understanding of communication behavior can facilitate performance optimization of HPC applications. In particular, MPI communication patterns can serve as the basis of code transformations that substitute more efficient operations for those originally used by the application developer. We present a novel algorithm for identifying MPI communication patterns and a mechanism to perform source code transformations based on the observed patterns. Our transformation mechanism, implemented within the ROSE compiler framework, modifies the abstract syntax tree based on static analysis that confirms the generalizability of the patterns that we detect. Our results demonstrate the efficiency of our approach. Our pattern detection algorithm. which we evaluate with realistic applications using traces from up to 128 processors as well as with simple benchmarks, has low overhead as input or job size grows. Our transformation mechanism quickly optimizes MPI source code by replacing MPI code fragments for collective operations through highly optimized native MPI functions and by increasing the overlapping of communication and computation. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Transforming MPI source code based on communication patterns", "paper_id": "WOS:000271357200017"}