{"auto_keywords": [{"score": 0.04769951483161256, "phrase": "sharing_group"}, {"score": 0.03553710351153953, "phrase": "abstract_unification"}, {"score": 0.00481495049065317, "phrase": "jacobs_and_langen_domain"}, {"score": 0.004448169552315403, "phrase": "program_variables"}, {"score": 0.003882970272082245, "phrase": "common_variable"}, {"score": 0.002552781867125423, "phrase": "total_number"}, {"score": 0.0023848164282879885, "phrase": "remaining_closures"}, {"score": 0.002318127769195112, "phrase": "smaller_descriptions"}, {"score": 0.002153316680437517, "phrase": "closure_calculation"}, {"score": 0.0021049977753042253, "phrase": "experimental_evaluation"}], "paper_keywords": [""], "paper_abstract": "A description in the Jacobs and Langen domain is a set of sharing groups where each sharing group is a set of program variables. The presence of a sharing group in a description indicates that all the variables in the group can be bound to terms that contain a common variable. The expressiveness of the domain, alas, is compromised by its intractability. Not only are descriptions potentially exponential in size, but abstract unification is formulated in terms of an operation, called closure under union, that is also exponential. This paper shows how abstract unification can be reformulated so that closures can be collapsed in two senses. Firstly, one closure operation can be folded into another so as to reduce the total number of closures that need to be computed. Secondly, the remaining closures can be applied to smaller descriptions. Therefore, although the operation remains exponential, the overhead of closure calculation is reduced. Experimental evaluation suggests that the cost of analysis can be substantially reduced by collapsing closures.", "paper_title": "Collapsing closures", "paper_id": "WOS:000240061200011"}