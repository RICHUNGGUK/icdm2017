{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "temporal_data"}, {"score": 0.0453665111651286, "phrase": "temporal_ranking_queries"}, {"score": 0.013806700313130898, "phrase": "time_instance_t"}, {"score": 0.004757917303420435, "phrase": "database_community"}, {"score": 0.004701556483912018, "phrase": "extensive_amount"}, {"score": 0.00446490613141384, "phrase": "insufficient_amount"}, {"score": 0.0041074234667687875, "phrase": "top-k_objects"}, {"score": 0.003978866233891427, "phrase": "score_attribute"}, {"score": 0.003931697356115479, "phrase": "generic_indexing_structures"}, {"score": 0.0038390240716280302, "phrase": "ranking_queries"}, {"score": 0.0032744315183287024, "phrase": "top-k_query"}, {"score": 0.003197200793408836, "phrase": "optimal_number"}, {"score": 0.002826181226538412, "phrase": "disk_block_size"}, {"score": 0.0027704982687041147, "phrase": "near-linear_size"}, {"score": 0.002737615043512257, "phrase": "constant_and_reasonable_k"}, {"score": 0.002599560451267203, "phrase": "maximum_value"}, {"score": 0.0025687008721685454, "phrase": "possible_values"}, {"score": 0.0025382066972107777, "phrase": "query_parameter_k"}, {"score": 0.002468450551616404, "phrase": "near-linear_time"}, {"score": 0.002147333949483224, "phrase": "extensive_experiments"}, {"score": 0.0021049977753042253, "phrase": "large_data_sets"}], "paper_keywords": ["Ranking queries", " Indexing", " IO efficient algorithms", " Temporal data", " Piece-wise linearsegmentation", " Top-k"], "paper_abstract": "The database community has devoted extensive amount of efforts to indexing and querying temporal data in the past decades. However, insufficient amount of attention has been paid to temporal ranking queries. More precisely, given any time instance t, the query asks for the top-k objects at time t with respect to some score attribute. Some generic indexing structures based on R-trees do support ranking queries on temporal data, but as they are not tailored for such queries, the performance is far from satisfactory. We present the Seb-tree, a simple indexing scheme that supports temporal ranking queries much more efficiently. The Seb-tree answers a top-k query for any time instance t in the optimal number of I/Os in expectation, namely, O (log(B) N/B + k/B) I/Os, where N is the size of the data set and B is the disk block size. The index has near-linear size (for constant and reasonable k (max) values, where k (max) is the maximum value for the possible values of the query parameter k), can be constructed in near-linear time, and also supports insertions and deletions without affecting its query performance guarantee. Most of all, the Seb-tree is especially appealing in practice due to its simplicity as it uses the B-tree as the only building block. Extensive experiments on a number of large data sets, show that the Seb-tree is more than an order of magnitude faster than the R-tree based indexes for temporal ranking queries.", "paper_title": "Top-k queries on temporal data", "paper_id": "WOS:000282423700005"}