{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parallel_erlang_programs"}, {"score": 0.004466519142879166, "phrase": "new_programming_methodology"}, {"score": 0.0040916230716372265, "phrase": "erlang_programs"}, {"score": 0.003940706575253453, "phrase": "source-level_code_refactoring"}, {"score": 0.0036553070575015344, "phrase": "parallel_programs"}, {"score": 0.0033482708495261864, "phrase": "high-level_cost_models"}, {"score": 0.0031056437850836326, "phrase": "reasonable_accuracy"}, {"score": 0.003028727936200845, "phrase": "parallel_performance"}, {"score": 0.0029169007179202164, "phrase": "refactored_program"}, {"score": 0.0027054473441439422, "phrase": "informed_decisions"}, {"score": 0.0021049977753042253, "phrase": "sequential_code"}], "paper_keywords": [""], "paper_abstract": "This paper presents a new programming methodology for introducing and tuning parallelism in Erlang programs, using source-level code refactoring from sequential source programs to parallel programs written using our skeleton library, Skel. High-level cost models allow us to predict with reasonable accuracy the parallel performance of the refactored program, enabling programmers to make informed decisions about which refactorings to apply. Using our approach, we demonstrate easily obtainable, significant and scalable speedups of up to 21 on a 24-core machine over the sequential code.", "paper_title": "Cost-Directed Refactoring for Parallel Erlang Programs", "paper_id": "WOS:000336802500004"}