{"auto_keywords": [{"score": 0.03412771178496745, "phrase": "horn"}, {"score": 0.009197425041038047, "phrase": "abraham"}, {"score": 0.00481495049065317, "phrase": "semi-matching_problems"}, {"score": 0.0045370785151713396, "phrase": "bipartite_graphs"}, {"score": 0.004249825947483216, "phrase": "scheduling_literature"}, {"score": 0.004149922666541166, "phrase": "faster_algorithms"}, {"score": 0.004076533120753605, "phrase": "weighted_and_unweighted_cases"}, {"score": 0.003980687255880279, "phrase": "weighted_case"}, {"score": 0.0034304883989739804, "phrase": "geometric_structure"}, {"score": 0.0029561107046138136, "phrase": "unweighted_case"}, {"score": 0.0027358910467781155, "phrase": "simple_divide-and-conquer_algorithm"}, {"score": 0.0024577274522206436, "phrase": "harvey_et_al"}, {"score": 0.0021049977753042253, "phrase": "harada_et_al"}], "paper_keywords": ["Semi-matching", " scheduling", " combinatorial optimization", " design and analysis of algorithm"], "paper_abstract": "We consider the problem of finding semi-matching in bipartite graphs, which is also extensively studied under various names in the scheduling literature. We give faster algorithms for both weighted and unweighted cases. For the weighted case, we give an O(nmlog n)-time algorithm, where n is the number of vertices and ni is the number of edges, by exploiting the geometric structure of the problem. This improves the classical O(n(3))-time algorithms by Horn [1973] and Bruno et al. [1974b]. For the unweighted case, the bound can be improved even further. We give a simple divide-and-conquer algorithm that runs in O(root nmlog n) time, improving two previous O(nm)-time algorithms by Abraham [2003] and Harvey et al. [2003, 20061. We also extend this algorithm to solve the Balanced Edge Cover problem in O(root nmlog n) time, improving the previous O(nm)-time algorithm by Harada et al. [2008].", "paper_title": "Faster Algorithms for Semi-Matching Problems", "paper_id": "WOS:000339708400005"}