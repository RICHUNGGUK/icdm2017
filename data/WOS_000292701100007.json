{"auto_keywords": [{"score": 0.049469816714638924, "phrase": "integer_arithmetics"}, {"score": 0.00481495049065317, "phrase": "logic_programs"}, {"score": 0.004235938758522453, "phrase": "definite_logic_programs"}, {"score": 0.0041287394089001405, "phrase": "non-termination_analyzers"}, {"score": 0.003872414709826833, "phrase": "real-life_prolog_programs"}, {"score": 0.0037262941538784094, "phrase": "non-logical_features"}, {"score": 0.003631945391344252, "phrase": "first_step"}, {"score": 0.0035173498506324476, "phrase": "prolog_programs"}, {"score": 0.0033845816848753073, "phrase": "non-termination_condition"}, {"score": 0.0030741085942960814, "phrase": "international_logic_programming_conference"}, {"score": 0.0027212777001495176, "phrase": "non-terminating_ones"}, {"score": 0.0026693851900137953, "phrase": "first_phase"}, {"score": 0.0024556852466581527, "phrase": "arithmetic_operations"}, {"score": 0.00236289633510808, "phrase": "arithmetic_calls"}, {"score": 0.0023178219772486868, "phrase": "second_phase"}, {"score": 0.002259054486157494, "phrase": "successful_arithmetic_calls"}, {"score": 0.0022159566043745724, "phrase": "constraint_problem"}, {"score": 0.0021049977753042253, "phrase": "non-terminating_queries"}], "paper_keywords": ["non-termination analysis", " numerical computation", " constraint-based approach"], "paper_abstract": "In the past years, analyzers have been introduced to detect classes of non-terminating queries for definite logic programs. Although these non-termination analyzers have shown to be rather precise, their applicability on real-life Prolog programs is limited because most Prolog programs use non-logical features. As a first step towards the analysis of Prolog programs, this paper presents a non-termination condition for Logic Programs containing integer arithmetics. The analyzer is based on our non-termination analyzer presented at International Logic Programming Conference (ICLP) 2009. The analysis starts from a class of queries and infers a subclass of non-terminating ones. In first phase, we ignore the outcome (success or failure) of the arithmetic operations, assuming success of all arithmetic calls. In second phase, we characterize successful arithmetic calls as a constraint problem, the solution of which determines the non-terminating queries.", "paper_title": "Non-termination analysis of logic programs with integer arithmetics", "paper_id": "WOS:000292701100007"}