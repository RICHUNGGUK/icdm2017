{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distributed_storage"}, {"score": 0.004579147045265106, "phrase": "cheap_network_storage_resources"}, {"score": 0.004516856326107826, "phrase": "specific_availability_and_capacity_requirements"}, {"score": 0.004315249628884236, "phrase": "optimal_composition"}, {"score": 0.004276016541197123, "phrase": "availability_and_price_requirements"}, {"score": 0.004160435626849478, "phrase": "knapsack_problem"}, {"score": 0.0040111533608228195, "phrase": "approximate_solutions"}, {"score": 0.003956558420993431, "phrase": "first_algorithm"}, {"score": 0.0039027036493682887, "phrase": "dynamic_programming_approach"}, {"score": 0.003849579089885659, "phrase": "mirrored_storage_resources"}, {"score": 0.003814563533445401, "phrase": "high_availability_requirements"}, {"score": 0.00349734405943853, "phrase": "sellers'_resources"}, {"score": 0.003371773890338284, "phrase": "capacity_function"}, {"score": 0.003325852346387272, "phrase": "requested_and_minimum_availability"}, {"score": 0.0032805541677236325, "phrase": "second_technique"}, {"score": 0.003105428650735113, "phrase": "larger_coherent_resource"}, {"score": 0.0029666322924554274, "phrase": "third_technique"}, {"score": 0.002782647772219627, "phrase": "complex_integer_programming_problem"}, {"score": 0.0027322025124213566, "phrase": "genetic_algorithm"}, {"score": 0.002527788827701828, "phrase": "storage_resources"}, {"score": 0.002403724423251419, "phrase": "open_storage_market"}, {"score": 0.002275299774554847, "phrase": "user_requests"}, {"score": 0.0021049977753042253, "phrase": "single_resources"}], "paper_keywords": ["Grid computing", " Quality of service", " Distributed storage", " Grid economics"], "paper_abstract": "In this paper, we investigate the composition of cheap network storage resources to meet specific availability and capacity requirements. We show that the problem of finding the optimal composition for availability and price requirements can be reduced to the knapsack problem, and propose three techniques for efficiently finding approximate solutions. The first algorithm uses a dynamic programming approach to find mirrored storage resources for high availability requirements, and runs in the pseudo-polynomial O(n (2) c) time where n is the number of sellers' resources to choose from and c is a capacity function of the requested and minimum availability. The second technique is a heuristic which finds resources to be agglomerated into a larger coherent resource, with complexity of O(nlog n). The third technique finds a compromise between capacity and availability (which in our phrasing is a complex integer programming problem) using a genetic algorithm. The algorithms can be implemented on a broker that intermediates between buyers and sellers of storage resources. Finally, we show that a broker in an open storage market, using the combination of the three algorithms can more frequently meet user requests and lower the cost of requests that are met compared to a broker that simply matches single resources to requests.", "paper_title": "Efficient allocation and composition of distributed storage", "paper_id": "WOS:000263391600003"}