{"auto_keywords": [{"score": 0.04443809788762847, "phrase": "cache_files"}, {"score": 0.015719716506582538, "phrase": "stable_set_model"}, {"score": 0.013569087931894078, "phrase": "transition_faults"}, {"score": 0.00801954613367727, "phrase": "execution_time"}, {"score": 0.004758053266234474, "phrase": "enhance_cachefiles"}, {"score": 0.004701825207431857, "phrase": "client_cache"}, {"score": 0.004618720776729413, "phrase": "important_technology"}, {"score": 0.004483450050677258, "phrase": "distributed_and_centralized_storage_systems"}, {"score": 0.004378078970574258, "phrase": "representative_client_cache_system"}, {"score": 0.003957078581524691, "phrase": "simple_lru_policy"}, {"score": 0.0038870860864224656, "phrase": "tightly-coupled_design"}, {"score": 0.0034304883989739804, "phrase": "enhanced_cache_files"}, {"score": 0.0033898953358387075, "phrase": "sac._ssm"}, {"score": 0.003329901594166227, "phrase": "data_access"}, {"score": 0.0031750418391373035, "phrase": "stable_sets"}, {"score": 0.002903771635043968, "phrase": "ssm_methods"}, {"score": 0.0028354207806133153, "phrase": "cache_management"}, {"score": 0.002655616553414394, "phrase": "loosely-coupled_methods"}, {"score": 0.002608583927848071, "phrase": "prefetch_and_replacement_policies"}, {"score": 0.002517025061554803, "phrase": "linux"}, {"score": 0.0023018231138999218, "phrase": "sac"}, {"score": 0.0021049977753042253, "phrase": "existing_cache_files"}], "paper_keywords": ["Stable Set Model", " cache management", " CacheFiles"], "paper_abstract": "Client cache is an important technology for the optimization of distributed and centralized storage systems. As a representative client cache system, the performance of Cache Files is limited by transition faults. Furthermore, Cache Files just supports a simple LRU policy with a tightly-coupled design. To overcome these limitations, we propose to employ Stable Set Model (SSM) to improve Cache Files and design an enhanced Cache Files, SAC. SSM assumes that data access can be decomposed to access on some stable sets, in which elements are always repeatedly accessed or not accessed together. Using SSM methods can improve the cache management and reduce the effect of transition faults. We also adopt loosely-coupled methods to design prefetch and replacement policies. We implement our scheme on Linux 2.6.32 and measure the execution time of the scheme with various file I/O benchmarks. Experiments show that SAC can significantly improve I/0 performance and reduce execution time up to 84%, compared with the existing Cache Files.", "paper_title": "SAC: Exploiting Stable Set Model to Enhance CacheFiles", "paper_id": "WOS:000333071200012"}