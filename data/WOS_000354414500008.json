{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concurrent_systems"}, {"score": 0.03151036962346514, "phrase": "reduced_model"}, {"score": 0.004633429997452688, "phrase": "compositional_framework"}, {"score": 0.0045162169185355, "phrase": "state_explosion_problem"}, {"score": 0.004155283263388382, "phrase": "system_model"}, {"score": 0.003998531873723384, "phrase": "communicating_components"}, {"score": 0.003922378980031565, "phrase": "high-level_description_language"}, {"score": 0.0038230844545071303, "phrase": "local_state_transition_models"}, {"score": 0.003750260412839128, "phrase": "individual_component"}, {"score": 0.0037024804835018373, "phrase": "local_properties"}, {"score": 0.0034282732966589478, "phrase": "component_state_transition_models"}, {"score": 0.00334144503360907, "phrase": "reduced_global_model"}, {"score": 0.0032777653153451265, "phrase": "entire_system"}, {"score": 0.0032359856233193504, "phrase": "global_safety_properties"}, {"score": 0.003113804826864362, "phrase": "state_space_reductions"}, {"score": 0.0030349168871027558, "phrase": "framework_result"}, {"score": 0.002901627749562029, "phrase": "exact_same_set"}, {"score": 0.002864628676257225, "phrase": "observably_equivalent_executions"}, {"score": 0.0027920359090544107, "phrase": "original_model"}, {"score": 0.002703869368554536, "phrase": "false_counter-examples"}, {"score": 0.00236289633510808, "phrase": "partial-order_reduction"}, {"score": 0.002244596395352896, "phrase": "experimental_results"}, {"score": 0.0022159566043745724, "phrase": "significant_scale-up"}, {"score": 0.002173679145840769, "phrase": "compositional_verification_framework"}, {"score": 0.0021049977753042253, "phrase": "non-trivial_concurrent_system_models"}], "paper_keywords": ["Formal verification", " model checking", " compositional reasoning", " minimization", " concurrency"], "paper_abstract": "This paper presents a compositional framework to address the state explosion problem in model checking of concurrent systems. This framework takes as input a system model described as a network of communicating components in a high-level description language, finds the local state transition models for each individual component where local properties can be verified, and then iteratively reduces and composes the component state transition models to form a reduced global model for the entire system where global safety properties can be verified. The state space reductions used in this framework result in a reduced model that contains the exact same set of observably equivalent executions as in the original model, therefore, no false counter-examples result from the verification of the reduced model. This approach allows designs that cannot be handled monolithically or with partial-order reduction to be verified without difficulty. The experimental results show significant scale-up of this compositional verification framework on a number of non-trivial concurrent system models.", "paper_title": "Compositional Model Checking of Concurrent Systems", "paper_id": "WOS:000354414500008"}