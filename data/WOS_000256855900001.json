{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "applicative_functors"}, {"score": 0.014039040023125138, "phrase": "monads"}, {"score": 0.004527619017250708, "phrase": "applicative_style"}, {"score": 0.004448705308279165, "phrase": "effectful_programming"}, {"score": 0.0037973594873521596, "phrase": "programming_pattern"}, {"score": 0.0032697235411641695, "phrase": "applicative_pattern"}, {"score": 0.003212663446866797, "phrase": "diverse_examples"}, {"score": 0.002994178996584381, "phrase": "applicative_type_class"}, {"score": 0.002890557197908352, "phrase": "bracket_notation"}, {"score": 0.002790511479398411, "phrase": "normal_application_syntax"}, {"score": 0.002646880721119838, "phrase": "applicative_functor"}, {"score": 0.002381365139274329, "phrase": "generic_operations"}, {"score": 0.0021998194157393353, "phrase": "categorical_structure"}], "paper_keywords": [""], "paper_abstract": "In this article, we introduce Applicative functors - an abstract characterisation of an applicative style of effectful programming, weaker than Monads and hence more widespread. Indeed, it is the ubiquity of this programming pattern that drew us to the abstraction. We retrace our steps in this article, introducing the applicative pattern by diverse examples, then abstracting it to define the Applicative type class and introducing a bracket notation that interprets the normal application syntax in the idiom of an Applicative functor. Furthermore, we develop the properties of applicative functors and the generic operations they support. We close by identifying the categorical structure of applicative functors and examining their relationship both with Monads and with Arrows.", "paper_title": "Applicative programming with effects", "paper_id": "WOS:000256855900001"}