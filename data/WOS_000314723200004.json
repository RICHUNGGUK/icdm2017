{"auto_keywords": [{"score": 0.04769152759457353, "phrase": "gp"}, {"score": 0.00481495049065317, "phrase": "grammatical_genetic_programming_grammars"}, {"score": 0.00475382761232911, "phrase": "femtocell_network_coverage"}, {"score": 0.0046141941030386525, "phrase": "grammatical_genetic_programming"}, {"score": 0.004421770937919324, "phrase": "base_station_pilot_power"}, {"score": 0.0043656173407379895, "phrase": "femtocell_network"}, {"score": 0.004310173770196077, "phrase": "overall_goal"}, {"score": 0.004130376386308024, "phrase": "continuous_online_evolution"}, {"score": 0.0040779081518317415, "phrase": "femtocell_pilot_power_control_algorithm"}, {"score": 0.00387459052649752, "phrase": "different_grammars"}, {"score": 0.0038090874465452214, "phrase": "femtocell_simulation_model"}, {"score": 0.003760685138103153, "phrase": "grammatical_genetic_programming_method"}, {"score": 0.0036191240628152205, "phrase": "conditional_statements"}, {"score": 0.0035883942463601688, "phrase": "mathematical_functions"}, {"score": 0.003512702405367876, "phrase": "symbolic_regression_applications"}, {"score": 0.003157455511069507, "phrase": "random_sampling"}, {"score": 0.003130633384437765, "phrase": "limited_enumeration"}, {"score": 0.0031040383983860836, "phrase": "femtocell_pilot_power_settings"}, {"score": 0.0030645676308053444, "phrase": "symbolic_regression"}, {"score": 0.002961741486178455, "phrase": "evolutionary_algorithm"}, {"score": 0.002886885861509621, "phrase": "conditional_statement_grammar"}, {"score": 0.002742787059497186, "phrase": "resulting_femtocell_algorithms"}, {"score": 0.0025618507754493394, "phrase": "ec"}, {"score": 0.002475755804232436, "phrase": "underlying_model"}, {"score": 0.002413153346716919, "phrase": "current_system"}, {"score": 0.002342110338541984, "phrase": "ec_method"}, {"score": 0.002253826965566618, "phrase": "best_fitness_and_engineering_performances"}, {"score": 0.002159623311924437, "phrase": "training_scenarios"}, {"score": 0.0021049977753042253, "phrase": "evolved_solutions'_performance"}], "paper_keywords": ["Genetic programming", " Grammars", " Femtocell", " Symbolic regression", " Grammatical evolution"], "paper_abstract": "We study grammars used in grammatical genetic programming (GP) which create algorithms that control the base station pilot power in a femtocell network. The overall goal of evolving algorithms for femtocells is to create a continuous online evolution of the femtocell pilot power control algorithm in order to optimize their coverage. We compare the performance of different grammars and analyse the femtocell simulation model using the grammatical genetic programming method called grammatical evolution. The grammars consist of conditional statements or mathematical functions as are used in symbolic regression applications of GP, as well as a hybrid containing both kinds of statements. To benchmark and gain further information about our femtocell network simulation model we also perform random sampling and limited enumeration of femtocell pilot power settings. The symbolic regression based grammars require the most configuration of the evolutionary algorithm and more fitness evaluations, whereas the conditional statement grammar requires more domain knowledge to set the parameters. The content of the resulting femtocell algorithms shows that the evolutionary computation (EC) methods are exploiting the assumptions in the model. The ability of EC to exploit bias in both the fitness function and the underlying model is vital for identifying the current system and improves the model and the EC method. Finally, the results show that the best fitness and engineering performances for the grammars are similar over both test and training scenarios. In addition, the evolved solutions' performance is superior to those designed by humans.", "paper_title": "A comparison of grammatical genetic programming grammars for controlling femtocell network coverage", "paper_id": "WOS:000314723200004"}