{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "cooperative_concurrency_bug_isolation"}, {"score": 0.004731638279336065, "phrase": "concurrency_bugs"}, {"score": 0.00451642066363115, "phrase": "modern_software_systems"}, {"score": 0.0042859292226559535, "phrase": "data_races"}, {"score": 0.004236321075918639, "phrase": "atomicity_violations"}, {"score": 0.004114787982556699, "phrase": "dynamic_approaches"}, {"score": 0.004067152645111547, "phrase": "high_run-time_overheads"}, {"score": 0.003927516959113487, "phrase": "specific_execution_interleavings"}, {"score": 0.003792657064634775, "phrase": "in-house_testing"}, {"score": 0.0036838048761094933, "phrase": "lightweight_program_monitoring_technique"}, {"score": 0.0034956560177000656, "phrase": "cooperative_crug_isolation"}, {"score": 0.0032406665327678616, "phrase": "production-run_failures"}, {"score": 0.0031111332159761344, "phrase": "specific_thread_interleavings"}, {"score": 0.0030042210975126616, "phrase": "statistical_models"}, {"score": 0.002952146666681891, "phrase": "strong_failure_predictors"}, {"score": 0.0028341130433482565, "phrase": "varied_suite"}, {"score": 0.002752695791351096, "phrase": "different_trade-offs"}, {"score": 0.0026736111900632934, "phrase": "isolation_capability"}, {"score": 0.0025967927629150715, "phrase": "variant_random_sampling_strategies"}, {"score": 0.002551762519273805, "phrase": "different_types"}, {"score": 0.0022184630090454132, "phrase": "wide_spectrum"}, {"score": 0.0021672995161145276, "phrase": "diagnosis_capabilities"}, {"score": 0.0021049977753042253, "phrase": "different_usage_scenarios"}], "paper_keywords": ["Experimentation", " Reliability", " concurrency", " statistical debugging", " random sampling", " bug isolation"], "paper_abstract": "Fixing concurrency bugs (or crugs) is critical in modern software systems. Static analyses to find crugs such as data races and atomicity violations scale poorly, while dynamic approaches incur high run-time overheads. Crugs manifest only under specific execution interleavings that may not arise during in-house testing, thereby demanding a lightweight program monitoring technique that can be used post-deployment. We present Cooperative Crug Isolation (CCI), a low-overhead instrumentation framework to diagnose production-run failures caused by crugs. CCI tracks specific thread interleavings at run-time, and uses statistical models to identify strong failure predictors among these. We offer a varied suite of predicates that represent different trade-offs between complexity and fault isolation capability. We also develop variant random sampling strategies that suit different types of predicates and help keep the run-time overhead low. Experiments with 9 real-world bugs in 6 non-trivial C applications show that these schemes span a wide spectrum of performance and diagnosis capabilities, each suitable for different usage scenarios.", "paper_title": "Instrumentation and Sampling Strategies for Cooperative Concurrency Bug Isolation", "paper_id": "WOS:000286595800016"}