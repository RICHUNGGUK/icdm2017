{"auto_keywords": [{"score": 0.049725544371589304, "phrase": "parser_tables"}, {"score": 0.03848445502174085, "phrase": "grammar_development"}, {"score": 0.004674333455266527, "phrase": "conflict_resolution"}, {"score": 0.004571559854487074, "phrase": "recent_effort"}, {"score": 0.004471035765089235, "phrase": "grammar-dependent_software_development"}, {"score": 0.00407533728096378, "phrase": "practical_lr_parser_table_generation"}, {"score": 0.004015346552764311, "phrase": "lalr"}, {"score": 0.00388356203453764, "phrase": "full_language"}, {"score": 0.003840598580753804, "phrase": "grammar_developer"}, {"score": 0.003784049616066444, "phrase": "canonical_lr"}, {"score": 0.0035265659032655845, "phrase": "minimal_lr_parser_table_generation_algorithms"}, {"score": 0.0033981387193790353, "phrase": "well_known_algorithm"}, {"score": 0.003360527337581911, "phrase": "david_pager"}, {"score": 0.0033110234463504125, "phrase": "menhir"}, {"score": 0.0030970990565391183, "phrase": "full_power"}, {"score": 0.0026401983633087267, "phrase": "gnu_bison"}, {"score": 0.002152440300818582, "phrase": "computer_hardware"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Grammarware", " Canonical LR", " LALR", " Minimal LR", " Yacc", " Bison"], "paper_abstract": "There has been a recent effort in the literature to reconsider grammar-dependent software development from an engineering point of view. As part of that effort, we examine a deficiency in the state of the art of practical LR parser table generation. Specifically, LALR sometimes generates parser tables that do not accept the full language that the grammar developer expects, but canonical LR is too inefficient to be practical particularly during grammar development. In response, many researchers have attempted to develop minimal LR parser table generation algorithms. In this paper, we demonstrate that a well known algorithm described by David Pager and implemented in Menhir, the most robust minimal LR(1) implementation we have discovered, does not always achieve the full power of canonical LR(1) when the given grammar is non-LR(1) coupled with a specification for resolving conflicts. We also detail an original minimal LR(1) algorithm, IELR(1) (Inadequacy Elimination LR(1)), which we have implemented as an extension of GNU Bison and which does not exhibit this deficiency. Using our implementation, we demonstrate the relevance of this deficiency for several real-world parser specifications, and we demonstrate the feasibility of IELR(1). Finally, we demonstrate that, if canonical LR(1) were employed instead, grammar development would be severely impeded regardless of the power of the computer hardware. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "The IELR(1) algorithm for generating minimal LR(1) parser tables for non-LR(1) grammars with conflict resolution", "paper_id": "WOS:000281129600003"}