{"auto_keywords": [{"score": 0.02813163011847597, "phrase": "single_token"}, {"score": 0.00481495049065317, "phrase": "petri_nets"}, {"score": 0.004749106104067268, "phrase": "relational_calculus"}, {"score": 0.0042928648367867835, "phrase": "large_amounts"}, {"score": 0.004253618550301311, "phrase": "complex_data"}, {"score": 0.004081385289516914, "phrase": "manipulated_data"}, {"score": 0.0038447943243941685, "phrase": "common_extension"}, {"score": 0.0035722806911457545, "phrase": "processing_tasks"}, {"score": 0.0033651019362620866, "phrase": "database_query_language"}, {"score": 0.003334309053314909, "phrase": "complex_objects"}, {"score": 0.0031991799574455555, "phrase": "data_items"}, {"score": 0.0030414140732789186, "phrase": "typing_system"}, {"score": 0.0029181203386806683, "phrase": "hierarchical_manner"}, {"score": 0.002825681384008326, "phrase": "refinement_rules"}, {"score": 0.00257735013358606, "phrase": "complex_scientific_data_collection"}, {"score": 0.002530359917257626, "phrase": "input_node"}, {"score": 0.0024389277933858054, "phrase": "output_node"}, {"score": 0.0023834640793589414, "phrase": "output_data_collection"}, {"score": 0.002286781334850213, "phrase": "\"debris_data"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["DFL", " Petri net", " workflow system", " dataflow", " scientific workflow", " nested relational calculus"], "paper_abstract": "In this paper we propose DFL-a formal, graphical workflow language for dataflows, i.e., workflows where large amounts of complex data are manipulated, and the structure of the manipulated data is reflected in the structure of the workflow. It is a common extension of (1) Petri nets, which are responsible for the organization of the processing tasks, and (2) nested relational calculus, which is a database query language over complex objects, and is responsible for handling collections of data items (in particular, for iteration) and for the typing system. We demonstrate that dataflows constructed in a hierarchical manner, according to a set of refinement rules we propose, are semi-sound, i.e., initiated with a single token (which may represent a complex scientific data collection) in the input node, terminate with a single token in the output node (which represents the output data collection). In particular they never leave any \"debris data\" behind and an output is always eventually computed regardless of how the computation proceeds. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "DFL: A dataflow language based on Petri nets and nested relational calculus", "paper_id": "WOS:000253621500001"}