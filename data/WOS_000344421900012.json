{"auto_keywords": [{"score": 0.0444495685591394, "phrase": "ct_test_generation"}, {"score": 0.031471905114092626, "phrase": "test_case"}, {"score": 0.00481495049065317, "phrase": "combinatorial_test_suite"}, {"score": 0.00477513738640734, "phrase": "combinatorial_optimization"}, {"score": 0.004735651915966323, "phrase": "combinatorial_testing"}, {"score": 0.004619134710069517, "phrase": "effective_technique"}, {"score": 0.004524220016675624, "phrase": "multiple_configurable_parameters"}, {"score": 0.004394592555435104, "phrase": "interaction_faults"}, {"score": 0.004322186889256224, "phrase": "combination_effect"}, {"score": 0.0040949726088047225, "phrase": "t-way_parameter_combinations"}, {"score": 0.0039446780026489905, "phrase": "practical_ct_usage_scenarios"}, {"score": 0.003737234606207431, "phrase": "existing_constraint-handling_methods"}, {"score": 0.0032044314332538154, "phrase": "pseudo-boolean_optimization"}, {"score": 0.003151572886432253, "phrase": "new_test_case"}, {"score": 0.003010651173285521, "phrase": "maximum_coverage"}, {"score": 0.002900037689072025, "phrase": "possible_balance_point"}, {"score": 0.00284034646798833, "phrase": "approximation_ratio"}, {"score": 0.0027020387992490367, "phrase": "new_self-adaptive_mechanism"}, {"score": 0.002657445352746803, "phrase": "optimization_process"}, {"score": 0.002624482632439123, "phrase": "proper_time"}, {"score": 0.002528021281333922, "phrase": "extensive_experimental_results"}, {"score": 0.0024554476124885806, "phrase": "existing_benchmarks"}, {"score": 0.0024149139610228887, "phrase": "constraint-handling_ability"}, {"score": 0.0023750478314945303, "phrase": "existing_approaches"}, {"score": 0.0021049977753042253, "phrase": "normal_constraints"}], "paper_keywords": ["Combinatorial testing", " Test generation", " Combinatorial optimization"], "paper_abstract": "Combinatorial testing (CT) is an effective technique to test software with multiple configurable parameters. It is used to detect interaction faults caused by the combination effect of parameters. CT test generation aims at generating covering arrays that cover all t-way parameter combinations, where t is a given covering strength. In practical CT usage scenarios, there are usually constraints between parameters, and the performance of existing constraint-handling methods degrades fast when the number of constraints increases. The contributions of this paper are (1) we propose a new one-test-at-a-time algorithm for CT test generation, which uses pseudo-Boolean optimization to generate each new test case; (2) we have found that pursuing the maximum coverage for each test case is uneconomic, and a possible balance point is to keep the approximation ratio in [0.8,0.9]; (3) we propose a new self-adaptive mechanism to stop the optimization process at a proper time when generating each test case; (4) extensive experimental results show that our algorithm works fine on existing benchmarks, and the constraint-handling ability is better than existing approaches when the number of constraints is large; and (5) we propose a method to translate shielding parameters (a common type of constraints) into normal constraints. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Generating combinatorial test suite using combinatorial optimization", "paper_id": "WOS:000344421900012"}