{"auto_keywords": [{"score": 0.05007326307775766, "phrase": "concurrent_applications"}, {"score": 0.04918357102136355, "phrase": "java"}, {"score": 0.04786447927919519, "phrase": "concurrent_programming"}, {"score": 0.004485735417293941, "phrase": "mainstream_programming"}, {"score": 0.0044435677598780796, "phrase": "software_engineering"}, {"score": 0.004278807087784626, "phrase": "widespread_availability"}, {"score": 0.0041987222897385676, "phrase": "internet-based_systems"}, {"score": 0.004043003243656031, "phrase": "mainstream_object-oriented_programming_languages"}, {"score": 0.0039114753002009485, "phrase": "main_example_-_with_libraries"}, {"score": 0.0038746849003761024, "phrase": "fine-grained_mechanisms"}, {"score": 0.003678414118674967, "phrase": "efficient_programs"}, {"score": 0.0036095259108028105, "phrase": "fine-grained_support"}, {"score": 0.0035587046945919788, "phrase": "main_research_goal"}, {"score": 0.003299460925313939, "phrase": "pure_object-oriented_abstractions"}, {"score": 0.0032529910932231924, "phrase": "large_component-based_programs"}, {"score": 0.002931569771634119, "phrase": "agent-oriented_abstractions"}, {"score": 0.00266693888510356, "phrase": "application_programming_interface"}, {"score": 0.0026418708274296514, "phrase": "api"}, {"score": 0.0026045914281028473, "phrase": "annotation_framework"}, {"score": 0.0025678829712650437, "phrase": "java_programmers"}, {"score": 0.0025316905609748135, "phrase": "simpa_applications"}, {"score": 0.002449208093757498, "phrase": "main_features"}, {"score": 0.0023806459272452353, "phrase": "software_engineering_point"}, {"score": 0.0023030731312573246, "phrase": "programming_examples"}, {"score": 0.0022280223816618736, "phrase": "operational_semantics"}, {"score": 0.002196609505859369, "phrase": "main_aspects"}, {"score": 0.0021656385587456952, "phrase": "programming_model"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Agent-oriented programming", " Concurrent programming", " Agents and artifacts", " Multi-agent systems", " Core calculi"], "paper_abstract": "More and more aspects of concurrency and concurrent programming are becoming part of mainstream programming and software engineering, due to several factors such as the widespread availability of multi-core/parallel architectures and Internet-based systems. This leads to the extension of mainstream object-oriented programming languages and platforms - Java is a main example - with libraries providing fine-grained mechanisms and idioms to support concurrent programming, in particular for building efficient programs. Besides this fine-grained support, a main research goal in this context is to devise higher-level, coarse-grained abstractions that would help building concurrent programs, as pure object-oriented abstractions help building large component-based programs. To this end, in this paper we present simpA, a Java-based framework that provides programmers with agent-oriented abstractions on top of the basic 00 layer, as a means to organize and structure concurrent applications. We first describe the application programming interface (API) and annotation framework provided to Java programmers for building simpA applications, and then we discuss the main features of the approach from a software engineering point of view, by showing some programming examples. Finally, we define an operational semantics formalizing the main aspects of this programming model. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "simpA: An agent-oriented approach for programming concurrent applications on top of Java", "paper_id": "WOS:000284521500004"}