{"auto_keywords": [{"score": 0.023859443303136826, "phrase": "pspace"}, {"score": 0.004634254474150777, "phrase": "leading_technique"}, {"score": 0.004494570360108983, "phrase": "large_state_spaces"}, {"score": 0.004163427731140163, "phrase": "original_system"}, {"score": 0.0034911335714333507, "phrase": "abstraction_function"}, {"score": 0.0032336801561165113, "phrase": "abstract_automaton"}, {"score": 0.003018196463874475, "phrase": "original_automaton"}, {"score": 0.00290473242917264, "phrase": "abstraction_functions"}, {"score": 0.002629238854352447, "phrase": "exponential_blow-up"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Formal methods", " Abstraction", " Deterministic finite automata"], "paper_abstract": "The Abstraction is a leading technique for coping with large state spaces. Abstraction over-approximates the transitions of the original system or the automaton that models it and may introduce nondeterminism. In applications where determinism is essential, we say that an abstraction function is helpful if, after determining and minimizing the abstract automaton, we end up with fewer states than the original automaton. We show that abstraction functions are not always helpful: in fact, they may introduce an exponential blow-up. We study the problem of deciding whether a given abstraction function is helpful for a given deterministic automaton and show that it is PSPACE-complete. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "When does abstraction help?", "paper_id": "WOS:000326906900011"}