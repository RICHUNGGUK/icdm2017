{"auto_keywords": [{"score": 0.036537166725723366, "phrase": "memshepherd"}, {"score": 0.023028833773630644, "phrase": "memory_bugs"}, {"score": 0.007017362483890734, "phrase": "software_execution"}, {"score": 0.00481495049065317, "phrase": "software_vulnerabilities"}, {"score": 0.004568871736067739, "phrase": "unsafe_languages"}, {"score": 0.004392565073466714, "phrase": "stack-based_buffer_overflow"}, {"score": 0.004278807087784626, "phrase": "dangling_pointer"}, {"score": 0.00406001734835979, "phrase": "proposed_solutions"}, {"score": 0.004007083686875716, "phrase": "heap_related_bugs"}, {"score": 0.003920384090110374, "phrase": "existing_solutions"}, {"score": 0.0038692638652494697, "phrase": "vulnerable_program"}, {"score": 0.003818807671883534, "phrase": "stack-based_buffer_overflow_attempt"}, {"score": 0.0037361664435836845, "phrase": "comprehensive_solution"}, {"score": 0.003108735847242537, "phrase": "stack-based_buffers"}, {"score": 0.003068166587650604, "phrase": "heap_space"}, {"score": 0.0029755458462182565, "phrase": "stack_memory_problem"}, {"score": 0.002936709606809639, "phrase": "heap_memory_problem"}, {"score": 0.002453934333239467, "phrase": "linux_prototype"}, {"score": 0.002228412982799273, "phrase": "erroneous_execution"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software reliability", " memory bugs", " fault tolerance"], "paper_abstract": "Among all software vulnerabilities, memory bugs are most common and dangerous. Programs written in unsafe languages such as C and C++ are vulnerable to stack-based buffer overflow, heap buffer overflow, dangling pointer, and double free. Although there are a number of proposed solutions to tolerate heap related bugs, most of the existing solutions terminates the vulnerable program after a stack-based buffer overflow attempt. There is no comprehensive solution to actively tolerate all of the four kinds of bugs mentioned previously currently. This paper presents Memshepherd, a system that can probabilistically prevent software from both stack and heap memory bugs and guarantee soundness of the software execution. It dynamically reallocates stack-based buffers in the heap space during software execution, thus transforms a stack memory problem into a heap memory problem. By adaptively sizing buffers to be M times of their defined size and randomly placing them, Memshepherd keeps the buffers far from each other. When a buffer is to be deallocated, Memshepherd checks invalid and double frees. A Linux prototype is implemented and tested against four kinds of memory bugs. The experiment results prove that Memshepherd is effective in eliminating crashes, erroneous execution, as well as security vulnerability. Copyright (C) 2013 John Wiley & Sons, Ltd.", "paper_title": "Memshepherd: comprehensive memory bug fault-tolerance system", "paper_id": "WOS:000341134900010"}