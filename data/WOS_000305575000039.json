{"auto_keywords": [{"score": 0.04070303364753307, "phrase": "total_amount"}, {"score": 0.03796929968101634, "phrase": "original_data_object"}, {"score": 0.03541239344095569, "phrase": "successful_recovery"}, {"score": 0.00481495049065317, "phrase": "distributed_storage_allocations"}, {"score": 0.004576253356889219, "phrase": "distributed_storage_system"}, {"score": 0.004537631845923196, "phrase": "maximum_reliability"}, {"score": 0.0044237033788643715, "phrase": "single_data_object"}, {"score": 0.004204320052179726, "phrase": "storage_nodes"}, {"score": 0.0040298010803060495, "phrase": "coded_data"}, {"score": 0.0037021153060910164, "phrase": "data_collector"}, {"score": 0.003503497128638099, "phrase": "random_subset"}, {"score": 0.0033865859510157238, "phrase": "appropriate_code"}, {"score": 0.0030586736004285216, "phrase": "optimal_storage_allocation"}, {"score": 0.002944039482467119, "phrase": "optimization_problem"}, {"score": 0.002704403349815203, "phrase": "different_allocation_models"}, {"score": 0.0026815368507715, "phrase": "access_models"}, {"score": 0.0026475981474045414, "phrase": "optimal_allocation"}, {"score": 0.0026140878612307536, "phrase": "optimal_symmetric_allocation"}, {"score": 0.0025591748412278174, "phrase": "nonempty_nodes"}, {"score": 0.002360796860462937, "phrase": "optimal_allocations"}, {"score": 0.0023309080951251335, "phrase": "nonintuitive_structure"}, {"score": 0.0021049977753042253, "phrase": "reliable_storage"}], "paper_keywords": ["Data storage systems", " distributed storage", " network coding", " reliability", " storage allocation"], "paper_abstract": "We examine the problem of allocating a given total storage budget in a distributed storage system for maximum reliability. A source has a single data object that is to be coded and stored over a set of storage nodes; it is allowed to store any amount of coded data in each node, as long as the total amount of storage used does not exceed the given budget. A data collector subsequently attempts to recover the original data object by accessing only the data stored in a random subset of the nodes. By using an appropriate code, successful recovery can be achieved whenever the total amount of data accessed is at least the size of the original data object. The goal is to find an optimal storage allocation that maximizes the probability of successful recovery. This optimization problem is challenging in general because of its combinatorial nature, despite its simple formulation. We study several variations of the problem, assuming different allocation models and access models. The optimal allocation and the optimal symmetric allocation (in which all nonempty nodes store the same amount of data) are determined for a variety of cases. Our results indicate that the optimal allocations often have nonintuitive structure and are difficult to specify. We also show that depending on the circumstances, coding may or may not be beneficial for reliable storage.", "paper_title": "Distributed Storage Allocations", "paper_id": "WOS:000305575000039"}