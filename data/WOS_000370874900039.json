{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "statically_bounded_region_serializability"}, {"score": 0.004169394481182493, "phrase": "shared-memory_programs"}, {"score": 0.004016594765266821, "phrase": "intentional_and_unintentional_data_races"}, {"score": 0.003910879154656061, "phrase": "sequential_consistency"}, {"score": 0.0034963129868796033, "phrase": "existing_approaches"}, {"score": 0.0034407781868385423, "phrase": "stronger_guarantees"}, {"score": 0.003404244237372396, "phrase": "racy_executions"}, {"score": 0.0033680968918579717, "phrase": "high_run-time_overhead"}, {"score": 0.0032969458013463807, "phrase": "custom_hardware"}, {"score": 0.003159106878239524, "phrase": "stronger_semantics"}, {"score": 0.0031255543155487234, "phrase": "racy_programs"}, {"score": 0.0030758904011907533, "phrase": "relatively_good_performance"}, {"score": 0.00304321897427383, "phrase": "commodity_systems"}, {"score": 0.002994859407965545, "phrase": "novel_hybrid_static-dynamic_analysis"}, {"score": 0.0029630461161780203, "phrase": "enforser"}, {"score": 0.002931569771634119, "phrase": "end-to-end_support"}, {"score": 0.0026486862281576086, "phrase": "weak_memory_models"}, {"score": 0.00256514094268541, "phrase": "sc._enforser"}, {"score": 0.002537880772794665, "phrase": "static_compiler_analysis"}, {"score": 0.0023549822490693344, "phrase": "run_time"}, {"score": 0.0023051837161137674, "phrase": "commodity_support"}, {"score": 0.0022685255265595624, "phrase": "reasonably_strong_memory_model"}, {"score": 0.0021049977753042253, "phrase": "execution_model"}], "paper_keywords": ["Dynamic analysis", " static analysis", " region serializability", " memory models", " atomicity", " synchronization"], "paper_abstract": "Data races are common. They are difficult to detect, avoid, or eliminate, and programmers sometimes introduce them intentionally. However, shared-memory programs with data races have unexpected, erroneous behaviors. Intentional and unintentional data races lead to atomicity and sequential consistency (SC) violations, and they make it more difficult to understand, test, and verify software. Existing approaches for providing stronger guarantees for racy executions add high run-time overhead and/or rely on custom hardware. This paper shows how to provide stronger semantics for racy programs while providing relatively good performance on commodity systems. A novel hybrid static-dynamic analysis called EnfoRSer provides end-to-end support for a memory model called statically bounded region serializability (SBRS) that is not only stronger than weak memory models but is strictly stronger than SC. EnfoRSer uses static compiler analysis to transform regions, and dynamic analysis to detect and resolve conflicts at run time. By demonstrating commodity support for a reasonably strong memory model with reasonable overheads, we show its potential as an always-on execution model.", "paper_title": "Hybrid Static-Dynamic Analysis for Statically Bounded Region Serializability", "paper_id": "WOS:000370874900039"}