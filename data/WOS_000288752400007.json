{"auto_keywords": [{"score": 0.03679218229665449, "phrase": "top-k_query"}, {"score": 0.015719716506582538, "phrase": "pareto-based_dominant_graph"}, {"score": 0.010376857407184024, "phrase": "record_set"}, {"score": 0.004689462599037994, "phrase": "answer_top-k_queries"}, {"score": 0.0046192222897398685, "phrase": "record_set_d"}, {"score": 0.004567230180529598, "phrase": "query_score_function"}, {"score": 0.004414723336530117, "phrase": "k_records"}, {"score": 0.004315879542755464, "phrase": "function_f"}, {"score": 0.00409372989087314, "phrase": "intrinsic_connection"}, {"score": 0.004062937864702115, "phrase": "top-k_queries"}, {"score": 0.0038392331564122387, "phrase": "efficient_layer-based_indexing_structure"}, {"score": 0.0036969566358089644, "phrase": "query_efficiency"}, {"score": 0.0036415910943271793, "phrase": "dg"}, {"score": 0.003546513036085932, "phrase": "dominant_relationship"}, {"score": 0.0034279721355412285, "phrase": "graph_traversal_problem"}, {"score": 0.0032884384364324395, "phrase": "search_space"}, {"score": 0.0032026066791743866, "phrase": "retrieved_records"}, {"score": 0.0030033417337933625, "phrase": "skyline_points"}, {"score": 0.002837811982066224, "phrase": "cluster-based_storage_schema"}, {"score": 0.0027741761880779535, "phrase": "traveler_algorithm"}, {"score": 0.0027119634978446895, "phrase": "cost_estimation_methods"}, {"score": 0.0026411384812121503, "phrase": "cost_analysis"}, {"score": 0.002591681512611419, "phrase": "optimization_technique"}, {"score": 0.002514464610980629, "phrase": "search_efficiency"}, {"score": 0.0024211628058125067, "phrase": "high-dimension_record_set"}, {"score": 0.0023758152068732025, "phrase": "n-way_traveler_algorithm"}, {"score": 0.0023225152126545067, "phrase": "dg_maintenance"}, {"score": 0.002253299769886694, "phrase": "\"deletion\"_algorithms"}, {"score": 0.0022110892229209407, "phrase": "extensive_experiments"}, {"score": 0.002169667676959813, "phrase": "significant_improvement"}, {"score": 0.002120982646893519, "phrase": "classical_and_state_art"}, {"score": 0.0021049977753042253, "phrase": "top-k_algorithms"}], "paper_keywords": ["Top-k query", " database", " algorithms"], "paper_abstract": "Given a record set D and a query score function F, a top-k query returns k records from D, whose values of function F on their attributes are the highest. In this paper, we investigate the intrinsic connection between top-k queries and dominant relationships between records, and based on which, we propose an efficient layer-based indexing structure, Pareto-Based Dominant Graph (DG), to improve the query efficiency. Specifically, DG is built offline to express the dominant relationship between records and top-k query is implemented as a graph traversal problem, i.e., Traveler algorithm. We prove theoretically that the size of search space (that is the number of retrieved records from the record set to answer top-k query) in our algorithm is directly related to the cardinality of skyline points in the record set (see Theorem 3). Considering I/O cost, we propose cluster-based storage schema to reduce I/O cost in Traveler algorithm. We also propose the cost estimation methods in this paper. Based on cost analysis, we propose an optimization technique, pseudorecord, to further improve the search efficiency. In order to handle the top-k query in the high-dimension record set, we also propose N-Way Traveler algorithm. In order to handle DG maintenance efficiently, we propose \"Insertion\" and \"Deletion\" algorithms for DG. Finally, extensive experiments demonstrate that our proposed methods have significant improvement over its counterparts, including both classical and state art of top-k algorithms.", "paper_title": "Pareto-Based Dominant Graph: An Efficient Indexing Structure to Answer Top-K Queries", "paper_id": "WOS:000288752400007"}