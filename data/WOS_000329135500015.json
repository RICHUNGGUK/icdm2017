{"auto_keywords": [{"score": 0.030247666796103634, "phrase": "dvfs"}, {"score": 0.014692708056000816, "phrase": "embedded_platforms"}, {"score": 0.013052173941537341, "phrase": "key_challenge"}, {"score": 0.012964091769915165, "phrase": "application_developers"}, {"score": 0.00859801765356536, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "power-aware_dynamic_memory_management"}, {"score": 0.004669254965563445, "phrase": "multicore_platforms"}, {"score": 0.004621671570727774, "phrase": "prevalent_solutions"}, {"score": 0.004590217765551337, "phrase": "modern_embedded_systems"}, {"score": 0.004436116555817464, "phrase": "even_more_increased_processor_core_count"}, {"score": 0.00439089854433895, "phrase": "many-core_platforms"}, {"score": 0.004100952337610039, "phrase": "available_resources"}, {"score": 0.004031495920060339, "phrase": "efficient_memory_utilization"}, {"score": 0.0038695436922618876, "phrase": "scarce_resource"}, {"score": 0.003803991592917943, "phrase": "system's_bottleneck"}, {"score": 0.003688773272422118, "phrase": "better_memory_footprint_utilization"}, {"score": 0.003540539868937462, "phrase": "dynamic_memory"}, {"score": 0.0033406481167452436, "phrase": "overall_power_consumption"}, {"score": 0.0031198362555601377, "phrase": "dynamic_voltage"}, {"score": 0.0030985717040741875, "phrase": "frequency_scaling"}, {"score": 0.003004655258223784, "phrase": "application's_computational_demands"}, {"score": 0.002873986510042009, "phrase": "dynamic_memory_management_techniques"}, {"score": 0.002693134880651768, "phrase": "clock_frequency"}, {"score": 0.0026747708876640377, "phrase": "voltage_supply"}, {"score": 0.002647458797373923, "phrase": "heap_performance"}, {"score": 0.002567180189640976, "phrase": "distributed_shared-memory_many-core_platform"}, {"score": 0.0024893297856666808, "phrase": "network-on-chip_infrastructure"}, {"score": 0.002463906556781983, "phrase": "dvfs._experimental"}, {"score": 0.0024055884143050037, "phrase": "proposed_method"}, {"score": 0.002340623433237658, "phrase": "power_consumption"}, {"score": 0.002324657548285756, "phrase": "dynamic_memory_management"}, {"score": 0.002170854875902186, "phrase": "developed_method"}, {"score": 0.0021560445153869985, "phrase": "heap_fragmentation-aware_dynamic_memory_managers"}, {"score": 0.002126725585391261, "phrase": "low_heap_fragmentation_values"}, {"score": 0.0021049977753042253, "phrase": "low_power_consumption"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Dynamic memory management", " dynamic voltage and frequency scaling", " many-core system-on-chip", " performance-energy trade-offs"], "paper_abstract": "Today multicore platforms are already prevalent solutions for modern embedded systems. In the future, embedded platforms will have an even more increased processor core count, composing many-core platforms. In addition, applications are becoming more complex and dynamic and try to efficiently utilize the amount of available resources on the embedded platforms. Efficient memory utilization is a key challenge for application developers, especially since memory is a scarce resource and often becomes the system's bottleneck. To cope with this dynamism and achieve better memory footprint utilization (low memory fragmentation) application developers resort to the usage of dynamic memory (heap) management techniques, by allocating and deallocating data at runtime. Moreover, overall power consumption is another key challenge that needs to be taken into consideration. Towards this, designers employ the usage of Dynamic Voltage and Frequency Scaling (DVFS) mechanisms, adapting to the application's computational demands at runtime. In this article, we propose the combination of dynamic memory management techniques with DVFS ones. This is performed by integrating, within the memory manager, runtime monitoring mechanisms that steer the DVFS mechanisms to adjust clock frequency and voltage supply based on heap performance. The proposed approach has been evaluated on a distributed shared-memory many-core platform composed of multiple LEON3 processors interconnected by a Network-on-Chip infrastructure, supporting DVFS. Experimental results show that by using the proposed method for monitoring and applying DVFS mechanisms the power consumption concerning dynamic memory management was reduced by approximately 37%. In addition we present the trade-offs the proposed approach. Last, by combining the developed method with heap fragmentation-aware dynamic memory managers, we achieve low heap fragmentation values combined with low power consumption.", "paper_title": "Power-Aware Dynamic Memory Management on Many-Core Platforms Utilizing DVFS", "paper_id": "WOS:000329135500015"}