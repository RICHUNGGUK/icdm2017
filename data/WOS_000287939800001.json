{"auto_keywords": [{"score": 0.030721872186812178, "phrase": "mpi_implementer"}, {"score": 0.004605748839642513, "phrase": "mpi_process"}, {"score": 0.004544770921520536, "phrase": "processing_elements"}, {"score": 0.004444921827311577, "phrase": "communication_characteristics"}, {"score": 0.004289686492089576, "phrase": "underlying_systems"}, {"score": 0.004232875294230749, "phrase": "mpi_process_topology_mechanism"}, {"score": 0.004176813329075736, "phrase": "mpi_implementation"}, {"score": 0.004139850082354509, "phrase": "rerank_processes"}, {"score": 0.004066898031169742, "phrase": "new_communicator"}, {"score": 0.004013025478863664, "phrase": "user-supplied_information"}, {"score": 0.003959863717046575, "phrase": "application_communication_pattern"}, {"score": 0.0038386641411043056, "phrase": "mpi"}, {"score": 0.003770869401884267, "phrase": "process_topology_mechanism"}, {"score": 0.003687960013746783, "phrase": "new_interfaces"}, {"score": 0.0036229421570951807, "phrase": "informative_user-specification"}, {"score": 0.0035118972210075633, "phrase": "relatively_static_communication_patterns"}, {"score": 0.0032706520949775065, "phrase": "mpi_library"}, {"score": 0.0032416819339366712, "phrase": "reference_implementations"}, {"score": 0.003198705576491802, "phrase": "new_mechanism"}, {"score": 0.003032405563826263, "phrase": "essentially_no_cost"}, {"score": 0.0029789104204803137, "phrase": "non-trivial_implementations"}, {"score": 0.0027741761880779535, "phrase": "application_programmers"}, {"score": 0.0027131212233443137, "phrase": "new_process_topology_interfaces"}, {"score": 0.00258347644721642, "phrase": "enhanced_interfaces"}, {"score": 0.002493087803216478, "phrase": "straightforward_implementation"}, {"score": 0.0023845255359681143, "phrase": "main_issues"}, {"score": 0.002352886041381761, "phrase": "efficient_implementation"}, {"score": 0.0022806798371116698, "phrase": "optimization_problems"}, {"score": 0.0021716540012278744, "phrase": "good_mpi_library"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["message passing interface", " MPI", " MPI 2.2", " MPI forum", " process topologies", " process mapping", " communication patterns", " reordering"], "paper_abstract": "The Message-passing Interface (MPI) standard provides basic means for adaptations of the mapping of MPI process ranks to processing elements to better match the communication characteristics of applications to the capabilities of the underlying systems. The MPI process topology mechanism enables the MPI implementation to rerank processes by creating a new communicator that reflects user-supplied information about the application communication pattern. With the newly released MPI 2.2 version of the MPI standard, the process topology mechanism has been enhanced with new interfaces for scalable and informative user-specification of communication patterns. Applications with relatively static communication patterns are encouraged to take advantage of the mechanism whenever convenient by specifying their communication pattern to the MPI library. Reference implementations of the new mechanism can be expected to be readily available (and come at essentially no cost), but non-trivial implementations pose challenging problems for the MPI implementer. This paper is first and foremost addressed to application programmers wanting to use the new process topology interfaces. It explains the use and the motivation for the enhanced interfaces and the advantages gained even with a straightforward implementation. For the MPI implementer, the paper summarizes the main issues in the efficient implementation of the interface and explains the optimization problems that need to be (approximately) solved by a good MPI library. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "The scalable process topology interface of MPI 2.2", "paper_id": "WOS:000287939800001"}