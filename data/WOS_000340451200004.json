{"auto_keywords": [{"score": 0.04550863708222468, "phrase": "modular_arithmetic"}, {"score": 0.00481495049065317, "phrase": "flexible_architecture"}, {"score": 0.0047732596509542135, "phrase": "modular_arithmetic_hardware_accelerators"}, {"score": 0.0047113960612140335, "phrase": "rns._modular_arithmetic"}, {"score": 0.004650330504968421, "phrase": "building_block"}, {"score": 0.0044718206943536514, "phrase": "embedded_systems"}, {"score": 0.004244375827831527, "phrase": "algorithmic_modifications"}, {"score": 0.004099183062034004, "phrase": "target_arithmetic"}, {"score": 0.003958937342925219, "phrase": "parallel_devices"}, {"score": 0.003806866174028117, "phrase": "data-level_parallelism"}, {"score": 0.003504670673093149, "phrase": "generic_algorithms"}, {"score": 0.0034742854447532678, "phrase": "full_rns-based_implementations"}, {"score": 0.0033553473725594003, "phrase": "suitable_hardware_architectures"}, {"score": 0.0032546105164772995, "phrase": "different_demands"}, {"score": 0.0030888830649190282, "phrase": "scalability_features"}, {"score": 0.003048782877550259, "phrase": "parallel_implementation"}, {"score": 0.002855934865505357, "phrase": "systematic_mapping"}, {"score": 0.002818850283787242, "phrase": "generic_modular_arithmetic_algorithm"}, {"score": 0.002663620639539737, "phrase": "high_level_synthesis_step"}, {"score": 0.0024734216457463617, "phrase": "altera"}, {"score": 0.0023371689326096476, "phrase": "modular_exponentiation"}, {"score": 0.00224727151180659, "phrase": "rsa"}, {"score": 0.0021049977753042253, "phrase": "fastest_hardware_implementations"}], "paper_keywords": ["Residue number system (RNS)", " Modular arithmetic", " Cryptography", " Embedded systems", " Electronic design automation (EDA)"], "paper_abstract": "Modular arithmetic is a building block for a variety of applications potentially supported on embedded systems. An approach to turn modular arithmetic more efficient is to identify algorithmic modifications that would enhance the parallelization of the target arithmetic in order to exploit the properties of parallel devices and platforms. The Residue Number System (RNS) introduces data-level parallelism, enabling the parallelization even for algorithms based on modular arithmetic with several data dependencies. However, the mapping of generic algorithms to full RNS-based implementations can be complex and the utilization of suitable hardware architectures that are scalable and adaptable to different demands is required. This paper proposes and discusses an architecture with scalability features for the parallel implementation of algorithms relying on modular arithmetic fully supported by the Residue Number System (RNS). The systematic mapping of a generic modular arithmetic algorithm to the architecture is presented. It can be applied as a high level synthesis step for an Application Specific Integrated Circuit (ASIC) or Field Programmable Gate Array (FPGA) design flow targeting modular arithmetic algorithms. An implementation with the Xilinx Virtex 4 and Altera Stratix II Field Programmable Gate Array (FPGA) technologies of the modular exponentiation and Elliptic Curve (EC) point multiplication, used in the Rivest-Shamir-Adleman (RSA) and (EC) cryptographic algorithms, suggests latency results in the same order of magnitude of the fastest hardware implementations of these operations known to date.", "paper_title": "A Flexible Architecture for Modular Arithmetic Hardware Accelerators based on RNS", "paper_id": "WOS:000340451200004"}