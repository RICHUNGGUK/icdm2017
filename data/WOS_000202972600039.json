{"auto_keywords": [{"score": 0.04888938273281976, "phrase": "pointer_analysis"}, {"score": 0.043510309299986456, "phrase": "program_point"}, {"score": 0.03626735565460064, "phrase": "maybe_case"}, {"score": 0.004815218631132883, "phrase": "probabilistic"}, {"score": 0.004734853555630616, "phrase": "speculative_optimizations"}, {"score": 0.004636594774238505, "phrase": "critical_compiler_analysis"}, {"score": 0.004540365779658683, "phrase": "indirect_memory_references"}, {"score": 0.0043721365634105565, "phrase": "pointer-based_data_structures"}, {"score": 0.004317450843594688, "phrase": "conventional_pointer_analysis_deduces"}, {"score": 0.003604506544515223, "phrase": "accurate_pointer_analysis"}, {"score": 0.003370287778450475, "phrase": "recently-proposed_speculative_optimizations"}, {"score": 0.0030857431184193765, "phrase": "probabilistic_pointer_analysis"}, {"score": 0.002813307389456184, "phrase": "simple_control-flow_edge"}, {"score": 0.0027317585060414253, "phrase": "one-level_context"}, {"score": 0.0026193328696791306, "phrase": "large_programs"}, {"score": 0.0024081387633065206, "phrase": "linear_transfer_functions"}, {"score": 0.0022800613046444563, "phrase": "accurate_probabilities"}, {"score": 0.0022420373745572837, "phrase": "edge-profile_information"}, {"score": 0.002149722786728988, "phrase": "probability_information"}, {"score": 0.0021049977753042253, "phrase": "accurate_approach"}], "paper_keywords": ["algorithms", " performance", " dependence analysis", " pointer analysis", " speculative optimization"], "paper_abstract": "Pointer analysis is a critical compiler analysis used to disambiguate the indirect memory references that result from the use of pointers and pointer-based data structures. A conventional pointer analysis deduces for every pair of pointers, at any program point, whether a points-to relation between them (i) definitely exists, (ii) definitely does not exist, or (iii) maybe exists. Many compiler optimizations rely on accurate pointer analysis, and to ensure correctness cannot optimize in the maybe case. In contrast, recently-proposed speculative optimizations can aggressively exploit the maybe case, especially if the likelihood that two pointers alias can be quantified. This paper proposes a Probabilistic Pointer Analysis (PPA) algorithm that statically predicts the probability of each points-to relation at every program point. Building on simple control-flow edge profiling, our analysis is both one-level context and flow sensitive-yet can still scale to large programs including the SPEC 2000 integer benchmark suite. The key to our approach is to compute points-to probabilities through the use of linear transfer functions that are efficiently encoded as sparse matrices. We demonstrate that our analysis can provide accurate probabilities, even without edge-profile information. We also find that-even without considering probability information-our analysis provides an accurate approach to performing pointer analysis.", "paper_title": "A Probabilistic pointer analysis for speculative optimizations", "paper_id": "WOS:000202972600039"}