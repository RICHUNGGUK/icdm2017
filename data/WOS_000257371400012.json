{"auto_keywords": [{"score": 0.049188612914091503, "phrase": "gpu."}, {"score": 0.00481495049065317, "phrase": "quartic_spline_surfaces"}, {"score": 0.004608539830653038, "phrase": "novel_gpu-based_algorithm"}, {"score": 0.004551199992546761, "phrase": "high-quality_rendering"}, {"score": 0.004494570360108983, "phrase": "bivariate_spline_surfaces"}, {"score": 0.004410938507689426, "phrase": "essential_difference"}, {"score": 0.004328856052035968, "phrase": "known_methods"}, {"score": 0.004248294537944227, "phrase": "graph_surfaces"}, {"score": 0.004117329555194574, "phrase": "quartic_smooth_splines"}, {"score": 0.003990385737207714, "phrase": "triangular_meshes"}, {"score": 0.0037246656582642272, "phrase": "intermediate_tessellation"}, {"score": 0.0036324746826127997, "phrase": "ray-surface_intersections"}, {"score": 0.003542557455905503, "phrase": "quartic_equations"}, {"score": 0.003306559295382181, "phrase": "bernstein-bezier_techniques"}, {"score": 0.0032449610741097992, "phrase": "phong_illumination"}, {"score": 0.0031845067058084613, "phrase": "gpu._inaccurate_shading"}, {"score": 0.0030862341714020694, "phrase": "triangular_tesselated_surfaces"}, {"score": 0.002477998427152547, "phrase": "approximation_properties"}, {"score": 0.0022273034991008326, "phrase": "multiple_light_sources"}, {"score": 0.0021995257343837547, "phrase": "environment_mapping"}, {"score": 0.0021049977753042253, "phrase": "highest_quality"}], "paper_keywords": ["graph surfaces", " spline approximation", " GPU-based rendering", " ray tracing"], "paper_abstract": "We present a novel GPU-based algorithm for high-quality rendering of bivariate spline surfaces. An essential difference to the known methods for rendering graph surfaces is that we use quartic smooth splines on triangulations rather than triangular meshes. Our rendering approach is direct since we do not use an intermediate tessellation but rather compute ray-surface intersections ( by solving quartic equations numerically) as well as surface normals ( by using Bernstein-Bezier techniques) for Phong illumination on the GPU. Inaccurate shading and artifacts appearing for triangular tesselated surfaces are completely avoided. Level of detail is automatic since all computations are done on a per fragment basis. We compare three different ( quasi-) interpolating schemes for uniformly sampled gridded data, which differ in the smoothness and the approximation properties of the splines. The results show that our hardware-based renderer leads to visualizations ( including texturing, multiple light sources, environment mapping, and so forth) of highest quality.", "paper_title": "High-quality rendering of quartic spline surfaces on the GPU", "paper_id": "WOS:000257371400012"}