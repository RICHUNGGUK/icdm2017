{"auto_keywords": [{"score": 0.03685259410949235, "phrase": "qr_factorization"}, {"score": 0.00481495049065317, "phrase": "multicore_architectures"}, {"score": 0.004740009255053372, "phrase": "multicore_systems"}, {"score": 0.004569630374630379, "phrase": "high-performance_computing_world"}, {"score": 0.0043367547691560175, "phrase": "new_algorithms"}, {"score": 0.004072851768196397, "phrase": "architectural_features"}, {"score": 0.0040094142308666975, "phrase": "new_processors"}, {"score": 0.00396767023935381, "phrase": "fine-grain_parallelism"}, {"score": 0.003905864553426306, "phrase": "major_requirement"}, {"score": 0.003785115566529808, "phrase": "loose_synchronization"}, {"score": 0.0037261429556468217, "phrase": "parallel_execution"}, {"score": 0.003303412571939192, "phrase": "small_tasks"}, {"score": 0.003234934827553253, "phrase": "square_blocks"}, {"score": 0.0027645030021576926, "phrase": "computational_resources"}, {"score": 0.0026649432435828842, "phrase": "out-of-order_execution"}, {"score": 0.0025156683465194967, "phrase": "intrinsically_sequential_tasks"}, {"score": 0.002450602177683068, "phrase": "performance_comparisons"}, {"score": 0.002387214876538434, "phrase": "lapack_algorithm"}, {"score": 0.002218299213266519, "phrase": "blas_operations"}, {"score": 0.002183684303511462, "phrase": "vendor_implementations"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multicore", " linear algebra", " QR factorization"], "paper_abstract": "As multicore systems continue to gain ground in the high-performance computing world, linear algebra algorithms have to he reformulated or new algorithms have to he developed in order to take advantage of the architectural features on these new processors. Fine-grain parallelism becomes a major requirement and introduces the necessity of loose synchronization in the parallel execution of an operation. This paper presents an algorithm for the QR factorization where the operations can he represented as a sequence of small tasks that operate on square blocks of data (referred to as 'tiles'). These tasks can he dynamically scheduled for execution based on the dependencies among them and on the availability of computational resources. This may result in an out-of-order execution of the tasks that will completely hide the presence of intrinsically sequential tasks in the factorization. performance comparisons are presented with the LAPACK algorithm for QR factorization where parallelism can be exploited only at the level of the BLAS operations and with vendor implementations. Copyright (E) 2008 John Wiley & Sons, Ltd.", "paper_title": "Parallel tiled QR factorization for multicore architectures", "paper_id": "WOS:000258740600004"}