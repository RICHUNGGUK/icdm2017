{"auto_keywords": [{"score": 0.048888187983039684, "phrase": "ac"}, {"score": 0.00871356047354298, "phrase": "native_languages"}, {"score": 0.004578382275810468, "phrase": "language_constructs"}, {"score": 0.0045324756541157574, "phrase": "composable_asynchronous_io"}, {"score": 0.0043753813457279404, "phrase": "traditional_synchronous_io_interfaces"}, {"score": 0.004266501496765747, "phrase": "thread_issue"}, {"score": 0.004245051445971095, "phrase": "multiple_io_requests"}, {"score": 0.003995876175614403, "phrase": "long-latency_operations"}, {"score": 0.0038379074449947067, "phrase": "traditional_asynchronous_io_interfaces"}, {"score": 0.0037423521744765075, "phrase": "sequential_style"}, {"score": 0.003594369823549604, "phrase": "multiple_threads"}, {"score": 0.003233075944817365, "phrase": "async_statement"}, {"score": 0.003152531962718477, "phrase": "io_operations"}, {"score": 0.002922705896608178, "phrase": "enclosed_async_work"}, {"score": 0.0028355237433457313, "phrase": "cancel_statement"}, {"score": 0.002764856305713066, "phrase": "unfinished_io"}, {"score": 0.002723301730223192, "phrase": "enclosing_do"}, {"score": 0.002628747284714371, "phrase": "operational_semantics"}, {"score": 0.0025892330566358503, "phrase": "core_language"}, {"score": 0.002400373755068185, "phrase": "barrelfish_research_os"}, {"score": 0.0023405257495466352, "phrase": "asynchronous_file"}, {"score": 0.0023053421704740482, "phrase": "io"}, {"score": 0.002282166507956957, "phrase": "microsoft_windows"}, {"score": 0.002202894673025544, "phrase": "comparable_performance"}, {"score": 0.002158836285985314, "phrase": "asynchronous_io"}, {"score": 0.0021049977753042253, "phrase": "simpler_programming_model"}], "paper_keywords": ["Languages", " Performance"], "paper_abstract": "This paper introduces AC, a set of language constructs for composable asynchronous IO in native languages such as C/C++. Unlike traditional synchronous IO interfaces, AC lets a thread issue multiple IO requests so that they can be serviced concurrently, and so that long-latency operations can be overlapped with computation. Unlike traditional asynchronous IO interfaces, AC retains a sequential style of programming without requiring code to use multiple threads, and without requiring code to be \"stack-ripped\" into chains of callbacks. AC provides an async statement to identify opportunities for IO operations to be issued concurrently, a do.. finish block that waits until any enclosed async work is complete, and a cancel statement that requests cancellation of unfinished IO within an enclosing do.. finish. We give an operational semantics for a core language. We describe and evaluate implementations that are integrated with message passing on the Barrelfish research OS, and integrated with asynchronous file and network IO on Microsoft Windows. We show that AC offers comparable performance to existing C/C++ interfaces for asynchronous IO, while providing a simpler programming model.", "paper_title": "AC: Composable Asynchronous IO for Native Languages", "paper_id": "WOS:000298294500053"}