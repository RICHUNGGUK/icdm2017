{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "order_execution"}, {"score": 0.04931727328027492, "phrase": "dataflow_process_networks"}, {"score": 0.004776484866276242, "phrase": "synchronous_dataflow_networks"}, {"score": 0.004681653551412616, "phrase": "convenient_formalism"}, {"score": 0.0046256566852302256, "phrase": "robust_concurrent_systems"}, {"score": 0.004461634909525319, "phrase": "software_systems"}, {"score": 0.00432070565627091, "phrase": "strictly_stream-based_execution"}, {"score": 0.004117579919425373, "phrase": "entire_execution"}, {"score": 0.004035777314816881, "phrase": "idle_nodes"}, {"score": 0.003971502222405927, "phrase": "related_techniques"}, {"score": 0.003923965929636472, "phrase": "processor_architectures"}, {"score": 0.0035350218469335573, "phrase": "input_values"}, {"score": 0.0035067452724203124, "phrase": "process_nodes"}, {"score": 0.0034647524666821614, "phrase": "otherwise_idle_processes"}, {"score": 0.0033958751452139984, "phrase": "speculated_input_values"}, {"score": 0.003301733505307784, "phrase": "speculated_inputs"}, {"score": 0.0029386456078004863, "phrase": "related_work"}, {"score": 0.0028229071631385634, "phrase": "standard_hardware"}, {"score": 0.0027778947555117243, "phrase": "broad_field"}, {"score": 0.0027556576784848207, "phrase": "multicore_processors"}, {"score": 0.0027008385562908425, "phrase": "software_implementation"}, {"score": 0.0026471070725516467, "phrase": "adapt_parameters"}, {"score": 0.002502264043067568, "phrase": "user-defined_hit_ratio"}, {"score": 0.002384422461262006, "phrase": "detailed_description"}, {"score": 0.0021049977753042253, "phrase": "average_speedup"}], "paper_keywords": ["Dataflow networks", " Multithreaded software", " Compiling", " Out-of-order", " Speculation"], "paper_abstract": "Dataflow process networks are a convenient formalism for implementing robust concurrent systems that has been successfully used for hardware and software systems in the past. However, the strictly stream-based execution limits the performance of dataflow process networks and requires to carefully balance the entire execution to avoid backpressure and idle nodes. Inspired by related techniques used in processor architectures, we already introduced in our previous work out-of-order execution of dataflow process networks. In this paper, we extend this improvement with speculation of input values for process nodes and allow otherwise idle processes to start computations with speculated input values. Clearly, outputs based on speculated inputs have to be held back until the speculation can be proved right, and have to be withdrawn in case the speculation was wrong. In contrast to related work, our approach has been implemented purely in software using standard hardware to address a broad field of multicore processors. Moreover, a software implementation allows us to dynamically adapt parameters to the needs of the application. This allows us to enforce a user-defined hit ratio of speculation that might even switch speculation off. After a detailed description of this approach and a discussion of possibilities of its implementation, we show its feasibility using a couple of benchmarks. In these benchmarks, the use of speculation achieved an average speedup of 1.2 compared to the non-speculative out-of-order execution.", "paper_title": "Evaluation of Speculation in Out-of-Order Execution of Synchronous Dataflow Networks", "paper_id": "WOS:000348118600005"}