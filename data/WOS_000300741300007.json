{"auto_keywords": [{"score": 0.04369612778237491, "phrase": "distributed_concerns"}, {"score": 0.03327620350569447, "phrase": "distributed_aspects"}, {"score": 0.015719723434116654, "phrase": "damon"}, {"score": 0.004761499348666725, "phrase": "aop"}, {"score": 0.004721789694995182, "phrase": "large-scale_scenarios"}, {"score": 0.004630423009638876, "phrase": "distributed_applications"}, {"score": 0.0046046429665581555, "phrase": "large-scale_environments"}, {"score": 0.004540816204698049, "phrase": "complex_task"}, {"score": 0.004465385614779578, "phrase": "non-functional_properties"}, {"score": 0.003916098498242888, "phrase": "current_solutions"}, {"score": 0.00389427992231721, "phrase": "adaptive_middleware_area"}, {"score": 0.003861778893236681, "phrase": "aspect-oriented_programming"}, {"score": 0.003631552048966408, "phrase": "distributed_aop_middleware"}, {"score": 0.003611313078276589, "phrase": "large-scale_development"}, {"score": 0.0035216195857272403, "phrase": "true_distributed_aspects"}, {"score": 0.003367611042980526, "phrase": "distributed_or_large-scale_scenarios"}, {"score": 0.0031845067058084583, "phrase": "distributed_composition_model"}, {"score": 0.0031140747752837826, "phrase": "necessary_features"}, {"score": 0.0030967107893195246, "phrase": "component_models"}, {"score": 0.0030708456223230616, "phrase": "distribution_facilities"}, {"score": 0.0030197596397721566, "phrase": "computational_reflection"}, {"score": 0.002952960636093331, "phrase": "recursive_and_fully_distributed_model"}, {"score": 0.0027305564928619464, "phrase": "deployment_platform"}, {"score": 0.002670137713149619, "phrase": "individual_or_grouped_hosts"}, {"score": 0.0025820004595728265, "phrase": "dynamic_aop_substrates"}, {"score": 0.0024211009463218484, "phrase": "distributed_application_development"}, {"score": 0.0023675132064088803, "phrase": "necessary_services"}, {"score": 0.002354302193867031, "phrase": "transparent_reconfiguration"}, {"score": 0.002276566401216226, "phrase": "functional_prototype"}, {"score": 0.0022324086872003985, "phrase": "planetlab_testbed"}, {"score": 0.002189105604712615, "phrase": "large-scale_scenarios_requirements"}, {"score": 0.0021586889403581518, "phrase": "solid_building_block"}, {"score": 0.0021406417439887907, "phrase": "distributed_transparent_infrastructures"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Distributed AOP", " Middleware", " Composition", " Peer-to-peer", " ADL"], "paper_abstract": "Context: The development of distributed applications in large-scale environments has always been a complex task. In order to guarantee non-functional properties like scalability or availability, developers are usually faced with the same problems over and over again. These problems can be separated in distributed concerns, as for example, distribution, load-balancing or replication, just to name a few. Nevertheless, none of the current solutions in adaptive middleware area, like Aspect-Oriented Programming (AOP), is capable of implementing these distributed concerns transparently. Objective: In this article, we present a distributed AOP middleware for large-scale development, called Damon. Its main goal is to implement true distributed aspects, which enables the use of distributed concerns in applications that were not specifically designed for distributed or large-scale scenarios. Method: Our middleware comprises two main layers: a distributed composition model and a scalable deployment platform. The distributed composition model envisages separation of distributed aspects, taking the necessary features from component models, like distribution facilities and connectors, and from computational reflection, like introspection and meta-levels. This recursive and fully distributed model provides its own Architecture Description Language (ADL), and thus allows low dependency and high cohesion among distributed aspects. Additionally, our model is built on top of a deployment platform where distributed aspects are disseminated and activated in individual or grouped hosts. This platform benefits from peer-to-peer and dynamic AOP substrates to implement its services in a decentralized, decoupled, and efficient way. Results: Therefore, our middleware solution reduces the complexity of distributed application development, managing separated functionalities, and enabling necessary services like transparent reconfiguration and deployment at runtime. Finally, we have implemented a functional prototype and we conducted several experiments using the PlanetLab testbed. Conclusion: Our distributed AOP approach fulfills the large-scale scenarios requirements, and represents a solid building block for future distributed transparent infrastructures. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Damon: A distributed AOP middleware for large-scale scenarios", "paper_id": "WOS:000300741300007"}