{"auto_keywords": [{"score": 0.028187902610404502, "phrase": "ricci"}, {"score": 0.00481495049065317, "phrase": "development_steps"}, {"score": 0.004764542405129454, "phrase": "core_ideas"}, {"score": 0.004665296491645837, "phrase": "usp_farmers_herding_team"}, {"score": 0.004452478896509317, "phrase": "rao"}, {"score": 0.004426092397211699, "phrase": "multi-agent_programming_contest"}, {"score": 0.004047141845635495, "phrase": "herding_agents"}, {"score": 0.0039006600544599537, "phrase": "maximum_number"}, {"score": 0.0034738037330064885, "phrase": "individual_agents"}, {"score": 0.0034611926428747795, "phrase": "jason"}, {"score": 0.0030772505522663612, "phrase": "coordination_strategy"}, {"score": 0.00291923164591297, "phrase": "hubner_et_al"}, {"score": 0.0025452314655691165, "phrase": "global_services"}, {"score": 0.002339246282204109, "phrase": "pure_procedural_processing"}, {"score": 0.002266364679369248, "phrase": "lower_abstraction_level"}, {"score": 0.0022471368811623174, "phrase": "hubner"}, {"score": 0.0021498955164659145, "phrase": "pre-defined_global_decisions"}, {"score": 0.0021049977753042253, "phrase": "java_classes"}], "paper_keywords": ["Multi-agent systems", " BDI agents", " Multi-agent programming", " AgentSpeak", " Jason", " Organisation specification", " MOISE(+)"], "paper_abstract": "This paper describes the development steps and core ideas used by the USP Farmers herding team, that has participated in the 2010 edition of the Multi-Agent Programming Contest (MAPC 2010). This is the third year that the competitors must design a team of herding agents, whose global goal is to lead a maximum number of cows to their own corral. As this is a very complex task and requires coordination of the team, we have developed the individual agents using the Jason (Bordini et al. 2007) interpreter for AgentSpeak(L) (Rao 1996). Moreover, the coordination strategy was defined using the MOISE (+) (Hubner et al. 2002, 2007) organizational model. We have also used the idea of artifact (Ricci et al. 2007) to develop global services, available to all the agents. Moreover, it is clear that for this contest some pure procedural processing should be developed in a lower abstraction level (Hubner et al. 2008); therefore some calculation and pre-defined global decisions were implemented by Java classes.", "paper_title": "The USP Farmers herding team", "paper_id": "WOS:000297588400007"}