{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "xqstream"}, {"score": 0.04445490561004347, "phrase": "streamtx"}, {"score": 0.042786126849983945, "phrase": "running_time"}, {"score": 0.004581162468419365, "phrase": "xml_data"}, {"score": 0.0045357787854931894, "phrase": "tuple_extraction"}, {"score": 0.004337028108577593, "phrase": "real-time_query_evaluation"}, {"score": 0.004188459638572375, "phrase": "good_performance"}, {"score": 0.003945467978172845, "phrase": "tuple_extraction_queries"}, {"score": 0.003716520760680603, "phrase": "computational_overhead"}, {"score": 0.0035891316580885665, "phrase": "twigstack"}, {"score": 0.0034146585649631692, "phrase": "stored_xml."}, {"score": 0.003264872488939969, "phrase": "non-recursive_xqstream_algorithm"}, {"score": 0.0032164136388931805, "phrase": "inefficient_recursive_calls"}, {"score": 0.0030906666356950887, "phrase": "basic_xqstream"}, {"score": 0.0029111767710750117, "phrase": "structural_relationship"}, {"score": 0.0027420820738468577, "phrase": "pattern_matching"}, {"score": 0.002701361707441567, "phrase": "performance_evaluation"}, {"score": 0.0026480044868438875, "phrase": "new_empirical_findings"}, {"score": 0.0025317627242523104, "phrase": "relational_pointer"}, {"score": 0.0024941578231560055, "phrase": "pattern_reuse_scheme"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Streaming XML", " Tuple extraction", " Relational pointer", " Pattern reuse"], "paper_abstract": "Tuple extraction from streaming XML should be cost effective for real-time query evaluation. Recently, StreamTX exhibits a good performance in terms of both running time and memory usage to support the tuple extraction queries for streaming XML. However, we empirically observe that StreamTX incurs computational overhead unnecessarily, since it builds on TwigStack, an XML query processing algorithm originally developed for stored XML. In this paper, we first design a non-recursive XQStream algorithm to handle inefficient recursive calls of StreamTX. Subsequently, we extend the basic XQStream by incorporating two novel schemes: (1) the relational pointer to efficiently and effectively evaluate the structural relationship of elements, and (2) the pattern reuse to reduce redundant path evaluations for pattern matching. The performance evaluation on various datasets provides new empirical findings. First, XQStream++, which incorporates the relational pointer and the pattern reuse scheme into XQStream, significantly outperforms the state-of-the-art algorithms in running time with a small, nearly constant memory usage. Second, the most recently released XQuery engines outperform StreamTX in running time. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "XQStream plus plus : Fast tuple extraction algorithm for streaming XML data", "paper_id": "WOS:000355050200020"}