{"auto_keywords": [{"score": 0.041562269310917936, "phrase": "java"}, {"score": 0.009179300963178164, "phrase": "multi-core_clusters"}, {"score": 0.0069984928800010705, "phrase": "collective_operation"}, {"score": 0.00481495049065317, "phrase": "efficient_java_message-passing_collectives"}, {"score": 0.004469151810727749, "phrase": "multi-core_architectures"}, {"score": 0.004425909662226326, "phrase": "continuous_increase"}, {"score": 0.004257067039134535, "phrase": "scalable_parallel_solutions"}, {"score": 0.004202223763361474, "phrase": "current_system_deployments"}, {"score": 0.004094639048362357, "phrase": "memory_architecture"}, {"score": 0.00401575464882225, "phrase": "communication_protocols"}, {"score": 0.003925633992809873, "phrase": "attractive_choice"}, {"score": 0.0038624981944755813, "phrase": "communication_middleware"}, {"score": 0.0037635782112965662, "phrase": "built-in_networking"}, {"score": 0.003619910789366738, "phrase": "languages_performance"}, {"score": 0.0035043714971173252, "phrase": "emerging_option"}, {"score": 0.0034817084307034955, "phrase": "high_performance_computing"}, {"score": 0.0032842023803256216, "phrase": "multi-core_aware_collective_primitives"}, {"score": 0.0031383410838018953, "phrase": "publicly_available_mpj_libraries"}, {"score": 0.002998938434207771, "phrase": "thread-based_collective_operations"}, {"score": 0.002875027551180213, "phrase": "specific_multi-core_system_architecture"}, {"score": 0.0028013259314454407, "phrase": "message_length"}, {"score": 0.0027030528947088075, "phrase": "automatic_performance_tuning"}, {"score": 0.0026423134393535265, "phrase": "system_and_communication_parameters"}, {"score": 0.0025578967205807843, "phrase": "mpj_implementation"}, {"score": 0.0025085435314540837, "phrase": "mpj_point-to-point_primitives"}, {"score": 0.0024521640882380477, "phrase": "infiniband_and_gigabit_ethernet_multi-core_cluster"}, {"score": 0.002373807808495538, "phrase": "original_ones"}, {"score": 0.00233557144141627, "phrase": "higher_speedups"}, {"score": 0.0022756672722130424, "phrase": "collective_communications_intensive_java_hpc_applications"}, {"score": 0.0022390081666133627, "phrase": "presented_library"}, {"score": 0.002195794209219447, "phrase": "mpj_express"}, {"score": 0.0021049977753042253, "phrase": "next_release"}], "paper_keywords": ["Message-passing in Java (MPJ)", " Multi-core clusters", " Scalable collective communication", " High performance computing Performance evaluation"], "paper_abstract": "This paper presents a scalable and efficient Message-Passing in Java (MPJ) collective communication library for parallel computing on multi-core architectures. The continuous increase in the number of cores per processor underscores the need for scalable parallel solutions. Moreover, current system deployments are usually multi-core clusters, a hybrid shared/distributed memory architecture which increases the complexity of communication protocols. Here, Java represents an attractive choice for the development of communication middleware for these systems, as it provides built-in networking and multithreading support. As the gap between Java and compiled languages performance has been narrowing for the last years, Java is an emerging option for High Performance Computing (HPC). Our MPJ collective communication library increases Java HPC applications performance on multi-core clusters: ( I) providing multi-core aware collective primitives; (2) implementing several algorithms (up to six) per collective operation, whereas publicly available MPJ libraries are usually restricted to one algorithm; (3) analyzing the efficiency of thread-based collective operations; (4) selecting at runtime the most efficient algorithm depending on the specific multi-core system architecture, and the number of cores and message length involved in the collective operation; (5) supporting the automatic performance tuning of the collectives depending on the system and communication parameters; and (6) allowing its integration in any MPJ implementation as it is based on MPJ point-to-point primitives. A performance evaluation on an InfiniBand and Gigabit Ethernet multi-core cluster has shown that the implemented collectives significantly outperform the original ones, as well as higher speedups when analyzing the impact of their use on collective communications intensive Java HPC applications. Finally, the presented library has been successfully integrated in MPJ Express (http://mpj-express.org), and will be distributed with the next release.", "paper_title": "Design of efficient Java message-passing collectives on multi-core clusters", "paper_id": "WOS:000286682500002"}