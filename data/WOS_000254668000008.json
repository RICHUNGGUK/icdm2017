{"auto_keywords": [{"score": 0.04098185870301805, "phrase": "performance_effects"}, {"score": 0.0393378573740974, "phrase": "aspect_model"}, {"score": 0.03412226547133604, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "aspect-oriented_uml_models"}, {"score": 0.004783607451937166, "phrase": "aspect-oriented_modeling"}, {"score": 0.00469079145638866, "phrase": "software_designers"}, {"score": 0.004569819304126685, "phrase": "crosscutting_concerns"}, {"score": 0.00445195298244008, "phrase": "new_functional_features"}, {"score": 0.004365543827399888, "phrase": "current_aom_research"}, {"score": 0.0042668414931947615, "phrase": "separate_expression"}, {"score": 0.0041703614123283165, "phrase": "complete_system_model"}, {"score": 0.004062755992847139, "phrase": "different_properties"}, {"score": 0.003830647710561999, "phrase": "overall_system_performance"}, {"score": 0.00370745653128409, "phrase": "system's_primary_model"}, {"score": 0.0036473491893281125, "phrase": "uml_models"}, {"score": 0.0035882128312414046, "phrase": "\"uml_performance_profile"}, {"score": 0.0034843393197359586, "phrase": "spt"}, {"score": 0.0034388955530788292, "phrase": "omg"}, {"score": 0.003361069456060196, "phrase": "quantitative_performance_annotations"}, {"score": 0.003295763459241421, "phrase": "uml_model"}, {"score": 0.003263586288720322, "phrase": "first_step"}, {"score": 0.0031897187361850103, "phrase": "performance_annotations"}, {"score": 0.0031175178621644464, "phrase": "aspect_models"}, {"score": 0.002948883844627217, "phrase": "generic_model"}, {"score": 0.002901039092967117, "phrase": "context-specific_aspect_model"}, {"score": 0.002771152088379478, "phrase": "primary_model"}, {"score": 0.002735118294625477, "phrase": "complete_annotated_uml_model"}, {"score": 0.002664446536828292, "phrase": "structural_and_behavioural_views"}, {"score": 0.0026384167183586015, "phrase": "novel_approach"}, {"score": 0.0026126405272417783, "phrase": "activity_diagrams"}, {"score": 0.002587115505155995, "phrase": "graph-rewriting_concepts"}, {"score": 0.0025202582748972122, "phrase": "next_step"}, {"score": 0.002471248834609488, "phrase": "composed_model"}, {"score": 0.002391670093694849, "phrase": "previous_work"}, {"score": 0.0023298518405721804, "phrase": "case_study_system"}, {"score": 0.0022770700208637807, "phrase": "security_features"}, {"score": 0.0022548160498101558, "phrase": "aom."}, {"score": 0.0022182072857447684, "phrase": "security_aspect"}, {"score": 0.002125776260994065, "phrase": "lqn_model"}, {"score": 0.0021049977753042253, "phrase": "composed_system"}], "paper_keywords": [""], "paper_abstract": "Aspect-Oriented Modeling (AOM) techniques allow software designers to isolate and address separately solutions for crosscutting concerns (such as security, reliability, new functional features, etc.). Current AOM research is concerned not only with the separate expression of concerns and their composition into a complete system model, but also with the analysis of different properties of such models. This paper proposes an approach for analyzing the performance effects of a given aspect on the overall system performance, after the composition of the aspect model with the system's primary model. Performance analysis of UML models is enabled by the \"UML Performance Profile for Schedulability, Performance and Time\" (SPT) standardized by OMG, which defines a set of quantitative performance annotations to be added to a UML model. The first step of the proposed approach is to add performance annotations to both the primary and the aspect models. An aspect model is generic at first, and therefore its performance annotations must be parameterized. A generic model is converted into a context-specific aspect model with concrete values assigned to its performance annotations. The latter is composed with the primary model, generating a complete annotated UML model. The composition is performed in both structural and behavioural views. A novel approach for composing activity diagrams based on graph-rewriting concepts is proposed in the paper. The next step is to transform automatically the composed model into a Layered Queueing Network (LQN) performance model, by using techniques developed in previous work. The proposed approach is illustrated with a case study system, whose primary model is enhanced with some security features by using AOM. The performance effects of the security aspect under consideration are analyzed in two design alternatives, by solving and analyzing the LQN model of the composed system.", "paper_title": "Performance analysis of aspect-oriented UML models", "paper_id": "WOS:000254668000008"}