{"auto_keywords": [{"score": 0.049707265389772874, "phrase": "composable_processor_sharing"}, {"score": 0.032635396210407175, "phrase": "compose"}, {"score": 0.00481495049065317, "phrase": "operating_system"}, {"score": 0.004740476936977635, "phrase": "multi-processor_systems_on_chip"}, {"score": 0.004648995193787914, "phrase": "multiple_independent_applications"}, {"score": 0.004559270778306828, "phrase": "different_parties"}, {"score": 0.004453874101119545, "phrase": "hardware_resources"}, {"score": 0.004103728794623367, "phrase": "system_integration"}, {"score": 0.003885668358145471, "phrase": "system_designer"}, {"score": 0.0038255128976509545, "phrase": "combined_behaviour"}, {"score": 0.0037224647319912293, "phrase": "design_complexity"}, {"score": 0.003693533648584145, "phrase": "composable_mpsocs"}, {"score": 0.0035660913513115267, "phrase": "independent_design"}, {"score": 0.0033372020049592726, "phrase": "particularly_challenging_resource"}, {"score": 0.003234615195382533, "phrase": "off-the-shelf_intellectual_property"}, {"score": 0.0028436364707396613, "phrase": "fixed-size_time_slices"}, {"score": 0.0027886573969044042, "phrase": "composable_scheduler"}, {"score": 0.002549096826249, "phrase": "temporal_composability"}, {"score": 0.0024803459795996116, "phrase": "dynamic_application_behaviour"}, {"score": 0.0024610448251906453, "phrase": "multiple_use_cases"}, {"score": 0.0023946630984825207, "phrase": "diverse_set"}, {"score": 0.002376027109070317, "phrase": "processor_architectures"}, {"score": 0.0023300677028248776, "phrase": "hardware_modifications"}, {"score": 0.002171836484200008, "phrase": "novel_two-level_scheduler"}, {"score": 0.002154930852763048, "phrase": "slack-distribution_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Composable", " Operating system", " Multi-processor", " System on chip"], "paper_abstract": "Multi-Processor Systems on Chip (MPSoC) run multiple independent applications, often developed by different parties. The applications share the hardware resources, e.g. processors, memories and interconnect. The sharing typically causes interference between the applications, which severely complicates system integration and verification. Even if the applications are verified in isolation, the system designer must verify the combined behaviour, leading to an explosion in design complexity. Composable MPSoCs have no interference between applications, thus allowing independent design and verification. For an MPSoC to be composable, all the hardware resources must offer composability. A particularly challenging resource is the processors, often purchased as off-the-shelf intellectual property. In this work we present the design and implementation of CompOSe, a light-weight (only 1500 lines of code) composable operating system for MPSoCs. Compose uses fixed-size time slices, coupled with a composable scheduler, to enable composable processor sharing. Using instances of ARM7. ARM11 and the Xilinx MicroBlaze we experimentally demonstrate the ability to provide temporal composability, even in the presence of dynamic application behaviour and multiple use cases. We do so using a diverse set of processor architectures, without requiring any hardware modifications. We also show how CompOSe allows slack to be distributed within and between applications through a novel two-level scheduler and slack-distribution system. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Design and implementation of an operating system for composable processor sharing", "paper_id": "WOS:000288729800014"}