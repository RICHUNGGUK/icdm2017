{"auto_keywords": [{"score": 0.03446868368519102, "phrase": "mipil"}, {"score": 0.01236953640796251, "phrase": "data_migration"}, {"score": 0.01214741219819311, "phrase": "uniform_data_distribution"}, {"score": 0.010506690423347894, "phrase": "piggyback_parity_updates"}, {"score": 0.004771196027464407, "phrase": "better_scalability"}, {"score": 0.004621148492564008, "phrase": "parity_blocks"}, {"score": 0.004455409162867219, "phrase": "round-robin_fashion"}, {"score": 0.00393852508392789, "phrase": "new_approach"}, {"score": 0.003849579089885659, "phrase": "mipil._first"}, {"score": 0.0036275736378775757, "phrase": "regular_data"}, {"score": 0.003561865840737996, "phrase": "parity_data"}, {"score": 0.0034813964296826973, "phrase": "minimum_number"}, {"score": 0.003449718244515019, "phrase": "data_blocks"}, {"score": 0.003418327319110734, "phrase": "old_disks"}, {"score": 0.0033872210664940786, "phrase": "new_disks"}, {"score": 0.0032358709481309913, "phrase": "online_data_migration"}, {"score": 0.003177235604998673, "phrase": "lazy_metadata_updates"}, {"score": 0.0030491497463386924, "phrase": "additional_xor_computations"}, {"score": 0.0028340217672278975, "phrase": "data_reliability"}, {"score": 0.0027573101010593863, "phrase": "linux_kernel"}, {"score": 0.002539379289856756, "phrase": "existing_\"moving-everything\"_approach"}, {"score": 0.0024593458703463474, "phrase": "redistribution_time"}, {"score": 0.002403724423251419, "phrase": "user_response_time"}], "paper_keywords": ["Data migration", " disk array", " metadata update", " parity update", " RAID-5 scaling"], "paper_abstract": "In RAID-5, data and parity blocks are distributed across all disks in a round-robin fashion. Previous approaches to RAID-5 scaling preserve such round-robin distribution, therefore requiring all the data to be migrated. In this paper, we rethink RAID-5 data layout and propose a new approach to RAID-5 scaling called MiPiL. First, MiPiL minimizes data migration while maintaining a uniform data distribution, not only for regular data but also for parity data. It moves the minimum number of data blocks from old disks to new disks for regaining a uniform data distribution. Second, MiPiL optimizes online data migration with piggyback parity updates and lazy metadata updates. Piggyback parity updates during data migration reduce the numbers of additional XOR computations and disk I/Os. Lazy metadata updates minimize the number of metadata writes without compromising data reliability. We implement MiPiL in Linux Kernel 2.6.32.9, and evaluate its performance by replaying three real-system traces. The results demonstrate that MiPiL consistently outperforms the existing \"moving-everything\" approach by 74.07-77.57% in redistribution time and by 25.78-70.50% in user response time. The experiments also illustrate that under the WebSearch2 and Financial1 workloads, the performance of the RAID-5 scaled using MiPiL is almost identical to that of the round-robin RAID-5.", "paper_title": "Rethinking RAID-5 Data Layout for Better Scalability", "paper_id": "WOS:000343887700014"}