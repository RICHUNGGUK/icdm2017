{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "machine-checked_verification"}, {"score": 0.0037392451233558234, "phrase": "multi-core_architectures"}, {"score": 0.0036671822784770463, "phrase": "weak_memory_consistency"}, {"score": 0.00342568771304873, "phrase": "relaxed_memory_semantics"}, {"score": 0.003107935254560724, "phrase": "first_fully_machine-checked_proof"}, {"score": 0.002711842889248926, "phrase": "system_implementers"}, {"score": 0.0025331002386232014, "phrase": "fundamental_components"}, {"score": 0.002366110899738696, "phrase": "simple_and_intuitive_programming_language"}, {"score": 0.0021049977753042253, "phrase": "assembly_language_implementation"}], "paper_keywords": ["Algorithms", " Design Languages", " Reliability", " Verification", " formal verification", " machine-checked proof", " relaxed memory", " TSO"], "paper_abstract": "We report on a machine-checked verification of safety for a state-of-the-art, on-the-fly, concurrent, mark-sweep garbage collector that is designed for multi-core architectures with weak memory consistency. The proof explicitly incorporates the relaxed memory semantics of x86 multiprocessors. To our knowledge, this is the first fully machine-checked proof of safety for such a garbage collector. We couch the proof in a framework that system implementers will find appealing, with the fundamental components of the system specified in a simple and intuitive programming language. The abstract model is detailed enough for its correspondence with an assembly language implementation to be straightforward.", "paper_title": "Relaxing Safely: Verified On-the-Fly Garbage Collection for x86-TSO", "paper_id": "WOS:000361284200010"}