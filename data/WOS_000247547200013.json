{"auto_keywords": [{"score": 0.04798652790106824, "phrase": "test_application_time"}, {"score": 0.00481495049065317, "phrase": "compact_test_pattern"}, {"score": 0.004750873844061641, "phrase": "tree-based_scan_path_architectures"}, {"score": 0.004563691742821759, "phrase": "test_data_volume"}, {"score": 0.004523103062368843, "phrase": "today's_high-density"}, {"score": 0.004248869786808024, "phrase": "large_number"}, {"score": 0.004211069233133584, "phrase": "compatible_sets"}, {"score": 0.0038338299812503, "phrase": "efficient_automatic_test_pattern_generator_tool"}, {"score": 0.0036498637283470386, "phrase": "fault_coverage"}, {"score": 0.0035851703423654432, "phrase": "significant_reduction_ratio"}, {"score": 0.0035532533960012298, "phrase": "test_time"}, {"score": 0.0033376244286643176, "phrase": "new_two-pass_hybrid_method"}, {"score": 0.0032492519841546682, "phrase": "efficient_scan_tree_architecture"}, {"score": 0.0032059442984238664, "phrase": "approximate_compatibility"}, {"score": 0.0030794433253250476, "phrase": "highly_compact_test"}, {"score": 0.002971182100871581, "phrase": "low_compatibility"}, {"score": 0.0027907771648224273, "phrase": "test_responses"}, {"score": 0.002729029534060092, "phrase": "leaf_nodes"}, {"score": 0.0026806139086152365, "phrase": "scan_tree"}, {"score": 0.002621297299343551, "phrase": "space_compactor"}, {"score": 0.0025291018422967083, "phrase": "proposed_scan_tree_architecture"}, {"score": 0.0024620842899061614, "phrase": "xor_tree"}, {"score": 0.0023021895404322767, "phrase": "test_data"}, {"score": 0.002251227801482381, "phrase": "experimental_results"}, {"score": 0.0021915573326125428, "phrase": "proposed_algorithm"}, {"score": 0.002162316557411786, "phrase": "earlier_methods"}, {"score": 0.0021049977753042253, "phrase": "degrading_fault_coverage"}], "paper_keywords": ["design-for-testability", " scan path", " space compaction", " stuck-at faults", " testing", " very large scale integration"], "paper_abstract": "Tree-based scan path architectures have recently been suggested for reducing test application time or test data volume in today's high-density very large scale integrated circuits. However, these techniques strongly rely on the existence of a large number of compatible sets of flip-flops under the given test set and therefore may not be suitable for a highly compact test set generated by an efficient automatic test pattern generator tool. Tree-based architectures also suffer from loss of fault coverage while achieving a significant reduction ratio for test time or data. In this paper, to circumvent this problem, a new two-pass hybrid method is proposed to design an efficient scan tree architecture based on approximate compatibility. The method is particularly suitable for a highly compact test set having fewer don't cares and low compatibility. Finally, to reduce the volume of scan-out data, test responses shifted out from the leaf nodes' of the scan tree are compacted by a space compactor, which is designed specially for the proposed scan tree architecture. The compactor uses an XOR tree, and its overhead is low. The design thus offers a solution to both test data and response compaction. Experimental results on various benchmark circuits demonstrate that the proposed algorithm outperforms the earlier methods in reducing test application time significantly without degrading fault coverage.", "paper_title": "An efficient scan tree design for compact test pattern set", "paper_id": "WOS:000247547200013"}