{"auto_keywords": [{"score": 0.03167586469306628, "phrase": "scalability_collapse"}, {"score": 0.008462173906672523, "phrase": "collapse_behavior"}, {"score": 0.00581999681488234, "phrase": "proposed_methods"}, {"score": 0.00481495049065317, "phrase": "scalability_collapse_behavior"}, {"score": 0.0047386923107107645, "phrase": "multicore_processor_systems"}, {"score": 0.004589763483242731, "phrase": "full_potential"}, {"score": 0.004553265070135597, "phrase": "multiple_cores"}, {"score": 0.004220624516321415, "phrase": "operating_systems"}, {"score": 0.004007083686875716, "phrase": "reduced_throughput"}, {"score": 0.0035403060198952244, "phrase": "hardware_resource_contention"}, {"score": 0.003053598205821532, "phrase": "significant_correlation"}, {"score": 0.002581477142020187, "phrase": "linux_kernel"}, {"score": 0.0021647968783414504, "phrase": "negligible_overhead"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["scalability collapse", " multicores", " scheduler", " adaptive locks", " operating systems"], "paper_abstract": "Multicore processor systems have become mainstream. To release the full potential of multiple cores, applications are programmed to be parallel to keep every core busy. Unfortunately, lock contention within operating systems can limit the scalability so seriously that use of more cores leads to reduced throughput (scalability collapse). To understand and characterize the collapse behavior easily, a discrete-event simulation model, which considers both the sequential execution of critical sections and the overhead of hardware resource contention, is designed and implemented. By the use of the model, we observe that the percentage of time used to wait for locks and the number of tasks requesting for a lock have a significant correlation with the occurrence of scalability collapse. On the basis of these observations, two new techniques (lock contention aware scheduler and requester-based adaptive lock) are proposed to remove the scalability collapse on multicores. The proposed methods are implemented in the Linux kernel 2.6.29.4 and evaluated on an AMD 32-core system to verify their effectiveness. By using micro-benchmarks and macro-benchmarks, we find that these methods can remove scalability collapse totally for four of five workloads exhibiting the collapse behavior. For one workload that does not suffer scalability collapse, these proposed methods only introduce negligible overhead. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Towards scalability collapse behavior on multicores", "paper_id": "WOS:000329764200002"}