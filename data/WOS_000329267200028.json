{"auto_keywords": [{"score": 0.04776501880537941, "phrase": "mobile_devices"}, {"score": 0.007681946460278441, "phrase": "mobile_applications"}, {"score": 0.005776969897857736, "phrase": "bandwidth_fluctuations"}, {"score": 0.00481495049065317, "phrase": "distributed_execution_optimization"}, {"score": 0.004617455679463816, "phrase": "ever_richer_functionality"}, {"score": 0.004495996972278015, "phrase": "increasingly_more_battery_power"}, {"score": 0.004198082549566806, "phrase": "promising_approach"}, {"score": 0.0041345962781234435, "phrase": "battery_life"}, {"score": 0.004025787455454387, "phrase": "data_transmission"}, {"score": 0.003673930454794753, "phrase": "transmission_delay"}, {"score": 0.0035500334260484376, "phrase": "wireless_environment"}, {"score": 0.0035230711775515854, "phrase": "static_partitionings"}, {"score": 0.0034963129868796033, "phrase": "previous_work"}, {"score": 0.003443402656397069, "phrase": "mobile_platforms"}, {"score": 0.003404244237372396, "phrase": "fixed_bandwidth_assumption"}, {"score": 0.003365529624506815, "phrase": "dynamic_partitionings"}, {"score": 0.003327253821888569, "phrase": "high_overhead"}, {"score": 0.0033019779616246356, "phrase": "continuous_partitioning"}, {"score": 0.003190584226787897, "phrase": "novel_partitioning_scheme"}, {"score": 0.0030829367866722825, "phrase": "static_partitioning"}, {"score": 0.003047865053078826, "phrase": "high_costs"}, {"score": 0.003024705160129876, "phrase": "dynamic_partitioning"}, {"score": 0.002956272941199248, "phrase": "application_object_relation_graphs"}, {"score": 0.0028893844749296863, "phrase": "static_analysis"}, {"score": 0.002867425368894356, "phrase": "dynamic_profiling"}, {"score": 0.002824005136794786, "phrase": "optimization_models"}, {"score": 0.002646667279798485, "phrase": "min-cut"}, {"score": 0.0026265465397867093, "phrase": "greedy_application_partitioning"}, {"score": 0.002567099236341096, "phrase": "bbap"}, {"score": 0.0025089940342989227, "phrase": "optimal_partitioning_solutions"}, {"score": 0.0024899186481178075, "phrase": "small_applications"}, {"score": 0.0024615764782448214, "phrase": "mcgap"}, {"score": 0.002405853977978678, "phrase": "suboptimal_solutions"}, {"score": 0.002387560868354908, "phrase": "large-scale_applications"}, {"score": 0.0022375675189464715, "phrase": "application_execution_time"}, {"score": 0.002220551141101661, "phrase": "energy_consumption"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Mobile applications", " Energy saving", " Application partitioning", " Bandwidth-adaptive", " Weighted object relation graphs"], "paper_abstract": "Mobile applications are becoming increasingly ubiquitous and provide ever richer functionality on mobile devices, while such applications drain increasingly more battery power of mobile devices. Offloading some parts of the application running on mobile devices onto remote servers/clouds is a promising approach to extend the battery life of mobile devices. However, as data transmission of offloading causes delay and energy costs for mobile devices, it is necessary to carefully design application partitioning/offloading schemes to weigh the benefits against the transmission delay and costs. Due to bandwidth fluctuations in the wireless environment, static partitionings in previous work are unsuitable for mobile platforms with a fixed bandwidth assumption, while dynamic partitionings result in high overhead of continuous partitioning for mobile devices. Therefore, we propose a novel partitioning scheme taking the bandwidth as a variable to improve static partitioning and avoid high costs of dynamic partitioning. Firstly, we construct application Object Relation Graphs (ORGs) by combining static analysis and dynamic profiling to propose partitioning optimization models. Then based on our novel execution-time and energy optimization partitioning models, we propose the Branch-and-Bound based Application Partitioning (BBAP) algorithm and Min-Cut based Greedy Application Partitioning (MCGAP) algorithm. BBAP is suited to finding the optimal partitioning solutions for small applications, while MCGAP is applicable to quickly obtaining suboptimal solutions for large-scale applications. Experimental results demonstrate that both algorithms can adapt to bandwidth fluctuations well, and significantly reduce application execution time and energy consumption by optimally distributing components between mobile devices and servers. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Bandwidth-adaptive partitioning for distributed execution optimization of mobile applications", "paper_id": "WOS:000329267200028"}