{"auto_keywords": [{"score": 0.04918357102136353, "phrase": "tm"}, {"score": 0.040840080101974846, "phrase": "read_operations"}, {"score": 0.00481495049065317, "phrase": "disjoint-access_parallel_implementations_of_transactional_memory"}, {"score": 0.004769702911065878, "phrase": "transactional_memory"}, {"score": 0.0046364836476864325, "phrase": "popular_approach"}, {"score": 0.004485735417293941, "phrase": "concurrent_applications"}, {"score": 0.004023947242621452, "phrase": "tm_implementations"}, {"score": 0.003986103192038901, "phrase": "disjoint-access_parallelism"}, {"score": 0.0038564191670589884, "phrase": "disjoint_access_parallelism"}, {"score": 0.003766369160795001, "phrase": "disconnected_data"}, {"score": 0.0035755653799043, "phrase": "tm_scalability"}, {"score": 0.0032838979278935814, "phrase": "memory_contention"}, {"score": 0.0031920445513574907, "phrase": "inherent_tradeoff"}, {"score": 0.003132236287543072, "phrase": "transactional_memories"}, {"score": 0.0027437235598539904, "phrase": "lower_bound"}, {"score": 0.0025316905609748135, "phrase": "read-only_transaction"}, {"score": 0.0024146842687658467, "phrase": "disjoint-access_parallel_tm_implementation"}, {"score": 0.002358220053411644, "phrase": "strict_serializability"}, {"score": 0.002125020720324262, "phrase": "weaker_consistency_conditions"}, {"score": 0.0021049977753042253, "phrase": "snapshot_isolation"}], "paper_keywords": ["Transactional memory", " Disjoint-access parallelism", " Partial snapshots", " Lower bound", " Impossibility result"], "paper_abstract": "Transactional memory (TM) is a popular approach for alleviating the difficulty of programming concurrent applications; TM guarantees that a transaction, consisting of a sequence of operations, appear to be executed atomically. Two fundamental properties of TM implementations are disjoint-access parallelism and the invisibility of read operations. Disjoint access parallelism ensures that operations on disconnected data do not interfere, and thus it is critical for TM scalability. The invisibility of read operations means that their implementation does not write to the memory, thereby reducing memory contention. This paper proves an inherent tradeoff for implementations of transactional memories: they cannot be both disjoint-access parallel and have read-only transactions that are invisible and always terminate successfully. In fact, a lower bound of Omega(t) is proved on the number of writes needed in order to implement a read-only transaction of t items, which successfully terminates in a disjoint-access parallel TM implementation. The results assume strict serializability and thus hold under the assumption of opacity. It is shown how to extend the results to hold also for weaker consistency conditions, snapshot isolation and serializability.", "paper_title": "Inherent Limitations on Disjoint-Access Parallel Implementations of Transactional Memory", "paper_id": "WOS:000295519200003"}