{"auto_keywords": [{"score": 0.047001232576733214, "phrase": "forward_steps"}, {"score": 0.043344204212477706, "phrase": "worst_case"}, {"score": 0.04101905584417688, "phrase": "arbitrary_sequence"}, {"score": 0.00481495049065317, "phrase": "list_traversal_synopses"}, {"score": 0.004757227624616643, "phrase": "program_rollback"}, {"score": 0.0046578649614541995, "phrase": "efficient_back_traversal"}, {"score": 0.0046159158660556985, "phrase": "unidirectional_list"}, {"score": 0.004574342831225094, "phrase": "small_memory"}, {"score": 0.004533142516832776, "phrase": "essentially_no_slowdown"}, {"score": 0.00406663414150229, "phrase": "forward_step"}, {"score": 0.0038866641370225836, "phrase": "forward_and_back_steps"}, {"score": 0.0038284549148537373, "phrase": "full_trade-off"}, {"score": 0.0035609154384221567, "phrase": "novel_pebbling_technique"}, {"score": 0.003496994062890991, "phrase": "virtual_binary"}, {"score": 0.0033421490374576763, "phrase": "pre-order_fashion"}, {"score": 0.003312009953245191, "phrase": "compact_data_structures"}, {"score": 0.0032722454818973853, "phrase": "pebbling_algorithms"}, {"score": 0.003232956879952914, "phrase": "traversal_synopses"}, {"score": 0.0031941384895530426, "phrase": "general_directed_graphs"}, {"score": 0.0031273209718167072, "phrase": "memory_efficient_hash-chain_implementation"}, {"score": 0.0030069062905274976, "phrase": "arbitrary_rollback_steps"}, {"score": 0.002952900365829518, "phrase": "small_overhead"}, {"score": 0.0024410581599518784, "phrase": "program_p"}, {"score": 0.0023755529073496394, "phrase": "forward_execution"}, {"score": 0.0023328599525181707, "phrase": "i'th_rollback_step"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": [""], "paper_abstract": "We show how to support efficient back traversal in a unidirectional list, using small memory and with essentially no slowdown in forward steps. Using O (lg n) memory for a list of size n, the i'th back-step from the farthest point reached so far takes O (lg i) time in the worst case, while the overhead per forward step is at most c for arbitrary small constant epsilon > 0. An arbitrary sequence of forward and back steps is allowed. A full trade-off between memory usage and time per back-step is presented: k vs. kn 1/k and vice versa. Our algorithms are based on a novel pebbling technique which moves pebbles on a virtual binary, or n (1/k)-ary, tree that can only be traversed in a pre-order fashion. The compact data structures used by the pebbling algorithms, called list traversal synopses, extend to general directed graphs, and have other interesting applications, including memory efficient hash-chain implementation. Perhaps the most surprising application is in showing that for any program, arbitrary rollback steps can be efficiently supported with small overhead in memory, and marginal overhead in its ordinary execution. More concretely: let P be a program that runs for at most T steps, using memory of size M. Then, at the cost of recording the input used by the program, and increasing the memory by a factor of O (lg T) to O(M lg T), the program P can be extended to support an arbitrary sequence of forward execution and rollback steps: the i'th rollback step takes O (lg i) time in the worst case, while forward steps take O (1) time in the worst case, and 1 + epsilon amortized time per step. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Efficient pebbling for list traversal synopses with application to program rollback", "paper_id": "WOS:000247355100010"}