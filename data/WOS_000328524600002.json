{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "property_matching"}, {"score": 0.004783648559078619, "phrase": "biologically_motivated_problem"}, {"score": 0.004670597652149685, "phrase": "online_pattern_p"}, {"score": 0.004640229780905613, "phrase": "string_text_t"}, {"score": 0.0045404158999449475, "phrase": "matched_text_part"}, {"score": 0.0045108906244892165, "phrase": "conceptual_property"}, {"score": 0.004423456691576069, "phrase": "set_pi"}, {"score": 0.004002242925856335, "phrase": "valid_output"}, {"score": 0.003724911315685105, "phrase": "indexing_version"}, {"score": 0.003668591097652231, "phrase": "a._amir"}, {"score": 0.003219368413618912, "phrase": "t._kopelowitz"}, {"score": 0.003177579651881594, "phrase": "dynamic_version"}, {"score": 0.0030687676739251982, "phrase": "space_linear"}, {"score": 0.002818850283787242, "phrase": "first_index"}, {"score": 0.002770150086489194, "phrase": "entropy_compressed_space_requirement"}, {"score": 0.002577974192315234, "phrase": "icsai"}, {"score": 0.0025500402081330394, "phrase": "compressed_suffix_array"}, {"score": 0.002473420909291381, "phrase": "length_ip"}, {"score": 0.0024095777415804346, "phrase": "suffix_array_value"}, {"score": 0.002347378595930709, "phrase": "dynamic_index"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Property matching", " Suffix trees", " Property suffix trees"], "paper_abstract": "Property matching is a biologically motivated problem where the task is to find those occurrences of an online pattern P in a string text T (of size n), such that the matched text part satisfies some conceptual property. The property of a string is a set pi of (possibly overlapping) intervals ((S-1, f(1),)(s(2), f(2)),...) corresponding to the part of text and an occurrence of a pattern P = T[i,..., (i + vertical bar P vertical bar - 1)] is a valid output only if T[i,..., (i + vertical bar P vertical bar - 1)] is completely contained in at least one interval (s(j), f(j)) epsilon pi. The indexing version of this problem was introduced by A. Amir (2008), where the text is preprocessed in 0(n logo- + n log logn) time and an 0(n logn) bits index, named Property Suffix Tree (PST) is maintained. PST can perform property matching in 0 (IPI logo. +occ,r) time, where occ,r is the number of occurrences of P in T satisfying the property. T. Kopelowitz (2010) considered the dynamic version of this problem where intervals can be added or deleted. However, all these indexes take space linear to the size of text (0 (n logn) bits), which can be much more than the size of the text (n logcr bits). In this paper, we propose the first index for property matching occupying space close to the entropy compressed space requirement of the text. Our compressed index takes ICSAI+n(2+E +0(1)) bits space and performs query answering in 0 (t(IP I) + (1 + occ,r)tsA) time, where ICSAI is the size of compressed suffix array of T, t(111) be the time for searching a pattern of length IP 1 in CSA, tsA is the time for computing the suffix array value and E > 0 is a constant. We also introduce a dynamic index, which takes ICSAI + 0(n + Irr I logn) bits space and performs query answering in 0 (t(IPI) + (1 + occr)logn(tsA + log n/ log log n)) time and can update (insert/delete) an interval (s, f) in 0 ((f s)(logn + tsA)) time. 2013 Elsevier Inc. All rights reserved.", "paper_title": "Compressed property suffix trees", "paper_id": "WOS:000328524600002"}