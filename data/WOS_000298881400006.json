{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "two-variable_polynomial_matrix"}, {"score": 0.004266501496765747, "phrase": "first_interpolation_algorithm"}, {"score": 0.0040978781692373005, "phrase": "lagrange_interpolation_method"}, {"score": 0.004016072233242585, "phrase": "pre-assigned_data"}, {"score": 0.003417565253539315, "phrase": "second_interpolation_algorithm"}, {"score": 0.0033492947290751996, "phrase": "discrete_fourier_transforms"}, {"score": 0.003216804708106142, "phrase": "better_fast_fourier_transforms"}, {"score": 0.002755567647101251, "phrase": "parallel_environment"}, {"score": 0.002700485592691974, "phrase": "symmetric_multiprocessing"}, {"score": 0.002297585503415527, "phrase": "mathematica_programming_language"}, {"score": 0.002105078022645021, "phrase": "mathematica"}], "paper_keywords": [""], "paper_abstract": "Two interpolation algorithms are presented for the computation of the inverse of a two variable polynomial matrix. The first interpolation algorithm, is based on the Lagrange interpolation method that matches pre-assigned data of the determinant and the adjoint of a two-variable polynomial matrix, on a set of points on several circles centered at the origin. The second interpolation algorithm is using discrete fourier transforms (DFT) techniques or better fast fourier transforms which are very efficient algorithms available both in software and hardware and that they are greatly benefitted by the existence of a parallel environment (through symmetric multiprocessing or other techniques). The complexity of both algorithms is discussed and illustrated examples are given. The DFT-algorithm is implemented in the Mathematica programming language and tested in comparison to the respective built-in function of Mathematica.", "paper_title": "On the computation of the inverse of a two-variable polynomial matrix by interpolation", "paper_id": "WOS:000298881400006"}