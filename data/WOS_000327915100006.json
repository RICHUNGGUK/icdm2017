{"auto_keywords": [{"score": 0.03629239245675473, "phrase": "guide_pairs"}, {"score": 0.032511196899075494, "phrase": "first_algorithm"}, {"score": 0.029575659282087528, "phrase": "input_value"}, {"score": 0.02911205213260275, "phrase": "second_algorithm"}, {"score": 0.00481495049065317, "phrase": "ordered_trees"}, {"score": 0.004298666679374568, "phrase": "process_p"}, {"score": 0.003407214479510987, "phrase": "numerous_applications"}, {"score": 0.003352388337911934, "phrase": "ordered_traversal"}, {"score": 0.002944284514509205, "phrase": "ranking_problem"}, {"score": 0.0028968858148006823, "phrase": "ordered_tree"}, {"score": 0.002714779217561487, "phrase": "space_complexity"}, {"score": 0.00235843888868088, "phrase": "tree_processes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Self-stabilization", " Tree networks", " Tree labeling", " Guide pair", " Ranking"], "paper_abstract": "We give two self-stabilizing algorithms for tree networks. The first computes an index, called guide pair, for each process P in O(h) rounds using O(delta(P) log n) space per process, where h is the height of the tree, delta(P) the degree of P, and n the number of processes in the network. Guide pairs have numerous applications, including ordered traversal or navigation in the tree. Our second algorithm, which uses the guide pairs computed by the first algorithm, solves in O(n) rounds the ranking problem for an ordered tree, where each process has an input value. This second algorithm has space complexity O(b + delta(P) log n) in each process P, where b is the number of bits needed to store an input value. The first algorithm orders the tree processes according to their topological positions. The second algorithm orders (ranks) the processes according to their input values. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Self-stabilizing labeling and ranking in ordered trees", "paper_id": "WOS:000327915100006"}