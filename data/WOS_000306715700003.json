{"auto_keywords": [{"score": 0.03742160548515537, "phrase": "introlib"}, {"score": 0.010843988012086416, "phrase": "low_overhead"}, {"score": 0.00481495049065317, "phrase": "malware_forensics"}, {"score": 0.004758053266234474, "phrase": "dynamic_malware_analysis"}, {"score": 0.004646258518859209, "phrase": "malware's_runtime_behavior"}, {"score": 0.004483450050677258, "phrase": "advanced_malware"}, {"score": 0.004326321719714357, "phrase": "underlying_analysis_tool"}, {"score": 0.004004436217742343, "phrase": "existing_malware-transparent_analysis_tools"}, {"score": 0.0037731618765688584, "phrase": "live_malware_monitoring"}, {"score": 0.0034101316738399203, "phrase": "user-level_library_calls"}, {"score": 0.0032709661258673206, "phrase": "high_transparency"}, {"score": 0.0031561961485589663, "phrase": "hardware_virtualization"}, {"score": 0.0030454408569868347, "phrase": "guest_virtual_machine"}, {"score": 0.0028865314258560214, "phrase": "introlib_prototype"}, {"score": 0.00270351921935554, "phrase": "api"}, {"score": 0.0025623821393275146, "phrase": "malware_behavior"}, {"score": 0.002329412930430366, "phrase": "-one_test_case"}, {"score": 0.0022881443200668886, "phrase": "performance_benchmark_testing"}, {"score": 0.0022077827041801193, "phrase": "z._deng"}, {"score": 0.002181626277903721, "phrase": "x._hu"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Malware forensics", " Library call introspection", " Virtualization", " Dynamic analysis", " Performance"], "paper_abstract": "Dynamic malware analysis aims at revealing malware's runtime behavior. To evade analysis, advanced malware is able to detect the underlying analysis tool (e.g. one based on emulation.) On the other hand, existing malware-transparent analysis tools incur significant performance overhead, making them unsuitable for live malware monitoring and forensics. In this paper, we present IntroLib, a practical tool that traces user-level library calls made by malware with low overhead and high transparency. IntroLib is based on hardware virtualization and resides outside of the guest virtual machine where the malware runs. Our evaluation of an IntroLib prototype with 93 real-world malware samples shows that IntroLib is immune to emulation and API hooking detection by malware, uncovers more semantic information about malware behavior than system call tracing, and incurs low overhead (<15% in all-but-one test case) in performance benchmark testing. (c) 2012 Z. Deng, X. Hu, X. Zhang & X. Jiang. Published by Elsevier Ltd. All rights reserved.", "paper_title": "IntroLib: Efficient and transparent library call introspection for malware forensics", "paper_id": "WOS:000306715700003"}