{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "preemptable_ticket_spinlocks"}, {"score": 0.012740630966282755, "phrase": "significant_impact"}, {"score": 0.010990097362240842, "phrase": "ticket_locks"}, {"score": 0.004761494044422926, "phrase": "consolidated_performance"}, {"score": 0.0046046429665581555, "phrase": "virtual_machine_environment"}, {"score": 0.004570491683870396, "phrase": "os_level_synchronization_primitives"}, {"score": 0.004502943680955863, "phrase": "significant_challenges"}, {"score": 0.00443638953122199, "phrase": "scheduling_behavior"}, {"score": 0.004387117409226736, "phrase": "underlying_virtual_machine_monitor"}, {"score": 0.0041488110506566825, "phrase": "real_hardware"}, {"score": 0.003779943062894615, "phrase": "critical_region"}, {"score": 0.0036281710561308377, "phrase": "os_level_spinlocks"}, {"score": 0.003601235776892337, "phrase": "vmm_scheduling"}, {"score": 0.0034566143156030426, "phrase": "overall_vm_performance"}, {"score": 0.0033177813460815346, "phrase": "generic_spinlocks"}, {"score": 0.003293142761521425, "phrase": "virtual_environments"}, {"score": 0.002815864555488112, "phrase": "lock_waiter_preemption_problem"}, {"score": 0.002594088212779666, "phrase": "vm"}, {"score": 0.0025556529150386168, "phrase": "forward_progress"}, {"score": 0.0025178072071268534, "phrase": "ordering_guarantees"}, {"score": 0.002398627220761345, "phrase": "vm_performance"}, {"score": 0.0023107943665108465, "phrase": "non_paravirtual_vmm"}, {"score": 0.0022013916728990564, "phrase": "paravirtual_locking_interface"}, {"score": 0.0021049977753042253, "phrase": "realistic_e-commerce_benchmark"}], "paper_keywords": ["Virtual Machines", " Lock Holder Preemption", " Paravirtualization"], "paper_abstract": "When executing inside a virtual machine environment, OS level synchronization primitives are faced with significant challenges due to the scheduling behavior of the underlying virtual machine monitor. Operations that are ensured to last only a short amount of time on real hardware, are capable of taking considerably longer when running virtualized. This change in assumptions has significant impact when an OS is executing inside a critical region that is protected by a spinlock. The interaction between OS level spinlocks and VMM scheduling is known as the Lock Holder Preemption problem and has a significant impact on overall VM performance. However, with the use of ticket locks instead of generic spinlocks, virtual environments must also contend with waiters being preempted before they are able to acquire the lock. This has the effect of blocking access to a lock, even if the lock itself is available. We identify this scenario as the Lock Waiter Preemption problem. In order to solve both problems we introduce Preemptable Ticket spinlocks, a new locking primitive that is designed to enable a VM to always make forward progress by relaxing the ordering guarantees offered by ticket locks. We show that the use of Preemptable Ticket spinlocks improves VM performance by 5.32 X on average, when running on a non paravirtual VMM, and by 7.91 X when running on a VMM that supports a paravirtual locking interface, when executing a set of microbenchmarks as well as a realistic e-commerce benchmark.", "paper_title": "Preemptable Ticket Spinlocks: Improving Consolidated Performance in the Cloud", "paper_id": "WOS:000324470900018"}