{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ajax_applications"}, {"score": 0.015206567585471764, "phrase": "ajax"}, {"score": 0.0047547526023100665, "phrase": "new_breed"}, {"score": 0.00471503739362446, "phrase": "web_application"}, {"score": 0.004502433187097914, "phrase": "limited_degree"}, {"score": 0.0044275118637330975, "phrase": "large-grain_stateless_web_interactions"}, {"score": 0.004299374036140852, "phrase": "new_approach"}, {"score": 0.0042455945330942746, "phrase": "single_page_interaction_model"}, {"score": 0.004192484908247302, "phrase": "rich_interactivity"}, {"score": 0.004140036888016244, "phrase": "push-based_solutions"}, {"score": 0.0040882422992520925, "phrase": "distributed_systems"}, {"score": 0.003634901808509402, "phrase": "architectural_concepts"}, {"score": 0.003370287778450475, "phrase": "existing_approaches"}, {"score": 0.0029463874016490976, "phrase": "spiar_architectural_style"}, {"score": 0.002813307389456184, "phrase": "guiding_software_engineering_principles"}, {"score": 0.0027203027216256013, "phrase": "desired_properties"}, {"score": 0.0026637384761565605, "phrase": "user_interface_component_development"}, {"score": 0.0024904974828343033, "phrase": "state_changes"}, {"score": 0.002358050109031317, "phrase": "user_interactivity"}, {"score": 0.002338306897057454, "phrase": "user-perceived_latency"}, {"score": 0.002122775261369663, "phrase": "ajax_frameworks"}, {"score": 0.0021049977753042253, "phrase": "application_development"}], "paper_keywords": ["AJAX", " Web architectural style", " Web engineering", " Single page interface", " Rich internet application"], "paper_abstract": "A new breed of web application, dubbed AJAX, is emerging in response to a limited degree of interactivity in large-grain stateless Web interactions. At the heart of this new approach lies a single page interaction model that facilitates rich interactivity. Also push-based solutions from the distributed systems are being adopted on the web for AJAX applications. The field is, however, characterized by the lack of a coherent and precisely described set of architectural concepts. As a consequence, it is rather difficult to understand, assess, and compare the existing approaches. We have studied and experimented with several AJAX frameworks trying to understand their architectural properties. In this paper, we summarize four of these frameworks and examine their properties and introduce the SPIAR architectural style which captures the essence of AJAX applications. We describe the guiding software engineering principles and the constraints chosen to induce the desired properties. The style emphasizes user interface component development, intermediary delta-communication between client/server components, and push-based event notification of state changes through the components, to improve a number of properties such as user interactivity, user-perceived latency, data coherence, and ease of development. In addition, we use the concepts and principles to discuss various open issues in AJAX frameworks and application development. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "A component- and push-based architectural style for AJAX applications", "paper_id": "WOS:000261119800008"}