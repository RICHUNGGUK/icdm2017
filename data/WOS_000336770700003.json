{"auto_keywords": [{"score": 0.015719716506582538, "phrase": "mapreduce_paradigm"}, {"score": 0.011987445398765194, "phrase": "many-core_platform"}, {"score": 0.01140405797498894, "phrase": "mapreduce_programs"}, {"score": 0.007991986081253802, "phrase": "mapreduce_library"}, {"score": 0.004682470508020952, "phrase": "mapreduce"}, {"score": 0.0046046429665581555, "phrase": "popular_programming_paradigm"}, {"score": 0.004528156929805637, "phrase": "big_data"}, {"score": 0.004403480614319231, "phrase": "master-worker_model"}, {"score": 0.0039822874870125095, "phrase": "large_problems"}, {"score": 0.0039380388343479384, "phrase": "task_parallelism"}, {"score": 0.003808209866576388, "phrase": "many-core_architectures"}, {"score": 0.003724034990158436, "phrase": "foreseeable_future"}, {"score": 0.003541357671562449, "phrase": "main_computing_platforms"}, {"score": 0.0032747835779400212, "phrase": "many-core_platforms"}, {"score": 0.003202361402737197, "phrase": "parallel_programs"}, {"score": 0.00306227185008558, "phrase": "multifaceted_problem"}, {"score": 0.0029612292670237505, "phrase": "architectural_factors"}, {"score": 0.0026626797255348287, "phrase": "master_worker_model"}, {"score": 0.002531933388815139, "phrase": "master_share"}, {"score": 0.0025037596405075866, "phrase": "worker_share_schemes"}, {"score": 0.002354302193867031, "phrase": "theoretical_analysis"}, {"score": 0.0023021895404322767, "phrase": "worker_share_scheme"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Many-core", " Master-worker", " MapReduce", " Shared memory", " TILE64"], "paper_abstract": "MapReduce is a popular programming paradigm for processing big data. It uses the master-worker model, which is widely used on distributed and loosely coupled systems such as clusters, to solve large problems with task parallelism. With the ubiquity of many-core architectures in recent years and foreseeable future, the many-core platform will be one of the main computing platforms to execute MapReduce programs. Therefore, it is essential to optimize MapReduce programs on many-core platforms. Optimizations of parallel programs for a many-core platform are viewed as a multifaceted problem, where both system and architectural factors should be taken into account. In this paper, we look into the problem by constructing a master worker model for MapReduce paradigm on the TILE64 many-core platform. We investigate master share and worker share schemes for implementation of a MapReduce library on the TILE64. The theoretical analysis shows that the worker share scheme is inherently better for implementation of MapReduce library on the TILE64 many-core platform. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Master-worker model for MapReduce paradigm on the TILE64 many-core platform", "paper_id": "WOS:000336770700003"}