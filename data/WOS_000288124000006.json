{"auto_keywords": [{"score": 0.05006723331308145, "phrase": "context_sensitive_environment"}, {"score": 0.04866968819934496, "phrase": "global_qos"}, {"score": 0.04565940643879578, "phrase": "service_composition"}, {"score": 0.03467492703108689, "phrase": "dynamic_context_environment"}, {"score": 0.031584427785186435, "phrase": "ga"}, {"score": 0.004779406424192843, "phrase": "qos-aware_service_composition"}, {"score": 0.004622662375029505, "phrase": "composite_service"}, {"score": 0.004571559854487074, "phrase": "candidate_services"}, {"score": 0.00450429688285697, "phrase": "context_sensitive_service_execution_environment"}, {"score": 0.0044052452943364314, "phrase": "context_information"}, {"score": 0.004213601332868765, "phrase": "user_constraints"}, {"score": 0.004167001961564886, "phrase": "qos_requirements"}, {"score": 0.004105666842002734, "phrase": "new_services"}, {"score": 0.00403026082093352, "phrase": "old_ones"}, {"score": 0.003970930401776528, "phrase": "existing_ones"}, {"score": 0.0038548668648948044, "phrase": "current_service_composition_plan"}, {"score": 0.0037983767694285304, "phrase": "qos"}, {"score": 0.0036462799422150834, "phrase": "runtime_self-optimizing_service_composition_framework"}, {"score": 0.003385555209074879, "phrase": "extra_delay"}, {"score": 0.0030401601744013793, "phrase": "genetic_algorithm"}, {"score": 0.00265987582861194, "phrase": "service_composition_mechanisms"}, {"score": 0.002258924405138231, "phrase": "context-aware_service"}, {"score": 0.002176560171729638, "phrase": "different_context_change_frequencies"}, {"score": 0.002128587147609539, "phrase": "computation_cost"}, {"score": 0.0021049977753042253, "phrase": "self-optimizing_process"}], "paper_keywords": ["Service composition", " Quality of service (QoS)", " Context", " Repair genetic algorithm", " Self-optimizing"], "paper_abstract": "QoS-aware service composition is aimed to maximize the global QoS of a composite service when selecting candidate services. In a context sensitive service execution environment in pervasive computing, the context information for service composition is not static: device, policy, and user constraints, and QoS requirements may change, new services may be deployed, old ones withdrawn, or existing ones change their QoS parameters. This results in the current service composition plan failing or its QoS degrading from the optimum. In this paper, a runtime self-optimizing service composition framework is proposed. An implementation of a prototype for this framework is presented, addressing the issues of reducing extra delay while increasing global QoS in service composition in a dynamic context environment. Three service re-plan algorithms are compared that can be used in dynamic context environment, i.e., minimal-conflict hill-climbing repair genetic algorithm (MCHC-repair GA), an improved penalty-based GA, and our multi-population conflicts sorted repair genetic algorithm (MP-CS-repair GA), as well as three kinds of service composition mechanisms-with backup, without backup, and our context-aware service re-selection mechanisms. The results show that our MP-CS-repair GA and context-aware service re-selection method can reduce more extra delay while acquiring a higher global QoS for the composite service in a context sensitive environment. This context-aware service re-selection mechanism also shows some adaptability to different context change frequencies and user requirements for reducing computation cost in the self-optimizing process.", "paper_title": "A self-optimizing QoS-aware service composition approach in a context sensitive environment", "paper_id": "WOS:000288124000006"}