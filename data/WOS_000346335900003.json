{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "regular_expression_matching"}, {"score": 0.046920155627789596, "phrase": "regular_expression"}, {"score": 0.040326850637873876, "phrase": "sparse_matrix_format"}, {"score": 0.027223267818563934, "phrase": "regular_expression_matching_engine"}, {"score": 0.004774115617883476, "phrase": "field-programmable_gate_arrays"}, {"score": 0.004402973626416765, "phrase": "deterministic_finite_automata"}, {"score": 0.0042194155853987935, "phrase": "dfa"}, {"score": 0.0041835168653521, "phrase": "large_memory_resources"}, {"score": 0.004112812699639956, "phrase": "state_blowup_problem"}, {"score": 0.003958049372486465, "phrase": "dfa_storage"}, {"score": 0.00387459052649752, "phrase": "compressed_dfa"}, {"score": 0.0037928847801943404, "phrase": "field-programmable_gate_array"}, {"score": 0.0036813725040313002, "phrase": "sparse_matrix"}, {"score": 0.0036501160751879784, "phrase": "multiple_clock_cycles"}, {"score": 0.0033660587983313536, "phrase": "compact_sparse_matrix_format"}, {"score": 0.003309124298009635, "phrase": "compressed_dfa_transition_table"}, {"score": 0.003267074142277463, "phrase": "fpga."}, {"score": 0.0031981188104809994, "phrase": "special_properties"}, {"score": 0.00317095235382607, "phrase": "sparse_matrices"}, {"score": 0.003025597247856977, "phrase": "single_clock_cycle"}, {"score": 0.002850168497994985, "phrase": "xilinx_inc."}, {"score": 0.0027662954811372175, "phrase": "san_jose"}, {"score": 0.0027196146634409506, "phrase": "usa"}, {"score": 0.002684967897303864, "phrase": "fpga"}, {"score": 0.0025947642929906407, "phrase": "previous_solutions"}, {"score": 0.0024969812322112174, "phrase": "high_compression_ratio"}, {"score": 0.0023824468367751365, "phrase": "memory_space"}, {"score": 0.002342110338541984, "phrase": "original_dfa_structure"}, {"score": 0.0023024551893939403, "phrase": "fast_matching_speed"}, {"score": 0.0022634699331607615, "phrase": "multiple_engines"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["regular expression", " DFA", " sparse matrix", " FPGA"], "paper_abstract": "Regular expression matching is widely used in many programming languages and applications. A regular expression is transformed into a deterministic finite automata (DFA) for processing. However, the DFA requires large memory resources because of the state blowup problem. Many algorithms have been proposed to compress the DFA storage and generally store the compressed DFA in sparse matrix format. For field-programmable gate array (FPGA)-based implementations, operations on sparse matrix consume multiple clock cycles, thus reducing the flexibility and performance of applications. To accelerate the regular expression matching, we present a compact sparse matrix format for storing the compressed DFA transition table on the FPGA. Taking advantage of the special properties of sparse matrices generated by DFAs, we can accomplish one access within a single clock cycle. Furthermore, we develop a regular expression matching engine on a Xilinx (Xilinx Inc. Location: 2100 Logic Dr, San Jose, CA 95124-3400, USA) Virtex-6 FPGA chip using this sparse matrix format. Compared with previous solutions, this regular expression matching engine has more flexibility while keeping high compression ratio. The results show that this regular expression matching engine saves 94% of memory space compared with the original DFA structure while keeping a fast matching speed. By running multiple engines in parallel, our design achieves a throughput up to 29Gbps. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "An efficient sparse matrix format for accelerating regular expression matching on field-programmable gate arrays", "paper_id": "WOS:000346335900003"}