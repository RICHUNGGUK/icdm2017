{"auto_keywords": [{"score": 0.0459014287664594, "phrase": "mapreduce"}, {"score": 0.007050588801127303, "phrase": "complex_data_analysis_tasks"}, {"score": 0.006909679805634688, "phrase": "multiple_data_sets"}, {"score": 0.00481495049065317, "phrase": "map-join-reduce"}, {"score": 0.004734448316824488, "phrase": "efficient_data_analysis"}, {"score": 0.0047026237903774895, "phrase": "large_clusters"}, {"score": 0.004671012181488876, "phrase": "data_analysis"}, {"score": 0.004623990904432388, "phrase": "important_functionality"}, {"score": 0.004592905436175987, "phrase": "cloud_computing"}, {"score": 0.004531357177195719, "phrase": "huge_amount"}, {"score": 0.004322333439660409, "phrase": "popular_way"}, {"score": 0.004235717186207754, "phrase": "cloud_environment"}, {"score": 0.004164858807302222, "phrase": "good_fault_tolerance"}, {"score": 0.004081385289516914, "phrase": "parallel_databases"}, {"score": 0.0037133478610481994, "phrase": "common_concern"}, {"score": 0.003344332868248692, "phrase": "mapreduce_runtime_framework"}, {"score": 0.0032006810120751524, "phrase": "filtering-join-aggregation_programming_model"}, {"score": 0.003136471009987959, "phrase": "mapreduce's_filtering-aggregation_programming_model"}, {"score": 0.003063180586734181, "phrase": "new_data_processing_strategy"}, {"score": 0.003032295420569351, "phrase": "filtering-join-aggregation_tasks"}, {"score": 0.002951444412262927, "phrase": "first_job"}, {"score": 0.002843772431469196, "phrase": "qualified_tuples"}, {"score": 0.0027961342030212353, "phrase": "join_results"}, {"score": 0.0027492917990724467, "phrase": "partial_aggregation"}, {"score": 0.002721562843196732, "phrase": "second_job"}, {"score": 0.002694112801983161, "phrase": "partial_aggregation_results"}, {"score": 0.0026579417954765137, "phrase": "final_answer"}, {"score": 0.0025180372061991206, "phrase": "frequent_checkpointing"}, {"score": 0.0024842242921857705, "phrase": "intermediate_results"}, {"score": 0.0024016604071771556, "phrase": "current_mapreduce-based_systems"}, {"score": 0.0023534431354367866, "phrase": "hive"}, {"score": 0.0021921581733031514, "phrase": "tpc-h_benchmark"}, {"score": 0.0021049977753042253, "phrase": "complex_analysis_queries"}], "paper_keywords": ["Cloud computing", " parallel systems", " query processing"], "paper_abstract": "Data analysis is an important functionality in cloud computing which allows a huge amount of data to be processed over very large clusters. MapReduce is recognized as a popular way to handle data in the cloud environment due to its excellent scalability and good fault tolerance. However, compared to parallel databases, the performance of MapReduce is slower when it is adopted to perform complex data analysis tasks that require the joining of multiple data sets in order to compute certain aggregates. A common concern is whether MapReduce can be improved to produce a system with both scalability and efficiency. In this paper, we introduce Map-Join-Reduce, a system that extends and improves MapReduce runtime framework to efficiently process complex data analysis tasks on large clusters. We first propose a filtering-join-aggregation programming model, a natural extension of MapReduce's filtering-aggregation programming model. Then, we present a new data processing strategy which performs filtering-join-aggregation tasks in two successive MapReduce jobs. The first job applies filtering logic to all the data sets in parallel, joins the qualified tuples, and pushes the join results to the reducers for partial aggregation. The second job combines all partial aggregation results and produces the final answer. The advantage of our approach is that we join multiple data sets in one go and thus avoid frequent checkpointing and shuffling of intermediate results, a major performance bottleneck in most of the current MapReduce-based systems. We benchmark our system against Hive, a state-of-the-art MapReduce-based data warehouse on a 100-node cluster on Amazon EC2 using TPC-H benchmark. The results show that our approach significantly boosts the performance of complex analysis queries.", "paper_title": "MAP-JOIN-REDUCE: Toward Scalable and Efficient Data Analysis on Large Clusters", "paper_id": "WOS:000292888400003"}