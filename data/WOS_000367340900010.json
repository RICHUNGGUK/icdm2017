{"auto_keywords": [{"score": 0.03927191262393186, "phrase": "implementation_system"}, {"score": 0.035884478140401375, "phrase": "implementation_systems"}, {"score": 0.004474645041899596, "phrase": "optimized_reactive_systems"}, {"score": 0.004270665568018583, "phrase": "reactive_systems"}, {"score": 0.003614895644619489, "phrase": "specification_system"}, {"score": 0.0032925489316383955, "phrase": "\"_specification_states"}, {"score": 0.0029988599391845517, "phrase": "skipping_refinement"}, {"score": 0.0027131212233443137, "phrase": "specification_step"}, {"score": 0.0025042115651986332, "phrase": "refinement_theorems"}, {"score": 0.0021049977753042253, "phrase": "vector_compiler_transformation"}], "paper_keywords": [""], "paper_abstract": "We describe three case studies illustrating the use of ACL2s to prove the correctness of optimized reactive systems using skipping refinement. Reasoning about reactive systems using refinement involves defining an abstract, high-level specification system and a concrete, low-level implementation system. Next, one shows that the behaviors of the implementation system are allowed by the specification system. Skipping refinement allows us to reason about implementation systems that can \"skip\" specification states due to optimizations that allow the implementation system to take several specification steps at once. Skipping refinement also allows implementation systems to stutter, i.e., to take several steps before completing a specification step. We show how ACL2s can be used to prove skipping refinement theorems by modeling and proving the correctness of three systems: a JVM-inspired stack machine, a simple memory controller, and a scalar to vector compiler transformation.", "paper_title": "Proving Skipping Refinement with ACL2s", "paper_id": "WOS:000367340900010"}