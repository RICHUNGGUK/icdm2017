{"auto_keywords": [{"score": 0.04630542274767929, "phrase": "neural_networks"}, {"score": 0.023227301113361, "phrase": "orthogonal_projection"}, {"score": 0.023065493239874904, "phrase": "crosswise_propagation"}, {"score": 0.019224733494349534, "phrase": "different_architectures"}, {"score": 0.004696407360309416, "phrase": "common_practice"}, {"score": 0.0045971138571344345, "phrase": "hidden_neurons"}, {"score": 0.004389089062127892, "phrase": "indispensable_role"}, {"score": 0.004342430078306461, "phrase": "architecture_manipulation"}, {"score": 0.0042354707960660706, "phrase": "succinct_and_unified_mathematical_form"}, {"score": 0.004160681347769684, "phrase": "generic_case"}, {"score": 0.004000741805312148, "phrase": "feedforward_layer"}, {"score": 0.0037789720824759503, "phrase": "trained_neural_network"}, {"score": 0.003633652174971415, "phrase": "first_stage"}, {"score": 0.0035949949979695063, "phrase": "output_vectors"}, {"score": 0.0035567476133074533, "phrase": "feedforward_observation_layer"}, {"score": 0.0034567253581991226, "phrase": "second_stage"}, {"score": 0.003195885276330599, "phrase": "least_information_loss"}, {"score": 0.003150612723641925, "phrase": "third_stage"}, {"score": 0.0031170783606525856, "phrase": "previous_located_neuron"}, {"score": 0.002912803994461996, "phrase": "neural_network"}, {"score": 0.002881793492919646, "phrase": "pruned_architecture"}, {"score": 0.0025525322651112365, "phrase": "support_vector_machine"}, {"score": 0.002480680078868508, "phrase": "theory_large-scale_applications"}, {"score": 0.0024281181691350085, "phrase": "real_world"}, {"score": 0.0023766673143502384, "phrase": "minor_modifications"}, {"score": 0.0023513512089705325, "phrase": "unified_method"}, {"score": 0.0022608057001451414, "phrase": "similar_network_structure"}, {"score": 0.0021582723621960693, "phrase": "unified_pruning_method"}, {"score": 0.0021049977753042253, "phrase": "effective_and_powerful_tool"}], "paper_keywords": ["Neuron removal", " Orthogonal projection", " Crosswise propagation", " Feedforward layer", " Neural networks"], "paper_abstract": "It is a common practice to adjust the number of hidden neurons in training, and the removal of neurons in neural networks plays an indispensable role in this architecture manipulation. In this paper, a succinct and unified mathematical form is upgraded to the generic case for removing neurons based on orthogonal projection and crosswise propagation in a feedforward layer with different architectures of neural networks, and further developed for several neural networks with different architectures. For a trained neural network, the method is divided into three stages. In the first stage, the output vectors of the feedforward observation layer are classified to clusters. In the second stage, the orthogonal projection is performed to locate a neuron whose output vector can be approximated by the other output vectors in the same cluster with the least information loss. In the third stage, the previous located neuron is removed and the crosswise propagation is implemented in each cluster. On accomplishment of the three stages, the neural network with the pruned architecture is retrained. If the number of clusters is one, the method is degenerated into its special case with only one neuron being removed. The applications to different architectures of neural networks with an extension to the support vector machine are exemplified. The methodology supports in theory large-scale applications of neural networks in the real world. In addition, with minor modifications, the unified method is instructive in pruning other networks as far as they have similar network structure to the ones in this paper. It is concluded that the unified pruning method in this paper equips us an effective and powerful tool to simplify the architecture in neural networks.", "paper_title": "A unified mathematical form for removing neurons based on orthogonal projection and crosswise propagation", "paper_id": "WOS:000275755000010"}