{"auto_keywords": [{"score": 0.037784136711499806, "phrase": "sampling-based_approach"}, {"score": 0.00481495049065317, "phrase": "sampling-based_execution_monitoring_and_tracing"}, {"score": 0.004709193603747991, "phrase": "important_phase"}, {"score": 0.004646852519870358, "phrase": "embedded_software_development_cycle"}, {"score": 0.004524624065803229, "phrase": "overall_cost"}, {"score": 0.00446471538346719, "phrase": "product_development"}, {"score": 0.004347256848088215, "phrase": "real-time_applications"}, {"score": 0.004103212598803194, "phrase": "often_a_resource_constrained_environment"}, {"score": 0.003995226376780718, "phrase": "real-time_systems"}, {"score": 0.0036715973701254823, "phrase": "deadline_constraints"}, {"score": 0.003404244237372396, "phrase": "traditional_monitoring"}, {"score": 0.0032706520949775065, "phrase": "high_overhead"}, {"score": 0.0031006232333900055, "phrase": "monitoring_effort"}, {"score": 0.0027010719929751, "phrase": "interesting_problems"}, {"score": 0.002427372728532664, "phrase": "related_work"}, {"score": 0.0023951660734372877, "phrase": "first_part"}, {"score": 0.0023010815714140467, "phrase": "second_component"}, {"score": 0.0022304616068189575, "phrase": "different_instrumentation_schemes"}, {"score": 0.0021049977753042253, "phrase": "sampling-based_execution_monitoring"}], "paper_keywords": ["Theory", " Algorithms", " Experimentation", " sampling", " monitoring", " tracing", " debugging", " embedded system"], "paper_abstract": "Debugging is an important phase in the embedded software development cycle because of its high proportion in the overall cost in the product development. Debugging is difficult for real-time applications as such programs are time-sensitive and must meet deadlines in often a resource constrained environment. A common approach for real-time systems is to monitor the execution instead of stepping through the program, because stepping will usually violate all deadline constraints. We consider a sampling-based approach for monitoring, because of its predictable overhead for the system compared to traditional monitoring. However, the sampling-based approach can easily have high overhead depending on the length of branches and the granularity of the monitoring effort. To reduce this overhead, we instrument the program with markers that will permit us to sample less frequently and thus reduce the overhead. This leads to the interesting problems of (a) where to place the markers in the code and (b) how to manipulate the markers. While related work investigates the first part, in this work, we investigate the second component of the problem. We investigate different instrumentation schemes and propose two new schemes based on bitvectors that significantly reduce the overhead for sampling-based execution monitoring.", "paper_title": "Lowering Overhead in Sampling-based Execution Monitoring and Tracing", "paper_id": "WOS:000294608700011"}