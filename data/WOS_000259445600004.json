{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object_layout_schemes"}, {"score": 0.004363277689798392, "phrase": "language-independent_object_layout_scheme"}, {"score": 0.0038470175104007524, "phrase": "single_type_identifier"}, {"score": 0.003661987607713536, "phrase": "cecil"}, {"score": 0.0036220892404915128, "phrase": "dylan"}, {"score": 0.003485824905231454, "phrase": "extra_levels"}, {"score": 0.0030229485340586473, "phrase": "field_access_efficiency"}, {"score": 0.002989991779830814, "phrase": "standard_implementations"}, {"score": 0.0026213749921120623, "phrase": "field_access_operations"}, {"score": 0.002550481822137976, "phrase": "whole-program_analysis"}, {"score": 0.0024276590297034064, "phrase": "contemporary_architecture"}, {"score": 0.0021874023741762496, "phrase": "layout_scheme"}, {"score": 0.002163535133532765, "phrase": "separate_compilation"}, {"score": 0.0021049977753042253, "phrase": "virtual_inheritance_edge"}], "paper_keywords": ["algorithms", " design", " measurement", " performance", " theory", " bidirectional", " coloring", " hierarchy", " inheritance", " layout"], "paper_abstract": "Object layout schemes used in C++ and other languages rely on (sometimes numerous) compiler generated fields. We describe a language-independent object layout scheme, which is space optimal, that is, objects are contiguous, and contain no compiler generated fields other than a single type identifier. As in C++ and other multiple inheritance languages such as CECIL and DYLAN, the new scheme sometimes requires extra levels of indirection to access some of the fields. Using a data set of 28 hierarchies, totaling almost 50,000 types, we show that this scheme improves field access efficiency over standard implementations, and competes favorably with (the non-space-optimal) highly optimized C++ specific implementations. The benchmark includes an analytical model for computing the frequency of indirections in a sequence of field access operations. Our layout scheme relies on whole-program analysis, which requires about 10 microseconds per type on a contemporary architecture (Pentium III, 900Mhz, 256MB machine), even in very large hierarchies. We also present a layout scheme for separate compilation using the user-annotation of virtual inheritance edge that is used in C++.", "paper_title": "Two-dimensional bidirectional object layout", "paper_id": "WOS:000259445600004"}