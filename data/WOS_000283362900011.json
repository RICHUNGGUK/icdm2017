{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "task_scheduling"}, {"score": 0.049496721057450455, "phrase": "communication_contention"}, {"score": 0.04892132379047204, "phrase": "parallel_embedded_systems"}, {"score": 0.004641351004344458, "phrase": "modern_embedded_systems"}, {"score": 0.004529093447865156, "phrase": "multiple_cores"}, {"score": 0.004392565073466714, "phrase": "parallel_applications"}, {"score": 0.0038389110156920926, "phrase": "five_groups"}, {"score": 0.0037921662574137535, "phrase": "node_levels"}, {"score": 0.0034804536625952596, "phrase": "node_priorities"}, {"score": 0.003417054482155433, "phrase": "node_lists"}, {"score": 0.003334309053314909, "phrase": "critical_child_technique"}, {"score": 0.0031553611552558986, "phrase": "scheduling_process"}, {"score": 0.0030601162942933665, "phrase": "communication_delay_technique"}, {"score": 0.0030043508031729277, "phrase": "idle_time_intervals"}, {"score": 0.0029677378488677983, "phrase": "communication_links"}, {"score": 0.0028605468171961457, "phrase": "advanced_dynamic_list"}, {"score": 0.002723607240517261, "phrase": "experimental_results"}, {"score": 0.0026576091519087065, "phrase": "combined_advanced_dynamic_heuristic"}, {"score": 0.0025615908073796027, "phrase": "schedule_length"}, {"score": 0.0024842242921857705, "phrase": "randomly_generated_dags"}, {"score": 0.002409188797323273, "phrase": "medium_and_high_communication"}, {"score": 0.002210903392596343, "phrase": "high_communication"}, {"score": 0.0021049977753042253, "phrase": "hardware_resources"}], "paper_keywords": ["list scheduling", " communication contention", " node level", " critical child", " communication delay"], "paper_abstract": "Modern embedded systems tend to use multiple cores or processors for processing parallel applications. This paper indeed aims at task scheduling with communication contention for parallel embedded systems and proposes three advanced techniques to improve the list scheduling heuristic. Five groups of node levels (two existing groups and three new groups) are firstly used as node priorities to generate node lists. Then the critical child technique improves the selection of a processor in the scheduling process. Finally, the communication delay technique enlarges the idle time intervals on communication links. We also propose an advanced dynamic list scheduling heuristic by combining the three techniques. Experimental results show that the combined advanced dynamic heuristic is efficient to shorten the schedule length for most of the randomly generated DAGs in the cases of medium and high communication. Our method accelerates an application up to 80% in the case of high communication and can also reduce the use of hardware resources.", "paper_title": "Advanced list scheduling heuristic for task scheduling with communication contention for parallel embedded systems", "paper_id": "WOS:000283362900011"}