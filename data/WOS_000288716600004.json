{"auto_keywords": [{"score": 0.03835682907912186, "phrase": "model_checking"}, {"score": 0.009803633056236901, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "consensus_algorithms"}, {"score": 0.004477270137801732, "phrase": "fault-tolerant_distributed_computing_systems"}, {"score": 0.0041357305373417455, "phrase": "particular_problem"}, {"score": 0.0039748192550806815, "phrase": "semi-automatic_verification_approach"}, {"score": 0.0035755653799043, "phrase": "widely_practiced_verification_method"}, {"score": 0.0035052810710060893, "phrase": "state_traversal"}, {"score": 0.0033245147666408157, "phrase": "state_space"}, {"score": 0.0028549396580672417, "phrase": "verification_problem"}, {"score": 0.0028173769301594745, "phrase": "small_model_checking_problems"}, {"score": 0.0027256122357680393, "phrase": "algorithm_execution"}], "paper_keywords": ["Consensus", " Model checking", " Fault-tolerant distributed algorithms", " Formal verification"], "paper_abstract": "Consensus is at the heart of fault-tolerant distributed computing systems. Much research has been devoted to developing algorithms for this particular problem. This paper presents a semi-automatic verification approach for asynchronous consensus algorithms, aiming at facilitating their development. Our approach uses model checking, a widely practiced verification method based on state traversal. The challenge here is that the state space of these algorithms is huge, often infinite, thus making model checking infeasible. The proposed approach addresses this difficulty by reducing the verification problem to small model checking problems that involve only single phases of algorithm execution. Because a phase consists of a small, finite number of rounds, bounded model checking, a technique using satisfiability solving, can be effectively used to solve these problems. The proposed approach allows us to model check several consensus algorithms up to around 10 processes.", "paper_title": "Verification of consensus algorithms using satisfiability solving", "paper_id": "WOS:000288716600004"}