{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "processing_architecture"}, {"score": 0.004724708238414131, "phrase": "event_processing"}, {"score": 0.0046361494357125355, "phrase": "event_and_stream_data_processing_models"}, {"score": 0.004380265418103948, "phrase": "diverse_application_domains"}, {"score": 0.003984665807155269, "phrase": "critical_need"}, {"score": 0.0038608730929994696, "phrase": "newer_class"}, {"score": 0.0038124354878360032, "phrase": "pervasive_and_sensor-based_monitoring_applications"}, {"score": 0.0036476222647061243, "phrase": "interesting_simple_events"}, {"score": 0.00353426342004404, "phrase": "stream_processing"}, {"score": 0.003297080148944292, "phrase": "appropriate_actions"}, {"score": 0.0028692628457408025, "phrase": "stream_computations"}, {"score": 0.0027625134766418266, "phrase": "complex_events"}, {"score": 0.0027278178983579085, "phrase": "continuous_queries"}, {"score": 0.002560751416355291, "phrase": "uninteresting_events"}, {"score": 0.0023887436047824386, "phrase": "stream_modifiers"}, {"score": 0.002299830460180699, "phrase": "stream_operators"}, {"score": 0.0022709326810964386, "phrase": "computing_changes"}, {"score": 0.0022423971916457662, "phrase": "stream_data"}, {"score": 0.0021317885325570604, "phrase": "functional_modules"}, {"score": 0.0021049977753042253, "phrase": "estream"}], "paper_keywords": [""], "paper_abstract": "Both event and stream data processing models have been researched independently and are utilized in diverse application domains. Although they complement each other in terms of their functionality, there is a critical need for their synergistic integration to serve newer class of pervasive and sensor-based monitoring applications. For instance, many advanced applications generate interesting simple events as a result of stream processing that need to be further composed and detected for triggering appropriate actions. In this paper, we present EStream, an approach for integrating event and stream processing for monitoring changes on stream computations and for expressing and processing complex events on continuous queries (CQs). We introduce masks for reducing uninteresting events and for detecting events correctly and efficiently. We discuss stream modifiers, a special class of stream operators for computing changes over stream data. We also briefly discuss architecture and functional modules of EStream.", "paper_title": "Extensions to stream processing architecture for supporting event processing", "paper_id": "WOS:000241155300092"}