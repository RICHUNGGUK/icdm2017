{"auto_keywords": [{"score": 0.03670516544088248, "phrase": "subenum"}, {"score": 0.019323507877114388, "phrase": "input_graph"}, {"score": 0.006933190773624851, "phrase": "-subgraph_enumeration"}, {"score": 0.005493272989699241, "phrase": "available_solutions"}, {"score": 0.00481495049065317, "phrase": "multicore_machines"}, {"score": 0.004621984064678252, "phrase": "important_task"}, {"score": 0.004565609517511076, "phrase": "complex_networks"}, {"score": 0.0045284072672385975, "phrase": "valuable_information"}, {"score": 0.003513443975425428, "phrase": "parallel_solution"}, {"score": 0.0030069962181403487, "phrase": "efficient_execution"}, {"score": 0.0029824560656987855, "phrase": "current_multicore"}, {"score": 0.0029581155916843663, "phrase": "multiprocessor_machines"}, {"score": 0.0028744731986533076, "phrase": "fast_heuristic"}, {"score": 0.0028161764476743257, "phrase": "non-isomorphism_subgraph_enumeration"}, {"score": 0.0027477745788313163, "phrase": "external_memory"}, {"score": 0.0026159017392986595, "phrase": "main_memory_limits"}, {"score": 0.002583931950389087, "phrase": "used_machine"}, {"score": 0.002510843167476253, "phrase": "large_input_graphs"}, {"score": 0.0024903420152789135, "phrase": "subgraph_sizes"}, {"score": 0.002380534385718454, "phrase": "real-world_input_graphs"}, {"score": 0.0022111720236287547, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "additional_processor_cores"}], "paper_keywords": [""], "paper_abstract": "Enumerating all subgraphs of an input graph is an important task for analyzing complex networks. Valuable information can be extracted about the characteristics of the input graph using all-subgraph enumeration. Notwithstanding, the number of subgraphs grows exponentially with growth of the input graph or by increasing the size of the subgraphs to be enumerated. Hence, all-subgraph enumeration is very time consuming when the size of the subgraphs or the input graph is big. We propose a parallel solution named Subenum which in contrast to available solutions can perform much faster. Subenum enumerates subgraphs using edges instead of vertices, and this approach leads to a parallel and load-balanced enumeration algorithm that can have efficient execution on current multicore and multiprocessor machines. Also, Subenum uses a fast heuristic which can effectively accelerate non-isomorphism subgraph enumeration. Subenum can efficiently use external memory, and unlike other subgraph enumeration methods, it is not associated with the main memory limits of the used machine. Hence, Subenum can handle large input graphs and subgraph sizes that other solutions cannot handle. Several experiments are done using real-world input graphs. Compared to the available solutions, Subenum can enumerate subgraphs several orders of magnitude faster and the experimental results show that the performance of Subenum scales almost linearly by using additional processor cores.", "paper_title": "Fast Parallel All-Subgraph Enumeration Using Multicore Machines", "paper_id": "WOS:000357220000001"}