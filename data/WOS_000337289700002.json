{"auto_keywords": [{"score": 0.0480541370476937, "phrase": "system_time_unit"}, {"score": 0.030782777001226964, "phrase": "bf"}, {"score": 0.010383623143110516, "phrase": "sporadic_tasks"}, {"score": 0.009435746916141805, "phrase": "scheduling_decisions"}, {"score": 0.00481495049065317, "phrase": "optimal_boundary"}, {"score": 0.0044759626695474106, "phrase": "real-time_scheduling_algorithms"}, {"score": 0.0044169318855693356, "phrase": "discrete-time_model"}, {"score": 0.004358676214574977, "phrase": "timing_requirements"}, {"score": 0.004244449986839909, "phrase": "integer_multiples"}, {"score": 0.003906357144047631, "phrase": "minimum_amount"}, {"score": 0.003716520760680603, "phrase": "zhu_et_al"}, {"score": 0.0034203358208034973, "phrase": "efficient_\"boundary_fair\"_algorithm"}, {"score": 0.003286642683771891, "phrase": "periodic_tasks"}, {"score": 0.003254041350487688, "phrase": "full_system_utilization"}, {"score": 0.0030447855364295015, "phrase": "optimal_boundary-fair_scheduling_algorithm"}, {"score": 0.0028394925080958205, "phrase": "job_arrival_times"}, {"score": 0.002792683583705368, "phrase": "task_deadlines"}, {"score": 0.0027649684074145028, "phrase": "new_algorithm"}, {"score": 0.00272847191481718, "phrase": "linux"}, {"score": 0.0026480044868438875, "phrase": "multicore_machine"}, {"score": 0.002604343990620731, "phrase": "state-of-the-art_discrete-time_optimal_scheduler"}, {"score": 0.002453027723284009, "phrase": "experimental_results"}, {"score": 0.002349316233301545, "phrase": "pd"}, {"score": 0.002249811525923913, "phrase": "discrete-time_systems"}, {"score": 0.0021049977753042253, "phrase": "time_resolution"}], "paper_keywords": ["Real-time", " Scheduling", " Optimal", " Discrete-time", " Multiprocessor", " Fairness"], "paper_abstract": "Nowadays, many real-time operating systems discretize the time relying on a system time unit. To take this behavior into account, real-time scheduling algorithms must adopt a discrete-time model in which both timing requirements of tasks and their time allocations have to be integer multiples of the system time unit. That is, tasks cannot be executed for less than one time unit, which implies that they always have to achieve a minimum amount of work before they can be preempted. Assuming such a discrete-time model, the authors of Zhu et al. (Proceedings of the 24th IEEE international real-time systems symposium (RTSS 2003), 2003, J Parallel Distrib Comput 71(10):1411-1425, 2011) proposed an efficient \"boundary fair\" algorithm (named BF) and proved its optimality for the scheduling of periodic tasks while achieving full system utilization. However, BF cannot handle sporadic tasks due to their inherent irregular and unpredictable job release patterns. In this paper, we propose an optimal boundary-fair scheduling algorithm for sporadic tasks (named BF), which follows the same principle as BF by making scheduling decisions only at the job arrival times and (expected) task deadlines. This new algorithm was implemented in Linux and we show through experiments conducted upon a multicore machine that BF outperforms the state-of-the-art discrete-time optimal scheduler (PD), benefiting from much less scheduling overheads. Furthermore, it appears from these experimental results that BF is barely dependent on the length of the system time unit while PD-the only other existing solution for the scheduling of sporadic tasks in discrete-time systems-sees its number of preemptions, migrations and the time spent to take scheduling decisions increasing linearly when improving the time resolution of the system.", "paper_title": "An optimal boundary fair scheduling", "paper_id": "WOS:000337289700002"}