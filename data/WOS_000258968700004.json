{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "asp_programs"}, {"score": 0.004692227830462433, "phrase": "microprocessor_technologies"}, {"score": 0.0045726187330434025, "phrase": "multi-core_architectures"}, {"score": 0.004320055598195391, "phrase": "power_consumption"}, {"score": 0.004231699728933577, "phrase": "real_symmetric_multiprocessing"}, {"score": 0.004188237513865306, "phrase": "smp"}, {"score": 0.004081385289516914, "phrase": "nondedicated_machines"}, {"score": 0.0038758293658651237, "phrase": "better_performing_software"}, {"score": 0.0037769520261285872, "phrase": "recent_application"}, {"score": 0.0037381083634085424, "phrase": "answer_set_programming"}, {"score": 0.0036427316134070007, "phrase": "different_emerging_areas"}, {"score": 0.0035681790580031998, "phrase": "knowledge_management"}, {"score": 0.003405948098114941, "phrase": "crucial_issue"}, {"score": 0.003353521531649663, "phrase": "asp_systems"}, {"score": 0.0031845067058084583, "phrase": "instantiation_process"}, {"score": 0.003071274938566466, "phrase": "variable-free_program"}, {"score": 0.002841971477743441, "phrase": "computational_viewpoint"}, {"score": 0.002740885774408238, "phrase": "huge_input_data"}, {"score": 0.0026570998719084153, "phrase": "new_strategy"}, {"score": 0.0023958326775913165, "phrase": "grounding_module"}, {"score": 0.002358917661465133, "phrase": "dlv_system"}, {"score": 0.00226322835801988, "phrase": "experimental_analysis"}, {"score": 0.0021049977753042253, "phrase": "asp_instantiation"}], "paper_keywords": ["Answer Set Programming", " Disjunctive Logic Programming", " instantiation", " parallelism"], "paper_abstract": "In the last few years, microprocessor technologies have been moving towards multi-core architectures, in order to improve performance as well as reduce power consumption. This makes real Symmetric MultiProcessing (SMP) available even on nondedicated machines, and paves the way to the development of better performing software. Notably, the recent application of Answer Set Programming (ASP) in different emerging areas, such as knowledge management or information extraction/integration, shows that performance is a crucial issue also for ASP systems. Among the tasks performed by such systems, the instantiation process, which consists of generating a variable-free program equivalent to the input one, is one of the most expensive from a computational viewpoint, especially in the case of huge input data. In this paper a new strategy exploiting parallelism for the instantiation of ASP programs is proposed. An implementation of this strategy and its integration with the grounding module of the DLV system is discussed. The results of an experimental analysis are also presented, which confirm that the strategy is effective in making ASP instantiation more efficient. (c) 2008 Elsevier Inc. All fights reserved.", "paper_title": "Experimenting with parallelism for the instantiation of ASP programs", "paper_id": "WOS:000258968700004"}