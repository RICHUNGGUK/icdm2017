{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "behavioural_specifications"}, {"score": 0.004761494044422926, "phrase": "conventional_scheduling_algorithms"}, {"score": 0.00465634671242413, "phrase": "clock_cycle_duration"}, {"score": 0.004579005794486596, "phrase": "execution_time"}, {"score": 0.004502943680955863, "phrase": "longest_operations"}, {"score": 0.004378958522416482, "phrase": "large_slack_times"}, {"score": 0.00423465514675998, "phrase": "faster_operations"}, {"score": 0.004118026552723285, "phrase": "wasted_times_multi-cycle"}, {"score": 0.003829548069657859, "phrase": "circuit_latency"}, {"score": 0.0036826452656927877, "phrase": "critical_path_operations"}, {"score": 0.0036214184763804034, "phrase": "multi-cycle_operators"}, {"score": 0.003541357671562449, "phrase": "smaller_clock_cycles"}, {"score": 0.0033864888703414903, "phrase": "operation_level"}, {"score": 0.0032747835779400212, "phrase": "circuit_performance"}, {"score": 0.0031845067058084583, "phrase": "selected_latency"}, {"score": 0.003011328068286321, "phrase": "design_methodology"}, {"score": 0.0028635111041882956, "phrase": "previous_techniques"}, {"score": 0.002815864555488112, "phrase": "substantially_faster_circuits"}, {"score": 0.002707741309851526, "phrase": "specification_operations"}, {"score": 0.0022013916728990564, "phrase": "hardware_resources"}, {"score": 0.0021406417439887907, "phrase": "smaller_designs"}], "paper_keywords": ["Scheduling", " High-level synthesis", " Design automation", " Allocation", " Binding"], "paper_abstract": "Conventional scheduling algorithms usually adjust the clock cycle duration to the execution time of the longest operations. This results in large slack times wasted in those cycles with faster operations. To reduce the wasted times multi-cycle and chaining techniques have been employed. Chaining contributes to reduce the circuit latency if it is applied to the critical path operations, and multi-cycle operators usually result in smaller clock cycles. Both techniques are applied at the operation level, and thus their impact on the circuit performance is bounded by the selected latency. Additionally, they have limited reusability. The design methodology presented in this paper overcomes the limitations of previous techniques to obtain substantially faster circuits. It fragments some of the specification operations into several smaller ones that are handled independently. This way, some operations can begin before their predecessors have finished and can also be executed in several unconsecutive cycles. Furthermore, the fragmentation of operations favours the reusability of hardware resources, leading also to smaller designs. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Performance-driven scheduling of behavioural specifications", "paper_id": "WOS:000271114900003"}