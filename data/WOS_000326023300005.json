{"auto_keywords": [{"score": 0.02815456441804583, "phrase": "timing_constraints"}, {"score": 0.00481495049065317, "phrase": "safety_critical_java_programs"}, {"score": 0.004719473826242326, "phrase": "safety-critical_code"}, {"score": 0.004556901872357751, "phrase": "design_patterns"}, {"score": 0.004377921202912336, "phrase": "dynamic_dispatch"}, {"score": 0.004291073117901643, "phrase": "modular_reasoning"}, {"score": 0.004101886428528311, "phrase": "overriding_method"}, {"score": 0.0038048583022763796, "phrase": "method_scale"}, {"score": 0.002534596206835737, "phrase": "overriding_subtype_methods"}, {"score": 0.00242266141176955, "phrase": "precise_modular_verification"}, {"score": 0.002327310963701377, "phrase": "object-oriented_coding"}, {"score": 0.0022582634725291225, "phrase": "subtype_polymorphism"}, {"score": 0.0021802872319258977, "phrase": "safety-critical_software"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["SafeJML", " Safety Critical Java (SCJ)", " Java Modeling Language (JML)", " timing behavior", " duration", " performance", " WCET"], "paper_abstract": "Real-time and safety-critical code could benefit from the use of design patterns and frameworks that rely on subtyping and dynamic dispatch. However, modular reasoning about programs that use subtypes requires that each overriding method obeys the specifications of all methods that it overrides. For example, if method scale is specified in a supertype Vector2d to take at most 42ns to execute, then an override of scale cannot take more than 42ns to execute in any subtype, such as Vector3d. The problem is that subtype objects typically contain more information, such as the z coordinate in Vector3d, and thus their methods often require more time to execute than the methods they override. In this paper, we show how to specify timing constraints for subtypes in a way that both allows overriding subtype methods to have more time to execute and yet permits precise modular verification and checking of timing constraints. Our techniques allow object-oriented coding and design patterns based on subtype polymorphism to be used in real-time and safety-critical software. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Specifying subtypes in Safety Critical Java programs", "paper_id": "WOS:000326023300005"}