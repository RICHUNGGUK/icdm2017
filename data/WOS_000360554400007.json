{"auto_keywords": [{"score": 0.03767880802723059, "phrase": "hybridb_tree"}, {"score": 0.015507073226038729, "phrase": "hybrid_storage_systems"}, {"score": 0.010084209624652, "phrase": "leaf_nodes"}, {"score": 0.00481495049065317, "phrase": "optimizing_b"}, {"score": 0.004716520738331953, "phrase": "flash-memory-based_solid_state_drives"}, {"score": 0.0045726187330434025, "phrase": "computer_systems"}, {"score": 0.004494570360108983, "phrase": "high_price"}, {"score": 0.0044483793824152944, "phrase": "specific_features"}, {"score": 0.004342430078306461, "phrase": "limited_erasure_endurance"}, {"score": 0.004180992206290323, "phrase": "modern_data_centers"}, {"score": 0.004067349981835669, "phrase": "traditional_hard_disks"}, {"score": 0.0038624981944755813, "phrase": "indexing_schemes"}, {"score": 0.003835972725191194, "phrase": "data_management"}, {"score": 0.0034831387139006545, "phrase": "ssd"}, {"score": 0.0034472883424839346, "phrase": "high_time_performance"}, {"score": 0.0034236045013591437, "phrase": "low_buffer_costs"}, {"score": 0.0033419808453225516, "phrase": "new_design"}, {"score": 0.0031845067058084583, "phrase": "huge_leaf_node"}, {"score": 0.002822434555587263, "phrase": "detailed_explanation"}, {"score": 0.0026986685585382347, "phrase": "theoretical_analysis"}, {"score": 0.00256257332478956, "phrase": "tpc-c"}, {"score": 0.002518746501941657, "phrase": "real_hybrid_storage_system"}, {"score": 0.0024928125682236414, "phrase": "hdd"}, {"score": 0.0022322004700942267, "phrase": "best_time_performance"}, {"score": 0.0022092084106039834, "phrase": "fewest_buffer_costs"}, {"score": 0.0021049980887991684, "phrase": "ssd."}], "paper_keywords": ["Hybrid storage", " B plus -tree", " Index structure", " Flash memory", " Huge leaf"], "paper_abstract": "Flash-memory-based solid state drives (SSD) have been widely used in computer systems. Due to the high price and some specific features of SSD such as asymmetric read/write speeds and limited erasure endurance, it has been a very common solution, e.g., in modern data centers, to use hybrid storage systems involving SSD and traditional hard disks (HDD). However, the SSD/HDD-based hybrid storage systems introduce some new problems in the indexing schemes for data management. In this paper, we propose a new B+-tree-based index for such hybrid storage systems, which is called HybridB tree. The HybridB tree aims to reduce the random writes to SSD while keeping high time performance and low buffer costs. Particularly, we introduce a new design called huge leaf to avoid the splits and merges on B+-tree. A huge leaf node contains two or more leaf nodes in different states. We place the leaf nodes on HDD or SSD according to their current states, and dynamically adapt the states of leaf nodes when they are read or updated. After a detailed explanation on the structure and operations of the HybridB tree, we give a theoretical analysis on the costs of the HybridB tree. Then, we conduct experiments on two TPC-C traces, using a real hybrid storage system including one HDD and two SSDs, and compare the performance of our proposal with two implementations of B+-tree, namely the B+-tree on HDD and the B+-tree on SSD/HDD. The results show that our proposal has the best time performance and the fewest buffer costs. Moreover, our proposal is able to effectively reduce the random writes to SSD.", "paper_title": "Optimizing B plus -tree for hybrid storage systems", "paper_id": "WOS:000360554400007"}