{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pipeline_skeletons"}, {"score": 0.04971245563968758, "phrase": "heterogeneous_platforms"}, {"score": 0.02784568589022217, "phrase": "communication_homogeneous_platforms"}, {"score": 0.0047415081747150065, "phrase": "mapping_applications"}, {"score": 0.004705206179790976, "phrase": "parallel_platforms"}, {"score": 0.004651271219032404, "phrase": "challenging_problem"}, {"score": 0.004407599980762272, "phrase": "standard_assumption"}, {"score": 0.004357061494162031, "phrase": "high-level_approach"}, {"score": 0.0042250952759280225, "phrase": "application_developer's_task"}, {"score": 0.0041287394089001405, "phrase": "additional_information"}, {"score": 0.004034572092608487, "phrase": "efficient_mapping"}, {"score": 0.0037937873032347, "phrase": "different_types"}, {"score": 0.003735862292632131, "phrase": "fully_homogeneous_platforms"}, {"score": 0.0037072310568610723, "phrase": "identical_processors"}, {"score": 0.0036788184374592706, "phrase": "interconnection_links"}, {"score": 0.0035810720634458933, "phrase": "identical_links"}, {"score": 0.0035536228914319354, "phrase": "different-speed_processors"}, {"score": 0.0033672608231654897, "phrase": "pipeline_stage"}, {"score": 0.003290403747743492, "phrase": "single_processor"}, {"score": 0.00322769360059123, "phrase": "new_theoretical_complexity_results"}, {"score": 0.003202944392720772, "phrase": "different_mapping_policies"}, {"score": 0.002842655426951218, "phrase": "consecutive_stages"}, {"score": 0.002683125911877974, "phrase": "optimal_interval-based_mapping"}, {"score": 0.00266362716524378, "phrase": "np"}, {"score": 0.002522791642460087, "phrase": "well-known_chains-to-chains_problem"}, {"score": 0.002256155453630723, "phrase": "optimal_result"}, {"score": 0.0021294699637639564, "phrase": "integer_linear_program"}, {"score": 0.0021049977753042253, "phrase": "small_problem_instances"}], "paper_keywords": ["algorithmic skeletons", " pipeline", " scheduling", " complexity results", " heuristics", " heterogeneous cluster"], "paper_abstract": "Mapping applications onto parallel platforms is a challenging problem, that becomes even more difficult when platforms are heterogeneous-nowadays a standard assumption. A high-level approach to parallel programming not only eases the application developer's task, but it also provides additional information which can help realize an efficient mapping of the application. In this paper, we discuss the mapping of pipeline skeletons onto different types of platforms: Fully Homogeneous platforms with identical processors and interconnection links; Communication Homogeneous platforms, with identical links but different-speed processors; and finally, Full, v Heterogeneous platforms. We assume that a pipeline stage must be mapped on a single processor, and we establish new theoretical complexity results for different mapping policies: a mapping can be required to be one-to-one (a processor is assigned at most one stage), or interval-based (a processor is assigned an interval of consecutive stages), or fully general. In particular,we show that determining the optimal interval-based mapping is NP-hard for Communication Homogeneous platforms, and this result assesses the complexity of the well-known chains-to-chains problem for different-speed processors. We provide several efficient polynomial heuristics for the most important policy/platform combination, namely interval-based mappings on Communication Homogeneous platforms. These heuristics are. compared to the optimal result provided by the formulation of the problem in terms of the solution of an integer linear program, for small problem instances. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Mapping pipeline skeletons onto heterogeneous platforms", "paper_id": "WOS:000256804600006"}