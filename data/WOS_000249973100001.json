{"auto_keywords": [{"score": 0.04147932244525566, "phrase": "pe_file"}, {"score": 0.00481495049065317, "phrase": "database_storage_management"}, {"score": 0.004730799017074255, "phrase": "hard_disk_storage_capacity"}, {"score": 0.004624751696958501, "phrase": "hard_disk"}, {"score": 0.004266501496765747, "phrase": "partitioned_exponential_file"}, {"score": 0.004245082197668986, "phrase": "pe"}, {"score": 0.00418134346679498, "phrase": "generic_storage_manager"}, {"score": 0.003876806615011266, "phrase": "intense_update_loads"}, {"score": 0.003751800058095924, "phrase": "long-running_scientific_applications"}, {"score": 0.003639976924872725, "phrase": "proposed_large_synoptic_survey_telescope"}, {"score": 0.003452218803245602, "phrase": "bursty_update_loads"}, {"score": 0.003366233863411861, "phrase": "data_analysis"}, {"score": 0.0032576367435351718, "phrase": "on-disk_sorts"}, {"score": 0.003128761109107491, "phrase": "disk_seek"}, {"score": 0.0030895394261534776, "phrase": "typical_record_insertion"}, {"score": 0.0029598159171592723, "phrase": "benchmarking_experiments"}, {"score": 0.0028715299874549245, "phrase": "multi-attribute_data_records"}, {"score": 0.0028426887945253373, "phrase": "single_numerical_attribute"}, {"score": 0.0027370835853738626, "phrase": "index_and_store_such_data"}, {"score": 0.002437012847684331, "phrase": "best_choice"}, {"score": 0.0022995201714371733, "phrase": "heavy_query_workload"}, {"score": 0.0022535336174186495, "phrase": "intense_insertion_stream"}, {"score": 0.0021697677572213086, "phrase": "spatial_data"}, {"score": 0.0021049977753042253, "phrase": "acceptably_small_query_latencies"}], "paper_keywords": ["storage management", " indexing", " data warehousing"], "paper_abstract": "The rate of increase in hard disk storage capacity continues to outpace the rate of decrease in hard disk seek time. This trend implies that the value of a seek is increasing exponentially relative to the value of storage. With this trend in mind, we introduce the partitioned exponential file ( PE file) which is a generic storage manager that can be customized for many different types of data ( e. g., numerical, spatial, or temporal). The PE file is intended for use in environments with intense update loads and concurrent, analytic queries. Such an environment may be found, for example, in long-running scientific applications which can produce petabytes of data. For example, the proposed Large Synoptic Survey Telescope [ 36] will produce 50-100 petabytes of observational, scientific data over its multi-year lifetime. This database will never be taken off-line, so bursty update loads of tens of terabytes per day must be handled concurrently with data analysis. In the PE file, data are organized as a series of on-disk sorts with a careful, global organization. Because the PE file relies heavily on sequential I/O, only a fraction of a disk seek is required for a typical record insertion or retrieval. In addition to describing the PE file, we also detail a set of benchmarking experiments for T1SM, which is a PE file customized for use with multi-attribute data records ordered on a single numerical attribute. In our benchmarking, we implement and test many competing data organizations that can be used to index and store such data, such as the B+- Tree, the LSM-Tree, the Buffer Tree, the Stepped Merge Method, and the Y-Tree. As expected, no organization is the best over all benchmarks, but our experiments show that T1SM is the best choice in many situations, suggesting that it is the best overall. Specifically, T1SM performs exceptionally well in the case of a heavy query workload that must be handled concurrently with an intense insertion stream. Our experiments show that T1SM ( and its close cousin, the T2SM storage manager for spatial data) can handle very heavy mixed workloads of this type, and still maintain acceptably small query latencies.", "paper_title": "The partitioned exponential file for database storage management", "paper_id": "WOS:000249973100001"}