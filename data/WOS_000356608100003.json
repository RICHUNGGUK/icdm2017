{"auto_keywords": [{"score": 0.025656974412946006, "phrase": "haskell"}, {"score": 0.01331026080020024, "phrase": "latex"}, {"score": 0.00481495049065317, "phrase": "algebraic_operations"}, {"score": 0.0046797114400479135, "phrase": "context-free_grammars"}, {"score": 0.004452078350485375, "phrase": "simple_\"atomic\"_grammars"}, {"score": 0.003916098498242888, "phrase": "search_spaces"}, {"score": 0.0038606630003037864, "phrase": "complex_alignment_problems"}, {"score": 0.0038060092376105414, "phrase": "multiple_input_sequences"}, {"score": 0.003725470458263889, "phrase": "algebraic_expressions"}, {"score": 0.002881793492919646, "phrase": "multiple_grammars"}, {"score": 0.0028409576481842457, "phrase": "different_operations"}, {"score": 0.0028006988338192375, "phrase": "composite_grammars"}, {"score": 0.0024984517279573906, "phrase": "dynamic_programming_algorithms"}, {"score": 0.002359759876402679, "phrase": "domain-specific_language"}, {"score": 0.0021971473452127126, "phrase": "grammar_products"}, {"score": 0.0021049977753042253, "phrase": "external_compiler"}], "paper_keywords": ["linear grammar", " context free grammar", " product structure", " multiple alignment", " Haskell"], "paper_abstract": "We develop a theory of algebraic operations over linear and context-free grammars that makes it possible to combine simple \"atomic\" grammars operating on single sequences into complex, multi-dimensional grammars. We demonstrate the utility of this framework by constructing the search spaces of complex alignment problems on multiple input sequences explicitly as algebraic expressions of very simple one-dimensional grammars. In particular, we provide a fully worked frameshift-aware, semiglobal DNA-protein alignment algorithm whose grammar is composed of products of small, atomic grammars. The compiler accompanying our theory makes it easy to experiment with the combination of multiple grammars and different operations. Composite grammars can be written out in LATEX for documentation and as a guide to implementation of dynamic programming algorithms. An embedding in Haskell as a domain-specific language makes the theory directly accessible to writing and using grammar products without the detour of an external compiler. Software and supplemental files available here: http://www.bioinf.uni-leipzig.de/Software/gramprod/", "paper_title": "Product Grammars for Alignment and Folding", "paper_id": "WOS:000356608100003"}