{"auto_keywords": [{"score": 0.03936222094519933, "phrase": "type_isomorphisms"}, {"score": 0.02540896951381859, "phrase": "equational_system"}, {"score": 0.00481495049065317, "phrase": "curry-style_system_f"}, {"score": 0.004539005582217309, "phrase": "explicit_types"}, {"score": 0.00424734451992536, "phrase": "core_presentation"}, {"score": 0.003974349782102708, "phrase": "programming_languages"}, {"score": 0.003584025547693836, "phrase": "game_model"}, {"score": 0.003378385493203297, "phrase": "game_semantics_universe"}, {"score": 0.0031845067058084613, "phrase": "untyped_part"}, {"score": 0.0028715299874549245, "phrase": "typed_part"}, {"score": 0.002726740692380339, "phrase": "untyped_strategy"}, {"score": 0.0023003498123420237, "phrase": "curry-style_system"}, {"score": 0.0021522261505574018, "phrase": "church-style_isomorphisms"}], "paper_keywords": [""], "paper_abstract": "Curry-style system F, that is, system F with no explicit types in terms, may be viewed as a core presentation of polymorphism from the point of view of programming languages. This paper gives a characterisation of type isomorphisms for this language using a game model, whose intuitions come from both the syntax and the game semantics universe. The model is composed of an untyped part to interpret terms, a notion of arena to interpret types and a typed part to express the fact that an untyped strategy sigma plays on an arena A. By analysing isomorphisms in the model, we prove that the equational system corresponding to type isomorphisms for Curry-style system F is the extension of the equational system for Church-style isomorphisms with a new, non-trivial equation: for all X.A similar or equal to A[for all Y.Y/X] if X appears only positively in A.", "paper_title": "Curry-style type isomorphisms and game semantics", "paper_id": "WOS:000258434500002"}