{"auto_keywords": [{"score": 0.04059534981436556, "phrase": "xml_stream"}, {"score": 0.03905132661225198, "phrase": "stqm"}, {"score": 0.012433907873841321, "phrase": "query_results"}, {"score": 0.011531225250323351, "phrase": "lexical_analyzer"}, {"score": 0.008337135095406309, "phrase": "twig_query"}, {"score": 0.00481495049065317, "phrase": "twig-query_matching"}, {"score": 0.004645959941491617, "phrase": "xml_streams"}, {"score": 0.0044231966846655394, "phrase": "queried_stream_data"}, {"score": 0.004081385289516914, "phrase": "syntactic_twig-query"}, {"score": 0.0036826452656927877, "phrase": "twig_queries"}, {"score": 0.0035851703423654432, "phrase": "syntactic_manner"}, {"score": 0.0032492519841546682, "phrase": "user's_queries"}, {"score": 0.003220315882881027, "phrase": "document_schema"}, {"score": 0.003149094460617212, "phrase": "query_matching"}, {"score": 0.0030656984915295275, "phrase": "incoming_xml_stream"}, {"score": 0.0029978863469038914, "phrase": "xml_structures"}, {"score": 0.0029447150254434842, "phrase": "twig-query_result"}, {"score": 0.0027535633837592597, "phrase": "false_positives"}, {"score": 0.0026330549554033876, "phrase": "experimental_results"}, {"score": 0.0024842242921857705, "phrase": "good_scalability"}, {"score": 0.0024401411219526774, "phrase": "queried_data_size"}, {"score": 0.0024075916292945715, "phrase": "branch_degree"}, {"score": 0.0023437863565921053, "phrase": "proposed_method"}, {"score": 0.002271476019266231, "phrase": "sequence-based_approach"}, {"score": 0.0021915573326125428, "phrase": "proper_solution"}, {"score": 0.002162316557411786, "phrase": "xml_stream_query"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["XML", " Stream query", " Twig query processing", " Syntactic pattern recognition"], "paper_abstract": "Query matching on XML streams is challenging work for querying efficiency when the amount of queried stream data is huge and the data can be streamed in continuously. In this paper, the method Syntactic Twig-Query Matching (STQM) is proposed to process queries on an XML stream and return the query results continuously and immediately. STQM matches twig queries on the XML stream in a syntactic manner by using a lexical analyzer and a parser, both of which are built from our lexical-rules and grammar-rules generators according to the user's queries and document schema, respectively. For query matching, the lexical analyzer scans the incoming XML stream and the parser recognizes XML structures for retrieving every twig-query result from the XML stream. Moreover, STQM obtains query results without a post-phase for excluding false positives, which are common in many streaming query methods. Through the experimental results, we found that STQM matches the twig query efficiently and also has good scalability both in the queried data size and the branch degree of the twig query. The proposed method takes less execution time than that of a sequence-based approach, which is widely accepted as a proper solution to the XML stream query. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "A syntactic approach to twig-query matching on XML streams", "paper_id": "WOS:000290073600009"}