{"auto_keywords": [{"score": 0.045161348664357094, "phrase": "error_tolerance"}, {"score": 0.044464625495560656, "phrase": "computational_cost"}, {"score": 0.03863960768893905, "phrase": "input_functions"}, {"score": 0.02718330184001502, "phrase": "adaptive_algorithms"}, {"score": 0.004488505301335364, "phrase": "approximate_solutions"}, {"score": 0.004392565073466714, "phrase": "exact_solutions"}, {"score": 0.004007083686875716, "phrase": "function_values"}, {"score": 0.003879234831701853, "phrase": "automatic_algorithms"}, {"score": 0.0032629585038738856, "phrase": "two-sided_bounds"}, {"score": 0.003074495313651187, "phrase": "lower_bounds"}, {"score": 0.0028043588777213533, "phrase": "proposed_algorithms"}, {"score": 0.0027741761880779535, "phrase": "optimal_order"}, {"score": 0.0026710653215026685, "phrase": "general_theorems"}, {"score": 0.002613870237087035, "phrase": "univariate_numerical_integration"}, {"score": 0.0025857324180891526, "phrase": "function_recovery"}, {"score": 0.0025167026017217926, "phrase": "linear_splines"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Function recovery", " Guarantee", " Integration", " Quadrature"], "paper_abstract": "Automatic numerical algorithms attempt to provide approximate solutions that differ from exact solutions by no more than a user-specified error tolerance. The computational cost is often determined adaptively by the algorithm based on the function values sampled. While adaptive, automatic algorithms are widely used in practice, most lack guarantees, i.e., conditions on input functions that ensure that the error tolerance is met. This article establishes a framework for guaranteed, adaptive, automatic algorithms. Sufficient conditions for success and two-sided bounds on the computational cost are provided in Theorems 2 and 3. Lower bounds on the complexity of the problem are given in Theorem 6, and conditions under which the proposed algorithms have optimal order are given in Corollary 1. These general theorems are illustrated for univariate numerical integration and function recovery via adaptive algorithms based on linear splines. The key to these adaptive algorithms is performing the analysis for cones of input functions rather than balls. Cones provide a setting where adaption may be beneficial. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "The cost of deterministic, adaptive, automatic algorithms: Cones, not balls", "paper_id": "WOS:000328714600003"}