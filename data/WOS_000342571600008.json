{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "user_space_code"}, {"score": 0.004620093797504386, "phrase": "novel_approach"}, {"score": 0.004360412703519539, "phrase": "cryptographic_hashes"}, {"score": 0.00428892403807229, "phrase": "user_space_memory"}, {"score": 0.003916098498242888, "phrase": "memory_images"}, {"score": 0.003788957620349208, "phrase": "windows"}, {"score": 0.0032109670662222416, "phrase": "malware_samples"}, {"score": 0.0031582637043009562, "phrase": "user_space_components"}, {"score": 0.0029805015010906013, "phrase": "common_windows_applications"}, {"score": 0.0025892330566358503, "phrase": "manual_analysis"}, {"score": 0.0024637379406427878, "phrase": "malicious_code"}, {"score": 0.0022492129111567824, "phrase": "andrew_white"}, {"score": 0.0022122603123901114, "phrase": "bradley_schatz"}, {"score": 0.002175913488493802, "phrase": "ernest_foo"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Memory forensics", " User space", " Windows XP", " Windows 7", " Malware analysis"], "paper_abstract": "We present a novel approach for the construction and application of cryptographic hashes to user space memory for the purposes of verifying the provenance of code in memory images. Several key aspects of Windows behaviour which influence this process are examined in-depth. Our approach is implemented and evaluated on a selection of malware samples with user space components as well as a collection of common Windows applications. The results demonstrate that our approach is highly effective at reducing the amount of memory requiring manual analysis, highlighting the presence of malicious code in all the malware sampled. (C) 2013 Andrew White, Bradley Schatz and Ernest Foo. Published by Elsevier Ltd. All rights reserved.", "paper_title": "Integrity verification of user space code", "paper_id": "WOS:000342571600008"}