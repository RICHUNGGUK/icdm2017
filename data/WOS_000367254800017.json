{"auto_keywords": [{"score": 0.04271344975594989, "phrase": "gpu"}, {"score": 0.014562520455194128, "phrase": "ml_algorithms"}, {"score": 0.011010765400978333, "phrase": "generic_pattern"}, {"score": 0.00481495049065317, "phrase": "optimizing_machine_learning_workloads"}, {"score": 0.004777917315737992, "phrase": "kernel_fusion"}, {"score": 0.004704699244406775, "phrase": "parallel_architectures"}, {"score": 0.004614745158543967, "phrase": "scalable_machine_learning"}, {"score": 0.004491678520807451, "phrase": "wide_range"}, {"score": 0.004422827355213055, "phrase": "linear_algebraic_operators"}, {"score": 0.004355026964936104, "phrase": "blas_libraries"}, {"score": 0.004304856672196293, "phrase": "natural_choice"}, {"score": 0.004015693806064219, "phrase": "complete_ml_algorithms"}, {"score": 0.0038485929962942776, "phrase": "primitive_linear_algebraic_operators"}, {"score": 0.0038189638340666936, "phrase": "matrix-vector_multiplication"}, {"score": 0.0036178264212372497, "phrase": "latter_approach"}, {"score": 0.0035761182400032487, "phrase": "fused_kernels"}, {"score": 0.0035076666315744525, "phrase": "primitive_operators"}, {"score": 0.003427246079774314, "phrase": "popular_ml_algorithms"}, {"score": 0.0029589086332593674, "phrase": "fused_kernel"}, {"score": 0.0028576796380512157, "phrase": "specialized_techniques"}, {"score": 0.0028138046006772567, "phrase": "sparse_and_dense_matrices"}, {"score": 0.002707033618304716, "phrase": "data_loads"}, {"score": 0.002675797331220082, "phrase": "improved_temporal_locality"}, {"score": 0.0025942468561537682, "phrase": "hierarchical_aggregation"}, {"score": 0.00257424957319189, "phrase": "partial_results"}, {"score": 0.0025151755329660837, "phrase": "analytical_model"}, {"score": 0.002486147565139633, "phrase": "input_data_characteristics"}, {"score": 0.0024669814850296146, "phrase": "available_gpu_resources"}, {"score": 0.0024385083712241988, "phrase": "near-optimal_settings"}, {"score": 0.002419708657850547, "phrase": "kernel_launch_parameters"}, {"score": 0.002391779843744166, "phrase": "proposed_approach"}, {"score": 0.0023099082804523044, "phrase": "different_instances"}, {"score": 0.0022481685132781626, "phrase": "multiple_operator-level_kernels"}, {"score": 0.0021049977753042253, "phrase": "end-to-end_performance"}], "paper_keywords": ["Machine Learning", " GPU", " Fused Kernel", " Sparse", " Dense"], "paper_abstract": "Exploitation of parallel architectures has become critical to scalable machine learning (ML). Since a wide range of ML algorithms employ linear algebraic operators, GPUs with BLAS libraries are a natural choice for such an exploitation. Two approaches are commonly pursued: (i) developing specific GPU accelerated implementations of complete ML algorithms; and (i i) developing GPU kernels for primitive linear algebraic operators like matrix-vector multiplication, which are then used in developing ML algorithms. This paper extends the latter approach by developing fused kernels for a combination of primitive operators that are commonly found in popular ML algorithms. We identify the generic pattern of computation (alpha * X-T x (v circle dot (X x y)) + beta * z) and its various instantiations. We develop a fused kernel to optimize this computation on GPUs - with specialized techniques to handle both sparse and dense matrices. This approach not only reduces the cost of data loads due to improved temporal locality but also enables other optimizations like coarsening and hierarchical aggregation of partial results. We also present an analytical model that considers input data characteristics and available GPU resources to estimate near-optimal settings for kernel launch parameters. The proposed approach provides speedups ranging from 2x to 67x for different instances of the generic pattern compared to launching multiple operator-level kernels using GPU accelerated libraries. We conclude by demonstrating the effectiveness of the approach in improving end-to-end performance on an entire ML algorithm.", "paper_title": "On Optimizing Machine Learning Workloads via Kernel Fusion", "paper_id": "WOS:000367254800017"}