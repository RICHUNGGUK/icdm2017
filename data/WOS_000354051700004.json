{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "runtime_fpga_placement"}, {"score": 0.004720043307726269, "phrase": "low-complexity_graph_traversal"}, {"score": 0.004513255056769647, "phrase": "efficient_allocation"}, {"score": 0.0044685410845412745, "phrase": "logic_resources"}, {"score": 0.004402295697276237, "phrase": "new_functionalities"}, {"score": 0.004294052530714228, "phrase": "multiplexing_resources"}, {"score": 0.0037350832473790007, "phrase": "medium_size_circuits"}, {"score": 0.003553540530701019, "phrase": "hardware_modules"}, {"score": 0.003397683082821229, "phrase": "field-programmable_gate_array"}, {"score": 0.00328128909895992, "phrase": "fpga"}, {"score": 0.0032324864013225166, "phrase": "implicit_graph"}, {"score": 0.0031845067058084583, "phrase": "direct_correspondence"}, {"score": 0.003014576010931602, "phrase": "graph_mapping_problem"}, {"score": 0.002955050521440921, "phrase": "node_locality"}, {"score": 0.0029111767710750117, "phrase": "depth-first_traversal"}, {"score": 0.002797329638474873, "phrase": "greedy_heuristic"}, {"score": 0.0027420820738468577, "phrase": "polynomial_time"}, {"score": 0.002544422946205545, "phrase": "similar_solutions"}, {"score": 0.0023259039577313294, "phrase": "fragmented_regions"}, {"score": 0.0022460727898764216, "phrase": "manufacturer-independent_virtual_fpga."}], "paper_keywords": ["Design", " Algorithms", " Performance", " FPGA", " Place and route", " Run-time reconfiguration", " Graph traversal"], "paper_abstract": "Dynamic Partial Reconfiguration (DPaR) enables efficient allocation of logic resources by adding new functionalities or by sharing and/or multiplexing resources over time. Placement and routing (P&R) is one of the most time-consuming steps in the DPaR flow. P&R are two independent NP-complete problems, and, even for medium size circuits, traditional P&R algorithms are not capable of placing and routing hardware modules at runtime. We propose a novel runtime P&R algorithm for Field-Programmable Gate Array (FPGA)-based designs. Our algorithm models the FPGA as an implicit graph with a direct correspondence to the target FPGA. The P&R is performed as a graph mapping problem by exploring the node locality during a depth-first traversal. We perform the P&R using a greedy heuristic that executes in polynomial time. Unlike state-of-the-art algorithms, our approach does not try similar solutions, thus allowing the P&R to execute in milliseconds. Our algorithm is also suitable for P&R in fragmented regions. We generate results for a manufacturer-independent virtual FPGA. Compared with the most popular P&R tool running the same benchmark suite, our algorithm is up to three orders of magnitude faster.", "paper_title": "A Runtime FPGA Placement and Routing Using Low-Complexity Graph Traversal", "paper_id": "WOS:000354051700004"}