{"auto_keywords": [{"score": 0.0494208158242398, "phrase": "in-line_documentation"}, {"score": 0.04877129670463601, "phrase": "natural_language"}, {"score": 0.00481495049065317, "phrase": "quality_factors"}, {"score": 0.004619027561771169, "phrase": "javadocminer"}, {"score": 0.004555499634179394, "phrase": "important_software_engineering_artifact"}, {"score": 0.004370087541308677, "phrase": "software_comprehension"}, {"score": 0.004290112502811656, "phrase": "source_code_documentation"}, {"score": 0.004134508282135594, "phrase": "software_engineers"}, {"score": 0.0037696519417841287, "phrase": "line_documentation"}, {"score": 0.0036328561748082138, "phrase": "programmer's_original_intentions"}, {"score": 0.0031625006830124512, "phrase": "effective_and_automated_approach"}, {"score": 0.0028698706191651155, "phrase": "source_code"}, {"score": 0.0026775328564629577, "phrase": "javadocminer_tool"}, {"score": 0.002640636493247601, "phrase": "different_modules"}, {"score": 0.0024409345168575833, "phrase": "second_part"}, {"score": 0.00229844995872581, "phrase": "bug_defects"}, {"score": 0.0022563011263787847, "phrase": "individual_modules"}, {"score": 0.0021843879253500894, "phrase": "natural_language_documentation"}, {"score": 0.002164264600379492, "phrase": "source_code_quality"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Text mining", " Software engineering", " Source code comments", " Automated quality analysis", " Javadoc", " Ontology"], "paper_abstract": "An important software engineering artifact used by developers and maintainers to assist in software comprehension and maintenance is source code documentation. It provides the insight needed by software engineers when performing a task, and therefore ensuring the quality of this documentation is extremely important. In-line documentation is at the forefront of explaining a programmer's original intentions for a given implementation. Since this documentation is written in natural language, ensuring its quality so far needed to be performed manually. In this paper, we present an effective and automated approach for assessing the quality of in-line documentation using a set of heuristics, targeting both the quality of language and consistency between the source code and its comments. Our evaluation is made up of two parts: We first apply the JavadocMiner tool to the different modules of two open source applications (ArgoUML and Eclipse) in order to automatically assess their intrinsic comment quality. In the second part of our evaluation, we correlate the results returned by the analysis with bug defects reported for the individual modules in order to examine connections between natural language documentation and source code quality. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Assessing the quality factors found in in-line documentation written in natural language: The JavadocMiner", "paper_id": "WOS:000326254900002"}