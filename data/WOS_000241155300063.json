{"auto_keywords": [{"score": 0.03321325200261326, "phrase": "hydex"}, {"score": 0.00481495049065317, "phrase": "high-dimensional_data"}, {"score": 0.004752221133109136, "phrase": "efficient_nearest-neighbor_searches"}, {"score": 0.004392565073466714, "phrase": "data_dimension"}, {"score": 0.0042508289538799905, "phrase": "search_time"}, {"score": 0.004007083686875716, "phrase": "linear_scan"}, {"score": 0.003928969293303814, "phrase": "entire_dataset"}, {"score": 0.003802135020791801, "phrase": "dimensionality_curse"}, {"score": 0.003631390978147703, "phrase": "sensitive_hashing"}, {"score": 0.003584031010584473, "phrase": "lsh"}, {"score": 0.003400640983719424, "phrase": "approximate_searches"}, {"score": 0.0032054891061528896, "phrase": "hypersphere_indexer"}, {"score": 0.002962543869356265, "phrase": "data_space"}, {"score": 0.0029238768315330305, "phrase": "concentric_hyperspheres"}, {"score": 0.0028480459059007468, "phrase": "geometric_properties"}, {"score": 0.0027560092576928595, "phrase": "effective_pruning"}, {"score": 0.0025977542995083646, "phrase": "competing_schemes"}, {"score": 0.002497319603143104, "phrase": "search_accuracy"}, {"score": 0.0022628564592874147, "phrase": "sequential_disk_accesses"}], "paper_keywords": [""], "paper_abstract": "Indexing high-dimensional data for efficient nearest-neighbor searches poses interesting research challenges. It is well known that when data dimension is high, the search time can exceed the time required for performing a linear scan on the entire dataset. To alleviate this dimensionality curse, indexing schemes such as locality sensitive hashing (LSH) and M-trees were proposed to perform approximate searches. In this paper, we propose a hypersphere indexer, named Hydex, to perform such searches. Hydex partitions the data space using concentric hyperspheres. By exploiting geometric properties, Hydex can perform effective pruning. Our empirical study shows that Hydex enjoys three advantages over competing schemes for achieving the same level of search accuracy. First, Hydex requires fewer seek operations. Second, Hydex can maintain sequential disk accesses most of the time. And third, it requires fewer distance computations.", "paper_title": "Hypersphere indexer", "paper_id": "WOS:000241155300063"}