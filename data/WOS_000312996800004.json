{"auto_keywords": [{"score": 0.034940932061321935, "phrase": "injected_faults"}, {"score": 0.03392418631551082, "phrase": "residual_software_faults"}, {"score": 0.00481495049065317, "phrase": "fault_representativeness_of_software_fault_injection"}, {"score": 0.0047113960612140335, "phrase": "software_faults"}, {"score": 0.004670597652149685, "phrase": "software_components"}, {"score": 0.004244375827831527, "phrase": "fault_tolerance"}, {"score": 0.004046020290832207, "phrase": "hardware_fault_injection"}, {"score": 0.003941746077126688, "phrase": "extensive_experimental_study"}, {"score": 0.003535320700255283, "phrase": "g-swfit"}, {"score": 0.0034291991359158827, "phrase": "significant_share"}, {"score": 0.003115908199991072, "phrase": "regression_tests"}, {"score": 0.002957222630196853, "phrase": "fault_location"}, {"score": 0.002868404184756449, "phrase": "different_distributions"}, {"score": 0.0027104531025934865, "phrase": "new_approach"}, {"score": 0.002473420909291381, "phrase": "meaningful_results"}, {"score": 0.0023168823213024856, "phrase": "software_fault_injection_campaigns"}, {"score": 0.002257070536352418, "phrase": "proposed_approach"}, {"score": 0.0022180544041790697, "phrase": "classification_algorithms"}, {"score": 0.0021049977753042253, "phrase": "fault_representativeness"}], "paper_keywords": ["Software fault injection", " experimental dependability evaluation", " software reliability", " fault-tolerant systems"], "paper_abstract": "The injection of software faults in software components to assess the impact of these faults on other components or on the system as a whole, allowing the evaluation of fault tolerance, is relatively new compared to decades of research on hardware fault injection. This paper presents an extensive experimental study (more than 3.8 million individual experiments in three real systems) to evaluate the representativeness of faults injected by a state-of-the-art approach (G-SWFIT). Results show that a significant share (up to 72 percent) of injected faults cannot be considered representative of residual software faults as they are consistently detected by regression tests, and that the representativeness of injected faults is affected by the fault location within the system, resulting in different distributions of representative/nonrepresentative faults across files and functions. Therefore, we propose a new approach to refine the faultload by removing faults that are not representative of residual software faults. This filtering is essential to assure meaningful results and to reduce the cost (in terms of number of faults) of software fault injection campaigns in complex software. The proposed approach is based on classification algorithms, is fully automatic, and can be used for improving fault representativeness of existing software fault injection approaches.", "paper_title": "On Fault Representativeness of Software Fault Injection", "paper_id": "WOS:000312996800004"}