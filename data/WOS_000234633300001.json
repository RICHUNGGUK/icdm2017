{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "round-robin_service"}, {"score": 0.00471003041684707, "phrase": "cpu_scheduling"}, {"score": 0.0046328364646343375, "phrase": "-line_models"}, {"score": 0.004482206282876944, "phrase": "shared_service"}, {"score": 0.00433645229352341, "phrase": "significant_processing_time"}, {"score": 0.004149429072483132, "phrase": "thread-based_systems"}, {"score": 0.003992385826251404, "phrase": "simulation_time"}, {"score": 0.0038624981944755813, "phrase": "scheduled_events"}, {"score": 0.003778253716938922, "phrase": "simulation_results"}, {"score": 0.0033837135367113004, "phrase": "threads-based_simulator"}, {"score": 0.0032916702592724217, "phrase": "potential_job_departures"}, {"score": 0.002947790697936243, "phrase": "previous_approach"}, {"score": 0.002883439044844259, "phrase": "single_arrival"}, {"score": 0.0028360962841331634, "phrase": "single_departure_event"}, {"score": 0.0026986685585382347, "phrase": "prior_proposal"}, {"score": 0.0026543514413663893, "phrase": "run-time_complexity"}, {"score": 0.0025537472239953807, "phrase": "new_algorithm"}, {"score": 0.0023507916951658455, "phrase": "burst_arrivals"}, {"score": 0.0023249757987087055, "phrase": "batch_departures"}, {"score": 0.002286781334850213, "phrase": "reduced_time_complexity"}, {"score": 0.002261666793030715, "phrase": "empirical_results"}, {"score": 0.002175913488493802, "phrase": "previously_proposed_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["scheduling", " event", " threads", " kernel", " red-black", " lookahead", " batch arrivals", " batch departures"], "paper_abstract": "Simulations of CPU scheduling or waiting-line models that involve a server dispersing shared service quanta across jobs can require significant processing time, especially when simulations are supported by thread-based systems. To effect a reduction in simulation time we reduce the number of scheduled events, without affecting simulation results. We present an algorithm for such enhanced round-robin service in discrete-event simulation and implement and test it on a threads-based simulator. The algorithm predicts potential job departures and schedules them in advance, using cancellation and rescheduling when necessary. We generalize and improve upon a previous approach in which a single arrival and a single departure event is handled at a time. While the prior proposal offered a run-time complexity of O(n(2)), the new algorithm accomplishes this in time O(n log n). Further, the generalization also accommodates burst arrivals and batch departures with the reduced time complexity. Empirical results are presented to compare performance with previously proposed algorithms. (C) 2005 Elsevier B.V. All rights reserved.", "paper_title": "An efficient burst-arrival and batch-departure algorithm for round-robin service", "paper_id": "WOS:000234633300001"}