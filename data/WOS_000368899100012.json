{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "unary_languages"}, {"score": 0.0425382298345173, "phrase": "arithmetic_progressions"}, {"score": 0.01279135519752746, "phrase": "unary_alphabet"}, {"score": 0.003984665807155269, "phrase": "regular_expression"}, {"score": 0.003959594975607075, "phrase": "eover"}, {"score": 0.002481085648977413, "phrase": "deterministic_language"}, {"score": 0.0023290951071300433, "phrase": "tight_upper_bound"}, {"score": 0.0022423971916457662, "phrase": "minimal_dfa"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Regular expressions", " Regular expressions with counting", " Deterministic languages", " Minimal DFA", " coNP-complete", " Pi(p)(2)"], "paper_abstract": "In this paper, we investigate the complexity of deciding determinism of unary languages. First, we give a method to derive a set of arithmetic progressions from a regular expression Eover a unary alphabet, and establish relations between numbers represented by these arithmetic progressions and words in L( E). Next, we define a problem relating to arithmetic progressions and investigate the complexity of this problem. Then by a reduction from this problem we show that deciding determinism of unary languages iscoNPcomplete. Finally, we extend our derivation method to expressions with counting, and prove that deciding whether an expression over a unary alphabet with counting defines a deterministic language is in Pi(p)(2). We also establish a tight upper bound for the size of the minimal DFA for expressions with counting. (C) 2015 Elsevier Inc. Allrightsreserved.", "paper_title": "Deciding determinism of unary languages", "paper_id": "WOS:000368899100012"}