{"auto_keywords": [{"score": 0.004317378385832431, "phrase": "consistency_model"}, {"score": 0.004054479957160662, "phrase": "corresponding_consistency"}, {"score": 0.003858241873901003, "phrase": "parameter_values"}, {"score": 0.0037699306119313154, "phrase": "concrete_consistency_model"}, {"score": 0.0033576858946833587, "phrase": "first_algorithm"}, {"score": 0.003132236287543072, "phrase": "causal_and_cache_consistency"}, {"score": 0.0029903851294825023, "phrase": "sequential_algorithm"}, {"score": 0.0028739078688746374, "phrase": "read_operations"}, {"score": 0.0028267211555015295, "phrase": "sequential_consistency"}, {"score": 0.0027619548979328154, "phrase": "full_replication"}, {"score": 0.0025678829712650437, "phrase": "cyclic_turn_fashion"}, {"score": 0.0025090323307618632, "phrase": "dsm_system"}, {"score": 0.0023096222276192194, "phrase": "write_operation"}, {"score": 0.002271679416337276, "phrase": "unnecessary_values"}, {"score": 0.002197649447160344, "phrase": "message_traffic"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["distributed shared memory", " causal consistency", " sequential consistency", " distributed systems", " coherency models"], "paper_abstract": "In this paper, we present an algorithm that can be used to implement sequential, causal, or cache consistency in distributed shared memory (DSM) systems. For this purpose it includes a parameter that allows us to choose the consistency model to be implemented. If all processes run the algorithm with the same value in this parameter, the corresponding consistency is achieved. (Additionally, the algorithm tolerates that processes use certain combination of parameter values.) This characteristic allows a concrete consistency model to be chosen, but implements it with the more efficient algorithm in each case (depending of the requirements of the applications). Additionally, as far as we know, this is the first algorithm proposed that implements cache coherence. In our algorithm, all the read and write operations are executed locally when implementing causal and cache consistency (i.e., they are fast). It is known that no sequential algorithm has only fast memory operations. In our algorithm, however, all the write operations and some read operations are fast when implementing sequential consistency. The algorithm uses propagation and full replication, where the values written by a process are propagated to the rest of the processes. It works in a cyclic turn fashion, with each process of the DSM system, broadcasting one message in turn. The values written by the process are sent in the message (instead of sending one message for each write operation): However, unnecessary values are excluded. All this permits the amount of message traffic owing to the algorithm to be controlled. (c) 2007 Elsevier Inc. All rights reserved.", "paper_title": "A parametrized algorithm that implements sequential, causal, and cache memory consistencies", "paper_id": "WOS:000253060500009"}