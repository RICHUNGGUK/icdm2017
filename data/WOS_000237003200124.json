{"auto_keywords": [{"score": 0.010612387000973441, "phrase": "buffer_overflow_attacks"}, {"score": 0.00465067040500426, "phrase": "new_efficient_pointer_protection_method"}, {"score": 0.004399349717218995, "phrase": "simple_watermark"}, {"score": 0.003802135020791801, "phrase": "pointer_variable"}, {"score": 0.0035222812668916736, "phrase": "pointer's_watermark"}, {"score": 0.0030650070965891653, "phrase": "proposed_scheme"}, {"score": 0.002648448458159033, "phrase": "arbitrary_instructions"}, {"score": 0.002505054869094183, "phrase": "prototype_implementation"}, {"score": 0.002320449502337321, "phrase": "previous_randomization_schemes"}, {"score": 0.002225542510652775, "phrase": "performance_degradation"}], "paper_keywords": ["system security", " buffer overflow", " randomization"], "paper_abstract": "We present a new efficient pointer protection method to defend buffer overflow attacks. It uses a simple watermark to protect the pointer: during dereferencing the pointer variable, a watermark is also written/updated and before referencing the pointer variable, it verifies consistency of the watermark. If the pointer's watermark does not exist or was damaged, our scheme regards this as an intrusion and stops the execution. The proposed scheme has the following strong points. First, unlike other randomization methods, our scheme has no possibility of malfunction caused by the execution of arbitrary instructions. Second. we conducted various experiments on prototype implementation, which showed that our scheme is as Secure as the previous randomization schemes. Third, experimental results showed that the performance degradation is not high. Forth, unlike other randomization schemes, our scheme can support attack profiling.,", "paper_title": "An efficient pointer protection scheme to defend buffer overflow attacks", "paper_id": "WOS:000237003200124"}