{"auto_keywords": [{"score": 0.04896848785083955, "phrase": "cbs"}, {"score": 0.00481495049065317, "phrase": "uml_component-based_system_specification"}, {"score": 0.004747620102130588, "phrase": "component-based_system"}, {"score": 0.004637478829869904, "phrase": "integration_centric"}, {"score": 0.004508661664944657, "phrase": "individual_components"}, {"score": 0.004424768776701965, "phrase": "software_system"}, {"score": 0.00432208488976429, "phrase": "component_source_code_information"}, {"score": 0.004143196873246147, "phrase": "added_properties"}, {"score": 0.003916098498242888, "phrase": "customizability_properties"}, {"score": 0.0038794730876377057, "phrase": "recent_research"}, {"score": 0.003701401653850141, "phrase": "complexity_measure"}, {"score": 0.003649585593445665, "phrase": "specification_phase"}, {"score": 0.00351491577968631, "phrase": "traditional_complexity_metrics"}, {"score": 0.0032449786926227672, "phrase": "loc"}, {"score": 0.003154701855951328, "phrase": "object_and_class_properties"}, {"score": 0.0030097975788892896, "phrase": "new_technique"}, {"score": 0.002912331664922248, "phrase": "cbs_specification"}, {"score": 0.0027916287357898544, "phrase": "structural_complexity_measure"}, {"score": 0.0027139447110929586, "phrase": "unified_modelling_language"}, {"score": 0.0026384167183586015, "phrase": "system_analyst's_point"}, {"score": 0.0025770818511131684, "phrase": "cbss"}, {"score": 0.0025409639091476363, "phrase": "individual_component_descriptions"}, {"score": 0.0023456351719724957, "phrase": "primary_contributors"}, {"score": 0.002280333818940496, "phrase": "cbss."}, {"score": 0.0021755038991725147, "phrase": "university_course_registration_system"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["component-based system", " component-based system specification", " UML", " complexity", " software metrics"], "paper_abstract": "A component-based system (CBS) is integration centric with a focus on assembling individual components to build a software system. In CBS, component source code information is usually unavailable. Each component also introduces added properties such as constraints associated with its use, interactions with other components and customizability properties. Recent research suggests that most faults are found in only a few system components. A complexity measure at a specification phase can identify these components. However, traditional complexity metrics are not adequate for a CBS as they focus mainly on either lines of code (LOC) or information based on object and class properties. There is therefore a need to develop a new technique for measuring the complexity of a CBS specification (CBSS). This paper describes a structural complexity measure for a CBSS written in Unified Modelling Language (UML) from a system analyst's point of view. A CBSS consists of individual component descriptions characterized by its syntactic, semantic and interaction properties. We identify three factors, interface, constraints and interaction, as primary contributors to the complexity of a CBSS. We also present an application of our technique to a university course registration system. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "A complexity measure for UML component-based system specification", "paper_id": "WOS:000253600500001"}