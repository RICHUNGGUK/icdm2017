{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "resource_augmentation"}, {"score": 0.04862420524145178, "phrase": "online_tree_node_assignment_problem"}, {"score": 0.028707554660634755, "phrase": "online_algorithm"}, {"score": 0.027949091265789146, "phrase": "optimal_offline_algorithm"}, {"score": 0.004749377457292245, "phrase": "complete_binary_tree"}, {"score": 0.004716924994370903, "phrase": "height_h"}, {"score": 0.004495854882808791, "phrase": "assignment_request"}, {"score": 0.004434608130268514, "phrase": "integer_parameter"}, {"score": 0.004374192072307276, "phrase": "thousand_currency"}, {"score": 0.004314595541370065, "phrase": "thousand_currency_signh"}, {"score": 0.004042369239448456, "phrase": "release_request"}, {"score": 0.00396000980403964, "phrase": "specified_assigned_node"}, {"score": 0.003919459003028067, "phrase": "node_assignments"}, {"score": 0.0036720716121554876, "phrase": "root_path"}, {"score": 0.0035603802089559716, "phrase": "assigned_node_reassignments"}, {"score": 0.0033127570056253252, "phrase": "whole_sequence"}, {"score": 0.0031790442889277864, "phrase": "ovsf_code_assignment"}, {"score": 0.0031572878619497624, "phrase": "wcdma_networks"}, {"score": 0.003135679861067472, "phrase": "buddy_memory_allocation"}, {"score": 0.003114219280081737, "phrase": "hypercube_subcube_allocation"}, {"score": 0.003061206247127742, "phrase": "previous_results"}, {"score": 0.002998776886514782, "phrase": "good_performance"}, {"score": 0.002877700749616268, "phrase": "optimal_offline_algorithms"}, {"score": 0.0025959133277517824, "phrase": "different_approaches"}], "paper_keywords": ["Online algorithms", " Tree node assignment", " Resource augmentation"], "paper_abstract": "Given a complete binary tree of height h, the online tree node assignment problem is to serve a sequence of assignment/release requests, where an assignment request, with an integer parameter 0a parts per thousand currency signia parts per thousand currency signh, is served by assigning a (tree) node of level (or height) i and a release request is served by releasing a specified assigned node. The node assignments have to guarantee that no node is assigned to two assignment requests unreleased, and every leaf-to-root path of the tree contains at most one assigned node. With assigned node reassignments allowed, the target of the problem is to minimize the number of assignments/reassignments, i.e., the cost, to serve the whole sequence of requests. This online tree node assignment problem is fundamental to many applications, including OVSF code assignment in WCDMA networks, buddy memory allocation and hypercube subcube allocation. Most of the previous results focus on how to achieve good performance when the same amount of resource is given to both the online and the optimal offline algorithms, i.e., one tree. In this paper, we focus on resource augmentation, where the online algorithm is allowed to use more trees than the optimal offline algorithm. By using different approaches, we give (1) a 1-competitive online algorithm, which uses (h+1)/2 trees and is optimal because (h+1)/2 trees are required by any online algorithm to match the cost of the optimal offline algorithm with one tree; (2) a 2-competitive algorithm with 3h/8+2 trees; (3) an amortized 8/3-competitive algorithm with 11/4 trees; (4) a general amortized (4/3+alpha)-competitive algorithm with (11/4+4/(3 alpha)) trees, for 0 <alpha a parts per thousand currency sign4/3.", "paper_title": "Online tree node assignment with resource augmentation", "paper_id": "WOS:000294536500005"}