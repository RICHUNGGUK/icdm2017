{"auto_keywords": [{"score": 0.03452834301390204, "phrase": "differentiation"}, {"score": 0.00481495049065317, "phrase": "program_differentiation._mobile"}, {"score": 0.004607686390487483, "phrase": "formerly_multiple_single_application_devices"}, {"score": 0.004540591176992658, "phrase": "single_programmable_device"}, {"score": 0.004219427915728972, "phrase": "malicious_attack"}, {"score": 0.004037694641919865, "phrase": "new_malware_management_system"}, {"score": 0.003940122359770492, "phrase": "program_differentiation"}, {"score": 0.003770373393393271, "phrase": "software_vulnerability"}, {"score": 0.0036256123915754303, "phrase": "control_flow"}, {"score": 0.0033524956061690868, "phrase": "unique_versions"}, {"score": 0.003303617297414837, "phrase": "distributed_instance"}, {"score": 0.0032079813320482304, "phrase": "hardware_and_systems_software_modifications"}, {"score": 0.0030847461428168614, "phrase": "embedded_systems"}, {"score": 0.0028662606272282926, "phrase": "instruction_register_file"}, {"score": 0.002598764579760562, "phrase": "single_distributed_version"}, {"score": 0.002486659929589854, "phrase": "computational_demands"}, {"score": 0.002299142268368128, "phrase": "multiple_systems"}, {"score": 0.002146676231930343, "phrase": "malware_propagation"}, {"score": 0.0021049977753042253, "phrase": "traditional_absolute_defenses"}], "paper_keywords": ["Program differentiation", " malware prevention and mitigation", " return address indirection", " system call indirection"], "paper_abstract": "Mobile electronics are undergoing a convergence of what were formerly multiple single application devices into a single programmable device - generally a smart phone. The programmability of these devices increases their vulnerability to malicious attack. In this paper, we propose a new malware management system that seeks to use program differentiation to reduce the propagation of malware when a software vulnerability exists. By modifying aspects of the control flow of the application, we allow various portions of an application executable to be permuted into unique versions for each distributed instance. Differentiation is achieved using hardware and systems software modifications which are amenable to and scalable in embedded systems. Our initial areas for modification include function call/return and system call semantics, as well as a hardware-supported Instruction Register File. Differentiation of executables hinders analysis for vulnerabilities as well as prevents the exploitation of a vulnerability in a single distributed version from propagating to other instances of that application. Computational demands on any instance of the application are minimized, while the resources required to attack multiple systems grows with the number of systems attacked. By focusing on prevention of malware propagation in addition to traditional absolute defenses, we target the economics of malware in order to make attacks prohibitively expensive and infeasible.", "paper_title": "PROGRAM DIFFERENTIATION", "paper_id": "WOS:000305249100008"}