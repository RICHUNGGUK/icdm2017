{"auto_keywords": [{"score": 0.015474611133624772, "phrase": "mlfq_scheduler"}, {"score": 0.004615202066192795, "phrase": "simple_multilevel_feedback_queue_scheduler"}, {"score": 0.0044237033788643715, "phrase": "interactive_tasks"}, {"score": 0.004129294911445187, "phrase": "linux"}, {"score": 0.004021267064832957, "phrase": "improved_interactivity"}, {"score": 0.0038748022659578865, "phrase": "simpler_model"}, {"score": 0.0036942726653704213, "phrase": "special_cases"}, {"score": 0.003304965389155549, "phrase": "background_workloads"}, {"score": 0.0029409171055888804, "phrase": "response_time_tests"}, {"score": 0.002879158342988017, "phrase": "inadvertent_improvements"}, {"score": 0.0028487656293168795, "phrase": "turnaround_time"}, {"score": 0.0027741761880779535, "phrase": "complex_task"}, {"score": 0.0026447893350441502, "phrase": "inverse_relationship"}, {"score": 0.002575526825728026, "phrase": "slice_length"}, {"score": 0.002468450551616404, "phrase": "primary_reason"}, {"score": 0.002429451930463481, "phrase": "mlfq"}, {"score": 0.0021847119298612264, "phrase": "new_scheduling_systems"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["scheduling", " interactivity", " Linux", " multilevel feedback queue"], "paper_abstract": "We implemented a simple multilevel feedback queue scheduler in the Linux 2.6 kernel and compared its response to interactive tasks with that of the new Linux 2.6 scheduler. Our objectives were to evaluate whether Linux 2.6 accomplished its goal of improved interactivity, and to see whether a simpler model could do as well without all of the special cases and exceptions that the new Linux 2.6 scheduler acquired. We describe the two algorithms in detail, report their average interactive response times under different kinds of background workloads, and compare their methods of deciding whether a task is interactive. The MLFQ scheduler performs comparably to the Linux 2.6 scheduler in all response time tests and displays some inadvertent improvements in turnaround time, while avoiding the complex task of explicitly defining interactivity. We maintain an inverse relationship between priority and time slice length, and this seems to be the primary reason that the MLFQ remains simple, yet performs comparably to the Linux 2.6 scheduler. These results may provide some guidelines for designers of new scheduling systems. Copyright (C) 2006 John Wiley & Sons, Ltd.", "paper_title": "A comparison of interactivity in the Linux 2.6 scheduler and an MLFQ scheduler", "paper_id": "WOS:000245318700001"}