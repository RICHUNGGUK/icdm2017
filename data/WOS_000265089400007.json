{"auto_keywords": [{"score": 0.04962656673317322, "phrase": "release_planning"}, {"score": 0.00481495049065317, "phrase": "optimized_resource_allocation_for_software_release_planning"}, {"score": 0.004724365740062236, "phrase": "incremental_software_development"}, {"score": 0.003925414526537783, "phrase": "human_resources"}, {"score": 0.00388828234270598, "phrase": "different_degrees"}, {"score": 0.0037969755088553326, "phrase": "different_types"}, {"score": 0.003199687131875466, "phrase": "released_features"}, {"score": 0.0031096747349602344, "phrase": "software_releases"}, {"score": 0.002895535087931938, "phrase": "inherent_difficulty"}, {"score": 0.002787406053363446, "phrase": "two-phase_optimization_approach"}, {"score": 0.0026077803487003, "phrase": "integer_linear_programming"}, {"score": 0.002570817338292482, "phrase": "relaxed_version"}, {"score": 0.0025343769150179764, "phrase": "full_problem"}, {"score": 0.0024747842618794255, "phrase": "genetic_programming"}, {"score": 0.0024397017438101726, "phrase": "reduced_search_space"}, {"score": 0.0024051153560799335, "phrase": "operational_resource_allocation_plans"}, {"score": 0.0022715929119140194, "phrase": "varying_problem_parameters"}, {"score": 0.0021049977753042253, "phrase": "greedy_search"}], "paper_keywords": ["Release planning", " resource allocation", " software project management", " incremental software development"], "paper_abstract": "Release planning for incremental software development assigns features to releases such that technical, resource, risk, and budget constraints are met. A feature can be offered as part of a release only if all of its necessary tasks are done before the given release date. We assume a given pool of human resources with different degrees of productivity to perform different types of tasks. In the context of release planning, the question studied in this paper is how to allocate these resources to the tasks of implementing the features such that the value gained from the released features is maximized. Planning of software releases and allocation of resources cannot be handled in isolation. To address the inherent difficulty of this process, we propose a two-phase optimization approach called OPTIMIZE(RASORP) that Combines the strength of two existing solution methods. Phase 1 applies integer linear programming to a relaxed version of the full problem. Phase 2 uses genetic programming in a reduced search space to generate operational resource allocation plans. The method is evaluated for a series of 600 randomly generated problems with varying problem parameters. The results are compared with a heuristic that locally allocates resources based on a greedy search.", "paper_title": "Optimized Resource Allocation for Software Release Planning", "paper_id": "WOS:000265089400007"}