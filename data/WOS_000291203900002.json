{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "package_level"}, {"score": 0.013526737583260739, "phrase": "software_refactoring"}, {"score": 0.004761132425263795, "phrase": "clustering_techniques"}, {"score": 0.004500891637057374, "phrase": "new_requirements"}, {"score": 0.004425616928975799, "phrase": "internal_software_complexity"}, {"score": 0.004327196832280818, "phrase": "high_level"}, {"score": 0.004278807087784626, "phrase": "internal_complexity"}, {"score": 0.004090577229368418, "phrase": "software_complexity"}, {"score": 0.00397714507836836, "phrase": "maintenance_effort"}, {"score": 0.003845154818609644, "phrase": "quite_challenging_task"}, {"score": 0.0035941231858949035, "phrase": "pattern_recognition_technique"}, {"score": 0.0035141291835319682, "phrase": "software_refactoring_activities"}, {"score": 0.003247868216333148, "phrase": "ill-structured_packages"}, {"score": 0.0031577303835881964, "phrase": "software_designer"}, {"score": 0.003087419032091453, "phrase": "intra-package_cohesion"}, {"score": 0.00305285084207725, "phrase": "inter-package_coupling"}, {"score": 0.0030017207229983385, "phrase": "comparative_study"}, {"score": 0.0029020077365708966, "phrase": "different_software_systems"}, {"score": 0.0026820015810254004, "phrase": "adaptive_k-nearest_neighbour"}, {"score": 0.0024786330057813225, "phrase": "-knn_technique"}, {"score": 0.0022020622730208514, "phrase": "arithmetic_averages"}, {"score": 0.0021529842700733974, "phrase": "new_technique"}, {"score": 0.0021288561076024844, "phrase": "competitive_performance"}, {"score": 0.0021049977753042253, "phrase": "lower_computational_complexity"}], "paper_keywords": [""], "paper_abstract": "Enhancing, modifying or adapting the software to new requirements increases the internal software complexity. Software with high level of internal complexity is difficult to maintain. Software refactoring reduces software complexity and hence decreases the maintenance effort. However, software refactoring becomes quite challenging task as the software evolves. The authors use clustering as a pattern recognition technique to assist in software refactoring activities at the package level. The approach presents a computer aided support for identifying ill-structured packages and provides suggestions for software designer to balance between intra-package cohesion and inter-package coupling. A comparative study is conducted applying three different clustering techniques on different software systems. In addition, the application of refactoring at the package level using an adaptive k-nearest neighbour (A-KNN) algorithm is introduced. The authors compared A-KNN technique with the other clustering techniques (viz. single linkage algorithm, complete linkage algorithm and weighted pair-group method using arithmetic averages). The new technique shows competitive performance with lower computational complexity.", "paper_title": "Software refactoring at the package level using clustering techniques", "paper_id": "WOS:000291203900002"}