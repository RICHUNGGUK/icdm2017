{"auto_keywords": [{"score": 0.03310342048452108, "phrase": "scheduling_policy"}, {"score": 0.01081941662754857, "phrase": "tdps"}, {"score": 0.009933412312209433, "phrase": "tdps_scheme"}, {"score": 0.00481495049065317, "phrase": "open_real-time_systems"}, {"score": 0.004331675965350876, "phrase": "non-real-time_timing_constraints"}, {"score": 0.004027751272984522, "phrase": "two-dimensional_priority_scheduling"}, {"score": 0.003794954883650141, "phrase": "task_priority"}, {"score": 0.0036472537997966938, "phrase": "policy_priority"}, {"score": 0.0035755653799043, "phrase": "execution_order"}, {"score": 0.0031950646670695546, "phrase": "scheduling_mechanism"}, {"score": 0.002951045605925464, "phrase": "cpu_utilization"}, {"score": 0.002798780784517325, "phrase": "schedulability_analysis"}, {"score": 0.0026543514413663893, "phrase": "different_real_time_systems"}], "paper_keywords": [""], "paper_abstract": "This paper focuses on the scheduling of the tasks with hard, soft and non-real-time timing constraints in open real-time systems. It describes a Two-Dimensional Priority Scheduling (TDPS) scheme which not only sets task priority, but also specifies scheduling policy priority. The execution order of a task is determined by both the task priority and its scheduling policy priority. TDPS also supports separating the scheduling mechanism from the scheduling policy. We also enhance TDPS scheme by introducing the CPU utilization bound to each scheduling policy to simplify the schedulability analysis. TDPS scheme can be used to implement different real time systems with different goals (such as hard, soft or hybrid real-time systems) by adjusting the CPU utilization bound of every scheduling policy in runtime. The paper shows through evaluation that TDPS is more open and efficient than the past open real-time scheduling schemes.", "paper_title": "Two-dimensional priority scheduling scheme for open real-time systems", "paper_id": "WOS:000237649800058"}