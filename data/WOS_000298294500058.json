{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "recursive_modules"}, {"score": 0.011510111414163329, "phrase": "double_vision_problem"}, {"score": 0.006235391838046399, "phrase": "cyclic_type_definitions"}, {"score": 0.005470989826050781, "phrase": "functor_fixpoints"}, {"score": 0.004750178261675602, "phrase": "practical_type_system"}, {"score": 0.004707479285061122, "phrase": "ml-style_recursive_modules"}, {"score": 0.004526220513167014, "phrase": "type_system"}, {"score": 0.00446531494311022, "phrase": "type_equivalence"}, {"score": 0.004300951511110487, "phrase": "external_and_internal_views"}, {"score": 0.004037370832877034, "phrase": "practical_decidability"}, {"score": 0.00391167729353583, "phrase": "potential_presence"}, {"score": 0.003738847528809348, "phrase": "type_systems"}, {"score": 0.0037052054802048707, "phrase": "previous_proposals"}, {"score": 0.0034937647771945803, "phrase": "common_patterns"}, {"score": 0.003249966782844541, "phrase": "module_system"}, {"score": 0.0032061793819537633, "phrase": "modular_development"}, {"score": 0.0030922667860233603, "phrase": "novel_type_system"}, {"score": 0.0027367816003722252, "phrase": "weak_bisimilarity"}, {"score": 0.002639502113350897, "phrase": "practical_implementation"}, {"score": 0.0025572160146590623, "phrase": "broad_range"}, {"score": 0.002455168454109375, "phrase": "practically_implementable_fragment"}, {"score": 0.002389403849342894, "phrase": "type_normalization"}, {"score": 0.0023044434462692483, "phrase": "typical_uses"}, {"score": 0.0021049977753042253, "phrase": "actual_implementation"}], "paper_keywords": ["Languages", " Theory", " Design", " Type systems", " modules", " recursion", " abstract types", " weak bisimulations"], "paper_abstract": "A practical type system for ML-style recursive modules should address at least two technical challenges. First, it needs to solve the double vision problem, which refers to an inconsistency between external and internal views of recursive modules. Second, it needs to overcome the tension between practical decidability and expressivity which arises from the potential presence of cyclic type definitions caused by recursion between modules. Although type systems in previous proposals solve the double vision problem and are also decidable, they fail to typecheck common patterns of recursive modules, such as functor fixpoints, that are essential to the expressivity of the module system and the modular development of recursive modules. This paper proposes a novel type system for recursive modules that solves the double vision problem and type-checks common patterns of recursive modules including functor fixpoints. First, we design a type system with a type equivalence based on weak bisimilarity, which does not lend itself to practical implementation in general, but accommodates a broad range of cyclic type definitions. Then, we identify a practically implementable fragment using a type equivalence based on type normalization, which is expressive enough to typecheck typical uses of recursive modules. Our approach is purely syntactic and the definition of the type system is ready for use in an actual implementation.", "paper_title": "A Syntactic Type System for Recursive Modules", "paper_id": "WOS:000298294500058"}