{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "yap"}, {"score": 0.007820505633379982, "phrase": "yap_system"}, {"score": 0.004347057700479576, "phrase": "prolog_system"}, {"score": 0.003958049372486465, "phrase": "almost_constant_development"}, {"score": 0.003697100573612401, "phrase": "general_structure"}, {"score": 0.0031440159350875057, "phrase": "main_techniques"}, {"score": 0.0029617414861784525, "phrase": "efficient_prolog_engine"}, {"score": 0.002790004829699627, "phrase": "rather_limited_indexing_algorithm"}, {"score": 0.002561752783323717, "phrase": "dynamic_indexing_mechanism"}, {"score": 0.0024969812322112174, "phrase": "just-in-time_indexer"}, {"score": 0.0023926387830753033, "phrase": "important_contribution"}, {"score": 0.0021049977753042253, "phrase": "single_logic_programming_system"}], "paper_keywords": ["Prolog", " logic programming system"], "paper_abstract": "Yet Another Prolog (YAP) is a Prolog system originally developed in the mid-eighties and that has been under almost constant development since then. This paper presents the general structure and design of the YAP system, focusing on three important contributions to the Logic Programming community. First, it describes the main techniques used in YAP to achieve an efficient Prolog engine. Second, most Logic Programming systems have a rather limited indexing algorithm. YAP contributes to this area by providing a dynamic indexing mechanism, or just-in-time indexer. Third, a important contribution of the YAP system has been the integration of both or-parallelism and tabling in a single Logic Programming system.", "paper_title": "The YAP Prolog system", "paper_id": "WOS:000299888500002"}