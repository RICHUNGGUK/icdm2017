{"auto_keywords": [{"score": 0.032460037577879935, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "uml_models"}, {"score": 0.0047709540557306284, "phrase": "distributed_software"}, {"score": 0.0047057084749407485, "phrase": "object-oriented_software_development_process"}, {"score": 0.004536029676655286, "phrase": "complex_distributed_systems"}, {"score": 0.004412780054037622, "phrase": "behavior_models"}, {"score": 0.004234129588974058, "phrase": "systematic_approaches"}, {"score": 0.004025531820226182, "phrase": "code_generation"}, {"score": 0.003380622847093041, "phrase": "uml"}, {"score": 0.003097865379563127, "phrase": "automated_synthesis"}, {"score": 0.002999749669403939, "phrase": "state-based_design_model"}, {"score": 0.002878140062594849, "phrase": "uml_framework"}, {"score": 0.0027614468443073028, "phrase": "test_synthesis_algorithms"}, {"score": 0.002613163083407071, "phrase": "modeling_applications"}, {"score": 0.0025892330566358503, "phrase": "asynchronous_communication"}, {"score": 0.0024956789310376635, "phrase": "classical_oo_development_processes"}, {"score": 0.0023400004981080818, "phrase": "early_development_stages"}, {"score": 0.0023079225317714815, "phrase": "global_interactions"}, {"score": 0.0021342613107011624, "phrase": "system_test_synthesis_process"}, {"score": 0.0021049977753042253, "phrase": "air_traffic_control_software_example"}], "paper_keywords": ["formal methods", " testing tools", " object-oriented design methods"], "paper_abstract": "The object-oriented software development process is increasingly used for the construction of complex distributed systems. In this context, behavior models have long been recognized as the basis for systematic approaches to requirements capture, specification, design, simulation, code generation, testing, and verification. Two complementary approaches for modeling behavior have proven useful in practice: interaction-based modeling ( e. g., UML sequence diagrams) and state-based modeling ( e. g., UML statecharts). Building on formal V&V techniques, in this article we present a method and a tool for automated synthesis of test cases from scenarios and a state-based design model of the application, remaining entirely within the UML framework. The underlying \"on the fly\" test synthesis algorithms are based on the input/output labeled transition system formalism, which is particularly appropriate for modeling applications involving asynchronous communication. The method is eminently compatible with classical OO development processes since it can be used to synthesize test cases from the scenarios used in early development stages to model global interactions between actors and components, instead of these test cases being derived manually. We illustrate the system test synthesis process using an air traffic control software example.", "paper_title": "Test synthesis from UML models of distributed software", "paper_id": "WOS:000244530000004"}