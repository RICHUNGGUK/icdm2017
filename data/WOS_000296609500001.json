{"auto_keywords": [{"score": 0.04309364447635938, "phrase": "taintscope"}, {"score": 0.008635608726991456, "phrase": "dynamic_taint_analysis"}, {"score": 0.008532475530554622, "phrase": "fuzz_testing"}, {"score": 0.00481495049065317, "phrase": "checksum-aware_fuzzing"}, {"score": 0.004742904841489477, "phrase": "symbolic_execution"}, {"score": 0.004629856947559767, "phrase": "security_vulnerabilities"}, {"score": 0.004602016568817581, "phrase": "large_programs"}, {"score": 0.004546834746561801, "phrase": "traditional_fuzz_testing_tools"}, {"score": 0.004505881071218599, "phrase": "well-known_common_drawback"}, {"score": 0.004358834624798868, "phrase": "early_stage"}, {"score": 0.004332616870895206, "phrase": "program_running"}, {"score": 0.004280651472525981, "phrase": "target_programs"}, {"score": 0.004254901969197879, "phrase": "checksum_mechanisms"}, {"score": 0.0040057404099240424, "phrase": "symbolic_execution_techniques"}, {"score": 0.0038054151244558123, "phrase": "checksum-aware_fuzzing_tool"}, {"score": 0.0037484181615819318, "phrase": "checksum_fields"}, {"score": 0.0036811433915589216, "phrase": "checksum-based_integrity_checks"}, {"score": 0.0035609154384221567, "phrase": "control_flow_alteration"}, {"score": 0.0034864522257187242, "phrase": "checksum_values"}, {"score": 0.003465463460811278, "phrase": "generated_inputs"}, {"score": 0.003444600613447231, "phrase": "combined_concrete_and_symbolic_execution_techniques"}, {"score": 0.003362393461932223, "phrase": "taint-based_fuzzing_tool"}, {"score": 0.0032821417644980674, "phrase": "fine-grained_dynamic_taint_tracing"}, {"score": 0.003232956879952914, "phrase": "\"hot_bytes"}, {"score": 0.0031941384895530426, "phrase": "well-formed_input"}, {"score": 0.0031462682245392785, "phrase": "security-sensitive_operations"}, {"score": 0.0029978373992477028, "phrase": "random_or_boundary_values"}, {"score": 0.00291743479583421, "phrase": "symbolic-execution-based_fuzzing_tool"}, {"score": 0.002813566267090177, "phrase": "possible_values"}, {"score": 0.0027298319171606498, "phrase": "potential_vulnerabilities"}, {"score": 0.0026326249204932733, "phrase": "large_real-world_applications"}, {"score": 0.002546554566866823, "phrase": "checksum_checks"}, {"score": 0.0023971907868181016, "phrase": "adobe_acrobat"}, {"score": 0.002382743797133398, "phrase": "flash_player"}, {"score": 0.0023684102875046915, "phrase": "google"}, {"score": 0.0023399219122055177, "phrase": "microsoft_paint"}, {"score": 0.002304824112812496, "phrase": "severe_vulnerabilities"}, {"score": 0.0022702515669908285, "phrase": "secunia"}, {"score": 0.002256567862969091, "phrase": "ocert"}, {"score": 0.0022294468373088424, "phrase": "cve_identifiers"}, {"score": 0.002169607777109063, "phrase": "vendor_patches"}], "paper_keywords": ["Security", " Languages", " Vulnerability detection", " checksum-aware fuzzing", " taint analysis", " symbolic execution"], "paper_abstract": "Fuzz testing has proven successful in finding security vulnerabilities in large programs. However, traditional fuzz testing tools have a well-known common drawback: they are ineffective if most generated inputs are rejected at the early stage of program running, especially when target programs employ checksum mechanisms to verify the integrity of inputs. This article presents TaintScope, an automatic fuzzing system using dynamic taint analysis and symbolic execution techniques, to tackle the above problem. TaintScope has several novel features: (1) TaintScope is a checksum-aware fuzzing tool. It can identify checksum fields in inputs, accurately locate checksum-based integrity checks by using branch profiling techniques, and bypass such checks via control flow alteration. Furthermore, it can fix checksum values in generated inputs using combined concrete and symbolic execution techniques. (2) TaintScope is a taint-based fuzzing tool working at the x86 binary level. Based on fine-grained dynamic taint tracing, TaintScope identifies the \"hot bytes\" in a well-formed input that are used in security-sensitive operations (e. g., invoking system/library calls), and then focuses on modifying such bytes with random or boundary values. (3) TaintScope is also a symbolic-execution-based fuzzing tool. It can symbolically evaluate a trace, reason about all possible values that can execute the trace, and then detect potential vulnerabilities on the trace. We evaluate TaintScope on a number of large real-world applications. Experimental results show that TaintScope can accurately locate the checksum checks in programs and dramatically improve the effectiveness of fuzz testing. TaintScope has already found 30 previously unknown vulnerabilities in several widely used applications, including Adobe Acrobat, Flash Player, Google Picasa, and Microsoft Paint. Most of these severe vulnerabilities have been confirmed by Secunia and oCERT, and assigned CVE identifiers (such as CVE-2009-1882, CVE-2009-2688). Vendor patches have been released or are in preparation based on our reports.", "paper_title": "Checksum-Aware Fuzzing Combined with Dynamic Taint Analysis and Symbolic Execution", "paper_id": "WOS:000296609500001"}