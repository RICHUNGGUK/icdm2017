{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "query_framework"}, {"score": 0.004741845603430361, "phrase": "software_evolution_data"}, {"score": 0.004392565073466714, "phrase": "software_engineering"}, {"score": 0.004227653047394939, "phrase": "modern_ides"}, {"score": 0.004163427731140163, "phrase": "version_control_systems"}, {"score": 0.004068907083697369, "phrase": "project_trackers"}, {"score": 0.00385658790017119, "phrase": "even_the_most_common_developer_questions"}, {"score": 0.00346449481422526, "phrase": "user_study"}, {"score": 0.0030648097361278856, "phrase": "software_system"}, {"score": 0.0029951555610569225, "phrase": "almost_zero_learning_effort"}, {"score": 0.0027955219242123013, "phrase": "eclipse_ide"}, {"score": 0.0026091594819333654, "phrase": "source_code"}, {"score": 0.0025694584194998356, "phrase": "development_history"}, {"score": 0.002472822097373027, "phrase": "issue_management"}, {"score": 0.002272794656458419, "phrase": "classical_software_engineering_tools"}, {"score": 0.002137537770621167, "phrase": "significant_time_savings"}], "paper_keywords": ["Human Factors", " Languages", " Software evolution", " software maintenance", " source-code analysis", " Semantic Web", " natural language", " conceptual queries", " tool support"], "paper_abstract": "With the steady advances in tooling to support software engineering, mastering all the features of modern IDEs, version control systems, and project trackers is becoming increasingly difficult. Answering even the most common developer questions can be surprisingly tedious and difficult. In this article we present a user study with 35 subjects to evaluate our quasi-natural language interface that provides access to various facets of the evolution of a software system but requires almost zero learning effort. Our approach is tightly woven into the Eclipse IDE and allows developers to answer questions related to source code, development history, or bug and issue management. The results of our evaluation show that our query interface can outperform classical software engineering tools in terms of correctness, while yielding significant time savings to its users and greatly advancing the state of the art in terms of usability and learnability.", "paper_title": "Evaluating a Query Framework for Software Evolution Data", "paper_id": "WOS:000326024500011"}