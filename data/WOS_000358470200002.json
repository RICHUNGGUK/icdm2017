{"auto_keywords": [{"score": 0.04799155246762869, "phrase": "programming_languages"}, {"score": 0.037546239378306444, "phrase": "atomic_sections"}, {"score": 0.00481495049065317, "phrase": "nested_atomic_sections"}, {"score": 0.0047761092701293474, "phrase": "thread_escape"}, {"score": 0.004718431349852634, "phrase": "multi-core_trend"}, {"score": 0.004263972370406983, "phrase": "current_mainstream_programming_languages"}, {"score": 0.004195418010131832, "phrase": "suitable_abstractions"}, {"score": 0.003947973513495612, "phrase": "mutual_exclusion"}, {"score": 0.003916098498242888, "phrase": "concurrent_accesses"}, {"score": 0.00386876598761639, "phrase": "shared_memory"}, {"score": 0.0035965032173588753, "phrase": "recent_research"}, {"score": 0.0032497506915502876, "phrase": "interference_freedom"}, {"score": 0.003120568497402472, "phrase": "run-time_system"}, {"score": 0.002831037222426215, "phrase": "atomic_section"}, {"score": 0.002568299907890696, "phrase": "specific_programming_language"}, {"score": 0.002526938673434697, "phrase": "program_traces"}, {"score": 0.0024963543716522087, "phrase": "basic_well-formedness_conditions"}, {"score": 0.0024264193359373977, "phrase": "precise_definition"}, {"score": 0.0022830706430588482, "phrase": "strong_form"}, {"score": 0.0021745003291048356, "phrase": "proof_assistant"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Atomic sections", " Well-synchronisation", " Atomicity", " Program traces", " Formal semantics", " Proof assistant"], "paper_abstract": "The multi-core trend is widening the gap between programming languages and hardware. Taking parallelism into account in the programs is necessary to improve performance. Unfortunately, current mainstream programming languages fail to provide suitable abstractions to do so. The most common pattern relies on the use of mutexes to ensure mutual exclusion between concurrent accesses to a shared memory. However, this model is error-prone and scales poorly by lack of modularity. Recent research proposes atomic sections as an alternative. The user simply delimits portions of code that should be free from interference. The responsibility for ensuring interference freedom is left either to the compiler or to the run-time system. In order to provide enough modularity, it is necessary that both atomic sections could be nested and threads could be forked inside an atomic section. In this paper we focus on the semantics of programming languages providing these features. More precisely, without being tied to a specific programming language, we consider program traces satisfying some basic well-formedness conditions. Our main contribution is the precise definition of atomicity, well-synchronisation and the proof that the latter implies the strong form of the former. A formalisation of our results in the Coq proof assistant is described. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "A formal semantics of nested atomic sections with thread escape", "paper_id": "WOS:000358470200002"}