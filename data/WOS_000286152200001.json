{"auto_keywords": [{"score": 0.03740476201711921, "phrase": "trial_deletion"}, {"score": 0.00481495049065317, "phrase": "cyclic_reference"}, {"score": 0.004696608876994947, "phrase": "coarse-grained_search"}, {"score": 0.004446349752828045, "phrase": "cyclic_structures"}, {"score": 0.004251500979153001, "phrase": "efficient_approach"}, {"score": 0.004209369306023422, "phrase": "cyclic_reference_counting"}, {"score": 0.0040048667115255, "phrase": "coarse-grained_cycle_collection_algorithm"}, {"score": 0.003716520760680603, "phrase": "tracing_cost"}, {"score": 0.0032486392192981944, "phrase": "predefined_backup_algorithm"}, {"score": 0.003152915289414825, "phrase": "theoretical_problem"}, {"score": 0.003075296862372287, "phrase": "coarse-grained_algorithm"}, {"score": 0.0027834145465170292, "phrase": "runtime_behavior"}, {"score": 0.0027420820738468577, "phrase": "cycle_collection"}, {"score": 0.0024941578231560055, "phrase": "proposed_cycle_collector"}, {"score": 0.0024571101010891347, "phrase": "jikes_rvm"}, {"score": 0.0023028105026714533, "phrase": "novel_approach"}, {"score": 0.0022016885701010088, "phrase": "modern_cycle_collector"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Garbage collection", " Reference counting", " Cyclic data structure", " Algorithms"], "paper_abstract": "Reference counting is known to have problems working with cyclic structures. In this paper, we present an efficient approach to cyclic reference counting, consisting of two key components. The first is a coarse-grained cycle collection algorithm that essentially performs a coarser (lightweight) analysis of the computation graph and thus greatly reduces the tracing cost (in comparison with the algorithms based on trial deletion to detect cycles). Our new cycle collector relies on this algorithm to obtain efficiency. Second, a predefined backup algorithm is incorporated to eliminate a theoretical problem that appears in the coarse-grained algorithm, thereby making the collector more practical. In this regard, We develop a heuristic based on the runtime behavior of the cycle collection to help the collector determine when to trigger the backup one. We have implemented and evaluated the proposed cycle collector on the Jikes RVM, where the SPECjvm98 benchmarks were applied. The results demonstrate that the novel approach is efficient and practical, compared to a modern cycle collector based on trial deletion. (c) 2010 Elsevier B.V. All rights-reserved.", "paper_title": "An efficient approach to cyclic reference counting based on a coarse-grained search", "paper_id": "WOS:000286152200001"}