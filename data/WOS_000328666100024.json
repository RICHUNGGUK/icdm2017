{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "spheroidal_wave_functions"}, {"score": 0.022209714183116236, "phrase": "differential_equation"}, {"score": 0.019937453184473767, "phrase": "matlab"}, {"score": 0.018742492381820554, "phrase": "ram"}, {"score": 0.013970029417798431, "phrase": "grid_points"}, {"score": 0.009360610575304637, "phrase": "distributed_program"}, {"score": 0.009340706303732127, "phrase": "test_data"}, {"score": 0.00891982226681815, "phrase": "mathematica"}, {"score": 0.008907112222697149, "phrase": "fortran"}, {"score": 0.00837931365265353, "phrase": "larger_grids"}, {"score": 0.00813301712649309, "phrase": "angular_eigenfunctions"}, {"score": 0.008117126467712841, "phrase": "laplacian"}, {"score": 0.007125820603297506, "phrase": "boundary_points"}, {"score": 0.007110634248701466, "phrase": "spheroidal_differential_operator"}, {"score": 0.006799041422771783, "phrase": "boundary_conditions"}, {"score": 0.006381834484336346, "phrase": "vertical_bar_c_vertical_bar"}, {"score": 0.004804665167296021, "phrase": "fast_and_simple_finite_difference_algorithm"}, {"score": 0.004773940202380731, "phrase": "resulting_eigenvalues"}, {"score": 0.004760347503105766, "phrase": "real_and_complex_spheroidal_bandwidth_parameter"}, {"score": 0.00468627326602559, "phrase": "extreme_parameter_regime"}, {"score": 0.004623224002010226, "phrase": "spheroidal_functions"}, {"score": 0.004616636552006213, "phrase": "complex_order_m."}, {"score": 0.004561019117546361, "phrase": "second-order_differential_equation"}, {"score": 0.004554531623367753, "phrase": "sturm-liouville"}, {"score": 0.004541549094039937, "phrase": "prolate_spheroidal_functions"}, {"score": 0.004531845130028399, "phrase": "spectral_concentration_problem"}, {"score": 0.004518938611027412, "phrase": "band-limited_and_time-limited_signals"}, {"score": 0.00447086421411841, "phrase": "sturm-liouville_theory"}, {"score": 0.004451777321652277, "phrase": "finite_difference_algorithm"}, {"score": 0.004435933560961791, "phrase": "new_suggestions"}, {"score": 0.004420145937451381, "phrase": "prolate_spheroidal_wave_functions"}, {"score": 0.0043731179221480785, "phrase": "basis_functions"}, {"score": 0.004355260077761867, "phrase": "program"}, {"score": 0.004301974064117387, "phrase": "cpc_program_library"}, {"score": 0.004295842375015405, "phrase": "queen's_university"}, {"score": 0.004289719600367438, "phrase": "belfast"}, {"score": 0.004283605090466471, "phrase": "n._ireland"}, {"score": 0.004271402515926204, "phrase": "standard_cpc"}, {"score": 0.004166095748571691, "phrase": "tar.gz_programming_language"}, {"score": 0.004092463367307375, "phrase": "moderate_grid_sizes"}, {"score": 0.004080803060781289, "phrase": "appropriate_change"}, {"score": 0.004048941643642148, "phrase": "maple"}, {"score": 0.004031626346463096, "phrase": "idl"}, {"score": 0.004002956770055177, "phrase": "large_matrices"}, {"score": 0.003940621382290634, "phrase": "largematrix_diagonalizations"}, {"score": 0.0039042422895483576, "phrase": "dual_core"}, {"score": 0.003898675275757938, "phrase": "quad_core_systems"}, {"score": 0.0038764861784138117, "phrase": "single_core_systems"}, {"score": 0.003748642689493065, "phrase": "eigenvalue_arrays"}, {"score": 0.0037166805264558923, "phrase": "matlab's_internal_'eig'_routine"}, {"score": 0.00362758794074995, "phrase": "corresponding_eigenvalues"}, {"score": 0.003596654204132698, "phrase": "angular_functions"}, {"score": 0.0035812860394387703, "phrase": "helmholtz_wave_equation"}, {"score": 0.0034656169312263442, "phrase": "axial_symmetry"}, {"score": 0.003448344510974736, "phrase": "spherical_symmetry"}, {"score": 0.003433607875854938, "phrase": "coefficient_function"}, {"score": 0.0033801084915667397, "phrase": "second_order_sturm-liouville_type_equation"}, {"score": 0.0033584625664188445, "phrase": "tri-axial_ellipsoid"}, {"score": 0.003308491162295323, "phrase": "spheroidal_problems"}, {"score": 0.003299057161447955, "phrase": "solution_method"}, {"score": 0.003280269519473779, "phrase": "'finite_difference_method"}, {"score": 0.003270915727168634, "phrase": "spatial_grid"}, {"score": 0.003261588520216682, "phrase": "n_points"}, {"score": 0.0032406991188036684, "phrase": "'interior_grid"}, {"score": 0.0031742917320101783, "phrase": "interior_grid"}, {"score": 0.0031427202266835434, "phrase": "finite_difference_operators"}, {"score": 0.0031248201091157914, "phrase": "interior_points"}, {"score": 0.0031092408996856607, "phrase": "off-centered_differences"}, {"score": 0.0030893242104301157, "phrase": "laplace_operator"}, {"score": 0.003084915580208272, "phrase": "implicit_implementation"}, {"score": 0.0030695347075585903, "phrase": "discretized_eigenvalue_problem"}, {"score": 0.0030564119659279437, "phrase": "discretized_eigenfunctions"}, {"score": 0.0030303340372851914, "phrase": "differential_operator"}, {"score": 0.0030044779402821, "phrase": "difference_operators"}, {"score": 0.00294289683194871, "phrase": "\"bc\"_switch"}, {"score": 0.002938696545424402, "phrase": "mixed_boundary_conditions"}, {"score": 0.0029136200533658764, "phrase": "boundary_condition"}, {"score": 0.0029094614305595233, "phrase": "if'_statements"}, {"score": 0.002878459828967726, "phrase": "large_number"}, {"score": 0.0028641053528310144, "phrase": "longer_computational_times"}, {"score": 0.0028376361457661415, "phrase": "spheroidal_wave_equation"}, {"score": 0.0028234846751516093, "phrase": "finite_difference_approach"}, {"score": 0.002807397719575117, "phrase": "non-standard_domains"}, {"score": 0.0028013887030225357, "phrase": "spheroidal_caps"}, {"score": 0.0027973898191010265, "phrase": "spheroidal_belts"}, {"score": 0.0027774806226598444, "phrase": "generalized_spheroidal_wavefunctions"}, {"score": 0.0027616550517346066, "phrase": "sufficiently_large_number"}, {"score": 0.002745919403693331, "phrase": "spheroidal_eigenfunctions"}, {"score": 0.002738085141851954, "phrase": "extreme_parameter_regimes"}, {"score": 0.0026934687762804276, "phrase": "spheroidal_wavefunctions"}, {"score": 0.002685783755996873, "phrase": "complex_order_parameter"}, {"score": 0.0026685723211884137, "phrase": "analytic_continuation"}, {"score": 0.0026363614010938194, "phrase": "axially_symmetric_ellipsoid"}, {"score": 0.0026307175086928473, "phrase": "defect_angle"}, {"score": 0.0026194658500350273, "phrase": "rotation_axis"}, {"score": 0.002604538266562719, "phrase": "defect_factor"}, {"score": 0.002595251643838385, "phrase": "main_user-input"}, {"score": 0.0025878461300701118, "phrase": "main_input_parameters"}, {"score": 0.002551133523090069, "phrase": "spheroidal_concentration_parameter"}, {"score": 0.00254022138062585, "phrase": "parameter_m"}, {"score": 0.0025347827806070306, "phrase": "order_parameter"}, {"score": 0.0025167378577541596, "phrase": "legendre_functions"}, {"score": 0.00247046384247482, "phrase": "bc"}, {"score": 0.0024633683056779336, "phrase": "dirichlet_boundary_conditions"}, {"score": 0.002454583793381492, "phrase": "neumann_boundary_conditions"}, {"score": 0.002445830530350952, "phrase": "mintheta"}, {"score": 0.002442337950142027, "phrase": "maxtheta"}, {"score": 0.00243362825033473, "phrase": "maximum_values"}, {"score": 0.0024284173100088163, "phrase": "angular_coordinate"}, {"score": 0.0024059648863919525, "phrase": "parameter_npts"}, {"score": 0.002371826410836842, "phrase": "spheroidal_harmonics"}, {"score": 0.00235662216953252, "phrase": "complex_exponential_factor"}, {"score": 0.002343188937685174, "phrase": "real_solutions"}, {"score": 0.0023198643432801626, "phrase": "normalization_conventions"}, {"score": 0.00222885961223926, "phrase": "dirichlet_or_neumann_boundary_conditions"}, {"score": 0.0022256761693963383, "phrase": "non-homogeneous_terms"}, {"score": 0.002209826877541435, "phrase": "finite_difference_matrix"}, {"score": 0.0021460136103632435, "phrase": "larger_grid_sizes"}, {"score": 0.0021353039190239154, "phrase": "grid_size"}, {"score": 0.002115555787377691, "phrase": "crown_copyright"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Slepian function", " Spheroidal wave function", " Spectral concentration problem", " Spheroidal cap harmonics", " Basis function expansion", " Finite difference method", " Sturm-Liouville problem", " Compressed sensing"], "paper_abstract": "A fast and simple finite difference algorithm for computing the spheroidal wave functions is described. The resulting eigenvalues and eigenfunctions for real and complex spheroidal bandwidth parameter, c, agree with those in the literature from four to more than eleven significant figures. The validity of this algorithm in the extreme parameter regime, up to c(2) = 10(14), is demonstrated. Furthermore, the algorithm generates the spheroidal functions for complex order m. The coefficients of the differential equation can be simply modified so that the algorithm may solve any second-order differential equation in Sturm-Liouville form. The prolate spheroidal functions and the spectral concentration problem in relation to band-limited and time-limited signals is discussed. We review the properties of these eigenfunctions in the context of Sturm-Liouville theory and the implications for a finite difference algorithm. A number of new suggestions for data fitting using prolate spheroidal wave functions with a heuristic for optimally choosing the value of c and the number of basis functions are described. Program summary Program title: SWF_8thOrder Catalogue identifier: AEQE_v1_0. Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEQE_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 1081 No. of bytes in distributed program, including test data, etc.: 160,312 Distribution format: tar.gz Programming language: Matlab R2009b. Computer: Designed to run on any computer capable of running Matlab 2009b with at least 2 GB of RAM in order to handle moderate grid sizes. With an appropriate change of syntax, the program may be easily adapted to Maple, Mathematica, Fortran, IDL and any other software capable of performing the diagonalization of large matrices. Operating system: Any operating system which will run Matlab, Mathematica, Fortran or any other language capable of performing largematrix diagonalizations. Has the code been vectorized or parallelized?: Tested with dual core and quad core systems. The algorithm will also work with single core systems. RAM: 1372 MB total used by Matlab for a grid with 4001 points, 41 MB used to store eigenfunctions, grid and spectrum arrays (4001 points). More RAM is used for larger grids. For example, with 8000 grid points, 162 MB of RAM is required to store the eigenfunction and eigenvalue arrays. Classification: 4.3. External routines: The program uses Matlab's internal 'eig' routine. Nature of problem: The problem is to construct the angular eigenfunctions of the Laplacian in three dimensional, spheroidal coordinates. These are the prolate, oblate and generalized spheroidal wave functions and to compute the corresponding eigenvalues. Equivalently, the task can be seen as generating the angular functions which arise when solving the Helmholtz wave equation by separation of variables in three dimensional, spheroidal coordinates: [partial derivative(eta)(1 - eta(2))partial derivative eta + lambda(m)(1)(c) - c(2)eta(2) - m(2)/1 - eta(2)] s(1)(m) = 0. This task often arises in the solution of problems with axial symmetry although setting c = 0 restores spherical symmetry. More generally, the coefficient function handles, CD1E and CD2E, can be redefined by the user to match the coefficients of the 2nd and 1st derivatives of any second order Sturm-Liouville type equation, for example, the harmonics of a tri-axial ellipsoid. Hence this algorithm and manuscript provide a foundation for solving a range of problems that have application beyond the spheroidal problems considered here. Solution method: The method of solution is the 'finite difference method'. The spatial grid is discretized into N points, N - 2 of which comprise the 'interior grid' and 2 points are the boundary points. The spheroidal differential operator is discretized which arises from separation of variables of the Laplacian in three dimensional, spheroidal coordinates on the interior grid using 8th order finite difference formulas. The boundary conditions for the spheroidal wave functions are implemented implicitly via finite difference operators which relate the boundary points back to the interior points. This is done using sliding off-centered differences at 8th order. The discretization of the Laplace operator and implicit implementation of the boundary conditions leads to a discretized eigenvalue problem. The eigenvectors give the discretized eigenfunctions of the spheroidal differential operator and the eigenvalues give the spectrum of the differential operator. Points at the boundary are reconstructed using forward and backward difference operators. The eigenfunctions are numerically normalized using a 6th order \"Boole's Rule\" integration procedure. Restrictions: The current version of this algorithm implements the option of both Dirichlet and Neumann boundary conditions, which is chosen by the user by the \"BC\" switch. Mixed boundary conditions can also be implemented by the user, by modifying the boundary condition 'IF' statements. When solving with a very large concentration parameter, id, vertical bar c vertical bar one must use a large number of grid points which would result in longer computational times and require more RAM. Unusual features: This program solves for the angular eigenfunctions of the spheroidal wave equation in three dimensions. Due to the finite difference approach, one is able to solve over non-standard domains such as spheroidal caps or spheroidal belts. The program is capable of solving for the generalized spheroidal wavefunctions with complex geometric parameter c. Given a sufficiently large number of grid points, the program can generate spheroidal eigenfunctions and eigenvalues for extreme parameter regimes, for example, for vertical bar c vertical bar similar to 10(8) with a grid of 20,000 points. Furthermore, the program can generate spheroidal wavefunctions for non-integer and complex order parameter, m, which may correspond to some analytic continuation of the spheroidal wave functions. In particular, for real, non-integer values of m, this corresponds to an axially symmetric ellipsoid with a defect angle where the 2 pi periodicity symmetry about the rotation axis becomes 27 pi alpha periodicity, where a is some defect factor. Additional comments: Main User-Input Parameters: The main input parameters are located at the top of the code. The parameter C2 sets the value of the square of the spheroidal concentration parameter, c(2). The parameter m is the order parameter which is typically an integer such as for the Legendre functions, but can also be non-integer and complex valued. The switch BC, sets the boundary conditions for the differential equation. A value BC = 0 gives Dirichlet boundary conditions and BC = 1 gives Neumann boundary conditions. The values of MinTheta and MaxTheta set the minimum and maximum values of the angular coordinate, theta, which specify the domain of the differential equation. The parameter Npts sets the number of grid points, with larger grids resulting in more accurate eigenfunctions and spectra. General comments: To obtain spheroidal harmonics the eigenfunctions need to be multiplied by a complex exponential factor e(im phi) or sinusoidal functions for real solutions. The eigenfunctions generated by this program may be normalized numerically. Since normalization conventions differ by application, normalization is left for the user to implement. For this purpose, we have encoded a plain, 6th order Boole rule unit normalization which is easy to modify. Finally, we note that if the user modifies the function handles, CD1E and CD2E then the program will solve any 2nd order ordinary differential equation with Dirichlet or Neumann boundary conditions. Non-homogeneous terms can be added by modifying the entries in the finite difference matrix where c(2) and m(2) appear. Running time: On a laptop with an Intel Core i3-2350M CPU (2.30 GHz), with 4.00 GB of RAM, the program takes 149 s for a grid with 4000 points. Running time increases for larger grid sizes. For example, increasing the grid size to 8000 points increased the run time to 1138 s on the same machine. Crown Copyright (C) 2013 Published by Elsevier B.V. All rights reserved.", "paper_title": "A finite difference construction of the spheroidal wave functions", "paper_id": "WOS:000328666100024"}