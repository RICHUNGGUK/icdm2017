{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "variable_length_gaps"}, {"score": 0.0045108906244892165, "phrase": "new_algorithms"}, {"score": 0.004413846562278824, "phrase": "pattern_matching_problem"}, {"score": 0.004180234323211199, "phrase": "pattern_p"}, {"score": 0.0034180189629740426, "phrase": "component_subpatterns"}, {"score": 0.0033262524445013303, "phrase": "total_number"}, {"score": 0.002966900048034132, "phrase": "minimum_and_maximum_number"}, {"score": 0.0026033756286033285, "phrase": "suffix_array"}, {"score": 0.0023346234464901978, "phrase": "algorithms_record_information"}, {"score": 0.0022718774783143203, "phrase": "pin_t."}], "paper_keywords": [""], "paper_abstract": "In this paper we have presented new algorithms to handle the pattern matching problem where the pattern can contain variable length gaps. Given a pattern P with variable length gaps and a text T our algorithm works in O(n+m+alpha log(max(1 <=i <=l)(b(i)-ai))) time where n is the length of the text, m is the summation of the lengths of the component subpatterns, alpha is the total number of occurrences of the component subpatterns in the text and a(i) and b(i) are, respectively, the minimum and maximum number of don't cares allowed between the ith and (i+1)st component of the pattern. We also present another algorithm which, given a suffix array of the text, can report whether P occurs in T in O(m+alpha log log n) time. Both the algorithms record information to report all the occurrences of Pin T. Furthermore, the techniques used in our algorithms are shown to be useful in many other contexts.", "paper_title": "Finding patterns with variable length gaps or don't cares", "paper_id": "WOS:000240077300017"}