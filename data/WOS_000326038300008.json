{"auto_keywords": [{"score": 0.04838919478929022, "phrase": "fpga"}, {"score": 0.00481495049065317, "phrase": "knn_classifier_-_design"}, {"score": 0.0047292449487169345, "phrase": "soft_ip_cores"}, {"score": 0.004322967486451877, "phrase": "k-nearest-neighbor_parallel_architectures"}, {"score": 0.004059438255358923, "phrase": "parameterizable_soft_ip_cores"}, {"score": 0.003677280504320636, "phrase": "large_classification_problems"}, {"score": 0.0035473867669654174, "phrase": "training_vectors"}, {"score": 0.0033914308417007316, "phrase": "vector_dimensions"}, {"score": 0.0033011569787033297, "phrase": "single_fpga"}, {"score": 0.0024311346712789553, "phrase": "gpu_implementations"}, {"score": 0.0022218413146898887, "phrase": "first_attempt"}, {"score": 0.00216263228969761, "phrase": "flexible_ip_cores"}, {"score": 0.0021049977753042253, "phrase": "popular_knn_classifier"}], "paper_keywords": ["Design", " Architectures", " classification", " embedded systems design", " VLSI array architectures", " soft IP cores", " k-nearest-neighbor classifier"], "paper_abstract": "We designed a variety of k-nearest-neighbor parallel architectures for FPGAs in the form of parameterizable soft IP cores. We show that they can be used to solve large classification problems with thousands of training vectors, or thousands of vector dimensions using a single FPGA, and achieve very high throughput. They can be used to flexibly synthesize architectures that also cover: 1NN classification (vector quantization), multishot queries (with different k), LOOCV cross-validation, and compare favorably to GPU implementations. To the best of our knowledge this is the first attempt to design flexible IP cores for the popular kNN classifier.", "paper_title": "Parallel Architectures for the kNN Classifier - Design of Soft IP Cores and FPGA Implementations", "paper_id": "WOS:000326038300008"}