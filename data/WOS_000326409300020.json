{"auto_keywords": [{"score": 0.0493653882313026, "phrase": "inter-thread_cache_conflicts"}, {"score": 0.025140450555179474, "phrase": "capacity_shortage"}, {"score": 0.006121897147713693, "phrase": "proposed_method"}, {"score": 0.00481497754411924, "phrase": "cache"}, {"score": 0.004707672504464783, "phrase": "chip_multiprocessors"}, {"score": 0.004551199992546761, "phrase": "multiple_threads"}, {"score": 0.004517137548648729, "phrase": "integrated_multiple_cores"}, {"score": 0.004269630481719451, "phrase": "performance_improvement"}, {"score": 0.003990385737207714, "phrase": "cached_data"}, {"score": 0.0036188435232325337, "phrase": "major_causes"}, {"score": 0.003382017342396959, "phrase": "large_cache_capacities"}, {"score": 0.0033315236647127734, "phrase": "total_capacity"}, {"score": 0.0032449610741097992, "phrase": "actual_cache_capacity"}, {"score": 0.003148774338287351, "phrase": "limited_cache_capacity"}, {"score": 0.0028553693643045795, "phrase": "capacity-aware_thread_scheduling_method"}, {"score": 0.002569816610348772, "phrase": "proposed_scheduling_method"}, {"score": 0.0025409639091476363, "phrase": "capacity_demand"}, {"score": 0.0024842242921857705, "phrase": "estimation_method"}, {"score": 0.0023214774334744713, "phrase": "thread_scheduler"}, {"score": 0.0023040642263522505, "phrase": "thread_combinations"}, {"score": 0.0022273034991008326, "phrase": "evaluation_results"}, {"score": 0.0021693692831601745, "phrase": "overall_performance"}, {"score": 0.0021049977753042253, "phrase": "individual_threads"}], "paper_keywords": ["chip multiprocessors", " shared caches", " inter-thread cache conflicts", " thread scheduling", " cache partitioning"], "paper_abstract": "Chip multiprocessors (CMPs) improve performance by simultaneously executing multiple threads using integrated multiple cores. However, since these cores commonly share one cache, inter-thread cache conflicts often limit the performance improvement by multi-threading. This paper focuses on two causes of inter-thread cache conflicts. In shared caches of CMPs, cached data fetched by one thread are frequently evicted by another thread. Such an eviction, called inter-thread kickout (ITKO), is one of the major causes of inter-thread cache conflicts. The other cause is capacity shortage that occurs when one cache is shared by threads demanding large cache capacities. If the total capacity demanded by the threads exceeds the actual cache capacity, the threads compete to use the limited cache capacity, resulting in capacity shortage. To address inter-thread cache conflicts, we must take into account both ITKOs and capacity shortage. Therefore, this paper proposes a capacity-aware thread scheduling method combined with cache partitioning. In the proposed method, inter-thread cache conflicts due to ITKOs and capacity shortage are decreased by cache partitioning and thread scheduling, respectively. The proposed scheduling method estimates the capacity demand of each thread with an estimation method used in the cache partitioning mechanism. Based on the estimation used for cache partitioning, the thread scheduler decides thread combinations sharing one cache so as to avoid capacity shortage. Evaluation results suggest that the proposed method can improve overall performance by up to 8.1%, and the performance of individual threads by up to 12%. The results also show that both cache partitioning and thread scheduling are indispensable to avoid both ITKOs and capacity shortage simultaneously. Accordingly, the proposed method can significantly reduce the inter-thread cache conflicts and hence improve performance.", "paper_title": "A Capacity-Aware Thread Scheduling Method Combined with Cache Partitioning to Reduce Inter-Thread Cache Conflicts", "paper_id": "WOS:000326409300020"}