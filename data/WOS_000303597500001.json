{"auto_keywords": [{"score": 0.04842456838190479, "phrase": "self-applicable_online_partial_evaluator"}, {"score": 0.027626369235161246, "phrase": "partial_evaluator"}, {"score": 0.00481495049065317, "phrase": "recursive_flowchart_languages"}, {"score": 0.004487989502479992, "phrase": "recursive_calls"}, {"score": 0.004307569753106432, "phrase": "partial_evaluator_yields"}, {"score": 0.003968112038249246, "phrase": "offline_partial_evaluation"}, {"score": 0.003698442219929622, "phrase": "online_partial_evaluation_techniques"}, {"score": 0.0036126731589251906, "phrase": "inefficient_and_overgeneralized_generating_extensions"}, {"score": 0.0033473779327638322, "phrase": "partial_evaluation"}, {"score": 0.0030833537429977797, "phrase": "recursive_polyvariant_specialization"}, {"score": 0.0028568174308720167, "phrase": "known_techniques"}, {"score": 0.002725740264152553, "phrase": "new_way"}, {"score": 0.0023124457559811087, "phrase": "complete_bootstrap"}, {"score": 0.002272053079580848, "phrase": "compiler_generator"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["partial evaluation", " self-application", " Futamura projections", " Ershov generating extensions", " compiler generators", " bootstrapping"], "paper_abstract": "This paper describes a self-applicable online partial evaluator for a flowchart language with recursive calls. Self-application of the partial evaluator yields generating extensions that are as efficient as those reported in the literature for offline partial evaluation. This result is remarkable because it has been assumed that online partial evaluation techniques unavoidably lead to inefficient and overgeneralized generating extensions. The purpose of this paper is not to determine which kind of partial evaluation is better, but to show how the problem can be solved by recursive polyvariant specialization. The design of the self-applicable online partial evaluator is based on a number of known techniques, but by combining them in a new way this result can be produced. The partial evaluator, its techniques, and its implementation are presented in full. Self-application according to all three Futamura projections is demonstrated. The complete bootstrap of a compiler generator from a partial evaluator is also reported. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "A self-applicable online partial evaluator for recursive flowchart languages", "paper_id": "WOS:000303597500001"}