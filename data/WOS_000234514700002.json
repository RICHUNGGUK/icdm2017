{"auto_keywords": [{"score": 0.04970138451590478, "phrase": "equality_logic"}, {"score": 0.04945145150798937, "phrase": "uninterpreted_functions"}, {"score": 0.00481495049065317, "phrase": "small_equality_graphs"}, {"score": 0.004603657443058869, "phrase": "formal_verification_community"}, {"score": 0.00446009116328642, "phrase": "hardware_design"}, {"score": 0.004186194537946595, "phrase": "new_decision_procedure"}, {"score": 0.004002382035704641, "phrase": "bryant_et_al"}, {"score": 0.003960313663509199, "phrase": "positive_equality"}, {"score": 0.003620060845528521, "phrase": "pnueli_et_al"}, {"score": 0.0031719031740165644, "phrase": "small_model_property"}, {"score": 0.0031137410086029497, "phrase": "small_domain"}, {"score": 0.002899189972263455, "phrase": "bdd-based_engine"}, {"score": 0.0028086279821223008, "phrase": "original_formula"}, {"score": 0.0027065317891503187, "phrase": "unique_constants"}, {"score": 0.0026851402402656246, "phrase": "range-allocation_algorithm"}, {"score": 0.0025875212917037403, "phrase": "graph-based_procedure"}, {"score": 0.0025602860576188283, "phrase": "small_set"}, {"score": 0.002447690434073436, "phrase": "large_subset"}, {"score": 0.002243031437658962, "phrase": "formula's_structure"}, {"score": 0.002207698641055144, "phrase": "new_method"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": [""], "paper_abstract": "The logic of equalities with Uninterpreted Functions is used in the formal verification community mainly for proofs of equivalence: proving that two versions of a hardware design are the same, or that input and output of a compiler are semantically equivalent are two prominent examples of such proofs. We introduce a new decision procedure for this logic that generalizes two leading decision procedures that were published in the last few years: the Positive Equality approach suggested by Bryant et al. [Exploiting positive equality in a logic of equality with uninterpreted functions, in: Proc. 11th Intl. Conference on Computer Aided Verification (CAV'99), 1999], and the Range-Allocation algorithm suggested by Pnueli et al. [The small model property: how small can it be? Information and Computation 178 (1) (2002) 279-293]. Both of these methods reduce this logic to pure Equality Logic (without Uninterpreted Functions), and then, due to the small model property that such formulas have, find a small domain to each variable that is sufficiently large to maintain the satisfiability of the formula. The state-space spanned by these domains is then traversed with a BDD-based engine. The Positive Equality approach identifies terms that have a certain characteristic in the original formula (before the reduction to pure Equality Logic), and replaces them with unique constants. The Range-Allocation algorithm analyzes the structure of the formula after the reduction to equality logic with a graph-based procedure to allocate a small set of values to each variable. The former, therefore, has an advantage when a large subset of the terms can be replaced with constants, and disadvantage in the other cases. In this paper we essentially merge the two methods, while improving both with a more careful analysis of the formula's structure. We show that the new method is provably dominant over both methods, theoretically as well as empirically. (c) 2005 Elsevier Inc. All rights reserved.", "paper_title": "Building small equality graphs for deciding equality logic with Uninterpreted Functions", "paper_id": "WOS:000234514700002"}