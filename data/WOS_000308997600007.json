{"auto_keywords": [{"score": 0.03550179179289911, "phrase": "boolean"}, {"score": 0.00481495049065317, "phrase": "efficient_xml_query_processing"}, {"score": 0.004768649568826951, "phrase": "twig_pattern_matching"}, {"score": 0.004700027722284931, "phrase": "critical_operation"}, {"score": 0.004654826737377134, "phrase": "xml_query_processing"}, {"score": 0.00456571874088313, "phrase": "holistic_computing_approach"}, {"score": 0.00450000390667755, "phrase": "superior_performance"}, {"score": 0.004392565073466714, "phrase": "bruno_et_al"}, {"score": 0.004308455856718928, "phrase": "first_holistic_twig"}, {"score": 0.004225950334493496, "phrase": "twigstack"}, {"score": 0.004185289462328125, "phrase": "numerous_so-called_holistic_twig_join_algorithms"}, {"score": 0.0040656296649390486, "phrase": "practical_xml_queries"}, {"score": 0.0038179283509963695, "phrase": "arbitrary_occurrences"}, {"score": 0.00376293585033711, "phrase": "arbitrary_number"}, {"score": 0.0037267132967205136, "phrase": "logical_connectives"}, {"score": 0.00320770578058916, "phrase": "interesting_work"}, {"score": 0.003146212656743413, "phrase": "holistic_twig"}, {"score": 0.0028421434495262796, "phrase": "full_scale"}, {"score": 0.002760778494680823, "phrase": "main_theme"}, {"score": 0.0026175952455594277, "phrase": "novel_mechanisms"}, {"score": 0.002592369213499121, "phrase": "efficient_b-twig_pattern_matching"}, {"score": 0.0025059724686541263, "phrase": "\"b-twig_normalization"}, {"score": 0.0024578987081792405, "phrase": "important_first-step"}, {"score": 0.002285674008055581, "phrase": "btwigmerge-the"}, {"score": 0.0021049977753042253, "phrase": "b-twig_patterns"}], "paper_keywords": ["Query processing", " database management", " XML data querying", " twig join", " boolean twig", " logical predicate"], "paper_abstract": "Twig pattern matching is a critical operation for XML query processing, and the holistic computing approach has shown superior performance over other methods. Since Bruno et al. introduced the first holistic twig join algorithm, TwigStack, numerous so-called holistic twig join algorithms have been proposed. Yet practical XML queries often require support for more general twig patterns, such as the ones that allow arbitrary occurrences of an arbitrary number of logical connectives (AND, OR, and NOT); such types of twigs are referred to as B-twigs (i.e., Boolean-Twigs) or AND/OR/NOT-twigs. We have seen interesting work on generalizing the holistic twig join approach to AND/OR-twigs and AND/NOT-twigs, but have not seen any further effort addressing the problem of AND/OR/NOT-Twigs at the full scale, which therefore forms the main theme of this paper. In this paper, we investigate novel mechanisms for efficient B-twig pattern matching. In particular, we introduce \"B-twig normalization\" as an important first-step in our approach toward eventually conquering the complexity of B-twigs, and then present BTwigMerge-the first holistic twig join algorithm designed for Bt-wigs. Both analytical and experimental results show that BTwigMerge is optimal for B-twig patterns with AD (Ancestor-Descendant) edges and/or PC (Parent-Child) edges.", "paper_title": "Holistic Boolean-Twig Pattern Matching for Efficient XML Query Processing", "paper_id": "WOS:000308997600007"}