{"auto_keywords": [{"score": 0.04149638088047677, "phrase": "jacobian-vector_products"}, {"score": 0.00481495049065317, "phrase": "jacobian_scarcity"}, {"score": 0.0045208777171271254, "phrase": "code_transformation_technique"}, {"score": 0.004274527415193801, "phrase": "vector_function"}, {"score": 0.00384845724514835, "phrase": "jacobian"}, {"score": 0.0032522091171602557, "phrase": "jacobian_matrix_-_requires"}, {"score": 0.0031845067058084583, "phrase": "combinatorial_optimization_problem"}, {"score": 0.002948066398723126, "phrase": "computational_graph"}, {"score": 0.002729133029776093, "phrase": "transformed_graph_g"}, {"score": 0.002405309378904663, "phrase": "large_collections"}, {"score": 0.0021049977753042253, "phrase": "best_known_heuristics"}], "paper_keywords": ["automatic differentiation", " scarcity", " preaccumulation", " edge elimination"], "paper_abstract": "In this paper, we describe a code transformation technique that, given a code for a vector function F, produces a code suitable for computing collections of Jacobian-vector products F'(x)(x)over dot or Jacobian-transpose-vector products F'(x)(T)(y) over bar. Exploitation of scarcity - a measure of the degrees of freedom in the Jacobian matrix - requires solving a combinatorial optimization problem that is believed to be hard. Our heuristics transform the computational graph for F, producing, in the form of a transformed graph G', a representation of the Jacobian F' (x) that is both concise and suitable for evaluating large collections of the Jacobian-vector products or the Jacobian-transpose-vector products. Our heuristics are randomized and compare favourably in all cases with the best known heuristics.", "paper_title": "Randomized heuristics for exploiting Jacobian scarcity", "paper_id": "WOS:000305292200009"}