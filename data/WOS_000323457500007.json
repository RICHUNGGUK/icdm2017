{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "tree_topologies"}, {"score": 0.047599993411656556, "phrase": "message_forwarding_problem"}, {"score": 0.032501446262619214, "phrase": "constant_number"}, {"score": 0.03104244392514206, "phrase": "cournier_et_al"}, {"score": 0.004406994912939125, "phrase": "network_resources"}, {"score": 0.004278807087784626, "phrase": "forward_messages"}, {"score": 0.004228577663320847, "phrase": "previous_works"}, {"score": 0.003986103192038901, "phrase": "significant_number"}, {"score": 0.00384731849108269, "phrase": "n_buffers"}, {"score": 0.00266693888510356, "phrase": "chain_network"}, {"score": 0.0025286975935774245, "phrase": "snap-stabilizing_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Message forwarding", " Snap-stabilization", " Self-stabilization", " Fault tolerance"], "paper_abstract": "In this paper, we consider the message forwarding problem that consists in managing the network resources that are used to forward messages. Previous works on this problem provide solutions that either use a significant number of buffers (that is n buffers per process, where n is the number of processes in the network) making the solution not scalable or reserve all the buffers from the sender to the receiver to forward only one message. The only solution that uses a constant number of buffers per link was introduced in Cournier et al. (2010) [1]. However the solution works only on a chain network. In this paper, we propose a snap-stabilizing algorithm for the message forwarding problem that uses a constant number of buffers per link as in Cournier et al. (2010) [1] but works on tree topologies. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "The snap-stabilizing message forwarding algorithm on tree topologies", "paper_id": "WOS:000323457500007"}