{"auto_keywords": [{"score": 0.048331058581082956, "phrase": "maintenance_patches"}, {"score": 0.015028680215070441, "phrase": "operational_software_systems"}, {"score": 0.012500201296972971, "phrase": "patch_category"}, {"score": 0.00481495049065317, "phrase": "software_patches"}, {"score": 0.004506968388996092, "phrase": "significant_expenditure"}, {"score": 0.00446987606516801, "phrase": "resource_consumption"}, {"score": 0.00428892403807229, "phrase": "publicly_announced_vulnerabilities"}, {"score": 0.004253618550301311, "phrase": "possible_destabilization"}, {"score": 0.004218602458288531, "phrase": "existing_applications"}, {"score": 0.003948613642680196, "phrase": "classification_scheme"}, {"score": 0.003773049633656302, "phrase": "internal_characteristics"}, {"score": 0.003726533059542558, "phrase": "software_system"}, {"score": 0.003560807940070886, "phrase": "linux_operating_system"}, {"score": 0.003502382624110703, "phrase": "previous_categorization_schemes"}, {"score": 0.0034306925765832633, "phrase": "granularity_level"}, {"score": 0.0033465923623290034, "phrase": "aggregate_nature"}, {"score": 0.0032109670662222416, "phrase": "unsupervised_learning_technique"}, {"score": 0.0031845067058084583, "phrase": "cluster_analysis"}, {"score": 0.0031452231581533814, "phrase": "text_mining"}, {"score": 0.003042812778470762, "phrase": "linux_patch_files"}, {"score": 0.0029805015010906013, "phrase": "maintenance_keywords"}, {"score": 0.0027323899681456535, "phrase": "structural_complexity"}, {"score": 0.002676418520290942, "phrase": "next_release"}, {"score": 0.002643386043540555, "phrase": "perfective_patches"}, {"score": 0.002515272856011004, "phrase": "patch_release"}, {"score": 0.0024637379406427856, "phrase": "patch_level"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["maintenance categorization", " open source software", " software maintenance", " software patch", " text mining"], "paper_abstract": "Installation of maintenance patches in operational software systems is a source of significant expenditure and resource consumption. Managers often have to find a balance between publicly announced vulnerabilities and/or possible destabilization of existing applications, while making decisions regarding patch roll out to all systems. We propose a classification scheme for maintenance patches and examine the effects of patch category on the internal characteristics of a software system. Text mining the patch releases of 77 successive versions of the Linux operating system, we extend previous categorization schemes to maintenance patches. This granularity level offers a view of the aggregate nature of the tasks performed in each version. An unsupervised learning technique, cluster analysis associated with Text mining, reveals that there are three identifiable categories in Linux patch files. Based on the maintenance keywords in each category, we label them as: corrective, perfective and adaptive patches. Further analysis of the effects of patch category on the structural complexity and the time to next release indicates that perfective patches are associated with a reduction in the complexity and frequency of patch release. Categorization at the patch level is useful for managers, since changes made to operational software systems are through patches. Determining the nature of a patch can assist managers in planning version roll out and testing criterion. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Classification of software patches: a text mining approach", "paper_id": "WOS:000288480700001"}