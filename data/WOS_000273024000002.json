{"auto_keywords": [{"score": 0.04441536705266951, "phrase": "snapshot_isolation"}, {"score": 0.00481495049065317, "phrase": "snapshot_databases"}, {"score": 0.0046797114400479135, "phrase": "multiversion_concurrency_control_algorithm"}, {"score": 0.0044967055264893184, "phrase": "full_serializability"}, {"score": 0.0043208252177835815, "phrase": "well-known_anomalies"}, {"score": 0.004081385289516914, "phrase": "data_consistency"}, {"score": 0.0034789831290103967, "phrase": "explicit_locking"}, {"score": 0.0034395119150793787, "phrase": "artificial_update_conflicts"}, {"score": 0.0033811403330431897, "phrase": "careful_analysis"}, {"score": 0.00308610073274614, "phrase": "concurrency_control_algorithm"}, {"score": 0.0030337085953063125, "phrase": "database_management_system"}, {"score": 0.002931569771634119, "phrase": "snapshot_isolation_anomalies"}, {"score": 0.0028653893877383188, "phrase": "arbitrary_applications"}, {"score": 0.0028006988338192375, "phrase": "serializable_isolation"}, {"score": 0.002753138528582461, "phrase": "new_algorithm"}, {"score": 0.002359759876402679, "phrase": "relational_dbms"}, {"score": 0.00224151735457093, "phrase": "performance_study"}], "paper_keywords": ["Algorithms", " Performance", " Reliability", " Multiversion concurrency control", " serializability", " snapshot isolation"], "paper_abstract": "Many popular database management systems implement a multiversion concurrency control algorithm called snapshot isolation rather than providing full serializability based on locking. There are well-known anomalies permitted by snapshot isolation that can lead to violations of data consistency by interleaving transactions that would maintain consistency if run serially. Until now, the only way to prevent these anomalies was to modify the applications by introducing explicit locking or artificial update conflicts, following careful analysis of conflicts between all pairs of transactions. This article describes a modification to the concurrency control algorithm of a database management system that automatically detects and prevents snapshot isolation anomalies at runtime for arbitrary applications, thus providing serializable isolation. The new algorithm preserves the properties that make snapshot isolation attractive, including that readers do not block writers and vice versa. An implementation of the algorithm in a relational DBMS is described, along with a benchmark and performance study, showing that the throughput approaches that of snapshot isolation in most cases.", "paper_title": "Serializable Isolation for Snapshot Databases", "paper_id": "WOS:000273024000002"}