{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "history-dependent_business_processes"}, {"score": 0.0047113960612140335, "phrase": "business_processes"}, {"score": 0.00456020621016909, "phrase": "process_history"}, {"score": 0.004462105963334103, "phrase": "log-file_listing_events"}, {"score": 0.004203030435498069, "phrase": "loglogics"}, {"score": 0.003728966994353039, "phrase": "business_process_models"}, {"score": 0.003531474887552889, "phrase": "boundary_points"}, {"score": 0.0034180189629740426, "phrase": "current_observation_points"}, {"score": 0.003290237137651949, "phrase": "three-valued_logic"}, {"score": 0.0031845067058084613, "phrase": "temporal_formulas"}, {"score": 0.003032228032253871, "phrase": "possible_past"}, {"score": 0.0028096544129939277, "phrase": "extended_log"}, {"score": 0.0024519545383399773, "phrase": "truth_value"}, {"score": 0.0024122047542536203, "phrase": "loglogics_formula"}, {"score": 0.0023346234464901978, "phrase": "finite_abstraction"}, {"score": 0.002284290601837099, "phrase": "evaluation_algorithm"}, {"score": 0.0022228943786652914, "phrase": "loglogics_patterns"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["history-dependent processes", " log", " temporal logic", " business processes", " workflow"], "paper_abstract": "Choices in business processes are often based on the process history saved as a log-file listing events and their lime stamps. In this paper we introduce LogLogics, a finite-path variant of the Timed Propositional Temporal Logic with Past, which can be in particular used for specifying guards in business process models. The novelty is due to the presence of boundary points corresponding to the starting and current observation points, which gives rise to a three-valued logic allowing us to distinguish between temporal formulas that hold for any log extended with some possible past and future (true). those that do not hold for any extended log (false) and those that hold for some but not all extended logs (unknown). We reduce the check of the truth Value of a LogLogics formula to a check on a finite abstraction and present an evaluation algorithm. We also define LogLogics patterns for commonly occurring properties. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "LogLogics: A logic for history-dependent business processes", "paper_id": "WOS:000244771700005"}