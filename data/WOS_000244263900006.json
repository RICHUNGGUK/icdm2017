{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "scalable_bloom_filters"}, {"score": 0.04929460594219637, "phrase": "bloom_filters"}, {"score": 0.004658426838467567, "phrase": "space-efficient_storage"}, {"score": 0.00428892403807229, "phrase": "false_positives"}, {"score": 0.004218602458288531, "phrase": "membership_queries"}, {"score": 0.003516898780234098, "phrase": "desired_false_positive_probability"}, {"score": 0.0033465923623290034, "phrase": "extra_elements"}, {"score": 0.0032376465741070274, "phrase": "false_positive_probability"}, {"score": 0.0030554300179552415, "phrase": "conservative_assumption"}, {"score": 0.003005271873916767, "phrase": "maximum_set_size"}, {"score": 0.0022122603123901114, "phrase": "maximum_false_positive_probability"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["data structures", " bloom filters", " distributed systems", " randomized algorithms"], "paper_abstract": "Bloom filters provide space-efficient storage of sets at the cost of a probability of false positives on membership queries. The size of the filter must be defined a priori based on the number of elements to store and the desired false positive probability, being impossible to store extra elements without increasing the false positive probability. This leads typically to a conservative assumption regarding maximum set size, possibly by orders of magnitude, and a consequent space waste. This paper proposes Scalable Bloom Filters, a variant of Bloom filters that can adapt dynamically to the number of elements stored, while assuring a maximum false positive probability. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Scalable Bloom Filters", "paper_id": "WOS:000244263900006"}