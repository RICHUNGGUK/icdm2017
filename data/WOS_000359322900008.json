{"auto_keywords": [{"score": 0.014846770381303984, "phrase": "object-oriented_programs"}, {"score": 0.013241694435354024, "phrase": "finite_state_automaton"}, {"score": 0.008939750086735905, "phrase": "mined_models"}, {"score": 0.0087441910166403, "phrase": "computing_thresholds"}, {"score": 0.00481495049065317, "phrase": "mining_class_temporal_specification_dynamically"}, {"score": 0.004751216062917875, "phrase": "extended_markov_model"}, {"score": 0.004709193603747991, "phrase": "class_temporal_specification"}, {"score": 0.004605748839642513, "phrase": "important_program_specifications"}, {"score": 0.004444921827311577, "phrase": "interface_methods"}, {"score": 0.004270665568018583, "phrase": "particular_sequence"}, {"score": 0.0038900709793274484, "phrase": "deterministic_models"}, {"score": 0.0035908627899097407, "phrase": "probabilistic_model"}, {"score": 0.003543273649210823, "phrase": "markov_chain"}, {"score": 0.003374094774912924, "phrase": "first_work"}, {"score": 0.0032416819339366712, "phrase": "probabilistic_models"}, {"score": 0.0031845067058084583, "phrase": "similar_works"}, {"score": 0.0031006232333900055, "phrase": "annotating_programs"}, {"score": 0.0029789104204803137, "phrase": "online_mode"}, {"score": 0.0029133627624098064, "phrase": "existing_models"}, {"score": 0.0024600113832396187, "phrase": "prototype_tool"}, {"score": 0.0021049977753042253, "phrase": "strong_assurance"}], "paper_keywords": ["Program specification", " class temporal specification", " component interface", " Markov model", " specification mining", " program verification"], "paper_abstract": "Class temporal specification is a kind of important program specifications especially for object-oriented programs, which specifies that interface methods of a class should be called in a particular sequence. Currently, most existing approaches mine this kind of specifications based on finite state automaton. Observed that finite state automaton is a kind of deterministic models with inability to tolerate noise. In this paper, we propose to mine class temporal specifications relying on a probabilistic model extending from Markov chain. To the best of our knowledge, this is the first work of learning specifications from object-oriented programs dynamically based on probabilistic models. Different from similar works, our technique does not require annotating programs. Additionally, it learns specifications in an online mode, which can refine existing models continuously. Above all, we talk about problems regarding noise and connectivity of mined models and a strategy of computing thresholds is proposed to resolve them. To investigate our technique's feasibility and effectiveness, we implemented our technique in a prototype tool ISpecMiner and used it to conduct several experiments. Results of the experiments show that our technique can deal with noise effectively and useful especifications can be learned. Furthermore, our method of computing thresholds provides a strong assurance for mined models to be connected.", "paper_title": "Mining Class Temporal Specification Dynamically Based on Extended Markov Model", "paper_id": "WOS:000359322900008"}