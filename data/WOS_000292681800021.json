{"auto_keywords": [{"score": 0.021203999914675187, "phrase": "dna_strings"}, {"score": 0.020490586181587406, "phrase": "protein_strings"}, {"score": 0.009134441728847375, "phrase": "input_strings"}, {"score": 0.00892593042083663, "phrase": "input_string"}, {"score": 0.006291338849269557, "phrase": "center_substring"}, {"score": 0.004583403452794034, "phrase": "closest_string_problem"}, {"score": 0.0038624981944755813, "phrase": "center_string"}, {"score": 0.003479331357315815, "phrase": "first_algorithm"}, {"score": 0.0034491650585057754, "phrase": "new_parameterized_algorithm"}, {"score": 0.0034192594083899026, "phrase": "closest_substring_problem"}, {"score": 0.0027741761880779535, "phrase": "single_input_string"}, {"score": 0.002557459614962075, "phrase": "previous_bests"}, {"score": 0.0025132639823395807, "phrase": "theoretical_improvements"}, {"score": 0.0024914526842494352, "phrase": "time_complexity"}, {"score": 0.0024201029474586007, "phrase": "resulting_program"}, {"score": 0.0023782761512089025, "phrase": "pevzner"}, {"score": 0.002364508106469067, "phrase": "sze"}, {"score": 0.002303455608777205, "phrase": "previously_best_exact_program"}, {"score": 0.002237477619351199, "phrase": "davila_et_al"}, {"score": 0.002154517283108316, "phrase": "practical_cases"}], "paper_keywords": ["Parameterized algorithm", " closest string", " closest substring", " DNA motif discovery"], "paper_abstract": "We present two parameterized algorithms for the closest string problem. The first runs in O(nL + nd . 17.97(d)) time for DNA strings and in O(nL + nd . 61.86(d)) time for protein strings, where n is the number of input strings, L is the length of each input string, and d is the given upper bound on the number of mismatches between the center string and each input string. The second runs in O(nL + nd . 13.92(d)) time for DNA strings and in O(nL + nd . 47.21(d)) time for protein strings. We then extend the first algorithm to a new parameterized algorithm for the closest substring problem that runs in O((n - 1)m(2) (L + d . 17.97(d) . m([log2 (d+1)]))) time for DNA strings and in O((n - 1)m(2) (L + d . 61.86(d) . m([log2 (d+1)]))) time for protein strings, where n is the number of input strings, L is the length of the center substring, L - 1 + m is the maximum length of a single input string, and d is the given upper bound on the number of mismatches between the center substring and at least one substring of each input string. All the algorithms significantly improve the previous bests. To verify experimentally the theoretical improvements in the time complexity, we implement our algorithm in C and apply the resulting program to the planted (L, d)-motif problem proposed by Pevzner and Sze in 2000. We compare our program with the previously best exact program for the problem, namely PMSPrune (designed by Davila et al. in 2007). Our experimental data show that our program runs faster for practical cases and also for several challenging cases. Our algorithm uses less memory too.", "paper_title": "Fast Exact Algorithms for the Closest String and Substring Problems with Application to the Planted (L, d)-Motif Model", "paper_id": "WOS:000292681800021"}