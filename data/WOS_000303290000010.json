{"auto_keywords": [{"score": 0.023390563051344553, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "access_control_solution"}, {"score": 0.004685224205630963, "phrase": "loosely-coupled_communication_paradigm"}, {"score": 0.0044512920090463105, "phrase": "interested_applications"}, {"score": 0.0036386875640595944, "phrase": "secret_keys"}, {"score": 0.0031845067058084583, "phrase": "interested_parties"}, {"score": 0.0031628027642565527, "phrase": "existing_solutions"}, {"score": 0.003004655258223784, "phrase": "novel_scheme"}, {"score": 0.0023167153974120083, "phrase": "real-world_e-health_scenario"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Publish/subscribe", " Confidentiality", " Attribute-based encryption", " Encrypted search"], "paper_abstract": "The publish/subscribe model offers a loosely-coupled communication paradigm where applications interact indirectly and asynchronously. Publishers generate events that are sent to interested applications through a network of brokers. Subscribers express their interest by specifying filters that brokers can use for routing the events. Supporting confidentiality of messages being exchanged is still challenging. First of all, it is desirable that any scheme used for protecting the confidentiality of both the events and filters should not require publishers and subscribers to share secret keys. In fact, such a restriction is against the loose-coupling of the model. Moreover, such a scheme should not restrict the expressiveness of filters and should allow the broker to perform event filtering to route the events to the interested parties. Existing solutions do not fully address these issues. In this paper, we provide a novel scheme that supports (i) confidentiality for events and filters; (ii) allows publishers to express further constraints about who can access their events; (iii) filters that can express very complex constraints on events even if brokers are not able to access any information in clear on both events and filters: (iv) and, finally, it does not require publishers and subscribers to share keys. Furthermore, we show how we applied our scheme to a real-world e-health scenario, developed together with a hospital. We also describe the implementation of our solution in Java and the integration with an existing publish/subscribe system. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Design and implementation of a confidentiality and access control solution for publish/subscribe systems", "paper_id": "WOS:000303290000010"}