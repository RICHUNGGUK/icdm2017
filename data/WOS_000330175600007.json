{"auto_keywords": [{"score": 0.049014830901543946, "phrase": "high-performance_computing"}, {"score": 0.04113433373499859, "phrase": "average_execution_time"}, {"score": 0.03345587782078163, "phrase": "observed_speedups"}, {"score": 0.0290995359952885, "phrase": "individual_execution"}, {"score": 0.00481495049065317, "phrase": "programme_speedup_analysis"}, {"score": 0.004642220710209137, "phrase": "numerous_code_optimisation_methods"}, {"score": 0.004475659507646842, "phrase": "performance_criteria"}, {"score": 0.004363846362238565, "phrase": "multiple_observations"}, {"score": 0.0042908537749279056, "phrase": "optimised_execution_times"}, {"score": 0.0038559853156801094, "phrase": "minimal_execution_time"}, {"score": 0.0035439168845104586, "phrase": "experimental_results"}, {"score": 0.003484590981697944, "phrase": "rigorous_statistical_methodology"}, {"score": 0.003465036432323081, "phrase": "programme_performance_analysis"}, {"score": 0.0034166271604770576, "phrase": "well-known_statistical_tests"}, {"score": 0.0033974527047473044, "phrase": "shapiro-wilk's"}, {"score": 0.0033692350794560268, "phrase": "fisher"}, {"score": 0.0033126813215962597, "phrase": "student"}, {"score": 0.0032570218602237773, "phrase": "kolmogorov-smirnov's"}, {"score": 0.0032296377835432533, "phrase": "wilcoxon-mann-whitney's"}, {"score": 0.002959765109527493, "phrase": "statistical_significance"}, {"score": 0.0027200305495826797, "phrase": "optimised_code"}, {"score": 0.0026594392054760806, "phrase": "initial_code"}, {"score": 0.0025928815987676535, "phrase": "confidence_interval"}, {"score": 0.0025208755851561368, "phrase": "randomly_selected_benchmark"}, {"score": 0.002471661547432869, "phrase": "initial_set"}, {"score": 0.0024577772550219332, "phrase": "tested_benchmarks"}, {"score": 0.0024234059612683032, "phrase": "consistent_improvement"}, {"score": 0.0023962545023307937, "phrase": "usual_performance_analysis_method"}, {"score": 0.0022777800735119405, "phrase": "correct_risk_level"}, {"score": 0.0022082749950539495, "phrase": "rigorous_statistics"}, {"score": 0.0021651504858015364, "phrase": "open_source_tool"}, {"score": 0.002146926767291475, "phrase": "r_software"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["programme performance evaluation and analysis", " code optimisation", " statistics"], "paper_abstract": "In the area of high-performance computing and embedded systems, numerous code optimisation methods exist to accelerate the speed of the computation (or optimise another performance criteria). They are usually experimented by doing multiple observations of the initial and the optimised execution times of a programme in order to declare a speedup. Even with fixed input and execution environment, programme execution times vary in general. Hence, different kinds of speedups may be reported: the speedup of the average execution time, the speedup of the minimal execution time, the speedup of the median and others. Many published speedups in the literature are observations of a set of experiments. To improve the reproducibility of the experimental results, this article presents a rigorous statistical methodology regarding programme performance analysis. We rely on well-known statistical tests (Shapiro-Wilk's test, Fisher's F-test, Student's t-test, Kolmogorov-Smirnov's test and Wilcoxon-Mann-Whitney's test) to study if the observed speedups are statistically significant or not. By fixing 0 < alpha < 1 a desired risk level, we are able to analyse the statistical significance of the average execution time as well as the median. We can also check if P [X > Y] > 1/2, the probability that an individual execution of the optimised code is faster than the individual execution of the initial code. In addition, we can compute the confidence interval of the probability to obtain a speedup on a randomly selected benchmark that does not belong to the initial set of tested benchmarks. Our methodology defines a consistent improvement compared with the usual performance analysis method in high-performance computing. We explain in each situation the hypothesis that must be checked to declare a correct risk level for the statistics. The Speedup-Test protocol certifying the observed speedups with rigorous statistics is implemented and distributed as an open source tool based on R software. Copyright (C) 2012 John Wiley & Sons, Ltd.", "paper_title": "The Speedup-Test: a statistical methodology for programme speedup analysis and computation", "paper_id": "WOS:000330175600007"}