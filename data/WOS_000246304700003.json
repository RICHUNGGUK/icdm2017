{"auto_keywords": [{"score": 0.03022947488434571, "phrase": "mpi"}, {"score": 0.00481495049065317, "phrase": "mpi_applications"}, {"score": 0.004772818068176176, "phrase": "client-side_file"}, {"score": 0.0046079260641779755, "phrase": "today's_parallel_file_systems"}, {"score": 0.004487989502479992, "phrase": "distributed_systems"}, {"score": 0.00427612041204006, "phrase": "clients'_computations"}, {"score": 0.0041102032028337366, "phrase": "distributed_environment"}, {"score": 0.0038818006513785977, "phrase": "high-performance_computers"}, {"score": 0.003226834737003501, "phrase": "client-side_file_caching_system"}, {"score": 0.0031151864044353245, "phrase": "shared_files"}, {"score": 0.0029289895726382653, "phrase": "main_thread"}, {"score": 0.002890557197908352, "phrase": "mpi_process"}, {"score": 0.0027782510491938315, "phrase": "shared_file_use"}, {"score": 0.0026585629592360085, "phrase": "file_requests"}, {"score": 0.0025106241866273897, "phrase": "caching_subsystem"}, {"score": 0.002434396049547248, "phrase": "user_space_library"}, {"score": 0.002298902547676131, "phrase": "performance_evaluations"}, {"score": 0.002248816575548875, "phrase": "significant_improvement"}, {"score": 0.0022290883852844057, "phrase": "traditional_methods"}, {"score": 0.0021901485584955487, "phrase": "byte-range_file"}, {"score": 0.0021049977753042253, "phrase": "file_system"}], "paper_keywords": ["client-side file caching", " parallel I/O", " MPI I/O", " cache coherence", " I/O thread"], "paper_abstract": "Client-side file caching is one of many I/O strategies adopted by today's parallel file systems that were initially designed for distributed systems. Most of these implementations treat each client independently because clients' computations are seldom related to each other in a distributed environment. However, it is misguided to apply the same assumption directly to high-performance computers where many parallel I/O operations come from a group of processes working within the same parallel application. Thus, file caching could perform more effectively if the scope of processes sharing the same file is known. In this paper, we propose a client-side file caching system for MPI applications that perform parallel I/O operations on shared files. In our design, an I/O thread is created and runs concurrently with the main thread in each MPI process. The MPI processes that collectively open a shared file use the I/O threads to cooperate with each other to handle file requests, cache page access, and coherence control. By bringing the caching subsystem closer to the applications as a user space library, it can be incorporated into an MPI I/O implementation to increase its portability. Performance evaluations using three I/O benchmarks demonstrate a significant improvement over traditional methods that use either byte-range file locking or rely on coherent I/O provided by the file system.", "paper_title": "Cooperative client-side file caching for MPI applications", "paper_id": "WOS:000246304700003"}