{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "computationally_intensive_applications"}, {"score": 0.004774324145784758, "phrase": "periodic_progress_updates"}, {"score": 0.00467424463996457, "phrase": "distributed_execution"}, {"score": 0.0044237033788643715, "phrase": "applied_scheduling_approach"}, {"score": 0.004294381488413906, "phrase": "existing_non-trivial_scheduling_algorithms"}, {"score": 0.004133627071344356, "phrase": "application_parameters"}, {"score": 0.004064117897000019, "phrase": "execution_time"}, {"score": 0.003829877278269543, "phrase": "available_computational_resources"}, {"score": 0.00378145978325955, "phrase": "major_issue"}, {"score": 0.003548368289666935, "phrase": "end_user"}, {"score": 0.0034738975998176323, "phrase": "extensive_history"}, {"score": 0.0034445472801689046, "phrase": "previous_application_runs"}, {"score": 0.0033295966773779174, "phrase": "online_method"}, {"score": 0.003301461490509176, "phrase": "execution_time_prediction"}, {"score": 0.0031242709509664837, "phrase": "dynamic_progress_information"}, {"score": 0.0030847461428168614, "phrase": "total_job_execution_time"}, {"score": 0.0027390682208834013, "phrase": "application_dynamics"}, {"score": 0.002704403349815203, "phrase": "resource_load"}, {"score": 0.0026252106881752067, "phrase": "actual_job_execution_time"}, {"score": 0.0025591748412278174, "phrase": "predefined_prediction_evolution_models"}, {"score": 0.002526780881314497, "phrase": "consecutive_extrapolations"}, {"score": 0.0024842242921857705, "phrase": "nonlinear_curve-fitting"}, {"score": 0.0024527767211457046, "phrase": "\"best-fit\"_coefficients"}, {"score": 0.0023210293050850276, "phrase": "dynamic_scheduling_algorithm"}, {"score": 0.0022434880661725493, "phrase": "scheduling_algorithm"}, {"score": 0.0021501863832966966, "phrase": "performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "former_case"}], "paper_keywords": ["Application distributed execution", " Execution time prediction", " Optimization"], "paper_abstract": "The effectiveness of distributed execution of computationally intensive applications (jobs) largely depends on the quality of the applied scheduling approach. However, most of the existing non-trivial scheduling algorithms rely on prior knowledge or on prediction of application parameters, such as execution time, size of input and output, dependencies, etc., to assign applications to the available computational resources. A major issue is that these parameters are hard to determine in advance, especially if the end user does not possess an extensive history of previous application runs. In this work we propose an online method for execution time prediction of applications, for which execution progress can be collected at run-time. Using dynamic progress information, the total job execution time can be predicted using extrapolation. However, the predictions achieved by extrapolation are far from precise and often vary over time as a result of changing application dynamics and varying resource load. Therefore, to compute the actual job execution time we match a number of predefined prediction evolution models against the consecutive extrapolations, by adopting nonlinear curve-fitting. The \"best-fit\" coefficients allow for more accurate execution time prediction. The predictions made are used to enhance a dynamic scheduling algorithm for workflows introduced in our earlier work. The scheduling algorithm is run with and without curve-fitting, showing a performance improvement of up to 15% in the former case.", "paper_title": "Online execution time prediction for computationally intensive applications with periodic progress updates", "paper_id": "WOS:000309353800012"}