{"auto_keywords": [{"score": 0.04694254107875594, "phrase": "scientific_workflows"}, {"score": 0.015570561139378363, "phrase": "mapreduce"}, {"score": 0.012981319950404191, "phrase": "xml_processing_pipelines"}, {"score": 0.00481495049065317, "phrase": "xml_data-streaming_workflows"}, {"score": 0.004700027722284931, "phrase": "prior_work"}, {"score": 0.004392565073466714, "phrase": "collection-oriented_modeling_paradigm"}, {"score": 0.004225950334493496, "phrase": "xml_stream_processors"}, {"score": 0.004007083686875716, "phrase": "data_parallelism"}, {"score": 0.00393032656248792, "phrase": "novel_compilation_strategies"}, {"score": 0.0038737214010638745, "phrase": "mapreduce_framework_pipelines"}, {"score": 0.00376293585033711, "phrase": "processing_steps"}, {"score": 0.0037087324991876727, "phrase": "xml-structured_data"}, {"score": 0.0029830992938695007, "phrase": "parallel_mapreduce_networks"}, {"score": 0.002760778494680823, "phrase": "thorough_experimental_evaluation"}, {"score": 0.0026175952455594277, "phrase": "implementation_platform"}, {"score": 0.0025549840900344596, "phrase": "execution_times"}, {"score": 0.002530359917257626, "phrase": "xml_workflow_pipelines"}, {"score": 0.0024224481033945943, "phrase": "efficiency_gains"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["MapReduce", " XML processing pipelines", " Collection-Oriented Modeling and Design (COMAD)", " Virtual Data Assembly Line (VDAL)", " Parallelization", " Static analysis", " Grouping", " Data stream processing"], "paper_abstract": "In prior work it has been shown that the design of scientific workflows can benefit from a collection-oriented modeling paradigm which views scientific workflows as pipelines of XML stream processors. In this paper, we present approaches for exploiting data parallelism in XML processing pipelines through novel compilation strategies to the MapReduce framework Pipelines in our approach consist of sequences of processing steps that receive XML-structured data and produce, often through calls to \"black-box\" (scientific) functions, modified (i.e.. updated) XML structures. Our main contributions are (i) the development of a set of strategies for compiling scientific workflows, modeled as XML processing pipelines, into parallel MapReduce networks, and (ii) a discussion of their advantages and trade-offs, based on a thorough experimental evaluation of the various translation strategies. Our evaluation uses the Hadoop MapReduce system as an implementation platform. Our results show that execution times of XML workflow pipelines can be significantly reduced using our compilation strategies. These efficiency gains, together with the benefits of MapReduce (e.g., fault tolerance) make our approach ideal for executing large-scale, compute-intensive XML-based Scientific workflows (C) 2009 Elsevier Inc. All rights reserved", "paper_title": "Parallelizing XML data-streaming workflows via MapReduce", "paper_id": "WOS:000278701700006"}