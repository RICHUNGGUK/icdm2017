{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "malicious_executables"}, {"score": 0.0393378573740974, "phrase": "decision_trees"}, {"score": 0.03708355905971419, "phrase": "roc_curve"}, {"score": 0.004645057834614705, "phrase": "machine_learning"}, {"score": 0.0046118021635786315, "phrase": "data_mining"}, {"score": 0.0041703614123283165, "phrase": "training_example"}, {"score": 0.004110831924517065, "phrase": "byte_codes"}, {"score": 0.0038119123317396954, "phrase": "inductive_methods"}, {"score": 0.0037710151976096985, "phrase": "naive_bayes"}, {"score": 0.0037171648669537287, "phrase": "support_vector_machines"}, {"score": 0.0036247638406450735, "phrase": "boosted_decision_trees"}, {"score": 0.003385336776758738, "phrase": "larger_collections"}, {"score": 0.003105305189036267, "phrase": "backdoor_and_mass-mailing"}, {"score": 0.0030171910207671205, "phrase": "payload_function"}, {"score": 0.0028586409810976367, "phrase": "detection_task"}, {"score": 0.00267931029131157, "phrase": "properly_labeled_examples"}, {"score": 0.0025568135952982345, "phrase": "inherent_difficulty"}, {"score": 0.0025293479382942257, "phrase": "classification_task"}, {"score": 0.0023536149458842992, "phrase": "true-positive_rate"}, {"score": 0.0023116191163488824, "phrase": "desired_false-positive_rate"}, {"score": 0.0021278653331014614, "phrase": "operational_system"}, {"score": 0.0021049977753042253, "phrase": "previously_undiscovered_malicious_executables"}], "paper_keywords": ["data mining", " concept learning", " computer security", " invasive software"], "paper_abstract": "We describe the use of machine learning and data mining to detect and classify malicious executables as they appear in the wild. We gathered 1; 971 benign and 1; 651 malicious executables and encoded each as a training example using n-grams of byte codes as features. Such processing resulted in more than 255 million distinct n-grams. After selecting the most relevant n-grams for prediction, we evaluated a variety of inductive methods, including naive Bayes, decision trees, support vector machines, and boosting. Ultimately, boosted decision trees outperformed other methods with an area under the ROC curve of 0.996. Results suggest that our methodology will scale to larger collections of executables. We also evaluated how well the methods classified executables based on the function of their payload, such as opening a backdoor and mass-mailing. Areas under the ROC curve for detecting payload function were in the neighborhood of 0.9, which were smaller than those for the detection task. However, we attribute this drop in performance to fewer training examples and to the challenge of obtaining properly labeled examples, rather than to a failing of the methodology or to some inherent difficulty of the classification task. Finally, we applied detectors to 291 malicious executables discovered after we gathered our original collection, and boosted decision trees achieved a true-positive rate of 0.98 for a desired false-positive rate of 0.05. This result is particularly important, for it suggests that our methodology could be used as the basis for an operational system for detecting previously undiscovered malicious executables.", "paper_title": "Learning to detect and classify malicious executables in the wild", "paper_id": "WOS:000245390800009"}