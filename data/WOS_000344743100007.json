{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "instant_clone_search_approach"}, {"score": 0.004565007074039171, "phrase": "\"_code"}, {"score": 0.004524624065803229, "phrase": "instant_reference"}, {"score": 0.00446471538346719, "phrase": "traditional_mode"}, {"score": 0.004425215632459868, "phrase": "surfacing_code"}, {"score": 0.004251728624599691, "phrase": "keyword_search_techniques"}, {"score": 0.0038556354709511818, "phrase": "syntactic_keyword"}, {"score": 0.003574929398913029, "phrase": "instant_semantic-based_surfacing"}, {"score": 0.003434662174045939, "phrase": "development_session"}, {"score": 0.003359119985242403, "phrase": "existing_code"}, {"score": 0.003329368827624161, "phrase": "similar_semantics"}, {"score": 0.003073154478201771, "phrase": "keyword-based_surfacing"}, {"score": 0.0029789104204803137, "phrase": "semantic_tags"}, {"score": 0.0027741761880779535, "phrase": "scalable_indexing_structures"}, {"score": 0.0027495914857929584, "phrase": "vector_abstractions"}, {"score": 0.002438203996977464, "phrase": "instant_search"}, {"score": 0.0023739321566540682, "phrase": "instant_code_search_scenario"}, {"score": 0.002321665383971456, "phrase": "instant_clone_search_tool"}, {"score": 0.0022604585778195152, "phrase": "sub-second_search"}, {"score": 0.00221068461235127, "phrase": "instant_code_tagging_scenario"}, {"score": 0.0021620042653528846, "phrase": "automatic_instant_code"}, {"score": 0.0021049977753042253, "phrase": "meaningful_tags"}], "paper_keywords": ["Code indexing", " Instant code search", " Instant code tagging", " Software development"], "paper_abstract": "In this paper, we study how to \"surface\" code for instant reference. A traditional mode of surfacing code has been treating code as text and applying keyword search techniques. However, many prior work observes the limitation of such approach: (1) semantic description of code is limited to comments and (2) syntactic keyword is often not selective enough. In contrast, we discuss enabling techniques and scenarios of instant semantic-based surfacing. For example, developers, during a development session, may reference the existing code sharing similar semantics, using his code so far as a query. In addition to such semantic-based surfacing, we also enhance keyword-based surfacing with semantics, by instantly adding semantic tags for code submitted to the repository. To achieve this goal, we first propose scalable indexing structures on vector abstractions of code. Our experimental results show our techniques outperform a state-of-the-art tool in efficiency without compromising accuracy. We then deploy our technique for instant search and tagging scenarios: For instant code search scenario, we demonstrate an instant clone search tool using our techniques, supporting sub-second search over 54 million LOC. For instant code tagging scenario, we propose an automatic instant code tagging algorithm to mine the meaningful tags from clones.", "paper_title": "Surfacing code in the dark: an instant clone search approach", "paper_id": "WOS:000344743100007"}