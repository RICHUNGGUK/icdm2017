{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "rbf_neural_network"}, {"score": 0.00462919213721188, "phrase": "modified_radial_basis_function_neural_network"}, {"score": 0.004516733575701128, "phrase": "software_fault_localization"}, {"score": 0.004278807087784626, "phrase": "neural_network"}, {"score": 0.004093453936415085, "phrase": "statement_coverage_information"}, {"score": 0.0040334640350288, "phrase": "test_case"}, {"score": 0.003858697684681798, "phrase": "trained_network"}, {"score": 0.0036914757355166966, "phrase": "virtual_test_cases"}, {"score": 0.003601715012418258, "phrase": "single_statement"}, {"score": 0.003428665921276366, "phrase": "virtual_test_case"}, {"score": 0.0032639039638211347, "phrase": "corresponding_covered_statement"}, {"score": 0.003168859801438632, "phrase": "higher_suspiciousness"}, {"score": 0.0031223774204093713, "phrase": "higher_likelihood"}, {"score": 0.002928682556953258, "phrase": "descending_order"}, {"score": 0.0025892330566358503, "phrase": "case_studies"}, {"score": 0.002346160830406661, "phrase": "art_fault_localization_techniques"}, {"score": 0.0022443390559699974, "phrase": "proposed_technique"}, {"score": 0.0021049977753042253, "phrase": "multiple_bugs"}], "paper_keywords": ["Fault location", " radial basis function neural networks", " software debugging"], "paper_abstract": "We propose the application of a modified radial basis function neural network in the context of software fault localization, to assist programmers in locating bugs effectively. This neural network is trained to learn the relationship between the statement coverage information of a test case and its corresponding execution result, success or failure. The trained network is then given as input a set of virtual test cases, each covering a single statement. The output of the network, for each virtual test case, is considered to be the suspiciousness of the corresponding covered statement. A statement with a higher suspiciousness has a higher likelihood of containing a bug, and thus statements can be ranked in descending order of their suspiciousness. The ranking can then be examined one by one, starting from the top, until a bug is located. Case studies on 15 different programs were conducted, and the results clearly show that our proposed technique is more effective than several other popular, state of the art fault localization techniques. Further studies investigate the robustness of the proposed technique, and illustrate how it can easily be applied to programs with multiple bugs as well.", "paper_title": "Effective Software Fault Localization Using an RBF Neural Network", "paper_id": "WOS:000301198500017"}