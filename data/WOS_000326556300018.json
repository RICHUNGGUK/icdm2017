{"auto_keywords": [{"score": 0.042096713408207954, "phrase": "eye-tracking_devices"}, {"score": 0.01512239458134157, "phrase": "taupe"}, {"score": 0.010612387000973441, "phrase": "eye-tracking_data"}, {"score": 0.005888037911303245, "phrase": "design_patterns"}, {"score": 0.004724020632103649, "phrase": "essential_part"}, {"score": 0.004679198657323125, "phrase": "maintenance_activity"}, {"score": 0.004576253356889219, "phrase": "mental_models"}, {"score": 0.004363185834249464, "phrase": "research_community"}, {"score": 0.003916098498242888, "phrase": "developers'_cognitive_processes"}, {"score": 0.003582397044768098, "phrase": "analysis_software_tools"}, {"score": 0.0034263289553691408, "phrase": "extension_points"}, {"score": 0.0033829958125964877, "phrase": "new_sophisticated_analyses"}, {"score": 0.0033084729942065142, "phrase": "taupe_software_system"}, {"score": 0.0026986685585382347, "phrase": "well-known_good_practices"}, {"score": 0.0026391806230438336, "phrase": "plug-in_architecture_using_reflection"}, {"score": 0.0025810006125483835, "phrase": "thorough_documentation"}, {"score": 0.002540228360655287, "phrase": "verification_process"}, {"score": 0.0024606011870678493, "phrase": "existing_analysis_software_systems"}, {"score": 0.002360796860462937, "phrase": "architectural_and_design_choices"}, {"score": 0.0021456243019466843, "phrase": "program_comprehension"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Eye-tracking", " Visualization", " Analysis", " Compatibility", " Extensibility"], "paper_abstract": "Program comprehension is an essential part of any maintenance activity. It allows developers to build mental models of the program before undertaking any change. It has been studied by the research community for many years with the aim to devise models and tools to understand and ease this activity. Recently, researchers have introduced the use of eye-tracking devices to gather and analyze data about the developers' cognitive processes during program comprehension. However, eye-tracking devices are not completely reliable and, thus, recorded data sometimes must be processed, filtered, or corrected. Moreover, the analysis software tools packaged with eye-tracking devices are not open-source and do not always provide extension points to seamlessly integrate new sophisticated analyses. Consequently, we develop the TAUPE software system to help researchers visualize, analyze, and edit the data recorded by eye-tracking devices. The two main objectives of TAUPE are compatibility and extensibility so that researchers can easily: (1) apply the system on any eye-tracking data and (2) extend the system with their own analyses. To meet our objectives, we base the development of TAUPE: (1) on well-known good practices, such as design patterns and a plug-in architecture using reflection, (2) on a thorough documentation, validation, and verification process, and (3) on lessons learned from existing analysis software systems. This paper describes the context of development of TAUPE, the architectural and design choices made during its development, and its documentation, validation and verification process. It also illustrates the application of TAUPE in three experiments on the use of design patterns by developers during program comprehension. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "TAUPE: Visualizing and analyzing eye-tracking data", "paper_id": "WOS:000326556300018"}