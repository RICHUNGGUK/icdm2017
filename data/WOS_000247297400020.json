{"auto_keywords": [{"score": 0.04066031201468573, "phrase": "ui"}, {"score": 0.00481495049065317, "phrase": "design_patterns"}, {"score": 0.0047472380621488616, "phrase": "main_idea"}, {"score": 0.004506968388996092, "phrase": "core_aspects"}, {"score": 0.004401794742140806, "phrase": "interactive_system"}, {"score": 0.004159241394996858, "phrase": "different_level"}, {"score": 0.004081385289516914, "phrase": "concrete_user_interface"}, {"score": 0.003967314311312148, "phrase": "ui_developers"}, {"score": 0.0039114753002009485, "phrase": "model-based_approaches"}, {"score": 0.0036958398682001015, "phrase": "best_design_practices"}, {"score": 0.003299460925313939, "phrase": "building_blocks"}, {"score": 0.0031619994642255846, "phrase": "different_models"}, {"score": 0.0030881143614111552, "phrase": "concrete_ui_artefacts"}, {"score": 0.0029594318330247614, "phrase": "different_kinds"}, {"score": 0.0026293540353514075, "phrase": "general_process"}, {"score": 0.0026045914281028473, "phrase": "pattern_application"}, {"score": 0.002519739850807611, "phrase": "possible_formalization"}, {"score": 0.0023030731312573246, "phrase": "task_models"}, {"score": 0.002196609505859369, "phrase": "extended_example"}, {"score": 0.002155412043665635, "phrase": "intimate_complicity"}, {"score": 0.0021049977753042253, "phrase": "proposed_model-driven_approach"}], "paper_keywords": ["model-based user interface", " user interface design patterns", " software architecture", " model-driven development", " usability", " task", " presentation and user interface models"], "paper_abstract": "The main idea surrounding model-based UI (User Interface) development is to identify useful abstractions that highlight the core aspects and properties of an interactive system and its design. These abstractions are instantiated and iteratively transformed at different level to create a concrete user interface. However, certain limitations prevent UI developers from adopting model-based approaches for UI engineering. One such limitation is the lack of reusability of best design practices and knowledge within such approaches. With a view to fostering reuse in the instantiation and transformation of models, we introduce patterns as building blocks, which can be first used to construct different models and then instantiated into concrete UI artefacts. In particular, we will demonstrate how different kinds of patterns can be used as modules for establishing task, dialog, presentation and layout models. Starting from an outline of the general process of pattern application, an interface for combining patterns and a possible formalization are suggested. The Task Pattern Wizard, an XML/XUL-based tool for selecting, adapting and applying patterns to task models, will be presented. In addition, an extended example will illustrate the intimate complicity of several patterns and the proposed model-driven approach. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Model-based user interface engineering with design patterns", "paper_id": "WOS:000247297400020"}