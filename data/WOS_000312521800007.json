{"auto_keywords": [{"score": 0.036313720386738475, "phrase": "miller"}, {"score": 0.00481495049065317, "phrase": "proof_search"}, {"score": 0.00466102244911872, "phrase": "wide_range"}, {"score": 0.004617949594931096, "phrase": "computation_systems"}, {"score": 0.004247696749118451, "phrase": "sequent_calculus"}, {"score": 0.00411182818527434, "phrase": "proof_principles"}, {"score": 0.0036343185976192914, "phrase": "schroeder-heister"}, {"score": 0.0032593915869553714, "phrase": "logic_programs"}, {"score": 0.003125835572347772, "phrase": "defined_atoms"}, {"score": 0.002956209594959227, "phrase": "fixed_points"}, {"score": 0.0028615323526689582, "phrase": "free_equality"}, {"score": 0.0026811531172346676, "phrase": "consistent_way_rules"}, {"score": 0.0026317312518257803, "phrase": "post-fixed_points"}, {"score": 0.0024429654627197393, "phrase": "computational_system"}, {"score": 0.002420339995088838, "phrase": "full_use"}, {"score": 0.002397923568994474, "phrase": "higher-order_abstract_syntax"}, {"score": 0.002267708463966758, "phrase": "direct_cut-elimination_procedure"}, {"score": 0.0022155569675462333, "phrase": "general_inductive_and_co-inductive_definitions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Logical frameworks", " (Co-)induction", " Higher-order abstract syntax", " Cut-elimination", " Parametric reducibility"], "paper_abstract": "Proof search has been used to specify a wide range of computation systems. In order to build a framework for reasoning about such specifications, we make use of a sequent calculus involving induction and co-induction. These proof principles are based on a proof-theoretic (rather than set-theoretic) notion of definition (Hallnas, 1991 [18], Eriksson, 1991 [11], Schroeder-Heister. 1993 [38], McDowell and Miller, 2000 [22]). Definitions are akin to logic programs, where the left and right rules for defined atoms allow one to view theories as \"closed\" or defining fixed points. The use of definitions and free equality makes it possible to reason intensionally about syntax. We add in a consistent way rules for pre- and post-fixed points, thus allowing the user to reason inductively and co-inductively about properties of computational system making full use of higher-order abstract syntax. Consistency is guaranteed via cut-elimination, where we give a direct cut-elimination procedure in the presence of general inductive and co-inductive definitions via the parametric reducibility technique. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Cut elimination for a logic with induction and co-induction", "paper_id": "WOS:000312521800007"}