{"auto_keywords": [{"score": 0.048749297367557266, "phrase": "reverse_mode"}, {"score": 0.00481495049065317, "phrase": "address_computations"}, {"score": 0.004594137808658537, "phrase": "automatic_differentiation"}, {"score": 0.004182301599359094, "phrase": "severe_bottleneck"}, {"score": 0.0034657012607680203, "phrase": "reverse_order"}, {"score": 0.003275615868824503, "phrase": "computed_addresses"}, {"score": 0.003066945490483524, "phrase": "forward_recomputation"}, {"score": 0.002818013056816282, "phrase": "alternative_approach"}, {"score": 0.002688532127821979, "phrase": "inverse_computation"}, {"score": 0.002613709503583786, "phrase": "dependency_information"}, {"score": 0.002564985233317994, "phrase": "address_storage"}, {"score": 0.002493592357827492, "phrase": "significant_portion"}, {"score": 0.0024241817763927163, "phrase": "overall_storage_requirements"}, {"score": 0.0023127544795063263, "phrase": "substantial_gains"}, {"score": 0.002248366278757655, "phrase": "proposed_approach_yields"}, {"score": 0.0021450029487459403, "phrase": "use_cases"}, {"score": 0.0021049977753042253, "phrase": "practical_applications"}], "paper_keywords": ["Program transformation", " automatic differentiation", " inverse computation"], "paper_abstract": "The reverse mode of automatic differentiation is widely used in science and engineering. A severe bottleneck for the performance of the reverse mode, however, is the necessity to recover certain intermediate values of the program in reverse order. Among these values are computed addresses, which traditionally are recovered through forward recomputation and storage in memory. We propose an alternative approach for recovery that uses inverse computation based on dependency information. Address storage constitutes a significant portion of the overall storage requirements. An example illustrates substantial gains that the proposed approach yields, and we show use cases in practical applications.", "paper_title": "Cheaper adjoints by reversing address computations", "paper_id": "WOS:000272226200006"}