{"auto_keywords": [{"score": 0.040490368143968045, "phrase": "delta"}, {"score": 0.005132143659912278, "phrase": "glauber"}, {"score": 0.00481495049065317, "phrase": "random_graphs"}, {"score": 0.004481132747216135, "phrase": "random_graph"}, {"score": 0.004220624516321415, "phrase": "natural_markov_chain_algorithm"}, {"score": 0.003951453722517865, "phrase": "beta_delta_colors"}, {"score": 0.003789137457228946, "phrase": "maximum_degree"}, {"score": 0.0035473867669654174, "phrase": "least_beta"}, {"score": 0.002708399936381754, "phrase": "\"dense\"_cases"}, {"score": 0.0023033100935570755, "phrase": "considerably_better_bounds"}, {"score": 0.0021049977753042253, "phrase": "wiley_periodicals"}], "paper_keywords": ["random colorings", " random graphs", " Glauber dynamics"], "paper_abstract": "We consider the problem of generating a coloring of the random graph G(n,p) uniformly at random using a natural Markov chain algorithm: the Glauber dynamics. We assume that there are beta Delta colors available, where Delta is the maximum degree of the graph, and we wish to determine the least beta = beta(p) such that the distribution is close to uniform in O(n log n) steps of the chain. This problem has been previously studied for G(n,p) in cases where np is relatively small. Here we consider the \"dense\" cases, where np is an element of [omega In n, n] and omega = omega(n) -> infinity. Our methods are closely tailored to the random graph setting, but we obtain considerably better bounds on beta(p) than can be achieved using more general techniques. (C) 2009 Wiley Periodicals, Inc. Random Struct. Alg., 36, 251-272, 2010", "paper_title": "Randomly Coloring Random Graphs", "paper_id": "WOS:000276266000001"}