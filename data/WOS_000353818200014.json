{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "concurrency_bugs"}, {"score": 0.004207230913063179, "phrase": "emerging_ubiquity"}, {"score": 0.004067635935640407, "phrase": "multicore_processors"}, {"score": 0.003932654396285872, "phrase": "multithreaded_software"}, {"score": 0.0036144035798673967, "phrase": "production_runs"}, {"score": 0.003378385493203297, "phrase": "severe_losses"}, {"score": 0.002758597251689795, "phrase": "multi-threaded_software"}], "paper_keywords": ["concurrency bugs", " bug detection", " production run", " performance counters"], "paper_abstract": "Concurrency bugs are becoming widespread with the emerging ubiquity of multicore processors and multithreaded software. They manifest during production runs and lead to severe losses. Many effective concurrency-bug detection tools have been built. However, the dependability of multi-threaded software does not improve until these bugs are handled statically or dynamically. This article discusses our recent progresses on fixing, preventing, and recovering from concurrency bugs.", "paper_title": "Fixing, preventing, and recovering from concurrency bugs", "paper_id": "WOS:000353818200014"}