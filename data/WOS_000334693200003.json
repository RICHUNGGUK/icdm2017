{"auto_keywords": [{"score": 0.04279173842399326, "phrase": "proc"}, {"score": 0.00481495049065317, "phrase": "blocks_behavior"}, {"score": 0.004627944735913613, "phrase": "useful_information"}, {"score": 0.004524348699657099, "phrase": "miss_rate"}, {"score": 0.004423061344624088, "phrase": "processor_performance"}, {"score": 0.004132546937996706, "phrase": "m._chaudhuri"}, {"score": 0.00399449659126893, "phrase": "new_york"}, {"score": 0.003526476304712492, "phrase": "cache_ways"}, {"score": 0.003447451122274614, "phrase": "short-term_reuses"}, {"score": 0.0033893426032054366, "phrase": "remaining_ways"}, {"score": 0.0033511469200347907, "phrase": "long-term_reuses"}, {"score": 0.0030606302942851027, "phrase": "original_pelifo_policy"}, {"score": 0.002958281631770322, "phrase": "implementation_complexity"}, {"score": 0.002795228413298423, "phrase": "shared-cache_environment"}, {"score": 0.002656158309155626, "phrase": "cache_efficiency"}, {"score": 0.0026262033625248445, "phrase": "experimental_results"}, {"score": 0.002584782747000763, "phrase": "lru"}, {"score": 0.0025383451160985488, "phrase": "required_hardware"}, {"score": 0.002495521662819317, "phrase": "negligible_performance_penalty"}, {"score": 0.0022405528759521856, "phrase": "original_pelifo"}], "paper_keywords": ["Cache memories", " replacement policies", " peLIFO", " miss rate"], "paper_abstract": "Studying blocks behavior during their lifetime in cache can provide useful information to reduce the miss rate and therefore improve processor performance. According to this rationale, the peLIFO replacement algorithm [M. Chaudhuri, Proc. Micro'09, New York, 12-16 December, 2009, pp. 401-412], which learns dynamically the number of cache ways required to satisfy short-term reuses preserving the remaining ways for long-term reuses, has been recently proposed. In this paper, we propose several changes to the original peLIFO policy in order to reduce the implementation complexity involved, and we extend the algorithm to a shared-cache environment considering dynamic information about threads behavior to improve cache efficiency. Experimental results confirm that our simplification techniques reduce the required hardware with a negligible performance penalty, while the best of our thread-aware extension proposals reduces average CPI by 8.7% and 15.2% on average compared to the original peLIFO and LRU respectively for a set of 43 multi-programmed workloads on an 8 MB 16-way set associative shared L2 cache.", "paper_title": "IMPROVING peLIFO CACHE REPLACEMENT POLICY: HARDWARE REDUCTION AND THREAD-AWARE EXTENSION", "paper_id": "WOS:000334693200003"}