{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "active_libraries"}, {"score": 0.0047113960612140335, "phrase": "new_java-like_language_design_coupling"}, {"score": 0.004550300345169981, "phrase": "composition_language"}, {"score": 0.004337710093279712, "phrase": "class_definitions"}, {"score": 0.004225950334493496, "phrase": "small_set"}, {"score": 0.004189337956225294, "phrase": "composition_operators"}, {"score": 0.004099183062034004, "phrase": "seminal_bracha's_jigsaw_framework"}, {"score": 0.0037087324991876727, "phrase": "nested_class"}, {"score": 0.0035507457285983268, "phrase": "effective_language_support"}, {"score": 0.003384695931421288, "phrase": "customized_version"}, {"score": 0.0032263862712733934, "phrase": "execution_platform"}, {"score": 0.003129509028432954, "phrase": "nested_classes"}, {"score": 0.0030888830649190282, "phrase": "whole_library"}, {"score": 0.0029443683459283955, "phrase": "deep_operators"}, {"score": 0.002855934865505357, "phrase": "meta-programming_capabilities"}, {"score": 0.0027581067089091434, "phrase": "large\"_style"}, {"score": 0.0026986685585382347, "phrase": "mixed_typechecking_technique"}, {"score": 0.002640507929183363, "phrase": "good_compromise"}, {"score": 0.0026175952455594277, "phrase": "meta-programming_systems"}, {"score": 0.0025500402081330394, "phrase": "static_type_checking"}, {"score": 0.0024950747439601863, "phrase": "strong_type_system"}, {"score": 0.0023886641270884973, "phrase": "important_property"}, {"score": 0.002286781334850213, "phrase": "typing_errors"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Java", " Meta-programming", " Nested classes", " Active libraries"], "paper_abstract": "We present a new Java-like language design coupling disciplined meta-programming features with a composition language. That is, programmers can write meta-expressions that combine class definitions, on top of a small set of composition operators, inspired by the seminal Bracha's Jigsaw framework. Moreover, such operators are deep, that is, they allow manipulation (e.g., renaming or duplication) of a nested class at any level of depth. This provides an effective language support for active libraries: namely, a (library) class can provide a method returning a customized version of a class, depending, e.g., on the execution platform. Since a class can contain nested classes, a whole library can be generated in this way. That is, deep operators allow the programmer to better exploit meta-programming capabilities, leading to a \"meta-programming in the large\" style. We adopt a mixed typechecking technique, which provides a good compromise between meta-programming systems with extreme expressiveness and no static type checking, and those with strong type system and only limited meta-programming capability. In particular, our technique ensures an important property, called meta-level soundness, stating that typing errors never originate from already compiled (meta-)code, that is, programmers can safely use (active) libraries. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A meta-circular language for active libraries", "paper_id": "WOS:000344578700005"}