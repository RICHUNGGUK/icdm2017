{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "jason"}, {"score": 0.01034166830106996, "phrase": "erlang"}, {"score": 0.006489673832661396, "phrase": "ejason"}, {"score": 0.004679292179562043, "phrase": "multi-agent_system_programming_language"}, {"score": 0.004594951819987416, "phrase": "fault_tolerance"}, {"score": 0.0044192837023190445, "phrase": "jason_multi-agent_system"}, {"score": 0.004328344652646623, "phrase": "programming_language"}, {"score": 0.004261365275733984, "phrase": "standard_java_based_jason_implementation"}, {"score": 0.004195418010131832, "phrase": "java_code"}, {"score": 0.004141238989360548, "phrase": "jason-based_agent_systems"}, {"score": 0.003820542018296918, "phrase": "low-level_agent_monitoring_mechanism"}, {"score": 0.0036363418376496484, "phrase": "e.g._hardware_failures"}, {"score": 0.003542976343910816, "phrase": "second_fault_tolerance_mechanism"}, {"score": 0.003434085751246066, "phrase": "second_agent"}, {"score": 0.003407388290583047, "phrase": "supervision_mechanism"}, {"score": 0.0033546123237802234, "phrase": "low-level_faults"}, {"score": 0.003268456693603525, "phrase": "higher-level_failures"}, {"score": 0.0032430426853131346, "phrase": "e.g._\"event_overload"}, {"score": 0.002795926244280287, "phrase": "fault_tolerance_mechanisms"}, {"score": 0.0027454383581457555, "phrase": "agent_perspective"}, {"score": 0.0026609940110902666, "phrase": "supervisor_mechanism"}, {"score": 0.002599365215003002, "phrase": "supervisor_behaviour"}, {"score": 0.002532557109736645, "phrase": "agent-oriented_programming"}, {"score": 0.0024932972286158504, "phrase": "process-oriented_programming"}, {"score": 0.0024103044278902916, "phrase": "agent_programming"}, {"score": 0.002342236108886523, "phrase": "supervision_trees"}, {"score": 0.002299921909935613, "phrase": "supervision_relations"}, {"score": 0.00220030712402947, "phrase": "supervision_policy"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Multi-agent systems", " Fault tolerance", " Jason programming language", " Erlang programming language", " eJason"], "paper_abstract": "In this article we describe an extension of the multi-agent system programming language Jason with constructs for distribution and fault tolerance. This extension is completely integrated into Jason in the sense that distributing a Jason multi-agent system does not require the use of another programming language. This contrasts with the standard Java based Jason implementation, which often requires writing Java code in order to distribute Jason-based agent systems. These extensions to Jason are being implemented in eJason, an Erlang-based implementation of Jason. We introduce two different fault tolerance mechanisms that allow fault detection and recovery. A low-level agent monitoring mechanism allows a monitoring agent to detect, and possibly recover, when another agent experiences difficulties such as e.g. hardware failures or due to network partitioning. More novel is the second fault tolerance mechanism, supervision, whereby one agent acts as a supervisor to a second agent. The supervision mechanism is in addition to handling low-level faults such as the above, also capable of detecting higher-level failures such as e.g. \"event overload\" (an agent is incapable of timely handling all its associated events and plans) and \"divergence\" (an agent is not completing any iteration of its reasoning cycle). Moreover, mechanisms exist for another agent to inform a supervisor that one of its supervised agents is misbehaving. Although these extensions are inspired by the distribution and fault tolerance mechanisms of Erlang, due to the agent perspective, the details are quite different. For instance, the supervisor mechanism of eJason is much More capable than the supervisor behaviour of Erlang, corresponding to the more abstract/higher-level perspective offered by agent-oriented programming (Jason) compared with process-oriented programming (Erlang). As another example, from the perspective of agent programming we consider it natural to support the flexibility of the supervision trees, i.e. allow the evolution of supervision relations over time. For instance, the supervisor of an agent, as well as the supervision policy maintained for that same agent, may vary as the system evolves. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Adding distribution and fault tolerance to Jason", "paper_id": "WOS:000347741000006"}