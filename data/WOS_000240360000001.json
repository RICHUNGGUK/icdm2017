{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_component_model"}, {"score": 0.003629882559085245, "phrase": "current_software_component_models"}, {"score": 0.0034088473318056537, "phrase": "port-connector_type_architectural_units"}, {"score": 0.003234934827553253, "phrase": "method_calls"}, {"score": 0.0031678720736808574, "phrase": "port-to-port_connections"}, {"score": 0.0027645030021576926, "phrase": "proper_composition_theory"}, {"score": 0.0026233771102489394, "phrase": "key_underlying_concepts"}, {"score": 0.0021049977753042253, "phrase": "preliminary_formalisation"}], "paper_keywords": [""], "paper_abstract": "A software component model should define what components are, and how they can be composed. That is, it should define a theory of components and their composition. Current software component models tend to use objects or port-connector type architectural units as components, with method calls and port-to-port connections as composition mechanisms. However, these models do not provide a proper composition theory, in particular for key underlying concepts such as encapsulation and compositionality. In this paper, we outline our notion of these concepts, and give a preliminary formalisation of a software component model that embodies these concepts.", "paper_title": "A software component model and its preliminary formalisation", "paper_id": "WOS:000240360000001"}