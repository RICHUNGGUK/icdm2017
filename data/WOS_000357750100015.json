{"auto_keywords": [{"score": 0.03265882712288986, "phrase": "quantum_impurity_models"}, {"score": 0.015504850001013556, "phrase": "broad_range"}, {"score": 0.013673145382407104, "phrase": "continuous-time_quantum_monte_carlo_algorithm"}, {"score": 0.012138725433614108, "phrase": "distributed_program"}, {"score": 0.01207601601774858, "phrase": "test_data"}, {"score": 0.008588801233516486, "phrase": "quantum_impurity_model"}, {"score": 0.00481495049065317, "phrase": "monte_carlo"}, {"score": 0.0047732596509542135, "phrase": "quantum_impurity_solvers"}, {"score": 0.004715495359277253, "phrase": "theoretical_studies"}, {"score": 0.004699119435476199, "phrase": "strongly_correlated_electron_systems"}, {"score": 0.00464224817724675, "phrase": "key_role"}, {"score": 0.004626125443174008, "phrase": "dynamical_mean-field_theory_calculations"}, {"score": 0.0045780908918517365, "phrase": "realistic_materials"}, {"score": 0.004506968388996092, "phrase": "efficient_quantum_impurity_solvers"}, {"score": 0.004483506168601641, "phrase": "important_task"}, {"score": 0.004413846562278824, "phrase": "open_source"}, {"score": 0.004398513571768572, "phrase": "quantum_impurity_solver_toolkit"}, {"score": 0.004285193972524824, "phrase": "hybridization_expansion_continuous-time_quantum_monte_carlo_algorithm"}, {"score": 0.00424068434073463, "phrase": "essential_pre-_and_post-processing_tools"}, {"score": 0.004196635074932515, "phrase": "basic_principle"}, {"score": 0.004145819820196421, "phrase": "implementation_details"}, {"score": 0.004131414047587761, "phrase": "optimization_strategies"}, {"score": 0.004109898803587949, "phrase": "software_framework"}, {"score": 0.004095617334937815, "phrase": "major_features"}, {"score": 0.004074287747487018, "phrase": "installation_procedure"}, {"score": 0.003928046616939266, "phrase": "iqist._program_summary_program_title"}, {"score": 0.003914394581843095, "phrase": "iqist_catalogue"}, {"score": 0.0038334692153941716, "phrase": "cpc_program_library"}, {"score": 0.003820144626025562, "phrase": "queen's_university"}, {"score": 0.003806866457020912, "phrase": "belfast"}, {"score": 0.0037936337008760827, "phrase": "n._ireland"}, {"score": 0.003767306059684317, "phrase": "gnu_general_public_license"}, {"score": 0.003544567686182207, "phrase": "tar.gz_programming_language"}, {"score": 0.003520055610496234, "phrase": "python"}, {"score": 0.003405430499774253, "phrase": "linux"}, {"score": 0.003393676950608121, "phrase": "mac"}, {"score": 0.003370111842731304, "phrase": "windows"}, {"score": 0.0032717195003881985, "phrase": "mpi"}, {"score": 0.0032603054398040046, "phrase": "openmp"}, {"score": 0.0032095689678711395, "phrase": "problem_classification"}, {"score": 0.0031872817402548333, "phrase": "external_routines"}, {"score": 0.003176202895997884, "phrase": "blas"}, {"score": 0.003165152315180927, "phrase": "lapack"}, {"score": 0.0031541524944529676, "phrase": "latex"}, {"score": 0.0031213414461042067, "phrase": "user_manual"}, {"score": 0.0030567611787965243, "phrase": "magnetic_impurities"}, {"score": 0.00304612805984543, "phrase": "metallic_hosts"}, {"score": 0.0030092017034068666, "phrase": "coulomb_interaction"}, {"score": 0.0029623799966566784, "phrase": "impurity_atom"}, {"score": 0.0028859524832670525, "phrase": "action_formulation"}, {"score": 0.0028459983381247554, "phrase": "time-dependent_hybridization_function"}, {"score": 0.0027774012702779676, "phrase": "heavy_fermion_systems"}, {"score": 0.0027629177814951418, "phrase": "kondo_insulators"}, {"score": 0.0027485096125031273, "phrase": "quantum_dots"}, {"score": 0.0027104531025934865, "phrase": "important_role"}, {"score": 0.0027010213723645633, "phrase": "auxiliary_problems"}, {"score": 0.002691622373727335, "phrase": "dynamical_mean-field_theory"}, {"score": 0.002640507929183363, "phrase": "interacting_lattice_model"}, {"score": 0.002603942931246186, "phrase": "self-consistent_manner"}, {"score": 0.002581346714706684, "phrase": "accurate_and_efficient_solution"}, {"score": 0.002558946078114407, "phrase": "essential_task"}, {"score": 0.0025059724686541263, "phrase": "numerically_exact_continuous-time_quantum_monte_carlo_method"}, {"score": 0.002449818149454178, "phrase": "iqist_software_package"}, {"score": 0.002428556123860814, "phrase": "hybridization_expansion_version"}, {"score": 0.0023907473137974493, "phrase": "general_matrix_formalism"}, {"score": 0.002369996747258824, "phrase": "key_idea"}, {"score": 0.0023371689326096476, "phrase": "partition_function"}, {"score": 0.0023128461295620958, "phrase": "impurity-bath_hybridization"}, {"score": 0.0022728680466673427, "phrase": "relevant_orders"}, {"score": 0.002245294339563866, "phrase": "detailed_review"}, {"score": 0.002233579447177513, "phrase": "continuous-time_quantum_monte_carlo_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Quantum impurity model", " Continuous-time quantum Monte Carlo algorithm", " Dynamical mean-field theory"], "paper_abstract": "Quantum impurity solvers have a broad range of applications in theoretical studies of strongly correlated electron systems. Especially, they play a key role in dynamical mean-field theory calculations of correlated lattice models and realistic materials. Therefore, the development and implementation of efficient quantum impurity solvers is an important task. In this paper, we present an open source interacting quantum impurity solver toolkit (dubbed iQIST). This package contains several highly optimized quantum impurity solvers which are based on the hybridization expansion continuous-time quantum Monte Carlo algorithm, as well as some essential pre- and post-processing tools. We first introduce the basic principle of continuous-time quantum Monte Carlo algorithm and then discuss the implementation details and optimization strategies. The software framework, major features, and installation procedure for iQIST are also explained. Finally, several simple tutorials are presented in order to demonstrate the usage and power of iQIST. Program summary Program title: iQIST Catalogue identifier: AEWQ_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEWQ_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public License, version 3 No. of lines in distributed program, including test data, etc.: 226270 No. of bytes in distributed program, including test data, etc.: 5263144 Distribution format: tar.gz Programming language: Fortran 2008 and Python. Computer: Desktop PC, laptop, high performance computing cluster. Operating system: Unix, Linux, Mac OS X, Windows. Has the code been vectorized or parallelized?: Yes, it is parallelized by MPI and OpenMP RAM: Depends on the complexity of the problem Classification: 7.3. External routines: BLAS, LAPACK, Latex is required to build the user manual. Nature of problem: Quantum impurity models were originally proposed to describe magnetic impurities in metallic hosts. In these models, the Coulomb interaction acts between electrons occupying the orbitals of the impurity atom. Electrons can hop between the impurity and the host, and in an action formulation, this hopping is described by a time-dependent hybridization function. Nowadays quantum impurity models have a broad range of applications, from the description of heavy fermion systems, and Kondo insulators, to quantum dots in nano-science. They also play an important role as auxiliary problems in dynamical mean-field theory and its diagrammatic extensions [1-3], where an interacting lattice model is mapped onto a quantum impurity model in a self-consistent manner. Thus, the accurate and efficient solution of quantum impurity models becomes an essential task. Solution method: The quantum impurity model can be solved by the numerically exact continuous-time quantum Monte Carlo method, which is the most efficient and powerful impurity solver for finite temperature simulations. In the iQIST software package, we implemented the hybridization expansion version of continuous-time quantum Monte Carlo algorithm. Both the segment representation and general matrix formalism are supported. The key idea of this algorithm is to expand the partition function diagrammatically in powers of the impurity-bath hybridization, and to stochastically sample these diagrams to all relevant orders using the Metropolis Monte Carlo algorithm. For a detailed review of the continuous-time quantum Monte Carlo algorithms, please refer to [4]. Running time: Depends on the complexity of the problem. The sample run supplied in the distribution takes about 1.5 minutes. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "iQIST: An open source continuous-time quantum Monte Carlo impurity solver toolkit", "paper_id": "WOS:000357750100015"}