{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "tunstall_codes"}, {"score": 0.0043786774510943625, "phrase": "variable_length_codes"}, {"score": 0.003419943984098415, "phrase": "useful_applications"}, {"score": 0.0032922964156452696, "phrase": "easier_processing"}, {"score": 0.0032302647179383915, "phrase": "fast_decoding"}, {"score": 0.002909342017421165, "phrase": "-fixed_length_codes"}, {"score": 0.0026705673631368023, "phrase": "tunstall"}, {"score": 0.0025954008219792337, "phrase": "new_heuristics"}, {"score": 0.002522344964242888, "phrase": "suffix_trees"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Data compression", " Huffman codes", " Tunstall codes", " Suffix trees"], "paper_abstract": "Though many compression methods are based on the use of variable length codes, there has recently been a trend to search for alternatives in which the lengths of the codewords are more restricted, which can have useful applications, such as easier processing and fast decoding. This paper explores the construction of variable-to-fixed length codes, which have been suggested long ago by Tunstall. Using new heuristics based on suffix trees, the performance of Tunstall codes can in some cases be improved by more than 40%. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "On improving Tunstall codes", "paper_id": "WOS:000294087400013"}