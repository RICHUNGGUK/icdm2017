{"auto_keywords": [{"score": 0.0495290999002817, "phrase": "class_diagrams"}, {"score": 0.00481495049065317, "phrase": "implicit_parallelism"}, {"score": 0.004677847043645765, "phrase": "multicore_processors"}, {"score": 0.004264697351852424, "phrase": "important_concern"}, {"score": 0.004191377834552202, "phrase": "software_development_process"}, {"score": 0.004143196873246147, "phrase": "substantial_refactoring"}, {"score": 0.00402514392911723, "phrase": "legacy_sequential_software"}, {"score": 0.0038210283935447473, "phrase": "parallel_processing"}, {"score": 0.0035442655396704724, "phrase": "object-oriented_programs"}, {"score": 0.0034036089823450385, "phrase": "uml_class_diagrams"}, {"score": 0.003031650815900696, "phrase": "example_instances"}, {"score": 0.0028119023819663472, "phrase": "runtime_aspects"}, {"score": 0.0025780134737796085, "phrase": "oriented_software"}, {"score": 0.002447101794397243, "phrase": "existing_object-oriented_software"}, {"score": 0.0021794454466797382, "phrase": "real-world_case_study"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Class diagram analysis", " Parallel software design", " Object oriented software refactoring"], "paper_abstract": "As multicore processors are becoming more wide-spread, leveraging of parallelism is once again becoming an important concern during the software development process. Substantial refactoring is required to parallelize legacy sequential software in order to exploit the advantages offered by parallel processing. In this study, guidelines are offered to aid in parallelizing object-oriented programs by analyzing their designs as represented in UML class diagrams. We define often occurring patterns of class-dependencies and demonstrate their characteristics in class diagrams by investigating their properties. We present example instances exhibiting the usage of these patterns in class diagrams. Through analyzing the runtime aspects of these instances, we have identified how they impact the parallelization of object oriented software. Taking these lessons into account when refactoring existing object-oriented software can significantly reduce time and effort required. We have evaluated our method by applying it to three popular design patterns and a real-world case study. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Exploring implicit parallelism in class diagrams", "paper_id": "WOS:000289179300010"}