{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "safety_analysis"}, {"score": 0.03307122897002861, "phrase": "incremental_verification_approach"}, {"score": 0.03211942512231789, "phrase": "embedded_c_constructs"}, {"score": 0.031808082480101287, "phrase": "performance_improvement"}, {"score": 0.00476697427418509, "phrase": "automotive_software"}, {"score": 0.004719473826242326, "phrase": "model_checking"}, {"score": 0.0046491050101721545, "phrase": "effective_technique"}, {"score": 0.004556901872357751, "phrase": "subtle_problems"}, {"score": 0.004511485198940203, "phrase": "software_safety"}, {"score": 0.004444203710097833, "phrase": "comprehensive_search_algorithm"}, {"score": 0.004269630481719451, "phrase": "large_number"}, {"score": 0.0038624981944755813, "phrase": "practical_solution"}, {"score": 0.0038239757564863057, "phrase": "model-checking_automotive_operating_systems"}, {"score": 0.003673675864705682, "phrase": "minimum_requirements"}, {"score": 0.0036188435232325337, "phrase": "systematic_engineering_approach"}, {"score": 0.003356675879109443, "phrase": "trampoline_kernel_code"}, {"score": 0.0033231814056233103, "phrase": "formal_models"}, {"score": 0.00327356326590461, "phrase": "model_checker"}, {"score": 0.003270813205543799, "phrase": "spin"}, {"score": 0.0029611289031152856, "phrase": "conversion_methods"}, {"score": 0.002931569771634119, "phrase": "functional_modularization"}, {"score": 0.002873331232538783, "phrase": "hardware-dependent_code"}, {"score": 0.002816246391862638, "phrase": "memory_access"}, {"score": 0.00242266141176955, "phrase": "hardware_resource"}, {"score": 0.0023507916951658455, "phrase": "potential_safety_issues"}, {"score": 0.0023040642263522505, "phrase": "trampoline_operating_system"}, {"score": 0.002246955931290095, "phrase": "present_experimental_evidence"}, {"score": 0.002158505888557746, "phrase": "spin._copyright"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["model checking", " Trampoline operating system", " safety analysis", " Osek", " Vdx", " Spin"], "paper_abstract": "Model checking is an effective technique used to identify subtle problems in software safety using a comprehensive search algorithm. However, this comprehensiveness requires a large number of resources and is often too expensive to be applied in practice. This work strives to find a practical solution to model-checking automotive operating systems for the purpose of safety analysis, with minimum requirements and a systematic engineering approach for applying the technique in practice. The paper presents methods for converting the Trampoline kernel code into formal models for the model checker SPIN, a series of experiments using an incremental verification approach, and the use of embedded C constructs for performance improvement. The conversion methods include functional modularization and treatment for hardware-dependent code, such as memory access for context switching. The incremental verification approach aims at increasing the level of confidence in the verification even when comprehensiveness cannot be provided because of the limitations of the hardware resource. We also report on potential safety issues found in the Trampoline operating system during the experiments and present experimental evidence of the performance improvement using the embedded C constructs in SPIN. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Model checking Trampoline OS: a case study on safety analysis for automotive software", "paper_id": "WOS:000328732800003"}