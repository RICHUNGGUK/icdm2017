{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "sara"}, {"score": 0.006513054940936967, "phrase": "target_code"}, {"score": 0.0057076157232807435, "phrase": "sla"}, {"score": 0.004736045157669388, "phrase": "stack_allocation"}, {"score": 0.0046073860169839305, "phrase": "commonly-used_memory_units"}, {"score": 0.004408729661992651, "phrase": "multiple_registers"}, {"score": 0.0039269071382230444, "phrase": "memory_traffic"}, {"score": 0.0033465923623290034, "phrase": "register_allocation"}, {"score": 0.0033098775672326195, "phrase": "sla."}, {"score": 0.0030470127429039497, "phrase": "single_phase"}, {"score": 0.002931569771634119, "phrase": "register_assignment"}, {"score": 0.0028993944292191433, "phrase": "spill-code_generation"}, {"score": 0.002789528662623221, "phrase": "combined_phase"}, {"score": 0.002758907973783665, "phrase": "faster_code"}, {"score": 0.002669042572650594, "phrase": "individual_phases"}, {"score": 0.0025678829712650437, "phrase": "integer_linear_program"}, {"score": 0.002511803988580901, "phrase": "program_text"}, {"score": 0.0023768935613577985, "phrase": "gcc's_own_implementation"}, {"score": 0.0021049977753042253, "phrase": "separate_sla_phase"}], "paper_keywords": [""], "paper_abstract": "Commonly-used memory units enable a processor to load and store multiple registers in one instruction. We showed in 2003 how to extend gcc with a stack-location-allocation (SLA) phase that reduces memory traffic by rearranging the stack and replacing some load/store instructions with load/store-multiple instructions. While speeding up the target code, our technique leaves room for improvement because of the phase ordering of register allocation before SLA. In this paper we present SARA which combines SLA and register allocation into a single phase. SARA creates a synergy among register assignment, spill-code generation, and SLA that makes the combined phase generate faster code than a sequence of the individual phases. We specify SARA by an integer linear program generated from the program text. We have implemented SARA in gcc, replacing gcc's own implementation of register allocation. For our benchmarks, our results show that the target code is up to 16% faster than gcc with a separate SLA phase.", "paper_title": "SARA: Combining stack allocation and register allocation", "paper_id": "WOS:000237082300018"}