{"auto_keywords": [{"score": 0.023497524039058828, "phrase": "bec"}, {"score": 0.005184951600797714, "phrase": "conventionally"}, {"score": 0.00481495049065317, "phrase": "ldpc_decoding"}, {"score": 0.004670722261414736, "phrase": "low-density_parity-check"}, {"score": 0.004011603024990615, "phrase": "nodes'_messages"}, {"score": 0.0038520615699124123, "phrase": "theoretical_analysis"}, {"score": 0.0038131738052230254, "phrase": "serial_message"}, {"score": 0.0037746771370555546, "phrase": "decoding_schedules"}, {"score": 0.003569763795153386, "phrase": "computation_tree"}, {"score": 0.0035337158050484474, "phrase": "serial_scheduling"}, {"score": 0.0031125795874844438, "phrase": "serial_schedule_propagates_information"}, {"score": 0.003019189898170698, "phrase": "code's_underlying_graph"}, {"score": 0.002943502888225748, "phrase": "asymptotic_analysis"}, {"score": 0.0028990018343924683, "phrase": "serial_schedule's_convergence_rate"}, {"score": 0.0028263192354046245, "phrase": "density_evolution"}, {"score": 0.0026863605504566924, "phrase": "ldpc_codes"}, {"score": 0.0026057256900479026, "phrase": "long_codes"}, {"score": 0.0025793874956029795, "phrase": "serial_schedule"}, {"score": 0.0024023079401125492, "phrase": "standard_flooding_schedule"}, {"score": 0.0023301793939902015, "phrase": "ensemble's_threshold"}, {"score": 0.002226017732566121, "phrase": "binary_erasure_channel"}, {"score": 0.0021591707887653865, "phrase": "natural_assumptions"}, {"score": 0.0021049977753042253, "phrase": "accompanying_concentration_theorem"}], "paper_keywords": ["belief propagation", " density evolution", " factor graph", " iterative decoding", " low-density parity-check (LDPC) codes", " message-passing decoding"], "paper_abstract": "Conventionally, in each low-density parity-check (LDPC) decoding iteration all the variable nodes and subsequently all the check nodes send messages to their neighbors (flooding schedule). An alternative, more efficient, approach is to update the nodes' messages serially (serial schedule). A theoretical analysis of serial message passing decoding schedules is presented. In particular, the evolution of the computation tree under serial scheduling is analyzed. It shows that the tree grows twice as fast in comparison to the flooding schedule's one, indicating that the serial schedule propagates information twice as fast in the code's underlying graph. Furthermore, an asymptotic analysis of the serial schedule's convergence rate is done using the density evolution (DE) algorithm. Applied to various ensembles of LDPC codes, it shows that for long codes the serial schedule is expected to converge in half the number of iterations compared to the standard flooding schedule, when working near the ensemble's threshold. This observation is generally proved for the binary erasure channel (BEC) under some natural assumptions. Finally, an accompanying concentration theorem is proved.", "paper_title": "Efficient serial message-passing schedules for LDPC decoding", "paper_id": "WOS:000250448800015"}