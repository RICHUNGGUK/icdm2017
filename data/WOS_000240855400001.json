{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.010307462916872092, "phrase": "large-scale_heterogeneous_cluster"}, {"score": 0.008355253630257542, "phrase": "jcluster_environment"}, {"score": 0.0050822407817579076, "phrase": "lam-mpi"}, {"score": 0.004461761855323898, "phrase": "jcluster"}, {"score": 0.004207734323806386, "phrase": "critical_services"}, {"score": 0.004134372859330047, "phrase": "particular_automatic_load_balancing"}, {"score": 0.00408617426304956, "phrase": "high-performance_communication"}, {"score": 0.003991449490087454, "phrase": "parallel_applications"}, {"score": 0.003676811616723809, "phrase": "task_scheduler"}, {"score": 0.003591542373891629, "phrase": "transitive_random_stealing"}, {"score": 0.0034673190692473903, "phrase": "performance_evaluations"}, {"score": 0.0032505921489759224, "phrase": "idle_node"}, {"score": 0.002924694271730544, "phrase": "well-known_dynamic_load-balancing_algorithm"}, {"score": 0.0027417911324611917, "phrase": "performance_aspects"}, {"score": 0.002615977783510631, "phrase": "asynchronously_multithreaded_transmission"}, {"score": 0.002540285736232124, "phrase": "high-performance_pvm-like_and_mpi-like_message-passing_interface"}, {"score": 0.002193367454830741, "phrase": "java_grande_forum's_pingpong_benchmark"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Java parallel environment", " large-scale heterogenous cluster", " load balancing", " transitive random stealing", " asynchronously multithreaded transmission"], "paper_abstract": "In this paper, we present Jcluster, an efficient Java parallel environment that provides some critical services, in particular automatic load balancing and high-performance communication, for developing parallel applications in Java on a large-scale heterogeneous cluster. In the Jcluster environment, we implement a task scheduler based on a transitive random stealing (TRS) algorithm. Performance evaluations show that the scheduler based on TRS can make any idle node obtain a task from another node with much fewer stealing times than random stealing (RS), which is a well-known dynamic load-balancing algorithm, on a large-scale cluster. In the performance aspects of communication, with the method of asynchronously multithreaded transmission, we implement a high-performance PVM-like and MPI-like message-passing interface in pure Java. The evaluation of the communication performance is conducted among the Jcluster environment, LAM-MPI and mpiJava on LAM-MPI based on the Java Grande Forum's pingpong benchmark. Copyright (c) 2005 John Wiley & Sons, Ltd.", "paper_title": "Jcluster: an efficient Java parallel environment on a large-scale heterogeneous cluster", "paper_id": "WOS:000240855400001"}