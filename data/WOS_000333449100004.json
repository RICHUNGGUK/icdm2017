{"auto_keywords": [{"score": 0.049465088868450455, "phrase": "ide_events"}, {"score": 0.00481495049065317, "phrase": "domain_specific_aspect_language"}, {"score": 0.004692227830462433, "phrase": "integrated_development_environments"}, {"score": 0.004484908028307205, "phrase": "primary_way"}, {"score": 0.004231699728933577, "phrase": "built-in_features"}, {"score": 0.0038658652042527558, "phrase": "ide"}, {"score": 0.003816197777388722, "phrase": "new_features"}, {"score": 0.0037188360359702182, "phrase": "plugin_architectures"}, {"score": 0.0035087260813209593, "phrase": "unanticipated_extensions"}, {"score": 0.0034636656250083744, "phrase": "event_handling"}, {"score": 0.0028715299874549245, "phrase": "concrete_examples"}, {"score": 0.002639968630788011, "phrase": "join_points"}, {"score": 0.002380381895973937, "phrase": "ide_extension"}, {"score": 0.0021883400011393564, "phrase": "ide_plugins"}], "paper_keywords": ["IDE", " Plugins", " Development Environment", " Domain Specific Aspect Languages", " Aspects"], "paper_abstract": "Integrated development environments (IDEs) have become the primary way to develop software. Besides just using the built-in features, it becomes more and more important to be able to extend the IDE with new features and extensions. Plugin architectures exist, but they show weaknesses related to unanticipated extensions and event handling. In this paper, we argue that a more general solution for extending IDEs is needed. We present and discuss a solution, motivated by a set of concrete examples: a domain specific aspect language for IDE events. In it, join points are events of interest that may trigger the advice in which the behavior of the IDE extension is called. We show how this allows for the development of IDE plugins and demonstrate the advantages over traditional publish/subscribe systems.", "paper_title": "DIE: A Domain Specific Aspect Language for IDE Events", "paper_id": "WOS:000333449100004"}