{"auto_keywords": [{"score": 0.041361508715379594, "phrase": "domain_abstraction"}, {"score": 0.035761459630628156, "phrase": "test_generation"}, {"score": 0.00481495049065317, "phrase": "model-based_testing_approach"}, {"score": 0.00462291551375938, "phrase": "b_models"}, {"score": 0.004566805735863274, "phrase": "interesting_modeling_solution"}, {"score": 0.0044747919503484055, "phrase": "industrial_applications"}, {"score": 0.004108066884382925, "phrase": "abstraction_function"}, {"score": 0.0038962096720793443, "phrase": "state_variables"}, {"score": 0.0036503460615862574, "phrase": "real_applications"}, {"score": 0.00332375606483146, "phrase": "preliminary_syntactic_abstraction_phase"}, {"score": 0.0032700071110068323, "phrase": "variable_elimination"}, {"score": 0.0032040376301815544, "phrase": "syntactic_transformation"}, {"score": 0.0031139032290048788, "phrase": "b_event_model"}, {"score": 0.0030139837612215728, "phrase": "relevant_variables"}, {"score": 0.002965229277927781, "phrase": "test_purpose"}, {"score": 0.002777949746964955, "phrase": "source_model"}, {"score": 0.002699769374493867, "phrase": "selected_relevant_variables"}, {"score": 0.0024182330686905256, "phrase": "abstraction_process"}, {"score": 0.002388817995161952, "phrase": "finite_state_system"}, {"score": 0.0023405839743112504, "phrase": "abstraction_computation"}, {"score": 0.0023121112251855667, "phrase": "model-based_testing_process"}, {"score": 0.0022287497627555895, "phrase": "model_simplification"}, {"score": 0.00221063611719246, "phrase": "variables'_elimination"}, {"score": 0.0021049977753042253, "phrase": "proof_obligations"}], "paper_keywords": ["Abstraction", " Test generation", " (Bi)Simulation slicing"], "paper_abstract": "In a model-based testing approach as well as for the verification of properties, B models provide an interesting modeling solution. However, for industrial applications, the size of their state space often makes them hard to handle. To reduce the amount of states, an abstraction function can be used. The abstraction is often a domain abstraction of the state variables that requires many proof obligations to be discharged, which can be very time-consuming for real applications. This paper presents a contribution to this problem that complements an approach based on domain abstraction for test generation, by adding a preliminary syntactic abstraction phase, based on variable elimination. We define a syntactic transformation that suppresses some variables from a B event model, in addition to three methods that choose relevant variables according to a test purpose. In this way, we propose a method that computes an abstraction of a source model M according to a set of selected relevant variables. Depending on the method used, the abstraction can be computed as a simulation or as a bisimulation of M. With this approach, the abstraction process produces a finite state system. We apply this abstraction computation to a model-based testing process. We evaluate experimentally the impact of the model simplification by variables' elimination on the size of the models, on the number of proof obligations to discharge, on the precision of the abstraction and on the coverage achieved by the test generation.", "paper_title": "B model slicing and predicate abstraction to generate tests", "paper_id": "WOS:000313815500007"}