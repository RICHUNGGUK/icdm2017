{"auto_keywords": [{"score": 0.03412073160526442, "phrase": "direct_skew_removal"}, {"score": 0.030795477365514756, "phrase": "clock_skew"}, {"score": 0.03035918961825625, "phrase": "online_delay_measurements"}, {"score": 0.00481495049065317, "phrase": "low-complexity_offline"}, {"score": 0.004689650818647484, "phrase": "packet_delay_traces"}, {"score": 0.004662250189344776, "phrase": "important_sources"}, {"score": 0.004594443767709888, "phrase": "end-to-end_performance"}, {"score": 0.004461761855323898, "phrase": "tight_synchronization"}, {"score": 0.004396858397567621, "phrase": "end_systems"}, {"score": 0.004134372859330047, "phrase": "precise_measurements"}, {"score": 0.0041102032028337366, "phrase": "network_latencies"}, {"score": 0.003887496109332722, "phrase": "delay_traces"}, {"score": 0.0038534477978822133, "phrase": "first_technique"}, {"score": 0.00376409764683147, "phrase": "clock_skew_estimate"}, {"score": 0.0036660436272785476, "phrase": "consecutive_packets"}, {"score": 0.0036232849574569953, "phrase": "second_technique"}, {"score": 0.003591542373891629, "phrase": "direct_skew_removal_technique"}, {"score": 0.0034979676031187015, "phrase": "possible_skew_values"}, {"score": 0.0034673190692473903, "phrase": "best_value"}, {"score": 0.0034068225125064586, "phrase": "existing_techniques"}, {"score": 0.0033769698684652646, "phrase": "linear_programming"}, {"score": 0.0032601438574879666, "phrase": "skew_estimation_operation"}, {"score": 0.0031289290660162145, "phrase": "skew_removal"}, {"score": 0.00307431840409833, "phrase": "original_traces"}, {"score": 0.0030118058266380503, "phrase": "clock_resets"}, {"score": 0.002950560605386499, "phrase": "time_complexity"}, {"score": 0.0028234703730349916, "phrase": "real-time_endpoints"}, {"score": 0.0027987150590078123, "phrase": "audio_and_video_terminals"}, {"score": 0.0027579362569638945, "phrase": "buffering_delay"}, {"score": 0.0027417911324611917, "phrase": "received_packets"}, {"score": 0.002693919110230191, "phrase": "different_sources"}, {"score": 0.0026313840069327713, "phrase": "communication_sessions"}, {"score": 0.002600661525224505, "phrase": "long_time"}, {"score": 0.0025627610547510867, "phrase": "offline_skew_removal"}, {"score": 0.0025032629377304584, "phrase": "online_skew_removal_problem"}, {"score": 0.002381365139274329, "phrase": "first_algorithm"}, {"score": 0.0022653897419281934, "phrase": "minimum_measured_delay"}, {"score": 0.0022455164874830777, "phrase": "second_algorithm"}, {"score": 0.0022192891418394514, "phrase": "combined_algorithm"}, {"score": 0.002193367454830741, "phrase": "mixed_approach"}, {"score": 0.0021741246430344607, "phrase": "sliding_window"}, {"score": 0.0021550502873107654, "phrase": "convex-hull_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["clock skew", " delay measurement"], "paper_abstract": "Packet delay traces are important sources of measurements for analyzing end-to-end performance of computer networks. Due to the lack of tight synchronization between the clocks of end systems, these measurements can be quite inaccurate. Therefore, detection, estimation and removal of clock skew from delay traces is a critical operation to obtain precise measurements of network latencies. In this paper, we propose two new techniques to detect, estimate and remove the clock skew in delay traces. The first technique, named average technique, derives the clock skew estimate by calculating the average of the difference between consecutive packets delay. The second technique, named direct skew removal technique, proceeds by iteratively evaluating a set of possible skew values until the best value is reached. Compared with existing techniques such as linear programming and Convex-Hull, the average technique reduces the complexity of the skew estimation operation. The direct skew removal is more accurate and allows us to obtain delay after skew removal with the same precision as the original traces. Applied to traces that contain clock resets, the direct skew removal also reduces the time complexity of the operation. Clock skew is also present in online delay measurements that are used by real-time endpoints such as audio and video terminals, to determine the buffering delay of received packets and to synchronize streams from different sources. The problem is more obvious when communication sessions last for a long time. Contrary to the offline skew removal, little work has been done on the online skew removal problem. In this paper, we propose two simple algorithms to remove the clock skew from online delay measurements. The first algorithm, named sliding window algorithm, tracks the skew by continually evaluating the variation of the minimum measured delay. The second algorithm, named the combined algorithm, is a mixed approach of the sliding window and the Convex-Hull algorithm proposed elsewhere. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Low-complexity offline and online clock skew estimation and removal", "paper_id": "WOS:000238635900014"}