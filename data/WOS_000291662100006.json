{"auto_keywords": [{"score": 0.048231156244864744, "phrase": "service-oriented_applications"}, {"score": 0.00481495049065317, "phrase": "capito"}, {"score": 0.004278807087784626, "phrase": "abstract_level"}, {"score": 0.00414616342377235, "phrase": "key_functionality"}, {"score": 0.003954837422946628, "phrase": "plug-in_level"}, {"score": 0.003742711659195878, "phrase": "standardised_protocol_stacks"}, {"score": 0.0035981701736904495, "phrase": "concrete_level"}, {"score": 0.003299460925313939, "phrase": "symmetric_cryptographic_primitives"}, {"score": 0.0032223742018434856, "phrase": "capito_approach"}, {"score": 0.00266693888510356, "phrase": "capito_specifications"}, {"score": 0.0025436978068459565, "phrase": "security_flaws"}, {"score": 0.00238816839721704, "phrase": "static_analysis"}, {"score": 0.002332322771009122, "phrase": "corresponding_lysa_specifications"}, {"score": 0.0021049977753042253, "phrase": "banking_sector"}], "paper_keywords": ["Communication protocols", " Formal verification", " Standardised protocol stacks", " Process algebras"], "paper_abstract": "CaPiTo allows the modelling of service-oriented applications using process algebras at three levels of abstraction. The abstract level focuses on the key functionality of the services; the plug-in level shows how to obtain security using standardised protocol stacks; finally, the concrete level allows to consider how security is obtained using asymmetric and symmetric cryptographic primitives. The CaPiTo approach therefore caters for a variety of developers that need to cooperate on designing and implementing service-oriented applications. We show how to formally analyse CaPiTo specifications for ensuring the absence of security flaws. The method used is based on static analysis of the corresponding LySa specifications. We illustrate the development on two industrial case studies; one taken from the banking sector and the other a single sign-on protocol.", "paper_title": "CaPiTo: protocol stacks for services", "paper_id": "WOS:000291662100006"}