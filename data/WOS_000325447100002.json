{"auto_keywords": [{"score": 0.046916644702957915, "phrase": "hll"}, {"score": 0.035807885788853286, "phrase": "hardware_platform"}, {"score": 0.00481495049065317, "phrase": "design_methodology"}, {"score": 0.004671156704912419, "phrase": "combined_graphical_and_scheduling_technique"}, {"score": 0.004566123591480369, "phrase": "c-based_high_level_language"}, {"score": 0.00433012599398353, "phrase": "fpga."}, {"score": 0.003748937184382714, "phrase": "existing_solutions"}, {"score": 0.0036368625017975343, "phrase": "steep_learning_curve"}, {"score": 0.0034749794034364197, "phrase": "appropriate_mapping_pattern"}, {"score": 0.0030775481952376987, "phrase": "data_flow"}, {"score": 0.0030311679447397725, "phrase": "data_dependencies"}, {"score": 0.002874257080906824, "phrase": "scheduling_patterns"}, {"score": 0.0026843584448921565, "phrase": "suitable_mapping_pattern"}, {"score": 0.0025260919226344305, "phrase": "mapping_pattern"}, {"score": 0.0024691719264774165, "phrase": "synthesizable_hdl"}, {"score": 0.002254003531073337, "phrase": "different_real-time_case_studies"}, {"score": 0.002169968849836984, "phrase": "different_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Data dependency", " Compiler", " Scheduling", " Algorithms", " Applications"], "paper_abstract": "In this paper, we present a design methodology that uses a combined graphical and scheduling technique to map C-based high level language (HLL) based applications to FPGA. Although there are a number of approaches addressing the mapping from HLL to hardware, many of these existing solutions either require a steep learning curve or do not produce an appropriate mapping pattern for the hardware platform. We provide a solution to this problem, by analyzing the data flow and data dependencies in the given code and proposing a scheduling patterns for the given algorithm. We then provide a suitable mapping pattern for the hardware platform. We use the mapping pattern to deliver synthesizable HDL (Verilog) code. We demonstrate our design methodology with results from different real-time case studies that are based on different algorithms. Published by Elsevier Inc.", "paper_title": "C2FPGA-A dependency-timing graph design methodology", "paper_id": "WOS:000325447100002"}