{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nogood"}, {"score": 0.004464156619275582, "phrase": "distributed_constraint_satisfaction_problems"}, {"score": 0.004310949776826717, "phrase": "first_algorithm"}, {"score": 0.0042610532651691305, "phrase": "afc-ng"}, {"score": 0.004162978902905443, "phrase": "nogood-based_version"}, {"score": 0.004114787982556699, "phrase": "asynchronous_forward_checking"}, {"score": 0.003837089839193524, "phrase": "value_removals"}, {"score": 0.0037487368769596814, "phrase": "simultaneous_backtracks"}, {"score": 0.0036838048761094933, "phrase": "different_agents"}, {"score": 0.0036411406244705557, "phrase": "different_destinations"}, {"score": 0.00357806560856829, "phrase": "second_algorithm"}, {"score": 0.0035366216368204182, "phrase": "asynchronous_forward"}, {"score": 0.0032786537599187125, "phrase": "afc-ng_algorithm"}, {"score": 0.0031660031870090434, "phrase": "pseudo-tree_ordering"}, {"score": 0.003111133215976132, "phrase": "constraint_graph"}, {"score": 0.0030042210975126616, "phrase": "simultaneous_search_processes"}, {"score": 0.0029694040368299624, "phrase": "disjoint_problem_subtrees"}, {"score": 0.002658068304632523, "phrase": "polynomial_space"}, {"score": 0.0024784363584530976, "phrase": "random_discsps"}, {"score": 0.002421291757425244, "phrase": "real_benchmarks"}, {"score": 0.0023932142697579506, "phrase": "sensor_networks"}, {"score": 0.002154693685426657, "phrase": "compared_algorithms"}, {"score": 0.0021049977753042253, "phrase": "sparse_problems"}], "paper_keywords": ["Distributed constraint reasoning", " Search algorithms"], "paper_abstract": "We propose two new algorithms for solving Distributed Constraint Satisfaction Problems (DisCSPs). The first algorithm, AFC-ng, is a nogood-based version of Asynchronous Forward Checking (AFC). Besides its use of nogoods as justification of value removals, AFC-ng allows simultaneous backtracks going from different agents to different destinations. The second algorithm, Asynchronous Forward Checking Tree (AFC-tree), is based on the AFC-ng algorithm and is performed on a pseudo-tree ordering of the constraint graph. AFC-tree runs simultaneous search processes in disjoint problem subtrees and exploits the parallelism inherent in the problem. We prove that AFC-ng and AFC-tree only need polynomial space. We compare the performance of these algorithms with other DisCSP algorithms on random DisCSPs and instances from real benchmarks: sensor networks and distributed meeting scheduling. Our experiments show that AFC-ng improves on AFC and that AFC-tree outperforms all compared algorithms, particularly on sparse problems.", "paper_title": "Nogood-based asynchronous forward checking algorithms", "paper_id": "WOS:000317978200004"}