{"auto_keywords": [{"score": 0.03007904096220623, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "confinement_properties"}, {"score": 0.0046141941030386525, "phrase": "object_graphs"}, {"score": 0.004347057700479576, "phrase": "encapsulation_properties"}, {"score": 0.004201381218977942, "phrase": "practical_point"}, {"score": 0.0038911408649026724, "phrase": "secure_object-oriented_systems"}, {"score": 0.0035731269727067496, "phrase": "untrusted_components"}, {"score": 0.0032531496610470377, "phrase": "smallest_possible_set"}, {"score": 0.0031440159350875057, "phrase": "data_structures"}, {"score": 0.002936577024096783, "phrase": "package-level_confinement"}, {"score": 0.0026734504926268442, "phrase": "call-by-value_object_calculus"}, {"score": 0.0021412594173592513, "phrase": "related_research"}, {"score": 0.0021049977753042253, "phrase": "language-based_security"}], "paper_keywords": [""], "paper_abstract": "Confinement properties impose a structure on object graphs which can be used to enforce encapsulation properties. From a practical point of view, encapsulation is essential for building secure object-oriented systems as security requires that the interface between trusted and untrusted components of a system be clearly delineated and restricted to the smallest possible set of operations and data structures. This paper investigates the notion of package-level confinement and proposes a type system that enforces this notion for a call-by-value object calculus as well as a generic extension thereof. We give a proof of soundness of this type system, and establish links between this work and related research in language-based security.", "paper_title": "Type-based confinement", "paper_id": "WOS:000235071300006"}