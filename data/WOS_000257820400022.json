{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "execution_indexing"}, {"score": 0.04417301402964413, "phrase": "multiple_executions"}, {"score": 0.004574247691703376, "phrase": "desirable_execution_indices"}, {"score": 0.00401216440036853, "phrase": "wide_variety"}, {"score": 0.003966667994579941, "phrase": "dynamic_program_analyses"}, {"score": 0.003725470458263889, "phrase": "program_profiles"}, {"score": 0.0033619033669956317, "phrase": "original_execution"}, {"score": 0.0032487508969192293, "phrase": "dynamic_instrumentation"}, {"score": 0.0030337085953063125, "phrase": "execution_index"}, {"score": 0.0029652292779277782, "phrase": "indexing_scheme"}, {"score": 0.0029148831519944358, "phrase": "execution_structure"}, {"score": 0.002881793492919646, "phrase": "program_state"}, {"score": 0.0028006988338192375, "phrase": "highly_optimized_online_implementation"}, {"score": 0.0026604207233593973, "phrase": "client_study"}, {"score": 0.0024984517279573906, "phrase": "data_race"}, {"score": 0.0023463203637929466, "phrase": "racing_pair"}, {"score": 0.002241517354570928, "phrase": "corresponding_points"}], "paper_keywords": ["algorithms", " measurement", " reliability", " execution indexing", " execution alignment", " control dependence", " structural indexing", " semantic augmentation", " data race"], "paper_abstract": "Execution indexing uniquely identifies a point in an execution. Desirable execution indices reveal correlations between points in an execution and establish correspondence between points across multiple executions. Therefore, execution indexing is essential for a wide variety of dynamic program analyses, for example, it can be used to organize program profiles; it can precisely identify the point in a re-execution that corresponds to a given point in an original execution and thus facilitate debugging or dynamic instrumentation. In this paper, we formally define the concept of execution index and propose an indexing scheme based on execution structure and program state. We present a highly optimized online implementation of the technique. We also perform a client study, which targets producing a failure inducing schedule for a data race by verifying the two alternative happens-before orderings of a racing pair. Indexing is used to precisely locate corresponding points across multiple executions in the presence of non-determinism so that no heavyweight tracing/replay system is needed.", "paper_title": "Efficient program execution indexing", "paper_id": "WOS:000257820400022"}