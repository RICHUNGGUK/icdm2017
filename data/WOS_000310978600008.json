{"auto_keywords": [{"score": 0.04395367170459457, "phrase": "adaptive_threshold"}, {"score": 0.009072815665176951, "phrase": "lof"}, {"score": 0.00481495049065317, "phrase": "source_codes"}, {"score": 0.004772818068176176, "phrase": "adaptive_methods"}, {"score": 0.004669085371587273, "phrase": "adaptive_method"}, {"score": 0.0046079260641779755, "phrase": "plagiarized_pairs"}, {"score": 0.004547564208690591, "phrase": "large_set"}, {"score": 0.004507760907425495, "phrase": "source_code"}, {"score": 0.004294962474996283, "phrase": "adaptive_algorithm"}, {"score": 0.0041102032028337366, "phrase": "conventional_algorithms"}, {"score": 0.0040385352882334235, "phrase": "greedy_string_tiling"}, {"score": 0.003985602342418578, "phrase": "local_alignments"}, {"score": 0.0033277936960179892, "phrase": "adaptive_local_alignment"}, {"score": 0.003255364511414329, "phrase": "local_alignment"}, {"score": 0.003198554193075258, "phrase": "adaptive_similarity_matrix"}, {"score": 0.002790511479398411, "phrase": "local_outlier_factor"}, {"score": 0.002600661525224505, "phrase": "experimental_results"}, {"score": 0.0025106241866273897, "phrase": "jplag"}, {"score": 0.0024130437638400404, "phrase": "plagiarism-suspected_code_pairs"}, {"score": 0.0022290883852844057, "phrase": "detection_performance"}, {"score": 0.0022095328812245852, "phrase": "high_sensitivity"}, {"score": 0.0021901485584955487, "phrase": "negligible_loss"}, {"score": 0.0021049977753042253, "phrase": "fixed_threshold"}], "paper_keywords": ["Plagiarism", " program plagiarism detection", " adaptive local alignment", " similarity measurement", " software similarity", " local outlier factors"], "paper_abstract": "We propose an adaptive method for detecting plagiarized pairs from a large set of source code. This method is adaptive in that it uses an adaptive algorithm and it provides an adaptive threshold for determining plagiarism. Conventional algorithms are based on greedy string tiling or on local alignments of two code strings. However, most of them are not adaptive; they do not consider the characteristics of the program set, thereby causing a problem for a program set in which all the programs are inherently similar. We propose adaptive local alignment-a variant of local alignment that uses an adaptive similarity matrix. Each entry of this matrix is the logarithm of the probabilities of the keywords based on their frequency in a given program set. We also propose an adaptive threshold based on the local outlier factor (LOF), which represents the likelihood of an entity being an outlier. Experimental results indicate that our method is more sensitive than JPlag, which uses greedy string tiling for detecting plagiarism-suspected code pairs. Further, the adaptive threshold based on the LOF is shown to be effective, and the detection performance shows high sensitivity with negligible loss of specificity, compared with that using a fixed threshold.", "paper_title": "Plagiarism Detection among Source Codes using Adaptive Methods", "paper_id": "WOS:000310978600008"}