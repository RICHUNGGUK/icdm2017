{"auto_keywords": [{"score": 0.049428038438509174, "phrase": "opengl_es"}, {"score": 0.00481495049065317, "phrase": "efficient_way"}, {"score": 0.004621148492564008, "phrase": "hardware-supported_opengl_facility"}, {"score": 0.004537525607322823, "phrase": "desktop_pcs"}, {"score": 0.004374772264092067, "phrase": "existing_opengl_features"}, {"score": 0.00419861271409079, "phrase": "embedded_systems"}, {"score": 0.004141476915000558, "phrase": "fixed-point_arithmetic_operations"}, {"score": 0.003956558420993431, "phrase": "completely_new_texture_mapping_functions"}, {"score": 0.0037627186912351906, "phrase": "google"}, {"score": 0.0036608806727243853, "phrase": "sony"}, {"score": 0.003433987036569199, "phrase": "arithmetic_operations"}, {"score": 0.0033872210664940817, "phrase": "fixed-point_number_representation"}, {"score": 0.003177235604998673, "phrase": "fixed-point_data_types"}, {"score": 0.0031339552246625463, "phrase": "floating-point_number_representations"}, {"score": 0.0029802289354540507, "phrase": "efficient_conversion"}, {"score": 0.0029128614098881253, "phrase": "opengl_es_standard_requirements"}, {"score": 0.0028340217672278975, "phrase": "specialized_memory_management_scheme"}, {"score": 0.002782647772219627, "phrase": "converted_data"}, {"score": 0.0027197343489967322, "phrase": "fixed-point_numbers"}, {"score": 0.0026461080202599694, "phrase": "texture_processing"}, {"score": 0.0024706232839499546, "phrase": "completely_new_software-implementations"}, {"score": 0.002403724423251419, "phrase": "opengl_es_library"}, {"score": 0.002327956449278255, "phrase": "standard_specification"}, {"score": 0.0021834945657804193, "phrase": "efficiency_point"}], "paper_keywords": ["OpenGL ES", " OpenGL", " Conformance test", " 3D graphics library", " De facto standard"], "paper_abstract": "In this paper, we present an efficient way of implementing OpenGL ES 1.1 3D graphics API library for the environments with hardware-supported OpenGL facility, typically as desktop PCs. Although OpenGL ES was started from the existing OpenGL features, it rapidly became the standard 3D graphics library customized for embedded systems through introducing fixed-point arithmetic operations, buffer management with fixed-point data type supports, completely new texture mapping functions and others. Currently, it is the official 3D graphics API for Google Android, Apple iPhone, Sony PlayStation3, etc. In this paper, we achieved improvements on the arithmetic operations for the fixed-point number representation, which is the most characteristic data type for OpenGL ES 1.1. For the conversion of fixed-point data types to the floating-point number representations for the underlying OpenGL, we show the way of efficient conversion processes even with satisfying OpenGL ES standard requirements. We also introduced a specialized memory management scheme to manage the converted data from the buffer containing fixed-point numbers. In the case of texture processing, the requirements in both standards are quite different, and thus we used completely new software-implementations. Our final implementation of OpenGL ES library provides all of more than 200 functions in the standard specification and passed its conformance test, to show its compliance with the standard. From the efficiency point of view, we measured its execution times for several OpenGL ES-specific application programs and achieved remarkable improvements.", "paper_title": "OpenGL ES 1.1 implementation based on OpenGL", "paper_id": "WOS:000301185900011"}