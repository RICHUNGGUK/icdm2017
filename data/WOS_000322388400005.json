{"auto_keywords": [{"score": 0.028420818067240405, "phrase": "proposed_framework"}, {"score": 0.015092805360032033, "phrase": "software_refactoring"}, {"score": 0.00481495049065317, "phrase": "effective_method"}, {"score": 0.004749377457292245, "phrase": "software_quality"}, {"score": 0.004716924994370903, "phrase": "software_external_behavior"}, {"score": 0.004465126965932753, "phrase": "code_smell_detection"}, {"score": 0.004419426676931621, "phrase": "automatic_or_semi-automatic_refactoring"}, {"score": 0.0041548413176193235, "phrase": "developers'_spontaneity"}, {"score": 0.004070199735165926, "phrase": "software_engineers"}, {"score": 0.003932929770322298, "phrase": "potential_refactorings"}, {"score": 0.003761350406092476, "phrase": "poor_software_quality"}, {"score": 0.0037228262889889402, "phrase": "delayed_refactorings"}, {"score": 0.0036846952802928, "phrase": "higher_refactoring_cost"}, {"score": 0.003572621286677047, "phrase": "monitor-based_instant_refactoring_framework"}, {"score": 0.003404998261799824, "phrase": "source_code"}, {"score": 0.0031249312057114237, "phrase": "potential_problems"}, {"score": 0.002998776886514782, "phrase": "corresponding_smell_detection_tools"}, {"score": 0.002705165729333657, "phrase": "smell_detection_algorithms"}, {"score": 0.0025781373528468345, "phrase": "traditional_human-driven_refactoring_tools"}, {"score": 0.0024910622362019573, "phrase": "inexperienced_engineers"}, {"score": 0.0023578033235964356, "phrase": "average_lifespan"}, {"score": 0.0023416540209862803, "phrase": "resolved_smells"}, {"score": 0.0021786074765975006, "phrase": "timely_warnings"}, {"score": 0.0021562588804528667, "phrase": "early_stages"}, {"score": 0.002141487053045766, "phrase": "software_development"}, {"score": 0.0021049977753042253, "phrase": "total_number"}], "paper_keywords": ["Software refactoring", " code smell detection", " monitor", " instant refactoring"], "paper_abstract": "Software refactoring is an effective method for improvement of software quality while software external behavior remains unchanged. To facilitate software refactoring, a number of tools have been proposed for code smell detection and/or for automatic or semi-automatic refactoring. However, these tools are passive and human driven, thus making software refactoring dependent on developers' spontaneity. As a result, software engineers with little experience in software refactoring might miss a number of potential refactorings or may conduct refactorings later than expected. Few refactorings might result in poor software quality, and delayed refactorings may incur higher refactoring cost. To this end, we propose a monitor-based instant refactoring framework to drive inexperienced software engineers to conduct more refactorings promptly. Changes in the source code are instantly analyzed by a monitor running in the background. If these changes have the potential to introduce code smells, i.e., signs of potential problems in the code that might require refactorings, the monitor invokes corresponding smell detection tools and warns developers to resolve detected smells promptly. Feedback from developers, i.e., whether detected smells have been acknowledged and resolved, is consequently used to optimize smell detection algorithms. The proposed framework has been implemented, evaluated, and compared with the traditional human-driven refactoring tools. Evaluation results suggest that the proposed framework could drive inexperienced engineers to resolve more code smells (by an increase of 140 percent) promptly. The average lifespan of resolved smells was reduced by 92 percent. Results also suggest that the proposed framework could help developers to avoid similar code smells through timely warnings at the early stages of software development, thus reducing the total number of code smells by 51 percent.", "paper_title": "Monitor-Based Instant Software Refactoring", "paper_id": "WOS:000322388400005"}