{"auto_keywords": [{"score": 0.03892276291099736, "phrase": "expressive_power"}, {"score": 0.03526300604455722, "phrase": "standard_chr"}, {"score": 0.00481495049065317, "phrase": "constraint_handling_rules"}, {"score": 0.004676575291629554, "phrase": "committed-choice_declarative_language"}, {"score": 0.004498213310668266, "phrase": "constraint_solvers"}, {"score": 0.00436890075128947, "phrase": "general_purpose_language"}, {"score": 0.0038876302202924644, "phrase": "declarative_and_flexible_style"}, {"score": 0.0029892206557359836, "phrase": "dynamic_priorities"}, {"score": 0.002917331114260319, "phrase": "expressive_power_w.r.t"}, {"score": 0.002608218347502229, "phrase": "reference_semantics"}, {"score": 0.002389276641014013, "phrase": "theoretical_operational_semantics"}, {"score": 0.002264607102799332, "phrase": "chr_case"}, {"score": 0.002220900173110114, "phrase": "language_encoding"}, {"score": 0.0021674482571326283, "phrase": "turing_powerful_languages"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Expressive power", " Language encoding", " Constraints"], "paper_abstract": "Constraint Handling Rules (CHR) is a committed-choice declarative language which has been originally designed for writing constraint solvers and which is nowadays a general purpose language. Recently the language has been extended by introducing user-definable (static or dynamic) rule priorities. The resulting language allows a better control over execution while retaining a declarative and flexible style of programming. In this paper we study the expressive power of this language. We first show that, in the presence of priorities, differently from the case of standard CHR, considering more than two atoms in the heads of rules does not augment the expressive power of the language. Next we show that also dynamic priorities do not augment the expressive power w.r.t. static priorities. These results are proved by providing explicitly a translation of one language into another one, which preserves a reference semantics. Finally we show that CHR with priorities is strictly more expressive than standard CHR (under the theoretical operational semantics). This result is obtained by adapting to the CHR case a notion of language encoding which allows to compare Turing powerful languages. (c) 2013 Elsevier Inc. All rights reserved.", "paper_title": "The expressive power of CHR with priorities", "paper_id": "WOS:000322295300004"}