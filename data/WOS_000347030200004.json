{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "unified_test_case_prioritization_approach"}, {"score": 0.04873991091315952, "phrase": "test_cases"}, {"score": 0.041113785710165836, "phrase": "test_case"}, {"score": 0.03439996504886491, "phrase": "test_case_prioritization_techniques"}, {"score": 0.004747141873785, "phrase": "prioritization_techniques"}, {"score": 0.0044535760439663235, "phrase": "regression_testing"}, {"score": 0.004422094335127632, "phrase": "coverage-based_test_case_prioritization_techniques"}, {"score": 0.004090083576606688, "phrase": "total_number"}, {"score": 0.003212906206685004, "phrase": "purely_total"}, {"score": 0.0031788569040714434, "phrase": "purely_additional_technique"}, {"score": 0.0028984332556216946, "phrase": "empirical_study"}, {"score": 0.00240089402509933, "phrase": "wide_range"}, {"score": 0.0022924784914292026, "phrase": "purely_total_techniques"}, {"score": 0.0022520931135078404, "phrase": "purely_additional_techniques"}, {"score": 0.0021967433763351884, "phrase": "internal_and_external_factor"}, {"score": 0.0021049977753042253, "phrase": "nontrivial_influence"}], "paper_keywords": ["Experimentation", " Verification", " Software testing", " test case prioritization", " total strategy", " additional strategy"], "paper_abstract": "Test case prioritization techniques attempt to reorder test cases in a manner that increases the rate at which faults are detected during regression testing. Coverage-based test case prioritization techniques typically use one of two overall strategies: a total strategy or an additional strategy. These strategies prioritize test cases based on the total number of code (or code-related) elements covered per test case and the number of additional (not yet covered) code (or code-related) elements covered per test case, respectively. In this article, we present a unified test case prioritization approach that encompasses both the total and additional strategies. Our unified test case prioritization approach includes two models (basic and extended) by which a spectrum of test case prioritization techniques ranging from a purely total to a purely additional technique can be defined by specifying the value of a parameter referred to as the f(p) value. To evaluate our approach, we performed an empirical study on 28 Java objects and 40 C objects, considering the impact of three internal factors (model type, choice of f(p) value, and coverage type) and three external factors (coverage granularity, test case granularity, and programming/testing paradigm), all of which can be manipulated by our approach. Our results demonstrate that a wide range of techniques derived from our basic and extended models with uniform f(p) values can outperform purely total techniques and are competitive with purely additional techniques. Considering the influence of each internal and external factor studied, the results demonstrate that various values of each factor have nontrivial influence on test case prioritization techniques. Categories and Subject Descriptors: D.2.5 [Software Engineering]: Testing and Debugging", "paper_title": "A Unified Test Case Prioritization Approach", "paper_id": "WOS:000347030200004"}