{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "finite_element_computations"}, {"score": 0.004776853267973129, "phrase": "effective_use"}, {"score": 0.004720269202737973, "phrase": "processor_memory_hierarchy"}, {"score": 0.004664352260912174, "phrase": "important_issue"}, {"score": 0.004627441072541506, "phrase": "high_performance_computing"}, {"score": 0.004223299391912042, "phrase": "spatial_locality"}, {"score": 0.004140203942496321, "phrase": "overall_cache_utilization"}, {"score": 0.004091130285858113, "phrase": "processor_finite_element_calculations"}, {"score": 0.004010624853427534, "phrase": "adaptively_created_unstructured_meshes"}, {"score": 0.0033803056981691866, "phrase": "current_ajacency-based_data"}, {"score": 0.003313741359811683, "phrase": "different_phases"}, {"score": 0.0032744315183287024, "phrase": "implicit_analysis"}, {"score": 0.003248483521309273, "phrase": "element-data_blocking"}, {"score": 0.003222740482478965, "phrase": "element-level_computations"}, {"score": 0.003197200793408836, "phrase": "sparse-matrix_filling"}, {"score": 0.0028601252251285, "phrase": "ibm_blue_gene"}, {"score": 0.0027159094186967247, "phrase": "sun_constellation_cluster"}, {"score": 0.0026203386550421558, "phrase": "per-core_performance"}, {"score": 0.0024981087707313656, "phrase": "craypat_hardware_performance_tool"}, {"score": 0.0023532890136269986, "phrase": "memory_hierarchy"}, {"score": 0.0022886031992739126, "phrase": "measured_decrease"}, {"score": 0.002130298466581199, "phrase": "observed_decrease"}, {"score": 0.0021049977753042253, "phrase": "overall_execution_time"}], "paper_keywords": ["Data reordering", " cache penalty model", " unstructured mesh", " finite element analysis"], "paper_abstract": "Effective use of the processor memory hierarchy is an important issue in high performance computing. In this work, a part level mesh topological traversal algorithm is used to define a reordering of both mesh vertices and regions that increases the spatial locality of data and improves overall cache utilization during on processor finite element calculations. Examples based on adaptively created unstructured meshes are considered to demonstrate the effectiveness of the procedure in cases where the load per processing core is varied but balanced (e.g., elements are equally distributed across cores for a given partition). In one example, the effect of the current ajacency-based data reordering is studied for different phases of an implicit analysis including element-data blocking, element-level computations, sparse-matrix filling and equation solution. These results are compared to a case where reordering is applied to mesh vertices only. The computations are performed on various supercomputers including IBM Blue Gene (BG/L and BG/P), Cray XT (XT3 and XT5) and Sun Constellation Cluster. It is observed that reordering improves the per-core performance by up to 24% on Blue Gene/L and up to 40% on Cray XT5. The CrayPat hardware performance tool is used to measure the number of cache misses across each level of the memory hierarchy. It is determined that the measured decrease in L1, L2 and L3 cache misses when data reordering is used, closely accounts for the observed decrease in the overall execution time.", "paper_title": "Adjacency-based data reordering algorithm for acceleration of finite element computations", "paper_id": "WOS:000280847500003"}