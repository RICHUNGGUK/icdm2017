{"auto_keywords": [{"score": 0.04717190752556558, "phrase": "code_smells"}, {"score": 0.046239171164179464, "phrase": "quality_metrics"}, {"score": 0.03988359441855777, "phrase": "bilevel_optimization_problem"}, {"score": 0.03716862469348781, "phrase": "upper-level_problem"}, {"score": 0.03309001214060327, "phrase": "detection_rules"}, {"score": 0.03185601658007101, "phrase": "code-smell_examples"}, {"score": 0.03121620171952746, "phrase": "lower_level"}, {"score": 0.00481495049065317, "phrase": "bilevel_problem"}, {"score": 0.004752614341164843, "phrase": "design_situations"}, {"score": 0.004304384633791721, "phrase": "suitable_quality_metrics"}, {"score": 0.003980463173701481, "phrase": "threshold_value"}, {"score": 0.0038277259893677576, "phrase": "code-smell_detection_rules"}, {"score": 0.003778122295696292, "phrase": "bilevel_optimization_problems"}, {"score": 0.003719442481033911, "phrase": "optimization_problems"}, {"score": 0.0036616707006429483, "phrase": "optimization_tasks"}, {"score": 0.003576685140836491, "phrase": "lower-level_problem"}, {"score": 0.0035580679938252116, "phrase": "possible_feasible_candidates"}, {"score": 0.0034664207609114302, "phrase": "code-smell_detection_problem"}, {"score": 0.0033507875035075465, "phrase": "suitable_solution_techniques"}, {"score": 0.0032559521297271165, "phrase": "single-level_optimization_problem"}, {"score": 0.002776592105205842, "phrase": "upper_level"}, {"score": 0.002754924164336249, "phrase": "main_advantage"}, {"score": 0.0025406622389622232, "phrase": "new_code-smell_behavior"}, {"score": 0.0024558344356654413, "phrase": "statistical_analysis"}, {"score": 0.002417641863173041, "phrase": "nine_open-source_systems"}, {"score": 0.002373832128444394, "phrase": "seven_types"}, {"score": 0.0022179323958360564, "phrase": "state-of-art_code-smell_detection_techniques"}, {"score": 0.002143856758852753, "phrase": "detected_code"}, {"score": 0.0021049977753042253, "phrase": "software_systems"}], "paper_keywords": ["Algorithms", " Reliability", " Search-based software engineering", " software quality", " code smells"], "paper_abstract": "Code smells represent design situations that can affect the maintenance and evolution of software. They make the system difficult to evolve. Code smells are detected, in general, using quality metrics that represent some symptoms. However, the selection of suitable quality metrics is challenging due to the absence of consensus in identifying some code smells based on a set of symptoms and also the high calibration effort in determining manually the threshold value for each metric. In this article, we propose treating the generation of code-smell detection rules as a bilevel optimization problem. Bilevel optimization problems represent a class of challenging optimization problems, which contain two levels of optimization tasks. In these problems, only the optimal solutions to the lower-level problem become possible feasible candidates to the upper-level problem. In this sense, the code-smell detection problem can be treated as a bilevel optimization problem, but due to lack of suitable solution techniques, it has been attempted to be solved as a single-level optimization problem in the past. In our adaptation here, the upper-level problem generates a set of detection rules, a combination of quality metrics, which maximizes the coverage of the base of code-smell examples and artificial code smells generated by the lower level. The lower level maximizes the number of generated artificial code smells that cannot be detected by the rules produced by the upper level. The main advantage of our bilevel formulation is that the generation of detection rules is not limited to some code-smell examples identified manually by developers that are difficult to collect, but it allows the prediction of new code-smell behavior that is different from those of the base of examples. The statistical analysis of our experiments over 31 runs on nine open-source systems and one industrial project shows that seven types of code smells were detected with an average of more than 86% in terms of precision and recall. The results confirm the outperformance of our bilevel proposal compared to state-of-art code-smell detection techniques. The evaluation performed by software engineers also confirms the relevance of detected code smells to improve the quality of software systems.", "paper_title": "Code-Smell Detection as a Bilevel Problem", "paper_id": "WOS:000344320200006"}