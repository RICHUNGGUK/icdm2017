{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "loyal_users"}, {"score": 0.013956691168337504, "phrase": "normal_users"}, {"score": 0.009398955553806614, "phrase": "optimal_tree"}, {"score": 0.004743164872278112, "phrase": "batch_updates"}, {"score": 0.004568326972997448, "phrase": "probabilistic_model"}, {"score": 0.004466519142879166, "phrase": "key_tree_management_problem"}, {"score": 0.004334280585565239, "phrase": "different_behaviors"}, {"score": 0.004205940624913343, "phrase": "probability_p"}, {"score": 0.0035648266669315943, "phrase": "key_tree"}, {"score": 0.003511613254403125, "phrase": "minimum_expected_updating_cost"}, {"score": 0.003356675879109443, "phrase": "single_lun"}, {"score": 0.0023566987138026285, "phrase": "non-root_node"}, {"score": 0.0021369416775353124, "phrase": "dynamic_programming_algorithm"}], "paper_keywords": ["Key trees", " Group keys", " Optimality", " Probability", " Updating cost"], "paper_abstract": "We study the probabilistic model in the key tree management problem. Users have different behaviors. Normal users have probability p to issue join/leave request while the loyal users have probability zero. Given the numbers of such users, our objective is to construct a key tree with minimum expected updating cost. We observe that a single LUN (Loyal User Node) is enough to represent all loyal users. When 1-pa parts per thousand currency sign0.57 we prove that the optimal tree that minimizes the cost is a star. When 1-p > 0.57, we try to bound the size of the subtree rooted at every non-root node. Based on the size bound, we construct the optimal tree using dynamic programming algorithm in O(na <...K+K (4)) time where K=min {4(log (1-p)(-1))(-1),n} and n is the number of normal users.", "paper_title": "Optimal tree structure with loyal users and batch updates", "paper_id": "WOS:000296520200011"}