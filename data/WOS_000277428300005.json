{"auto_keywords": [{"score": 0.03795449282887965, "phrase": "use-last_tlb_architecture"}, {"score": 0.01447934704270154, "phrase": "tlb"}, {"score": 0.00481495049065317, "phrase": "tlb_power_reduction"}, {"score": 0.004608997772926119, "phrase": "hardware_support"}, {"score": 0.004568871736067739, "phrase": "virtual_memory_management_implementation"}, {"score": 0.0044896599221451216, "phrase": "embedded_systems"}, {"score": 0.004204602964512469, "phrase": "significant_energy"}, {"score": 0.00406001734835979, "phrase": "important_thermal_hot-spots"}, {"score": 0.003802135020791801, "phrase": "tlb_power"}, {"score": 0.0036553070575015344, "phrase": "power_reduction"}, {"score": 0.0035605741849764187, "phrase": "ieee_j_solid_state_circuits"}, {"score": 0.0032908057622663732, "phrase": "last_page"}, {"score": 0.0031360786664165093, "phrase": "code_transformation_techniques"}, {"score": 0.00308163068747474, "phrase": "page_switchings"}, {"score": 0.0030547611342112693, "phrase": "data_cache_accesses"}, {"score": 0.0030017207229983385, "phrase": "efficient_page-aware_code_placement_technique"}, {"score": 0.0026321198895843173, "phrase": "data-tlb_page_switching"}, {"score": 0.002464709648714996, "phrase": "instrucion-tlb_page"}, {"score": 0.0024325244760735566, "phrase": "negligible_impact"}, {"score": 0.0023590470463532814, "phrase": "mibench"}, {"score": 0.0023384880059147883, "phrase": "multimedia"}, {"score": 0.0023180581939456686, "phrase": "dspstone"}, {"score": 0.002297831085501592, "phrase": "bdti"}, {"score": 0.0022579036318895753, "phrase": "reduced_page_switch"}, {"score": 0.0021993066642488237, "phrase": "equivalent_power_savings"}, {"score": 0.0021049977753042253, "phrase": "use-last_tlb_architecture_implementation"}], "paper_keywords": ["Tlb power", " Code transformation", " Compiler technique", " I-TLB power", " D-TLB power", " Instruction scheduling", " Code placement"], "paper_abstract": "The Translation Look-aside Buffer (TLB) is a very important part in the hardware support for virtual memory management implementation of high performance embedded systems. The TLB though small is frequently accessed, and therefore not only consumes significant energy, but also is one of the important thermal hot-spots in the processor. Recently, several circuit and microarchitectural implementations of TLBs have been proposed to reduce TLB power. One simple, yet effective TLB design for power reduction is the Use-Last TLB architecture proposed in IEEE J Solid State Circuits, 1190-1199, (2004). The Use-Last TLB architecture reduces the power consumption when the last page is accessed again. In this work, we develop code transformation techniques to reduce the page switchings in data cache accesses and propose an efficient page-aware code placement technique to enhance the energy reduction capabilities achieved by the Use-Last TLB architecture for instruction cache accesses. Our comprehensive page switch reduction algorithm results in an average of 39% reduction in the data-TLB page switching, and our code placement heuristic results in an average of 76% reduction in the instrucion-TLB page switchings with negligible impact on the performance on benchmarks from MiBench, Multimedia, DSPStone and BDTI suites. The reduced page switch count through our techniques achieves an equivalent power savings, above and beyond the reduction achieved by the Use-Last TLB architecture implementation.", "paper_title": "Code Transformations for TLB Power Reduction", "paper_id": "WOS:000277428300005"}