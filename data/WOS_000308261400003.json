{"auto_keywords": [{"score": 0.029668259727588457, "phrase": "original_session_type_system"}, {"score": 0.028930494932271376, "phrase": "subject_reduction_property"}, {"score": 0.00481495049065317, "phrase": "subject_reduction"}, {"score": 0.004732785510739708, "phrase": "distributed_applications"}, {"score": 0.004305203085016233, "phrase": "widespread_use"}, {"score": 0.004159446063902181, "phrase": "mobile_devices"}, {"score": 0.0040186038781533946, "phrase": "urgent_demands"}, {"score": 0.0036553070575015344, "phrase": "session-type_system"}, {"score": 0.0034118234596993836, "phrase": "communication_descriptions"}, {"score": 0.0028963961037320805, "phrase": "existing_programming_languages"}, {"score": 0.0025230952890994236, "phrase": "conservative_extension"}, {"score": 0.0021049977753042253, "phrase": "typeable_processes"}], "paper_keywords": ["Pi-calculus", " session types", " type system", " subject reduction", " concurrency", " process calculi", " polarity"], "paper_abstract": "Distributed applications and services have become pervasive in our society due to the widespread use of internet and mobile devices. There are urgent demands to efficiently ensure safety and correctness of such software. A session-type system is a framework to statically check whether communication descriptions conform to certain protocols. They are shown to be effective yet simple enough to fit in harmony with existing programming languages. In the original session type system, the subject reduction property does not hold. This paper establishes a conservative extension of the original session type system with the subject reduction property. Finally, it is also shown that our typing rule properly extends the set of typeable processes.", "paper_title": "A Session Type System with Subject Reduction", "paper_id": "WOS:000308261400003"}