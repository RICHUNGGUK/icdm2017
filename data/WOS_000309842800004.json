{"auto_keywords": [{"score": 0.04722216431048288, "phrase": "software_testing"}, {"score": 0.03456265793643298, "phrase": "gui"}, {"score": 0.029047994076626206, "phrase": "infeasible_test_cases"}, {"score": 0.00481495049065317, "phrase": "infeasible_gui_event_sequences"}, {"score": 0.004428139418750855, "phrase": "broader_field"}, {"score": 0.004378958522416482, "phrase": "software_engineering"}, {"score": 0.004306205029641728, "phrase": "machine_learning"}, {"score": 0.00400459716272594, "phrase": "machine_learning_approaches"}, {"score": 0.0038510053729959074, "phrase": "test_suite_reduction"}, {"score": 0.003808209866576388, "phrase": "regression_testing"}, {"score": 0.0037449033166879874, "phrase": "faulty_statement_identification"}, {"score": 0.0035216195857272403, "phrase": "automatic_model-based_test_case_generation"}, {"score": 0.0031845067058084583, "phrase": "test_cases"}, {"score": 0.0031140747752837826, "phrase": "event_sequences"}, {"score": 0.0026626797255348287, "phrase": "violate_constraints"}, {"score": 0.0026183699739225925, "phrase": "gui."}, {"score": 0.0021049977753042253, "phrase": "different-length_test_cases"}], "paper_keywords": [""], "paper_abstract": "Machine learning is a technique not widely used in software testing even though the broader field of software engineering has used machine learning to solve many problems. In this chapter we present an overview of machine learning approaches for many problems in software testing, including test suite reduction, regression testing, and faulty statement identification. We also present our work using machine learning to augment automatic model-based test case generation for graphical user interfaces (GUIs). A model of the GUI is used to generate test cases, which are event sequences, to be executed on the system under test. Such models may not completely represent the GUI, and therefore may allow infeasible test cases to be generated that violate constraints in the GUI. We use two different machine learning techniques (support vector machines and grammar induction) to identify infeasible test cases (i.e., test requirements that cannot be satisfied). We demonstrate that these techniques are robust across different-length test cases and different GUI constraints.", "paper_title": "Machine Learning and Event-Based Software Testing: Classifiers for Identifying Infeasible GUI Event Sequences", "paper_id": "WOS:000309842800004"}