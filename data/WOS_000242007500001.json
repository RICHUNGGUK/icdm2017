{"auto_keywords": [{"score": 0.04885877600670675, "phrase": "linux_cluster"}, {"score": 0.00481495049065317, "phrase": "parallel_communication"}, {"score": 0.004475266375001531, "phrase": "shuttle_box_xpc_nodes"}, {"score": 0.004323776691055635, "phrase": "dual_gb_ethernet_switches"}, {"score": 0.004088421020408183, "phrase": "throughput_engine"}, {"score": 0.004001335931796133, "phrase": "disappointing_results"}, {"score": 0.003949974260471287, "phrase": "explicitly_parallel_software"}, {"score": 0.003916098498242888, "phrase": "weakly-performing_communication_mechanisms"}, {"score": 0.0035774159356287594, "phrase": "openmosix"}, {"score": 0.0035315547116119856, "phrase": "linux"}, {"score": 0.003130077012135034, "phrase": "direct_use"}, {"score": 0.0031032109441552287, "phrase": "lower-level_primitives"}, {"score": 0.0028468767420392945, "phrase": "well-known_packages"}, {"score": 0.002726740692380339, "phrase": "distributed_language"}, {"score": 0.0026456667695073043, "phrase": "existing_set"}, {"score": 0.002622947550220266, "phrase": "parallel_primitives"}, {"score": 0.002437525632451029, "phrase": "communication_software_performance"}, {"score": 0.0023958326775913165, "phrase": "poor_performance"}, {"score": 0.0023245746777044766, "phrase": "hardware_specification"}, {"score": 0.0021049977753042253, "phrase": "efficient_transport_software"}], "paper_keywords": ["Linux cluster", " software benchmarking", " MOSIX"], "paper_abstract": "The Linux cluster considered in this paper, formed from shuttle box XPC nodes with 2 GHz Athlon processors connected by dual Gb Ethernet switches, is relatively easily constructed, but, while effective as a throughput engine, may result in disappointing results when running explicitly parallel software if weakly-performing communication mechanisms and process spawning are selected. This paper carefully compares the implementations of communication and spawning primitives in MPICH-2, openMosix, and Linux Remote Procedure Call, forking, and various lower-level communication mechanisms. The test selection compares the provision of both a message-passing library, and a single system image software package, with direct use of lower-level primitives. The information in the paper will be of interest to those considering the use of one of the well-known packages, or directly writing their own distributed applications, or constructing a distributed language by layering on top of an existing set of parallel primitives. The results expose a ranking in terms of process spawning and a similar ranking of communication software performance. They reveal poor performance in certain circumstances, well below the hardware specification, which it is as well that the developer is aware of. In general, the paper emphasizes the importance of efficient transport software to cluster machines.", "paper_title": "Performance of parallel communication and spawning primitives on a Linux cluster", "paper_id": "WOS:000242007500001"}