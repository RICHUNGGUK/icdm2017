{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "crash_dump"}, {"score": 0.02741676498351292, "phrase": "core_dump"}, {"score": 0.010542571068061128, "phrase": "crashed_vm"}, {"score": 0.008642708847914385, "phrase": "virtualized_environments"}, {"score": 0.008194620514045263, "phrase": "system_crash"}, {"score": 0.004621043537046209, "phrase": "typical_way"}, {"score": 0.004564401713056939, "phrase": "memory_image"}, {"score": 0.004489952932659799, "phrase": "future_offline_debugging"}, {"score": 0.004362564831572539, "phrase": "typical_server_machines"}, {"score": 0.004326833704481825, "phrase": "likely_abundant_memory"}, {"score": 0.004319316008041412, "phrase": "vicover"}, {"score": 0.004152502093643003, "phrase": "mean_time"}, {"score": 0.004001593118269276, "phrase": "reboot-based_recovery"}, {"score": 0.0039040344230094164, "phrase": "failure_context"}, {"score": 0.003824547895167011, "phrase": "recurring_crashes"}, {"score": 0.003464890914694523, "phrase": "consolidated_virtual_machines"}, {"score": 0.0029509483926257645, "phrase": "virtual_machine_management_layer"}, {"score": 0.0029027394930867902, "phrase": "critical_data_structures"}, {"score": 0.0027856252557826467, "phrase": "unused_memory"}, {"score": 0.0026295509633036374, "phrase": "vm"}, {"score": 0.0025972447844047515, "phrase": "user-tuned_rate_control_policy"}, {"score": 0.0024017007954518065, "phrase": "working_prototype"}, {"score": 0.002285839246740627, "phrase": "virtual_machine"}, {"score": 0.0022670788445236104, "phrase": "xen"}, {"score": 0.0021049977753042253, "phrase": "virtualized_tpc-w_server"}], "paper_keywords": ["Management", " Performance", " Reliability", " Core Dump", " Parallel Core Dump", " Virtual Machines"], "paper_abstract": "Crash dump, or core dump is the typical way to save memory image on system crash for future offline debugging and analysis. However, for typical server machines with likely abundant memory, the time of core dump can significantly increase the mean time to repair (MTTR) by delaying the reboot-based recovery, while not dumping the failure context for analysis would risk recurring crashes on the same problems. In this paper, we propose several optimization techniques for core dump in virtualized environments, in order to shorten the MTTR of consolidated virtual machines during crashes. First, we parallelize the process of crash dump and the process of rebooting the crashed VM, by dynamically reclaiming and allocating memory between the crashed VM and the newly spawned VM. Second, we use the virtual machine management layer to introspect the critical data structures of the crashed VM to filter out the dump of unused memory. Finally, we implement disk I/O rate control between core dump and the newly spawned VM according to user-tuned rate control policy to balance the time of crash dump and quality of services in the recovery VM. We have implemented a working prototype, Vicover, that optimizes core dump on system crash of a virtual machine in Xen, to minimize the MTTR of core dump and recovery as a whole. In our experiment on a virtualized TPC-W server, Vicover shortens the downtime caused by crash dump by around 5X.", "paper_title": "Optimizing Crash Dump in Virtualized Environments", "paper_id": "WOS:000280548400003"}