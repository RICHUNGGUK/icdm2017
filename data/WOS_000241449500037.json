{"auto_keywords": [{"score": 0.04174998765555268, "phrase": "cellular_architectures"}, {"score": 0.00481495049065317, "phrase": "efficient_code-generation"}, {"score": 0.0047563776685277314, "phrase": "massively_parallel_architectures"}, {"score": 0.004641351004344458, "phrase": "memory_wall"}, {"score": 0.0041316803676012155, "phrase": "memory_connection"}, {"score": 0.0038624981944755813, "phrase": "ibm_cyclops"}, {"score": 0.003769006950727621, "phrase": "sophisticated_memory_models"}, {"score": 0.0033548062793973144, "phrase": "capsl"}, {"score": 0.0032336801561165113, "phrase": "hardware_evaluation_tool"}, {"score": 0.003022825806274343, "phrase": "open_question"}, {"score": 0.002878140062594849, "phrase": "programmer's_perspective"}, {"score": 0.002723613726441693, "phrase": "upc"}, {"score": 0.00269040877830062, "phrase": "hpf"}, {"score": 0.0022519745140925475, "phrase": "threaded_mandelbrot-set_generator"}, {"score": 0.002210903392596343, "phrase": "work-stealing_algorithm"}, {"score": 0.002157302200451323, "phrase": "dimes_cthread_programming_model"}, {"score": 0.0021049977753042253, "phrase": "simple_multi-threaded_program"}], "paper_keywords": [""], "paper_abstract": "Overcoming the memory wall [15] may be achieved by increasing the bandwidth and reducing the latency of the processor to memory connection, for example by implementing Cellular architectures, such as the IBM Cyclops. Such massively parallel architectures have sophisticated memory models. In this paper we used DIMES (the Delaware Iterative Multiprocessor Emulation System), developed by CAPSL at the University of Delaware, as a hardware evaluation tool for cellular architectures. The authors contend that there is an open question regarding the potential, ideal approach to parallelism from the programmer's perspective. For example, at language-level such as UPC or HPF, or using trace-scheduling, or at a library-level, for example OpenMP or POSIX-threads. To investigate this, we have chosen to use a threaded Mandelbrot-set generator with a work-stealing algorithm to evaluate the DIMES cthread programming model for writing a simple multi-threaded program.", "paper_title": "The challenges of efficient code-generation for massively parallel architectures", "paper_id": "WOS:000241449500037"}