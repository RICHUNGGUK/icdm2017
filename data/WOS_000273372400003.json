{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_motifs"}, {"score": 0.00902928899856158, "phrase": "large_systems"}, {"score": 0.007754005221558123, "phrase": "bit-vector_processing"}, {"score": 0.004678940805063634, "phrase": "design_patterns"}, {"score": 0.00459039896577789, "phrase": "software_maintenance"}, {"score": 0.004439445472040688, "phrase": "re-engineering_systems"}, {"score": 0.004272969980602508, "phrase": "recurring_design_problems"}, {"score": 0.0034459835582278746, "phrase": "exact_and_approximate_occurrences"}, {"score": 0.003087017178815267, "phrase": "first_case_study"}, {"score": 0.00283229915062791, "phrase": "second_case_study"}, {"score": 0.002361318990112615, "phrase": "jhotdraw"}, {"score": 0.0023388183537341213, "phrase": "juzzle"}, {"score": 0.002305468528385778, "phrase": "quickuml."}, {"score": 0.0022617389804167943, "phrase": "approximate_string_matching"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Design patterns", " Design motifs", " Identification of occurrences", " Bit-vector", " Automata simulation", " Experimental validation"], "paper_abstract": "Design patterns are important in software maintenance because they help in understanding and re-engineering systems. They propose design motifs, solutions to recurring design problems. The identification of occurrences of design motifs in large systems consists of identifying classes whose structure and organization match exactly or approximately the structure and organization of classes as suggested by the motif. We adapt two classical approximate string matching algorithms based on automata simulation and bit-vector processing to efficiently identify exact and approximate occurrences of motifs. We then carry out two case studies to show the performance, precision, and recall of our algorithms. In the first case study, we assess the performance of our algorithms on seven medium-to-large systems. In the second case study, we compare our approach with three existing approaches (an explanation-based constraint approach, a metric-enhanced explanation-based constraint approach, and a similarity scoring approach) by applying the algorithms on three small-to-medium size systems, JHOTDRAW, JUZZLE, and QUICKUML. Our studies show that approximate string matching based on bit-vector processing provides efficient algorithms to identify design motifs. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Identification of design motifs with pattern matching algorithms", "paper_id": "WOS:000273372400003"}