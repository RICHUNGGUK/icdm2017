{"auto_keywords": [{"score": 0.04782591545346595, "phrase": "regular_expressions"}, {"score": 0.00481495049065317, "phrase": "regular_languages"}, {"score": 0.00452101969521343, "phrase": "deterministic_regular_languages"}, {"score": 0.004438019162720755, "phrase": "limited_alphabet_size"}, {"score": 0.00418247778205288, "phrase": "bruggemann-klein"}, {"score": 0.00415162450363085, "phrase": "wood"}, {"score": 0.0038122196479548425, "phrase": "minimal_dfa"}, {"score": 0.0037421829222825964, "phrase": "deterministic_regular_language"}, {"score": 0.0036870776660851007, "phrase": "polynomial_time"}, {"score": 0.0031551009669284545, "phrase": "general_dfas"}, {"score": 0.0030970990565391183, "phrase": "new_algorithm"}, {"score": 0.003006499028632742, "phrase": "original_one"}, {"score": 0.0029732094730218488, "phrase": "structural_properties"}, {"score": 0.002951220859491642, "phrase": "minimal_dfas"}, {"score": 0.0029185415814209055, "phrase": "special_subautomata"}, {"score": 0.0027810502577708105, "phrase": "nondeterministic_logarithmic_space"}, {"score": 0.0026109540617641593, "phrase": "arbitrary_alphabets"}, {"score": 0.0025157865918985704, "phrase": "czerwinski_et_al"}], "paper_keywords": ["Deterministic regular languages", " One-unambiguous regular languages", " Nondeterministic logspace", " Polynomial space"], "paper_abstract": "We investigate the problem to decide for DFAs, NFAs and regular expressions whether they describe deterministic regular languages. For DFAs with limited alphabet size we show the NL-completeness (nondeterministic logarithmic space-completeness) of the problem. Bruggemann-Klein and Wood (Inf. Comput. 142(2), 182-206, (1998)) gave an algorithm deciding for a minimal DFA whether it recognizes a deterministic regular language. Their algorithm requires polynomial time. Based on this algorithm we construct an algorithm for those DFAs which are not necessarily minimal, but limited in the size of the alphabet. We first focus on the case that the DFAs are minimal and extend to general DFAs later on. The new algorithm is substantially modified in contrast to the original one and uses structural properties of minimal DFAs and of special subautomata of the DFAs, called orbit automata. This algorithm runs in nondeterministic logarithmic space. After that we show the NL-hardness of the problem. For NFAs and regular expressions with arbitrary alphabets the problem is shown to be in PSPACE by Czerwinski et al. (2013) (and, in fact, to be PSPACE-complete). Their approach resulted in an algorithm working with space O(x(4)). However, our approach for the NL-algorithm can be modified to get an algorithm for NFAs and regular expressions using just quadratic space.", "paper_title": "Deciding Determinism of Regular Languages", "paper_id": "WOS:000358741300004"}