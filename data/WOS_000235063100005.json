{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fpga_hardware"}, {"score": 0.004756805752518494, "phrase": "embedded_socs"}, {"score": 0.00453113241842654, "phrase": "single-chip_systems"}, {"score": 0.004395532072377065, "phrase": "field_programmable_gate_array_reconfigurable_logic"}, {"score": 0.004161553532799662, "phrase": "critical_software_parts"}, {"score": 0.004086350434865782, "phrase": "reconfigurable_logic"}, {"score": 0.004012500850311087, "phrase": "hybrid_system-on-chip_platform"}, {"score": 0.003822003373331997, "phrase": "existing_processor-fpga_systems"}, {"score": 0.003618443379266972, "phrase": "partitioning_method"}, {"score": 0.0035530197642369464, "phrase": "automated_kernel_identification_process"}, {"score": 0.0034887749053459584, "phrase": "basic-block_level"}, {"score": 0.00342568771304873, "phrase": "critical_kernels"}, {"score": 0.0032828706086018133, "phrase": "generic_platform"}, {"score": 0.0030147970456037274, "phrase": "five_real-life_applications"}, {"score": 0.002669259222649505, "phrase": "extensive_experiments"}, {"score": 0.002481200970201421, "phrase": "five_applications"}, {"score": 0.0022236070278432575, "phrase": "performance_gains"}, {"score": 0.0021966859554037174, "phrase": "eight_dsp_algorithms"}, {"score": 0.0021049977753042253, "phrase": "average_speedup"}], "paper_keywords": ["hardware/software partitioning", " performance improvement", " FPGA", " embedded system-on-chips", " kernel identification"], "paper_abstract": "A hardware/software partitioning methodology for improving performance in single-chip systems composed by processor and Field Programmable Gate Array reconfigurable logic is presented. Speedups are achieved by executing critical software parts on the reconfigurable logic. A hybrid System-on-Chip platform, which can model the majority of existing processor-FPGA systems, is considered by the methodology. The partitioning method uses an automated kernel identification process at the basic-block level for detecting critical kernels in applications. Three different instances of the generic platform and two sets of benchmarks are used in the experimentation. The analysis on five real-life applications showed that these applications spend an average of 69% of their instruction count in 11% on average of their code. The extensive experiments illustrate that for the systems composed by 32-bit processors the improvements of five applications ranges from 1.3 to 3.7 relative to an all software solution. For a platform composed by an 8-bit processor, the performance gains of eight DSP algorithms are considerably greater, as the average speedup equals 28.", "paper_title": "Performance improvements from partitioning applications to FPGA hardware in embedded SoCs", "paper_id": "WOS:000235063100005"}