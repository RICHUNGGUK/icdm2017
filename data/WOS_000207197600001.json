{"auto_keywords": [{"score": 0.043257604349949186, "phrase": "web_application"}, {"score": 0.00481495049065317, "phrase": "web_engineering"}, {"score": 0.004736045157669388, "phrase": "web-based_applications"}, {"score": 0.004658426838467567, "phrase": "monolithic_and_isolated_systems"}, {"score": 0.00443308765153716, "phrase": "third-party_systems"}, {"score": 0.004360412703519539, "phrase": "external_web_services"}, {"score": 0.004324521292490181, "phrase": "ldap_repositories"}, {"score": 0.00428892403807229, "phrase": "legacy_applications"}, {"score": 0.003804381587788162, "phrase": "compatible_collaboration_specifications"}, {"score": 0.0036653985479652854, "phrase": "external_assets"}, {"score": 0.003590383760209319, "phrase": "realistic_model-driven_development_scenario"}, {"score": 0.0034879261743468574, "phrase": "existing_web_engineering_proposals"}, {"score": 0.003264547032549398, "phrase": "implementation_level"}, {"score": 0.0032109670662222416, "phrase": "platform-specific_way"}, {"score": 0.0030177339185643226, "phrase": "component_adaptation"}, {"score": 0.0029559346879594254, "phrase": "model-driven_web_engineering"}, {"score": 0.002907405102646616, "phrase": "design_patterns"}, {"score": 0.002789528662623221, "phrase": "major_interoperability_problems"}, {"score": 0.0027211030647461324, "phrase": "third-party_application"}, {"score": 0.002494531100339247, "phrase": "design_level"}, {"score": 0.0024535580495414783, "phrase": "appropriate_specification"}, {"score": 0.0023834640793589435, "phrase": "possible_mismatches"}, {"score": 0.002305799666781492, "phrase": "well-known_design_patterns"}, {"score": 0.0022399174232611853, "phrase": "recurring_problems"}, {"score": 0.002122507495446441, "phrase": "european_journal"}, {"score": 0.0021049977753042253, "phrase": "information_systems"}], "paper_keywords": ["model-driven development", " Web Engineering", " interoperability", " adaptation", " patterns"], "paper_abstract": "Currently, Web-based applications are no longer monolithic and isolated systems but, rather, distributed applications that need to interoperate with third-party systems, such as external Web services, LDAP repositories or legacy applications. When one component provides a service that the Web application requires, it is often not possible to bind the two systems together if they were not programmed to have compatible collaboration specifications. Modeling the adaptation between a Web application and external assets becomes therefore an essential issue in any realistic model-driven development scenario. However, most of the existing Web Engineering proposals do not take this issue into account, or they simply address it at the implementation level (in a platform-specific way). In this work, we discuss the problems involved in dealing with component adaptation within the context of Model-Driven Web Engineering and show how design patterns can help addressing it. We first identify the major interoperability problems that can happen when integrating third-party application or legacy systems into our Web systems, and then propose the mechanisms that need to be put in place at the design level to generate the appropriate specification of adapters that compensate for the possible mismatches and differences. We base our proposal on well-known design patterns as they are established solutions to recurring problems, and the generation of code from them is normally straightforward. European Journal of Information Systems (2007) 16, 448-459. doi:10.1057/palgrave.ejis.3000691", "paper_title": "Model-driven component adaptation in the context of Web Engineering", "paper_id": "WOS:000207197600001"}