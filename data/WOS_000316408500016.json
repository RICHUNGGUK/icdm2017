{"auto_keywords": [{"score": 0.035079959060787036, "phrase": "mutex"}, {"score": 0.00481495049065317, "phrase": "based_parallel_server"}, {"score": 0.0047689174754929195, "phrase": "distributed_crowd_simulations"}, {"score": 0.004352876088312741, "phrase": "linux_kernel"}, {"score": 0.004208881856146758, "phrase": "user-space_access"}, {"score": 0.0038973170902076707, "phrase": "complex_applications"}, {"score": 0.0036788184374592706, "phrase": "rcu_synchronization_method"}, {"score": 0.0035570425396761122, "phrase": "distributed_system_architecture"}, {"score": 0.0035229930971258316, "phrase": "crowd_simulations"}, {"score": 0.003422781254306241, "phrase": "rcu_implementation"}, {"score": 0.0033737457695128233, "phrase": "parallel_implementation"}, {"score": 0.0031845067058084613, "phrase": "race_conditions"}, {"score": 0.003123808471618783, "phrase": "parallel_applications"}, {"score": 0.0030790429005600898, "phrase": "performance_evaluation_results"}, {"score": 0.0029343925814926787, "phrase": "system_response_time"}, {"score": 0.0028784478769295204, "phrase": "system_throughput"}, {"score": 0.0028235667474151714, "phrase": "higher_number"}, {"score": 0.0026142814606853037, "phrase": "rcu_method"}, {"score": 0.002527654365712841, "phrase": "write_accesses"}, {"score": 0.0025034338848015166, "phrase": "dynamic_data_structures"}, {"score": 0.0024556852466581527, "phrase": "sequential_access"}, {"score": 0.0023743009016047424, "phrase": "data_structures"}, {"score": 0.002251813863195168, "phrase": "existing_number"}, {"score": 0.0022302306304023602, "phrase": "processor_cores"}, {"score": 0.0021356322417874106, "phrase": "synchronization_method"}, {"score": 0.0021049977753042253, "phrase": "parallel_and_distributed_applications"}], "paper_keywords": ["Read-copy update synchronization method", " Crowd simulations"], "paper_abstract": "The Read-Copy Update (RCU) synchronization method was designed to cope with multiprocessor scalability some years ago, and it was included in the Linux kernel October of 2002. Recently, libraries providing user-space access to this method have been released, although they still have not been used in complex applications. In this paper, we propose the evaluation of the RCU synchronization method for two different cases of use in a distributed system architecture for crowd simulations. We have compared the RCU implementation with a parallel implementation based on Mutex, a traditional locking synchronization method for solving race conditions among threads in parallel applications. The performance evaluation results show that the use of RCU significantly decreases the system response time and increases the system throughput, supporting a higher number of agents while providing the same latency levels. The reason for this behavior is that the RCU method allows read accesses in parallel with write accesses to dynamic data structures, avoiding the sequential access that a Mutex represents for these data structures. In this way, it can better exploit the existing number of processor cores. These results show the potential of this synchronization method for improving parallel and distributed applications.", "paper_title": "A Read-Copy Update based parallel server for distributed crowd simulations", "paper_id": "WOS:000316408500016"}