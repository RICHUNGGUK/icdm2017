{"auto_keywords": [{"score": 0.031797947828578706, "phrase": "service_compositions"}, {"score": 0.012737993792125467, "phrase": "service_engineers"}, {"score": 0.010719573218936759, "phrase": "service_behavior"}, {"score": 0.00481495049065317, "phrase": "model-based_engineering"}, {"score": 0.004704699244406775, "phrase": "service-oriented_architecture"}, {"score": 0.004509057381424944, "phrase": "middleware_components"}, {"score": 0.004422827355213055, "phrase": "reusable_services"}, {"score": 0.0043718794256931435, "phrase": "core_focus"}, {"score": 0.004338239182984759, "phrase": "service_interactions"}, {"score": 0.004109865377936045, "phrase": "specific_technology_dependency"}, {"score": 0.004015693806064219, "phrase": "reusable_components"}, {"score": 0.0034806529881619454, "phrase": "correct_sequences"}, {"score": 0.003111472132927442, "phrase": "concurrent_interactions"}, {"score": 0.0028687545730861665, "phrase": "service_composition_behavior_safety"}, {"score": 0.0027813397260607487, "phrase": "suitable_and_safe_service_compositions"}, {"score": 0.002665465323614577, "phrase": "different_viewpoints"}, {"score": 0.002644920521740564, "phrase": "service_composition_behavior_analysis"}, {"score": 0.002429090371567499, "phrase": "formal_semantics"}, {"score": 0.002382541887825168, "phrase": "configuration_descriptions"}, {"score": 0.0022481685132781626, "phrase": "service_models"}, {"score": 0.0021378442381693847, "phrase": "mechanical_support"}, {"score": 0.0021049977753042253, "phrase": "comprehensive_integrated_workbench"}], "paper_keywords": ["Service-oriented architecture", " composite services", " services models", " Web services modeling", " analysis", " validation"], "paper_abstract": "The Service-Oriented Architecture (SOA) approach to building systems of application and middleware components promotes the use of reusable services with a core focus of service interactions, obligations, and context. Although services technically relieve the difficulties of specific technology dependency, the difficulties in building reusable components is still prominent and a challenge to service engineers. Engineering the behavior of these services means ensuring that the interactions and obligations are correct and consistent with policies set out to guide partners in building the correct sequences of interactions to support the functions of one or more services. Hence, checking the suitability of service behavior is complex, particularly when dealing with a composition of services and concurrent interactions. How can we rigorously check implementations of service compositions? What are the semantics of service compositions? How does deployment configuration affect service composition behavior safety? To facilitate service engineers designing and implementing suitable and safe service compositions, we present in this paper an approach to consider different viewpoints of service composition behavior analysis. The contribution of the paper is threefold. First, we model service orchestration, choreography behavior, and service orchestration deployment through formal semantics applied to service behavior and configuration descriptions. Second, we define types of analysis and properties of interest for checking service models of orchestrations, choreography, and deployment. Third, we describe mechanical support by providing a comprehensive integrated workbench for the verification and validation of service compositions.", "paper_title": "An Integrated Workbench for Model-Based Engineering of Service Compositions", "paper_id": "WOS:000208240700005"}