{"auto_keywords": [{"score": 0.03135283516005389, "phrase": "gpu"}, {"score": 0.006414029458489676, "phrase": "gpu."}, {"score": 0.00481495049065317, "phrase": "efficient_hybrid"}, {"score": 0.0036037265181631324, "phrase": "high-level_optimization_techniques"}, {"score": 0.003423969509052361, "phrase": "batch_processing"}, {"score": 0.0033374705499418377, "phrase": "asyncronous_execution"}, {"score": 0.002886885861509621, "phrase": "memory_bus_capabilities"}, {"score": 0.002742787059497186, "phrase": "pure_gpu_implementation_limitations"}, {"score": 0.0026507289852980512, "phrase": "limited_complexity"}, {"score": 0.002433843373780471, "phrase": "processed_scene_data_sets"}, {"score": 0.0022346638243276717, "phrase": "standard_bidirectional_path-tracing_implementations"}, {"score": 0.0021049977753042253, "phrase": "production-oriented_rendering_engines"}], "paper_keywords": [""], "paper_abstract": "This paper presents a reformulation of bidirectional path-tracing that adequately divides the algorithm into processes efficiently executed in parallel on both the CPU and the GPU. We thus benefit from high-level optimization techniques such as double buffering, batch processing, and asyncronous execution, as well as from the exploitation of most of the CPU, GPU, and memory bus capabilities. Our approach, while avoiding pure GPU implementation limitations (such as limited complexity of shaders, light or camera models, and processed scene data sets), is more than ten times faster than standard bidirectional path-tracing implementations, leading to performance suitable for production-oriented rendering engines.", "paper_title": "Combinatorial Bidirectional Path-Tracing for Efficient Hybrid CPU/GPU Rendering", "paper_id": "WOS:000289996100009"}