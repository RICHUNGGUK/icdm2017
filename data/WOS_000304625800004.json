{"auto_keywords": [{"score": 0.039750428575466526, "phrase": "feature_requests"}, {"score": 0.02922915708637454, "phrase": "additional_upfront_analysis"}, {"score": 0.00481495049065317, "phrase": "feature_request_management_systems"}, {"score": 0.004700468701207975, "phrase": "online_feature_request_management_systems"}, {"score": 0.00458869631642791, "phrase": "stakeholders'_change_requests"}, {"score": 0.004286171444202565, "phrase": "important_problem"}, {"score": 0.004134137523409649, "phrase": "inadequate_functionalities"}, {"score": 0.004068302313449334, "phrase": "costly_changes"}, {"score": 0.004003511299646736, "phrase": "development_effort"}, {"score": 0.0038305869305614504, "phrase": "early_predictions"}, {"score": 0.0036651042289628324, "phrase": "insufficient_or_inadequate_upfront_analysis"}, {"score": 0.0033417571465258, "phrase": "online_discussions"}, {"score": 0.00321019328631004, "phrase": "feature_request_failures"}, {"score": 0.0031845067058084583, "phrase": "seven_large_projects"}, {"score": 0.0030591147406390986, "phrase": "failure_prediction_models"}, {"score": 0.0029386456078004863, "phrase": "different_prediction_techniques"}, {"score": 0.0028229071631385634, "phrase": "cost-benefit_model"}, {"score": 0.0025326211341475903, "phrase": "relative_cost"}, {"score": 0.0023940274498526213, "phrase": "reasonable_estimations"}, {"score": 0.0023463854193479274, "phrase": "automated_prediction_models"}, {"score": 0.002209060366991921, "phrase": "automated_failure_prediction"}, {"score": 0.002191366809047192, "phrase": "requirements_elicitation"}, {"score": 0.002156402793481102, "phrase": "promising_approach"}, {"score": 0.0021391300942881, "phrase": "guiding_requirements"}, {"score": 0.0021049977753042253, "phrase": "online_settings"}], "paper_keywords": ["Early failure prediction", " Cost-benefit of requirements engineering", " Feature requests management systems", " Global software development", " Open source"], "paper_abstract": "Online feature request management systems are popular tools for gathering stakeholders' change requests during system evolution. Deciding which feature requests require attention and how much upfront analysis to perform on them is an important problem in this context: too little upfront analysis may result in inadequate functionalities being developed, costly changes, and wasted development effort; too much upfront analysis is a waste of time and resources. Early predictions about which feature requests are most likely to fail due to insufficient or inadequate upfront analysis could facilitate such decisions. Our objective is to study whether it is possible to make such predictions automatically from the characteristics of the online discussions on feature requests. This paper presents a study of feature request failures in seven large projects, an automated tool-implemented framework for constructing failure prediction models, and a comparison of the performance of the different prediction techniques for these projects. The comparison relies on a cost-benefit model for assessing the value of additional upfront analysis. In this model, the value of additional upfront analysis depends on its probability of success in preventing failures and on the relative cost of the failures it prevents compared to its own cost. We show that for reasonable estimations of these two parameters, automated prediction models provide more value than a set of baselines for many failure types and projects. This suggests automated failure prediction during requirements elicitation to be a promising approach for guiding requirements engineering efforts in online settings.", "paper_title": "Early failure prediction in feature request management systems: an extended study", "paper_id": "WOS:000304625800004"}