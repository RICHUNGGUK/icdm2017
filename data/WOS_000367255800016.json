{"auto_keywords": [{"score": 0.03325245069857053, "phrase": "pilsner"}, {"score": 0.015561929573070624, "phrase": "higher-order_imperative_language"}, {"score": 0.014210240800265339, "phrase": "separate_compilation"}, {"score": 0.009703747767335848, "phrase": "coq"}, {"score": 0.00481495049065317, "phrase": "compositionally_verified_compiler"}, {"score": 0.004606759374526927, "phrase": "fully_verified_software"}, {"score": 0.004498394288102689, "phrase": "compcert"}, {"score": 0.004407530256797396, "phrase": "whole-program_compilers"}, {"score": 0.004231249907249981, "phrase": "different_verified_compilers"}, {"score": 0.004117647922204903, "phrase": "compositional_notion"}, {"score": 0.004089725258435817, "phrase": "compiler_correctness"}, {"score": 0.003912768486550741, "phrase": "multi-pass_compilation"}, {"score": 0.003769006950727621, "phrase": "different_intermediate_languages"}, {"score": 0.0037307208089736835, "phrase": "non-standard_program_transformations"}, {"score": 0.0036181717017041387, "phrase": "prior_work"}, {"score": 0.003593623872399777, "phrase": "hur_et_al"}, {"score": 0.003520971639466546, "phrase": "novel_approach"}, {"score": 0.0034970809586393416, "phrase": "compositional_compiler_verification"}, {"score": 0.003461547484288942, "phrase": "parametric_inter-language_simulations"}, {"score": 0.003334309053314909, "phrase": "compiler_verification"}, {"score": 0.0029196116767956273, "phrase": "ml-like_source_language_s"}, {"score": 0.002889928791032578, "phrase": "assembly-like_target_language_t"}, {"score": 0.002841124508908794, "phrase": "cps-based_intermediate_language"}, {"score": 0.0027931421106359875, "phrase": "first_multi-pass_compiler"}, {"score": 0.002690408578073945, "phrase": "pils"}, {"score": 0.0024623110626032364, "phrase": "hand-coded_self-modifying_t_module"}, {"score": 0.002339601774631419, "phrase": "zwickel"}, {"score": 0.0023158019935841235, "phrase": "self-modifying_t_module"}, {"score": 0.002163193271881447, "phrase": "significant_undertaking"}], "paper_keywords": ["Compositional compiler verification", " parametric simulations", " higher-order state", " recursive types", " abstract types", " transitivity"], "paper_abstract": "Compiler verification is essential for the construction of fully verified software, but most prior work (such as CompCert) has focused on verifying whole-program compilers. To support separate compilation and to enable linking of results from different verified compilers, it is important to develop a compositional notion of compiler correctness that is modular (preserved under linking), transitive (supports multi-pass compilation), and flexible (applicable to compilers that use different intermediate languages or employ non-standard program transformations). In this paper, building on prior work of Hur et al., we develop a novel approach to compositional compiler verification based on parametric inter-language simulations (PILS). PILS are modular: they enable compiler verification in a manner that supports separate compilation. PILS are transitive: we use them to verify Pilsner, a simple (but non-trivial) multi-pass optimizing compiler (programmed in Coq) from an ML-like source language S to an assembly-like target language T, going through a CPS-based intermediate language. Pilsner is the first multi-pass compiler for a higher-order imperative language to be compositionally verified. Lastly, PILS are flexible: we use them to additionally verify (1) Zwickel, a direct non-optimizing compiler for S, and (2) a hand-coded self-modifying T module, proven correct w.r.t. an S-level specification. The output of Zwickel and the self-modifying T module can then be safely linked together with the output of Pilsner. All together, this has been a significant undertaking, involving several person-years of work and over 55,000 lines of Coq.", "paper_title": "Pilsner: A Compositionally Verified Compiler for a Higher-Order Imperative Language", "paper_id": "WOS:000367255800016"}