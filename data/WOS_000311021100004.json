{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_security_monitors"}, {"score": 0.004460309246062286, "phrase": "third_party"}, {"score": 0.004260134699483774, "phrase": "underlying_application"}, {"score": 0.004216880725292, "phrase": "language-based_information-flow_security"}, {"score": 0.004027586827290042, "phrase": "different_sensitivity_levels"}, {"score": 0.003966388754366831, "phrase": "information_flow"}, {"score": 0.003866443402315402, "phrase": "open_challenge"}, {"score": 0.003788296551609616, "phrase": "considerable_progress"}, {"score": 0.0036740168936985314, "phrase": "dynamic_monitoring"}, {"score": 0.003636692152882991, "phrase": "secure_information_flow"}, {"score": 0.0034733518170738517, "phrase": "dynamic_information-flow_monitors"}, {"score": 0.0031360786664165093, "phrase": "source_language"}, {"score": 0.003088384809415812, "phrase": "dynamic_code_evaluation"}, {"score": 0.002718045523483502, "phrase": "string_evaluation_time"}, {"score": 0.0026359661683151006, "phrase": "conventional_offline_inlining"}, {"score": 0.0025433263646920364, "phrase": "hosting_runtime_environment"}, {"score": 0.0024414225109100672, "phrase": "simple_language"}, {"score": 0.0023798115577749225, "phrase": "inlined_code"}, {"score": 0.0022961534630650347, "phrase": "non-interference_property"}, {"score": 0.0022382002476510573, "phrase": "practical_considerations"}, {"score": 0.0022267859286766553, "phrase": "experimental_results"}, {"score": 0.0021817065300196634, "phrase": "manual_and_automatic_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Information flow", " Language-based security", " Non-interference", " Reference monitors", " Inlining"], "paper_abstract": "How do we guarantee that a piece of code, possibly originating from third party, does not jeopardize the security of the underlying application? Language-based information-flow security considers programs that manipulate pieces of data at different sensitivity levels. Securing information flow in such programs remains an open challenge. Recently, considerable progress has been made on understanding dynamic monitoring for secure information flow. This paper presents a framework for inlining dynamic information-flow monitors. A novel feature of our framework is the ability to perform inlining on the fly. We consider a source language that includes dynamic code evaluation of strings whose content might not be known until runtime. To secure this construct, our inlining is done on the fly, at the string evaluation time, and, just like conventional offline inlining, requires no modification of the hosting runtime environment. We present a formallization for a simple language to show that the inlined code is secure: it satisfies a non-interference property. We also discuss practical considerations experimental results based on both manual and automatic code rewriting. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "On-the-fly inlining of dynamic security monitors", "paper_id": "WOS:000311021100004"}