{"auto_keywords": [{"score": 0.04834686887008023, "phrase": "collision_detection"}, {"score": 0.00481495049065317, "phrase": "fracturing_rigid_bodies"}, {"score": 0.0047395356621991935, "phrase": "complex_scenes"}, {"score": 0.004568108391981922, "phrase": "key_role"}, {"score": 0.004496542293425754, "phrase": "simulation_performance"}, {"score": 0.00433386573276633, "phrase": "fracture_simulation"}, {"score": 0.004177049813981273, "phrase": "fracture_fragments"}, {"score": 0.003941964605885606, "phrase": "collision_detection_data_structures"}, {"score": 0.0035853745478488254, "phrase": "novel_collision_detection_algorithms"}, {"score": 0.003492155652400838, "phrase": "real-time_simulation"}, {"score": 0.003437387719239532, "phrase": "rigid_bodies"}, {"score": 0.0032954888655173666, "phrase": "well-known_efficient_data_structures"}, {"score": 0.0031761255583359726, "phrase": "sphere_trees"}, {"score": 0.0030449789178940787, "phrase": "existing_simulation_engines"}, {"score": 0.0029814443878969973, "phrase": "novel_methods"}, {"score": 0.00291923164591297, "phrase": "data_structures"}, {"score": 0.002769304577201566, "phrase": "fracture_events"}, {"score": 0.0026689487424251907, "phrase": "effective_self-adapting_contact_selection_algorithm"}, {"score": 0.002492098272172066, "phrase": "collision_response"}, {"score": 0.002376559242152662, "phrase": "challenging_scenarios"}, {"score": 0.002339246282204109, "phrase": "high_frame_rates"}, {"score": 0.0023025177990160487, "phrase": "hard_real-time_applications"}, {"score": 0.00218419478369074, "phrase": "promising_perspectives"}, {"score": 0.0021612684684351974, "phrase": "complex_fracture_simulations"}, {"score": 0.0021049977753042253, "phrase": "rigid_objects"}], "paper_keywords": ["Physical simulation", " collision detection", " fracture", " rigid body"], "paper_abstract": "In complex scenes with many objects, collision detection plays a key role in the simulation performance. This is particularly true in fracture simulation for two main reasons. One is that fracture fragments tend to exhibit very intensive contact, and the other is that collision detection data structures for new fragments need to be computed on the fly. In this paper, we present novel collision detection algorithms and data structures for real-time simulation of fracturing rigid bodies. We build on a combination of well-known efficient data structures, namely, distance fields and sphere trees, making our algorithm easy to integrate on existing simulation engines. We propose novel methods to construct these data structures, such that they can be efficiently updated upon fracture events and integrated in a simple yet effective self-adapting contact selection algorithm. Altogether, we drastically reduce the cost of both collision detection and collision response. We have evaluated our global solution for collision detection on challenging scenarios, achieving high frame rates suited for hard real-time applications such as video games or haptics. Our solution opens promising perspectives for complex fracture simulations involving many dynamically created rigid objects.", "paper_title": "Fast Collision Detection for Fracturing Rigid Bodies", "paper_id": "WOS:000327960700005"}