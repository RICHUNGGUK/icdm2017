{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "vm"}, {"score": 0.04884192360011086, "phrase": "cloud_computing"}, {"score": 0.03213419989286868, "phrase": "ant_colony_optimization"}, {"score": 0.028874232630375835, "phrase": "acops"}, {"score": 0.004740009255053372, "phrase": "load_balancing"}, {"score": 0.004641890423057823, "phrase": "virtual_machine"}, {"score": 0.004291617358806677, "phrase": "suitable_servers"}, {"score": 0.004202741104973709, "phrase": "resource_usage"}, {"score": 0.003785115566529808, "phrase": "dynamic_input_requests"}, {"score": 0.0032861588691414667, "phrase": "fixed_task_sets"}, {"score": 0.0032180376288035296, "phrase": "detailed_task_information"}, {"score": 0.0030062165552187086, "phrase": "particle_swarm_optimization"}, {"score": 0.0029438813080245544, "phrase": "vm_scheduling_problem"}, {"score": 0.0027936239349923464, "phrase": "particle_swarm"}, {"score": 0.002693018258362651, "phrase": "historical_information"}, {"score": 0.0026096659285441384, "phrase": "new_input_requests"}, {"score": 0.0025555322596460036, "phrase": "dynamic_environments"}, {"score": 0.0025288869172313674, "phrase": "additional_task_information"}, {"score": 0.0023254633298356894, "phrase": "computing_time"}, {"score": 0.002289180040240783, "phrase": "scheduling_procedure"}, {"score": 0.0022653055209664284, "phrase": "experimental_results"}, {"score": 0.002218299213266519, "phrase": "proposed_algorithm"}, {"score": 0.002172266188075892, "phrase": "load_balance"}, {"score": 0.0021383680500215267, "phrase": "dynamic_environment"}], "paper_keywords": ["Scheduling", " Load balance", " Cloud computing", " Ant colony optimization", " Particle swarm optimization"], "paper_abstract": "Virtual machine (VM) scheduling with load balancing in cloud computing aims to assign VMs to suitable servers and balance the resource usage among all of the servers. In an infrastructure-as-a-service framework, there will be dynamic input requests, where the system is in charge of creating VMs without considering what types of tasks run on them. Therefore, scheduling that focuses only on fixed task sets or that requires detailed task information is not suitable for this system. This paper combines ant colony optimization and particle swarm optimization to solve the VM scheduling problem, with the result being known as ant colony optimization with particle swarm (ACOPS). ACOPS uses historical information to predict the workload of new input requests to adapt to dynamic environments without additional task information. ACOPS also rejects requests that cannot be satisfied before scheduling to reduce the computing time of the scheduling procedure. Experimental results indicate that the proposed algorithm can keep the load balance in a dynamic environment and outperform other approaches.", "paper_title": "A hybrid meta-heuristic algorithm for VM scheduling with load balancing in cloud computing", "paper_id": "WOS:000358327400003"}