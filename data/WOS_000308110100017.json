{"auto_keywords": [{"score": 0.04464228929897594, "phrase": "large_register_file"}, {"score": 0.008846952072909076, "phrase": "power_consumption"}, {"score": 0.00481495049065317, "phrase": "large_register_file_design"}, {"score": 0.004714023408114857, "phrase": "design_trend"}, {"score": 0.004647911247507267, "phrase": "high-speed_microprocessors"}, {"score": 0.004550469496119256, "phrase": "wider_and_wider_issue_architecture"}, {"score": 0.004455061431809975, "phrase": "instruction-level_parallelism"}, {"score": 0.004180622964109706, "phrase": "register_pressure"}, {"score": 0.0038953958723049287, "phrase": "program_execution"}, {"score": 0.003629557750546267, "phrase": "register_requirements"}, {"score": 0.003578600071301459, "phrase": "general_programs"}, {"score": 0.003264316172836322, "phrase": "execution_time"}, {"score": 0.00310664242361199, "phrase": "power-aware_register_assignment_algorithm"}, {"score": 0.0030414140732789186, "phrase": "different_access-frequencies"}, {"score": 0.0029565620771207003, "phrase": "different_register_groups"}, {"score": 0.0028137115734915624, "phrase": "dynamic_voltage"}, {"score": 0.002640114583897493, "phrase": "infrequently_accessed_registers"}, {"score": 0.002603012037901889, "phrase": "experimental_results"}, {"score": 0.0025125151618810523, "phrase": "storage_locations"}, {"score": 0.0024772013657695896, "phrase": "temporary_values"}, {"score": 0.0024251568696803177, "phrase": "register_file"}, {"score": 0.002211947103318718, "phrase": "dvs_approach"}, {"score": 0.0021049977753042253, "phrase": "significant_ratio"}], "paper_keywords": ["Low power register file", " Cluster-based architecture", " Register assignment", " Dynamic voltage scaling"], "paper_abstract": "The design trend of high-speed microprocessors is toward wider and wider issue architecture to increase instruction-level parallelism. Such architecture needs a large register file to reduce register pressure. A large register file, however, consumes much more power during program execution. In this paper, we first analyze the register requirements in general programs, especially among those parts of the program which take most of execution time. Next, we drive a power-aware register assignment algorithm to distribute different access-frequencies temporary values over different register groups. Finally, we design a dynamic voltage scaling circuit to save the power consumption for those infrequently accessed registers. Experimental results show that partitioning the storage locations of temporary values in a register file will indeed impact the utilization of each register, and within a DVS approach a large register file can thus save a significant ratio of power consumption.", "paper_title": "Power-aware register assignment for large register file design", "paper_id": "WOS:000308110100017"}