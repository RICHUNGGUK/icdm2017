{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu"}, {"score": 0.013118758716934695, "phrase": "fractal_dimension"}, {"score": 0.0110439259804044, "phrase": "cuda"}, {"score": 0.004276016541197123, "phrase": "cross-platform_opencl_implementation"}, {"score": 0.0042178318724732005, "phrase": "box-counting_algorithm"}, {"score": 0.0039027036493682887, "phrase": "relevant_image_analysis_method"}, {"score": 0.0036944890904337833, "phrase": "time_consuming_process"}, {"score": 0.003545625043276134, "phrase": "parallel_programming_models"}, {"score": 0.003449718244515019, "phrase": "hardware_type"}, {"score": 0.0033411022698982542, "phrase": "opencl"}, {"score": 0.0031339552246625463, "phrase": "multi-core_cpus"}, {"score": 0.0030771609361092164, "phrase": "hardware_manufacturer"}, {"score": 0.0030076088903023034, "phrase": "key_part"}, {"score": 0.0029666322924554274, "phrase": "fast_box-counting_algorithm"}, {"score": 0.0027954035431845344, "phrase": "sorting_algorithm"}, {"score": 0.0027197343489967322, "phrase": "current_opencl_implementations"}, {"score": 0.0026949679939994226, "phrase": "sorting_algorithms"}, {"score": 0.002551022760887132, "phrase": "specific_multi-core_cpu_implementations"}, {"score": 0.0023927516438886445, "phrase": "target_device"}, {"score": 0.002327956449278255, "phrase": "average_speedup"}, {"score": 0.0021735249249471614, "phrase": "multi-core_cpu"}], "paper_keywords": ["Box-counting", " OpenCL", " GPU", " CPU", " Fractal dimension"], "paper_abstract": "In this paper, we present the analysis and development of a cross-platform OpenCL implementation of the box-counting algorithm, which is one of the most widely-used methods for estimating the Fractal Dimension. The Fractal Dimension is a relevant image analysis method used in several disciplines, but computing it is in general a time consuming process, especially when working with 3D images. Unlike parallel programming models that strictly depend on the hardware type and manufacturer, like CUDA, OpenCL allows us to provide an implementation suitable for execution on both GPUs and multi-core CPUs, whatever the hardware manufacturer. Sorting is a key part of the fast box-counting algorithm and the final speedup is highly conditioned by the efficiency of the sorting algorithm used. Our study reveals that current OpenCL implementations of sorting algorithms are clearly slower when compared with both CUDA for GPU and specific multi-core CPU implementations. Our OpenCL algorithm has been specifically optimized according the type of the target device and the results show an average speedup of up to 7.46x and 4x, when executed on the GPU and the multi-core CPU respectively, both compared with the single-threaded (sequential) CPU implementation.", "paper_title": "Box-counting algorithm on GPU and multi-core CPU: an OpenCL cross-platform study", "paper_id": "WOS:000322326800024"}