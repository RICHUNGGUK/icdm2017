{"auto_keywords": [{"score": 0.04011643449782753, "phrase": "timing_guarantees"}, {"score": 0.03973761244758953, "phrase": "functional_isolation"}, {"score": 0.004815112813718618, "phrase": "cache"}, {"score": 0.004674952036988355, "phrase": "real-time_multicore_virtualization_platforms"}, {"score": 0.004321118442104989, "phrase": "multiple_real-time_systems"}, {"score": 0.004257806363128601, "phrase": "shared_multicore_platform"}, {"score": 0.003445591238183763, "phrase": "multicore_timing_analysis"}, {"score": 0.00307657476125683, "phrase": "direct_interference"}, {"score": 0.0029722900280316216, "phrase": "indirect_interference"}, {"score": 0.002943147037670826, "phrase": "virtual_processors"}, {"score": 0.0027334673433027086, "phrase": "cache-aware_compositional_analysis_technique"}, {"score": 0.0025638362414466278, "phrase": "multicore_virtualization_platform"}, {"score": 0.0025014259919355453, "phrase": "previous_multicore_compositional_analyses"}, {"score": 0.0024405312482831646, "phrase": "cache-related_overhead"}, {"score": 0.002404706573379854, "phrase": "components'_interfaces"}, {"score": 0.0023346234464901978, "phrase": "new_virtualization-specific_challenges"}, {"score": 0.0021363670305843403, "phrase": "extensive_evaluation"}, {"score": 0.0021049977753042253, "phrase": "randomly_generated_workloads"}], "paper_keywords": ["Compositional analysis", " Interface", " Cache-aware", " Multicore", " Virtualization"], "paper_abstract": "Multicore processors are becoming ubiquitous, and it is becoming increasingly common to run multiple real-time systems on a shared multicore platform. While this trend helps to reduce cost and to increase performance, it also makes it more challenging to achieve timing guarantees and functional isolation. One approach to achieving functional isolation is to use virtualization. However, virtualization also introduces many challenges to the multicore timing analysis; for instance, the overhead due to cache misses becomes harder to predict, since it depends not only on the direct interference between tasks but also on the indirect interference between virtual processors and the tasks executing on them. In this paper, we present a cache-aware compositional analysis technique that can be used to ensure timing guarantees of components scheduled on a multicore virtualization platform. Our technique improves on previous multicore compositional analyses by accounting for the cache-related overhead in the components' interfaces, and it addresses the new virtualization-specific challenges in the overhead analysis. To demonstrate the utility of our technique, we report results from an extensive evaluation based on randomly generated workloads.", "paper_title": "Cache-aware compositional analysis of real-time multicore virtualization platforms", "paper_id": "WOS:000362744100003"}