{"auto_keywords": [{"score": 0.05007326307775766, "phrase": "openmp-like_directives"}, {"score": 0.04955111375780366, "phrase": "java"}, {"score": 0.039197561714499785, "phrase": "openmp"}, {"score": 0.004683292152590589, "phrase": "based_incremental_parallelism"}, {"score": 0.004606023493393774, "phrase": "uncomplicated_and_expressive_parallelisation_practice"}, {"score": 0.0044800522651664695, "phrase": "wide_adoption"}, {"score": 0.004333406378146173, "phrase": "openmp_specification"}, {"score": 0.004145287175409325, "phrase": "java_language"}, {"score": 0.004076858589744185, "phrase": "openmp_threading_model"}, {"score": 0.004031865694174726, "phrase": "limited_use"}, {"score": 0.0037721073763702486, "phrase": "semantic_interpretation"}, {"score": 0.003608266640131664, "phrase": "object_orientated_environment"}, {"score": 0.0035290250358997904, "phrase": "novel_concepts"}, {"score": 0.0033757067564871494, "phrase": "graphical_user_interface"}, {"score": 0.0030715948036518603, "phrase": "compiler-runtime_system"}, {"score": 0.0029380909574836587, "phrase": "gui_related_constructs"}, {"score": 0.002873524721802591, "phrase": "productivity_gains"}, {"score": 0.0028260302580927856, "phrase": "incremental_parallelism_approach"}, {"score": 0.0027486506476670915, "phrase": "gui"}, {"score": 0.0027333769432036905, "phrase": "related_constructs"}, {"score": 0.0023920904611571783, "phrase": "previous_attempts"}, {"score": 0.0023656467839555458, "phrase": "traditional_ways"}, {"score": 0.0022880528191813083, "phrase": "parallel_java_grande_forum"}, {"score": 0.002262756631083292, "phrase": "jgf"}, {"score": 0.0021763973978248005, "phrase": "gui_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel programming", " OpenMP", " Object orientation", " Graphical User Interface", " Java"], "paper_abstract": "Directives based incremental parallelism is an uncomplicated and expressive parallelisation practice and has led to wide adoption of OpenMP. However, the OpenMP specification does not present a binding for the Java language and the OpenMP threading model finds limited use for GUI (Graphical User Interface) application development. This paper focuses on the study of a semantic interpretation of OpenMP in the context of an object orientated environment. It proposes novel concepts to extend OpenMP for applications with a Graphical User Interface (GUI), based on the distinction between parallelism and concurrency. We present a compiler-runtime system for OpenMP-like directives in Java, enhanced with GUI related constructs. Acknowledging the productivity gains of the incremental parallelism approach of OpenMP, the GUI related constructs enable the developer to incrementally introduce concurrency. We present and discuss the performance of programs written using our system by comparing them with previous attempts and traditional ways of parallelisation-concurrency, using the parallel Java Grande Forum (JGF) benchmarks and a set of GUI applications. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Multiprocessing with GUI-awareness using OpenMP-like directives in Java", "paper_id": "WOS:000332751900004"}