{"auto_keywords": [{"score": 0.048980829617158356, "phrase": "software_systems"}, {"score": 0.010612387000973441, "phrase": "object-oriented_software"}, {"score": 0.010514898141415973, "phrase": "weighted_complex_network"}, {"score": 0.009325378106765328, "phrase": "complex_network"}, {"score": 0.006177088478280592, "phrase": "maintenance_effort"}, {"score": 0.00466102244911872, "phrase": "complex_networks"}, {"score": 0.004575272950516775, "phrase": "effective_technique"}, {"score": 0.0038708810091769856, "phrase": "communicational_cohesion"}, {"score": 0.0037820003983334476, "phrase": "related_software_components"}, {"score": 0.003610292749660581, "phrase": "object-oriented_software_system"}, {"score": 0.003125835572347772, "phrase": "graph_theory_metrics"}, {"score": 0.003054009753601139, "phrase": "transformed_network"}, {"score": 0.002956209594959227, "phrase": "software_system"}, {"score": 0.0029288446848334576, "phrase": "comparative_analysis"}, {"score": 0.002731500545019039, "phrase": "common_statistical_patterns"}, {"score": 0.0023646866829474798, "phrase": "common_behavior"}, {"score": 0.0023427844897844093, "phrase": "structural_complexity"}, {"score": 0.0022467024793003812, "phrase": "proposed_approach"}, {"score": 0.002195033004022173, "phrase": "software_components"}, {"score": 0.002164602220179823, "phrase": "common_software_design_principles"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Complex network", " Software complexity", " Software maintenance"], "paper_abstract": "Modeling software systems using complex networks can be an effective technique for analyzing the complexity of software systems. To enhance the technique, the structure of a complex network can be extended by assigning a weight to the edges of the complex network to denote the strength of communicational cohesion between a pair of related software components. This paper proposes an approach to represent an object-oriented software system using a weighted complex network in order to capture its structural characteristics, with respect to its maintainability and reliability. Nodes and edges are modeled based on the complexities of classes and their dependencies. Graph theory metrics are applied onto the transformed network with the purpose to evaluate the software system. Comparative analysis is performed using 40 object-oriented software systems, with different levels of maintenance effort. We found that common statistical patterns from the software systems can be identified easily. It is when these software systems are grouped and compared based on their levels of maintenance effort that their statistical patterns are more distinguishable to represent some common behavior and structural complexity of object-oriented software. The evaluations indicate that the proposed approach is capable of identifying software components that violate common software design principles. (c) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Analyzing maintainability and reliability of object-oriented software using weighted complex network", "paper_id": "WOS:000364244600003"}