{"auto_keywords": [{"score": 0.03429896859668573, "phrase": "rssa"}, {"score": 0.009907103833962096, "phrase": "non-orthogonal_architecture"}, {"score": 0.00481495049065317, "phrase": "uniform_loops"}, {"score": 0.004780030485538593, "phrase": "non-orthogonal_dsp_architecture"}, {"score": 0.004710944813540894, "phrase": "ever-increasing_demands"}, {"score": 0.004625983640628956, "phrase": "lower_power_consumption"}, {"score": 0.004364224683011796, "phrase": "irregular_data_paths"}, {"score": 0.004332559296185432, "phrase": "heterogeneous_registers"}, {"score": 0.004285489630701221, "phrase": "multiple_memory_banks"}, {"score": 0.004223521213460728, "phrase": "sufficient_compiler_support"}, {"score": 0.00407247625105503, "phrase": "usual_compilation_techniques"}, {"score": 0.003984444229875069, "phrase": "non-orthogonal_architectures"}, {"score": 0.003941141575848601, "phrase": "compiler_design"}, {"score": 0.003745179888113379, "phrase": "entire_code_generation_process"}, {"score": 0.0035202324978577263, "phrase": "code_generation_algorithm"}, {"score": 0.00350742771604554, "phrase": "rotation_scheduling_with_spill_codes"}, {"score": 0.0033696019683761274, "phrase": "similar_architectural_features"}, {"score": 0.003296713221268488, "phrase": "detailed_principles"}, {"score": 0.0029768089698126547, "phrase": "scheduling_results"}, {"score": 0.0029551803384781604, "phrase": "minimum_length"}, {"score": 0.002901791790730922, "phrase": "related_work"}, {"score": 0.0027775505385261553, "phrase": "different_number"}, {"score": 0.002727362288104992, "phrase": "scheduling_result"}, {"score": 0.0026683288015968243, "phrase": "hypothetical_machine_model"}, {"score": 0.0026296828616623994, "phrase": "scalable_non-orthogonal_dsp_architecture"}, {"score": 0.0025170626402362633, "phrase": "additional_accumulators"}, {"score": 0.0024625698287060586, "phrase": "spill_codes"}, {"score": 0.00241805924231814, "phrase": "instruction-level_parallelism_exploration"}, {"score": 0.0023830293456003765, "phrase": "data_alus"}, {"score": 0.002167355210897559, "phrase": "related_studies"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["DSP", " non-orthogonal architecture", " code generation"], "paper_abstract": "To meet ever-increasing demands for higher performance and lower power consumption, many high-end digital signal processors (DSPs) commonly employ non-orthogonal architecture. This architecture typically is characterized by irregular data paths, heterogeneous registers, and multiple memory banks. Moreover, sufficient compiler support is obviously important to harvest its benefits. However, usual compilation techniques do not adapt well to non-orthogonal architectures and the compiler design becomes much more difficult due to the complexity of these architectures. The entire code generation process for non-orthogonal architecture must include several phases. In this paper, we extend our previous study to propose a code generation algorithm Rotation Scheduling with Spill Codes Avoiding (RSSA), which is suitable for various DSPs with similar architectural features. As well as introducing detailed principles and algorithms of RSSA, we select several DSP applications and evaluate it under Motorola DSP56000 architectures. The evaluation results clearly demonstrate the effectiveness of RSSA, which can obtain scheduling results with minimum length and fewer spill codes compared to related work. In addition, in order to study the influence of different number of resources on the scheduling result, we also define a hypothetical machine model to represent a scalable non-orthogonal DSP architecture. After evaluating RSSA on various target architectures, we find that adding additional accumulators is the most efficient way to reduce spill codes. Meanwhile, for instruction-level parallelism exploration, numbers of data ALUs and accumulators have to be concurrently increased. Furthermore, based on our analysis, RSSA is not only effective but also quite efficient compared to related studies. (C) 2006 Published by Elsevier Inc.", "paper_title": "An effective and efficient code generation algorithm for uniform loops on non-orthogonal DSP architecture", "paper_id": "WOS:000244833700010"}