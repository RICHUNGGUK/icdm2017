{"auto_keywords": [{"score": 0.049488021144002546, "phrase": "np-complete_problems"}, {"score": 0.007900231618454982, "phrase": "problem_instances"}, {"score": 0.00481495049065317, "phrase": "problem_solving_strategies"}, {"score": 0.0047851345246117455, "phrase": "np-hard_optimization_problems"}, {"score": 0.004553128404612054, "phrase": "np-complete_problem"}, {"score": 0.004469042910390712, "phrase": "worst_case"}, {"score": 0.004427581692544645, "phrase": "intrinsic_difficulty"}, {"score": 0.003861697777410367, "phrase": "mutually_exclusive_choices"}, {"score": 0.0036857412768922827, "phrase": "smaller_subproblems"}, {"score": 0.003517773841528639, "phrase": "global_solution"}, {"score": 0.0032953582866530966, "phrase": "subsequent_subproblems"}, {"score": 0.003234425353582135, "phrase": "possible_choice_elections"}, {"score": 0.0031746155143471725, "phrase": "polynomial_size"}, {"score": 0.0031062294139798273, "phrase": "dynamic_programming_algorithms"}, {"score": 0.0026175952455594277, "phrase": "partial_fulfillment"}, {"score": 0.0025932659540059875, "phrase": "decision_problem_goal"}, {"score": 0.002521623057264411, "phrase": "human_capability"}, {"score": 0.002498183546874872, "phrase": "good_suboptimal_solutions"}, {"score": 0.002362041061180632, "phrase": "best_and_worst_solutions"}, {"score": 0.002226357953581725, "phrase": "computational_heuristics"}, {"score": 0.0021446993452098597, "phrase": "experiment_participants"}], "paper_keywords": ["NP-hard problems", " Heuristic Methods", " Metaheuristics", " Human-Computer Comparison", " Problem Solving", " Learning Strategies", " Human Reasoning", " Testing"], "paper_abstract": "NP-complete problems are particularly hard to solve. Unless P=NP, any algorithm solving an NP-complete problem takes exponential time in the worst case. The intrinsic difficulty of NP-complete problems when we try to optimally solve them with computers seems to apply to humans too. Intuitively, solving NP-complete problems requires taking a series of choices where each choice we take disables many subsequent choices, but the scope of dependencies between these mutually exclusive choices cannot be bound. Thus, the problem cannot be split into smaller subproblems in such a way that their solutions can be computed independently and easily combined for constructing the global solution (as it happens in divide and conquer algorithms). Moreover, for each choice, the space of subsequent subproblems to be considered for all possible choice elections does not collapse into a polynomial size set (as it happens in dynamic programming algorithms). Thus, intuitively, in NP-complete problems any choice may unboundedly affect any other, and this difficulty seems to puzzle humans as much as computers. In this paper we conduct an experiment to systematically analyze the performance of humans when solving NP-complete problems. For each problem, in order to measure partial fulfillment of the decision problem goal, we consider its NP-hard optimization version. We analyze the human capability to compute good suboptimal solutions to these problems, we try to identify the kind of problem instances which make humans compute the best and worst solutions (including the dependance of their performance on the size of problem instances), and we compare their performance with computational heuristics typically used to approximately solve these problems. We also interview experiment participants in order to infer the most typical strategies used by them in experiments, as well as how these strategies depend on the form and size of problem instances.", "paper_title": "Comparing Problem Solving Strategies for NP-hard Optimization Problems", "paper_id": "WOS:000320501200002"}