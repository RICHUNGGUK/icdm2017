{"auto_keywords": [{"score": 0.04852911059403898, "phrase": "ga"}, {"score": 0.03472237384608349, "phrase": "multi-core_and_many-core_architectures"}, {"score": 0.00481495049065317, "phrase": "genetic_algorithms"}, {"score": 0.004745056850725867, "phrase": "many-core_systems"}, {"score": 0.004693300099911199, "phrase": "genetic_algorithm"}, {"score": 0.004541377162789232, "phrase": "exact_or_approximate_solutions"}, {"score": 0.004475436844227947, "phrase": "search_problems"}, {"score": 0.004426607895888934, "phrase": "acceptable_time"}, {"score": 0.0043147264956783565, "phrase": "architectural_perspective"}, {"score": 0.004252063063815893, "phrase": "general_analysis"}, {"score": 0.004159763048814389, "phrase": "multi-core_cpus"}, {"score": 0.00411436400374349, "phrase": "many-core_gpus"}, {"score": 0.0034642599795044445, "phrase": "many-core_architectures"}, {"score": 0.003315374849824563, "phrase": "ga_performance"}, {"score": 0.0030253688063143157, "phrase": "previous_work"}, {"score": 0.002863652837038965, "phrase": "ga_problems"}, {"score": 0.002770791022032813, "phrase": "particular_ga_problem"}, {"score": 0.0026419338604879404, "phrase": "execution_speed"}, {"score": 0.0026035011274172753, "phrase": "solution_quality"}, {"score": 0.002482404507958289, "phrase": "theoretical_performance"}, {"score": 0.0024642796422450755, "phrase": "optimization_models"}, {"score": 0.0023496433751182162, "phrase": "performance_comparison"}, {"score": 0.0021676351850669017, "phrase": "better_guide"}, {"score": 0.0021518035978153878, "phrase": "practical_decisions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Genetic algorithm", " Multi-core", " GPU", " Accuracy", " Architecture", " Speedup"], "paper_abstract": "A Genetic Algorithm (GA) is a heuristic to find exact or approximate solutions to optimization and search problems within an acceptable time. We discuss GAs from an architectural perspective, offering a general analysis of performance of GAs on multi-core CPUs and on many-core GPUs. Based on the widely used Parallel GA (PGA) schemes, we propose the best one for each architecture. More specifically, the Asynchronous Island scheme, Island/Master-Slave Hierarchy PGA and Island/Cellular Hierarchy PGA are the best for multi-core, multi-socket multi-core and many-core architectures, respectively. Optimization approaches and rules based on a deep understanding of multi- and many-core architectures are also analyzed and proposed. Finally, the comparison of GA performance on multi-core and many-core architectures are discussed. Three real GA problems are used as benchmarks to evaluate our analysis and findings. There are three extra contributions compared to previous work. Firstly, our findings based on deeply analyzing architectures can be applied to all GA problems, even for other parallel computing, not for a particular GA problem. Secondly, the performance of GAs in our work not only concerns execution speed, also the solution quality has not been considered seriously enough. Thirdly, we propose the theoretical performance and optimization models of PGA on multi-core and many-core architectures, finding a more practical result of the performance comparison of the GA on these architectures, so that the speedup presented in this work is more reasonable and is a better guide to practical decisions. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Architecture-based design and optimization of genetic algorithms on multi- and many-core systems", "paper_id": "WOS:000337782900009"}