{"auto_keywords": [{"score": 0.03829477508328845, "phrase": "package_managers"}, {"score": 0.03270162401837859, "phrase": "modular_architecture"}, {"score": 0.00481495049065317, "phrase": "modern_software_distributions"}, {"score": 0.0047224703862074665, "phrase": "open_source"}, {"score": 0.00447282529270722, "phrase": "large_collection"}, {"score": 0.004438250823243621, "phrase": "software_packages"}, {"score": 0.004236321075918639, "phrase": "state-of-the-art_package_managers"}, {"score": 0.004059266990094632, "phrase": "monolithic_architecture"}, {"score": 0.003859500298805362, "phrase": "customized_heuristics"}, {"score": 0.0036695284042874395, "phrase": "existing_package_managers"}, {"score": 0.0033559647822437298, "phrase": "complex_criteria"}, {"score": 0.00326594229173048, "phrase": "best_solution"}, {"score": 0.0032155857567170696, "phrase": "user's_preferences"}, {"score": 0.0030572112793962004, "phrase": "precise_interface_formalisms"}, {"score": 0.003010063382882408, "phrase": "system_administrator"}, {"score": 0.0025567271683947547, "phrase": "current_package_managers"}, {"score": 0.0023746766301040974, "phrase": "external_solvers"}, {"score": 0.002293014162421338, "phrase": "next_generation"}, {"score": 0.00224013518726087, "phrase": "better_results"}, {"score": 0.002154693685426657, "phrase": "new_platforms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software dependencies", " Software repositories", " Software components", " Package manager", " Open source"], "paper_abstract": "Context: The success of modern software distributions in the Free and Open Source world can be explained, among other factors, by the availability of a large collection of software packages and the possibility to easily install and remove those components using state-of-the-art package managers. However, package managers are often built using a monolithic architecture and hard-wired and ad-hoc dependency solvers implementing some customized heuristics. Objective: We aim at laying the foundation for improving on existing package managers. Package managers should be complete, that is find a solution whenever there exists one, and allow the user to specify complex criteria that define how to pick the best solution according to the user's preferences. Method: In this paper we propose a modular architecture relying on precise interface formalisms that allows the system administrator to choose from a variety of dependency solvers and backends. Results: We have built a working prototype-called MPM-following the design advocated in this paper, and we show how it largely outperforms a variety of current package managers. Conclusion: We argue that a modular architecture, allowing for delegating the task of constraint solving to external solvers, is the path that leads to the next generation of package managers that will deliver better results, offer more expressive preference languages, and be easily adaptable to new platforms. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "A modular package manager architecture", "paper_id": "WOS:000312759500019"}