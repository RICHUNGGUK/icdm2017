{"auto_keywords": [{"score": 0.028629244789919357, "phrase": "healing_connectors"}, {"score": 0.015446403889491688, "phrase": "application_developers"}, {"score": 0.006317810624012616, "phrase": "component_developers"}, {"score": 0.006242728860828183, "phrase": "internal_details"}, {"score": 0.005259121975859217, "phrase": "ots_components"}, {"score": 0.00481495049065317, "phrase": "healing_component-based_systems"}, {"score": 0.0047386923107107645, "phrase": "effective_exception_handlers"}, {"score": 0.004626553103375699, "phrase": "design_time"}, {"score": 0.004589763483242731, "phrase": "exceptional_events"}, {"score": 0.004392565073466714, "phrase": "corresponding_handlers"}, {"score": 0.004271490815763164, "phrase": "designing_exception_handlers"}, {"score": 0.004237512575106522, "phrase": "component-based_software_systems"}, {"score": 0.003361069456060196, "phrase": "infield_failures"}, {"score": 0.003294566092612857, "phrase": "faulty_integration"}, {"score": 0.002612640527241776, "phrase": "integration_problems"}], "paper_keywords": ["Design", " Exception handling in component-based software systems", " healing connectors", " healing patterns", " self-healing", " component-based software engineering", " COTS components"], "paper_abstract": "To design effective exception handlers, developers must predict at design time the exceptional events that may occur at runtime, and must implement the corresponding handlers on the basis of their predictions. Designing exception handlers for component-based software systems is particularly difficult because the information required to build handlers is distributed between component and application developers. Component developers know the internal details of the components but ignore the applications, while application developers own the applications but cannot access the details required to implement handlers in components. This article addresses the problem of automatically healing the infield failures that are caused by faulty integration of OTS components. In the article, we propose a technique and a methodology to decouple the tasks of component and application developers, who will be able to share information asynchronously and independently, and communicate implicitly by developing and deploying what we call healing connectors. Component developers implement healing connectors on the basis of information about the integration problems frequently experienced by application developers. Application developers easily and safely install healing connectors in their applications without knowing the internal details of the connectors. Healing connectors heal failures activated by exceptions raised in the OTS components actually deployed in the system. The article defines healing connectors, introduces a methodology to develop and deploy healing connectors, and presents several case studies that indicate that healing connectors are effective, reusable and efficient.", "paper_title": "Exception Handlers for Healing Component-Based Systems", "paper_id": "WOS:000326024500003"}