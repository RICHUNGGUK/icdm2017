{"auto_keywords": [{"score": 0.0482117522215884, "phrase": "mpi"}, {"score": 0.00481495049065317, "phrase": "parallel_programs"}, {"score": 0.0046683172874085015, "phrase": "interface_specification"}, {"score": 0.004546174820239776, "phrase": "portable_message-passing_api"}, {"score": 0.004466519142879166, "phrase": "parallel_computers"}, {"score": 0.0044272138900038095, "phrase": "mpi_programs"}, {"score": 0.0040347380310668994, "phrase": "incorrect_computations"}, {"score": 0.003826231150275071, "phrase": "wasted_resources"}, {"score": 0.0037925389501636975, "phrase": "existing_tools"}, {"score": 0.0035178323426661626, "phrase": "techniques_wastes_resources"}, {"score": 0.0031774686451753477, "phrase": "type-based_approach"}, {"score": 0.003107935254560724, "phrase": "mpi-like_programs"}, {"score": 0.002986575805559931, "phrase": "dependent_type_language"}, {"score": 0.0027456676902333304, "phrase": "primitive_recursion"}, {"score": 0.002721464488351771, "phrase": "collective_choice"}, {"score": 0.0025465957200502404, "phrase": "source_code"}, {"score": 0.0024579630916613344, "phrase": "whyml"}], "paper_keywords": [""], "paper_abstract": "The Message Passing Interface specification (MPI) defines a portable message-passing API used to program parallel computers. MPI programs manifest a number of challenges on what concerns correctness: sent and expected values in communications may not match, resulting in incorrect computations possibly leading to crashes; and programs may deadlock resulting in wasted resources. Existing tools are not completely satisfactory: model-checking does not scale with the number of processes; testing techniques wastes resources and are highly dependent on the quality of the test set. As an alternative, we present a prototype for a type-based approach to programming and verifying MPI-like programs against protocols. Protocols are written in a dependent type language designed so as to capture the most common primitives in MPI, incorporating, in addition, a form of primitive recursion and collective choice. Protocols are then translated into Why3, a deductive software verification tool. Source code, in turn, is written in WhyML, the language of the Why3 platform, and checked against the protocol. Programs that pass verification are guaranteed to be communication safe and free from deadlocks. We verified several parallel programs from textbooks using our approach, and report on the outcome.", "paper_title": "Deductive Verification of Parallel Programs Using Why3", "paper_id": "WOS:000367339200010"}