{"auto_keywords": [{"score": 0.048811828059843985, "phrase": "program_logic"}, {"score": 0.013765123536890878, "phrase": "concurrent_separation_logic"}, {"score": 0.010660434199232663, "phrase": "initial_monitor_entrancies"}, {"score": 0.00481495049065317, "phrase": "multithreaded_java_programs."}, {"score": 0.0045879792359519375, "phrase": "multithreaded_java-like_programs"}, {"score": 0.004371660146981191, "phrase": "reentrant_object_monitors"}, {"score": 0.00409895142748329, "phrase": "first_detailed_adaptation"}, {"score": 0.003990385737207714, "phrase": "multithreaded_java-like_language"}, {"score": 0.0038431888954930083, "phrase": "unique_static_access_permission"}, {"score": 0.003781772207256374, "phrase": "heap_location"}, {"score": 0.0037213333316218522, "phrase": "exclusive_write_accesses"}, {"score": 0.0036422425344358037, "phrase": "data_races"}, {"score": 0.003603327452846714, "phrase": "concurrent_reads"}, {"score": 0.003526735797659508, "phrase": "fractional_permissions"}, {"score": 0.0032189132350239013, "phrase": "final_monitor_exits"}, {"score": 0.003066945490483524, "phrase": "monitor_reentrancies"}, {"score": 0.003034158379493625, "phrase": "auxiliary_variables"}, {"score": 0.002937879003671346, "phrase": "currently_held_monitors"}, {"score": 0.0029064676523923886, "phrase": "data_abstraction"}, {"score": 0.002875391177926809, "phrase": "behavioral_subtyping"}, {"score": 0.0028142286985235977, "phrase": "abstract_predicates"}, {"score": 0.002695768552609587, "phrase": "monitor_invariants"}, {"score": 0.0025273383208209922, "phrase": "value-parametrized_types"}, {"score": 0.002460295872115956, "phrase": "common_strong_global_invariants"}, {"score": 0.0024209250169088575, "phrase": "static_object_ownership_relations"}, {"score": 0.0023189818169615135, "phrase": "model_language"}, {"score": 0.0022941723937662927, "phrase": "java-like_classes"}, {"score": 0.0021049977753042253, "phrase": "illustrative_examples"}], "paper_keywords": ["Program Verification", " Java", " Multithreaded Programs", " Separation Logic"], "paper_abstract": "This paper presents a program logic for reasoning about multithreaded Java-like programs with dynamic thread creation, thread joining and reentrant object monitors. The logic is based on concurrent separation logic. It is the first detailed adaptation of concurrent separation logic to a multithreaded Java-like language. The program logic associates a unique static access permission with each heap location, ensuring exclusive write accesses and ruling out data races. Concurrent reads are supported through fractional permissions. Permissions can be transferred between threads upon thread starting, thread joining, initial monitor entrancies and final monitor exits. In order to distinguish between initial monitor entrancies and monitor reentrancies, auxiliary variables keep track of multisets of currently held monitors. Data abstraction and behavioral subtyping are facilitated through abstract predicates, which are also used to represent monitor invariants, preconditions for thread starting and postconditions for thread joining. Value-parametrized types allow to conveniently capture common strong global invariants, like static object ownership relations. The program logic is presented for a model language with Java-like classes and interfaces, the soundness of the program logic is proven, and a number of illustrative examples are presented.", "paper_title": "PERMISSION-BASED SEPARATION LOGIC FOR MULTITHREADED JAVA PROGRAMS", "paper_id": "WOS:000353193000007"}