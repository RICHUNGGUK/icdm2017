{"auto_keywords": [{"score": 0.04912982131704961, "phrase": "amazon"}, {"score": 0.04102825300869954, "phrase": "base_configuration"}, {"score": 0.004778923541463994, "phrase": "rocks_toolkit"}, {"score": 0.004545505214704803, "phrase": "xen-based"}, {"score": 0.004488946121663966, "phrase": "amazon's_data_center"}, {"score": 0.004444203710097833, "phrase": "so-called_infrastructure"}, {"score": 0.004323438278057686, "phrase": "full_root-level_access"}, {"score": 0.004184921610672245, "phrase": "machine_images"}, {"score": 0.004153589057429247, "phrase": "generally_accepted_approach"}, {"score": 0.004040688646993605, "phrase": "base_image"}, {"score": 0.003785836059995376, "phrase": "standalone_software_configurations"}, {"score": 0.003701401653850141, "phrase": "black_box"}, {"score": 0.003459191419478298, "phrase": "quick_survey"}, {"score": 0.003441891354624516, "phrase": "public_machine_images"}, {"score": 0.003416102793021287, "phrase": "amazon's_cloud"}, {"score": 0.003232779373179631, "phrase": "sheer_number"}, {"score": 0.0032166079825176547, "phrase": "public_images"}, {"score": 0.003113441660343867, "phrase": "non-expert_system_administrator"}, {"score": 0.0030592637113980485, "phrase": "rocks_cluster_toolkit_rolls"}, {"score": 0.002983493095718369, "phrase": "beowulf-style_cluster"}, {"score": 0.002938931857801796, "phrase": "black_box_characteristics"}, {"score": 0.002851790448644913, "phrase": "specific_administrative_changes"}, {"score": 0.002816246391862638, "phrase": "rocks-defined_computing_appliance_bootable"}, {"score": 0.0027464781499539296, "phrase": "condor_roll"}, {"score": 0.0026919067120537055, "phrase": "extended_cluster"}, {"score": 0.002671722386856879, "phrase": "single_condor_pool"}, {"score": 0.0026583500966092044, "phrase": "local_job_submission"}, {"score": 0.002631805441886608, "phrase": "pool_consists"}, {"score": 0.0023804752370243086, "phrase": "cloud_resources"}, {"score": 0.002309854101066247, "phrase": "systematic_reuse"}, {"score": 0.0021857667493036786, "phrase": "integrated_components"}, {"score": 0.0021693692831601745, "phrase": "user's_existing_cluster"}, {"score": 0.0021262403223013242, "phrase": "cloud_computing"}, {"score": 0.0021049977753042253, "phrase": "entirely_new_approaches"}], "paper_keywords": ["Amazon EC2", " cloud computing", " clusters", " Rocks toolkit", " systems definition and use"], "paper_abstract": "In 2006, Amazon introduced their elastic computing cloud (EC2) where customers could rent, by the hour, Xen-based virtual machines hosted in Amazon's data center. In this so-called infrastructure as a service (IAAS) cloud, users have full root-level access to virtual machines so that they can fully customize and optionally publish machine images. The generally accepted approach to provisioning within Amazon is to first start with a base image already residing within the cloud. Then, the user customizes this base configuration to match their specific requirements. While this works well for very simple, standalone software configurations, this approach has users starting with a black box of software (the base image) and then adding/modifying this system using techniques that range from very rigorous (excellent system configuration techniques) to completely ad hoc methods. A quick survey of public machine images available in Amazon's cloud shows a growth of 28% from September 2010 (similar to 5500 images) to December 2010 (similar to 7050 images). The sheer number of public images makes the selection of the base configuration all that more daunting for the non-expert system administrator. In 2004, we introduced Rocks cluster toolkit rolls as pluggable, programmatic components to extend the definition of a Beowulf-style cluster. In contrast to the black box characteristics of most cloud images, we describe how the Rocks EC2 roll automatically handles the specific administrative changes needed to make any Rocks-defined computing appliance bootable within the EC2 infrastructure. When coupled with the Condor roll, it becomes straightforward to build an extended cluster as a single Condor pool with local job submission. This extended pool consists of both the user's local cluster infrastructure (head node and local worker nodes) and EC2 nodes. Because the EC2 nodes are configured identically to their local counterparts, users need not modify their job submission scripts, executable paths or other parameters of their jobs simply to take advantage of cloud resources. These extensions are included in the EC2 and Condor rolls and enable the systematic reuse of software that has already been developed for clusters. These systems can function in the cloud as either standalone entities or as integrated components of a user's existing cluster. With this work we demonstrate that cloud computing does not require entirely new approaches to systems definition and use.", "paper_title": "Extending clusters to Amazon EC2 using the Rocks toolkit", "paper_id": "WOS:000293573900007"}