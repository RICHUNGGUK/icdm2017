{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "cluster_resource_allocation"}, {"score": 0.004757227624616643, "phrase": "multiple_parallel_task_graphs"}, {"score": 0.004560568143816105, "phrase": "parallel_task_graphs"}, {"score": 0.004345706062641742, "phrase": "data-parallel_tasks"}, {"score": 0.004191200981137508, "phrase": "task-parallel_application"}, {"score": 0.004091248980678087, "phrase": "higher_performance"}, {"score": 0.003969640975997097, "phrase": "additional_scheduling_challenges"}, {"score": 0.0038054151244558123, "phrase": "off-line_scheduling"}, {"score": 0.0036700484729006136, "phrase": "single_homogeneous_cluster"}, {"score": 0.0032920678776655783, "phrase": "previously_proposed_scheduling_algorithms"}, {"score": 0.003080449000295983, "phrase": "theoretical_literature"}, {"score": 0.0030069062905274976, "phrase": "minor_improvements"}, {"score": 0.002899861600151726, "phrase": "extensive_evaluation"}, {"score": 0.002478225374613311, "phrase": "good_trade-offs"}, {"score": 0.002404447017429959, "phrase": "best_algorithm"}, {"score": 0.002209319719984651, "phrase": "increasing_duration"}, {"score": 0.002156529381840657, "phrase": "makespan_guarantee"}, {"score": 0.0021049977753042253, "phrase": "approximation_algorithm"}], "paper_keywords": ["Multi criteria scheduling", " Resource allocation", " Parallel task graphs", " Cluster"], "paper_abstract": "Many scientific applications can be structured as parallel task graphs (PTGs) that is graphs of data-parallel tasks Adding data parallelism to a task-parallel application provides opportunities for higher performance and scaliability but poses additional scheduling challenges In this paper we study the off-line scheduling of multiple PTGs on a single homogeneous cluster The objective is to optimize performance without compromising fairness among the PTGs We consider the range of previously proposed scheduling algorithms applicable to this problem from both the applied and the theoretical literature and we propose minor improvements when possible Our main contribution is an extensive evaluation of these algorithms in simulation using both synthetic and real-world application configurations using two different metrics for performance and one metric for fairness We identify a handful of algorithms that provide good trade-offs when considering all these metrics The best algorithm overall is one that structures the schedule as a sequence of phases of increasing duration based on a makespan guarantee produced by an approximation algorithm (C) 2010 Elsevier Inc All rights reserved", "paper_title": "On cluster resource allocation for multiple parallel task graphs", "paper_id": "WOS:000284567800002"}