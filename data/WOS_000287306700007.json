{"auto_keywords": [{"score": 0.049407782669650464, "phrase": "operation_contracts"}, {"score": 0.039501390753465516, "phrase": "input_data"}, {"score": 0.00481495049065317, "phrase": "efficient_simulation_of_operation_contracts"}, {"score": 0.004486640769041646, "phrase": "well-known_means"}, {"score": 0.004064117897000019, "phrase": "operation_contract_simulation"}, {"score": 0.003923023699005215, "phrase": "operation_results"}, {"score": 0.003503497128638099, "phrase": "important_technique"}, {"score": 0.0034543031591181546, "phrase": "requirements_validation"}, {"score": 0.0033579708256295847, "phrase": "current_approaches"}, {"score": 0.003310813458610484, "phrase": "operation_contract_simulation_exhibit"}, {"score": 0.0032184697893776052, "phrase": "large_sets"}, {"score": 0.00310664242361199, "phrase": "additional_guidance"}, {"score": 0.0027741761880779535, "phrase": "efficient_as_well_as_fully_automatic_approach"}, {"score": 0.002530499648018525, "phrase": "java"}, {"score": 0.0024423826953133844, "phrase": "constraint_solver"}, {"score": 0.002357457094026928, "phrase": "generated_code"}, {"score": 0.0022276618873985445, "phrase": "case_study"}, {"score": 0.0021350169717509714, "phrase": "problem_instances"}, {"score": 0.0021049977753042253, "phrase": "considerable_size"}], "paper_keywords": ["Algorithms", " Performance"], "paper_abstract": "Operation contracts consisting of pre- and postconditions are a well-known means of specifying operations. In this paper we deal with the problem of operation contract simulation, i.e., determining operation results satisfying the postconditions based on input data supplied by the user; simulating operation contracts is an important technique for requirements validation and prototyping. Current approaches to operation contract simulation exhibit poor performance for large sets of input data or require additional guidance from the user. We show how these problems can be alleviated and describe an efficient as well as fully automatic approach. It is implemented in our tool OCLexec that generates from UML/OCL operation contracts corresponding Java implementations which call a constraint solver at runtime. The generated code can serve as a prototype. A case study demonstrates that our approach can handle problem instances of considerable size.", "paper_title": "Automatic and Efficient Simulation of Operation Contracts", "paper_id": "WOS:000287306700007"}