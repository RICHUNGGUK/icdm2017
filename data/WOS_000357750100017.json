{"auto_keywords": [{"score": 0.047510470298773616, "phrase": "mathematica"}, {"score": 0.015638005762787406, "phrase": "high_energy_physics"}, {"score": 0.007787400359239418, "phrase": "mathematica_language"}, {"score": 0.007390536097998021, "phrase": "numerical_code"}, {"score": 0.007069031032634523, "phrase": "python_extension_modules"}, {"score": 0.006940901477351877, "phrase": "python"}, {"score": 0.005854448127099064, "phrase": "distributed_program"}, {"score": 0.005808613098495222, "phrase": "test_data"}, {"score": 0.00481495049065317, "phrase": "semi-automatic_computations"}, {"score": 0.0047149746167903465, "phrase": "mathematica_package"}, {"score": 0.004580872896983597, "phrase": "high_energy_physics_computations"}, {"score": 0.00433531459712787, "phrase": "common_high_energy_physics_notations"}, {"score": 0.004200926582376575, "phrase": "index_contractions"}, {"score": 0.004028174164048643, "phrase": "new_features"}, {"score": 0.004007083686875716, "phrase": "c_code_generation"}, {"score": 0.0038624981944755813, "phrase": "compiled_functions"}, {"score": 0.0037133478610481994, "phrase": "low-level_language"}, {"score": 0.0036745792206362713, "phrase": "fortran"}, {"score": 0.003626626504149897, "phrase": "seamless_interfaces"}, {"score": 0.0036076314817952357, "phrase": "lhapdf"}, {"score": 0.0035605756410635207, "phrase": "looptools"}, {"score": 0.003523863750361227, "phrase": "program"}, {"score": 0.0034957206663520654, "phrase": "hepmath_catalogue"}, {"score": 0.0033961782274326948, "phrase": "cpc_program_library"}, {"score": 0.003378385493203297, "phrase": "queen's_university"}, {"score": 0.0033606857865538554, "phrase": "belfast"}, {"score": 0.0033430782507921594, "phrase": "n._ireland"}, {"score": 0.0033081387767897445, "phrase": "standard_cpc"}, {"score": 0.0030175357064947494, "phrase": "tar.gz_programming_language"}, {"score": 0.002900934975919716, "phrase": "linux"}, {"score": 0.0025638362414466278, "phrase": "symbolic_indices"}, {"score": 0.0023944552329463035, "phrase": "tensor_expressions"}, {"score": 0.0022777800735119405, "phrase": "mathematica's_byte_code_compiler"}, {"score": 0.002224510044064184, "phrase": "automatic_generation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["High energy physics", " Feynman amplitudes", " Tensor algebra", " Code generation", " Python"], "paper_abstract": "This article introduces the Mathematica package HEPMath which provides a number of utilities and algorithms for High Energy Physics computations in Mathematica. Its functionality is similar to packages like FormCalc or FeynCalc, but it takes a more complete and extensible approach to implementing common High Energy Physics notations in the Mathematica language, in particular those related to tensors and index contractions. It also provides a more flexible method for the generation of numerical code which is based on new features for C code generation in Mathematica. In particular it can automatically generate Python extension modules which make the compiled functions callable from Python, thus eliminating the need to write any code in a low-level language like C or Fortran. It also contains seamless interfaces to LHAPDF, FeynArts, and LoopTools. Program summary Program title: HEPMath Catalogue identifier: AEWU_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEWU_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 27360 No. of bytes in distributed program, including test data, etc.: 668749 Distribution format: tar.gz Programming language: Mathematica, C and python. Computer: Workstation. Operating system: Linux. Classification: 11.1, 5, 4.4. External routines: FeynArts (optional), LoopTools (optional), LHAPDF (optional) Nature of problem: Automatisation of (Feynman diagrammatic) computations in High Energy Physics, representation and manipulation of tensors with symbolic indices in the Mathematica language, generation of numerical code and interface to Python. Solution method: A Mathematica package which provides functions to construct and manipulate tensor expressions in Mathematica and interface to other popular tools in High Energy Physics. Unusual features: A code generation method which uses Mathematica's byte code compiler (Compile) rather than CForm/FortranForm and the automatic generation of Python extension modules. Running time: The examples provided only take a few seconds to run. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "HEPMath 1.4: A mathematica package for semi-automatic computations in high energy physics", "paper_id": "WOS:000357750100017"}