{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "future_stream_time_series"}, {"score": 0.004594582559945568, "phrase": "stream_time_series"}, {"score": 0.004536244367689415, "phrase": "ever-_increasing_attention"}, {"score": 0.0043842558719324526, "phrase": "financial_data_processing"}, {"score": 0.004347057700479576, "phrase": "network_monitoring"}, {"score": 0.004310173770196077, "phrase": "web_click-stream_analysis"}, {"score": 0.0041835168653521, "phrase": "anomaly_detection"}, {"score": 0.00402610372759447, "phrase": "efficient_and_effective_similarity_search"}, {"score": 0.003858110309630846, "phrase": "unique_characteristics"}, {"score": 0.003527712410706358, "phrase": "previous_approaches"}, {"score": 0.0034532961266947734, "phrase": "archived_data"}, {"score": 0.0033660587983313536, "phrase": "stream_scenarios"}, {"score": 0.003104038398386081, "phrase": "communication_congestion"}, {"score": 0.0030776686414001964, "phrase": "batch_processing"}, {"score": 0.0029871209444889716, "phrase": "even_future_time_series"}, {"score": 0.0029116257477000617, "phrase": "traditional_approaches"}, {"score": 0.002742787059497186, "phrase": "discrete_fourier_transform"}, {"score": 0.002617007341172262, "phrase": "unknown_values"}, {"score": 0.0025076619172878945, "phrase": "similarity_queries"}, {"score": 0.002465210678474529, "phrase": "predicted_data"}, {"score": 0.002413153346716919, "phrase": "efficient_indexes"}, {"score": 0.002225143304518447, "phrase": "similarity_search"}, {"score": 0.0022062235065459274, "phrase": "future_time_series"}, {"score": 0.0021688641066186817, "phrase": "extensive_experiments"}], "paper_keywords": ["similarity search", " stream time series", " prediction", " polynomial", " DFT", " probabilistic"], "paper_abstract": "With the advance of hardware and communication technologies, stream time series is gaining ever- increasing attention due to its importance in many applications such as financial data processing, network monitoring, Web click-stream analysis, sensor data mining, and anomaly detection. For all of these applications, an efficient and effective similarity search over stream data is essential. Because of the unique characteristics of the stream, for example, data are frequently updated and real-time response is required, the previous approaches proposed for searching through archived data may not work in the stream scenarios. Especially, in the cases where data often arrive periodically for various reasons ( for example, the communication congestion or batch processing), queries on such incomplete time series or even future time series may result in inaccuracy using traditional approaches. Therefore, in this paper, we propose three approaches, polynomial, Discrete Fourier Transform (DFT), and probabilistic, to predict the unknown values that have not arrived at the system and answer similarity queries based on the predicted data. We also apply efficient indexes, that is, a multidimensional hash index and a B_- tree, to facilitate the prediction and similarity search on future time series, respectively. Extensive experiments demonstrate the efficiency and effectiveness of our methods for prediction and answering queries.", "paper_title": "Efficient similarity search over future stream time series", "paper_id": "WOS:000251003300004"}