{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "pattern_language"}, {"score": 0.004733347359490221, "phrase": "regular_expressions"}, {"score": 0.004081385289516914, "phrase": "simple_syntax"}, {"score": 0.0037682108720193956, "phrase": "finite_state_automata"}, {"score": 0.002999274091205852, "phrase": "simple_matching"}, {"score": 0.002881793492919646, "phrase": "fairly_simple_expressions"}, {"score": 0.0024560114164181765, "phrase": "query_answering"}, {"score": 0.0023329572140896237, "phrase": "processing_algorithm"}, {"score": 0.00224151735457093, "phrase": "intersection_graph"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Regular expressions", " Graphs", " Paths in graphs", " Matching"], "paper_abstract": "This paper presents a pattern language based on regular expressions that allows the introduction of variables that can be instantiated to portions of the path that matches the expression. The paper will define a simple syntax for the language and its formal semantics. It will also study a modification of finite state automata that, through the introduction of actions on transitions, allows the variables to be instantiated while matching the expression. Finally, the paper will show that the problem of answering queries with variables is inherently harder than simple matching, essentially because, even for fairly simple expressions, the size of the results can be exponential in the size of the graph. The class of expressions and a class of graphs for which query answering is polynomial will be identified, and a processing algorithm for these expressions based on the intersection graph will be provided and analyzed. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Regular languages with variables on graphs", "paper_id": "WOS:000300468000001"}