{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "visual_representation"}, {"score": 0.010503534993482881, "phrase": "dataflow_paradigm"}, {"score": 0.0103245849379704, "phrase": "labview"}, {"score": 0.0044469055125323466, "phrase": "labview_programming_representation"}, {"score": 0.0043706785731816265, "phrase": "visual_programming_language"}, {"score": 0.004340554611582373, "phrase": "vpl"}, {"score": 0.004149716134716874, "phrase": "semantically_equivalent_textual_language"}, {"score": 0.003926273177600597, "phrase": "input_values"}, {"score": 0.0034544053534458093, "phrase": "debugging_problems"}, {"score": 0.0033023994098455457, "phrase": "logic_error"}, {"score": 0.003201088113538101, "phrase": "subjects'_time"}, {"score": 0.0030496164547515565, "phrase": "upper-level_university_students"}, {"score": 0.0030180996912267683, "phrase": "intermediate-level_programmers"}, {"score": 0.002986907667028281, "phrase": "prior_exposure"}, {"score": 0.002825898877873034, "phrase": "textual_representation"}, {"score": 0.0027966876746425666, "phrase": "tracing_problems"}, {"score": 0.0026004698404274483, "phrase": "parallelism_problems"}, {"score": 0.0024773480858940504, "phrase": "clear_evidence"}, {"score": 0.002460240519198386, "phrase": "selected_benefits"}, {"score": 0.0024179854244287795, "phrase": "small-sized_code_segments"}, {"score": 0.0023518780693181796, "phrase": "data_dependencies"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["visual programming", " LabVIEW", " empirical evaluation"], "paper_abstract": "This paper reports an experiment that examined the comprehensibility of the LabVIEW programming representation. LabVIEW is a visual programming language (VPL) based on the dataflow paradigm. The experiment compared LabVIEW to a semantically equivalent textual language using three types of tasks: (1) tracing problems: given code and input values, subjects were asked what output the code would produce if executed. (2) Parallelism problems: given code with several program statements highlighted, subjects were asked about the sequence in which those statements could execute. (3) Debugging problems: given code and its specifications, subjects were asked to find a logic error in the code. The experiment measured the subjects' time to solve the problems and accuracy of the answers. The subjects were upper-level university students who were intermediate-level programmers with no prior exposure to LabVIEW. Their performances showed differences due to representation for all three task types. Subjects using the textual representation completed the tracing problems significantly faster than subjects using the visual representation. In contrast, subjects using the visual representation were significantly faster for the parallelism problems and significantly more accurate for both the parallelism and debugging problems. These results contribute clear evidence for selected benefits of a visual representation for small-sized code segments, evidence that LabVIEW succeeds in highlighting data dependencies, and evidence that LabVIEW helps programmers to maintain an overview of their code. The authors consider the implications of these results for VPLs more generally. (c) 2005 Elsevier Ltd. All rights reserved.", "paper_title": "Evidence in favor of visual representation for the dataflow paradigm: An experiment testing LabVIEW's comprehensibility", "paper_id": "WOS:000236077900001"}