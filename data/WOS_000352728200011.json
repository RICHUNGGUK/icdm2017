{"auto_keywords": [{"score": 0.04954033184026155, "phrase": "cholesky_decomposition"}, {"score": 0.03308886440974064, "phrase": "fail-stop_failures"}, {"score": 0.00481495049065317, "phrase": "fault_tolerance"}, {"score": 0.004627944735913613, "phrase": "widely_used_algorithm"}, {"score": 0.004550029253278477, "phrase": "linear_equations"}, {"score": 0.004498812433096501, "phrase": "symmetric_and_positive_definite_coefficient_matrix"}, {"score": 0.004203343568960231, "phrase": "high_performance_supercomputers"}, {"score": 0.004132546937996706, "phrase": "large_number"}, {"score": 0.00399449659126893, "phrase": "constant_failure_rate"}, {"score": 0.003648411055689428, "phrase": "additional_processors"}, {"score": 0.0035869274480340727, "phrase": "tolerant_methods_attempt"}, {"score": 0.0035065523764817143, "phrase": "expected_execution_time"}, {"score": 0.0032946562900625187, "phrase": "analysis_and_implementation_of_a_fault_tolerant_cholesky_factorization_algorithm"}, {"score": 0.003009022147559257, "phrase": "redundant_data"}, {"score": 0.002941558420246247, "phrase": "additional_set"}, {"score": 0.0028271058251633815, "phrase": "previous_works"}, {"score": 0.002795228413298423, "phrase": "algorithmic_methods"}, {"score": 0.0026864540069792275, "phrase": "fail-continue_cases"}, {"score": 0.0026411384812121503, "phrase": "proposed_fault_tolerance_scheme"}, {"score": 0.0024955220343292547, "phrase": "kraken"}, {"score": 0.0024673738215365104, "phrase": "experimental_results"}, {"score": 0.002318127769195112, "phrase": "overall_runtime"}, {"score": 0.002279011030331704, "phrase": "matrix_size"}, {"score": 0.002153316680437517, "phrase": "expected_runtime"}, {"score": 0.002129020447793464, "phrase": "cholesky_factorizations"}], "paper_keywords": ["Algorithm based fault tolerance (ABFT)", " cholesky decomposition", " extreme-scale systems", " fail-stop failures"], "paper_abstract": "Cholesky decomposition is a widely used algorithm to solve linear equations with symmetric and positive definite coefficient matrix. With large matrices, this often will be performed on high performance supercomputers with a large number of processors. Assuming a constant failure rate per processor, the probability of a failure occurring during the execution increases linearly with additional processors. Fault tolerant methods attempt to reduce the expected execution time by allowing recovery from failure. This paper presents an analysis and implementation of a fault tolerant Cholesky factorization algorithm that does not require checkpointing for recovery from fail-stop failures. Rather, this algorithm uses redundant data added in an additional set of processes. This differs from previous works with algorithmic methods as it addresses fail-stop failures rather than fail-continue cases. The proposed fault tolerance scheme is incorporated into ScaLAPACK and validated on the supercomputer Kraken. Experimental results demonstrate that this method has decreasing overhead in relation to overall runtime as the matrix size increases, and thus shows promise to reduce the expected runtime for Cholesky factorizations on very large matrices.", "paper_title": "Fail-Stop Failure Algorithm-Based Fault Tolerance for Cholesky Decomposition", "paper_id": "WOS:000352728200011"}