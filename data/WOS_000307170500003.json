{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "undirected_graphs"}, {"score": 0.003858697684681798, "phrase": "n_vertices"}, {"score": 0.0032558762499901727, "phrase": "minimum_spanning_tree"}, {"score": 0.0031377955308198634, "phrase": "disk_block_size"}, {"score": 0.0030464123943266673, "phrase": "edge_lengths"}, {"score": 0.0023694065215394593, "phrase": "simpler_algorithm"}, {"score": 0.0021049977753042253, "phrase": "uniformly_random_edge_lengths"}], "paper_keywords": ["Algorithms", " Theory", " Graph algorithms", " I/O-efficient algorithms", " memory hierarchies", " shortest path algorithms"], "paper_abstract": "We present I/O-efficient single-source shortest path algorithms for undirected graphs. Our main result is an algorithm with I/O complexity O(root nm log L)/ B + MST(n, m)) on graphs with n vertices, m edges, and arbitrary edge lengths between 1 and L; MST(n, m) denotes the I/O complexity of computing a minimum spanning tree; B denotes the disk block size. If the edge lengths are drawn uniformly at random from ( 0, 1], the expected I/O complexity of the algorithm is O(root nm/ B + ( m/ B) log B + MST(n, m)). A simpler algorithm has expected I/O complexity O(root nm log B)/ B + MST(n, m) for uniformly random edge lengths.", "paper_title": "I/O-Efficient Shortest Path Algorithms for Undirected Graphs with Random or Bounded Edge Lengths", "paper_id": "WOS:000307170500003"}