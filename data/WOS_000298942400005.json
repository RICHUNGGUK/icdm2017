{"auto_keywords": [{"score": 0.0452037966465482, "phrase": "ascii"}, {"score": 0.004753512932910936, "phrase": "fast_word-match_program"}, {"score": 0.004632968695963776, "phrase": "fpga_implementation"}, {"score": 0.004573842508130535, "phrase": "custom_matching_processor"}, {"score": 0.004252707756312684, "phrase": "vast_data_sets"}, {"score": 0.0041984140090404985, "phrase": "high_bandwidth_datastreams"}, {"score": 0.004056981775766067, "phrase": "real-time_operations"}, {"score": 0.0038868464660354626, "phrase": "fpga_utilization"}, {"score": 0.00385368199735867, "phrase": "original_bloom_filter"}, {"score": 0.0037238193456845124, "phrase": "bloom_filter_parallelization"}, {"score": 0.003522027550662857, "phrase": "searched_words"}, {"score": 0.003374250301861101, "phrase": "additional_processor_performance"}, {"score": 0.003331134183901191, "phrase": "processor_architecture"}, {"score": 0.003218823621926739, "phrase": "simultaneous_processing"}, {"score": 0.0031640918630415566, "phrase": "input_data"}, {"score": 0.003123652729688503, "phrase": "clock_cycle"}, {"score": 0.002879237498994052, "phrase": "single_fpga_structure"}, {"score": 0.002665305036900055, "phrase": "theoretical_throughput"}, {"score": 0.0024884913795612707, "phrase": "external_memory"}, {"score": 0.0024461474613359994, "phrase": "fpga_bandwidth"}, {"score": 0.002414861891567233, "phrase": "distinguishing_feature"}, {"score": 0.0023839754995935184, "phrase": "presented_architecture"}, {"score": 0.002254624822004988, "phrase": "fpga_reconfiguration"}, {"score": 0.0022257833099336858, "phrase": "next_unique_feature"}, {"score": 0.0021049977753042253, "phrase": "words'_length"}], "paper_keywords": ["digital electronics", " custom processor design", " word search", " data mining", " FPGA"], "paper_abstract": "This paper presents an FPGA implementation of a custom matching processor. The processor can be used for a very fast and energy efficient search of binary and ASCII words in either vast data sets or in high bandwidth datastreams. The matcher is particularly suited for real-time operations because of its outstanding data throughput. Power efficiency is achieved by FPGA utilization. Original Bloom filter [1] was parallelized. A Bloom filter parallelization allowed to achieve state-of-the-art performance. The searched words can be located with a one byte resolution. To gain additional processor performance, the processor architecture is thoughtfully parallelized. It allows for simultaneous processing of 16 bytes of input data at each clock cycle. To achieve very high data throughput, the architecture is also pipelined. Moreover, we implemented several processors in a single FPGA structure. As a result, three levels of parallelism are employed. Consequently with a 100 MHz clock frequency, a theoretical throughput of 1.6 GBytes/s is achieved. Although, in practice the throughput was reduced clue to external memory and CPU to FPGA bandwidth. Another distinguishing feature of the presented architecture is its high flexibility. A dictionary of words can be easily changed without FPGA reconfiguration. The next unique feature presented in this paper is an enhancement that allows for configuration of words' length.", "paper_title": "The implementation of the customized, parallel architecture for a fast word-match program", "paper_id": "WOS:000298942400005"}