{"auto_keywords": [{"score": 0.04858938791901051, "phrase": "centralised_orchestration"}, {"score": 0.004814951205791253, "phrase": "circulate"}, {"score": 0.004728780808284175, "phrase": "workflow_bottlenecks"}, {"score": 0.0043793594257092805, "phrase": "workflows_increases"}, {"score": 0.004339979174946844, "phrase": "centralised_orchestration_techniques"}, {"score": 0.00414830454375092, "phrase": "classic_orchestration_model"}, {"score": 0.004019171295196278, "phrase": "centralised_engine"}, {"score": 0.003929391999210588, "phrase": "unnecessary_data_transfer"}, {"score": 0.00389404213807752, "phrase": "wasted_bandwidth"}, {"score": 0.0035414658322295515, "phrase": "circulate_architecture"}, {"score": 0.0030922667860233603, "phrase": "existing_workflow_framework"}, {"score": 0.0029689316319134393, "phrase": "ws-circulate"}, {"score": 0.0029289191071848403, "phrase": "web_services"}, {"score": 0.0028248293967214947, "phrase": "montage_workflow"}, {"score": 0.0027616550517346066, "phrase": "common_workflow_patterns"}, {"score": 0.0025804616931593897, "phrase": "output_data_size_relationships"}, {"score": 0.002466303439899648, "phrase": "performance_analysis"}, {"score": 0.0022733662000757318, "phrase": "end-to-end_pattern"}, {"score": 0.0022427097847404352, "phrase": "montage"}, {"score": 0.0021049977753042253, "phrase": "circulate_architecture_increases"}], "paper_keywords": ["Workflow", " Workflow optimisation", " Web services", " Decentralised orchestration"], "paper_abstract": "As the number of services and the size of data involved in workflows increases, centralised orchestration techniques are reaching the limits of scalability. In the classic orchestration model, all data passes through a centralised engine, which results in unnecessary data transfer, wasted bandwidth and the engine to become a bottleneck to the execution of a workflow. This paper presents and evaluates the Circulate architecture which maintains the robustness and simplicity of centralised orchestration, but facilitates choreography by allowing services to exchange data directly with one another. Circulate could be realised within any existing workflow framework, in this paper, we focus on WS-Circulate, a Web services based implementation. Taking inspiration from the Montage workflow, a number of common workflow patterns (sequence, fan-in and fan-out), input to output data size relationships and network configurations are identified and evaluated. The performance analysis concludes that a substantial reduction in communication overhead results in a 2-4 fold performance benefit across all patterns. An end-to-end pattern through the Montage workflow results in an 8 fold performance benefit and demonstrates how the advantage of using the Circulate architecture increases as the complexity of a workflow grows.", "paper_title": "The Circulate architecture: avoiding workflow bottlenecks caused by centralised orchestration", "paper_id": "WOS:000268208900008"}