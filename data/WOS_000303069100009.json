{"auto_keywords": [{"score": 0.04066382384764281, "phrase": "executable_statement"}, {"score": 0.030173178705330043, "phrase": "cbt"}, {"score": 0.00481495049065317, "phrase": "better_fault_localization"}, {"score": 0.004768378525561471, "phrase": "crosstab-based_statistical_approach"}, {"score": 0.00436890075128947, "phrase": "debugging_activities"}, {"score": 0.004340671055146398, "phrase": "fault_localization"}, {"score": 0.004161553532799662, "phrase": "large_number"}, {"score": 0.004134658048970194, "phrase": "fault-localization_techniques"}, {"score": 0.003989797665674148, "phrase": "crosstab-based_statistical_technique"}, {"score": 0.003912925129722523, "phrase": "coverage_information"}, {"score": 0.0038375280115736958, "phrase": "execution_result"}, {"score": 0.0037150687722055727, "phrase": "test_case"}, {"score": 0.003643470150731877, "phrase": "effective_and_efficient_manner"}, {"score": 0.0034035317633176352, "phrase": "corresponding_statement"}, {"score": 0.003348764681887211, "phrase": "higher_suspiciousness"}, {"score": 0.00318967782444942, "phrase": "lower_suspiciousness"}, {"score": 0.0031690434364310435, "phrase": "case_studies"}, {"score": 0.003087830786909639, "phrase": "siemens"}, {"score": 0.003028281155306677, "phrase": "large-sized_programs"}, {"score": 0.002865710140187219, "phrase": "crosstab-based_technique"}, {"score": 0.0027562222950919257, "phrase": "smaller_percentage"}, {"score": 0.0027383842769094354, "phrase": "executable_statements"}, {"score": 0.0026681761480139067, "phrase": "first_statement"}, {"score": 0.002566226977846078, "phrase": "tarantula"}, {"score": 0.0025248881422983553, "phrase": "siemens_suite"}, {"score": 0.0024923044614470137, "phrase": "proposed_technique"}, {"score": 0.002389277352474987, "phrase": "sober"}, {"score": 0.00235843888868088, "phrase": "additional_experiments"}, {"score": 0.002224510044064184, "phrase": "object-oriented_languages"}, {"score": 0.0021325287436338228, "phrase": "suite_size"}], "paper_keywords": ["Crosstab", " debugging aids", " software fault localization", " statistical methods", " testing and debugging"], "paper_abstract": "It is becoming prohibitively expensive and time consuming, as well as tedious and error-prone, to perform debugging manually. Among the debugging activities, fault localization has been one of the most expensive, and therefore, a large number of fault-localization techniques have been proposed over the recent years. This paper presents a crosstab-based statistical technique that makes use of the coverage information of each executable statement and the execution result (success or failure) with respect to each test case to localize faults in an effective and efficient manner. A crosstab is constructed for each executable statement, and a statistic is computed to determine the suspiciousness of the corresponding statement. Statements with a higher suspiciousness are more likely to contain bugs and should be examined before those with a lower suspiciousness. Case studies are performed on both small- (the Siemens and Unix suites) and large-sized programs (space, grep, gzip, and make), and results suggest that the crosstab-based technique (CBT) is more effective (in terms of a smaller percentage of executable statements that have to be examined until the first statement containing the fault is reached) than other techniques, such as Tarantula. Further studies using the Siemens suite reveal that the proposed technique is also more effective at locating faults than other statistically oriented techniques, such as SOBER and Liblit05. Additional experiments evaluate the CBT from other perspectives, such as its efficiency in terms of time taken, its applicability to object-oriented languages (on a very large Java program: Ant), and its sensitivity to test suite size, and demonstrate its superior performance.", "paper_title": "Towards Better Fault Localization: A Crosstab-Based Statistical Approach", "paper_id": "WOS:000303069100009"}