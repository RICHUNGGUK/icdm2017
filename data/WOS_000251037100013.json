{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "maximum_number"}, {"score": 0.048734215142491696, "phrase": "open_stacks"}, {"score": 0.004357927940322685, "phrase": "dynamic-programming_solution"}, {"score": 0.003569451476205552, "phrase": "call-based_dynamic_program"}, {"score": 0.003051073364818384, "phrase": "dynamic-programming_search"}, {"score": 0.0026077803487003, "phrase": "lower_and_upper_bounds"}, {"score": 0.002326304140277375, "phrase": "search_strategies"}, {"score": 0.0021971473452127126, "phrase": "search_space"}, {"score": 0.0021049977753042253, "phrase": "final_dynamic-programming_solution"}], "paper_keywords": ["dynamic programming", " minimization of maximum number of open stacks", " cutting sequencing"], "paper_abstract": "We give a dynamic-programming solution to the problem of minimizing the maximum number of open stacks. Starting from a call-based dynamic program, we show a number of ways to improve the dynamic-programming search, preprocess the problem to simplify it, and determine lower and upper bounds. We then explore a number of search strategies for reducing the search space. The final dynamic-programming solution is, we believe, highly effective.", "paper_title": "Dynamic programming to minimize the maximum number of open stacks", "paper_id": "WOS:000251037100013"}