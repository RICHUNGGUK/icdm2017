{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concurrent_java_components"}, {"score": 0.04896221231267542, "phrase": "concurrency_failures"}, {"score": 0.006275750136664984, "phrase": "java_components"}, {"score": 0.004647442352794694, "phrase": "java_programming_language"}, {"score": 0.0045748683993128425, "phrase": "concurrent_programs"}, {"score": 0.004329630571352367, "phrase": "specific_concurrency_problems"}, {"score": 0.004178935413340453, "phrase": "previous_work"}, {"score": 0.004081385289516914, "phrase": "conan_testing_tool"}, {"score": 0.003817137134650275, "phrase": "large_number"}, {"score": 0.0033651019362620866, "phrase": "concurrent_software"}, {"score": 0.003085681697619705, "phrase": "conan"}, {"score": 0.0028857130140890787, "phrase": "common_concurrency_problems"}, {"score": 0.0027961342030212353, "phrase": "starting_point"}, {"score": 0.0026986685585382347, "phrase": "petri-net_model"}, {"score": 0.002677523161992825, "phrase": "java"}, {"score": 0.0025137856138000014, "phrase": "complete_classification"}, {"score": 0.0023881683972170422, "phrase": "suitable_tools"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["concurrency", " verification", " testing", " component", " Java"], "paper_abstract": "The Java programming language supports concurrency. Concurrent programs are harder to verify than their sequential counterparts due to their inherent non-determinism and a number of specific concurrency problems, such as interference and deadlock. In previous work, we have developed the ConAn testing tool for the testing of concurrent Java components. ConAn has been found to be effective at testing a large number of components, but there are certain classes of failures that are hard to detect using ConAn. Although a variety of other verification tools and techniques have been proposed for the verification of concurrent software, they each have their strengths and weaknesses. In this paper, we propose a method for verifying concurrent Java components that includes ConAn and complements it with other static and dynamic verification tools and techniques. The proposal is based on an analysis of common concurrency problems and concurrency failures in Java components. As a starting point for determining the concurrency failures in Java components, a Petri-net model of Java concurrency is used. By systematically analysing the model, we come up with a complete classification of concurrency failures. The classification and analysis are then used to determine suitable tools and techniques for detecting each of the failures. Finally, we propose to combine these tools and techniques into a method for verifying concurrent Java components. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "A method for verifying concurrent Java components based on an analysis of concurrency failures", "paper_id": "WOS:000244719500003"}