{"auto_keywords": [{"score": 0.03661306378153703, "phrase": "exception_handling_design"}, {"score": 0.00481495049065317, "phrase": "bug_fixing"}, {"score": 0.004590820632326585, "phrase": "important_quality_attribute"}, {"score": 0.004273951631010383, "phrase": "software_development"}, {"score": 0.0038390240716280302, "phrase": "right_design"}, {"score": 0.0037935066882208235, "phrase": "first_shot"}, {"score": 0.003313741359811683, "phrase": "refactoring_actions"}, {"score": 0.0032355864829403413, "phrase": "exception_handling"}, {"score": 0.002837451022172113, "phrase": "measurable_quality_improvement_results"}, {"score": 0.002705121052747945, "phrase": "case_study"}, {"score": 0.00267301171407926, "phrase": "proposed_refactorings"}, {"score": 0.0026412824985309323, "phrase": "real_world_banking_application"}, {"score": 0.002599560451267203, "phrase": "cost-effectiveness_analysis"}, {"score": 0.002468450551616404, "phrase": "software_robustness"}, {"score": 0.002429451930463481, "phrase": "maintenance_cost"}, {"score": 0.0023532890136269986, "phrase": "big_exception"}, {"score": 0.002279508335630797, "phrase": "clearly_defined_intermediate_milestones"}, {"score": 0.0021559025985688255, "phrase": "general_software_development"}, {"score": 0.002130298466581199, "phrase": "legacy_system_maintenance"}], "paper_keywords": ["Refactoring", " Java exception handling", " Object-oriented design"], "paper_abstract": "Exception handling design can improve robustness, which is an important quality attribute of software. However, exception handling design remains one of the less understood and considered parts in software development. In addition, like most software design problems, even if developers are requested to design with exception handling beforehand, it is very difficult to get the right design at the first shot. Therefore, improving exception handling design after software is constructed is necessary. This paper applies refactoring to incrementally improve exception handling design. We first establish four exception handling goals to stage the refactoring actions. Next, we introduce exception handling smells that hinder the achievement of the goals and propose exception handling refactorings to eliminate the smells. We suggest exception handling refactoring is best driven by bug fixing because it provides measurable quality improvement results that explicitly reveal the benefits of refactoring. We conduct a case study with the proposed refactorings on a real world banking application and provide a cost-effectiveness analysis. The result shows that our approach can effectively improve exception handling design, enhance software robustness, and save maintenance cost. Our approach simplifies the process of applying big exception handling refactoring by dividing the process into clearly defined intermediate milestones that are easily exercised and verified. The approach can be applied in general software development and in legacy system maintenance. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Exception handling refactorings: Directed by goals and driven by bug fixing", "paper_id": "WOS:000263426900012"}