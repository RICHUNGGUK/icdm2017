{"auto_keywords": [{"score": 0.04780597585803098, "phrase": "psl"}, {"score": 0.00481495049065317, "phrase": "assertion_language_rewrite_rules"}, {"score": 0.0047306078475683865, "phrase": "automated_theorem_provers"}, {"score": 0.004688989566904871, "phrase": "modern_assertion_languages"}, {"score": 0.004627244470096107, "phrase": "property_specification_language"}, {"score": 0.004526129302830441, "phrase": "systemverilog_assertions"}, {"score": 0.004292337783332826, "phrase": "full_languages"}, {"score": 0.004254558771304349, "phrase": "automated_tools"}, {"score": 0.004070573090297285, "phrase": "small_set"}, {"score": 0.0040347380310668994, "phrase": "base_cases"}, {"score": 0.003894512634265439, "phrase": "efficient_way"}, {"score": 0.0038431888954930083, "phrase": "recent_rewrite_attempts"}, {"score": 0.0034714553759044664, "phrase": "significant_difference"}, {"score": 0.003306559295382181, "phrase": "rewrite_rules"}, {"score": 0.0032342101452939977, "phrase": "major_contribution"}, {"score": 0.003013129637451091, "phrase": "assertion_languages"}, {"score": 0.0028699415886017468, "phrase": "computer-assisted_proofs"}, {"score": 0.002685558057339722, "phrase": "psl_syntax"}, {"score": 0.0026267609106294817, "phrase": "prototype_verification_system"}, {"score": 0.0022496114364599328, "phrase": "known_issues"}, {"score": 0.0022297712188622293, "phrase": "psl_semantics"}, {"score": 0.0021049977753042253, "phrase": "assertion_language_semantics"}], "paper_keywords": ["Assertion languages", " automated theorem provers", " language semantics", " proofs", " rewrite rules"], "paper_abstract": "Modern assertion languages such as property specification language (PSL) and SystemVerilog assertions include many language constructs. By far, the most economical way to process the full languages in automated tools is to rewrite the majority of operators to a small set of base cases, which are then processed in an efficient way. Since recent rewrite attempts in the literature have shown that the rules could be quite involved, sometimes counterintuitive, and that they can make a significant difference in the complexity of interpreting assertions, ensuring that the rewrite rules are correct is a major contribution toward ensuring that the tools are correct, and even that the semantics of the assertion languages are well founded. This paper outlines the methodology for computer-assisted proofs of several publicly known rewrite rules for PSL properties. We first present the ways to express the PSL syntax and semantics in the prototype verification system (PVS) theorem prover, and then prove or disprove the correctness of over 50 rewrite rules published without proofs in various sources in the literature. In doing so, we also demonstrate how to circumvent known issues with PSL semantics regarding the never and eventually! operators, and offer our proposals on assertion language semantics.", "paper_title": "Validating Assertion Language Rewrite Rules and Semantics With Automated Theorem Provers", "paper_id": "WOS:000283145400011"}