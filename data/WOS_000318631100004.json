{"auto_keywords": [{"score": 0.04728331461408164, "phrase": "declarative_abstraction_functions"}, {"score": 0.029709021816766233, "phrase": "synthesized_iterators"}, {"score": 0.00481495049065317, "phrase": "abstraction_functions"}, {"score": 0.004399905285945236, "phrase": "relational_logic_specification_language"}, {"score": 0.004143196873246147, "phrase": "transitive_closure_operator"}, {"score": 0.0039308449157320815, "phrase": "reachability_queries"}, {"score": 0.0038721890530859578, "phrase": "linked_data_structures"}, {"score": 0.003701401653850141, "phrase": "tuple_elimination"}, {"score": 0.0036461569988218267, "phrase": "iterator_flattening"}, {"score": 0.0035648266669315943, "phrase": "traversal_state_reduction"}, {"score": 0.0033315236647127734, "phrase": "generated_iterators"}, {"score": 0.0032571885279065126, "phrase": "case_study"}, {"score": 0.003043957650600757, "phrase": "widely_used_jdk_collections_classes"}, {"score": 0.0026986685585382347, "phrase": "hand-written_originals"}, {"score": 0.0026186324161493225, "phrase": "user_study"}, {"score": 0.002465593351432208, "phrase": "hand-written_ones"}, {"score": 0.0022022878843247257, "phrase": "qualitative_preference"}, {"score": 0.0021049977753042253, "phrase": "free-form_comments"}], "paper_keywords": ["Languages", " iterator", " Java", " Alloy", " abstraction functions", " synthesis"], "paper_abstract": "A technique for synthesizing iterators from declarative abstraction functions written in a relational logic specification language is described. The logic includes a transitive closure operator that makes it convenient for expressing reachability queries on linked data structures. Some optimizations, including tuple elimination, iterator flattening, and traversal state reduction, are used to improve performance of the generated iterators. A case study demonstrates that most of the iterators in the widely used JDK Collections classes can be replaced with code synthesized from declarative abstraction functions. These synthesized iterators perform competitively with the hand-written originals. In a user study the synthesized iterators always passed more test cases than the hand-written ones, were almost always as efficient, usually took less programmer effort, and were the qualitative preference of all participants who provided free-form comments.", "paper_title": "Synthesizing Iterators from Abstraction Functions", "paper_id": "WOS:000318631100004"}