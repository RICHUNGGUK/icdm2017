{"auto_keywords": [{"score": 0.0414408652573372, "phrase": "equivalent_mutants"}, {"score": 0.02322730111336099, "phrase": "aspectj_programs"}, {"score": 0.010484970741791335, "phrase": "mutation_analysis"}, {"score": 0.008282246711100717, "phrase": "available_mutation_tools"}, {"score": 0.008207381299295347, "phrase": "generated_mutants"}, {"score": 0.006499686947241159, "phrase": "fault_types"}, {"score": 0.004670896353428476, "phrase": "research_studies"}, {"score": 0.004586531354697466, "phrase": "test_suites"}, {"score": 0.004558748120167778, "phrase": "testing_techniques"}, {"score": 0.00453113241842654, "phrase": "faulty_versions"}, {"score": 0.004276949941406725, "phrase": "mutation_score"}, {"score": 0.004000322474812552, "phrase": "manual_identification"}, {"score": 0.003775803846431323, "phrase": "benchmark_aspectj_programs"}, {"score": 0.0035965032173588753, "phrase": "fault_models"}, {"score": 0.0034049123167891955, "phrase": "aspectj_fault_types"}, {"score": 0.0032431667821391044, "phrase": "simple_analysis"}, {"score": 0.0032137033371524852, "phrase": "subject_programs"}, {"score": 0.003089080923888397, "phrase": "existing_aspectj_fault_models"}, {"score": 0.003051713660488494, "phrase": "fault_model"}, {"score": 0.0029965060407413898, "phrase": "existing_fault_models"}, {"score": 0.002828166765606611, "phrase": "incorrect_data-flow_interactions"}, {"score": 0.0028024635979202505, "phrase": "aspectj"}, {"score": 0.0027433895507237584, "phrase": "ajmutator"}, {"score": 0.0027019561451518746, "phrase": "mujava"}, {"score": 0.0025813632575129933, "phrase": "mutation_operator"}, {"score": 0.0025423706961391034, "phrase": "average_number"}, {"score": 0.0024736587129641652, "phrase": "block_coverage_criterion"}, {"score": 0.002436289099444074, "phrase": "high_percentage"}, {"score": 0.0023776656246300063, "phrase": "mutation_tools"}, {"score": 0.0021767087933168717, "phrase": "higher_order_mutation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["AspectJ", " Aspect-oriented programming", " Mutation testing", " Fault models", " Test generation", " High order mutation"], "paper_abstract": "Context: Mutation analysis has been widely used in research studies to evaluate the effectiveness of test suites and testing techniques. Faulty versions (i.e., mutants) of a program are generated such that each mutant contains one seeded fault. The mutation score provides a measure of effectiveness. Objective: We study three problems with the use of mutation analysis for testing AspectJ programs: The manual identification and removal of equivalent mutants is difficult and time consuming. We calculate the percentage of equivalent mutants generated for benchmark AspectJ programs using available mutation tools. The generated mutants need to cover the various fault types described in the literature on fault models for AspectJ programs. We measure the distribution of the mutants generated using available mutation tools with respect to the AspectJ fault types. We measure the difficulty of killing the generated mutants. We propose the use of simple analysis of the subject programs to prevent the generation of some equivalent mutants. Method: We revised existing AspectJ fault models and presented a fault model that removes the problems in existing fault models, such as overlapping between fault types and missing fault types. We also defined three new fault types that occur due to incorrect data-flow interactions occurring in AspectJ programs. We used three mutation tools: AjMutator, Proteum/AJ, and MuJava on three AspectJ programs. To measure the difficulty of killing the mutants created using a mutation operator, we compared the average number of the mutants killed by 10 test suites that satisfy block coverage criterion. Results: A high percentage of the mutants are equivalent. The mutation tools do not cover all the fault types. Only 4 out of 27 operators generated mutants that were easy to kill. Conclusions: Our analysis approach removed about 80% of the equivalent mutants. Higher order mutation is needed to cover all the fault types. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "On generating mutants for AspectJ programs", "paper_id": "WOS:000305599200008"}