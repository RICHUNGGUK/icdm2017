{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "context"}, {"score": 0.04448035697519285, "phrase": "fault_handlers"}, {"score": 0.04325337408048726, "phrase": "design_time"}, {"score": 0.004728122501822142, "phrase": "business_process_execution_language"}, {"score": 0.0045591142048535165, "phrase": "business_process"}, {"score": 0.004476878957065829, "phrase": "fault_handling"}, {"score": 0.0040873354289955605, "phrase": "great_deal"}, {"score": 0.0035589270056254605, "phrase": "novel_context-aware_architecture"}, {"score": 0.0034946693480479712, "phrase": "executable_business_process"}, {"score": 0.0034440966820590024, "phrase": "dynamic_fault_handling"}, {"score": 0.003419084516677794, "phrase": "business_process_execution"}, {"score": 0.003320833167729157, "phrase": "existing_fault_handling_disadvantages"}, {"score": 0.0032967146878796027, "phrase": "ws-bpel."}, {"score": 0.003213660268958121, "phrase": "existing_statically_defined_fault"}, {"score": 0.0030873424635143045, "phrase": "business_process_run-time"}, {"score": 0.002987682397171167, "phrase": "system_performance"}, {"score": 0.00289123004877327, "phrase": "well_known_workflow_exception_handling_patterns"}, {"score": 0.0027674397462322435, "phrase": "observer_component"}, {"score": 0.002747328139245956, "phrase": "exception_handler_bus"}, {"score": 0.002648935542912504, "phrase": "system_performance_analysis"}, {"score": 0.0026201089205321704, "phrase": "significantly_decreased_repair_time"}, {"score": 0.0025633909553815556, "phrase": "aware_activities"}, {"score": 0.00250789768689397, "phrase": "designed_artifact"}, {"score": 0.0024625698287060586, "phrase": "supported_workflow_exception_handling_patterns"}, {"score": 0.0023570895666021664, "phrase": "static_fault_handling"}, {"score": 0.002306052064028865, "phrase": "dynamic_fault_resolution"}, {"score": 0.002289285767792039, "phrase": "semantically_similar_faults"}, {"score": 0.002272641094287882, "phrase": "continuous_enhancement"}, {"score": 0.002183230464873613, "phrase": "broader_support"}, {"score": 0.002167355210897559, "phrase": "workflow_exception"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["BPEL fault handling", " Semantic Web", " Business process exception handling", " SOA", " Workflow exception handling patterns"], "paper_abstract": "Context: Fault handling represents a very important aspect of business process functioning. However, fault handling has thus far been solved statically, requiring the definition of fault handlers and handling logic to be defined at design time, which requires a great deal of effort, is error-prone and relatively difficult to maintain and extend. It is sometimes even impossible to define all fault handlers at design time. Objective: To address this issue, we describe a novel context-aware architecture for fault handling in executable business process, which enables dynamic fault handling during business process execution. Method: We performed analysis of existing fault handling disadvantages of WS-BPEL. We designed the artifact which complements existing statically defined fault handling in such a way that faults can be defined dynamically during business process run-time. We evaluated the artifact with analysis of system performance and performed a comparison against a set of well known workflow exception handling patterns. Results: We designed an artifact, that comprises an Observer component, Exception Handler Bus, Exception Knowledge Base and Solution Repository. A system performance analysis shows a significantly decreased repair time with the use of context aware activities. We proved that the designed artifact extends the range of supported workflow exception handling patterns. Conclusion: The artifact presented in this research considerably improves static fault handling, as it enables the dynamic fault resolution of semantically similar faults with continuous enhancement of fault handling in run-time. It also results in broader support of workflow exception handling patterns. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Context aware exception handling in business process execution language", "paper_id": "WOS:000323298000006"}