{"auto_keywords": [{"score": 0.03877809582229051, "phrase": "proposed_method"}, {"score": 0.00481495049065317, "phrase": "pixel_neighborhood_traversal"}, {"score": 0.004621671570727774, "phrase": "pixel_neighborhood"}, {"score": 0.004527947981009528, "phrase": "common_operation"}, {"score": 0.004466519142879166, "phrase": "image_processing"}, {"score": 0.003976775340098895, "phrase": "new_neighborhood_traversal_method"}, {"score": 0.003613899384402803, "phrase": "pixel_neighbor_access"}, {"score": 0.003516417950483685, "phrase": "boundary_checks"}, {"score": 0.0034450303951025704, "phrase": "image_extension"}, {"score": 0.00332924643541238, "phrase": "significant_improvements"}, {"score": 0.003284026247389735, "phrase": "computational_efficiency"}, {"score": 0.0030460403366412126, "phrase": "image_domain"}, {"score": 0.002963830787280652, "phrase": "valid_neighbor_pixel_offsets"}, {"score": 0.0027116246112603875, "phrase": "generic_programming"}, {"score": 0.002602555367635598, "phrase": "arbitrary_dimensionality"}, {"score": 0.002515014676664348, "phrase": "implementation_details"}, {"score": 0.0023167153974120083, "phrase": "additional_boundary_conditions"}, {"score": 0.0021340178074057245, "phrase": "neighborhood_traversal_implementations"}], "paper_keywords": ["Neighborhood traversal", " Boundary condition", " Image processing", " Image filtering", " Image traversal", " Code optimization", " Generic programming", " Image processing library"], "paper_abstract": "The processing of a pixel neighborhood is a common operation in image processing. Therefore, a flexible, computationally efficient and easy-to-use strategy for neighborhood traversal is required. In this paper, a new neighborhood traversal method and its implementation in C++ are presented. In the proposed method, the pixel neighbor access is organized without boundary checks and without image extension, which yields to significant improvements of computational efficiency. The method is based on a partition of the image domain, for which valid neighbor pixel offsets can be precomputed for each subset. The proposed C++ implementation is based on generic programming and can handle images of arbitrary dimensionality. It hides all implementation details from the user and can be extended in order to support additional boundary conditions. The evaluation demonstrates that the proposed method is considerably faster than neighborhood traversal implementations from other libraries. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Efficient method of pixel neighborhood traversal", "paper_id": "WOS:000314145400004"}