{"auto_keywords": [{"score": 0.04129723930487636, "phrase": "gate_sizing"}, {"score": 0.015719716506582538, "phrase": "geometric_programming"}, {"score": 0.01444616004919378, "phrase": "minimized_delay"}, {"score": 0.009664932881878478, "phrase": "transistor_sizing"}, {"score": 0.00786784711227924, "phrase": "minimum_delay"}, {"score": 0.006914983752271393, "phrase": "edg_metric"}, {"score": 0.004775335634705251, "phrase": "two-step_transistor"}, {"score": 0.004594713028452399, "phrase": "first_step"}, {"score": 0.0045694710501318235, "phrase": "elmore_delay"}, {"score": 0.004372442291178139, "phrase": "previous_step"}, {"score": 0.004126623209579942, "phrase": "area_reduction"}, {"score": 0.003959511669449491, "phrase": "small_delay_penalty"}, {"score": 0.003726533059542558, "phrase": "solution_space"}, {"score": 0.0035657203308982065, "phrase": "execution_time"}, {"score": 0.0032826043188559613, "phrase": "typical_standard_cell_library"}, {"score": 0.00319330258693017, "phrase": "delay_minimization"}, {"score": 0.003038618585571397, "phrase": "power_values"}, {"score": 0.0029887355917821304, "phrase": "standard-cells_library"}, {"score": 0.0025678829712650437, "phrase": "optimizing_area"}, {"score": 0.002532689001785861, "phrase": "delay_constraint"}], "paper_keywords": ["Gate sizing", " Transistor sizing", " Geometric programming", " Elmore delay model", " Delay minimization", " Area/power minimization", " Microelectronics"], "paper_abstract": "A two-step transistor sizing optimization method based on geometric programming for delay/area minimization is presented. In the first step, Elmore delay is minimized using only minimum and maximum transistor size constraints. In the second step, the minimized delay found in the previous step is used as a constraint for area minimization. In this way, our method can target simultaneously both delay and area reduction. Moreover, by relaxing the minimized delay, one may further reduce area with small delay penalty. Gate sizing may be accomplished through transistor sizing tying each transistor inside a cell to a same scale factor. This reduces the solution space, but also improves runtime as less variables are necessary. To analyze this tradeoff between execution time and solution quality a comparison between gate sizing and transistor sizing is presented. In order to qualify our approach, the ISCAS'85 benchmark circuits are mapped to a 45 nm technology using a typical standard cell library. Gate sizing and transistor sizing are performed considering delay minimization. Gate sizing is able to reduce delay in 21 %, on average, for the same area and power values of the sizing provided by standard-cells library. Then, the transistor sizing is executed and delay can be reduced in 40.4 % and power consumption in 2.9 %, on average, compared to gate sizing. However, the transistor sizing takes about 23 times longer to be computed, on average, using a number of variables twice higher than gate sizing. Gate sizing optimizing area is executed considering a delay constraint. Three delay constraints are considered, the minimum delay given by delay optimization and delay 1 and 5 % higher than minimum delay. An energy/delay gain (EDG) metric is used to quantify the most efficient tradeoff. Considering the minimum delay, area (power) is reduced in 28.2 %, on average. Relaxing delay by just 1 %, area (power) is reduced in 41.7 % and the EDG metric is 41.7. Area can be reduced in 51 %, on average, relaxing delay by 5 % and EDG metric is 10.2.", "paper_title": "Gate sizing using geometric programming", "paper_id": "WOS:000310639400019"}