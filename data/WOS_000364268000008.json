{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "power_consumption"}, {"score": 0.004712065638657606, "phrase": "regular_expression"}, {"score": 0.004636340567075841, "phrase": "ternary_content_addressable_memory"}, {"score": 0.004586533398801803, "phrase": "tcam"}, {"score": 0.004488505301335364, "phrase": "popular_device"}, {"score": 0.004440277230269978, "phrase": "fast_regular_expression"}, {"score": 0.004392565726147121, "phrase": "regex"}, {"score": 0.004252469672259375, "phrase": "security_applications"}, {"score": 0.0041840994704406866, "phrase": "rapid_growth"}, {"score": 0.004139129193710596, "phrase": "regexes"}, {"score": 0.004094639048362357, "phrase": "large_tcam_memory_consumption"}, {"score": 0.00385832528624328, "phrase": "transition_table"}, {"score": 0.003775803846431323, "phrase": "tcam_memory_consumption"}, {"score": 0.0035386420095120706, "phrase": "transition_entries"}, {"score": 0.0034442607586033657, "phrase": "compression_scheme"}, {"score": 0.003334309053314909, "phrase": "compression_ratio"}, {"score": 0.0031417377608722, "phrase": "deterministic_finite_automaton"}, {"score": 0.0029763124376934813, "phrase": "wildcard_function"}, {"score": 0.002928399649340438, "phrase": "priority_matching_mechanism"}, {"score": 0.0028195727965553367, "phrase": "minimum_differentiation"}, {"score": 0.0027443174539994925, "phrase": "source_states"}, {"score": 0.0027001292153471202, "phrase": "complete_implementation"}, {"score": 0.002656650588033728, "phrase": "identifier_assignment"}, {"score": 0.0026280534600940137, "phrase": "transition_table_compression"}, {"score": 0.0025717770066591076, "phrase": "experimental_results"}, {"score": 0.0025440911575156755, "phrase": "real-world_regex_sets"}, {"score": 0.002345707314211983, "phrase": "memory_space"}, {"score": 0.0021745003291048356, "phrase": "prior_work"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Regular expression matching", " Ternary content addressable memory", " Power consumption", " Compressibility identification", " Source state differentiation"], "paper_abstract": "Ternary content addressable memory (TCAM) is a popular device for fast regular expression (Regex) matching in networking and security applications. The rapid growth of Regexes necessitates large TCAM memory consumption, which in turn impacts power consumption. Compressing the transition table can cut down TCAM memory consumption, thereby reducing its power consumption. This work identifies the compressibility of transition entries and then proposes a compression scheme. In our scheme, the compression ratio is improved by skillfully assigning identifiers to states in a deterministic finite automaton (DFA). Furthermore, our scheme utilizes the wildcard function and the priority matching mechanism provided in TCAM to exploit the minimum differentiation among a set of source states. A complete implementation of the identifier assignment and transition table compression is presented. Experimental results on real-world Regex sets show that our scheme is significantly more effective, reducing power consumption by 87.4% and memory space by 93.2%, and improving throughput up to 114.7% on average compared to prior work. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "A compression approach to reducing power consumption of TCAMs in regular expression matching", "paper_id": "WOS:000364268000008"}