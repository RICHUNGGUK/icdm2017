{"auto_keywords": [{"score": 0.05007457961838124, "phrase": "f-mpj"}, {"score": 0.04934325842114908, "phrase": "java"}, {"score": 0.004596295252559861, "phrase": "parallel_systems"}, {"score": 0.004123781267600542, "phrase": "mpj"}, {"score": 0.0040186038781533946, "phrase": "parallel_computing"}, {"score": 0.003956784357357341, "phrase": "increasing_interest"}, {"score": 0.0038558497470953306, "phrase": "programming_language"}, {"score": 0.0037965243835456214, "phrase": "multi-core_era"}, {"score": 0.0036996627006622975, "phrase": "hybrid_architectures"}, {"score": 0.0035681790580031998, "phrase": "memory_spaces"}, {"score": 0.0034771228725942846, "phrase": "current_java_communication_middleware"}, {"score": 0.003441352119167824, "phrase": "efficient_communication_support"}, {"score": 0.003234299589505403, "phrase": "efficient_non-blocking_communication"}, {"score": 0.0029620573986902416, "phrase": "shared_memory_systems"}, {"score": 0.002931569771634119, "phrase": "high-performance_networks"}, {"score": 0.0028127170024307823, "phrase": "jfs"}, {"score": 0.0026161698049580804, "phrase": "communication_buffers"}, {"score": 0.0025230952890994236, "phrase": "mpj_collective_primitives"}, {"score": 0.0023958326775913165, "phrase": "current_mpj_implementations"}, {"score": 0.002358917661465133, "phrase": "performance_evaluation"}, {"score": 0.0023225701080913388, "phrase": "infiniband_multi-core_cluster"}, {"score": 0.0022749744354271816, "phrase": "f-mpj_communication_primitives"}, {"score": 0.002251542790734307, "phrase": "representative_mpj_libraries"}, {"score": 0.0021049977753042253, "phrase": "communication-intensive_mpj_codes"}], "paper_keywords": ["Message-Passing in Java (MPJ)", " Scalable parallel systems", " Communication middleware", " Scalable collective communication", " High-Performance Computing", " Performance evaluation"], "paper_abstract": "This paper presents F-MPJ (Fast MPJ), a scalable and efficient Message-Passing in Java (MPJ) communication middleware for parallel computing. The increasing interest in Java as the programming language of the multi-core era demands scalable performance on hybrid architectures (with both shared and distributed memory spaces). However, current Java communication middleware lacks efficient communication support. F-MPJ boosts this situation by: (1) providing efficient non-blocking communication, which allows communication overlapping and thus scalable performance; (2) taking advantage of shared memory systems and high-performance networks through the use of our high-performance Java sockets implementation (named JFS, Java Fast Sockets); (3) avoiding the use of communication buffers; and (4) optimizing MPJ collective primitives. Thus, F-MPJ significantly improves the scalability of current MPJ implementations. A performance evaluation on an InfiniBand multi-core cluster has shown that F-MPJ communication primitives outperform representative MPJ libraries up to 60 times. Furthermore, the use of F-MPJ in communication-intensive MPJ codes has increased their performance up to seven times.", "paper_title": "F-MPJ: scalable Java message-passing communications on parallel systems", "paper_id": "WOS:000301189100006"}