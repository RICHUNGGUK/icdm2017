{"auto_keywords": [{"score": 0.03345662014359318, "phrase": "objective_function"}, {"score": 0.010530031011110257, "phrase": "mempsode"}, {"score": 0.010390317893391125, "phrase": "particle_swarm_optimization"}, {"score": 0.01036721136986425, "phrase": "differential_evolution"}, {"score": 0.010241031473846227, "phrase": "resulting_hybrid_algorithms"}, {"score": 0.01017284790537364, "phrase": "memetic_algorithms"}, {"score": 0.009090288207015643, "phrase": "distributed_program"}, {"score": 0.009059942039321065, "phrase": "test_data"}, {"score": 0.007845836655933717, "phrase": "objective_functions"}, {"score": 0.00481495049065317, "phrase": "population-based_algorithms"}, {"score": 0.004687305496643216, "phrase": "well_established_efficient_local_search_procedures"}, {"score": 0.004661139719342692, "phrase": "merlin_optimization_environment"}, {"score": 0.004593787100061613, "phrase": "space_exploration_advantage"}, {"score": 0.004568140971147867, "phrase": "efficiency_asset"}, {"score": 0.004552821755371186, "phrase": "local_search"}, {"score": 0.004507170263992374, "phrase": "highly_efficient_behavior"}, {"score": 0.004492054590200548, "phrase": "diverse_optimization_problems"}, {"score": 0.004476989381785193, "phrase": "proposed_software"}, {"score": 0.004437060944310204, "phrase": "complete_control"}, {"score": 0.004412285905508977, "phrase": "algorithmic_virtues"}, {"score": 0.004382737590042593, "phrase": "comprehensive_examples"}, {"score": 0.004368037394395782, "phrase": "large_set"}, {"score": 0.004358264546516292, "phrase": "widely_used_test_functions"}, {"score": 0.004343646078095433, "phrase": "tough_atomic_cluster_and_protein_conformation_problems"}, {"score": 0.004325038657695353, "phrase": "program"}, {"score": 0.004209539728590977, "phrase": "cpc_program_library"}, {"score": 0.004200120000206678, "phrase": "queen's_university"}, {"score": 0.004190721469338089, "phrase": "belfast"}, {"score": 0.00418134346679498, "phrase": "n._ireland"}, {"score": 0.004162650522528435, "phrase": "standard_cpc"}, {"score": 0.00391829297421861, "phrase": "linux_operating_system"}, {"score": 0.003905144467926908, "phrase": "gnu_compilers"}, {"score": 0.0038659643635195876, "phrase": "solaris"}, {"score": 0.003852988484392787, "phrase": "cygwin_environment"}, {"score": 0.0037718236953187467, "phrase": "maximum_population_size"}, {"score": 0.00375916483698684, "phrase": "required_memory"}, {"score": 0.0036145689275146058, "phrase": "valuable_mathematical_tool"}, {"score": 0.0035903435194211985, "phrase": "scientific_and_engineering_problems"}, {"score": 0.0035702793079311896, "phrase": "underlying_problems"}, {"score": 0.003518633699725573, "phrase": "desired_solutions"}, {"score": 0.003506821597310095, "phrase": "original_problem"}, {"score": 0.0033832583769880576, "phrase": "whole_search_space"}, {"score": 0.0033643475289123754, "phrase": "significant_number"}, {"score": 0.003356812719851371, "phrase": "efficient_algorithms"}, {"score": 0.0033455420288888674, "phrase": "optimization_problems"}, {"score": 0.003267696231611835, "phrase": "standard_local_optimization_algorithms"}, {"score": 0.003238517900104576, "phrase": "local_minimizers"}, {"score": 0.003177373385049754, "phrase": "local_information"}, {"score": 0.0031560688487668387, "phrase": "first-_and_second-order_derivatives"}, {"score": 0.003131393466870228, "phrase": "global_optimization_algorithms"}, {"score": 0.0031138860284071514, "phrase": "better_exploration"}, {"score": 0.0030895394261534776, "phrase": "questionable_convergence_properties"}, {"score": 0.003065382597813524, "phrase": "stochastic_operations"}, {"score": 0.0030448266748214384, "phrase": "optimization_problem"}, {"score": 0.0030278017562213265, "phrase": "crucial_role"}, {"score": 0.0029906802644251054, "phrase": "nice_mathematical_properties"}, {"score": 0.0029507014219771637, "phrase": "applicability_issues"}, {"score": 0.00290473242917264, "phrase": "high_accuracy"}, {"score": 0.002888488567436329, "phrase": "stochastic_algorithms"}, {"score": 0.0028339339569247728, "phrase": "single_optimization_algorithm"}, {"score": 0.0028180848958349433, "phrase": "evolutionary_algorithms_and_swarm_intelligence_approaches"}, {"score": 0.0028023242231187363, "phrase": "effective_global_optimization_algorithms"}, {"score": 0.0027929100418926725, "phrase": "minor_assumptions"}, {"score": 0.002740155653147109, "phrase": "salient_position"}, {"score": 0.002715675070155259, "phrase": "numerous_studies"}, {"score": 0.0026823700218343506, "phrase": "efficient_local_optimization_schemes"}, {"score": 0.0026584043201634496, "phrase": "original_ones"}, {"score": 0.002605259425201507, "phrase": "rapidly_growing_interest"}, {"score": 0.0025819958752938675, "phrase": "pso"}, {"score": 0.0025762003872851938, "phrase": "de"}, {"score": 0.0025503112711036994, "phrase": "memetic_pso"}, {"score": 0.0025360443643744407, "phrase": "unified_framework"}, {"score": 0.0025218570675371267, "phrase": "local_search_procedures"}, {"score": 0.002513382718220154, "phrase": "established_merlin_optimization_environment"}, {"score": 0.002496519140924747, "phrase": "implemented_approaches"}, {"score": 0.0024769875635473142, "phrase": "hard_optimization_tasks"}, {"score": 0.0024686636187865245, "phrase": "atomic_cluster_and_protein_conformation_problems"}, {"score": 0.0024548523398012583, "phrase": "current_version"}, {"score": 0.002441118140830714, "phrase": "double_precision_arithmetic"}, {"score": 0.0024030688146716938, "phrase": "integer_or_mixed-integer_problems"}, {"score": 0.002370926370153685, "phrase": "general_constraints"}, {"score": 0.002357660603311651, "phrase": "user-defined_penalty_or_barrier_functions"}, {"score": 0.0023365892290481472, "phrase": "source_code"}, {"score": 0.0022796067313494857, "phrase": "comprehensive_user_manual"}, {"score": 0.0022592313766072658, "phrase": "installation_procedure"}, {"score": 0.002251637552201872, "phrase": "detailed_examples"}, {"score": 0.002231511629668887, "phrase": "running_time"}, {"score": 0.002179530979155019, "phrase": "available_computational_budget"}, {"score": 0.0021697677572213086, "phrase": "function_evaluations"}, {"score": 0.002160048175023311, "phrase": "test_run"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Global optimization", " Particle swarm optimization", " Differential evolution", " Memetic algorithms", " Local search", " Merlin optimization environment"], "paper_abstract": "We present MEMPSODE, a global optimization software tool that integrates two prominent population-based stochastic algorithms, namely Particle Swarm Optimization and Differential Evolution, with well established efficient local search procedures made available via the Merlin optimization environment. The resulting hybrid algorithms, also referred to as Memetic Algorithms, combine the space exploration advantage of their global part with the efficiency asset of the local search, and as expected they have displayed a highly efficient behavior in solving diverse optimization problems. The proposed software is carefully parametrized so as to offer complete control to fully exploit the algorithmic virtues. It is accompanied by comprehensive examples and a large set of widely used test functions, including tough atomic cluster and protein conformation problems. Program summary Program title: MEMPSODE (MEMetic Particle Swarm Optimization and Differential Evolution) Catalogue identifier: AELM_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AELM_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC license, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program. including test data, etc.: 14 877 No. of bytes in distributed program, including test data, etc.: 592 244 Distribution format: tar.gz Programming language: ANSI C, ANSI Fortran-77 Computer: Workstations Operating system: Developed under the Linux operating system using the GNU compilers v.4.4.3. It has also been tested under Solaris and the Cygwin environment. RAM: The code uses O (n x N) internal storage, n being the dimension of the problem and N the maximum population size. The required memory is dynamically allocated. Word size: 64 bits Classification: 4.9 Subprograms used: Cat Id Title Reference AAXW_v4_0 MERLIN-3.1.1 CPC 159 (2004) 70 Nature of problem: Optimization is a valuable mathematical tool for solving a plethora of scientific and engineering problems. Usually, the underlying problems are modeled with objective functions whose minimizers (or maximizers) correspond to the desired solutions of the original problem. In many cases, there is a multitude of such minimizers that correspond to solutions either locally, i.e., in their close neighborhood, or globally, i.e., with respect to the whole search space. There is a significant number of efficient algorithms for addressing optimization problems. One can distinguish two main categories, based on their adequacy in performing better global (exploration) or local (exploitation) search. Standard local optimization algorithms have the ability to rapidly converge towards local minimizers but they are also prone to get easily trapped in their vicinity. These algorithms usually exploit local information of the objective function, including first- and second-order derivatives. On the other hand, global optimization algorithms are designed to perform better exploration, although at the cost of questionable convergence properties. Typically, these approaches integrate stochastic operations. The form of the optimization problem at hand plays a crucial role in the selection of the most appropriate algorithm. Objective functions that lack nice mathematical properties (such as differentiability, continuity etc.) may raise applicability issues for algorithms that require derivatives. On the other hand, applications that require high accuracy may be laborious for stochastic algorithms. The existence of a multitude of local and/or global minimizers can render these problems even harder for any single optimization algorithm. Solution method: Evolutionary Algorithms and Swarm Intelligence approaches have been established as effective global optimization algorithms that make minor assumptions about the objective function. Particle Swarm Optimization (PSO) and Differential Evolution (DE) possess a salient position among the most successful algorithms of these categories. Numerous studies indicate that their performance can be radically improved when combined with efficient local optimization schemes. The resulting hybrid algorithms offer more balanced search intensification/diversification than the original ones, thereby increasing both their efficiency and effectiveness. Such hybrid schemes are called Memetic Algorithms, and they have gained a rapidly growing interest over the past few years. We present MEMPSODE (MEMetic, PSO and DE), a global optimization software that implements memetic PSO and DE within a unified framework. The software utilizes local search procedures from the established Merlin optimization environment. The performance of the implemented approaches is illustrated on several examples, including hard optimization tasks such as atomic cluster and protein conformation problems. Restrictions: The current version of the software uses double precision arithmetic. However, it can be easily adapted by the user to handle integer or mixed-integer problems. Unusual features: The software takes into account only bound constraints. General constraints may be tackled by user-defined penalty or barrier functions that can be easily incorporated in the source code of the objective function. Additional comments: The use of the Merlin Optimization Environment 3.1.1 (see subprograms above) is optional. A comprehensive user manual is provided that covers in detail the installation procedure and provides detailed examples of operation. Running time: The running time depends solely on the complexity of the objective function (and its derivatives, if used) as well as on the available computational budget (number of function evaluations). The test run provided (Rastrigin function n = 10), requires 2.5 x 10(6) function evaluations (2.8 seconds on an i7-920 CPU). (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "MEMPSODE: A global optimization software based on hybridization of population-based algorithms and local searches", "paper_id": "WOS:000301615900008"}