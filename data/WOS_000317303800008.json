{"auto_keywords": [{"score": 0.0391585046893885, "phrase": "confinement_requirements"}, {"score": 0.00481495049065317, "phrase": "safety-critical_objects"}, {"score": 0.004345909305473054, "phrase": "last_twenty_years"}, {"score": 0.004050116768809519, "phrase": "novel_framework"}, {"score": 0.003922378980031565, "phrase": "object_confinement"}, {"score": 0.003608732492631878, "phrase": "possible_future_usage"}, {"score": 0.0035173498506324476, "phrase": "ownership_types"}, {"score": 0.003034916887102753, "phrase": "optional_conf_clause"}, {"score": 0.002958021635132416, "phrase": "class_declarations"}, {"score": 0.0028830690329478465, "phrase": "confined_attribute-paths"}, {"score": 0.0028281000453392272, "phrase": "\"same_type_and_confinement\"_notation"}, {"score": 0.0025685423439452907, "phrase": "return_values"}, {"score": 0.0024088451312725924, "phrase": "java-like_language"}, {"score": 0.0023327506323251096, "phrase": "alias_analysis"}, {"score": 0.002259054486157494, "phrase": "sound_type-system"}, {"score": 0.002173679145840769, "phrase": "oo_programs"}, {"score": 0.0021049977753042253, "phrase": "confinement_specifications"}], "paper_keywords": ["object-oriented", " aliasing", " confinement", " ownership", " type system", " well-confined program"], "paper_abstract": "Confinement is used to prohibit safety-critical objects from unintended access. Approaches for specifying and verifying confinement have been proposed in the last twenty years but their application has been help back. We develop a novel framework for specifying and verifying object confinement in object-oriented (OO) programs. Instead of expressing the confinement requirements within a class for possible future usage, as with ownership types, we specify confinement requirements of the class in its usage class which actually intends to confine the parts, i.e., internal representations. Syntactically, an optional conf clause is introduced in class declarations for annotating the confined attribute-paths. A \"same type and confinement\" notation is introduced for expressing type and confinement dependence among variables, parameters, and return values of methods. Based on the extension to a Java-like language and existing techniques of alias analysis, we define a sound type-system for checking the well-confinedness of OO programs with respect to the confinement specifications.", "paper_title": "Confinement framework for encapsulating objects", "paper_id": "WOS:000317303800008"}