{"auto_keywords": [{"score": 0.043935538733737865, "phrase": "component_security"}, {"score": 0.041140195621472926, "phrase": "testing_approach"}, {"score": 0.024769704756643092, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "component_security_testing_approach"}, {"score": 0.0047851345246117455, "phrase": "based_on_extended_chemical_abstract_machine._unreliable_component_security"}, {"score": 0.004638788604042707, "phrase": "component_technology"}, {"score": 0.004581505405526037, "phrase": "component_security_testing"}, {"score": 0.004441359373498799, "phrase": "comprehensive_focus"}, {"score": 0.0037087324991876727, "phrase": "chemical_abstract_machine"}, {"score": 0.0035728978842974246, "phrase": "explicit_and_implicit_component_security_vulnerabilities"}, {"score": 0.0034634973175137486, "phrase": "extended_chemical_abstract_machine_model"}, {"score": 0.0032953582866530966, "phrase": "state_transfer_tree"}, {"score": 0.0032546105164772995, "phrase": "testing_sequence"}, {"score": 0.003135356056324338, "phrase": "proposed_model"}, {"score": 0.0029830992938695007, "phrase": "explicit_security_exceptions"}, {"score": 0.0028382152567141784, "phrase": "interface_fault_injection"}, {"score": 0.0027684263985790526, "phrase": "state_mutation_algorithms"}, {"score": 0.0027172101552870973, "phrase": "implicit_security_exceptions"}, {"score": 0.002633941112839883, "phrase": "vulnerability_testing_reports"}, {"score": 0.0025373711401047772, "phrase": "test_results"}, {"score": 0.002429161048032688, "phrase": "integration_testing_platform"}, {"score": 0.0021049977753042253, "phrase": "explicit_and_implicit_security_exceptions"}], "paper_keywords": ["Component security testing", " testing sequence", " chemical abstract machine", " condition mutation", " state mutation"], "paper_abstract": "Unreliable component security hinders the development of component technology. Component security testing is rarely researched with comprehensive focus; several approaches or technologies for detecting vulnerabilities in component security have been proposed, but most are infeasible. A testing approach for component security, which is based on the chemical abstract machine, is proposed for detecting explicit and implicit component security vulnerabilities. We develop an extended chemical abstract machine model, called eCHAM, and generate a state transfer tree and testing sequence for components based on the proposed model. The model can help test the explicit security exceptions of components according to the testing approach of interface fault injection. Condition and state mutation algorithms for identifying implicit security exceptions are also proposed. Vulnerability testing reports are obtained according to the test results. Experiments were conducted in an integration testing platform to verify the applicability of the proposed approach. Results show that the approach is effective and practicable. The proposed approach can detect explicit and implicit security exceptions of components.", "paper_title": "COMPONENT SECURITY TESTING APPROACH BASED ON EXTENDED CHEMICAL ABSTRACT MACHINE", "paper_id": "WOS:000303207500003"}