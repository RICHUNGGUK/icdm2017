{"auto_keywords": [{"score": 0.03510429867928044, "phrase": "equality_proofs"}, {"score": 0.00481495049065317, "phrase": "glasgow_haskell_compiler"}, {"score": 0.004567596860086148, "phrase": "optimizing_compiler"}, {"score": 0.004183137595671171, "phrase": "first-class_equality_proofs"}, {"score": 0.0031565959573536194, "phrase": "deferred_type_errors"}, {"score": 0.002646880721119838, "phrase": "possibly-divergent_terms"}, {"score": 0.0021049977753042253, "phrase": "zero-overhead_cost_model"}], "paper_keywords": ["Design", " Languages", " Type equalities", " Deferred type errors", " System FC"], "paper_abstract": "The Glasgow Haskell Compiler is an optimizing compiler that expresses and manipulates first-class equality proofs in its intermediate language. We describe a simple, elegant technique that exploits these equality proofs to support deferred type errors. The technique requires us to treat equality proofs as possibly-divergent terms; we show how to do so without losing either soundness or the zero-overhead cost model that the programmer expects.", "paper_title": "Equality Proofs and Deferred Type Errors A Compiler Pearl", "paper_id": "WOS:000311296000033"}