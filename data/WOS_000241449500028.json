{"auto_keywords": [{"score": 0.048313706083567, "phrase": "dynamic_optimizations"}, {"score": 0.00481495049065317, "phrase": "dynamic_register_allocation"}, {"score": 0.004383406949799696, "phrase": "program_performance"}, {"score": 0.004261617028111862, "phrase": "major_challenge"}, {"score": 0.003807242767474929, "phrase": "optimization_code"}, {"score": 0.003701401653850141, "phrase": "main_program"}, {"score": 0.0028446460307503343, "phrase": "architecture_feature"}, {"score": 0.0027395968397212053, "phrase": "existing_hardware"}, {"score": 0.002688532127821979, "phrase": "stacked_register_allocation"}, {"score": 0.002613709503583786, "phrase": "itanium_processor"}, {"score": 0.0025409639091476363, "phrase": "hardware_impact"}, {"score": 0.0022696277881969896, "phrase": "dynamic_optimization_systems"}, {"score": 0.0021049977753042253, "phrase": "\"safe\"_manner"}], "paper_keywords": [""], "paper_abstract": "Post-link and dynamic optimizations have become important to achieve program performance. A major challenge in post-link and dynamic optimizations is the acquisition of registers for inserting optimization code in the main program. It is difficult to achieve both correctness and transparency when software-only schemes for acquiring registers are used, as described in [1]. We propose an architecture feature that builds upon existing hardware for stacked register allocation on the Itanium processor. The hardware impact of this feature is minimal, while simultaneously allowing post-link and dynamic optimization systems to obtain registers for optimization in a \"safe\" manner, thus preserving the transparency and improving the performance of these systems.", "paper_title": "Issues and support for dynamic register allocation", "paper_id": "WOS:000241449500028"}