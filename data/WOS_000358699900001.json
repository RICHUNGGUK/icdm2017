{"auto_keywords": [{"score": 0.04947215341454547, "phrase": "software_maintenance_tasks"}, {"score": 0.04067031503099451, "phrase": "relevant_information"}, {"score": 0.03730963618974806, "phrase": "current_system"}, {"score": 0.0351829193311223, "phrase": "software_repository"}, {"score": 0.013465775470054765, "phrase": "irrelevant_information"}, {"score": 0.012054059034490923, "phrase": "maintenance_task"}, {"score": 0.011715327383684667, "phrase": "maintenance_request"}, {"score": 0.009442733780347806, "phrase": "software_repositories"}, {"score": 0.00481495049065317, "phrase": "topic_models"}, {"score": 0.004784331242964228, "phrase": "effectively_mining_software_repositories"}, {"score": 0.004648925234889467, "phrase": "research_direction"}, {"score": 0.004575354958479747, "phrase": "substantial_success"}, {"score": 0.004403480614319231, "phrase": "bug_repository"}, {"score": 0.004170940184489072, "phrase": "software_maintenance"}, {"score": 0.004027031316965272, "phrase": "decreased_effectiveness"}, {"score": 0.004001402461081236, "phrase": "even_wrong_results"}, {"score": 0.002992143937008144, "phrase": "current_maintenance_task"}, {"score": 0.0029447150254434842, "phrase": "topic_model"}, {"score": 0.0025258696565944, "phrase": "rhino"}, {"score": 0.002509770427841966, "phrase": "koffice"}, {"score": 0.002485813299166851, "phrase": "empirical_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software maintenance", " Mining software historical repositories", " Topic model", " Empirical study"], "paper_abstract": "Context: Mining software repositories has emerged as a research direction over the past decade, achieving substantial success in both research and practice to support various software maintenance tasks. Software repositories include bug repository, communication archives, source control repository, etc. When using these repositories to support software maintenance, inclusion of irrelevant information in each repository can lead to decreased effectiveness or even wrong results. Objective: This article aims at selecting the relevant information from each of the repositories to improve effectiveness of software maintenance tasks. Method: For a maintenance task at hand, maintainers need to implement the maintenance request on the current system. In this article, we propose an approach, MSR4SM, to extract the relevant information from each software repository based on the maintenance request and the current system. That is, if the information in a software repository is relevant to either the maintenance request or the current system, this information should be included to perform the current maintenance task. MSR4SM uses the topic model to extract the topics from these software repositories. Then, relevant information in each software repository is extracted based on the topics. Results: MSR4SM is evaluated for two software maintenance tasks, feature location and change impact analysis, which are based on four subject systems, namely jEdit, ArgoUML, Rhino and KOffice. The empirical results show that the effectiveness of traditional software repositories based maintenance tasks can be greatly improved by MSR4SM. Conclusions: There is a lot of irrelevant information in software repositories. Before we use them to implement a maintenance task at hand, we need to preprocess them. Then, the effectiveness of the software maintenance tasks can be improved. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "MSR4SM: Using topic models to effectively mining software repositories for software maintenance tasks", "paper_id": "WOS:000358699900001"}