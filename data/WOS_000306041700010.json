{"auto_keywords": [{"score": 0.045601370122781676, "phrase": "self-stabilizing_protocols"}, {"score": 0.031351603398995995, "phrase": "complete_networks"}, {"score": 0.030063661952507554, "phrase": "unique_leader"}, {"score": 0.00481495049065317, "phrase": "population_protocol_model"}, {"score": 0.0047587234712024775, "phrase": "self-stabilizing_protocol"}, {"score": 0.004648222388468414, "phrase": "arbitrary_initial_configuration"}, {"score": 0.004331811712726697, "phrase": "excellent_fault-tolerance"}, {"score": 0.004281202319048493, "phrase": "transient_faults"}, {"score": 0.0039122637074546895, "phrase": "severe_requirements"}, {"score": 0.003732526540522333, "phrase": "novel_notion"}, {"score": 0.0036315039559860654, "phrase": "closure_requirement"}, {"score": 0.0035332058983966424, "phrase": "arbitrary_configuration"}, {"score": 0.003397362086358944, "phrase": "relatively_short_time"}, {"score": 0.003241203549050267, "phrase": "long_time"}, {"score": 0.003116551456858777, "phrase": "new_concept"}, {"score": 0.003056029284235528, "phrase": "probabilistic_loosely-stabilizing_leader_election_protocol"}, {"score": 0.0030084992906933617, "phrase": "ppp"}, {"score": 0.0026960524215391217, "phrase": "omega"}, {"score": 0.0025614418906438744, "phrase": "network_size"}, {"score": 0.0024436119167523156, "phrase": "known_upper_bound"}, {"score": 0.0023220573674955776, "phrase": "already-known_impossibility_result"}, {"score": 0.0022948742034852917, "phrase": "self-stabilizing_leader_election_problem"}, {"score": 0.0021551702945512494, "phrase": "exact_network_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Self-stabilization", " Population protocol", " Leader election", " Loose-stabilization"], "paper_abstract": "A self-stabilizing protocol guarantees that starting from any arbitrary initial configuration, a system eventually comes to satisfy its specification and keeps the specification forever. Although self-stabilizing protocols show excellent fault-tolerance against any transient faults (e.g. memory crash), designing self-stabilizing protocols is difficult and, what is worse, might be impossible due to the severe requirements. To circumvent the difficulty and impossibility, we introduce a novel notion of loose-stabilization, that relaxes the closure requirement of self-stabilization; starting from any arbitrary configuration, a system comes to satisfy its specification in a relatively short time, and it keeps the specification not forever but for a long time. To show the effectiveness and feasibility of this new concept, we present a probabilistic loosely-stabilizing leader election protocol in the Probabilistic Population Protocol (PPP) model of complete networks. Starting from any configuration, the protocol elects a unique leader within O(nN log n) expected steps and keeps the unique leader for Omega (Ne-N) expected steps, where n is the network size (not known to the protocol) and N is a known upper bound of n. This result proves that introduction of the loose-stabilization circumvents the already-known impossibility result; the self-stabilizing leader election problem in the PPP model of complete networks cannot be solved without the knowledge of the exact network size. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Loosely-stabilizing leader election in a population protocol model", "paper_id": "WOS:000306041700010"}