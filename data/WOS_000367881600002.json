{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "homogeneous_multi-core_processors"}, {"score": 0.03744933760730154, "phrase": "actual_maximum_clock_frequencies"}, {"score": 0.025361707468513746, "phrase": "proposed_scheme"}, {"score": 0.01414747582647477, "phrase": "within-die_variations"}, {"score": 0.009228823710280524, "phrase": "candidate_schedules"}, {"score": 0.0047135086583390585, "phrase": "manufacturing-caused_heterogeneity"}, {"score": 0.004673530058379246, "phrase": "multi-core_homogeneous_processors"}, {"score": 0.004516962628112147, "phrase": "computation-intensive_embedded_applications"}, {"score": 0.004402973626416765, "phrase": "continuous_down_scaling"}, {"score": 0.0043656173407379895, "phrase": "cmos_technology"}, {"score": 0.004273601449537163, "phrase": "manufacturing_process"}, {"score": 0.004201381218977942, "phrase": "significant_spread"}, {"score": 0.004148014765950199, "phrase": "operating_speeds"}, {"score": 0.003760685138103153, "phrase": "overly_pessimistic_result"}, {"score": 0.0036191240628152205, "phrase": "optimal_performance"}, {"score": 0.003409399407390298, "phrase": "heterogeneity-aware_schedule_refining"}, {"score": 0.0033804443117334535, "phrase": "hasr"}, {"score": 0.0031040383983860836, "phrase": "actual_maximum_frequencies"}, {"score": 0.002924074850256874, "phrase": "representative_chip_operating_points"}, {"score": 0.0028623555849897632, "phrase": "corresponding_optimal_schedules"}, {"score": 0.002362192695471035, "phrase": "experimental_results"}, {"score": 0.002253826965566618, "phrase": "average_value"}, {"score": 0.002187464225869713, "phrase": "baseline_schedule"}, {"score": 0.0021504218042734677, "phrase": "worst_case_timing_analysis"}, {"score": 0.0021049977753042253, "phrase": "conventional_task_scheduling_approach"}], "paper_keywords": ["Schedule refining", " Multi-core processor", " Heterogeneity", " Representative chip operating point"], "paper_abstract": "Multi-core homogeneous processors have been widely used to deal with computation-intensive embedded applications. However, with the continuous down scaling of CMOS technology, within-die variations in the manufacturing process lead to a significant spread in the operating speeds of cores within homogeneous multi-core processors. Task scheduling approaches, which do not consider such heterogeneity caused by within-die variations, can lead to an overly pessimistic result in terms of performance. To realize an optimal performance according to the actual maximum clock frequencies at which cores can run, we present a heterogeneity-aware schedule refining (HASR) scheme by fully exploiting the heterogeneities of homogeneous multi-core processors in embedded domains. We analyze and show how the actual maximum frequencies of cores are used to guide the scheduling. In the scheme, representative chip operating points are selected and the corresponding optimal schedules are generated as candidate schedules. During the booting of each chip, according to the actual maximum clock frequencies of cores, one of the candidate schedules is bound to the chip to maximize the performance. A set of applications are designed to evaluate the proposed scheme. Experimental results show that the proposed scheme can improve the performance by an average value of 22.2%, compared with the baseline schedule based on the worst case timing analysis. Compared with the conventional task scheduling approach based on the actual maximum clock frequencies, the proposed scheme also improves the performance by up to 12%.", "paper_title": "Schedule refinement for homogeneous multi-core processors in the presence of manufacturing-caused heterogeneity", "paper_id": "WOS:000367881600002"}