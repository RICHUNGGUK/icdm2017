{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "natural_language_requirements"}, {"score": 0.04946824888397643, "phrase": "scr_specifications"}, {"score": 0.004712988631183401, "phrase": "formal_models"}, {"score": 0.0045543011700929096, "phrase": "automated_test_generation_strategies"}, {"score": 0.004515467468684217, "phrase": "software_cost_reduction"}, {"score": 0.0041984140090404985, "phrase": "requirements_phase"}, {"score": 0.004127094600862448, "phrase": "test_generation"}, {"score": 0.0037078961288626185, "phrase": "test_case_generation"}, {"score": 0.003629329103736915, "phrase": "scr"}, {"score": 0.003582928547553209, "phrase": "intermediate_and_hidden_formalism"}, {"score": 0.003522027550662857, "phrase": "textual_ambiguity"}, {"score": 0.0034033029171804106, "phrase": "controlled_natural_language"}, {"score": 0.003359816816853762, "phrase": "valid_requirements"}, {"score": 0.003274499008699115, "phrase": "case_frames"}, {"score": 0.0030705342386533083, "phrase": "t-vec_tool"}, {"score": 0.003031287195944274, "phrase": "tests_cases"}, {"score": 0.0027114323601885666, "phrase": "safety_injection"}, {"score": 0.0026767629720554397, "phrase": "nuclear_power_plant"}, {"score": 0.0024148618915672353, "phrase": "mercedes_vehicles"}, {"score": 0.0023035249767734286, "phrase": "random_testing"}, {"score": 0.0021599099979586946, "phrase": "mutant-based_strength_analysis"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Requirements", " Test generation", " Natural language processing", " Software cost reduction", " SCR"], "paper_abstract": "Formal models are increasingly being used as input for automated test generation strategies. Software Cost Reduction (SCR), for example, was designed to detect and correct errors during the requirements phase, also allowing test generation. However, the syntax of SCR and other formalisms are not trivial for non-experts. In this work, we present a strategy for test case generation from natural language requirements that uses SCR as an intermediate and hidden formalism. To minimize textual ambiguity, requirements are written according to a controlled natural language. Syntactically valid requirements are mapped into their semantic representation using case frames, from which SCR specifications are derived. These specifications are then used by the T-VEC tool to generate tests cases. Our strategy was evaluated in four different domains: (i) a vending machine (toy example); (ii) a control system for safety injection in a nuclear power plant (publicly available), (iii) one example provided by our industrial partner Embraer; and (iv) the turn indicator system of Mercedes vehicles (publicly available). As a baseline we considered random testing, and, in general, our strategy outperformed it in terms of performance and mutant-based strength analysis. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "NAT2TEST(SCR): Test case generation from natural language requirements based on SCR specifications", "paper_id": "WOS:000344578800002"}