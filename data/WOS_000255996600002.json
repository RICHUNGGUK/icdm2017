{"auto_keywords": [{"score": 0.04940203756018457, "phrase": "fully_dynamic_transitive_closure"}, {"score": 0.00481495049065317, "phrase": "dynamic_matrices"}, {"score": 0.004483909657713567, "phrase": "general_framework"}, {"score": 0.00388828234270598, "phrase": "best_known_bounds"}, {"score": 0.0036207206487324506, "phrase": "deterministic_algorithm"}, {"score": 0.003569451476205552, "phrase": "general_directed_graphs"}, {"score": 0.0032533888943254144, "phrase": "unit_worst-case_cost"}, {"score": 0.0027610089418453614, "phrase": "fully_dynamic_transitive_closure_algorithms"}, {"score": 0.0026264601495742295, "phrase": "explicitly_the_transitive_closure"}, {"score": 0.002570817338292482, "phrase": "input_graph"}, {"score": 0.0024108455980729284, "phrase": "exactly_one_lookup"}], "paper_keywords": ["dynamic graph algorithms", " transitive closure"], "paper_abstract": "In this paper we introduce a general framework for casting fully dynamic transitive closure into the problem of reevaluating polynomials over matrices. With this technique, we improve the best known bounds for fully dynamic transitive closure. In particular, we devise a deterministic algorithm for general directed graphs that achieves O(n(2)) amortized time for updates, while preserving unit worst-case cost for queries. In case of deletions only, our algorithm performs updates faster in O(n) amortized time. We observe that fully dynamic transitive closure algorithms with O(1) query time maintain explicitly the transitive closure of the input graph, in order to answer each query with exactly one lookup (on its adjacency matrix). Since an update may change as many as Omega(n(2)) entries of this matrix, no better bounds are possible for this class of algorithms.", "paper_title": "Mantaining dynamic matrices for fully dynamic transitive closure", "paper_id": "WOS:000255996600002"}