{"auto_keywords": [{"score": 0.04274518365190482, "phrase": "pigst"}, {"score": 0.015356921034374593, "phrase": "generalized_suffix_tree"}, {"score": 0.004815022356293929, "phrase": "xml"}, {"score": 0.004592905436175987, "phrase": "novel_index_structure"}, {"score": 0.00414616342377235, "phrase": "post_lists"}, {"score": 0.003954837422946628, "phrase": "structural_and_content_queries"}, {"score": 0.0038624981944755813, "phrase": "distinct_paths"}, {"score": 0.003772306776343196, "phrase": "xml_collection"}, {"score": 0.0035699363258657212, "phrase": "construction_algorithm"}, {"score": 0.003405109584265324, "phrase": "path_strings"}, {"score": 0.0031223774204093713, "phrase": "well-known_suffix_tree_construction_algorithm"}, {"score": 0.0029547698888028697, "phrase": "space_complexity"}, {"score": 0.0028857130140890787, "phrase": "query_process"}, {"score": 0.0027741761880779535, "phrase": "direct_containment_queries"}, {"score": 0.0025841336988141235, "phrase": "query_string"}, {"score": 0.0025237171554924128, "phrase": "efficient_processing_method"}, {"score": 0.002464709648714996, "phrase": "indirect_containment_queries"}, {"score": 0.0023881683972170422, "phrase": "inefficient_tree_traversal_operation"}, {"score": 0.0022070310530794097, "phrase": "earlier_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["XML", " information retrieval", " generalized suffix tree (GST)", " path index based on generalized suffix tree (PIGST)", " query processing"], "paper_abstract": "A novel index structure based on the generalized suffix tree (PIGST) is proposed. Combined with post lists, PIGST can answer both structural and content queries. The distinct paths in an XML collection are mapped into strings. The construction algorithm of the PIGST for the path strings is presented based on the modification and improvement of a well-known suffix tree construction algorithm that only requires linear time and space complexity. The query process merely needs m character comparisons for direct containment queries, where m is the length of a query string. An efficient processing method for the indirect containment queries that avoids the inefficient tree traversal operation is also presented. Experiments show that PIGST outperforms earlier approaches. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "An efficient index structure for XML based on generalized suffix tree", "paper_id": "WOS:000242985300004"}