{"auto_keywords": [{"score": 0.032056921787303426, "phrase": "vbp-fast"}, {"score": 0.018274374533357948, "phrase": "ftl"}, {"score": 0.010354063410579265, "phrase": "virtual_blocks"}, {"score": 0.00481495049065317, "phrase": "hybrid_ftl"}, {"score": 0.004736045157669388, "phrase": "internal_ssd_parallelism"}, {"score": 0.00428892403807229, "phrase": "flash_solid_state_disks"}, {"score": 0.0041666157975446564, "phrase": "fully_associative_section_translation"}, {"score": 0.004064548693812535, "phrase": "relatively_high_space_efficiency"}, {"score": 0.0039323225960857956, "phrase": "higher_flexibility"}, {"score": 0.003531474887552889, "phrase": "large_number"}, {"score": 0.003502382624110703, "phrase": "costly_full-merge_operations"}, {"score": 0.0033053159828082095, "phrase": "full-merge_operations"}, {"score": 0.003264547032549398, "phrase": "partial_merge_operations"}, {"score": 0.0031064226956732497, "phrase": "novel_ftl_scheme"}, {"score": 0.0030680994147125364, "phrase": "virtual_block-based"}, {"score": 0.0030554300179552415, "phrase": "parallel_fast"}, {"score": 0.002968192753809507, "phrase": "flash_area"}, {"score": 0.0026875205754965537, "phrase": "plane-level_parallelism"}, {"score": 0.002546708483171714, "phrase": "full_merge"}, {"score": 0.002453558901855027, "phrase": "fast."}, {"score": 0.0023249757987087055, "phrase": "partial_merge"}, {"score": 0.002305799666781492, "phrase": "switch_operations"}, {"score": 0.0021490449563443025, "phrase": "random_workloads"}, {"score": 0.0021049977753042253, "phrase": "sequential_workloads"}], "paper_keywords": ["Design", " Measurement and performance", " NAND flash", " FTL", " parallelism", " SSD"], "paper_abstract": "Compared with either block or page-mapping Flash Translation Layer (FTL), hybrid-mapping FTL for flash Solid State Disks (SSDs), such as Fully Associative Section Translation (FAST), has relatively high space efficiency because of its smaller mapping table than the latter and higher flexibility than the former. As a result, hybrid-mapping FTL has become the most commonly used scheme in SSDs. But the hybrid-mapping FTL incurs a large number of costly full-merge operations. Thus, a critical challenge to hybrid-mapping FTL is how to reduce the cost of full-merge operations and improve partial merge operations and switch operations. In this article, we propose a novel FTL scheme, called Virtual Block-based Parallel FAST (VBP-FAST), that divides flash area into Virtual Blocks (VBlocks) and Physical Blocks (PBlocks) where VBlocks are used to fully exploit channel-level, die-level, and plane-level parallelism of flash. Leveraging these three levels of parallelism, the cost of full merge in VBP-FAST is significantly reduced from that of FAST. In the meantime, VBP-FAST uses PBlocks to retain the advantages of partial merge and switch operations. Our extensive trace-driven simulation results show that VBP-FAST speeds up FAST by a factor of 5.3-8.4 for random workloads and of 1.7 for sequential workloads with channel-level, die-level, and plane-level parallelism of 8, 2, and 2 (i.e., eight channels, two dies, and two planes).", "paper_title": "Improving Hybrid FTL by Fully Exploiting Internal SSD Parallelism with Virtual Blocks", "paper_id": "WOS:000348232000009"}