{"auto_keywords": [{"score": 0.023937888972543075, "phrase": "sun"}, {"score": 0.00481495049065317, "phrase": "java_software"}, {"score": 0.004773692073488661, "phrase": "container_profiling"}, {"score": 0.004712463245074863, "phrase": "memory_leak"}, {"score": 0.004652016085325825, "phrase": "java_program"}, {"score": 0.004592340708764929, "phrase": "object_references"}, {"score": 0.004286708921931472, "phrase": "static_analysis"}, {"score": 0.004159446063902181, "phrase": "redundant_references"}, {"score": 0.004106063237069123, "phrase": "existing_dynamic_leak_detection_tools_track"}, {"score": 0.004053362743156545, "phrase": "fine-grained_information"}, {"score": 0.0036710872046569532, "phrase": "novel_container-based_heap-tracking_technique"}, {"score": 0.003531474887552889, "phrase": "java_programs"}, {"score": 0.003471135453226184, "phrase": "incorrect_uses"}, {"score": 0.003310447652300423, "phrase": "unused_data_entries"}, {"score": 0.0032259472087775138, "phrase": "described_work"}, {"score": 0.0030898642396380662, "phrase": "arbitrary_objects"}, {"score": 0.002985130390111069, "phrase": "unused_objects"}, {"score": 0.002703327151461985, "phrase": "confidence_value"}, {"score": 0.00253400005142168, "phrase": "last_retrieval"}, {"score": 0.0024906610581090223, "phrase": "previous_approaches"}, {"score": 0.0023447155524245655, "phrase": "proposed_technique"}, {"score": 0.002150900082318562, "phrase": "example_bug"}, {"score": 0.002132420504803564, "phrase": "ibm_developerworks"}, {"score": 0.0021049977753042253, "phrase": "top_containers"}], "paper_keywords": ["Design", " Algorithms", " Performance", " Memory leaks", " container profiling", " leaking confidence"], "paper_abstract": "A memory leak in a Java program occurs when object references that are no longer needed are unnecessarily maintained. Such leaks are difficult to detect because static analysis typically cannot precisely identify these redundant references, and existing dynamic leak detection tools track and report fine-grained information about individual objects, producing results that are usually hard to interpret and lack precision. In this article we introduce a novel container-based heap-tracking technique, based on the fact that many memory leaks in Java programs occur due to incorrect uses of containers, leading to containers that keep references to unused data entries. The novelty of the described work is twofold: (1) instead of tracking arbitrary objects and finding leaks by analyzing references to unused objects, the technique tracks only containers and directly identifies the source of the leak, and (2) the technique computes a confidence value for each container based on a combination of its memory consumption and its elements' staleness (time since last retrieval), while previous approaches do not consider such combined metrics. Our experimental results show that the reports generated by the proposed technique can be very precise: for two bugs reported by Sun, a known bug in SPECjbb 2000, and an example bug from IBM developerWorks, the top containers in the reports include the containers that leak memory.", "paper_title": "Precise Memory Leak Detection for Java Software Using Container Profiling", "paper_id": "WOS:000322480900002"}