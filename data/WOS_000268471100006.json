{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "soft_errors"}, {"score": 0.004774115617883476, "phrase": "register_files"}, {"score": 0.004733625412289433, "phrase": "register_file"}, {"score": 0.004516962628112147, "phrase": "traditional_redundancy_based_schemes"}, {"score": 0.004441181098701285, "phrase": "rf"}, {"score": 0.0042373381286051354, "phrase": "timing_critical_path"}, {"score": 0.004008981656795115, "phrase": "hottest_blocks"}, {"score": 0.003858110309630846, "phrase": "extra_circuitry"}, {"score": 0.0037446875860947916, "phrase": "pure_software_approaches"}, {"score": 0.0036037265181631324, "phrase": "previous_approaches"}, {"score": 0.003527712410706358, "phrase": "program_duplication"}, {"score": 0.003409399407390298, "phrase": "instruction_scheduling"}, {"score": 0.003309124298009635, "phrase": "local_scope"}, {"score": 0.0031440159350875057, "phrase": "inter-procedural_analysis"}, {"score": 0.003104038398386081, "phrase": "intra-procedural_optimization"}, {"score": 0.0029998918671747168, "phrase": "pure_compiler_approach"}, {"score": 0.0029491324941225356, "phrase": "inter-procedural_code_analysis"}, {"score": 0.002790004829699627, "phrase": "protected_memory"}, {"score": 0.002696366237523415, "phrase": "integer_linear_programming_problem"}, {"score": 0.0022731540640627307, "phrase": "code_size_overhead"}, {"score": 0.0021049977753042253, "phrase": "highly_optimized_binaries"}], "paper_keywords": ["Algorithms", " Reliability", " Performance", " Embedded system", " Soft error", " Register file", " Architectural vulnerability factor", " Static analysis", " Compilation", " Link-time optimization"], "paper_abstract": "Register file (RF) is extremely vulnerable to soft errors, and traditional redundancy based schemes to protect the RF are prohibitive not only because RF is often in the timing critical path of the processor, but also since it is one of the hottest blocks on the chip, and therefore adding any extra circuitry to it is not desirable. Pure software approaches would be ideal in this case, but previous approaches that are based on program duplication have very significant runtime overheads, and others based on instruction scheduling are only moderately effective due to local scope. We show that the problem of protecting registers inherently requires inter-procedural analysis, and intra-procedural optimization are ineffective. This paper presents a pure compiler approach, based on inter-procedural code analysis to reduce the vulnerability of registers by temporarily writing live variables to protected memory. We formulate the problem as an integer linear programming problem and also present a very efficient heuristic algorithm. Our experiments demonstrate that our proposed technique can reduce the vulnerability of the RF by 33 similar to 37% on average and up to 66%, with a small 2% increase in runtime. In addition, our overhead reduction optimizations can effectively reduce the code size overhead, by more than 40% on average, to a mere 5 similar to 6%, as compared to highly optimized binaries.", "paper_title": "A Compiler Optimization to Reduce Soft Errors in Register Files", "paper_id": "WOS:000268471100006"}