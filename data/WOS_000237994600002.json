{"auto_keywords": [{"score": 0.049435104149514096, "phrase": "epichord"}, {"score": 0.013701089309399258, "phrase": "parallel_queries"}, {"score": 0.012100136580355844, "phrase": "lookup_performance"}, {"score": 0.00481495049065317, "phrase": "chord_lookup_algorithm"}, {"score": 0.004782455247247007, "phrase": "reactive_routing_state_management"}, {"score": 0.004702168843383725, "phrase": "dht_lookup_algorithm"}, {"score": 0.004530240915629761, "phrase": "dht"}, {"score": 0.0044692705329574, "phrase": "significantly_better_lookup_performance"}, {"score": 0.004276736877590646, "phrase": "network_maintenance_costs"}, {"score": 0.004247858437831649, "phrase": "existing_lookups"}, {"score": 0.004078620439629185, "phrase": "new_class"}, {"score": 0.004051074327962139, "phrase": "unlimited-state-per-node_dhts"}, {"score": 0.003929391999210588, "phrase": "wide_range"}, {"score": 0.0039028497942174777, "phrase": "lookup_workloads"}, {"score": 0.003785602770516485, "phrase": "lookup-intensive_workloads"}, {"score": 0.003671865026158296, "phrase": "chum-intensive_workloads"}, {"score": 0.0036224139706218916, "phrase": "worst_case"}, {"score": 0.0034079696245884073, "phrase": "large_amounts"}, {"score": 0.003249966782844541, "phrase": "lookup_latency"}, {"score": 0.0031845067058084583, "phrase": "costly_lookup_timeouts"}, {"score": 0.003057503388220776, "phrase": "lookup_traffic"}, {"score": 0.002975652654536407, "phrase": "network_probes"}, {"score": 0.0028764048059439205, "phrase": "network_traffic"}, {"score": 0.0028472791870440065, "phrase": "cache_entries"}, {"score": 0.002771040606604632, "phrase": "fixed_lifetime"}, {"score": 0.002678598911294797, "phrase": "lookup_latencies"}, {"score": 0.002660482980203146, "phrase": "path_lengths"}, {"score": 0.0024193249334041557, "phrase": "minimal_additional_communication_overhead"}, {"score": 0.0022914434133560852, "phrase": "corresponding_sequential_chord_lookup_algorithm"}, {"score": 0.002252880693912436, "phrase": "lookup_work-loads"}, {"score": 0.0022074592164608134, "phrase": "novel_token-passing_stabilization_scheme"}, {"score": 0.002162951519368368, "phrase": "global_routing_inconsistencies"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Distributed Hash Table (DHT)", " overlay network"], "paper_abstract": "EpiChord is a DHT lookup algorithm that demonstrates that we can remove the O(log n)-state-per-node restriction on existing DHT topologies to achieve significantly better lookup performance and resilience using a novel reactive routing state maintenance strategy that amortizes network maintenance costs into existing lookups and by issuing parallel queries. Our technique allows us to design a new class of unlimited-state-per-node DHTs that is able to adapt naturally to a wide range of lookup workloads. EpiChord is able to achieve O(1)-hop lookup performance under lookup-intensive workloads, and at least O(log n)-hop lookup performance under chum-intensive workloads even in the worst case (though it is expected to perform better on average). Our reactive routing state maintenance strategy allows us to maintain large amounts of routing state with only a modest amount of bandwidth, while parallel queries serve to reduce lookup latency and allow us to avoid costly lookup timeouts. In general, EpiChord exploits the information gleaned from observing lookup traffic to improve lookup performance, and only sends network probes when necessary. Nodes populate their caches mainly from observing network traffic, and cache entries are flushed from the cache after a fixed lifetime. Our simulations show that with our approach can reduce both lookup latencies and path lengths by a factor of 3 by issuing only three queries asynchronously in parallel per lookup. Furthermore, we show that we are able to achieve this result with minimal additional communication overhead and the number of messages generated per lookup is no more than that for the corresponding sequential Chord lookup algorithm over a range of lookup work-loads. We also present a novel token-passing stabilization scheme that automatically detects and repairs global routing inconsistencies. (C) 2005 Published by Elsevier B.V.", "paper_title": "EpiChord: Parallelizing the Chord lookup algorithm with reactive routing state management", "paper_id": "WOS:000237994600002"}