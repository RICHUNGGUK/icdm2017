{"auto_keywords": [{"score": 0.01445673366175879, "phrase": "folding_rule"}, {"score": 0.008942450922359162, "phrase": "logic_program_transformation"}, {"score": 0.008870959830206311, "phrase": "inductive_logic_programming"}, {"score": 0.00481495049065317, "phrase": "program-transformation_system"}, {"score": 0.004681012408089219, "phrase": "correctness-preserving_rules"}, {"score": 0.004249332848326785, "phrase": "unfolding_rule"}, {"score": 0.0040978781692373005, "phrase": "logic_program_transformation_systems"}, {"score": 0.003999907278478564, "phrase": "limited_kind"}, {"score": 0.003308986613384597, "phrase": "extended_folding_rule"}, {"score": 0.0031780859997873803, "phrase": "existing_version"}, {"score": 0.002826949449085849, "phrase": "low-level_program_constructs"}, {"score": 0.002597088221737922, "phrase": "common_extension"}, {"score": 0.0025658094607383646, "phrase": "existing_multiple-clause_folding"}, {"score": 0.0022095803687183107, "phrase": "inductive_inference"}, {"score": 0.0021220799689257914, "phrase": "dung"}, {"score": 0.0021049977753042253, "phrase": "kanchanasut's_semantic_kernel"}], "paper_keywords": ["logic program transformation", " folding rule", " most specific generalization", " semantic kernel", " decompilation", " inductive logic programming"], "paper_abstract": "A program-transformation system is determined by a repertoire of correctness-preserving rules, such as folding and unfolding. Normally, we would like the folding rule to be in some sense the inverse of the unfolding rule. Typically, however, the folding rule of logic program transformation systems is an inverse of a limited kind of unfolding. In many cases this limited kind of folding suffices. We argue, nevertheless, that it is both important and possible to extend such a folding so as to be able to fold the clauses resulting from any unfolding of a positive literal. This extended folding rule allows us to derive some programs underivable by the existing version of this rule alone. In addition, our folding rule has applications to decompilation and reengineering, where we are interested in obtaining high-level program constructs from low-level program constructs. Moreover, we establish a connection between logic program transformation and inductive logic programming. This connection stems from viewing our folding rule as a common extension of the existing multiple-clause folding, rule, on the one hand, and an operator devised in inductive logic programming, called \"intra-construction,\" on the other hand. Hence, our folding rule can be regarded as a step towards incorporating inductive inference into logic program transformation. We prove correctness with respect to Dung and Kanchanasut's semantic kernel.", "paper_title": "A multiple-clause folding rule using instantiation and generalization", "paper_id": "WOS:000235949900008"}