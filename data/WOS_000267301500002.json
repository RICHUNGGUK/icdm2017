{"auto_keywords": [{"score": 0.04904947763914552, "phrase": "multimedia_extension_architectures"}, {"score": 0.04216792154193272, "phrase": "aggregate_condition_codes"}, {"score": 0.030585766161068673, "phrase": "boscc_instructions"}, {"score": 0.00481495049065317, "phrase": "compiler_technology"}, {"score": 0.004762893197005439, "phrase": "control-flow_optimizations"}, {"score": 0.0037087324991876727, "phrase": "machine_word"}, {"score": 0.003308195943172624, "phrase": "boscc"}, {"score": 0.003236941658990869, "phrase": "fast_detection"}, {"score": 0.003201890266327127, "phrase": "aggregate_conditions"}, {"score": 0.0031500213134140953, "phrase": "optimization_opportunity"}, {"score": 0.0030821633718368206, "phrase": "multimedia_applications"}, {"score": 0.002999386721353559, "phrase": "compiler_analyses"}, {"score": 0.002918826667294298, "phrase": "efficient_parallel_code"}, {"score": 0.002704554429386671, "phrase": "suif_compiler"}, {"score": 0.0025892330566358503, "phrase": "multimedia_benchmarks"}, {"score": 0.0024923577071656014, "phrase": "default_approach"}, {"score": 0.00230932021677234, "phrase": "better_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["SIMD compiler", " Branch-on-superword-condition-code (BOSCC)", " Control flow", " Multimedia extension", " Automatic vectorization"], "paper_abstract": "This paper addresses how to automatically generate code for multimedia extension architectures in the presence of conditionals. We evaluate the costs and benefits of exploiting branches on the aggregate condition codes associated with the fields of a superword (an aggregate object larger than a machine word) such as the branch-on-any instruction of the AltiVec. Branch-on-superword-condition-codes (BOSCC) instructions allow fast detection of aggregate conditions, an optimization opportunity often found in multimedia applications. This paper presents compiler analyses and techniques for generating efficient parallel code using BOSCC instructions. We evaluate our approach, which has been implemented in the SUIF compiler, through a set of experiments with multimedia benchmarks, and compare it with the default approach previously implemented in our compiler. Our experimental results show that using BOSCC instructions can result in better performance for applications where the aggregate condition codes of a superword often evaluate to the same value. Published by Elsevier B.V.", "paper_title": "Evaluating compiler technology for control-flow optimizations for multimedia extension architectures", "paper_id": "WOS:000267301500002"}