{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "autonomous_search"}, {"score": 0.004673530058379246, "phrase": "constraint_satisfaction_problems"}, {"score": 0.004633888966463624, "phrase": "constraint_programming"}, {"score": 0.004516962628112147, "phrase": "search_tree"}, {"score": 0.004459605573798577, "phrase": "potential_solutions"}, {"score": 0.0043656173407379895, "phrase": "exploration_phase"}, {"score": 0.004255431326383001, "phrase": "enumeration_strategy"}, {"score": 0.0038090874465452214, "phrase": "perfect_enumerations"}, {"score": 0.0037128955884188773, "phrase": "useless_explorations"}, {"score": 0.003634587156159668, "phrase": "good_strategies"}, {"score": 0.0032255172568437965, "phrase": "bad-performing_strategies"}, {"score": 0.003104038398386081, "phrase": "quality_rank"}, {"score": 0.0029744042270542655, "phrase": "current_solving_process"}, {"score": 0.0029116257477000617, "phrase": "ranking_computation"}, {"score": 0.002742787059497186, "phrase": "whole_resolution"}, {"score": 0.002639440558428147, "phrase": "faster_autonomous_search_approach"}, {"score": 0.0025947642929906407, "phrase": "powerful_database_technique"}, {"score": 0.0024547103576350233, "phrase": "costly_rank_functions"}, {"score": 0.002362192695471035, "phrase": "solving_process"}, {"score": 0.0022926465161639633, "phrase": "skyline-based_approach"}, {"score": 0.002253826965566618, "phrase": "previously_reported_autonomous_search_frameworks"}, {"score": 0.0022062235065459274, "phrase": "classic_and_more_sophisticated_heuristics"}, {"score": 0.002178144355363467, "phrase": "impact-based_search"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Combinatorial optimization", " Constraint satisfaction", " Hyperheuristic", " Skyline"], "paper_abstract": "Solving constraint satisfaction problems via constraint programming involves the exploration of a search tree where the potential solutions are distributed. The exploration phase is essentially controlled by an enumeration strategy that decides the order in which variables and values are selected to verify its feasibility. This process is known to be quite important, indeed perfect enumerations can reach a solution without useless explorations. However, selecting good strategies in advance is quite hard as the effects along the search are often unpredictable. Autonomous search addresses this concern by proposing to replace on the fly bad-performing strategies by more promising ones. Strategies are selected from a quality rank which is generated in function of their performance on the current solving process. However, the ranking computation is commonly tuned by an optimizer that negatively impacts the performance of the whole resolution. In this paper, we propose a faster autonomous search approach by integrating a powerful database technique called skyline. This technique allows us to avoid the use of costly rank functions and optimizers, accelerating as a consequence the solving process. We report results where the skyline-based approach clearly competes with previously reported autonomous search frameworks as well as with classic and more sophisticated heuristics such as impact-based search and dom/wdeg. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Boosting autonomous search for CSPs via skylines", "paper_id": "WOS:000353848900004"}