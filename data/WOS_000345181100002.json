{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "functional_behavior"}, {"score": 0.0046970764288494764, "phrase": "floating-point_program"}, {"score": 0.004324521292490181, "phrase": "case_study"}, {"score": 0.004047781270412204, "phrase": "industrial_research_project"}, {"score": 0.0039813976794342, "phrase": "static_analysis"}, {"score": 0.003916098498242888, "phrase": "critical_c_code"}, {"score": 0.003820144626025562, "phrase": "example_program"}, {"score": 0.003516898780234098, "phrase": "industrial_code"}, {"score": 0.0033465923623290034, "phrase": "confidentiality_reasons"}, {"score": 0.003264547032549398, "phrase": "floating-point_computations"}, {"score": 0.0025467088622824143, "phrase": "acsl"}, {"score": 0.002363806685815014, "phrase": "frama-c_environment"}, {"score": 0.0022306602656266545, "phrase": "automated_theorem"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Deductive program verification", " Automated theorem proving", " Floating-point computations", " Quaternions"], "paper_abstract": "We report a case study that was conducted as part of an industrial research project on static analysis of critical C code. The example program considered in this paper is an excerpt of an industrial code, only slightly modified for confidentiality reasons, involving floating-point computations. The objective was to establish a property on the functional behavior of this code, taking into account rounding errors made during computations. The property is formalized using ACSL, the behavioral specification language available inside the Frama-C environment, and it is verified by automated theorem proving. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Verification of the functional behavior of a floating-point program: An industrial case study", "paper_id": "WOS:000345181100002"}