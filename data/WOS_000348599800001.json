{"auto_keywords": [{"score": 0.042921985594396084, "phrase": "scalable_commutativity_rule"}, {"score": 0.01326215849522487, "phrase": "interface_operations"}, {"score": 0.008812281379331283, "phrase": "commuter"}, {"score": 0.004763565662615503, "phrase": "scalable_software"}, {"score": 0.00472961267657106, "phrase": "multicore_processors"}, {"score": 0.0046457802872573025, "phrase": "multicore_scalability"}, {"score": 0.004579780586951551, "phrase": "software_interfaces"}, {"score": 0.004514714250357749, "phrase": "system_call_apis"}, {"score": 0.004466519142879166, "phrase": "scalability_challenges"}, {"score": 0.004248294537944227, "phrase": "interface_specifications"}, {"score": 0.0037885477117363675, "phrase": "development_process"}, {"score": 0.0037615180375561805, "phrase": "scalable_multicore_software"}, {"score": 0.003708033700676924, "phrase": "interface_design"}, {"score": 0.003464150192089816, "phrase": "novel_form"}, {"score": 0.003414931637041726, "phrase": "sim"}, {"score": 0.0032947371184395237, "phrase": "complex_and_highly_stateful_software_interfaces"}, {"score": 0.0032016639006812826, "phrase": "software_development_tools"}, {"score": 0.003111211706454155, "phrase": "high-level_interface_models"}, {"score": 0.00266693888510356, "phrase": "linux_kernel_problems"}, {"score": 0.002619571161767134, "phrase": "application_scalability"}, {"score": 0.002591554263245753, "phrase": "previously_unknown_bottlenecks"}, {"score": 0.0025364139244227458, "phrase": "future_workloads"}, {"score": 0.0023609284828008652, "phrase": "posix"}, {"score": 0.0022133711375320244, "phrase": "commuter."}], "paper_keywords": ["Commutativity", " conflict freedom", " multicore", " software interfaces"], "paper_abstract": "What opportunities for multicore scalability are latent in software interfaces, such as system call APIs? Can scalability challenges and opportunities be identified even before any implementation exists, simply by considering interface specifications? To answer these questions, we introduce the scalable commutativity rule: whenever interface operations commute, they can be implemented in a way that scales. This rule is useful throughout the development process for scalable multicore software, from the interface design through implementation, testing, and evaluation. This article formalizes the scalable commutativity rule. This requires defining a novel form of commutativity, SIM commutativity, that lets the rule apply even to complex and highly stateful software interfaces. We also introduce a suite of software development tools based on the rule. Our COMMUTER tool accepts high-level interface models, generates tests of interface operations that commute and hence could scale, and uses these tests to systematically evaluate the scalability of implementations. We apply COMMUTER to a model of 18 POSIX file and virtual memory system operations. Using the resulting 26,238 scalability tests, COMMUTER highlights Linux kernel problems previously observed to limit application scalability and identifies previously unknown bottlenecks that may be triggered by future workloads or hardware. Finally, we apply the scalable commutativity rule and COMMUTER to the design and implementation sv6, a new POSIX-like operating system. sv6's novel file and virtual memory system designs enable it to scale for 99% of the tests generated by COMMUTER. These results translate to linear scalability on an 80-core x86 machine for applications built on sv6's commutative operations.", "paper_title": "The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors", "paper_id": "WOS:000348599800001"}