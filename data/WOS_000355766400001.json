{"auto_keywords": [{"score": 0.028448572782996114, "phrase": "sas"}, {"score": 0.00481495049065317, "phrase": "feedback-based_resource_reservations"}, {"score": 0.004257806363128601, "phrase": "periodic_allocation"}, {"score": 0.003954837422946628, "phrase": "actual_budget_allocation"}, {"score": 0.0036194914688460656, "phrase": "system_tick"}, {"score": 0.003531474887552889, "phrase": "shared_resources"}, {"score": 0.0033288399506044763, "phrase": "control_techniques"}, {"score": 0.0032800186243040663, "phrase": "effective_mean"}, {"score": 0.0031223774204093713, "phrase": "design_time"}, {"score": 0.002899965889623787, "phrase": "target_budget_allocation"}, {"score": 0.0027878797103973313, "phrase": "on-line_events"}, {"score": 0.0027469703311742647, "phrase": "proposed_scheme"}, {"score": 0.002706659627293686, "phrase": "self-adaptive_server"}, {"score": 0.0025262061502713683, "phrase": "controller_gain"}, {"score": 0.0022890371899188466, "phrase": "lightweight_operating_system"}, {"score": 0.0022005118194652704, "phrase": "extremely_simple_implementation"}, {"score": 0.0021789194955896124, "phrase": "sas_servers"}, {"score": 0.002125859121671525, "phrase": "low-overhead_resource_isolation_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "proved_real-time_guarantees"}], "paper_keywords": ["Compositional analysis", " Resource reservation", " Feedback control", " Hard real-time systems", " Supply bound function", " Minimizing l(infinity) gain"], "paper_abstract": "Resource reservation is a technique that allows isolating applications from interfering among each other. In the most classic setting, this method requires the periodic allocation of a given budget of resource over time. However, in reality, the actual budget allocation may deviate from its ideal value. Examples of causes of this deviation are: the presence of a system tick, the usage of shared resources, the self-blocking on I/O operations, etc. Since control techniques are an effective mean to deal with uncertainties and disturbances, unknown at design time but bounded, in this paper we propose to use feedback to achieve the target budget allocation, which may have deviated due to on-line events. The proposed scheme, called Self-Adaptive Server (SAS), is described and analyzed. We prove that the controller gain, which maximizes the resource delivered to the application, is . We also implemented the scheduler on a lightweight operating system for a microcontroller. Thanks to the extremely simple implementation, SAS servers are well suited for low-overhead resource isolation mechanisms with proved real-time guarantees.", "paper_title": "Hard real-time guarantees in feedback-based resource reservations", "paper_id": "WOS:000355766400001"}