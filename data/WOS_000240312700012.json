{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "hopcroft's_algorithm"}, {"score": 0.004273951631010383, "phrase": "hopcroft's_minimization_algorithm"}, {"score": 0.00385431710959668, "phrase": "filo"}, {"score": 0.0033937776228549557, "phrase": "filo_strategy"}, {"score": 0.0032614317990293695, "phrase": "fifo_strategy"}, {"score": 0.0030119758165837625, "phrase": "practical_complexity"}, {"score": 0.0029409171055888804, "phrase": "filo_case"}, {"score": 0.0026518169452004465, "phrase": "minimization_algorithm"}, {"score": 0.0025892330566358503, "phrase": "fsm_tool"}, {"score": 0.0024101837218440834, "phrase": "finite_automata_library"}, {"score": 0.002208035721125305, "phrase": "efficient_manner"}, {"score": 0.0021049977753042253, "phrase": "canonical_minimal_automata"}], "paper_keywords": [""], "paper_abstract": "In this paper, a reflection is made on an indeterminism inherent to Hopcroft's minimization algorithm: the splitter choice. We have implemented two natural policies (FIFO and FILO) for managing the set of splitters for which we obtain the following practical results: the FILO strategy performs better than the FIFO strategy, in the case of a one letter alphabet, the practical complexity in the FILO case never exceeds a linear one and our implementation is more efficient than the minimization algorithm of the FSM tool. This implementation is being integrated in a finite automata library, the Dash library. Thus, we present an efficient manner to manipulate automata by using canonical minimal automata.", "paper_title": "Around Hopcroft's algorithm", "paper_id": "WOS:000240312700012"}