{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dynamic_memory_management"}, {"score": 0.049445419527232116, "phrase": "constraint-based_testing"}, {"score": 0.004626262114440637, "phrase": "cbt"}, {"score": 0.004415395176043526, "phrase": "test_cases"}, {"score": 0.004327981760540394, "phrase": "testing_objective"}, {"score": 0.004048860957751714, "phrase": "dynamic_memory_allocation"}, {"score": 0.003942299471749811, "phrase": "constraint_reasoning"}, {"score": 0.0038385317554884713, "phrase": "new_variables"}, {"score": 0.00378767277402891, "phrase": "new_constraints"}, {"score": 0.0036390887584943723, "phrase": "test_data_generation_process"}, {"score": 0.0033367819052051995, "phrase": "new_constraint_model"}, {"score": 0.0032925489316383955, "phrase": "c_programs"}, {"score": 0.0030595112110658675, "phrase": "powerful_deduction_rules"}, {"score": 0.0030189426536422577, "phrase": "abstract_states"}, {"score": 0.002900426826591769, "phrase": "constraint_reasoning_process"}, {"score": 0.0027680095380207756, "phrase": "test_data"}, {"score": 0.0027312956497456374, "phrase": "complex_coverage_objectives"}, {"score": 0.00260657976055413, "phrase": "well-known_difficult_example_program"}, {"score": 0.0023424328921363585, "phrase": "preliminary_experimental_results"}, {"score": 0.002235433376874495, "phrase": "highly_deductive_potential"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software testing", " Constraint-based testing", " Automatic test data generation", " Dynamic structures"], "paper_abstract": "Constraint-based testing (CBT) is the process of generating test cases against a testing objective by using constraint solving techniques. When programs contain dynamic memory allocation and loops, constraint reasoning becomes challenging as new variables and new constraints should be created during the test data generation process. In this paper, we address this problem by proposing a new constraint model of C programs based on operators that model dynamic memory management. These operators apply powerful deduction rules on abstract states of the memory enhancing the constraint reasoning process. This allows to automatically generate test data respecting complex coverage objectives. We illustrate our approach on a well-known difficult example program that contains dynamic memory allocation/deallocation, structures and loops. We describe our implementation and provide preliminary experimental results on this example that show the highly deductive potential of the approach. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Modelling dynamic memory management in constraint-based testing", "paper_id": "WOS:000271681800002"}