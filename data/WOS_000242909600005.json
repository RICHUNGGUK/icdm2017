{"auto_keywords": [{"score": 0.04305504521414548, "phrase": "global_set"}, {"score": 0.03413308111480942, "phrase": "local_sets"}, {"score": 0.00481495049065317, "phrase": "simple_shared_dataspace_architecture"}, {"score": 0.004568326972997448, "phrase": "pie_software_architecture"}, {"score": 0.004020492138367616, "phrase": "simple_architecture"}, {"score": 0.0038721890530859578, "phrase": "industrial_software_architecture_splice"}, {"score": 0.0036188435232325337, "phrase": "distributed_implementation"}, {"score": 0.003136952589428254, "phrase": "data_items"}, {"score": 0.0026384167183586015, "phrase": "global_specification"}, {"score": 0.0025795066118838067, "phrase": "system's_behaviour"}, {"score": 0.0021693692831601745, "phrase": "recent_concepts"}, {"score": 0.0021369416775353107, "phrase": "proof_methods"}, {"score": 0.0021049977753042253, "phrase": "process_algebra"}], "paper_keywords": [""], "paper_abstract": "We study a si in pie software architecture, in which components are coordinated by writing into and reading from a global set. This simple architecture is inspired by the industrial software architecture Splice. We present two results. First, a distributed implementation of the architecture is given and proved correct formally. In the implementation, local sets are maintained and data items are exchanged between these local sets. Next we show that the architecture is sufficiently expressive in principle. In particular, every global specification of a system's behaviour can be divided into components, which coordinate by read and write primitives on a global set only. We heavily rely on recent concepts and proof methods from process algebra.", "paper_title": "Distribution of a simple shared dataspace architecture", "paper_id": "WOS:000242909600005"}