{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_trip_count_predictor"}, {"score": 0.004760765880314089, "phrase": "trip_count"}, {"score": 0.004414723336530117, "phrase": "greater_benefits"}, {"score": 0.004381527499253281, "phrase": "large_trip_counts"}, {"score": 0.0042351951710402425, "phrase": "small_ones"}, {"score": 0.004140354220982935, "phrase": "exact_prediction"}, {"score": 0.0040323765107766335, "phrase": "undecidable_problem"}, {"score": 0.0036830211726031946, "phrase": "cheap_trip_count_prediction"}, {"score": 0.00340217066797559, "phrase": "just-in-time_compilers"}, {"score": 0.003251376167695528, "phrase": "long_time"}, {"score": 0.0031784960695034645, "phrase": "jit_compiler"}, {"score": 0.0029694830678462787, "phrase": "javascript_programs"}, {"score": 0.002902903244616154, "phrase": "mozilla_firefox"}, {"score": 0.002763709443278514, "phrase": "typical_javascript_benchmarks"}, {"score": 0.0026813808976594183, "phrase": "exact_predictions"}, {"score": 0.0026014984513015368, "phrase": "similar_results"}, {"score": 0.002562451837774567, "phrase": "c_programs"}, {"score": 0.002543148295176345, "phrase": "spec_cpu"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Compilers", " Programming languages", " JIT Compilation", " Loop Analysis", " Trip Count Prediction"], "paper_abstract": "The Trip Count of a loop determines how many iterations this loop performs. Predicting this value is important for several compiler optimizations, which yield greater benefits for large trip counts, and are either innocuous or detrimental for small ones. However, finding an exact prediction, in general, is an undecidable problem. Such problems are usually approached via methods which tend to be computationally expensive. In this paper we make a case for a cheap trip count prediction heuristic, which is O(1) on the size of the loop. We argue that our technique is useful to just-in-time compilers. If we predict that a loop will iterate for a long time, then we invoke the JIT compiler earlier. Even though straightforward, our observation is novel. We show how this idea speeds up JavaScript programs, by implementing it in Mozilla Firefox. We can apply our heuristic in 79.9% of the loops found in typical JavaScript benchmarks. For these loops, we obtain exact predictions in 91% of cases. We get similar results when analyzing the C programs of SPEC CPU 2006. A more elaborate technique, linear on the size of the loop, improves our 0(1) technique only marginally. As a consequence of this work, we have been able to speed up several JavaScript programs by over 5%, reaching 24% of improvement in one benchmark. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A case for a fast trip count predictor", "paper_id": "WOS:000346225300015"}