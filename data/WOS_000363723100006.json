{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multi-threaded_applications"}, {"score": 0.01156931907343967, "phrase": "appropriate_number"}, {"score": 0.0083982355186082, "phrase": "scalability-aware_thread_scheduling_approach"}, {"score": 0.00467424463996457, "phrase": "manycore_era"}, {"score": 0.004518442937844318, "phrase": "increasing_number"}, {"score": 0.004404994123834589, "phrase": "emerging_problem"}, {"score": 0.004258128672571261, "phrase": "different_scalability"}, {"score": 0.004151188559520802, "phrase": "shared_resources"}, {"score": 0.004081385289516914, "phrase": "cpu_cores"}, {"score": 0.004046923261950549, "phrase": "memory_subsystem"}, {"score": 0.003797530813314321, "phrase": "optimal_performance"}, {"score": 0.003204841443605308, "phrase": "simple_and_effective_model"}, {"score": 0.0029691377785333872, "phrase": "memory-level_parallelism"}, {"score": 0.002944039482467119, "phrase": "instruction-level_parallelism"}, {"score": 0.002906788114295269, "phrase": "thread-level_parallelism"}, {"score": 0.0028457440091791252, "phrase": "bpi_model"}, {"score": 0.002750721367040336, "phrase": "classification_approach"}, {"score": 0.0026140878612307536, "phrase": "scalability_prediction_algorithm"}, {"score": 0.0024527767211457046, "phrase": "application_performance"}, {"score": 0.002205692205167157, "phrase": "average_error"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_instruction-level_prediction"}], "paper_keywords": ["Manycore processors", " Multi-threaded applications", " Scalability prediction", " Scalability-aware thread scheduling"], "paper_abstract": "In the manycore era, developing multi-threaded applications to efficiently leverage the increasing number of cores has become an emerging problem. However, each application can have different scalability because of the competition for shared resources, such as CPU cores, memory subsystem, or both, depending on the input set. Therefore, to obtain optimal performance of applications, it is crucial to dynamically predict the scalability of applications and allocate the appropriate number of threads to each application based on its scalability. In this paper, we propose bytes per instruction, which is a simple and effective model to provide insights into the scalability of multi-threaded applications, based on the analysis of the interactions among memory-level parallelism, instruction-level parallelism, and thread-level parallelism. Based on the BPI model, we propose (1) a classification approach and (2) scalability prediction algorithm for multi-threaded applications. Based on the scalability prediction algorithm, we implement the scalability-aware thread scheduling approach which can allocate the appropriate number of threads to optimize application performance. The evaluation results on a 61-core Intel Xeon Phi coprocessor show that our algorithm can predict the scalability of 120-, 180-, and 240-threaded applications with an average error of 6.8 %. Moreover, the accuracy of our prediction algorithm outperforms state-of-the-art instruction-level prediction and memory-level prediction by an average of 9.1 and 14.8 %, respectively. The scalability-aware thread scheduling approach outperforms full utilization by 12.7 %.", "paper_title": "A scalability prediction approach for multi-threaded applications on manycore processors", "paper_id": "WOS:000363723100006"}