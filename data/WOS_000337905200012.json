{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "stochastic_bit_streams"}, {"score": 0.04963913874714362, "phrase": "linear_finite-state_machines"}, {"score": 0.04707862248234477, "phrase": "binary_radix"}, {"score": 0.03573468524851256, "phrase": "soft_errors"}, {"score": 0.03296712883817118, "phrase": "prior_work"}, {"score": 0.030270722317984878, "phrase": "complex_functions"}, {"score": 0.004640398886726948, "phrase": "positional_representation"}, {"score": 0.004349955692802962, "phrase": "random_bit_streams"}, {"score": 0.004290112502811656, "phrase": "signal_value"}, {"score": 0.003822263046602146, "phrase": "complex_operations"}, {"score": 0.0032514447965530323, "phrase": "combinational_and_sequential_constructs"}, {"score": 0.0030617935728586006, "phrase": "combinational_logic"}, {"score": 0.0027275289970185015, "phrase": "stochastic_computation"}, {"score": 0.0025922289692173997, "phrase": "rigorous_mathematical_treatment"}, {"score": 0.0025683581446365165, "phrase": "stochastic_implementation"}, {"score": 0.0024522530645471065, "phrase": "linear_fsms"}, {"score": 0.0022878396720586044, "phrase": "absolute_value"}, {"score": 0.0022458849724980904, "phrase": "specific_applications"}, {"score": 0.002225196379204285, "phrase": "experimental_results"}, {"score": 0.0021843879253500894, "phrase": "linear_fsm-based_constructs"}, {"score": 0.0021344259291927914, "phrase": "smaller_area-delay_products"}, {"score": 0.0021049977753042253, "phrase": "corresponding_deterministic_constructs"}], "paper_keywords": ["Stochastic computing", " finite-state machine (FSM)", " stochastic bit streams"], "paper_abstract": "Most digital systems operate on a positional representation of data, such as binary radix. An alternative is to operate on random bit streams where the signal value is encoded by the probability of obtaining a one versus a zero. This representation is much less compact than binary radix. However, complex operations can be performed with very simple logic. Furthermore, since the representation is uniform, with all bits weighted equally, it is highly tolerant of soft errors (i.e., bit flips). Both combinational and sequential constructs have been proposed for operating on stochastic bit streams. Prior work has shown that combinational logic can implement multiplication and scaled addition effectively while linear finite-state machines (FSMs) can implement complex functions such as exponentiation and tanh effectively. Prior work on stochastic computation has largely been validated empirically. This paper provides a rigorous mathematical treatment of stochastic implementation of complex functions such as exponentiation and tanh implemented using linear FSMs. It presents two new functions, an absolute value function and exponentiation based on an absolute value, motivated by specific applications. Experimental results show that the linear FSM-based constructs for these functions have smaller area-delay products than the corresponding deterministic constructs. They also are much more tolerant of soft errors.", "paper_title": "Logical Computation on Stochastic Bit Streams with Linear Finite-State Machines", "paper_id": "WOS:000337905200012"}