{"auto_keywords": [{"score": 0.036659728884727856, "phrase": "american_options"}, {"score": 0.015485059406581729, "phrase": "sabr_model"}, {"score": 0.0152538508803995, "phrase": "graphics_processing_unit"}, {"score": 0.011865389378216002, "phrase": "barrier_options"}, {"score": 0.011226210421706623, "phrase": "least_squares_monte_carlo_method"}, {"score": 0.00481495049065317, "phrase": "barrier_and_american_options"}, {"score": 0.004350860569674989, "phrase": "gpu"}, {"score": 0.004177724522109952, "phrase": "financial_options"}, {"score": 0.0040525061916685924, "phrase": "gpu_programming"}, {"score": 0.003991305899593133, "phrase": "sabr_stochastic_volatility_model"}, {"score": 0.0038913443732432468, "phrase": "pricing_options"}, {"score": 0.0038520615699124123, "phrase": "quasi_monte_carlo_techniques"}, {"score": 0.003587924960158317, "phrase": "quasi_monte_carlo"}, {"score": 0.003551694229680741, "phrase": "conditional_probability_correction_methods"}, {"score": 0.0032415934630668484, "phrase": "hybrid_cpugpu_implementation"}, {"score": 0.0030500051941781034, "phrase": "efficient_use"}, {"score": 0.003019189898170698, "phrase": "gpu_memory"}, {"score": 0.0028990018343924683, "phrase": "gpu_numerical_schemes"}, {"score": 0.0028263192354046245, "phrase": "compared_performances"}, {"score": 0.0027835848648596513, "phrase": "gpu_programs"}, {"score": 0.0026863605504566924, "phrase": "gpu-based_computing_schemes"}, {"score": 0.0025533148412439166, "phrase": "satisfactory_pricing_accuracy"}, {"score": 0.0023539789234610763, "phrase": "special_techniques"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["CUDA", " SABR model", " quasi Monte Carlo", " barrier options", " American options", " GPU memory usage"], "paper_abstract": "In this paper, we presented our study on using the graphics processing unit (GPU) to accelerate the computation in pricing financial options. We first introduced the GPU programming and the SABR stochastic volatility model. We then discussed pricing options with quasi Monte Carlo techniques under the SABR model. In particular, we focused on pricing barrier options by quasi Monte Carlo and conditional probability correction methods and on pricing American options by the least squares Monte Carlo method. We then presented our GPU-based implementation for pricing barrier options and hybrid CPUGPU implementation for pricing American options. In addition, we described techniques for efficient use of GPU memory. We provided details of implementing these GPU numerical schemes for pricing options and compared performances of the GPU programs with their CPU counterparts. We found that GPU-based computing schemes can achieve 134 times speedup for pricing barrier options, while maintaining satisfactory pricing accuracy. For pricing American options, we also reported that when the least squares Monte Carlo method is used, special techniques can be devised to use less GPU memory, resulting in 22 times speedup, instead of the original 10 times speedup. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Pricing barrier and American options under the SABR model on the graphics processing unit", "paper_id": "WOS:000303983700009"}