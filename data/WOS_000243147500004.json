{"auto_keywords": [{"score": 0.049062712519921996, "phrase": "low-power_designs"}, {"score": 0.00481495049065317, "phrase": "instruction_decoders"}, {"score": 0.00441883624011048, "phrase": "processor_instruction"}, {"score": 0.00409895142748329, "phrase": "major_task"}, {"score": 0.0038431888954930083, "phrase": "control_signals"}, {"score": 0.0037615180375561805, "phrase": "data_paths"}, {"score": 0.003167441161387607, "phrase": "program_execution_sequences"}, {"score": 0.0028142286985235977, "phrase": "frequently_executed_instructions"}, {"score": 0.002610198789888055, "phrase": "two-stage_low-power_decomposition_structure"}, {"score": 0.0021975548867457606, "phrase": "power_reduction"}, {"score": 0.0021049977753042253, "phrase": "critical-path_delay_reduction"}], "paper_keywords": ["design", " low power", " instruction decoder"], "paper_abstract": "During the execution of processor instruction, decoding the instructions is a major task in identifying instructions and generating control signals for data paths. In this article, we propose two instruction decoder decomposition techniques for low-power designs. First, by tracing program execution sequences, we propose an algorithm that explores the relations between frequently executed instructions. Second, we propose a two-stage low-power decomposition structure for decoding instructions. Experimental results demonstrate that our proposed techniques achieve an average of 34.18% in power reduction and 12.93% in critical-path delay reduction for the instruction decoder.", "paper_title": "Decomposition of instruction decoders for low-power designs", "paper_id": "WOS:000243147500004"}