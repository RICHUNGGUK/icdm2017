{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "message-passing_parallel_programs"}, {"score": 0.004331501320993783, "phrase": "c_programming_language"}, {"score": 0.004118587636081584, "phrase": "protocol_specifications"}, {"score": 0.0038186039088445524, "phrase": "protocol_language"}, {"score": 0.0037423521744765075, "phrase": "dependent_type_system"}, {"score": 0.003558294449586273, "phrase": "point-to-point_messages"}, {"score": 0.0030431357443366177, "phrase": "vcc"}, {"score": 0.0029528009461813557, "phrase": "c."}, {"score": 0.0028498718992429825, "phrase": "running_time"}, {"score": 0.0026420518944303716, "phrase": "alternative_techniques"}, {"score": 0.0024742098091226203, "phrase": "state-explosion_problem"}, {"score": 0.002180829796375136, "phrase": "mpi"}, {"score": 0.0021049977753042253, "phrase": "scalable_solution"}], "paper_keywords": ["Languages", " Verification", " Program verification", " Parallel programming", " MPI", " Session types", " Dependent types"], "paper_abstract": "We present ParTypes, a type-based methodology for the verification of Message Passing Interface (MPI) programs written in the C programming language. The aim is to statically verify programs against protocol specifications, enforcing properties such as fidelity and absence of deadlocks. We develop a protocol language based on a dependent type system for message-passing parallel programs, which includes various communication operators, such as point-to-point messages, broadcast, reduce, array scatter and gather. For the verification of a program against a given protocol, the protocol is first translated into a representation read by VCC, a software verifier for C. We successfully verified several MPI programs in a running time that is independent of the number of processes or other input parameters. This contrasts with alternative techniques, notably model checking and runtime verification, that suffer from the state-explosion problem or that otherwise depend on parameters to the program itself. We experimentally evaluated our approach against state-of-the-art tools for MPI to conclude that our approach offers a scalable solution.", "paper_title": "Protocol-Based Verification of Message-Passing Parallel Programs", "paper_id": "WOS:000367256500016"}