{"auto_keywords": [{"score": 0.04882787382338283, "phrase": "network_intrusion_detection_systems"}, {"score": 0.00481495049065317, "phrase": "stride_finite_automata"}, {"score": 0.004764220976404241, "phrase": "high-speed_regular_expression"}, {"score": 0.004639712384096822, "phrase": "deep_packet_inspection"}, {"score": 0.004542441734438654, "phrase": "key_component"}, {"score": 0.004262643556463565, "phrase": "incoming_data_stream"}, {"score": 0.004064117897000019, "phrase": "attack_database"}, {"score": 0.0037139103792217143, "phrase": "regular_expression_matching"}, {"score": 0.003578600071301459, "phrase": "attack_identification"}, {"score": 0.003522124318486352, "phrase": "significantly_high_computation"}, {"score": 0.0034299649219748513, "phrase": "nidses"}, {"score": 0.003375826910838081, "phrase": "line-rate_packet"}, {"score": 0.003322540556404882, "phrase": "challenging_task"}, {"score": 0.0027889366191837504, "phrase": "conventional_finite_automata"}, {"score": 0.0027159094186967247, "phrase": "entire_traffic_stream"}, {"score": 0.00267301171407926, "phrase": "malicious_information"}, {"score": 0.002548331088496964, "phrase": "partial_traffic_stream"}, {"score": 0.002508073621696602, "phrase": "suspicious_information"}, {"score": 0.002468450551616404, "phrase": "presented_strifa_technique"}, {"score": 0.0023408288327263316, "phrase": "different_traces"}, {"score": 0.0023038418282549274, "phrase": "simulation_results"}, {"score": 0.002255431275670053, "phrase": "strifa_acceleration_scheme"}, {"score": 0.002219790619936024, "phrase": "increased_speed"}, {"score": 0.0021049977753042253, "phrase": "memory_requirement"}], "paper_keywords": ["Deep packet inspection (DPI)", " deterministic finite automaton (DFA)", " network intrusion detection systems (NIDSes)", " nondeterministic finite automaton (NFA)"], "paper_abstract": "Deep packet inspection has become a key component in network intrusion detection systems (NIDSes), where every packet in the incoming data stream needs to be compared with patterns in an attack database, byte-by-byte, using either string matching or regular expression matching. Regular expression matching, despite its flexibility and efficiency in attack identification, brings significantly high computation and storage complexities to NIDSes, making line-rate packet processing a challenging task. In this paper, we present stride finite automata (StriFA), a novel finite automata family, to accelerate both string matching and regular expression matching. Different from conventional finite automata, which scan the entire traffic stream to locate malicious information, a StriFA only needs to scan a partial traffic stream to find suspicious information. The presented StriFA technique has been implemented in software and evaluated based on different traces. The simulation results show that the StriFA acceleration scheme offers an increased speed over traditional nondeterministic finite automaton/deterministic finite automaton, while at the same time reducing the memory requirement.", "paper_title": "StriFA: Stride Finite Automata for High-Speed Regular Expression Matching in Network Intrusion Detection Systems", "paper_id": "WOS:000321641800004"}