{"auto_keywords": [{"score": 0.026799446604476664, "phrase": "sat"}, {"score": 0.00481495049065317, "phrase": "parallel_computing_power"}, {"score": 0.004734448316824488, "phrase": "graphic_processing_units"}, {"score": 0.004475659507646842, "phrase": "general_purpose_applications"}, {"score": 0.004447173076318934, "phrase": "nvidia"}, {"score": 0.0043029342321223825, "phrase": "general_api"}, {"score": 0.004230956171850591, "phrase": "single-instruction_multiple-thread-style_parallelism"}, {"score": 0.003845154818609644, "phrase": "relatively_simple_computations"}, {"score": 0.0036553070575015344, "phrase": "large_sets"}, {"score": 0.0033405704229694656, "phrase": "search_problems"}, {"score": 0.003266201217790818, "phrase": "combinatorial_nature"}, {"score": 0.0032115093493071366, "phrase": "large_parallel_tasks"}, {"score": 0.003175556211659149, "phrase": "relatively_less_natural_symmetries"}, {"score": 0.003018668521745676, "phrase": "well-known_satisfiability_testing"}, {"score": 0.002805597755796506, "phrase": "unified_device_architecture"}, {"score": 0.0026971491199975083, "phrase": "gpu_computing"}, {"score": 0.00257831812581194, "phrase": "strong_sources"}, {"score": 0.0025494354909453847, "phrase": "gpu-style_parallelism"}, {"score": 0.0024097920845706795, "phrase": "different_design_choices"}, {"score": 0.0021049977753042253, "phrase": "simple_nvidia_platform"}], "paper_keywords": ["Davis-Putnam-Logemann-Loveland procedure", " CNF-satisfiability", " parallel SAT-solving", " general purpose GPU computing"], "paper_abstract": "The parallel computing power offered by graphic processing units (GPUs) has been recently exploited to support general purpose applications - by exploiting the availability of general API and the single-instruction multiple-thread-style parallelism present in several classes of problems (e.g. numerical simulations and matrix manipulations) - where relatively simple computations need to be applied to all items in large sets of data. This paper investigates the use of GPUs in parallelising a class of search problems, where the combinatorial nature leads to large parallel tasks and relatively less natural symmetries. Specifically, the investigation focuses on the well-known satisfiability testing (SAT) problem and on the use of the NVIDIA compute unified device architecture, one of the most popular platforms for GPU computing. The paper explores ways to identify strong sources of GPU-style parallelism from SAT solving. The paper describes experiments with different design choices and evaluates the results. The outcomes demonstrate the potential for this approach, leading to one order of magnitude of speedup using a simple NVIDIA platform.", "paper_title": "CUD@SAT: SAT solving on GPUs", "paper_id": "WOS:000354179800003"}