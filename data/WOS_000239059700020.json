{"auto_keywords": [{"score": 0.03931851505746404, "phrase": "fault_tolerance"}, {"score": 0.00481495049065317, "phrase": "fragmented_objects"}, {"score": 0.004648609688625397, "phrase": "novel_approach"}, {"score": 0.00454090611248773, "phrase": "distributed_object-based_systems"}, {"score": 0.00440976345264104, "phrase": "fragmented-object_model"}, {"score": 0.004332894955218135, "phrase": "replication_mechanisms"}, {"score": 0.004282391936827106, "phrase": "distributed_applications"}, {"score": 0.00408617426304956, "phrase": "customised_code"}, {"score": 0.004014923642015515, "phrase": "per-object_basis"}, {"score": 0.0039449104968131655, "phrase": "replica_groups"}, {"score": 0.0033868916699805224, "phrase": "internal_modifications"}, {"score": 0.0033277936960179892, "phrase": "existing_middleware"}, {"score": 0.0032889671598112023, "phrase": "semantic_annotations"}, {"score": 0.0032315723330399375, "phrase": "interface_level"}, {"score": 0.0028069426877159642, "phrase": "weaker_ordering_semantics"}, {"score": 0.00270978310478061, "phrase": "true_multithreaded_execution"}, {"score": 0.0026624684547385718, "phrase": "code-generation_tool"}, {"score": 0.002570296816631395, "phrase": "object-specific_fragment_code"}, {"score": 0.0024813081174066653, "phrase": "replica_consistency_management"}, {"score": 0.002353554841514325, "phrase": "interface_specification"}, {"score": 0.002129877319760485, "phrase": "deterministic_multithreading"}, {"score": 0.0021049977753042253, "phrase": "replicated_objects"}], "paper_keywords": [""], "paper_abstract": "This paper describes a novel approach to fault-tolerance in distributed object-based systems. It uses the fragmented-object model to integrate replication mechanisms into distributed applications. This approach enables the use of customised code on a per-object basis to access replica groups and to manage consistency. The addition of fault tolerance to the infrastructure has only little overhead, is fully transparent for clients, and does not require internal modifications to the existing middleware. Semantic annotations at the interface level allow the developer to customise the provision of fault tolerance. Operations can be marked as read-only to allow an execution with weaker ordering semantics or as parallelisable to allow true multithreaded execution. A code-generation tool is provided to automatically produce object-specific fragment code for client access and for replica consistency management, taking into account the annotations, the interface specification, and the non-replicated implementation. A further contribution of our code-generation approach is the support of deterministic multithreading in replicated objects.", "paper_title": "Fault-tolerant replication based on fragmented objects", "paper_id": "WOS:000239059700020"}