{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "functional_dependencies"}, {"score": 0.040637368261652464, "phrase": "constraint_atoms"}, {"score": 0.004753670676591174, "phrase": "model_generation"}, {"score": 0.004693167092003573, "phrase": "recent_work"}, {"score": 0.004633429997452688, "phrase": "answer_set_programming"}, {"score": 0.0044873778175404475, "phrase": "constraint_programming"}, {"score": 0.00429057323623293, "phrase": "new_field"}, {"score": 0.0039729853486821995, "phrase": "asp_language"}, {"score": 0.0038230844545071303, "phrase": "constraint_satisfaction_problems"}, {"score": 0.0035399770257915466, "phrase": "new_generation"}, {"score": 0.003494866798828308, "phrase": "search_algorithms"}, {"score": 0.003215295260684715, "phrase": "new_constructs"}, {"score": 0.0026693851900137953, "phrase": "knowledge_representation_language"}, {"score": 0.0026184796288543878, "phrase": "first-order_logic"}, {"score": 0.0024088451312725924, "phrase": "declarative_problem_specifications"}, {"score": 0.00236289633510808, "phrase": "theorem_prover"}, {"score": 0.00220177373403577, "phrase": "experimental_evaluation"}, {"score": 0.0021049977753042253, "phrase": "better_search_performance"}], "paper_keywords": [""], "paper_abstract": "Recent work in Answer Set Programming has integrated ideas from Constraint Programming. This has led to a new field called ASP Modulo CSP (CASP), in which the ASP language is enriched with constraint atoms representing constraint satisfaction problems. These constraints have a more compact grounding and are handled by a new generation of search algorithms. However, the burden is on the modeler to exploit these new constructs in his declarative problem specifications. Here, we explore how to remove this burden by automatically generating constraint atoms. We do so in the context of FO(.)(IDP), a knowledge representation language that extends first-order logic with, among others, inductive definitions, arithmetic and aggregates. We uncover functional dependencies in declarative problem specifications with a theorem prover and exploit them with a transformation that introduces functions. Experimental evaluation shows that we obtain more compact groundings and better search performance.", "paper_title": "Detection and exploitation of functional dependencies for model generation", "paper_id": "WOS:000324926400002"}