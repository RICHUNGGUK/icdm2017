{"auto_keywords": [{"score": 0.042206255638248744, "phrase": "cloud"}, {"score": 0.014045947167037205, "phrase": "grid"}, {"score": 0.010562722842677813, "phrase": "chemistry"}, {"score": 0.00481495049065317, "phrase": "java_virtual"}, {"score": 0.00475924837336259, "phrase": "efficient_and_robust_e-science_applications"}, {"score": 0.004667833113864304, "phrase": "object-oriented_programming_languages"}, {"score": 0.0045959609346817535, "phrase": "dominant_paradigm"}, {"score": 0.004560438999891081, "phrase": "application_development"}, {"score": 0.00436989807912238, "phrase": "increasingly_more_java_applications"}, {"score": 0.003965818535880531, "phrase": "significant_examples"}, {"score": 0.003909130574340759, "phrase": "bio-informatics"}, {"score": 0.003904713104101532, "phrase": "computational_biology"}, {"score": 0.003756021561809324, "phrase": "neobio"}, {"score": 0.0033952989364738353, "phrase": "software_fault"}, {"score": 0.0033429545815200825, "phrase": "available_resources"}, {"score": 0.002742017872865778, "phrase": "deadline_guarantees"}, {"score": 0.002293014162421338, "phrase": "java_applications"}, {"score": 0.00227525089435209, "phrase": "long_execution_times"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["virtual machines", " checkpointing", " migration", " JVM", " e-Science", " resource-awareness", " quality of execution"], "paper_abstract": "Object-oriented programming languages presently are the dominant paradigm of application development (e. g., Java,. NET). Lately, increasingly more Java applications have long (or very long) execution times and manipulate large amounts of data/information, gaining relevance in fields related with e-Science (with Grid and Cloud computing). Significant examples include Chemistry, Computational Biology and Bio-informatics, with many available Java-based APIs (e. g., Neobio). Often, when the execution of such an application is terminated abruptly because of a failure (regardless of the cause being a hardware of software fault, lack of available resources, etc.), all of its work already performed is simply lost, and when the application is later re-initiated, it has to restart all its work from scratch, wasting resources and time, while also being prone to another failure and may delay its completion with no deadline guarantees. Our proposed solution to address these issues is through incorporating mechanisms for checkpointing and migration in a JVM. These make applications more robust and flexible by being able to move to other nodes, without any intervention from the programmer. This article provides a solution to Java applications with long execution times, by extending a JVM (Jikes research virtual machine) with such mechanisms. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "A checkpointing-enabled and resource-aware Java Virtual Machine for efficient and robust e-Science applications in grid environments", "paper_id": "WOS:000307842400003"}