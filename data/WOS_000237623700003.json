{"auto_keywords": [{"score": 0.01023942945498387, "phrase": "source_code"}, {"score": 0.008523229750933193, "phrase": "relevant_and_specific_computational_units"}, {"score": 0.00481495049065317, "phrase": "static_noninteractive_approach"}, {"score": 0.004605434064238641, "phrase": "software_maintenance"}, {"score": 0.004461359547152617, "phrase": "helpful_step"}, {"score": 0.004240116703465252, "phrase": "particular_maintenance_task"}, {"score": 0.003953639783762917, "phrase": "feature_location"}, {"score": 0.0037336520904376687, "phrase": "static_and_noninteractive_method"}, {"score": 0.003571018150056717, "phrase": "main_idea"}, {"score": 0.003437248394635138, "phrase": "information_retrieval"}, {"score": 0.0032666255024083983, "phrase": "basic_connections"}, {"score": 0.0031845067058084583, "phrase": "computational_units"}, {"score": 0.002988101395789399, "phrase": "retrieved_connections"}, {"score": 0.0028944757265206332, "phrase": "static_representation"}, {"score": 0.0028037753646260937, "phrase": "brcg"}, {"score": 0.0023758843175179702, "phrase": "meaningful_names"}, {"score": 0.0022578275190855124, "phrase": "experimental_study"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": ["algorithms", " experimentation"], "paper_abstract": "To facilitate software maintenance and evolution, a helpful step is to locate features concerned in a particular maintenance task. In the literature, both dynamic and interactive approaches have been proposed for feature location. In this article, we present a static and noninteractive method for achieving this objective. The main idea of our approach is to use information retrieval (IR) technology to reveal the basic connections between features and computational units in the source code. Due to the imprecision of retrieved connections, we use a static representation of the source code named BRCG ( branch-reserving call graph) to further recover both relevant and specific computational units for each feature. A premise of our approach is that programmers should use meaningful names as identifiers. We also performed an experimental study based on two real-world software systems to evaluate our approach. According to experimental results, our approach is quite effective in acquiring the relevant and specific computational units for most features.", "paper_title": "SNIAFL: Towards a static noninteractive approach to feature location", "paper_id": "WOS:000237623700003"}