{"auto_keywords": [{"score": 0.04866188206860211, "phrase": "test_case_generation"}, {"score": 0.04431606976723999, "phrase": "heap-manipulating_programs"}, {"score": 0.004814973374815129, "phrase": "clp"}, {"score": 0.00450020161335541, "phrase": "main_challenges"}, {"score": 0.00443308765153716, "phrase": "software_testing"}, {"score": 0.003990385737207714, "phrase": "dynamically_allocated_data_structures"}, {"score": 0.003701401653850141, "phrase": "testing_process"}, {"score": 0.003485304124598714, "phrase": "data_structures"}, {"score": 0.0033315236647127734, "phrase": "scalability_issues"}, {"score": 0.0028877818105020434, "phrase": "novel_clp_heap_solver"}, {"score": 0.002678433668156676, "phrase": "previous_proposals"}, {"score": 0.0023214774334744713, "phrase": "advanced_back-propagation"}, {"score": 0.002286781334850213, "phrase": "heap_related_constraints"}, {"score": 0.0021857667493036786, "phrase": "heap_solver"}, {"score": 0.0021049977753042253, "phrase": "heap_assumptions"}], "paper_keywords": [""], "paper_abstract": "One of the main challenges to software testing today is to efficiently handle heap-manipulating programs. These programs often build complex, dynamically allocated data structures during execution and, to ensure reliability, the testing process needs to consider all possible shapes these data structures can take. This creates scalability issues since high (often exponential) numbers of shapes may be built due to the aliasing of references. This paper presents a novel CLP heap solver for the test case generation of heap-manipulating programs that is more scalable than previous proposals, thanks to the treatment of reference aliasing by means of disjunction, and to the use of advanced back-propagation of heap related constraints. In addition, the heap solver supports the use of heap assumptions to avoid aliasing of data that, though legal, should not be provided as input.", "paper_title": "A CLP heap solver for test case generation", "paper_id": "WOS:000324926400018"}