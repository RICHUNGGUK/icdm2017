{"auto_keywords": [{"score": 0.03330047222393049, "phrase": "service_interactions"}, {"score": 0.03155000049355171, "phrase": "behavioral_dependencies"}, {"score": 0.00481495049065317, "phrase": "'s_dance"}, {"score": 0.00465067040500426, "phrase": "service_behavior_modeling"}, {"score": 0.0045547927862194856, "phrase": "service-oriented_architectures"}, {"score": 0.004399349717218995, "phrase": "software_systems"}, {"score": 0.004278807087784626, "phrase": "independent_units"}, {"score": 0.003964007795174772, "phrase": "message_exchanges"}, {"score": 0.0035468507553681034, "phrase": "early_phases"}, {"score": 0.0034736499231079083, "phrase": "development_lifecycle"}, {"score": 0.0031955979242589494, "phrase": "structural_aspects"}, {"score": 0.002879029968532794, "phrase": "increasing_attention"}, {"score": 0.002723186210025975, "phrase": "soa_vision"}, {"score": 0.0024876840172100567, "phrase": "analysis_and_design_phases"}, {"score": 0.002272501735900584, "phrase": "modeling_service_interactions"}], "paper_keywords": [""], "paper_abstract": "In Service-Oriented Architectures (SOAs), software systems are decomposed into independent units, namely services, that interact with one another through message exchanges. To promote reuse and evolvability, these interactions are explicitly described right from the early phases of the development lifecycle. Up to now, emphasis has been placed on capturing structural aspects of service interactions. Gradually though, the description of behavioral dependencies between service interactions is gaining increasing attention as a means to push forward the SOA vision. This paper deals with the description of these behavioral dependencies during the analysis and design phases. The paper outlines a set of requirements that a language for modeling service interactions at this level should fulfill, and proposes a language whose design is driven by these requirements.", "paper_title": "Let's dance: A language for service behavior modeling", "paper_id": "WOS:000243131600010"}