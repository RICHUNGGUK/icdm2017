{"auto_keywords": [{"score": 0.048749297367557266, "phrase": "network_clock"}, {"score": 0.00481495049065317, "phrase": "post-processing_timestamp_correspondence"}, {"score": 0.004769958800452922, "phrase": "free-running_clock_nodes"}, {"score": 0.004637478829869904, "phrase": "timestamp_conversion"}, {"score": 0.0045726187330434025, "phrase": "important_consideration"}, {"score": 0.004466519142879166, "phrase": "distributed_architectures"}, {"score": 0.004182301599359094, "phrase": "post-processing_timestamp_conversion"}, {"score": 0.0038431888954930083, "phrase": "new_nodes"}, {"score": 0.0037188360359702182, "phrase": "different_pieces"}, {"score": 0.0034657012607680173, "phrase": "negative_impact"}, {"score": 0.0034171734618737436, "phrase": "conversion_quality"}, {"score": 0.0031995142224983094, "phrase": "clock's_time"}, {"score": 0.002995677265350124, "phrase": "local_node"}, {"score": 0.0028312983170567948, "phrase": "remote_node"}, {"score": 0.002726740692380339, "phrase": "remote_node's_time"}, {"score": 0.002688532127821979, "phrase": "local_node's_time"}, {"score": 0.002552946390854313, "phrase": "time_imperfections"}, {"score": 0.0024241817763927163, "phrase": "time_conversion"}, {"score": 0.0023902026696615473, "phrase": "different_computers"}, {"score": 0.002280333649167796, "phrase": "precise_conversion"}, {"score": 0.0021755038991725147, "phrase": "clock_correspondences"}, {"score": 0.0021049977753042253, "phrase": "unlimited_number"}], "paper_keywords": ["distributed architecture", " timestamping conversion", " timestamping error modeling", " free running clock nodes", " network clock"], "paper_abstract": "Timestamp conversion is an important consideration in the deployment of distributed architectures. In this article we propose a precise, low-cost solution for on-line and post-processing timestamp conversion in distributed architectures, robust as regards the plugging and unplugging of hardware and the addition of new nodes (that is to say the different pieces of hardware connected to the network), not synchronized, and with no negative impact on the conversion quality. Each node (e.g., a computer) has at least one free-running clock. This clock's time is the reference for all events used by the node. When the local node needs to record the time of an event timestamped by a remote node, the time is converted from the remote node's time to the local node's time. Interval timestamping is used, to take account of time imperfections (e.g. sensor and computer latencies, or due to time conversion between the different computers). A network clock is used, enabling a precise conversion and avoiding exchanges of messages for the conversion of clock correspondences. Moreover, it allows an unlimited number of nodes in the network.", "paper_title": "On-line and post-processing timestamp correspondence for free-running clock nodes, using a network clock", "paper_id": "WOS:000252808000001"}