{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "code_generation"}, {"score": 0.03382429146462175, "phrase": "interoperable_dsl_family"}, {"score": 0.004550029253278477, "phrase": "control_elements"}, {"score": 0.004498812433096501, "phrase": "software_component_platform"}, {"score": 0.004464987136420614, "phrase": "general-purpose_programming_language"}, {"score": 0.004431659274299433, "phrase": "java"}, {"score": 0.004398755335445687, "phrase": "c."}, {"score": 0.004062937864702115, "phrase": "different_element_concerns"}, {"score": 0.0038247634489737142, "phrase": "general-purpose_language"}, {"score": 0.0037109446302945903, "phrase": "related_code_generation_process"}, {"score": 0.0035599338383885447, "phrase": "classical_template-based_code_generation_technique"}, {"score": 0.0034539685987677376, "phrase": "code_generator"}, {"score": 0.0033511469200347907, "phrase": "dsl_facets"}, {"score": 0.002958281631770322, "phrase": "target_programming_language"}, {"score": 0.0028271058251633815, "phrase": "abstract_syntax_trees"}, {"score": 0.002591681512611419, "phrase": "ast_transformation_rules"}, {"score": 0.0024487847651989128, "phrase": "original_template-based_implementation"}, {"score": 0.0023938516706864775, "phrase": "dsl_family"}, {"score": 0.0023758152068732025, "phrase": "ast_transformation_benefits"}, {"score": 0.002313748594795675, "phrase": "application_areas"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["code generation", " domain specific languages", " models reuse", " extensible languages", " specification", " program synthesis"], "paper_abstract": "This paper has been motivated by experience gained with specification and code generation of control elements for a software component platform and general-purpose programming language like Java and C. The problem to be addressed is two-fold: first, several domain-specific languages (DSL) are to be employed to express different element concerns (architecture, deployment context, code pattern) and second, porting to another general-purpose language should avoid modification of the specification and related code generation process as much as possible. In both respects, the classical template-based code generation technique proved to be inflexible, requiring the code generator to be blurred with ad hoc encoded DSL facets. The paper addresses the problem by introducing the concept of interoperable DSL family. Each member of the family is built around its core language, which can be further specialized by embedding into a target programming language. Interoperability of these DSLs is achieved at the level of abstract syntax trees (ASTs) with help of queries. As a proof of the concept, we have implemented the queries via the AST transformation rules of the Stratego/XT framework. In the evaluation, we provide a comparison with the original template-based implementation, which clearly indicates the DSL family and AST transformation benefits. We also provide examples of application areas where the concept of interoperable DSL family can be employed (and also indicate how this can be accomplished). Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Interoperable domain-specific languages families for code generation", "paper_id": "WOS:000317690100001"}