{"auto_keywords": [{"score": 0.004272164161788242, "phrase": "database_system"}, {"score": 0.004112582094962078, "phrase": "useful_tool"}, {"score": 0.004068087482412997, "phrase": "database_users"}, {"score": 0.0038527044625533574, "phrase": "information_collection_service"}, {"score": 0.003811010743703935, "phrase": "resource_allocation"}, {"score": 0.0037697665240643066, "phrase": "adaptive_query_processing_techniques"}, {"score": 0.003589602322126282, "phrase": "query_monitoring_system"}, {"score": 0.0034180189629740426, "phrase": "query_monitoring"}, {"score": 0.0033262524445013303, "phrase": "real_database_system"}, {"score": 0.0032546105164772995, "phrase": "novel_interface"}, {"score": 0.0030821633718368206, "phrase": "accessible_manner"}, {"score": 0.0027943943921568456, "phrase": "different_relational_operators"}, {"score": 0.002719325177422626, "phrase": "query_execution_time"}, {"score": 0.0025611773887867255, "phrase": "typical_grouping_operations"}, {"score": 0.0022595316565074326, "phrase": "prototype_implementation"}, {"score": 0.0021987994275190314, "phrase": "open-source_data_management_system"}, {"score": 0.0021049977753042253, "phrase": "practical_utility"}], "paper_keywords": ["Design", " Management", " Query monitoring", " progress estimation"], "paper_abstract": "Query monitoring refers to the problem of observing and predicting various parameters related to the execution of a query in a database system. In addition to being a useful tool for database users and administrators, it can also serve as an information collection service for resource allocation and adaptive query processing techniques. In this article, we present a query monitoring system from the ground up, describing various new techniques for query monitoring, their implementation inside a real database system, and a novel interface that presents the observed and predicted information in an accessible manner. To enable this system, we introduce several lightweight online techniques for progressively estimating and refining the cardinality of different relational operators using information collected at query execution time. These include binary and multiway joins as well as typical grouping operations and combinations thereof. We describe the various algorithms used to efficiently implement estimators and present the results of an evaluation of a prototype implementation of our framework in an open-source data management system. Our results demonstrate the feasibility and practical utility of the approach presented herein.", "paper_title": "The Design of a Query Monitoring System", "paper_id": "WOS:000265494300001"}