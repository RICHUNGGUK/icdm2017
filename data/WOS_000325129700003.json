{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "signal_program"}, {"score": 0.009901283616779593, "phrase": "critical_systems"}, {"score": 0.005322722015731851, "phrase": "dependency_graph"}, {"score": 0.004763568728618642, "phrase": "openmp."}, {"score": 0.004662427600500598, "phrase": "multi-core_processors"}, {"score": 0.00441883624011048, "phrase": "safe_execution"}, {"score": 0.004371660146981191, "phrase": "multithreaded_code"}, {"score": 0.004210458358142504, "phrase": "desirable_method"}, {"score": 0.003990385737207714, "phrase": "functional_description"}, {"score": 0.0038638811223100184, "phrase": "soundness_semantics"}, {"score": 0.0038226070564362697, "phrase": "deterministic_concurrency"}, {"score": 0.0037615180375561805, "phrase": "sequential_code_generation"}, {"score": 0.0036227329311981195, "phrase": "polychrony_compiler"}, {"score": 0.003584025547693836, "phrase": "deterministic_multi-threaded_code_generation_strategy"}, {"score": 0.0034148795808317555, "phrase": "existing_code_generation_methods"}, {"score": 0.0032888418378433037, "phrase": "cross_platform_executions"}, {"score": 0.00325370400424298, "phrase": "openmp"}, {"score": 0.0032016639006812826, "phrase": "application_program_interface"}, {"score": 0.003167460166378897, "phrase": "api"}, {"score": 0.003100085797251317, "phrase": "parallel_programming"}, {"score": 0.0030017207229983385, "phrase": "different_platforms"}, {"score": 0.0028446460307503343, "phrase": "openmp-based_multi-threaded_c_code"}, {"score": 0.0027102997281261733, "phrase": "core_syntax"}, {"score": 0.002652639568848117, "phrase": "synchronous_guarded_actions"}, {"score": 0.0025273383208209922, "phrase": "compositional_semantics"}, {"score": 0.0025003054002226965, "phrase": "signal_equations"}, {"score": 0.0023314867226678555, "phrase": "parallel_tasks"}, {"score": 0.002174041708084857, "phrase": "openmp-based_c_code"}, {"score": 0.0021049977753042253, "phrase": "multiple_platforms"}], "paper_keywords": ["multi-thread", " synchronous language", " Signal", " code generation", " OpenMP"], "paper_abstract": "The use of multi-core processors will become a trend in safety critical systems. For safe execution of multithreaded code, automatic code generation from formal specification is a desirable method. Signal, a synchronous language dedicated for the functional description of safety critical systems, provides soundness semantics for deterministic concurrency. Although sequential code generation of Signal has been implemented in Polychrony compiler, deterministic multi-threaded code generation strategy is still far from mature. Moreover, existing code generation methods use certain multi-thread library, which limits the cross platform executions. OpenMP is an application program interface (API) standard for parallel programming, supported by several mainstream compilers from different platforms. This paper presents a methodology translating Signal program to OpenMP-based multi-threaded C code. First, the intermediate representation of the core syntax of Signal using synchronous guarded actions is defined. Then, according to the compositional semantics of Signal equations, the Signal program is synthesized to dependency graph (DG). After parallel tasks are extracted from dependency graph, the Signal program can be finally translated into OpenMP-based C code which can be executed on multiple platforms.", "paper_title": "Multi-threaded code generation from Signal program to OpenMP", "paper_id": "WOS:000325129700003"}