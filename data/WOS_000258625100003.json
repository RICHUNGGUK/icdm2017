{"auto_keywords": [{"score": 0.04945211464062785, "phrase": "smp"}, {"score": 0.031550710181686786, "phrase": "vcluster"}, {"score": 0.015720465713265703, "phrase": "java"}, {"score": 0.014410062124187648, "phrase": "heterogeneous_machines"}, {"score": 0.013499477482793702, "phrase": "mpi"}, {"score": 0.004648609688625397, "phrase": "thread_migration_support"}, {"score": 0.004527619017250708, "phrase": "symmetric_multiprocessor"}, {"score": 0.004276120412040056, "phrase": "high-performance_computing"}, {"score": 0.004238682850598745, "phrase": "message-passing_libraries"}, {"score": 0.00416478405812793, "phrase": "message-passing_interface"}, {"score": 0.004074212307838049, "phrase": "parallel_virtual_machine"}, {"score": 0.003968112038249246, "phrase": "de_facto_parallel_programming_libraries"}, {"score": 0.003847802030433298, "phrase": "homogeneous_and_uni-processor_machines"}, {"score": 0.003682207422331339, "phrase": "multithreading_libraries"}, {"score": 0.0036499505265403377, "phrase": "posix_thread"}, {"score": 0.003447035529485425, "phrase": "existing_parallel_programming_libraries"}, {"score": 0.003357261267883637, "phrase": "fortran"}, {"score": 0.003342471131048328, "phrase": "programming_languages"}, {"score": 0.003298631258267805, "phrase": "java_programming_language"}, {"score": 0.003170520716404193, "phrase": "platform_neutral_byte_code"}, {"score": 0.0031289290660162145, "phrase": "ever-increasing_performance"}, {"score": 0.00304737045343781, "phrase": "new_parallel_programming_model"}, {"score": 0.0028276174348291923, "phrase": "virtual_threads"}, {"score": 0.002729744174693491, "phrase": "smp_machines"}, {"score": 0.002646880721119838, "phrase": "thread_migration"}, {"score": 0.0025665261770229757, "phrase": "dynamic_load_balancing"}, {"score": 0.002499590390751339, "phrase": "pure_java"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["message passing", " multithreading", " Java", " MPI", " PVM"], "paper_abstract": "Clusters, composed of symmetric multiprocessor (SMP) machines and heterogeneous machines, have become increasingly popular for high-performance computing. Message-passing libraries, such as message-passing interface (MPI) and parallel virtual machine (PVM), are de facto parallel programming libraries for clusters that usually consist of homogeneous and uni-processor machines. For SMP machines, MPI is combined with multithreading libraries like POSIX Thread and OpenMP to take advantage of the architecture. In addition to existing parallel programming libraries that are in C/C++ and FORTRAN programming languages, the Java programming language presents itself as another alternative with its object-oriented framework, platform neutral byte code, and ever-increasing performance. This paper presents a new parallel programming model and a library, VCluster, which implements this model. VCluster is based on migrating virtual threads instead of processes to support clusters of SMP machines more efficiently. The implementation uses thread migration, which can be used in dynamic load balancing. VCluster was developed in pure Java, utilizing the portability of Java to support clusters of heterogeneous machines. Several applications are developed to illustrate the use of this library and compare the usability and performance of VCluster with other approaches. Copyright (C) 2007 John Wiley & Sons, Ltd.", "paper_title": "VCluster: a thread-based Java middleware for SMP and heterogeneous clusters with thread migration support", "paper_id": "WOS:000258625100003"}