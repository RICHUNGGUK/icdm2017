{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "combinatory_graph_reduction"}, {"score": 0.0487007149356068, "phrase": "graph_reduction"}, {"score": 0.043891862951523725, "phrase": "storeless_reduction_semantics"}, {"score": 0.038906160240873275, "phrase": "term_graphs"}, {"score": 0.02918183980722893, "phrase": "store-based_reduction_semantics"}, {"score": 0.027676736000468754, "phrase": "store-based_abstract_machine"}, {"score": 0.0047155367844327, "phrase": "purely_syntactic_theory"}, {"score": 0.004618166136069052, "phrase": "canonical_combinators_s"}, {"score": 0.004591894484739275, "phrase": "k"}, {"score": 0.004466519142879166, "phrase": "graph_vertices"}, {"score": 0.004392565073466714, "phrase": "evaluation_contexts"}, {"score": 0.004248294537944227, "phrase": "first_syntactic_theory"}, {"score": 0.004160531596936783, "phrase": "combinatory_terms"}, {"score": 0.0037795163893761027, "phrase": "factored_terms"}, {"score": 0.0036248955128033084, "phrase": "barendregt_et_al"}, {"score": 0.0035499650812710806, "phrase": "second_syntactic_theory"}, {"score": 0.0033482708495261864, "phrase": "combinatory_term_graphs"}, {"score": 0.003279039724748895, "phrase": "let_bindings"}, {"score": 0.0032112354575523317, "phrase": "global_store"}, {"score": 0.0031317126905234145, "phrase": "strachey's_words"}, {"score": 0.003092690568543981, "phrase": "denotable_entities"}, {"score": 0.003066945490483524, "phrase": "storable_entities"}, {"score": 0.003028727936200845, "phrase": "store-based_terms"}, {"score": 0.0028926147550022607, "phrase": "third_syntactic_theory"}, {"score": 0.0024883835349005863, "phrase": "turner's_original_reduction_machine"}, {"score": 0.0022041312401435346, "phrase": "scientific_consensus"}], "paper_keywords": ["Algorithms", " Languages", " Theory", " Reduction-based normalization", " reduction-free normalization", " reduction semantics", " abstract machines", " reduction contexts", " evaluation contexts", " continuations", " Continuation-Passing style (CPS)", " CPS transformation", " defunctionalization", " refunctionalization", " refocusing"], "paper_abstract": "We present a purely syntactic theory of graph reduction for the canonical combinators S, K, and I, where graph vertices are represented with evaluation contexts and let expressions. We express this first syntactic theory as a storeless reduction semantics of combinatory terms. We then factor out the introduction of let expressions to denote as many graph vertices as possible upfront instead of on demand. The factored terms can be interpreted as term graphs in the sense of Barendregt et al. We express this second syntactic theory, which we prove equivalent to the first, as a storeless reduction semantics of combinatory term graphs. We then recast let bindings as bindings in a global store, thus shifting, in Strachey's words, from denotable entities to storable entities. The store-based terms can still be interpreted as term graphs. We express this third syntactic theory, which we prove equivalent to the second, as a store-based reduction semantics of combinatory term graphs. We then refocus this store-based reduction semantics into a store-based abstract machine. The architecture of this store-based abstract machine coincides with that of Turner's original reduction machine. The three syntactic theories presented here therefore properly account for combinatory graph reduction As We Know It. These three syntactic theories scale to handling the Y combinator. This article therefore illustrates the scientific consensus of theoreticians and implementors about graph reduction: it is the same combinatory elephant.", "paper_title": "Three Syntactic Theories for Combinatory Graph Reduction", "paper_id": "WOS:000329129900005"}