{"auto_keywords": [{"score": 0.04743528720803648, "phrase": "vulnerable_code"}, {"score": 0.03156097979008408, "phrase": "semi-supervised_learning"}, {"score": 0.026364227758594126, "phrase": "false_alarm"}, {"score": 0.00481495049065317, "phrase": "hybrid_program_analysis"}, {"score": 0.004696909870731282, "phrase": "limited_time"}, {"score": 0.004630755876583033, "phrase": "web_software_engineers"}, {"score": 0.004501217435918426, "phrase": "practical_approach"}, {"score": 0.004359794046948005, "phrase": "security_auditing_efforts"}, {"score": 0.004104621766670225, "phrase": "input_validation"}, {"score": 0.004075596668736259, "phrase": "input_sanitization_code_patterns"}, {"score": 0.003989742144066683, "phrase": "significant_indicators"}, {"score": 0.003961526165403768, "phrase": "web_application_vulnerabilities"}, {"score": 0.0039195744361570075, "phrase": "static_and_dynamic_program_analyses"}, {"score": 0.0037561467438280175, "phrase": "proposed_attributes"}, {"score": 0.0037163618245226755, "phrase": "accurate_and_scalable_way"}, {"score": 0.0036900720643677034, "phrase": "current_vulnerability_prediction_techniques"}, {"score": 0.0035740424892197155, "phrase": "vulnerability_information"}, {"score": 0.0031229055434606003, "phrase": "supervised_and_semi-supervised_learning"}, {"score": 0.002837305633114947, "phrase": "learning_scheme"}, {"score": 0.0028072256092845417, "phrase": "vulnerability_prediction"}, {"score": 0.002767613012044169, "phrase": "empirical_case_studies"}, {"score": 0.002748016244165687, "phrase": "seven_open_source_projects"}, {"score": 0.0025869338215971536, "phrase": "fully_available_labeled_data"}, {"score": 0.002559501330352064, "phrase": "supervised_models"}, {"score": 0.0024526426124799085, "phrase": "sql_injection"}, {"score": 0.0023586032632567796, "phrase": "inclusion_vulnerabilities"}, {"score": 0.002325306388085057, "phrase": "low_amount"}, {"score": 0.002308834230545883, "phrase": "labeled_data"}, {"score": 0.002260112998123604, "phrase": "supervised_model"}, {"score": 0.0022361384265153677, "phrase": "semi-supervised_model"}, {"score": 0.0022124176057373365, "phrase": "average_improvement"}, {"score": 0.0021049977753042253, "phrase": "preferable_solution"}], "paper_keywords": ["Vulnerability prediction", " security measures", " input validation and sanitization", " program analysis", " empirical study"], "paper_abstract": "Due to limited time and resources, web software engineers need support in identifying vulnerable code. A practical approach to predicting vulnerable code would enable them to prioritize security auditing efforts. In this paper, we propose using a set of hybrid (static+dynamic) code attributes that characterize input validation and input sanitization code patterns and are expected to be significant indicators of web application vulnerabilities. Because static and dynamic program analyses complement each other, both techniques are used to extract the proposed attributes in an accurate and scalable way. Current vulnerability prediction techniques rely on the availability of data labeled with vulnerability information for training. For many real world applications, past vulnerability data is often not available or at least not complete. Hence, to address both situations where labeled past data is fully available or not, we apply both supervised and semi-supervised learning when building vulnerability predictors based on hybrid code attributes. Given that semi-supervised learning is entirely unexplored in this domain, we describe how to use this learning scheme effectively for vulnerability prediction. We performed empirical case studies on seven open source projects where we built and evaluated supervised and semi-supervised models. When cross validated with fully available labeled data, the supervised models achieve an average of 77 percent recall and 5 percent probability of false alarm for predicting SQL injection, cross site scripting, remote code execution and file inclusion vulnerabilities. With a low amount of labeled data, when compared to the supervised model, the semi-supervised model showed an average improvement of 24 percent higher recall and 3 percent lower probability of false alarm, thus suggesting semi-supervised learning may be a preferable solution for many real world applications where vulnerability data is missing.", "paper_title": "Web Application Vulnerability Prediction Using Hybrid Program Analysis and Machine Learning", "paper_id": "WOS:000364992800008"}