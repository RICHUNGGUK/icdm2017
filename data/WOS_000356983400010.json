{"auto_keywords": [{"score": 0.04882655221850924, "phrase": "similarity_joins"}, {"score": 0.004586531354697466, "phrase": "multiple_application_domains"}, {"score": 0.004235793609579307, "phrase": "predefined_threshold_epsilon"}, {"score": 0.003946519058822334, "phrase": "physical_database_operators"}, {"score": 0.0036124465071873998, "phrase": "similarity_join_database_operator"}, {"score": 0.003306559295382181, "phrase": "non-blocking_behavior"}, {"score": 0.0032485526269852606, "phrase": "early_generation"}, {"score": 0.003135564707433078, "phrase": "database_iterator_interface"}, {"score": 0.0030942116765996426, "phrase": "proposed_operator"}, {"score": 0.0030264946886983833, "phrase": "multiple_distance_functions"}, {"score": 0.002999823428906084, "phrase": "data_types"}, {"score": 0.00289546142998427, "phrase": "query_engine_module"}, {"score": 0.002770087193217269, "phrase": "postgresql."}, {"score": 0.0024579623598183355, "phrase": "query_transformation_rules"}, {"score": 0.002425524064992056, "phrase": "query_performance"}, {"score": 0.0023935128386292966, "phrase": "extensive_performance_evaluation"}, {"score": 0.0023307492812556204, "phrase": "alternative_approaches"}, {"score": 0.002219916677664081, "phrase": "data_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Similarity Join", " Database operator", " Similarity queries", " PostgreSQL", " Query processing and optimization"], "paper_abstract": "Similarity Joins are extensively used in multiple application domains and are recognized among the most useful data processing and analysis operations. They retrieve all data pairs whose distances are smaller than a predefined threshold epsilon. While several standalone implementations have been proposed, very little work has addressed the implementation of Similarity Joins as physical database operators. In this paper, we focus on the study, design, implementation, and optimization of a Similarity Join database operator for metric spaces. We present DBSimJoin, a physical database operator that integrates techniques to: enable a non-blocking behavior, prioritize the early generation of results, and fully support the database iterator interface. The proposed operator can be used with multiple distance functions and data types. We describe the changes in each query engine module to implement DBSimJoin and provide details of our implementation in PostgreSQL. We also study ways in which DBSimJoin can be combined with other similarity and non-similarity operators to answer more complex queries, and how DBSimJoin can be used in query transformation rules to improve query performance. The extensive performance evaluation shows that DBSimJoin significantly outperforms alternative approaches and scales very well when important parameters like epsilon, data size, and number of dimensions increase. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Similarity Joins: Their implementation and interactions with other database operators", "paper_id": "WOS:000356983400010"}