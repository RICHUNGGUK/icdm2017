{"auto_keywords": [{"score": 0.033810181848990796, "phrase": "scheduling_contexts"}, {"score": 0.00481495049065317, "phrase": "multiple_starpu_applications"}, {"score": 0.004764859786310636, "phrase": "heterogeneous_machines"}, {"score": 0.004690694501758065, "phrase": "supervised_approach"}, {"score": 0.0046176782475198085, "phrase": "hpc_applications"}, {"score": 0.004475022550508119, "phrase": "multiple_parallel_libraries"}, {"score": 0.004382364826200616, "phrase": "great_challenge"}, {"score": 0.0042692243768616455, "phrase": "uniform_runtime_system"}, {"score": 0.0041589926969138585, "phrase": "scheduling_tasks"}, {"score": 0.004051595625804513, "phrase": "different_libraries"}, {"score": 0.003946960862020283, "phrase": "hardware_resources"}, {"score": 0.0038249462699142733, "phrase": "resource_oversubscription"}, {"score": 0.003785115566529808, "phrase": "undesirable_cache_flushes"}, {"score": 0.0037456980766939836, "phrase": "memory_bus_contention"}, {"score": 0.003592077944698516, "phrase": "starpu"}, {"score": 0.003444732262403694, "phrase": "heterogeneous_architectures"}, {"score": 0.003373334961160647, "phrase": "multiple_parallel_codes"}, {"score": 0.0032861588691414667, "phrase": "minimal_interference"}, {"score": 0.0031513240597392843, "phrase": "confined_execution_environments"}, {"score": 0.0030538300202383106, "phrase": "partition_computing_resources"}, {"score": 0.002867771524071872, "phrase": "computing_resources"}, {"score": 0.0028378798711397235, "phrase": "concurrently_running_libraries"}, {"score": 0.0026096659285441384, "phrase": "runtime_system"}, {"score": 0.002399760112755228, "phrase": "multiple_high_performance_linear_algebra_kernels"}, {"score": 0.002337684811187166, "phrase": "heterogeneous_multicore_machines"}, {"score": 0.002218299213266519, "phrase": "overall_application_run_time"}, {"score": 0.0021049977753042253, "phrase": "average_cache"}], "paper_keywords": ["Parallel composition", " runtime optimisation", " resource allocation", " heterogeneous architectures", " scheduling"], "paper_abstract": "Enabling HPC applications to perform efficiently when invoking multiple parallel libraries simultaneously is a great challenge. Even if a uniform runtime system is used underneath, scheduling tasks or threads coming from different libraries over the same set of hardware resources introduces many issues, such as resource oversubscription, undesirable cache flushes and memory bus contention. This paper presents an extension of StarPU, a runtime system specifically designed for heterogeneous architectures, that allows multiple parallel codes to run concurrently with minimal interference. Such parallel codes run within scheduling contexts that provide confined execution environments which can be used to partition computing resources. Scheduling contexts can be dynamically resized to optimize the allocation of computing resources among concurrently running libraries. We introduce a hypervisor that automatically expands or shrinks contexts using feedback from the runtime system (e.g. resource utilization). We demonstrate the relevance of our approach using benchmarks invoking multiple high performance linear algebra kernels simultaneously on top of heterogeneous multicore machines. We show that our mechanism can dramatically improve the overall application run time (-34%), most notably by reducing the average cache miss ratio (-50%).", "paper_title": "Composing multiple StarPU applications over heterogeneous machines: A supervised approach", "paper_id": "WOS:000342387600004"}