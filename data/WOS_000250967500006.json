{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "secret_message"}, {"score": 0.004735519962945449, "phrase": "cover_message"}, {"score": 0.004657393640152439, "phrase": "media_fingerprinting"}, {"score": 0.0044800522651664695, "phrase": "copyright_notice"}, {"score": 0.004357511171877593, "phrase": "digital_image"}, {"score": 0.0042148594491580324, "phrase": "intellectual_property_theft"}, {"score": 0.0038782499819752423, "phrase": "software_fingerprinting_problem"}, {"score": 0.003608266640131664, "phrase": "program_p"}, {"score": 0.0032290277960438855, "phrase": "code_transformations"}, {"score": 0.0029544572689681934, "phrase": "high_data_rate"}, {"score": 0.0026584843838039166, "phrase": "mathematical_property"}, {"score": 0.0024594969044952108, "phrase": "deliberate_actions"}, {"score": 0.0023394947463129642, "phrase": "software_fingerprinting_technique"}, {"score": 0.0022880528191813105, "phrase": "dynamic_graph_fingerprint"}, {"score": 0.0022253345930383257, "phrase": "execution_state"}, {"score": 0.0021049977753042253, "phrase": "pointer_alias_analysis"}], "paper_keywords": ["languages", " legal aspects", " security", " software piracy", " software protection", " watermarking"], "paper_abstract": "Fingerprinting embeds a secret message into a cover message. In media fingerprinting, the secret is usually a copyright notice and the cover a digital image. Fingerprinting an object discourages intellectual property theft, or when such theft has occurred, allows us to prove ownership. The Software Fingerprinting problem can be described as follows. Embed a structure W into a program P such that: W can be reliably located and extracted from P even after P has been subjected to code transformations such as translation, optimization and obfuscation; W is stealthy; W has a high data rate; embedding W into P does not adversely affect the performance of P; and W has a mathematical property that allows us to argue that its presence in P is the result of deliberate actions. In this article, we describe a software fingerprinting technique in which a dynamic graph fingerprint is stored in the execution state of a program. Because of the hardness of pointer alias analysis such fingerprints are difficult to attack automatically.", "paper_title": "Dynamic graph-based software fingerprinting", "paper_id": "WOS:000250967500006"}