{"auto_keywords": [{"score": 0.04879655533384408, "phrase": "icci"}, {"score": 0.006722894836650738, "phrase": "cache_resources"}, {"score": 0.006126254087427899, "phrase": "energy_consumption"}, {"score": 0.006055474361217995, "phrase": "memory_system"}, {"score": 0.005307948346601524, "phrase": "coherence_information"}, {"score": 0.00481495049065317, "phrase": "-cache_coherence_information"}, {"score": 0.004490212943845175, "phrase": "flat_coherence_protocols"}, {"score": 0.004438250823243621, "phrase": "inexpensive_hardware_cache_coherence"}, {"score": 0.00440394242852293, "phrase": "large_core_counts"}, {"score": 0.004269329235934791, "phrase": "execution_times"}, {"score": 0.0042035670399069485, "phrase": "non-scalable_sparse_directory"}, {"score": 0.003935147683802319, "phrase": "traditional_bit-vector_directories"}, {"score": 0.0037414662674652805, "phrase": "storage_overhead"}, {"score": 0.0036695284042874395, "phrase": "broadcast-based_protocol"}, {"score": 0.0035989687070420977, "phrase": "large_storage_space"}, {"score": 0.003516079377293321, "phrase": "smarter_use"}, {"score": 0.003435092524339692, "phrase": "last-level_cache_entries"}, {"score": 0.0033690254452595865, "phrase": "sharing_codes"}, {"score": 0.0031171827624599693, "phrase": "negligible_amount"}, {"score": 0.003093054709625219, "phrase": "directory-induced_invalidations"}, {"score": 0.0028729252198422825, "phrase": "tag-embedded_directory"}, {"score": 0.0028067105937184954, "phrase": "sparse_directory"}, {"score": 0.0026374845514245547, "phrase": "execution_time"}, {"score": 0.0025172781808293827, "phrase": "elaborated_sharing_codes"}, {"score": 0.0024688196796198766, "phrase": "extremely_large_core_counts"}, {"score": 0.0024025371556472557, "phrase": "icci's_dynamic_allocation"}, {"score": 0.002163089417146551, "phrase": "data_sharing"}, {"score": 0.0021049977753042253, "phrase": "core_count_increases"}], "paper_keywords": ["Cache coherence", " cache organization", " scalability", " multi-core", " energy-efficiency"], "paper_abstract": "In this paper we introduce ICCI, a new cache organization that leverages shared cache resources and flat coherence protocols to provide inexpensive hardware cache coherence for large core counts (e.g., 512), achieving execution times close to a non-scalable sparse directory while noticeably reducing the energy consumption of the memory system. Very simple changes in the system with respect to traditional bit-vector directories are enough to implement ICCI. Moreover, ICCI does not introduce any storage overhead with respect to a broadcast-based protocol, yet it provides large storage space for coherence information. ICCI makes smarter use of cache resources by dynamically allowing last-level cache entries to store blocks or sharing codes. This way, just the minimum number of directory entries required at runtime are allocated. Besides, ICCI suffers a negligible amount of directory-induced invalidations. Results for a 512-core CMP show that ICCI reduces the energy consumption of the memory system by up to 48 percent compared to a tag-embedded directory, up to 15 percent compared to a sparse directory, and up to 8 percent compared to the state-of-the-art Scalable Coherence Directory which ICCI also outperforms in execution time. In addition, ICCI can be used in combination with elaborated sharing codes to apply it to extremely large core counts. We also show analytically that ICCI's dynamic allocation of entries makes it a suitable candidate to store coherence information efficiently for very large core counts (e.g., over 200K cores), based on the observation that data sharing makes fewer directory entries necessary per core as core count increases.", "paper_title": "ICCI: In-Cache Coherence Information", "paper_id": "WOS:000351458800009"}