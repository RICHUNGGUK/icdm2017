{"auto_keywords": [{"score": 0.034510927288868586, "phrase": "oum"}, {"score": 0.014972553135079256, "phrase": "user_access"}, {"score": 0.013440416786675659, "phrase": "cloud_data"}, {"score": 0.011132288339290232, "phrase": "permissible_attempts"}, {"score": 0.00481495049065317, "phrase": "cloud-based_data_synchronization"}, {"score": 0.0047310525657970615, "phrase": "main_issues"}, {"score": 0.004648609688625397, "phrase": "cloud_environment"}, {"score": 0.0045037997020733415, "phrase": "controlled_and_flexible_way"}, {"score": 0.0042126709243529275, "phrase": "additional_leakage"}, {"score": 0.004139223748460922, "phrase": "automatic_revocation"}, {"score": 0.003912655174107315, "phrase": "effective_time_period"}, {"score": 0.0038715697646612766, "phrase": "time-oriented_approach"}, {"score": 0.0036467403626789666, "phrase": "exact_time_anticipation"}, {"score": 0.0035957586558176932, "phrase": "easy_choice"}, {"score": 0.0035330290755534234, "phrase": "alternate_solution"}, {"score": 0.00329282940819675, "phrase": "oblivious_user_management"}, {"score": 0.0030689098754563982, "phrase": "time_restriction"}, {"score": 0.0030366573271799406, "phrase": "user_authorization"}, {"score": 0.002790511479398411, "phrase": "different_access_parameters"}, {"score": 0.002770920590799572, "phrase": "user_end"}, {"score": 0.002646880721119838, "phrase": "valid_attempts"}, {"score": 0.0025733173062050018, "phrase": "user_attempts"}, {"score": 0.002449454693767392, "phrase": "particular_user"}, {"score": 0.0023897719795915, "phrase": "evaluation_results"}, {"score": 0.002282755117032059, "phrase": "cloud_storage"}, {"score": 0.002258745901862197, "phrase": "performance_analysis"}, {"score": 0.002234988641498543, "phrase": "google_app_engine"}], "paper_keywords": ["Cloud storage", " Private matching", " Oblivious access", " Privacy"], "paper_abstract": "One of the main issues with data sharing in cloud environment is to manage user access and its auto revocation in a controlled and flexible way. The issue becomes more complex when privacy on user access has to be ensured as well to hide additional leakage of information. For automatic revocation over cloud data, access can be bounded within certain anticipated time limit so that the access expires beyond effective time period. This time-oriented approach is more rigid and not a one-size-fits-all solution. In certain circumstances, exact time anticipation is not an easy choice. Instead, the alternate solution could be task oriented to restrict user beyond certain number of permissible attempts to access the data. We have proposed oblivious user management (OUM) in which a user can have access on cloud data for certain number of attempts without imposing any time restriction. For user authorization and her subsequent revocation, owner will perform one time setup activity and that is same for all users. The model also alleviates the burden of managing different access parameters at user end with each request as she will always use the same parameter for all valid attempts. Our approach also conceals the privacy of user attempts throughout the communication. Hiding this information helps to avoid distinguishing importance of particular user that has more authorization over others. Evaluation results have proved that OUM hides number of permissible attempts until request arrives at Cloud Storage. The Performance analysis conducted on Google App Engine revealed that the cost of operations performed in OUM is within the range of 0.097-0.278 $ per 1,000 requests.", "paper_title": "Oblivious user management for cloud-based data synchronization", "paper_id": "WOS:000352360300010"}