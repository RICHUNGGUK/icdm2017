{"auto_keywords": [{"score": 0.034287434471945516, "phrase": "api_calls"}, {"score": 0.032130598823801926, "phrase": "source_code"}, {"score": 0.015719716506582538, "phrase": "software_applications"}, {"score": 0.013931985094646658, "phrase": "software_projects"}, {"score": 0.013191802238045251, "phrase": "automatic_categorization_approaches"}, {"score": 0.004777214679969785, "phrase": "domain_categories"}, {"score": 0.004739773204474094, "phrase": "software_repositories"}, {"score": 0.004485735417293941, "phrase": "properly_categorized_applications"}, {"score": 0.004295681900150244, "phrase": "maintenance_problems"}, {"score": 0.004228577663320847, "phrase": "manual_categorization"}, {"score": 0.003986103192038901, "phrase": "widespread_importance"}, {"score": 0.003908396188878932, "phrase": "different_legal_and_organizational_reasons"}, {"score": 0.0038624981944755813, "phrase": "applications'_source_code"}, {"score": 0.003527998934981411, "phrase": "novel_approach"}, {"score": 0.003445591238183763, "phrase": "programming_interface"}, {"score": 0.0034185812873216547, "phrase": "api"}, {"score": 0.0033651019362620866, "phrase": "third-party_libraries"}, {"score": 0.00314708280192844, "phrase": "different_categorization_algorithms"}, {"score": 0.0026986685585382347, "phrase": "machine_learning_algorithms"}, {"score": 0.0026774738852854427, "phrase": "software_categorization"}, {"score": 0.0025038930574283174, "phrase": "closed-source_repository"}, {"score": 0.002323142666222693, "phrase": "new_approach"}, {"score": 0.0022070310530794097, "phrase": "small_number"}, {"score": 0.0021049977753042253, "phrase": "comprehensive_empirical_evaluation"}], "paper_keywords": ["Closed-source", " Open-source", " Software categorization", " Machine learning"], "paper_abstract": "Software repositories hold applications that are often categorized to improve the effectiveness of various maintenance tasks. Properly categorized applications allow stakeholders to identify requirements related to their applications and predict maintenance problems in software projects. Manual categorization is expensive, tedious, and laborious - this is why automatic categorization approaches are gaining widespread importance. Unfortunately, for different legal and organizational reasons, the applications' source code is often not available, thus making it difficult to automatically categorize these applications. In this paper, we propose a novel approach in which we use Application Programming Interface (API) calls from third-party libraries for automatic categorization of software applications that use these API calls. Our approach is general since it enables different categorization algorithms to be applied to repositories that contain both source code and bytecode of applications, since API calls can be extracted from both the source code and byte-code. We compare our approach to a state-of-the-art approach that uses machine learning algorithms for software categorization, and conduct experiments on two large Java repositories: an open-source repository containing 3,286 projects and a closed-source repository with 745 applications, where the source code was not available. Our contribution is twofold: we propose a new approach that makes it possible to categorize software projects without any source code using a small number of API calls as attributes, and furthermore we carried out a comprehensive empirical evaluation of automatic categorization approaches.", "paper_title": "On using machine learning to automatically classify software applications into domain categories", "paper_id": "WOS:000334442700005"}