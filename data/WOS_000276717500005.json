{"auto_keywords": [{"score": 0.03444175794330928, "phrase": "csp"}, {"score": 0.02120301634236252, "phrase": "fdr"}, {"score": 0.00481495049065317, "phrase": "interaction_components"}, {"score": 0.0047515546458205046, "phrase": "component-based_development"}, {"score": 0.0044272138900038095, "phrase": "widely_disseminated_status"}, {"score": 0.003877329308854808, "phrase": "reliable_architectures"}, {"score": 0.0037260386566859197, "phrase": "conformance_notions"}, {"score": 0.003660700128133065, "phrase": "precise_nature"}, {"score": 0.00353342812142574, "phrase": "coordination_patterns"}, {"score": 0.0033212215487678854, "phrase": "denotational_semantics"}, {"score": 0.0032774280543222843, "phrase": "process_algebra"}, {"score": 0.003163439005885435, "phrase": "common_activities"}, {"score": 0.0030399188412691914, "phrase": "component_specifications"}, {"score": 0.002986575805559931, "phrase": "contract_adaptations"}, {"score": 0.0029471818883482688, "phrase": "system_extensions"}, {"score": 0.00289546142998427, "phrase": "mechanical_verifications"}, {"score": 0.002721464488351771, "phrase": "test_characterisations"}, {"score": 0.002685558057339722, "phrase": "denotational_definitions"}, {"score": 0.002535344521369057, "phrase": "systematic_composition_strategy"}, {"score": 0.002512990657100351, "phrase": "software_frameworks"}, {"score": 0.0024148064819862337, "phrase": "behavioural_component_properties"}, {"score": 0.002279702500235741, "phrase": "coordination_pattern"}, {"score": 0.0022101055924375725, "phrase": "design_stage"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software components", " Frameworks", " Coordination patterns", " Composition predictability", " Conformance verification"], "paper_abstract": "In component-based development, software components are taken as units of composition. Nevertheless, to achieve the widely disseminated status of components being plugged together as simple 'Lego Pieces', the integration of components must be carefully designed, systematised and verified; only this can ensure reliable architectures. In this work, we propose some conformance notions to predict the precise nature of some forms of composition, considering coordination patterns used in the integration. These notions are formalised in terms of the denotational semantics of the process algebra CSP, and assist the designer in common activities during integration, such as the substitution of component specifications by implementations, contract adaptations, and system extensions. To support mechanical verifications using FDR (a model-checker for CSP), we derive test characterisations from the denotational definitions of conformance. We illustrate the application of these notions through a systematic composition strategy of software frameworks, and we mechanically verify the preservation of behavioural component properties in these compositions. Moreover, we characterise the well-formedness of a coordination pattern used in this strategy at the design stage, before components are assembled. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Conformance notions for the coordination of interaction components", "paper_id": "WOS:000276717500005"}