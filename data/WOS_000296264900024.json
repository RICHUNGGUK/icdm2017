{"auto_keywords": [{"score": 0.031763843900136826, "phrase": "pcf"}, {"score": 0.00481495049065317, "phrase": "standard_template_adaptive_parallel_library"}, {"score": 0.004662427600500598, "phrase": "parallel_programming_infrastructure"}, {"score": 0.004324985524216987, "phrase": "distributed_data_structures"}, {"score": 0.0040334640350288, "phrase": "parallel_methods"}, {"score": 0.003741371936431574, "phrase": "stapl_parallel_container_framework"}, {"score": 0.0034890505116128606, "phrase": "generic_parallel_containers"}, {"score": 0.0032016639006812826, "phrase": "existing_sequential_or_parallel_containers"}, {"score": 0.003050508020268648, "phrase": "concurrency_or_data_distribution_issues"}, {"score": 0.002953711377604328, "phrase": "large_number"}, {"score": 0.0029221312451219203, "phrase": "basic_parallel_data_structures"}, {"score": 0.0025822818714499795, "phrase": "class_hierarchy"}, {"score": 0.0025409639091476363, "phrase": "composition_mechanism"}, {"score": 0.0024209250169088575, "phrase": "current_container_base"}, {"score": 0.0023950275815082297, "phrase": "improved_application_expressivity"}, {"score": 0.0023189818169615135, "phrase": "stapl_pcontainer_performance"}, {"score": 0.0022333012657436307, "phrase": "pcontainer_methods"}, {"score": 0.002127765807039172, "phrase": "good_scalability"}], "paper_keywords": ["Parallel", " Programming", " Languages", " Libraries", " Data", " Structures", " Languages", " Design", " Performance"], "paper_abstract": "The Standard Template Adaptive Parallel Library (STAPL) is a parallel programming infrastructure that extends C++ with support for parallelism. It includes a collection of distributed data structures called pContainers that are thread-safe, concurrent objects, i.e., shared objects that provide parallel methods that can be invoked concurrently. In this work, we present the STAPL Parallel Container Framework (PCF), that is designed to facilitate the development of generic parallel containers. We introduce a set of concepts and a methodology for assembling a pContainer from existing sequential or parallel containers, without requiring the programmer to deal with concurrency or data distribution issues. The PCF provides a large number of basic parallel data structures (e.g., pArray, pList, pVector, pMatrix, pGraph, pMap, pSet). The PCF provides a class hierarchy and a composition mechanism that allows users to extend and customize the current container base for improved application expressivity and performance. We evaluate STAPL pContainer performance on a CRAY XT4 massively parallel system and show that pContainer methods, generic pAlgorithms, and different applications provide good scalability on more than 16,000 processors.", "paper_title": "The STAPL Parallel Container Framework", "paper_id": "WOS:000296264900024"}