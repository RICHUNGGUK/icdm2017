{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "feature_location"}, {"score": 0.015591788668102582, "phrase": "structural_similarity"}, {"score": 0.010564781320822947, "phrase": "proposed_approach"}, {"score": 0.009852102369189325, "phrase": "program_element"}, {"score": 0.004736045157669388, "phrase": "iterative_graph_mapping"}, {"score": 0.0045820747375409435, "phrase": "particular_feature"}, {"score": 0.004525629293824217, "phrase": "important_step"}, {"score": 0.004488384083300084, "phrase": "efficient_maintenance"}, {"score": 0.00443308765153716, "phrase": "software_system"}, {"score": 0.004378469469879815, "phrase": "existing_feature_location_techniques"}, {"score": 0.004236074477264561, "phrase": "one-time_analysis"}, {"score": 0.004149429072483132, "phrase": "initial_input"}, {"score": 0.0036502716977381004, "phrase": "iterative_context-aware_approach"}, {"score": 0.0033743949483348626, "phrase": "source_code"}, {"score": 0.003264547032549398, "phrase": "distinguishing_characteristics"}, {"score": 0.002968192753809507, "phrase": "feature-element_relevance"}, {"score": 0.0028715299874549245, "phrase": "iterative_process"}, {"score": 0.002789528662623221, "phrase": "established_mappings"}, {"score": 0.0026875205754965537, "phrase": "neighbouring_features"}, {"score": 0.002665362204725326, "phrase": "program_elements"}, {"score": 0.0025785359740308337, "phrase": "directbank"}, {"score": 0.0024637658150004314, "phrase": "linux"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Feature location", " Traceability recovery", " Information retrieval", " Structural similarity"], "paper_abstract": "Locating program element(s) relevant to a particular feature is an important step in efficient maintenance of a software system. The existing feature location techniques analyse each feature independently and perform a one-time analysis after being provided an initial input. As a result, these techniques are sensitive to the quality of the input. In this paper, we propose to address the above issues in feature location using an iterative context-aware approach. The underlying intuition is that features are not independent of each other, and the structure of source code resembles the structure of features. The distinguishing characteristics of the proposed approach are: (1) it takes into account the structural similarity between a feature and a program element to determine feature-element relevance and (2) it employs an iterative process to propagate the relevance of the established mappings between a feature and a program element to the neighbouring features and program elements. We evaluate our approach using two different systems, DirectBank, a small-scale industry financial system, and Linux kernel, a large-scale open-source operating system. Our evaluation suggests that the proposed approach is more robust and can significantly increase the recall of feature location with only a minor decrease of precision. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Improving feature location using structural similarity and iterative graph mapping", "paper_id": "WOS:000315013400006"}