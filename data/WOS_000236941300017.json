{"auto_keywords": [{"score": 0.041469740173514034, "phrase": "csp"}, {"score": 0.00481495049065317, "phrase": "open_procedural_programs"}, {"score": 0.004363846362238565, "phrase": "model_checking_tool"}, {"score": 0.0041136473765874815, "phrase": "game_semantics"}, {"score": 0.003728000957725218, "phrase": "safety_properties"}, {"score": 0.003312486229143855, "phrase": "assertion_violations"}, {"score": 0.0031845067058084583, "phrase": "array-out-of-bounds_errors"}, {"score": 0.0028293966058473476, "phrase": "data-abstraction_refinement_procedure"}, {"score": 0.0025137856138000014, "phrase": "infinite_integer_types"}, {"score": 0.0021049977753042253, "phrase": "unsafe_inputs"}], "paper_keywords": ["software model checking", " abstraction refinement", " game semantics", " CSP", " FDR"], "paper_abstract": "We present a model checking tool based on game semantics and CSP for verifying safety properties of software, such as assertion violations or array-out-of-bounds errors. The tool implements a data-abstraction refinement procedure applicable to open programs with infinite integer types. The procedure is guaranteed to terminate for unsafe inputs.", "paper_title": "A counterexample-guided refinement tool for open procedural programs", "paper_id": "WOS:000236941300017"}