{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "leakage_power"}, {"score": 0.01008776986646417, "phrase": "power_dissipation"}, {"score": 0.004774115617883476, "phrase": "btb_access_prediction"}, {"score": 0.004516962628112147, "phrase": "btb_data_array"}, {"score": 0.004459605573798577, "phrase": "first_method"}, {"score": 0.004291848822287492, "phrase": "entire_btb_data_array"}, {"score": 0.0041835168653521, "phrase": "drowsy_entry"}, {"score": 0.0040779081518317415, "phrase": "first_access"}, {"score": 0.00402610372759447, "phrase": "time_interval"}, {"score": 0.0037446875860947916, "phrase": "associated_performance_loss"}, {"score": 0.003468053168607071, "phrase": "specific_line"}, {"score": 0.0033660587983313536, "phrase": "second_method"}, {"score": 0.0031845067058084583, "phrase": "active_btb_entries"}, {"score": 0.0031440159350875057, "phrase": "predetermined_maximum"}, {"score": 0.0030127172247606812, "phrase": "performance_penalty"}, {"score": 0.002874595702192603, "phrase": "alb"}, {"score": 0.0027662954811372175, "phrase": "data_array"}, {"score": 0.0027194778713860715, "phrase": "window_method"}, {"score": 0.00268488398249084, "phrase": "third_method"}, {"score": 0.002539978170928796, "phrase": "identical_number"}, {"score": 0.0025183881730011597, "phrase": "combined_entries"}, {"score": 0.0024863459251358217, "phrase": "previous_method"}, {"score": 0.0023824468367751365, "phrase": "numerous_times"}, {"score": 0.00235213013487844, "phrase": "fixed_sequence"}, {"score": 0.0023024551893939403, "phrase": "next_btb_access"}, {"score": 0.002159623311924437, "phrase": "alb_method"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Computer architecture", " Microprocessors", " Branch prediction", " Dual voltage scaling", " Leakage power"], "paper_abstract": "This paper investigates three architectural methods to reduce the leakage power dissipated by the BTB data array. The first method (called here window) periodically places the entire BTB data array into drowsy mode. A drowsy entry is woken up by the first access in the time interval and remains active for the remainder of the interval (window). There is an associated performance loss which is related to the size of the window, since there is a delay when a specific line must be woken up. The second method, awake line buffer (ALB), limits the number of active BTB entries to a predetermined maximum. While this reduces power dissipation it comes with a performance penalty that is relative to the size of the buffer. ALB, however, reduces the power dissipation of the data array more than the window method. The third method, 2-level ALB (2L-ALB), uses a two level buffer with the identical number of combined entries as the previous method. This method exploits the fact that many branches operate numerous times in a fixed sequence. By predicting the next BTB access, 2L-ALB achieves further reduction in leakage power without incurring any further performance loss, compared to the ALB method. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Reducing leakage power with BTB access prediction", "paper_id": "WOS:000273177700004"}