{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "modeling_languages"}, {"score": 0.0047527118741586055, "phrase": "developing_software"}, {"score": 0.004600596158672458, "phrase": "growing_practice"}, {"score": 0.004039094712469991, "phrase": "model-driven_engineering"}, {"score": 0.0037844916274672544, "phrase": "software_engineering_tasks"}, {"score": 0.0033658327434624457, "phrase": "common_semantic_foundation"}, {"score": 0.0032792555200980783, "phrase": "underlying_modeling_language"}, {"score": 0.0030326180561817497, "phrase": "modeling_language_specification"}, {"score": 0.002804478352027886, "phrase": "programming_languages"}, {"score": 0.0023982749733789882, "phrase": "possible_semantics-based_approaches"}, {"score": 0.0021049977753042253, "phrase": "modeling_tools"}], "paper_keywords": ["model-based tools", " modeling languages", " semantics"], "paper_abstract": "Developing software from models is a growing practice and there exist many model-based tools (e. g., editors, interpreters, debuggers, and simulators) for supporting model-driven engineering. Even though these tools facilitate the automation of software engineering tasks and activities, such tools are typically engineered manually. However, many of these tools have a common semantic foundation centered around an underlying modeling language, which would make it possible to automate their development if the modeling language specification were formalized. Even though there has been much work in formalizing programming languages, with many successful tools constructed using such formalisms, there has been little work in formalizing modeling languages for the purpose of automation. This paper discusses possible semantics-based approaches for the formalization of modeling languages and describes how this formalism may be used to automate the construction of modeling tools.", "paper_title": "Challenges and Directions in Formalizing the Semantics of Modeling Languages", "paper_id": "WOS:000292705700002"}