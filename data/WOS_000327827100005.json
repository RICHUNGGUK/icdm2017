{"auto_keywords": [{"score": 0.04034190794741309, "phrase": "chen"}, {"score": 0.00481495049065317, "phrase": "makespan_minimization"}, {"score": 0.0047872135686404275, "phrase": "related_machines"}, {"score": 0.0046240999614456605, "phrase": "c-max_scheduling_problem"}, {"score": 0.004518442937844318, "phrase": "maximum_completion_time"}, {"score": 0.004427966503146096, "phrase": "independent_jobs"}, {"score": 0.004347983841027968, "phrase": "eptas"}, {"score": 0.004339293854115301, "phrase": "different_speeds"}, {"score": 0.003978866233891427, "phrase": "i.e._an_algorithm"}, {"score": 0.0036063061558261546, "phrase": "asymptotic_dependencies"}, {"score": 0.0034832884999421374, "phrase": "faster_direct_algorithms"}, {"score": 0.0033450437338616596, "phrase": "existing_approximation_scheme"}, {"score": 0.003240270399284566, "phrase": "polynomial_complexities"}, {"score": 0.0031937337757356526, "phrase": "practical_algorithms"}, {"score": 0.003156984631072011, "phrase": "hidden_large_constants"}, {"score": 0.003129699668848559, "phrase": "computational_complexity"}, {"score": 0.0030580836029381817, "phrase": "moderately_exponential_algorithm"}, {"score": 0.00265373679629359, "phrase": "oracle_framework"}, {"score": 0.002608040688794517, "phrase": "possible_answers"}, {"score": 0.0025117070259621376, "phrase": "critical_information"}, {"score": 0.002432971714608409, "phrase": "better_comprehension"}, {"score": 0.0022960713730673494, "phrase": "proposed_techniques"}, {"score": 0.0022630645070078554, "phrase": "classical_specific_cases"}, {"score": 0.0022305310659333864, "phrase": "identical_machines"}, {"score": 0.0021794454466797382, "phrase": "low_degree_polynomial"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Moderately exponential approximation", " Scheduling", " Makespan", " Related machines", " Oracle guess"], "paper_abstract": "We consider in this paper the classical Q parallel to C-max scheduling problem. The objective is to minimize the maximum completion time (called makespan) while scheduling independent jobs in parallel on machines that have different speeds. While several approximation schemes has been proposed (and in particular a recent EPTAS, Jansen, 2010 [121), the current best \"direct\" algorithm (i.e. an algorithm specifically designed for reaching a given approximation ratio) is still due to Chen (1991) [4] with a 1.382 ratio. Our objective in this work is not to provide yet another improvement of the asymptotic dependencies in 1/epsilon (ensuring a (1 + epsilon) ratio), but to design faster direct algorithms by targeting respectively 4/3 and 5/4 ratios. Indeed, instantiating any of the existing approximation scheme for epsilon = 1/3 (respectively 1/4) leads to polynomial complexities, but not to practical algorithms because of the hidden large constants in the computational complexity. Thus, our approach focuses on a moderately exponential algorithm and provides a (4/3 + epsilon) dual approximation algorithm running in O(m((1+1/3c)log(3(beta+1))) (m + n)), where m is the number of machines, n the number of jobs, beta an integer lower than m depending on the instance. This result is obtained through an oracle framework, where the algorithm guesses possible answers from an oracle. The terseness of the answers points out the critical information needed while solving any instance. Such an approach leads to a better comprehension of the problem. Similarly, we obtain the same kind of results for a 5/4 + epsilon ratio. Moreover, the proposed techniques seem promising for tackling classical specific cases (like scheduling on identical machines), as the complexity becomes a low degree polynomial when the speeds are non arbitrary. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Moderately exponential approximation for makespan minimization on related machines", "paper_id": "WOS:000327827100005"}