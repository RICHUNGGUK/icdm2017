{"auto_keywords": [{"score": 0.0426842971974867, "phrase": "property_specification_patterns"}, {"score": 0.00481495049065317, "phrase": "probabilistic_property_specification_patterns"}, {"score": 0.004761732436126133, "phrase": "structured_english_grammar"}, {"score": 0.004726579360618152, "phrase": "formal_methods"}, {"score": 0.004554650954322244, "phrase": "software_systems"}, {"score": 0.00452101969521343, "phrase": "mathematical_reasoning"}, {"score": 0.0043889488321824785, "phrase": "system_properties"}, {"score": 0.0043404186974790706, "phrase": "purely_mathematical_fashion"}, {"score": 0.004292422863834094, "phrase": "pragmatic_barriers"}, {"score": 0.003985680946956402, "phrase": "recurring_solutions"}, {"score": 0.003912469968653304, "phrase": "temporal_intricacies"}, {"score": 0.0038122196479548425, "phrase": "reactive_systems"}, {"score": 0.0036870776660851007, "phrase": "general_rules"}, {"score": 0.0035265659032655845, "phrase": "time_bounds"}, {"score": 0.0033730181385496186, "phrase": "comprehensive_framework"}, {"score": 0.002995361424576051, "phrase": "qualitative_and_quantitative_aspects"}, {"score": 0.0028331500847209984, "phrase": "new_property_specification_patterns"}, {"score": 0.0026996706283276407, "phrase": "unified_catalogue"}, {"score": 0.002534539169474629, "phrase": "natural_language_front-end"}, {"score": 0.0024786956187352327, "phrase": "temporal_logic"}, {"score": 0.002388337333984138, "phrase": "new_framework"}, {"score": 0.002309828105129336, "phrase": "industrial_requirements"}, {"score": 0.0021604504765314497, "phrase": "concrete_instances"}, {"score": 0.0021049977753042253, "phrase": "underlying_temporal_logic"}], "paper_keywords": ["Specification patterns", " real-time properties", " probabilistic properties"], "paper_abstract": "Formal methods offer an effective means to assert the correctness of software systems through mathematical reasoning. However, the need to formulate system properties in a purely mathematical fashion can create pragmatic barriers to the application of these techniques. For this reason, Dwyer et al. invented property specification patterns which is a system of recurring solutions to deal with the temporal intricacies that would make the construction of reactive systems very hard otherwise. Today, property specification patterns provide general rules that help practitioners to qualify order and occurrence, to quantify time bounds, and to express probabilities of events. Nevertheless, a comprehensive framework combining qualitative, real-time, and probabilistic property specification patterns has remained elusive. The benefits of such a framework are twofold. First, it would remove the distinction between qualitative and quantitative aspects of events; and second, it would provide a structure to systematically discover new property specification patterns. In this paper, we report on such a framework and present a unified catalogue that combines all known plus 40 newly identified or extended patterns. We also offer a natural language front-end to map patterns to a temporal logic of choice. To demonstrate the virtue of this new framework, we applied it to a variety of industrial requirements, and use PSPWizard, a tool specifically developed to work with our unified pattern catalogue, to automatically render concrete instances of property specification patterns to formulae of an underlying temporal logic of choice.", "paper_title": "Aligning Qualitative, Real-Time, and Probabilistic Property Specification Patterns Using a Structured English Grammar", "paper_id": "WOS:000358247100001"}