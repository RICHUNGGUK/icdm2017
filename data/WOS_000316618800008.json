{"auto_keywords": [{"score": 0.03573933092217054, "phrase": "n-order_mutation"}, {"score": 0.01422610839954825, "phrase": "artificial_faults"}, {"score": 0.013760027062866923, "phrase": "sut"}, {"score": 0.00481495049065317, "phrase": "second-order_mutation"}, {"score": 0.004545240514015278, "phrase": "effective_software_testing_technique"}, {"score": 0.004050116768809519, "phrase": "mutation_operators"}, {"score": 0.004011366422179016, "phrase": "different_operators"}, {"score": 0.003934970057482768, "phrase": "program_statement"}, {"score": 0.0037864980290391354, "phrase": "huge_number"}, {"score": 0.0036261282565554507, "phrase": "test_case_execution"}, {"score": 0.0035914198812657897, "phrase": "result_analysis"}, {"score": 0.0034725269588525534, "phrase": "cost_reduction"}, {"score": 0.0034392837410790293, "phrase": "mutation_testing"}, {"score": 0.0030058503645435455, "phrase": "good_n-order_mutants"}, {"score": 0.0027431953780099826, "phrase": "first-order_mutants"}, {"score": 0.002716915166374506, "phrase": "n-order_mutants"}, {"score": 0.0026142814606853037, "phrase": "second_approach"}, {"score": 0.0025521085778978042, "phrase": "second_use"}, {"score": 0.002443890721386284, "phrase": "undiscovered_faults"}, {"score": 0.0023066880707738736, "phrase": "test_suite_quality"}, {"score": 0.0022409963215568565, "phrase": "empirical_study"}, {"score": 0.002219516542316085, "phrase": "different_combination_strategies"}, {"score": 0.0021876814398268775, "phrase": "second-order_mutants"}, {"score": 0.0021049977753042253, "phrase": "cost-risk_analysis"}], "paper_keywords": ["Empirical evaluation", " high-order mutation", " mutation testing"], "paper_abstract": "Mutation has been recognized to be an effective software testing technique. It is based on the insertion of artificial faults in the system under test (SUT) by means of a set of mutation operators. Different operators can mutate each program statement in several ways, which may produce a huge number of mutants. This leads to very high costs for test case execution and result analysis. Several works have approached techniques for cost reduction in mutation testing, like n-order mutation where each mutant contains n artificial faults instead of one. There are two approaches to n-order mutation: increasing the effectiveness of mutation by searching for good n-order mutants, and decreasing the costs of mutation testing by reducing the mutants set through the combination of the first-order mutants into n-order mutants. This paper is focused on the second approach. However, this second use entails a risk: the possibility of leaving undiscovered faults in the SUT, which may distort the perception of the test suite quality. This paper describes an empirical study of different combination strategies to compose second-order mutants at system level as well as a cost-risk analysis of n-order mutation at system level.", "paper_title": "Validating Second-Order Mutation at System Level", "paper_id": "WOS:000316618800008"}