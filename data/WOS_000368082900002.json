{"auto_keywords": [{"score": 0.04727773653048965, "phrase": "boilerplate_code"}, {"score": 0.025419911459174736, "phrase": "haskell"}, {"score": 0.004459857205489101, "phrase": "royal_pain"}, {"score": 0.00441130431691048, "phrase": "generic_programming"}, {"score": 0.004108288481894523, "phrase": "generic_\"recipe"}, {"score": 0.003826007045267751, "phrase": "earlier_work"}, {"score": 0.003743102131902864, "phrase": "\"scrap_your_boilerplate\"_approach"}, {"score": 0.003602302241898501, "phrase": "haskell's_existing_type-class_mechanism"}, {"score": 0.002550481822137976, "phrase": "generic_function"}, {"score": 0.002508867228980776, "phrase": "type-specific_one"}, {"score": 0.002361992359512022, "phrase": "independently-useful_extensions"}, {"score": 0.0021994343316143125, "phrase": "ghc_implementation"}, {"score": 0.002128220632893247, "phrase": "required_type_classes"}, {"score": 0.0021049977753042253, "phrase": "user-defined_data_types"}], "paper_keywords": ["Design", " Languages", " Generic programming", " reflection", " zippers", " type cast"], "paper_abstract": "Writing boilerplate code is a royal pain. Generic programming promises to alleviate this pain by allowing the programmer to write a generic \"recipe\" for boilerplate code, and use that recipe in many places. In earlier work we introduced the \"Scrap your boilerplate\" approach to generic programming, which exploits Haskell's existing type-class mechanism to support generic transformations and queries. This paper completes the picture. We add a few extra \"introspective\" or \"reflective\" facilities, that together support a rich variety of serialisation and de-serialisation. We also show how to perform generic \"zips\", which at first appear to be somewhat tricky in our framework. Lastly, we generalise the ability to over-ride a generic function with a type-specific one. All of this can be supported in Haskell with independently-useful extensions: higher-rank types and type-safe cast. The GHC implementation of Haskell readily derives the required type classes for user-defined data types.", "paper_title": "Scrap More Boilerplate: Reflection, Zips, and Generalised Casts", "paper_id": "WOS:000368082900002"}