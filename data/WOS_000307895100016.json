{"auto_keywords": [{"score": 0.04304590109574224, "phrase": "response_time"}, {"score": 0.00481495049065317, "phrase": "load_balancer"}, {"score": 0.004756805752518494, "phrase": "sip_server_clusters"}, {"score": 0.00453113241842654, "phrase": "session_initiation_protocol"}, {"score": 0.004476434198887963, "phrase": "sip"}, {"score": 0.004289966839994858, "phrase": "sip_servers"}, {"score": 0.004036968488559984, "phrase": "single_node"}, {"score": 0.003939980614608312, "phrase": "single_interface"}, {"score": 0.0038923605771735838, "phrase": "external_clients"}, {"score": 0.003467696627998497, "phrase": "linux"}, {"score": 0.0031459887611258765, "phrase": "transaction_least-work-left"}, {"score": 0.0028890603352364273, "phrase": "sip_protocol"}, {"score": 0.0028541057064952876, "phrase": "dynamic_estimates"}, {"score": 0.0028195727965553367, "phrase": "back-end_server_load"}, {"score": 0.0026530590435527527, "phrase": "call_length"}, {"score": 0.0025578967205807843, "phrase": "processing_costs"}, {"score": 0.002526938673434697, "phrase": "different_sip_transactions"}, {"score": 0.002392188222609101, "phrase": "finer-grained_load_balancing"}, {"score": 0.0022923586577645143, "phrase": "throughput_improvements"}, {"score": 0.0022371907579775796, "phrase": "response-time_improvements"}, {"score": 0.0021049977753042253, "phrase": "detailed_analysis"}], "paper_keywords": ["Dispatcher", " load balancing", " performance", " server", " Session Initiation Protocol (SIP)"], "paper_abstract": "This paper introduces several novel load-balancing algorithms for distributing Session Initiation Protocol (SIP) requests to a cluster of SIP servers. Our load balancer improves both throughput and response time versus a single node while exposing a single interface to external clients. We present the design, implementation, and evaluation of our system using a cluster of Intel x86 machines running Linux. We compare our algorithms to several well-known approaches and present scalability results for up to 10 nodes. Our best algorithm, Transaction Least-Work-Left (TLWL), achieves its performance by integrating several features: knowledge of the SIP protocol, dynamic estimates of back-end server load, distinguishing transactions from calls, recognizing variability in call length, and exploiting differences in processing costs for different SIP transactions. By combining these features, our algorithm provides finer-grained load balancing than standard approaches, resulting in throughput improvements of up to 24% and response-time improvements of up to two orders of magnitude. We present a detailed analysis of occupancy to show how our algorithms significantly reduce response time.", "paper_title": "Design, Implementation, and Performance of a Load Balancer for SIP Server Clusters", "paper_id": "WOS:000307895100016"}