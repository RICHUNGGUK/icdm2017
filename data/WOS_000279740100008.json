{"auto_keywords": [{"score": 0.040893805544044294, "phrase": "requirements_changes"}, {"score": 0.029899346603175007, "phrase": "dsm"}, {"score": 0.00481495049065317, "phrase": "goal-driven_traceability-based_approach"}, {"score": 0.004581505405526037, "phrase": "requirements_engineering"}, {"score": 0.0044968982227349625, "phrase": "increasing_attention"}, {"score": 0.004332322079100859, "phrase": "impact_analysis"}, {"score": 0.004173743791750695, "phrase": "great_demand"}, {"score": 0.004096635798793164, "phrase": "systematic_approach"}, {"score": 0.00402094658848301, "phrase": "software_systems"}, {"score": 0.003946650265907885, "phrase": "traceability_relations"}, {"score": 0.003825849505589868, "phrase": "automatic_manner"}, {"score": 0.003662892058072211, "phrase": "goal-driven_requirements_traceability_approach"}, {"score": 0.0031746155143471725, "phrase": "goal-driven_use_case"}, {"score": 0.0029097582786754444, "phrase": "traceability_relation"}, {"score": 0.002855934865505357, "phrase": "design_structure_matrix"}, {"score": 0.0027341763737751467, "phrase": "traceability_tree"}, {"score": 0.002340081450249521, "phrase": "use_case_points"}, {"score": 0.0022967713922705, "phrase": "proposed_approach"}, {"score": 0.002226357953581725, "phrase": "benchmark_problem_domain"}, {"score": 0.0021851480717840484, "phrase": "meeting_scheduler_system"}, {"score": 0.0021049977753042253, "phrase": "wiley_periodicals"}], "paper_keywords": [""], "paper_abstract": "Recently, the growing popularity of requirements engineering attracts an increasing attention on requirements traceability and change impact analysis, which also imposes a great demand for a systematic approach in developing software systems to handling traceability relations and requirements changes in an automatic manner. In this work, a goal-driven requirements traceability approach is proposed to develop and manage requirements changes along three dimensions: (1) to develop software and manage requirements based on the goal-driven use case (GDUC) approach, (2) to establish and maintain the traceability relation with a design structure matrix (DSM) to derive the traceability tree, and (3) to analyze requirements change impacts through the partitioning of DSM into blocks to serve as a basis for calculating use case points. The proposed approach is illustrated by a benchmark problem domain of a meeting scheduler system. (c) 2010 Wiley Periodicals, Inc.", "paper_title": "Change Impact Analysis with a Goal-Driven Traceability-Based Approach", "paper_id": "WOS:000279740100008"}