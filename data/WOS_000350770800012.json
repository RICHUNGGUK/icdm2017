{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "range_analysis"}, {"score": 0.004746263721902197, "phrase": "allocate_bit-widths"}, {"score": 0.00467855218490191, "phrase": "arithmetic_datapaths"}, {"score": 0.004481132747216135, "phrase": "fixed-point_integer_bit-widths"}, {"score": 0.004230749292148046, "phrase": "fixed-point_representations"}, {"score": 0.004140490129683107, "phrase": "traditional_methods"}, {"score": 0.003690527690610707, "phrase": "coarse_bounds"}, {"score": 0.0035601676907962626, "phrase": "large_error_bounds"}, {"score": 0.003509317669345521, "phrase": "unnecessary_bits"}, {"score": 0.0032893028281789287, "phrase": "new_static_method"}, {"score": 0.0032190636347671675, "phrase": "fixed-point_range_analysis"}, {"score": 0.0031277316566463978, "phrase": "tighter_ranges"}, {"score": 0.003038983069081333, "phrase": "hybrid_method"}, {"score": 0.002995554770117301, "phrase": "icat"}, {"score": 0.0028689475587958917, "phrase": "interval_arithmetic"}, {"score": 0.0028279422436488116, "phrase": "consistency_checking"}, {"score": 0.00278752137116301, "phrase": "affine_arithmetic"}, {"score": 0.0024664004864629724, "phrase": "exact_solution"}, {"score": 0.0023451553255837317, "phrase": "comparable_methods"}, {"score": 0.002245975340642921, "phrase": "bit-width_allocation"}, {"score": 0.002166530105679438, "phrase": "better_results"}, {"score": 0.0021049977753042253, "phrase": "shorter_execution_time"}], "paper_keywords": ["Range analysis", " fixed-point datapaths", " interval arithmetic", " consistency", " affine arithmetic", " arithmetic transform"], "paper_abstract": "Range analysis determines allocation of fixed-point integer bit-widths, which is critical for arithmetic on fixed-point representations. The traditional methods, either simulation-based or static, can be time-consuming and produce coarse bounds, potentially leading to large error bounds and unnecessary bits. In this paper, we propose a new static method to perform fixed-point range analysis towards obtaining the tighter ranges efficiently. The hybrid method, ICAT, combines four techniques, including Interval arithmetic, consistency checking, affine arithmetic and arithmetic transform and is the only method that is aware how far it is from the exact solution. For the benchmarks available with comparable methods, we show that the bit-width allocation can be obtained with better results, and in shorter execution time.", "paper_title": "ICAT: Engine to Perform Range Analysis and Allocate Bit-Widths for Arithmetic Datapaths", "paper_id": "WOS:000350770800012"}