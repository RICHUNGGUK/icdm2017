{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "service_choreographies"}, {"score": 0.004771196027464407, "phrase": "service-oriented_computing"}, {"score": 0.004579147045265106, "phrase": "business_collaborations"}, {"score": 0.004496280772084575, "phrase": "organizational_boundaries"}, {"score": 0.004335000368745273, "phrase": "software_vendors"}, {"score": 0.004122604238556912, "phrase": "basic_services"}, {"score": 0.0040479661688863884, "phrase": "good_level"}, {"score": 0.003956558420993431, "phrase": "service_interaction"}, {"score": 0.0039027036493682887, "phrase": "global_viewpoint"}, {"score": 0.003711409222544974, "phrase": "open_challenge"}, {"score": 0.003660879039645457, "phrase": "main_problem"}, {"score": 0.0034813964296826973, "phrase": "key_feature"}, {"score": 0.003356396922662246, "phrase": "procedural_aspects"}, {"score": 0.0032955848190195343, "phrase": "over-constrained_and_over-specified_models"}, {"score": 0.0031339552246625463, "phrase": "decserflow"}, {"score": 0.002926212333939311, "phrase": "decserflow_semantics"}, {"score": 0.0028340217672278975, "phrase": "logic-based_languages"}, {"score": 0.0026704265616705023, "phrase": "linear_temporal_logic"}, {"score": 0.002634031703695684, "phrase": "abductive_logic_programming"}, {"score": 0.0024147474002390763, "phrase": "decserflow_models"}, {"score": 0.0022962183207691188, "phrase": "different_verification_tasks"}, {"score": 0.002203570941628287, "phrase": "declarative_language"}, {"score": 0.002163600705898299, "phrase": "logic-based_semantics"}, {"score": 0.0021049977753042253, "phrase": "running_example"}], "paper_keywords": ["Languages", " Management", " Verification", " Service choreographies", " declarative modeling", " linear temporal logic", " abductive logic programming", " conformance checking", " compliance verification", " monitoring", " interoperability", " reasoning"], "paper_abstract": "Service-oriented computing, an emerging paradigm for architecting and implementing business collaborations within and across organizational boundaries, is currently of interest to both software vendors and scientists. While the technologies for implementing and interconnecting basic services are reaching a good level of maturity, modeling service interaction from a global viewpoint, that is, representing service choreographies, is still an open challenge. The main problem is that, although declarativeness has been identified as a key feature, several proposed approaches specify choreographies by focusing on procedural aspects, leading to over-constrained and over-specified models. To overcome these limits, we propose to adopt DecSerFlow, a truly declarative language, to model choreographies. Thanks to its declarative nature, DecSerFlow semantics can be given in terms of logic-based languages. In particular, we present how DecSerFlow can be mapped onto Linear Temporal Logic and onto Abductive Logic Programming. We show how the mappings onto both formalisms can be concretely exploited to address the enactment of DecSerFlow models, to enrich its expressiveness and to perform a variety of different verification tasks. We illustrate the advantages of using a declarative language in conjunction with logic-based semantics by applying our approach to a running example.", "paper_title": "Declarative Specification and Verification of Service Choreographies", "paper_id": "WOS:000274028900003"}