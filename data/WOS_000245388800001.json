{"auto_keywords": [{"score": 0.04945540937697203, "phrase": "sensitivity_analysis"}, {"score": 0.00481495049065317, "phrase": "neural_networks"}, {"score": 0.00462919213721188, "phrase": "learning_method"}, {"score": 0.004588891098290524, "phrase": "two-layer_feedforward_neural_networks"}, {"score": 0.004431149592844886, "phrase": "linear_training_algorithm"}, {"score": 0.004260134699483774, "phrase": "random_values"}, {"score": 0.0041136473765874815, "phrase": "first_layer"}, {"score": 0.004024651422626329, "phrase": "initial_values"}, {"score": 0.003937573222812911, "phrase": "sensitivity_formulas"}, {"score": 0.0035141291835319682, "phrase": "linear_system"}, {"score": 0.003408091901859624, "phrase": "important_saving"}, {"score": 0.003378385493203297, "phrase": "computational_time"}, {"score": 0.0032764307492734145, "phrase": "local_sensitivities"}, {"score": 0.0032336801561165113, "phrase": "least_square_errors"}, {"score": 0.0031498398446368056, "phrase": "output_data"}, {"score": 0.0030951536886513567, "phrase": "extra_computational_cost"}, {"score": 0.0030414140732789186, "phrase": "necessary_information"}, {"score": 0.0029886047149545025, "phrase": "extra_calculations"}, {"score": 0.002725994306480105, "phrase": "initial_set"}, {"score": 0.0025750928944698673, "phrase": "theoretical_basis"}, {"score": 0.0023384629381463054, "phrase": "well_known_data_sets"}, {"score": 0.0022678201262721323, "phrase": "learning_speed"}, {"score": 0.002123531043641047, "phrase": "initialization_tool"}], "paper_keywords": ["supervised learning", " neural networks", " linear optimization", " least-squares", " initialization method", " sensitivity analysis"], "paper_abstract": "This paper introduces a learning method for two-layer feedforward neural networks based on sensitivity analysis, which uses a linear training algorithm for each of the two layers. First, random values are assigned to the outputs of the first layer; later, these initial values are updated based on sensitivity formulas, which use the weights in each of the layers; the process is repeated until convergence. Since these weights are learnt solving a linear system of equations, there is an important saving in computational time. The method also gives the local sensitivities of the least square errors with respect to input and output data, with no extra computational cost, because the necessary information becomes available without extra calculations. This method, called the Sensitivity-Based Linear Learning Method, can also be used to provide an initial set of weights, which significantly improves the behavior of other learning algorithms. The theoretical basis for the method is given and its performance is illustrated by its application to several examples in which it is compared with several learning algorithms and well known data sets. The results have shown a learning speed generally faster than other existing methods. In addition, it can be used as an initialization tool for other well known methods with significant improvements.", "paper_title": "A very fast learning method for neural networks based on sensitivity analysis", "paper_id": "WOS:000245388800001"}