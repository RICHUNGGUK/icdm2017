{"auto_keywords": [{"score": 0.03558706453911331, "phrase": "java"}, {"score": 0.014431448748280637, "phrase": "advanced"}, {"score": 0.004835742896045911, "phrase": "jml"}, {"score": 0.003540539868937462, "phrase": "formal_modular_verification"}, {"score": 0.0034215569542785907, "phrase": "modern_object-oriented_languages"}, {"score": 0.003306559295382181, "phrase": "necessary_extra_constructs"}, {"score": 0.0032173412933955117, "phrase": "object-oriented_module"}, {"score": 0.0028252518377336953, "phrase": "potential_problems"}, {"score": 0.0025848074189353397, "phrase": "class_invariants"}, {"score": 0.002463906556781983, "phrase": "information_hiding"}, {"score": 0.0024138345020219333, "phrase": "tutorial_paper"}, {"score": 0.002364777610365689, "phrase": "jml's_realization"}, {"score": 0.0021049977753042253, "phrase": "stated_problems"}], "paper_keywords": [""], "paper_abstract": "Many state-based specification languages, including the Java Modeling Language (JML), contain at their core specification constructs familiar to most undergraduates: e.g., assertions, pre- and postconditions, and invariants. Unfortunately, these constructs are not sufficiently expressive to permit formal modular verification of programs written in modern object-oriented languages like Java. The necessary extra constructs for specifying an object-oriented module include (perhaps the less familiar) frame properties, datagroups, and ghost and model fields. These constructs help specifiers deal with potential problems related to, for example, unexpected side effects, aliasing, class invariants, inheritance, and lack of information hiding. This tutorial paper focuses on JML's realization of these constructs, explaining their meaning while illustrating how they can be used to address the stated problems.", "paper_title": "Beyond assertions: Advanced specification and verification with JML and ESC/Java2", "paper_id": "WOS:000240360000016"}