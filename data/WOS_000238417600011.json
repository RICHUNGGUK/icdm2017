{"auto_keywords": [{"score": 0.03967711273542651, "phrase": "execution_time"}, {"score": 0.03580806098011901, "phrase": "partial_order"}, {"score": 0.004837531808291194, "phrase": "time"}, {"score": 0.0044634416051962545, "phrase": "particular_partial-ordered_set"}, {"score": 0.004232702713825967, "phrase": "software_testing"}, {"score": 0.0040444053843446326, "phrase": "test_cases"}, {"score": 0.002896167001212006, "phrase": "time_unbalanced_partial_order"}, {"score": 0.0023952639120005193, "phrase": "participating_processes"}, {"score": 0.002153540857619362, "phrase": "minimal_and_maximal_bounds"}, {"score": 0.0021049977753042253, "phrase": "time_parameter"}], "paper_keywords": [""], "paper_abstract": "Calculating the precondition of a particular partial-ordered set of events is often necessary in software testing, such as for generating test cases. Things become even more complicated when the execution time is added to the picture. If the execution time of two processes along a partial order does not match each other, the precondition of the partial order is false and then the partial order is identified as time unbalanced partial order. We present its formal definition and an algorithm to distinguish it. Then we suggest a method to fill the gap of the execution time of participating processes. This method can also be adopted to simplify the calculation of the minimal and maximal bounds of a time parameter.", "paper_title": "Time unbalanced partial order", "paper_id": "WOS:000238417600011"}