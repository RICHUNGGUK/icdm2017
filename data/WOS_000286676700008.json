{"auto_keywords": [{"score": 0.03531738520573261, "phrase": "constraint_expressions"}, {"score": 0.00481495049065317, "phrase": "semi-proving"}, {"score": 0.004388875715684717, "phrase": "debugging"}, {"score": 0.004222515162635615, "phrase": "integrated_method"}, {"score": 0.00415777266387528, "phrase": "program_proving"}, {"score": 0.0038189638340666936, "phrase": "metamorphic_relations"}, {"score": 0.003702702337768558, "phrase": "necessary_properties"}, {"score": 0.0036459007842756983, "phrase": "target_programs"}, {"score": 0.0035076666315744525, "phrase": "global_symbolic_evaluation"}, {"score": 0.003051887221639784, "phrase": "necessary_conditions"}, {"score": 0.003005039427642664, "phrase": "program_correctness"}, {"score": 0.002554406040896888, "phrase": "symbolic-testing_approach"}, {"score": 0.0023278569001363263, "phrase": "tested_inputs"}, {"score": 0.00218807532188779, "phrase": "related_untested_inputs"}, {"score": 0.0021049977753042253, "phrase": "automatic_debugging"}], "paper_keywords": ["Software/program verification", " symbolic execution", " testing and debugging"], "paper_abstract": "We present an integrated method for program proving, testing, and debugging. Using the concept of metamorphic relations, we select necessary properties for target programs. For programs where global symbolic evaluation can be conducted and the constraint expressions involved can be solved, we can either prove that these necessary conditions for program correctness are satisfied or identify all inputs that violate the conditions. For other programs, our method can be converted into a symbolic-testing approach. Our method extrapolates from the correctness of a program for tested inputs to the correctness of the program for related untested inputs. The method supports automatic debugging through the identification of constraint expressions that reveal failures.", "paper_title": "Semi-Proving: An Integrated Method for Program Proving, Testing, and Debugging", "paper_id": "WOS:000286676700008"}