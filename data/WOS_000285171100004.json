{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "xml_schemas"}, {"score": 0.015553775575606972, "phrase": "stereotyped_uml_class_models"}, {"score": 0.015146876710672393, "phrase": "xml"}, {"score": 0.012342823637177926, "phrase": "conceptual_model"}, {"score": 0.01173389657937066, "phrase": "uml_profiles"}, {"score": 0.011640502441827008, "phrase": "uml_class_models"}, {"score": 0.00872637389196876, "phrase": "evolution_tasks"}, {"score": 0.004662452879338915, "phrase": "uml"}, {"score": 0.004551199992546761, "phrase": "software_engineering_processes"}, {"score": 0.004395185177346749, "phrase": "model_evolution"}, {"score": 0.004290305466333274, "phrase": "xml_schema"}, {"score": 0.004165497627464024, "phrase": "corresponding_xml_documents"}, {"score": 0.003947765701573287, "phrase": "evolution_framework"}, {"score": 0.0037213333316218522, "phrase": "uml_class_model"}, {"score": 0.003479692058963528, "phrase": "domain_specific_semantics"}, {"score": 0.0034057193921138078, "phrase": "metamodeling_approach"}, {"score": 0.003342280102112269, "phrase": "language_independent_framework"}, {"score": 0.0032888418378433037, "phrase": "specific_case"}, {"score": 0.0032712190037495975, "phrase": "uml-xml."}, {"score": 0.0032189132350239013, "phrase": "traceability_setting"}, {"score": 0.0031930738164349533, "phrase": "key_aspect"}, {"score": 0.003167441161387607, "phrase": "transformation_process"}, {"score": 0.0030097975788892896, "phrase": "general_framework"}, {"score": 0.002969628818856786, "phrase": "generic_evolution_architecture"}, {"score": 0.0029221312451219203, "phrase": "model-driven_engineering_context"}, {"score": 0.002859977408815691, "phrase": "particular_case"}, {"score": 0.002837011101431263, "phrase": "uml-to-xml_setting"}, {"score": 0.0027916287357898544, "phrase": "uml-to-xml_framework"}, {"score": 0.0023950275815082297, "phrase": "different_elements"}, {"score": 0.002203472722116439, "phrase": "paper_help"}, {"score": 0.0021798963627236915, "phrase": "work_overload"}, {"score": 0.002162379426839795, "phrase": "software_engineers"}, {"score": 0.0021450029487459403, "phrase": "different_software_artifacts"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Model evolution and maintenance", " UML profiles", " XML"], "paper_abstract": "Context: UML and XML are two of the most commonly used languages in software engineering processes. One of the most critical of these processes is that of model evolution and maintenance. More specifically, when an XML schema is modified, the changes should be propagated to the corresponding XML documents, which must conform with the new, modified schema. Objective: The goal of this paper is to provide an evolution framework by which the XML schema and documents are incrementally updated according to the changes in the conceptual model (expressed as a UML class model). In this framework, we include the transformation and evolution of UML profiles specified in UML class models because they are widely used to capture domain specific semantics. Method: We have followed a metamodeling approach which allowed us to achieve a language independent framework, not tied to the specific case of UML-XML. Besides, our proposal considers a traceability setting as a key aspect of the transformation process which allows changes to be propagated from UML class models to both XML schemas and documents. Results: As a general framework, we propose a Generic Evolution Architecture (GEA) for the model-driven engineering context. Within this architecture and for the particular case of the UML-to-XML setting, our contribution is a UML-to-XML framework that, to our knowledge, is the only approach that incorporates the following four characteristics. Firstly, the evolution tasks are carried out in a conceptual model. Secondly, our approach includes the transformation to XML of UML profiles. Thirdly, the proposal allows stereotyped UML class models to be evolved, propagating changes to XML schemas and documents in such a way that the different elements are kept in synch. Finally, we propose a traceability setting that enables evolution tasks to be performed seamlessly. Conclusions: Generic frameworks such as that proposed in this paper help to reduce the work overload experienced by software engineers in keeping different software artifacts synchronized. (c) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Evolution of XML schemas and documents from stereotyped UML class models: A traceable approach", "paper_id": "WOS:000285171100004"}