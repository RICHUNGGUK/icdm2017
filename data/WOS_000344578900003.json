{"auto_keywords": [{"score": 0.032974481194085324, "phrase": "domain-specific_patterns"}, {"score": 0.00481495049065317, "phrase": "identical_design_structures"}, {"score": 0.004771196027464407, "phrase": "object-oriented_design_models"}, {"score": 0.004706305193222972, "phrase": "object-oriented_approach"}, {"score": 0.004374772264092067, "phrase": "design_quality"}, {"score": 0.004335000368745273, "phrase": "object-oriented_software_systems"}, {"score": 0.004179480763003705, "phrase": "unique_design_motifs"}, {"score": 0.004066498558415824, "phrase": "specific_application_domains"}, {"score": 0.0040111533608228195, "phrase": "commonly_used_technique"}, {"score": 0.0037971749182744334, "phrase": "new_modules"}, {"score": 0.0037284065559949064, "phrase": "object-oriented_programs"}, {"score": 0.0035781807623238905, "phrase": "sub-graph_mining-based_approach"}, {"score": 0.003465521267039616, "phrase": "object-oriented_systems"}, {"score": 0.0032805541677236325, "phrase": "useful_information"}, {"score": 0.003177235604998673, "phrase": "commonly-used_design_patterns"}, {"score": 0.0030771609361092164, "phrase": "reused_design_clones"}, {"score": 0.002926212333939311, "phrase": "software_architecture"}, {"score": 0.0028731719610706214, "phrase": "problematic_parts"}, {"score": 0.0028470123663391126, "phrase": "frequent_identical_design_structures"}, {"score": 0.0028210902750714075, "phrase": "appropriate_refactoring_opportunities"}, {"score": 0.002769950045729965, "phrase": "multiple_areas"}, {"score": 0.002360132221690264, "phrase": "detected_identical_structures"}, {"score": 0.0023067494372458427, "phrase": "common_design_patterns"}, {"score": 0.0021834945657804193, "phrase": "design_parts"}, {"score": 0.002163600705898299, "phrase": "design-level_clones"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software design models", " Identical design structures", " Software motifs", " Pattern extraction", " Graph mining"], "paper_abstract": "The object-oriented approach has been the most popular software design methodology for the past twenty-five years. Several design patterns and principles are defined to improve the design quality of object-oriented software systems. In addition, designers can use unique design motifs that are designed for the specific application domains. Another commonly used technique is cloning and modifying some parts of the software while creating new modules. Therefore, object-oriented programs can include many identical design Structures. This work proposes a sub-graph mining-based approach for detecting identical design structures in object-oriented systems. By identifying and analyzing these structures, we can obtain useful information about the design, such as commonly-used design patterns, most frequent design defects, domain-specific patterns, and reused design clones, which could help developers to improve their knowledge about the software architecture. Furthermore, problematic parts of frequent identical design structures are appropriate refactoring opportunities because they affect multiple areas of the architecture. Experiments with several open-source and industrial projects show that we can successfully find many identical design structures within a project (intra-project) and between different projects (inter-project). We observe that usually most of the detected identical structures are an implementation of common design patterns; however, we also detect various anti-patterns, domain-specific patterns, reused design parts and design-level clones. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A graph mining approach for detecting identical design structures in object-oriented design models", "paper_id": "WOS:000344578900003"}