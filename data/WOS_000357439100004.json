{"auto_keywords": [{"score": 0.04943159058562837, "phrase": "software_product_lines"}, {"score": 0.03975211890998318, "phrase": "existing_products"}, {"score": 0.00481495049065317, "phrase": "safe_evolution"}, {"score": 0.0046432244185370605, "phrase": "related_software_products"}, {"score": 0.00460125407969429, "phrase": "reusable_assets"}, {"score": 0.004518442937844318, "phrase": "product_line_strategy"}, {"score": 0.004457309741979921, "phrase": "significant_quality"}, {"score": 0.004417012437860011, "phrase": "productivity_improvements"}, {"score": 0.00429828390000229, "phrase": "product_line"}, {"score": 0.004051828608343507, "phrase": "new_features"}, {"score": 0.0035515951985356374, "phrase": "different_types"}, {"score": 0.0031845067058084583, "phrase": "concrete_evolution_scenarios"}, {"score": 0.0031556799865964974, "phrase": "five_different_product_lines"}, {"score": 0.0030017207229983385, "phrase": "generic_transformations"}, {"score": 0.0029076695661972114, "phrase": "compositional_and_annotative_product_lines"}, {"score": 0.0026548344763838213, "phrase": "evolution_history"}, {"score": 0.0026188490199688013, "phrase": "product_lines"}, {"score": 0.002391067964886602, "phrase": "analyzed_scenarios"}], "paper_keywords": ["Software product lines", " Refinement", " Evolution"], "paper_abstract": "Software product lines enable generating related software products from reusable assets. Adopting a product line strategy can bring significant quality and productivity improvements. However, evolving a product line can be risky, since it might impact many products. When introducing new features or improving its design, it is important to make sure that the behavior of existing products is not affected. To ensure that, one usually has to analyze different types of artifacts, an activity that can lead to errors. To address this issue, in this work we discover and analyze concrete evolution scenarios from five different product lines. We discover a total of 13 safe evolution templates, which are generic transformations that developers can apply when evolving compositional and annotative product lines, with the goal of preserving the behavior of existing products. We also evaluate the templates by analyzing the evolution history of these product lines. In this evaluation, we observe that the templates can address the modifications that developers performed in the analyzed scenarios, which corroborates the expressiveness of our template set. We also observe that the templates could also have helped to avoid the errors that we identified during our analysis. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Safe evolution templates for software product lines", "paper_id": "WOS:000357439100004"}