{"auto_keywords": [{"score": 0.03585763428068604, "phrase": "quality_improvement"}, {"score": 0.00481495049065317, "phrase": "clone-based_refactoring"}, {"score": 0.004757643419056999, "phrase": "competent_ga._refactoring"}, {"score": 0.004701015188740582, "phrase": "widely_accepted_technique"}, {"score": 0.004626553103375699, "phrase": "software_quality"}, {"score": 0.004039221742250308, "phrase": "final_design"}, {"score": 0.003927848423072668, "phrase": "application_order"}, {"score": 0.0038348235692738783, "phrase": "different_quality_improvements"}, {"score": 0.003684634192576662, "phrase": "proper_refactoring_schedule"}, {"score": 0.0034426417353349567, "phrase": "appropriate_schedules"}, {"score": 0.0032164910932827168, "phrase": "appropriate_schedule"}, {"score": 0.0030904433394138963, "phrase": "code_clones"}, {"score": 0.002818909613625567, "phrase": "exhaustively_enumerated_schedules"}, {"score": 0.002753198065268483, "phrase": "np"}, {"score": 0.0026654155072292707, "phrase": "available_refactorings_increases"}, {"score": 0.002612640527241776, "phrase": "genetic_algorithm"}, {"score": 0.0025921305387470416, "phrase": "ga"}, {"score": 0.0025405019456703325, "phrase": "best_refactoring_schedule"}, {"score": 0.0025101968585850474, "phrase": "reasonable_time"}, {"score": 0.0024117603727471675, "phrase": "ga-based_approach"}, {"score": 0.0023079225317714815, "phrase": "exhaustive_approaches"}, {"score": 0.0022262909736042212, "phrase": "proposed_ga-based_approach"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["refactoring", " scheduling", " genetic algorithm"], "paper_abstract": "Refactoring is a widely accepted technique to improve the software quality by restructuring its design without changing its behavior. In general, a sequence of refactorings needs to be applied until the quality of the code is improved satisfactorily. In this case, the final design after refactoring can vary with the application order of refactorings, thereby producing different quality improvements. Therefore, it is necessary to determine a proper refactoring schedule to obtain as many benefits as possible. However, there is little research on the problem of generating appropriate schedules to maximize quality improvement. In this paper, we propose an approach to automatically determine an appropriate schedule to maximize quality improvement through refactoring. We first detect code clones that are suitable for refactoring and generate the most beneficial refactoring schedule to remove them. It is straightforward to select the best from the exhaustively enumerated schedules. However, such a technique becomes NP-hard, as the number of available refactorings increases. We apply a genetic algorithm (GA) to generate the best refactoring schedule within a reasonable time to cope with this problem. We compare the GA-based approach with manual scheduling, greedy heuristic-based, and exhaustive approaches for four open systems. The results show that the proposed GA-based approach generates more beneficial schedules than the others. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Automated scheduling for clone-based refactoring using a competent GA", "paper_id": "WOS:000288512200004"}