{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "feature_mappings"}, {"score": 0.015533754789388045, "phrase": "program_families"}, {"score": 0.010560990855209269, "phrase": "family_member_version"}, {"score": 0.004700468701207975, "phrase": "explicit_mappings"}, {"score": 0.004497576466646301, "phrase": "critical_factors"}, {"score": 0.00440825801245188, "phrase": "software_systems"}, {"score": 0.004068302313449334, "phrase": "similar_but_different_systems"}, {"score": 0.0037999551521987426, "phrase": "feature_mapping_activity"}, {"score": 0.003739421738326676, "phrase": "existing_techniques"}, {"score": 0.0036798490617699227, "phrase": "feature_mapping"}, {"score": 0.0035635256137029592, "phrase": "single_program_version"}, {"score": 0.0034926916198124484, "phrase": "existing_approaches"}, {"score": 0.0030962064913500164, "phrase": "cohesive_suite"}, {"score": 0.003071429173571846, "phrase": "five_mapping_heuristics"}, {"score": 0.0029623549392492777, "phrase": "evolution_history"}, {"score": 0.0029268619875960715, "phrase": "family_members"}, {"score": 0.0028456853685842293, "phrase": "evolving_program_families"}, {"score": 0.002604890546456604, "phrase": "mapping_expansion"}, {"score": 0.0025736694380861604, "phrase": "seed_mappings"}, {"score": 0.0024922258873137093, "phrase": "program_family"}, {"score": 0.0024133533748653033, "phrase": "demand_algorithms"}, {"score": 0.0023463854193479274, "phrase": "maphist_tool"}, {"score": 0.0022630008787375435, "phrase": "proposed_heuristics"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["evolving program families", " feature mappings", " heuristics", " experimental evaluation"], "paper_abstract": "Establishing explicit mappings between features and their implementation elements in code is one of the critical factors to maintain and evolve software systems successfully. This is especially important when developers have to evolve program families, which have evolved from one single core system to similar but different systems to accommodate various requirements from customers. Many techniques and tools have emerged to assist developers in the feature mapping activity. However, existing techniques and tools for feature mapping are limited as they operate on a single program version individually. Additionally, existing approaches are limited to recover features on demand, that is, developers have to run the tools for each family member version individually. In this paper, we propose a cohesive suite of five mapping heuristics addressing those two limitations. These heuristics explore the evolution history of the family members in order to expand feature mappings in evolving program families. The expansion refers to the action of automatically generating the feature mappings for each family member version by systematically considering its previous change history. The mapping expansion starts from seed mappings and continually tracks the features of the program family, thus eliminating the need of on demand algorithms. Additionally, we present the MapHist tool that provides support to the application of the proposed heuristics. We evaluate the accuracy of our heuristics through two evolving program families from our industrial partners. Copyright (C) 2013 John Wiley & Sons, Ltd.", "paper_title": "Heuristic expansion of feature mappings in evolving program families", "paper_id": "WOS:000344733400002"}