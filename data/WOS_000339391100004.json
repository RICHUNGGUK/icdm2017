{"auto_keywords": [{"score": 0.03261638306028882, "phrase": "vcc"}, {"score": 0.015017036895132492, "phrase": "sple"}, {"score": 0.00481495049065317, "phrase": "early_software_product_line_specifications"}, {"score": 0.004650896226390719, "phrase": "software_product_line_engineering"}, {"score": 0.004492406361795448, "phrase": "successful_paradigm"}, {"score": 0.004264697351852424, "phrase": "specific_domain"}, {"score": 0.00402514392911723, "phrase": "different_models"}, {"score": 0.003955926499405168, "phrase": "early_spl_specification"}, {"score": 0.0038654774211631564, "phrase": "inconsistent_information"}, {"score": 0.0037121208432871118, "phrase": "inconsistent_products"}, {"score": 0.0033644530302903513, "phrase": "high_number"}, {"score": 0.0033257460346754687, "phrase": "possible_combinations"}, {"score": 0.003287482882222731, "phrase": "product_features"}, {"score": 0.0032496585171039797, "phrase": "model_fragments"}, {"score": 0.003031650815900696, "phrase": "automatic_means"}, {"score": 0.0027475383418803724, "phrase": "base_models"}, {"score": 0.002548331088496964, "phrase": "user-defined_consistency_constraints"}, {"score": 0.002447101794397243, "phrase": "satisfying_assignment"}, {"score": 0.0023635334350706415, "phrase": "vcc."}, {"score": 0.0022434880661725493, "phrase": "different_application_domains"}, {"score": 0.0021049977753042253, "phrase": "significant_performance_penalties"}], "paper_keywords": ["Model-Driven Development", " Variability Modeling", " Verification", " Model-Based Software Product Lines", " Requirements Engineering", " Architecture Design", " Feature Modeling Analysis", " Variability-Intensive Systems", " Highly Configurable Systems"], "paper_abstract": "Software Product Line Engineering (SPLE) is a successful paradigm to produce a family of products for a specific domain. A challenge in SPLE is to check that different models used in early SPL specification do not contain inconsistent information that may be propagated and generate inconsistent products that do not conform to its requirements. This challenge is difficult to address due to the high number of possible combinations of product features and model fragments specifying those features. Variability Consistency Checking (VCC) offers automatic means to address that challenge. VCC relates information inferred from the relationships between features and from base models related to those features. Validating if all the products in an SPL satisfy user-defined consistency constraints is based on searching for a satisfying assignment of each formula generated by VCC. We validated VCC and its supporting tool on two case studies from different application domains, the results were encouraging as we did not observed significant performance penalties.", "paper_title": "Consistency Checking in Early Software Product Line Specifications - The VCC Approach", "paper_id": "WOS:000339391100004"}