{"auto_keywords": [{"score": 0.044753672605157, "phrase": "frequent_itemsets"}, {"score": 0.031585544092193135, "phrase": "proposed_algorithm"}, {"score": 0.026231408269776317, "phrase": "nonordfp_algorithm"}, {"score": 0.00481495049065317, "phrase": "mining_association_rules"}, {"score": 0.0046803650677267146, "phrase": "efficiently_mine_association_rules"}, {"score": 0.004549525672842959, "phrase": "fp-growth"}, {"score": 0.004494570360108983, "phrase": "candidate_generation"}, {"score": 0.004078078530972285, "phrase": "performance_results"}, {"score": 0.003996271202811961, "phrase": "fp-growth_method"}, {"score": 0.0035530197642369464, "phrase": "ifp-growth"}, {"score": 0.003453584878128719, "phrase": "address-table_structure"}, {"score": 0.0033433365160336842, "phrase": "entire_fp-tree"}, {"score": 0.0032497506915502876, "phrase": "new_structure"}, {"score": 0.003120568497402472, "phrase": "conditional_fp-trees"}, {"score": 0.002936331371903168, "phrase": "better_performance"}, {"score": 0.0028890603352364273, "phrase": "fp-tree_based_algorithms"}, {"score": 0.0027741761880779535, "phrase": "relatively_little_memory_space"}, {"score": 0.002740607717745287, "phrase": "mining_process"}, {"score": 0.002685558057339722, "phrase": "minimum_support"}, {"score": 0.00241658945942583, "phrase": "execution_time"}, {"score": 0.0023298892270500983, "phrase": "different_minimum_supports"}, {"score": 0.0021569129153653777, "phrase": "high_performance_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["FP-tree", " Frequent itemset mining", " Association rules"], "paper_abstract": "Many algorithms have been proposed to efficiently mine association rules. One of the most important approaches is FP-growth. Without candidate generation, FP-growth proposes an algorithm to compress information needed for mining frequent itemsets in FP-tree and recursively constructs FP-trees to find all frequent itemsets. Performance results have demonstrated that the FP-growth method performs extremely well. In this paper, we propose the IFP-growth (improved FP-growth) algorithm to improve the performance of FP-growth. There are three major features of IFP-growth. First, it employs an address-table structure to lower the complexity of forming the entire FP-tree. Second, it uses a new structure called FP-tree(+) to reduce the need for building conditional FP-trees recursively. Third, by using address-table and FP-tree the proposed algorithm has less memory requirement and better performance in comparison with FP-tree based algorithms. The experimental results show that the IFP-growth requires relatively little memory space during the mining process. Even when the minimum support is low, the space needed by IFP-growth is about one half of that of FP-growth and about one fourth of that of nonordfp algorithm. As to the execution time, our method outperforms FP-growth by one to 300 times under different minimum supports. The proposed algorithm also outperforms nonordfp algorithm in most cases. As a result, IFP-growth is very suitable for high performance applications. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "An improved frequent pattern growth method for mining association rules", "paper_id": "WOS:000287419900055"}