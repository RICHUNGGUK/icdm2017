{"auto_keywords": [{"score": 0.042709253836561815, "phrase": "project_changes"}, {"score": 0.041996689288621714, "phrase": "data_farmers"}, {"score": 0.00481495049065317, "phrase": "learning_project_management_decisions"}, {"score": 0.004690305164360866, "phrase": "case-based_reasoning"}, {"score": 0.004354315061804687, "phrase": "best_and_fewest_changes"}, {"score": 0.004167982855788402, "phrase": "case_study"}, {"score": 0.00397217701571219, "phrase": "monte_carlo_sampling"}, {"score": 0.0038355531523269217, "phrase": "possible_outcomes"}, {"score": 0.003769006950727621, "phrase": "case-based_reasoners"}, {"score": 0.0036393456309815166, "phrase": "test_instances"}, {"score": 0.003529543381704363, "phrase": "state-of-the_data_farmer"}, {"score": 0.003438058620195309, "phrase": "cbr_tool"}, {"score": 0.0033636292024305406, "phrase": "software_project_data"}, {"score": 0.0032054891061528896, "phrase": "seesaw's_data"}, {"score": 0.0029367519939993056, "phrase": "cbr"}, {"score": 0.0027620516806198354, "phrase": "novel_domains"}, {"score": 0.0027140798043053986, "phrase": "noisy_data_sets"}, {"score": 0.0026552818091968543, "phrase": "cbr_tools"}, {"score": 0.002530359917257626, "phrase": "project_data"}, {"score": 0.002453934333239467, "phrase": "required_form"}, {"score": 0.0024218895273910943, "phrase": "data_farmer"}, {"score": 0.0021049977753042253, "phrase": "maintenance_effort"}], "paper_keywords": ["Search-based software engineering", " case-based reasoning", " data farming", " COCOMO"], "paper_abstract": "Background: Given information on just a few prior projects, how do we learn the best and fewest changes for current projects? Aim: To conduct a case study comparing two ways to recommend project changes. 1) Data farmers use Monte Carlo sampling to survey and summarize the space of possible outcomes. 2) Case-based reasoners (CBR) explore the neighborhood around test instances. Method: We applied a state-of-the data farmer (SEESAW) and a CBR tool (W2) to software project data. Results: CBR with W2 was more effective than SEESAW's data farming for learning best and recommended project changes, effectively reducing runtime, effort, and defects. Further, CBR with W2 was comparably easier to build, maintain, and apply in novel domains, especially on noisy data sets. Conclusion: Use CBR tools like W2 when data are scarce or noisy or when project data cannot be expressed in the required form of a data farmer. Future Work: This study applied our own CBR tool to several small data sets. Future work could apply other CBR tools and data farmers to other data (perhaps to explore other goals such as, say, minimizing maintenance effort).", "paper_title": "Learning Project Management Decisions: A Case Study with Case-Based Reasoning versus Data Farming", "paper_id": "WOS:000327607000005"}