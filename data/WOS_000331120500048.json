{"auto_keywords": [{"score": 0.04851548352374304, "phrase": "type_error"}, {"score": 0.03511498344372029, "phrase": "type-change_suggestions"}, {"score": 0.00481495049065317, "phrase": "debugging_type_errors"}, {"score": 0.004606479650820579, "phrase": "important_part"}, {"score": 0.0045726187330434025, "phrase": "modern_software_development"}, {"score": 0.004456044928556639, "phrase": "good_type_error"}, {"score": 0.0043584824527198055, "phrase": "highly_expressive_type_systems"}, {"score": 0.0037602557461171478, "phrase": "change_suggestions"}, {"score": 0.0036373553416391823, "phrase": "debugging_process"}, {"score": 0.003466865016432561, "phrase": "type_debugging"}, {"score": 0.003353521531649663, "phrase": "comprehensive_set"}, {"score": 0.0030017207229983385, "phrase": "iterative_fashion"}, {"score": 0.002777595758483679, "phrase": "correct_change_suggestions"}, {"score": 0.0026768142335374156, "phrase": "rare_suggestions"}, {"score": 0.002618104519194264, "phrase": "potentially_huge_set"}, {"score": 0.0025137856138000036, "phrase": "variational_type_inference_algorithm"}, {"score": 0.0023958326775913165, "phrase": "type_information"}, {"score": 0.0023781827711414107, "phrase": "shared_parts"}, {"score": 0.0022918601312169676, "phrase": "previous_approaches"}, {"score": 0.0022498783454674254, "phrase": "large_set"}, {"score": 0.0021049977753042253, "phrase": "viable_alternative"}], "paper_keywords": ["Languages", " Theory", " Type inference", " error localization", " type error messages", " choice types", " change suggestions", " type-error debugging"], "paper_abstract": "Changing a program in response to a type error plays an important part in modern software development. However, the generation of good type error messages remains a problem for highly expressive type systems. Existing approaches often suffer from a lack of precision in locating errors and proposing remedies. Specifically, they either fail to locate the source of the type error consistently, or they report too many potential error locations. Moreover, the change suggestions offered are often incorrect. This makes the debugging process tedious and ineffective. We present an approach to the problem of type debugging that is based on generating and filtering a comprehensive set of type-change suggestions. Specifically, we generate all (program-structure- preserving) type changes that can possibly fix the type error. These suggestions will be ranked and presented to the programmer in an iterative fashion. In some cases we also produce suggestions to change the program. In most situations, this strategy delivers the correct change suggestions quickly, and at the same time never misses any rare suggestions. The computation of the potentially huge set of type-change suggestions is efficient since it is based on a variational type inference algorithm that type checks a program with variations only once, efficiently reusing type information for shared parts. We have evaluated our method and compared it with previous approaches. Based on a large set of examples drawn from the literature, we have found that our method outperforms other approaches and provides a viable alternative.", "paper_title": "Counter-Factual Typing for Debugging Type Errors", "paper_id": "WOS:000331120500048"}