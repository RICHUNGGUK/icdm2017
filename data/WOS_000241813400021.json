{"auto_keywords": [{"score": 0.047244318311946, "phrase": "pbqp"}, {"score": 0.00481495049065317, "phrase": "pbqp."}, {"score": 0.004592016716046632, "phrase": "new_heuristic"}, {"score": 0.00414830454375092, "phrase": "viable_target_architectures"}, {"score": 0.003983016985197904, "phrase": "new_branch-and-bound_technique"}, {"score": 0.003772793879444995, "phrase": "optimal_register_allocations"}, {"score": 0.00338493754743055, "phrase": "art_graph"}, {"score": 0.0031203609829058587, "phrase": "spill_costs"}, {"score": 0.002895986736522535, "phrase": "experimental_evidence"}, {"score": 0.0027060037347363987, "phrase": "relatively_regular_architectures"}, {"score": 0.002494361792853833, "phrase": "start-of-the-art_graph_colouring_technique"}, {"score": 0.0022682274656069643, "phrase": "graph_colouring"}, {"score": 0.0021776870246727233, "phrase": "wide_range"}], "paper_keywords": [""], "paper_abstract": "In this work we present a new heuristic for PBQP which significantly improves the quality of its register allocations and extends the range of viable target architectures. We also introduce a new branch-and-bound technique for PBQP that is able to find optimal register allocations. We evaluate each of these methods, as well as a state of the art graph colouring method, using SPEC2000 and IA-32 as a testbed. Spill costs are used as a metric for comparison. We provide experimental evidence that our new heuristic allows PBQP to remain effective even for relatively regular architectures such as IA-32, generating results equal to those of a start-of-the-art graph colouring technique. Our method is shown to run 3-4 times slower than graph colouring, however it supports a wide range of irregularities. Using our branch-and-bound solver for PBQP we were able to solve 97.4% of the functions in SPEC2000 optimally. These results are used as a yardstick to show that both PBQP and graph colouring produce results which are very close to optimal.", "paper_title": "Nearly optimal register allocation with PBQP", "paper_id": "WOS:000241813400021"}