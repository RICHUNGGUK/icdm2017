{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "finite_set_constraints"}, {"score": 0.004671156704912419, "phrase": "programming_propagators"}, {"score": 0.004396267325338022, "phrase": "entirely_declarative_specification_process"}, {"score": 0.004297388539539564, "phrase": "large_class"}, {"score": 0.0041374874583908535, "phrase": "high-level_declarative_specification"}, {"score": 0.003953409087444568, "phrase": "efficient_propagator"}, {"score": 0.003720600007408015, "phrase": "existential_monadic_second-order_logic"}, {"score": 0.0035550029054401016, "phrase": "finite_set_propagators"}, {"score": 0.003245520963944678, "phrase": "projection_propagators"}, {"score": 0.0031484483754909026, "phrase": "single_variable"}, {"score": 0.0023235629819760018, "phrase": "derived_propagators"}, {"score": 0.002254003531073337, "phrase": "run-time_analysis"}, {"score": 0.0021049977753042253, "phrase": "n-ary_constraints"}], "paper_keywords": [""], "paper_abstract": "Ideally, programming propagators as implementations of constraints should be an entirely declarative specification process for a large class of constraints: a high-level declarative specification is automatically translated into an efficient propagator. This paper introduces the use of existential monadic second-order logic as declarative specification language for finite set propagators. The approach taken in the paper is to automatically derive projection propagators (involving a single variable only) implementing constraints described by formulas. By this, the paper transfers the ideas of indexicals to finite set constraints while considerably increasing the level of abstraction available with indexicals. The paper proves soundness and completeness of the derived propagators and presents a run-time analysis, including techniques for efficiently executing projectors for n-ary constraints.", "paper_title": "Generating propagators for finite set constraints", "paper_id": "WOS:000241582400040"}