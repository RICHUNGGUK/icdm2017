{"auto_keywords": [{"score": 0.04968313295265431, "phrase": "graph_databases"}, {"score": 0.015087145780922549, "phrase": "supergraph_queries"}, {"score": 0.005830902492376523, "phrase": "compact_organization"}, {"score": 0.00554778303959137, "phrase": "subgraph_isomorphism_testings"}, {"score": 0.005388987322821364, "phrase": "query_processing"}, {"score": 0.005063772419799235, "phrase": "optimal_order"}, {"score": 0.00481495049065317, "phrase": "supergraph_query_processing"}, {"score": 0.004524220016675624, "phrase": "graph_database_d"}, {"score": 0.00446820572467064, "phrase": "large_set"}, {"score": 0.004376378707877484, "phrase": "supergraph_query_q"}, {"score": 0.004181984757594365, "phrase": "q"}, {"score": 0.004044251230868813, "phrase": "large_number"}, {"score": 0.003895810929926511, "phrase": "subgraph_isomorphism_testing"}, {"score": 0.0036756196381448015, "phrase": "new_approach"}, {"score": 0.0033964919992320024, "phrase": "common_subgraphs"}, {"score": 0.0030867203659106727, "phrase": "overall_cost"}, {"score": 0.0030231983220281836, "phrase": "stored_graphs"}, {"score": 0.0029121251930855664, "phrase": "exact_algorithm"}, {"score": 0.0028760125558659907, "phrase": "approximate_algorithm"}, {"score": 0.002828556054338357, "phrase": "significant_feature"}, {"score": 0.002690820958068933, "phrase": "indices_construction"}, {"score": 0.0023948981440134478, "phrase": "novel_algorithm"}, {"score": 0.0023651843133643768, "phrase": "subgraph_isomorphisms"}, {"score": 0.002345579707333727, "phrase": "multiple_graphs"}, {"score": 0.0022220423638260015, "phrase": "query_processing_method"}, {"score": 0.0021853532419450887, "phrase": "analytical_and_experimental_results"}, {"score": 0.0021492686054379755, "phrase": "proposed_algorithms"}, {"score": 0.0021225958499898182, "phrase": "existing_similar_algorithms"}], "paper_keywords": ["Graph database", " Supergraph query", " Query processing", " Graph indexing"], "paper_abstract": "We study the problem of processing supergraph queries on graph databases. A graph database D is a large set of graphs. A supergraph query q on D is to retrieve all the graphs in D such that q is a supergraph of them. The large number of graphs in databases and the NP-completeness of subgraph isomorphism testing make it challenging to efficiently processing supergraph queries. In this paper, a new approach to processing supergraph queries is proposed. Specifically, a method for compactly organizing graph databases is first presented. Common subgraphs of the graphs in a database are stored only once in the compact organization of the database, in order to reduce the overall cost of subgraph isomorphism testings from the stored graphs to queries during query processing. Then, an exact algorithm and an approximate algorithm for generating the significant feature set with optimal order are proposed, followed by the algorithms for indices construction on graph databases. The optimal order on the feature set is to reduce the number of subgraph isomorphism testings during query processing. Based on the compact organization of graph databases, a novel algorithm for testing subgraph isomorphisms from multiple graphs to one graph is presented. Finally, based on all the above techniques, a query processing method is proposed. Analytical and experimental results show that the proposed algorithms outperform the existing similar algorithms by one to two orders of magnitude.", "paper_title": "Efficient algorithms for supergraph query processing on graph databases", "paper_id": "WOS:000286680700002"}