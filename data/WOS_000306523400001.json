{"auto_keywords": [{"score": 0.0493588904307621, "phrase": "tabular_expressions"}, {"score": 0.00481495049065317, "phrase": "tabular_expressions_operators"}, {"score": 0.004396267325338022, "phrase": "software_requirements"}, {"score": 0.003953409087444568, "phrase": "mathematical_functions"}, {"score": 0.0036924762294207633, "phrase": "programming_language"}, {"score": 0.0035550029054401016, "phrase": "tabular_expression_language"}, {"score": 0.0034226302212225206, "phrase": "first_class_citizens"}, {"score": 0.003245520963944678, "phrase": "atomic_tabular_expressions"}, {"score": 0.0029182434479165884, "phrase": "atomic_expressions"}, {"score": 0.0026640466056415298, "phrase": "building_tools"}, {"score": 0.0023591417077156555, "phrase": "tabular_operators"}, {"score": 0.002169968849836984, "phrase": "modular_way"}], "paper_keywords": [""], "paper_abstract": "Tabular expressions are one of the most important table-based techniques used to formally specify software requirements. The power of tabular expressions stems from their visual structure, and concise representation of mathematical functions and relations. Towards using tabular expressions as a programming language, we propose a tabular expression language in which tabular expressions are first class citizens. The language is built upon atomic tabular expressions and operators. As such, tabular expressions are viewed as a stack of atomic expressions and operators that we apply on them. This view enhances building tools supporting the semantics of tabular expressions, and using them directly during the implementation. The tabular operators introduced are used to compose and decompose tabular expressions in a modular way, which improves their semantics.", "paper_title": "Tabular Expressions Operators", "paper_id": "WOS:000306523400001"}