{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu-based_systems"}, {"score": 0.00464961029427851, "phrase": "eu"}, {"score": 0.0045208777171271254, "phrase": "component_model"}, {"score": 0.004185632403886255, "phrase": "homogeneous_and_heterogeneous_parallel_systems"}, {"score": 0.0038751504050385183, "phrase": "peppher_composition_tool"}, {"score": 0.003741712498615481, "phrase": "application's_components"}, {"score": 0.003587616378156851, "phrase": "necessary_low-level_code"}, {"score": 0.0034640450599342488, "phrase": "runtime_system"}, {"score": 0.0033447157263095223, "phrase": "native_compilation"}, {"score": 0.00314015410819199, "phrase": "overall_application_code"}, {"score": 0.0029274600162609654, "phrase": "smart_containers"}, {"score": 0.0027483472371835865, "phrase": "implicit_parallelism"}, {"score": 0.0027100527874262446, "phrase": "component_invocations"}, {"score": 0.0026722904884984348, "phrase": "runtime_optimization"}, {"score": 0.00263505298504827, "phrase": "data_transfers"}, {"score": 0.002562123444678208, "phrase": "experimental_evaluation"}, {"score": 0.002422249273477746, "phrase": "composition_tool"}, {"score": 0.002195552442011313, "phrase": "task-based_peppher_runtime_system"}, {"score": 0.0021049977753042253, "phrase": "different_usage_scenarios"}], "paper_keywords": ["PEPPHER project", " Component model", " GPU-based systems", " Performance portability", " Dynamic scheduling"], "paper_abstract": "The PEPPHER (EU FP7 project) component model defines the notion of component, interface and meta-data for homogeneous and heterogeneous parallel systems. In this paper, we describe and evaluate the PEPPHER composition tool, which explores the application's components and their implementation variants, generates the necessary low-level code that interacts with the runtime system, and coordinates the native compilation and linking of the various code units to compose the overall application code to optimize performance. We discuss the concept of smart containers and its benefits for reducing dispatch overhead, exploiting implicit parallelism across component invocations and runtime optimization of data transfers. In an experimental evaluation with several applications, we demonstrate that the composition tool provides a high-level programming front-end while effectively utilizing the task-based PEPPHER runtime system (StarPU) underneath for different usage scenarios on GPU-based systems.", "paper_title": "The PEPPHER composition tool: performance-aware composition for GPU-based systems", "paper_id": "WOS:000344169400007"}