{"auto_keywords": [{"score": 0.030963274053318286, "phrase": "mobile_services"}, {"score": 0.00481495049065317, "phrase": "service_workflow"}, {"score": 0.004773040022691547, "phrase": "mobile_cloud_computing"}, {"score": 0.004669845451682529, "phrase": "cloud_computing"}, {"score": 0.00462919213721188, "phrase": "virtualization_techniques"}, {"score": 0.004588891098290524, "phrase": "mobile_devices"}, {"score": 0.004470071518923524, "phrase": "scarce_resource"}, {"score": 0.004186253035932442, "phrase": "powerful_cloud_servers"}, {"score": 0.0041316803676012155, "phrase": "mobile_device"}, {"score": 0.003687439449869248, "phrase": "mobile_computation_offloading_problem"}, {"score": 0.0036553070575015344, "phrase": "multiple_mobile_services"}, {"score": 0.0032336801561165113, "phrase": "portable_devices"}, {"score": 0.0032054891061528896, "phrase": "unstable_connectivity"}, {"score": 0.0031775430407770026, "phrase": "mobile_networks"}, {"score": 0.0031223774204093713, "phrase": "offloading_decision"}, {"score": 0.0029886047149545025, "phrase": "novel_offloading_system"}, {"score": 0.002949598537993663, "phrase": "robust_offloading_decisions"}, {"score": 0.002860546817196148, "phrase": "dependency_relations"}, {"score": 0.002835599469639296, "phrase": "component_services"}, {"score": 0.0027741761880779535, "phrase": "execution_time"}, {"score": 0.0025863988422430797, "phrase": "mobility_model"}, {"score": 0.002552628669352939, "phrase": "trade-off_fault-tolerance_mechanism"}, {"score": 0.002475532161577715, "phrase": "genetic_algorithm"}, {"score": 0.0023384629381463054, "phrase": "generic_ga"}, {"score": 0.0022777800735119405, "phrase": "stated_problem"}, {"score": 0.0022579036318895753, "phrase": "experimental_results"}, {"score": 0.002208966376185464, "phrase": "near-optimal_solutions"}, {"score": 0.0021516366862117707, "phrase": "almost_linear_algorithmic_complexity"}, {"score": 0.0021049977753042253, "phrase": "problem_size"}], "paper_keywords": ["Mobile cloud computing", " service workflow", " computation offloading", " service composition"], "paper_abstract": "The development of cloud computing and virtualization techniques enables mobile devices to overcome the severity of scarce resource constrained by allowing them to offload computation and migrate several computation parts of an application to powerful cloud servers. A mobile device should judiciously determine whether to offload computation as well as what portion of an application should be offloaded to the cloud. This paper considers a mobile computation offloading problem where multiple mobile services in workflows can be invoked to fulfill their complex requirements and makes decision on whether the services of a workflow should be offloaded. Due to the mobility of portable devices, unstable connectivity of mobile networks can impact the offloading decision. To address this issue, we propose a novel offloading system to design robust offloading decisions for mobile services. Our approach considers the dependency relations among component services and aims to optimize execution time and energy consumption of executing mobile services. To this end, we also introduce a mobility model and a trade-off fault-tolerance mechanism for the offloading system. A genetic algorithm (GA) based offloading method is then designed and implemented after carefully modifying parts of a generic GA to match our special needs for the stated problem. Experimental results are promising and show near-optimal solutions for all of our studied cases with almost linear algorithmic complexity with respect to the problem size.", "paper_title": "Computation Offloading for Service Workflow in Mobile Cloud Computing", "paper_id": "WOS:000364853900009"}