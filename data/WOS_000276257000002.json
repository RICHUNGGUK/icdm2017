{"auto_keywords": [{"score": 0.04848859238529717, "phrase": "kpca"}, {"score": 0.040112732533108916, "phrase": "preimage_learning"}, {"score": 0.01563911634671863, "phrase": "kernel_principal_component_analysis"}, {"score": 0.015360282810930605, "phrase": "feature_vector"}, {"score": 0.011481455643349297, "phrase": "preimage_learning_process"}, {"score": 0.010571044121518582, "phrase": "optimization_function"}, {"score": 0.009961163504009826, "phrase": "combination_weights"}, {"score": 0.009099299667091918, "phrase": "convexity_constraint"}, {"score": 0.00481495049065317, "phrase": "penalized_preimage_learning"}, {"score": 0.00460690715991423, "phrase": "crucial_importance"}, {"score": 0.004488734023485018, "phrase": "image_preprocessing"}, {"score": 0.004442314123432222, "phrase": "exact_preimage"}, {"score": 0.004373578862123712, "phrase": "kernel_feature_space"}, {"score": 0.004272456401437226, "phrase": "input_data_space"}, {"score": 0.004239268958511757, "phrase": "approximate_preimage"}, {"score": 0.004014035333627087, "phrase": "\"good\"_estimation"}, {"score": 0.003921193216052828, "phrase": "kernel_methods"}, {"score": 0.0037908515763223107, "phrase": "better_estimation"}, {"score": 0.0036458121607783004, "phrase": "penalized_strategy"}, {"score": 0.0035614563596982306, "phrase": "penalization_terms"}, {"score": 0.0034609916645637288, "phrase": "efficient_penalized_technique"}, {"score": 0.003407388290583047, "phrase": "two-step_general_framework"}, {"score": 0.0033198817440839795, "phrase": "weighted_combination"}, {"score": 0.0032940691998512963, "phrase": "observed_samples"}, {"score": 0.0031679764228666144, "phrase": "existing_techniques"}, {"score": 0.002983916676307492, "phrase": "penalized_methodology"}, {"score": 0.00286966196130402, "phrase": "well-defined_preimage"}, {"score": 0.0026402908398883832, "phrase": "penalized_function"}, {"score": 0.002532557109736645, "phrase": "weakly_supervised_penalty"}, {"score": 0.002461044825190643, "phrase": "laplacian_penalty"}, {"score": 0.002448260697722081, "phrase": "ridge_penalty"}, {"score": 0.0023915470047532078, "phrase": "learned_preimage"}, {"score": 0.00234834406550549, "phrase": "conditional_mutual_information"}, {"score": 0.0022879728308318205, "phrase": "face_image_data_sets"}, {"score": 0.0022583704173318123, "phrase": "facial_expression_normalization"}, {"score": 0.0022466367299066206, "phrase": "face_image_denoising"}, {"score": 0.002223351523626989, "phrase": "missing_parts"}, {"score": 0.002177501051759342, "phrase": "experimental_results"}, {"score": 0.002154930852763048, "phrase": "proposed_preimage_learning_algorithm"}, {"score": 0.0021437334457067012, "phrase": "lower_mean_square_error"}, {"score": 0.002132643001799396, "phrase": "mse"}, {"score": 0.0021159932825818065, "phrase": "better_visual_quality"}, {"score": 0.0021049977753042253, "phrase": "reconstructed_images"}], "paper_keywords": ["Kernel", " kernel principal component analysis (KPCA)", " locality preservation", " penalty function", " preimage problem"], "paper_abstract": "Finding the preimage of a feature vector in kernel principal component analysis (KPCA) is of crucial importance when KPCA is applied in some applications such as image preprocessing. Since the exact preimage of a feature vector in the kernel feature space, normally, does not exist in the input data space, an approximate preimage is learned and encouraging results have been reported in the last few years. However, it is still difficult to find a \"good\" estimation of preimage. As estimation of preimage in kernel methods is ill-posed, how to guide the preimage learning for a better estimation is important and still an open problem. To address this problem, a penalized strategy is developed in this paper, where some penalization terms are used to guide the preimage learning process. To develop an efficient penalized technique, we first propose a two-step general framework, in which a preimage is directly modeled by weighted combination of the observed samples and the weights are learned by some optimization function subject to certain constraints. Compared to existing techniques, this would also give advantages in directly turning preimage learning into the optimization of the combination weights. Under this framework, a penalized methodology is developed by integrating two types of penalizations. First, to ensure learning a well-defined preimage, of which each entry is not out of data range, convexity constraint is imposed for learning the combination weights. More insight effects of the convexity constraint are also explored. Second, a penalized function is integrated as part of the optimization function to guide the preimage learning process. Particularly, the weakly supervised penalty is proposed, discussed, and extensively evaluated along with Laplacian penalty and ridge penalty. It could be further interpreted that the learned preimage can preserve some kind of pointwise conditional mutual information. Finally, KPCA with preimage learning is applied on face image data sets in the aspects of facial expression normalization, face image denoising, recovery of missing parts from occlusion, and illumination normalization. Experimental results show that the proposed preimage learning algorithm obtains lower mean square error (MSE) and better visual quality of reconstructed images.", "paper_title": "Penalized Preimage Learning in Kernel Principal Component Analysis", "paper_id": "WOS:000276257000002"}