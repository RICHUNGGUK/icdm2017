{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "framework_instantiation_representation"}, {"score": 0.004738078275822989, "phrase": "software_artifacts"}, {"score": 0.0046875099587735825, "phrase": "system_development"}, {"score": 0.004612662942073808, "phrase": "increasing_promise"}, {"score": 0.004301834610818624, "phrase": "new_systems"}, {"score": 0.004165497627464024, "phrase": "software_development_process"}, {"score": 0.003969018740062018, "phrase": "software_reuse"}, {"score": 0.0039055990919333082, "phrase": "associated_steep_learning_curve"}, {"score": 0.0037213333316218522, "phrase": "third_party_rationale"}, {"score": 0.0036227329311981195, "phrase": "reusable_assets"}, {"score": 0.003470358620464986, "phrase": "systematic_approach"}, {"score": 0.0034148795808317555, "phrase": "reuse_process"}, {"score": 0.0033602844686125375, "phrase": "software_reuse_tasks"}, {"score": 0.0032888418378433037, "phrase": "software_frameworks"}, {"score": 0.0032016639006812826, "phrase": "pre-defined_primitive_and_complex_reuse_operations"}, {"score": 0.002953711377604328, "phrase": "crucial_goals"}, {"score": 0.0028142286985235977, "phrase": "systematic_reuse_approach"}, {"score": 0.0025962029048520324, "phrase": "object-oriented_framework_instantiation_processes"}, {"score": 0.0025409639091476363, "phrase": "rdl_execution_environment"}, {"score": 0.002473560912156024, "phrase": "tool_support"}, {"score": 0.0023950275815082297, "phrase": "reuse_processes"}, {"score": 0.0023694065215394593, "phrase": "framework_instantiations"}, {"score": 0.0023189818169615135, "phrase": "domain-specific_applications"}, {"score": 0.0022453451864218477, "phrase": "dtframe"}, {"score": 0.002174041708084857, "phrase": "drawing_editors"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["software reuse", " Object oriented framework", " Model driven architecture", " Product line architecture"], "paper_abstract": "Reusing software artifacts for system development is showing increasing promise as an approach to reducing the time and effort involved in building new systems, and to improving the software development process and the quality of its outcome. However, software reuse has an associated steep learning curve, since practitioners must become familiar with a third party rationale for representing and implementing reusable assets. For this reason, enabling a systematic approach to the reuse process by making software reuse tasks explicit, allowing software frameworks to be instantiated using pre-defined primitive and complex reuse operations, and supporting the reuse process in a (semi-) automated way become crucial goals. In this paper, we present a systematic reuse approach and the Reuse Description Language (RDL), a language designed to specify object-oriented framework instantiation processes, and an RDL execution environment, which is the tool support for definition and execution of reuse processes and framework instantiations that lead to domain-specific applications. We illustrate our approach using DTFrame, a framework for creating drawing editors. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "RDL: A language for framework instantiation representation", "paper_id": "WOS:000250433700011"}