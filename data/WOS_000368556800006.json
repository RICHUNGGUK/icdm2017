{"auto_keywords": [{"score": 0.050070425097835075, "phrase": "cost_functions"}, {"score": 0.049274776006204106, "phrase": "automatic_cost_analysis"}, {"score": 0.043503219073221716, "phrase": "cost_analysis"}, {"score": 0.03776312194183082, "phrase": "automated_means"}, {"score": 0.03170834931407809, "phrase": "cf"}, {"score": 0.004502433187097914, "phrase": "cost_analyzers"}, {"score": 0.004071121244999291, "phrase": "important_applications"}, {"score": 0.004020185355794902, "phrase": "resource-usage_verification"}, {"score": 0.0035296217979800463, "phrase": "analysis_results"}, {"score": 0.0032726467814278345, "phrase": "relatively_small_number"}, {"score": 0.0032181231788427655, "phrase": "basic_expressions"}, {"score": 0.0028609920171902186, "phrase": "input_values"}, {"score": 0.002813307389456184, "phrase": "general_function_comparison"}, {"score": 0.002778064757980489, "phrase": "hard_mathematical_problem"}, {"score": 0.0027088948471991454, "phrase": "general_problem"}, {"score": 0.002358050109031317, "phrase": "fully_automated_applications"}, {"score": 0.0021861845339709533, "phrase": "cost_analyzer"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Resource analysis", " Cost analysis", " Function comparison", " Upper/lower bounds"], "paper_abstract": "Automatic cost analysis has significantly advanced in the last few years. Nowadays, a number of cost analyzers exist which automatically produce upper- and/or lower-bounds on the amount of resources required to execute a program. Cost analysis has a number of important applications such as resource-usage verification and program synthesis and optimization. For such applications to be successful, it is not sufficient to have automatic cost analysis. It is also required to have automated means for handling the analysis results, which are in the form of Cost Functions (CFs for short) i.e., non-recursive expressions composed of a relatively small number of types of basic expressions. In particular, we need automated means for comparing CFs in order to prove that a CF is smaller than or equal to another one for all input values of interest. General function comparison is a hard mathematical problem. Rather than attacking the general problem, in this work we focus on comparing CFs by exploiting their syntactic properties and we present, to the best of our knowledge, the first practical CF comparator which opens the door to fully automated applications of cost analysis. We have implemented the comparator and made its source code available online, so that any cost analyzer can use it. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A practical comparator of cost functions and its applications", "paper_id": "WOS:000368556800006"}