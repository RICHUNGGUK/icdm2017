{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "aspect-oriented_programming_constructs"}, {"score": 0.004667149874736771, "phrase": "extensible_programming_languages"}, {"score": 0.004571133708117502, "phrase": "experimental_systems"}, {"score": 0.004500414250942443, "phrase": "highly_modular_specifications"}, {"score": 0.003850464100878052, "phrase": "extensible_languages"}, {"score": 0.003771185758226876, "phrase": "higher-order_attribute_grammars"}, {"score": 0.003542976343910816, "phrase": "simple_rewriting_process"}, {"score": 0.00339853518227171, "phrase": "additional_attribute_definitions"}, {"score": 0.0032599633778910516, "phrase": "\"host\"_language"}, {"score": 0.003143341238802547, "phrase": "attribute_grammars"}, {"score": 0.0030308784612749647, "phrase": "modular_composition"}, {"score": 0.0029994894380575604, "phrase": "language_features"}, {"score": 0.0028325548627901004, "phrase": "underlying_attribute_grammars"}, {"score": 0.0027886573969044042, "phrase": "customized_languages"}, {"score": 0.0027454383581457555, "phrase": "language_extensions"}, {"score": 0.002619748321217153, "phrase": "aspect_weaving_process"}, {"score": 0.002592606058287124, "phrase": "aspect-oriented_programming"}, {"score": 0.002512850690695835, "phrase": "modular_language_extension"}, {"score": 0.002448260697722081, "phrase": "extensible_host_language"}, {"score": 0.00234834406550549, "phrase": "extensible_compiler_framework"}, {"score": 0.0022407927161620855, "phrase": "convenient_arena"}, {"score": 0.002171836484200008, "phrase": "new_aspect-oriented_language_features"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["extensible languages", " extensible compilers", " attribute grammars", " forwarding", " aspect-oriented programming"], "paper_abstract": "Extensible programming languages and their compilers are experimental systems that use highly modular specifications of languages and language extensions in order to allow a variety of language features to be easily imported, by the programmer, into his or her programming environment. Our framework for extensible languages is based on higher-order attribute grammars extended with a mechanism called \"forwarding\" that mimics a simple rewriting process. Forwarding is designed such that no additional attribute definitions need to be written when combining a \"host\" language with language extensions (specified as attribute grammars), thus allowing for the modular composition of language features. This means that programmers can remain unaware of the underlying attribute grammars when building customized languages by importing language extensions. This paper shows how aspects and the aspect weaving process from aspect-oriented programming can be specified as a modular language extension and imported into an extensible host language. This paper also illustrates how an extensible compiler framework exposes its underlying semantic analyses and how this can provide a convenient arena in which researchers can explore new aspect-oriented language features. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Implementing aspect-oriented programming constructs as modular language extensions", "paper_id": "WOS:000249185700004"}