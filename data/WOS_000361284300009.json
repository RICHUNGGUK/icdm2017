{"auto_keywords": [{"score": 0.0441364655831155, "phrase": "vm"}, {"score": 0.03822301584650313, "phrase": "vm_density"}, {"score": 0.03526183838683251, "phrase": "idle_vms"}, {"score": 0.00481495049065317, "phrase": "vm_consolidation"}, {"score": 0.004732100994830163, "phrase": "idle_states"}, {"score": 0.0046993598473345395, "phrase": "typical_vm_consolidation"}, {"score": 0.004618547000124372, "phrase": "vms"}, {"score": 0.004308630865024719, "phrase": "recent_work"}, {"score": 0.004249188865832993, "phrase": "just-in-time_approach"}, {"score": 0.0041184131734368825, "phrase": "inactive_state"}, {"score": 0.0039778030796649416, "phrase": "client_requests"}, {"score": 0.0038419751490849133, "phrase": "increased_vm_density"}, {"score": 0.0037366473207825234, "phrase": "client_request_latency"}, {"score": 0.0032971676471625646, "phrase": "multiple_inactive_states"}, {"score": 0.003107935254560724, "phrase": "different_inactive_states"}, {"score": 0.003086396772496527, "phrase": "different_capacities"}, {"score": 0.0029602552900111407, "phrase": "key_question"}, {"score": 0.002869034325496957, "phrase": "different_states"}, {"score": 0.0028293966058473476, "phrase": "expected_miss_penalty"}, {"score": 0.002704306866425829, "phrase": "multiple_such_inactive_states"}, {"score": 0.002639251247218711, "phrase": "different_idle_vm_management_policies"}, {"score": 0.002540160379502092, "phrase": "mathematical_model"}, {"score": 0.002427826856342292, "phrase": "miss_penalty"}, {"score": 0.0023942700905678735, "phrase": "off-the-shelf_virtualization_solution"}, {"score": 0.0022963507669678815, "phrase": "required_model_parameters"}, {"score": 0.002164432930854161, "phrase": "different_vm_densities"}], "paper_keywords": ["Virtualization", " virtual machines", " cloud computing", " VM density", " VM consolidation", " VM hierarchy"], "paper_abstract": "Typical VM consolidation approaches re-pack VMs into fewer physical machines, resulting in energy and cost savings [13, 19, 23, 40]. Recent work has explored a just-in-time approach to VM consolidation by transitioning VMs to an inactive state when idle and activating them on the arrival of client requests [17, 21]. This leads to increased VM density at the cost of an increase in client request latency (called miss penalty). The VM density so obtained, although greater, is still limited by the number of VMs that can be hosted in the one inactive state. If idle VMs were hosted in multiple inactive states, VM density can be increased further while ensuring small miss penalties. However, VMs in different inactive states have different capacities, activation times, and resource requirements. Therefore, a key question is: How should VMs be transitioned between different states to minimize the expected miss penalty? This paper explores the hosting of idle VMs in a hierarchy of multiple such inactive states, and studies the effect of different idle VM management policies on VM density and miss penalties. We formulate a mathematical model for the problem, and provide a theoretical lower bound on the miss penalty. Using an off-the-shelf virtualization solution (LXC [2]), we demonstrate how the required model parameters can be obtained. We evaluate a variety of policies and quantify their miss penalties for different VM densities. We observe that some policies consolidate up to 550 VMs per machine with average miss penalties smaller than 1 ms.", "paper_title": "Towards VM Consolidation Using a Hierarchy of Idle States", "paper_id": "WOS:000361284300009"}