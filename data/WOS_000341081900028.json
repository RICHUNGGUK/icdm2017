{"auto_keywords": [{"score": 0.048778468893892986, "phrase": "mobile_devices"}, {"score": 0.010484032587658992, "phrase": "mobile_social_cloud_computing"}, {"score": 0.008575076168648275, "phrase": "social_network"}, {"score": 0.008343000363438087, "phrase": "mobile_device"}, {"score": 0.008141945591092794, "phrase": "user_mobility"}, {"score": 0.00763675407846095, "phrase": "user_requirements"}, {"score": 0.007054184740519583, "phrase": "computing_environment"}, {"score": 0.00481495049065317, "phrase": "qos_scheduling"}, {"score": 0.004655576530003855, "phrase": "smart_phones"}, {"score": 0.004392565073466714, "phrase": "mere_interface"}, {"score": 0.004312622975366672, "phrase": "computing_resources"}, {"score": 0.004208282550386197, "phrase": "immeasurably_improved_performance"}, {"score": 0.004157058883925715, "phrase": "increasing_number"}, {"score": 0.0041316803676012155, "phrase": "mobile_device_users"}, {"score": 0.004093901605219401, "phrase": "utilization_rate"}, {"score": 0.00405646687267772, "phrase": "social_networking_service"}, {"score": 0.0039341294012600085, "phrase": "existing_computing_environment"}, {"score": 0.003850686614685676, "phrase": "computing_services"}, {"score": 0.0037459885494311217, "phrase": "computing_resource"}, {"score": 0.0037231102027070724, "phrase": "temporary_network_disconnection"}, {"score": 0.003644126753595137, "phrase": "service_disruption"}, {"score": 0.003501846136829077, "phrase": "mobile_users"}, {"score": 0.003375429082739004, "phrase": "fault_tolerance"}, {"score": 0.0033445420167761445, "phrase": "quality_of_services"}, {"score": 0.003223785608256469, "phrase": "mscc"}, {"score": 0.003165046673308291, "phrase": "social_network-based_cloud_computing"}, {"score": 0.0030695103543472908, "phrase": "mobile_user"}, {"score": 0.002949598537993663, "phrase": "real_world_relationships"}, {"score": 0.002886977102894829, "phrase": "social_network_share_cloud_service"}, {"score": 0.002748775748298028, "phrase": "underlying_mscc"}, {"score": 0.002530359917257626, "phrase": "qos_provisioning"}, {"score": 0.002461472107682778, "phrase": "proposed_scheduling"}, {"score": 0.0023798115577749225, "phrase": "cloud_services"}, {"score": 0.002286835237772652, "phrase": "qos"}, {"score": 0.002210903612084605, "phrase": "can."}, {"score": 0.002197379785587054, "phrase": "simulation_results"}, {"score": 0.002163930783583212, "phrase": "cloud_service_execution_time"}, {"score": 0.0021049977753042253, "phrase": "cloud_service_error_rate"}], "paper_keywords": ["Cloud", " Social cloud", " Mobile social cloud", " Fault tolerance", " QoS", " CAN"], "paper_abstract": "The performance of mobile devices including smart phones and laptops is steadily rising as prices plummet sharply. So, mobile devices are changing from being a mere interface for requesting services to becoming computing resources for providing and sharing services due to immeasurably improved performance. With the increasing number of mobile device users, the utilization rate of SNS (Social Networking Service) is also soaring. Applying SNS to the existing computing environment enables members of social network to share computing services without further authentication. To use mobile device as a computing resource, temporary network disconnection caused by user mobility and various HW/SW faults causing service disruption should be considered. Also these issues must be resolved to support mobile users and to provide user requirements for services. Accordingly, we propose fault tolerance and QoS (Quality of Services) scheduling using CAN (Content Addressable Network) in Mobile Social Cloud Computing (MSCC). MSCC is a computing environment that integrates social network-based cloud computing and mobile devices. In the computing environment, a mobile user can, through mobile devices, become a member of a social network through real world relationships. Essentially, members of a social network share cloud service or data with other members without further authentication by using their mobile device. We use CAN as the underlying MSCC to logically manage the locations of mobile devices. Fault tolerance and QoS scheduling consists of four sub-scheduling algorithms: malicious-user filtering, cloud service delivery, QoS provisioning, and replication and load-balancing. Under the proposed scheduling, a mobile device is used as a resource for providing cloud services, faults caused from user mobility or other reasons are tolerated and user requirements for QoS are considered. We simulate scheduling both with and without CAN. The simulation results show that our proposed scheduling algorithm enhances cloud service execution time, finish time and reliability and reduces the cloud service error rate.", "paper_title": "Fault tolerance and QoS scheduling using CAN in mobile social cloud computing", "paper_id": "WOS:000341081900028"}