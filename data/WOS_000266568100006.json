{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "stream_join"}, {"score": 0.004767261858417823, "phrase": "memory_management"}, {"score": 0.004696608876994947, "phrase": "critical_issue"}, {"score": 0.004650086856905758, "phrase": "stream_processing"}, {"score": 0.004604023526673226, "phrase": "stateful_operators"}, {"score": 0.004424268136268051, "phrase": "memory_requirement"}, {"score": 0.0034834098902271626, "phrase": "window_size"}, {"score": 0.003380791705551809, "phrase": "intended_query"}, {"score": 0.003281186608301359, "phrase": "volatile_input_characteristics"}, {"score": 0.002984665318717504, "phrase": "data-driven_memory_management_scheme"}, {"score": 0.002797329638474873, "phrase": "novel_data-driven_memory"}, {"score": 0.0027148677103585985, "phrase": "window-oblivious"}, {"score": 0.0025571463140118805, "phrase": "state_buffer_size"}, {"score": 0.0025066304722422463, "phrase": "input_characteristics"}, {"score": 0.002408565679880478, "phrase": "traditional_window-join"}, {"score": 0.002234893735225432, "phrase": "dynamic_input"}, {"score": 0.0021907299375981356, "phrase": "higher_quality_results"}, {"score": 0.002168975681697056, "phrase": "lower_memory_costs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data stream", " Stream join", " Data-driven memory management"], "paper_abstract": "Memory management is a critical issue in stream processing involving stateful operators such as join. Traditionally, the memory requirement for a stream join is query-driven: a query has to explicitly define a window for each (potentially unbounded) input. The window essentially bounds the size of the buffer allocated for that stream. However, output produced this way may not be desirable (if the window size is not part of the intended query semantic) due to the volatile input characteristics. We discover that when streams are ordered or partially ordered, it is possible to use a data-driven memory management scheme to improve the performance. in this work, we present a novel data-driven memory, management scheme, called Window-Oblivious join (WO-Join), which adaptively adjusts the state buffer size according to the input characteristics. Our performance study shows that, compared to traditional Window-Join (W-Join), WO-Join is more robust with respect to the dynamic input and therefore produces higher quality results with lower memory costs. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Data-driven memory management for stream join", "paper_id": "WOS:000266568100006"}