{"auto_keywords": [{"score": 0.03726176869462579, "phrase": "static_system_call_sequences"}, {"score": 0.03556129328808398, "phrase": "system_call_sequences"}, {"score": 0.025141068979759856, "phrase": "proposed_approach"}, {"score": 0.024409112682768484, "phrase": "dynamic_detection_approach"}, {"score": 0.00481495049065317, "phrase": "malicious_code_detection_methods"}, {"score": 0.004728624975677976, "phrase": "static_system_calls"}, {"score": 0.004643839937761046, "phrase": "almost_all_static_methods"}, {"score": 0.004560568143816105, "phrase": "malicious_code"}, {"score": 0.004116012194714212, "phrase": "simple_mechanisms"}, {"score": 0.004042166795461166, "phrase": "code_obfuscation"}, {"score": 0.0038749521906474593, "phrase": "behavior-based_detection_approach"}, {"score": 0.0034550163444256386, "phrase": "traditional_approach"}, {"score": 0.0030434561939032597, "phrase": "binary_code"}, {"score": 0.0025853238923610076, "phrase": "machine-learning_methods"}, {"score": 0.0025235718883452564, "phrase": "k-nearest_neighbor"}, {"score": 0.0024932498388507084, "phrase": "support_vector_machine"}, {"score": 0.002448446849997207, "phrase": "decision_tree_methods"}, {"score": 0.0022633993976138387, "phrase": "dynamic_system_call_sequences"}, {"score": 0.002222717552124615, "phrase": "experimental_results"}, {"score": 0.002143529653780496, "phrase": "higher_accuracy"}, {"score": 0.0021049977753042253, "phrase": "lower_false_positive_rate"}], "paper_keywords": ["Malicious code", " Static detection", " N-gram", " System call", " Security"], "paper_abstract": "Currently almost all static methods for detecting malicious code are signature-based, this leads the result that viruses can easily escape detection by simple mechanisms such as code obfuscation. In this paper, a behavior-based detection approach is proposed to address this problem. The behaviors of interest are defined as static system call sequences. Unlike the traditional approach, which derives system call sequences by running executables (i.e., dynamic system call sequences), this approach statically analyzes binary code to derive system call sequences. In this paper, a method for deriving static system call sequences is presented, and two automatic feature-selection methods based on n-grams are proposed. We use machine-learning methods, including the K-nearest neighbor, Support Vector Machine, and decision tree methods to classify executables. The proposed approach is compared with the dynamic detection approach using dynamic system call sequences. The experimental results show that the proposed approach has higher accuracy and a lower false positive rate than the dynamic detection approach. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Feature representation and selection in malicious code detection methods based on static system calls", "paper_id": "WOS:000295072900011"}