{"auto_keywords": [{"score": 0.04480024954324635, "phrase": "multiprocessor_environments"}, {"score": 0.042840968605840246, "phrase": "multiprocessor_system"}, {"score": 0.00481495049065317, "phrase": "symmetric_multiprocessors"}, {"score": 0.004777744121315302, "phrase": "hierarchical_scheduling"}, {"score": 0.004667833113864304, "phrase": "scheduling_technique"}, {"score": 0.004613825044585923, "phrase": "aggregate_resource"}, {"score": 0.004560438999891081, "phrase": "related_groups"}, {"score": 0.00445550467119693, "phrase": "uniprocessor_and_packet_scheduling_environments"}, {"score": 0.004138813595009761, "phrase": "inherent_parallelism"}, {"score": 0.003919900973086169, "phrase": "unbounded_unfairness"}, {"score": 0.003770633265791941, "phrase": "naive_manner"}, {"score": 0.0036553070575015344, "phrase": "hierarchical_multiprocessor_scheduling"}, {"score": 0.003435092524339692, "phrase": "symmetric_multiprocessor"}, {"score": 0.0031537270875516108, "phrase": "desired_bandwidth_partition"}, {"score": 0.0030810605918297584, "phrase": "hierarchical_scheduling_tree"}, {"score": 0.002952146666681891, "phrase": "existing_proportional-share_algorithms"}, {"score": 0.002884111441153185, "phrase": "efficient_hierarchical_cpu"}, {"score": 0.00278497898719426, "phrase": "generalized_weight_feasibility_constraint"}, {"score": 0.0027102313244646934, "phrase": "achievable_cpu_bandwidth"}, {"score": 0.002668420182908979, "phrase": "multiprocessor_hierarchical_framework"}, {"score": 0.0026272523687965615, "phrase": "hierarchical_weight_readjustment_algorithm"}, {"score": 0.002566685388128598, "phrase": "feasibility_constraint"}, {"score": 0.0024784363584530976, "phrase": "hierarchical_surplus_fair_scheduling"}, {"score": 0.002356282242320051, "phrase": "surplus_fair_scheduling"}, {"score": 0.002301947614465974, "phrase": "auxiliary_algorithm"}, {"score": 0.0022227806435520764, "phrase": "simulation_study"}, {"score": 0.0021715177915174375, "phrase": "better_fairness_properties"}, {"score": 0.0021214346747442363, "phrase": "existing_algorithms"}], "paper_keywords": ["multiprocessor", " hierarchical", " scheduling", " proportional share"], "paper_abstract": "Hierarchical scheduling has been proposed as a scheduling technique to achieve aggregate resource partitioning among related groups of threads and applications in uniprocessor and packet scheduling environments. Existing hierarchical schedulers are not easily extensible to multiprocessor environments because 1) they do not incorporate the inherent parallelism of a multiprocessor system while resource partitioning and 2) they can result in unbounded unfairness or starvation if applied to a multiprocessor system in a naive manner. In this paper, we present hierarchical multiprocessor scheduling (H-SMP), a novel hierarchical CPU scheduling algorithm designed for a symmetric multiprocessor (SMP) platform. The novelty of this algorithm lies in its combination of space and time multiplexing to achieve the desired bandwidth partition among the nodes of the hierarchical scheduling tree. This algorithm is also characterized by its ability to incorporate existing proportional-share algorithms as auxiliary schedulers to achieve efficient hierarchical CPU partitioning. In addition, we present a generalized weight feasibility constraint that specifies the limit on the achievable CPU bandwidth partitioning in a multiprocessor hierarchical framework and propose a hierarchical weight readjustment algorithm designed to transparently satisfy this feasibility constraint. We evaluate the properties of H-SMP using hierarchical surplus fair scheduling (H-SFS), an instantiation of H-SMP that employs surplus fair scheduling (SFS) as an auxiliary algorithm. This evaluation is carried out through a simulation study that shows that H-SFS provides better fairness properties in multiprocessor environments as compared to existing algorithms and their naive extensions.", "paper_title": "Hierarchical scheduling for symmetric multiprocessors", "paper_id": "WOS:000252553000011"}