{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "persistent_systems"}, {"score": 0.04889532068804289, "phrase": "structural_object"}, {"score": 0.004755054742217193, "phrase": "formal_verification"}, {"score": 0.004541712637353326, "phrase": "petri_net"}, {"score": 0.004301834610818624, "phrase": "system_synthesis"}, {"score": 0.004160531596936783, "phrase": "transition_system"}, {"score": 0.0038271712887391015, "phrase": "system_reengineering"}, {"score": 0.0036248955128033084, "phrase": "similar_behaviour"}, {"score": 0.0035204268675160257, "phrase": "original_system"}, {"score": 0.0033622909109253616, "phrase": "specific_framework"}, {"score": 0.003334309053314909, "phrase": "finite-state_labelled_transition_systems"}, {"score": 0.0032381878248821383, "phrase": "behaviour_isomorphisms"}, {"score": 0.00290473242917264, "phrase": "restricted_circumstances"}, {"score": 0.002856563331151566, "phrase": "direct_correspondences"}, {"score": 0.002728166176898539, "phrase": "structural_objects"}, {"score": 0.002594652434287807, "phrase": "hardware_design"}, {"score": 0.002509284173541882, "phrase": "exact_conditions"}, {"score": 0.002477998427152547, "phrase": "finite_persistent_transition_system"}, {"score": 0.0024065032567542107, "phrase": "bounded_petri_net"}, {"score": 0.0023566987138026285, "phrase": "structural_way"}, {"score": 0.0023079225317714815, "phrase": "efficient_algorithm"}, {"score": 0.0021766418372878835, "phrase": "marked_graph_petri_nets"}, {"score": 0.00212268510072928, "phrase": "exact_characterisation"}], "paper_keywords": [""], "paper_abstract": "In formal verification, a structural object, such as a program or a Petri net, is given, and questions are asked about its behaviour. In system synthesis, conversely, a behavioural object, such as a transition system, is given, and questions are asked about the existence of a structural object realising this behaviour. In system reengineering, one wishes to transform a given system into another one, with similar behaviour and other properties not enjoyed by the original system. This paper addresses synthesis and reengineering problems in the specific framework of finite-state labelled transition systems, place/transition Petri nets, and behaviour isomorphisms. Since algorithms solving these problems are prohibitively time-consuming in general, it is interesting to know whether they can be improved in restricted circumstances, and whether direct correspondences can be found between classes of behavioural and classes of structural objects. This paper is concerned with persistent systems, which occur in hardware design and in various other applications. We shall derive exact conditions for a finite persistent transition system to be isomorphically implementable by a bounded Petri net exhibiting persistence in a structural way, and derive an efficient algorithm to find such a net if one exists. For the class of marked graph Petri nets, this leads to an exact characterisation of their state spaces.", "paper_title": "Synthesis and reengineering of persistent systems", "paper_id": "WOS:000351159100004"}