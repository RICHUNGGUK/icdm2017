{"auto_keywords": [{"score": 0.03596176205294269, "phrase": "random_scheduling"}, {"score": 0.022709850820280757, "phrase": "hop-based_burst-cluster_transmission"}, {"score": 0.019172329681749797, "phrase": "ingress_node"}, {"score": 0.01049200954582652, "phrase": "buffer_size"}, {"score": 0.007976048746834954, "phrase": "synchronization_issue"}, {"score": 0.006059715086817685, "phrase": "actual_waiting_time"}, {"score": 0.00481495049065317, "phrase": "transmission_delay"}, {"score": 0.004652024608167205, "phrase": "obs"}, {"score": 0.004443276312972159, "phrase": "obs_ring_networks"}, {"score": 0.004317576641196539, "phrase": "mesh_networks"}, {"score": 0.004243862930012258, "phrase": "overall_burst_loss_probability_increases"}, {"score": 0.0032398798149196432, "phrase": "maximum_waiting_time"}, {"score": 0.0031121406603482112, "phrase": "maximum_acceptable_delay"}, {"score": 0.003058944053868522, "phrase": "ip_packet"}, {"score": 0.0026494723416072316, "phrase": "obtained_maximum_waiting_time"}, {"score": 0.0025014259919355453, "phrase": "burst_cluster"}, {"score": 0.002268441347979241, "phrase": "nsfnet._numerical_examples"}, {"score": 0.0021049977753042253, "phrase": "overall_burst_loss_probability"}], "paper_keywords": ["Optical burst switching", " Fairness", " Burst-cluster transmission", " Synchronization", " Random scheduling"], "paper_abstract": "Hop-based burst-cluster transmission improves fairness significantly in OBS ring networks. However, in mesh networks, the overall burst loss probability increases using the method because the transmission of a burst-cluster from an ingress node is often synchronized with a burst-cluster from another ingress node. In order to resolve the synchronization issue, we propose in this article the utilization of random scheduling for hop-based burst-cluster transmission. In random scheduling, the maximum waiting time is determined in advance from the maximum acceptable delay of an IP packet and the buffer size of the ingress node. Every time a burst-cluster is generated, a scheduler derives the actual waiting time at random based on the obtained maximum waiting time. When a timer becomes the actual waiting time, the burst cluster is transmitted from the scheduler. By simulation, we evaluate the effectiveness of random scheduling for NSFNET. Numerical examples show that the random scheduling can resolve the synchronization issue and can decrease the overall burst loss probability. In addition, it is shown that random scheduling can also improve the fairness significantly.", "paper_title": "Random scheduling based on transmission delay and buffer size for hop-based burst-cluster transmission in OBS networks", "paper_id": "WOS:000277181900007"}