{"auto_keywords": [{"score": 0.04722154241900733, "phrase": "ga"}, {"score": 0.007786176564416143, "phrase": "mpi"}, {"score": 0.00481495049065317, "phrase": "transformation_support"}, {"score": 0.004717325943509345, "phrase": "disk_resident_arrays_framework"}, {"score": 0.004512489769255262, "phrase": "dra"}, {"score": 0.004375928080972614, "phrase": "shared-memory_programming_model"}, {"score": 0.0037395458116642306, "phrase": "language_bindings"}, {"score": 0.003613899384402803, "phrase": "ga_programming_model"}, {"score": 0.0035648266669315943, "phrase": "secondary_storage"}, {"score": 0.003375087185182269, "phrase": "convenient_programming_model"}, {"score": 0.003306559295382181, "phrase": "locality-aware_programming"}, {"score": 0.0031305230217636495, "phrase": "high-level_abstraction"}, {"score": 0.002984173420996039, "phrase": "appropriate_distribution"}, {"score": 0.0028641729745364952, "phrase": "disk-resident_arrays"}, {"score": 0.0026565317818265394, "phrase": "layout_transformation_support"}, {"score": 0.002532284627202572, "phrase": "efficient_parallel_layout_transformation_algorithm"}, {"score": 0.0022696277881969896, "phrase": "enhanced_dra_functionality"}, {"score": 0.002238767763626708, "phrase": "experimental_performance_data"}, {"score": 0.0021049977753042253, "phrase": "new_layout_transformation_functionality"}], "paper_keywords": [""], "paper_abstract": "The Global Arrays (GA) toolkit provides a shared-memory programming model in which data locality is explicitly managed by the programmer. It inter-operates with MPI and supports a variety of language bindings. The Disk Resident Arrays (DRA) model extends the GA programming model to secondary storage. GA and DRA together provide a convenient programming model that encourages locality-aware programming by the user, while presenting a high-level abstraction. High performance depends on the appropriate distribution of the data in the disk-resident arrays. In this paper, we discuss the addition of layout transformation support to DRA. The implementation of an efficient parallel layout transformation algorithm is done on top of existing GA/DRA functions; thus GA/DRA is itself used in implementing the enhanced DRA functionality. Experimental performance data is provided that demonstrates the effectiveness of the new layout transformation functionality.", "paper_title": "Layout transformation support for the disk resident arrays framework", "paper_id": "WOS:000237506300005"}