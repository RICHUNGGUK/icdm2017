{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "shorter_regular_expressions"}, {"score": 0.021694787126973113, "phrase": "state_elimination"}, {"score": 0.010450698841728178, "phrase": "finite-state_automata"}, {"score": 0.007005644846866669, "phrase": "vertical_chopping"}, {"score": 0.006845576807336378, "phrase": "bridge_states"}, {"score": 0.006740887986802887, "phrase": "horizontal_chopping"}, {"score": 0.004031238480458909, "phrase": "intuitive_method"}, {"score": 0.00393886140366453, "phrase": "regular_expressions"}, {"score": 0.003789561910103601, "phrase": "resulting_regular_expressions"}, {"score": 0.0033486631403337555, "phrase": "shorter_expressions"}, {"score": 0.0029589086332593674, "phrase": "structural_properties"}, {"score": 0.0025942468561537682, "phrase": "non-bridge_states"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["regular languages", " finite-state automata", " state elimination", " bridge states", " vertical chopping", " horizontal chopping"], "paper_abstract": "We consider the use of state elimination to construct shorter regular expressions from finite-state automata (FAs). Although state elimination is an intuitive method for computing regular expressions from FAs, the resulting regular expressions are often very long and complicated. We examine the minimization of FAs to obtain shorter expressions first. Then, we introduce vertical chopping based on bridge states and horizontal chopping based on the structural properties of given FAs. We prove that we should not eliminate bridge states until we eliminate all non-bridge states to obtain shorter regular expressions. In addition, we suggest heuristics for state elimination that leads to shorter regular expressions based on vertical chopping and horizontal chopping. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Obtaining shorter regular expressions from finite-state automata", "paper_id": "WOS:000244214900008"}