{"auto_keywords": [{"score": 0.0378414472002853, "phrase": "security_properties"}, {"score": 0.00481495049065317, "phrase": "sound_implementations"}, {"score": 0.0045547927862194856, "phrase": "core_language"}, {"score": 0.00443000995237127, "phrase": "distributed_programs"}, {"score": 0.004338661611644755, "phrase": "public_network"}, {"score": 0.004104132253183181, "phrase": "pi_calculus"}, {"score": 0.0040194764936614565, "phrase": "secure_communications"}, {"score": 0.003964007795174772, "phrase": "mobile_names"}, {"score": 0.0038822311096089307, "phrase": "high-level_certificates"}, {"score": 0.003749654338704576, "phrase": "explicit_cryptography"}, {"score": 0.003449585750738867, "phrase": "trace_properties"}, {"score": 0.003401954670986958, "phrase": "observational_equivalences"}, {"score": 0.002939737235379635, "phrase": "concrete_setting"}, {"score": 0.0028590732866152118, "phrase": "standard_cryptographic_primitives"}, {"score": 0.0028195727965553367, "phrase": "computational_assumptions"}, {"score": 0.0025937408242280757, "phrase": "arbitrary_probabilistic_polynomial-time_algorithm"}, {"score": 0.002436289099444074, "phrase": "cryptographic_implementation"}, {"score": 0.002320449502337321, "phrase": "safe_programs"}, {"score": 0.0022101055924375725, "phrase": "soundness_and_completeness_results"}], "paper_keywords": [""], "paper_abstract": "We design a core language of principals running distributed programs over a public network. Our language is a variant of the pi calculus, with secure communications, mobile names, and high-level certificates, but without any explicit cryptography. Within this language, security properties can be conveniently studied using trace properties and observational equivalences, even in the presence of an arbitrary (abstract) adversary. With some care, these security properties can be achieved in a concrete setting, relying on standard cryptographic primitives and computational assumptions, even in the presence of an adversary modeled as an arbitrary probabilistic polynomial-time algorithm. To this end, we develop a cryptographic implementation that preserves all properties for all safe programs. We give a series of soundness and completeness results that precisely relate the language to its implementation.", "paper_title": "Cryptographically sound implementations for communicating processes", "paper_id": "WOS:000239475900008"}