{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "top_down_dynamic_programs"}, {"score": 0.004684157900507474, "phrase": "straightforward_way"}, {"score": 0.004556901872357751, "phrase": "careful_choice"}, {"score": 0.00443308765153716, "phrase": "lock-free_shared_hash_table_implementation"}, {"score": 0.004081385289516914, "phrase": "dynamic_program"}, {"score": 0.0038981499110532307, "phrase": "generic_approach"}, {"score": 0.003757480190200645, "phrase": "dynamic_programs"}, {"score": 0.0036218682585355895, "phrase": "shortest_paths"}, {"score": 0.0029586543333524904, "phrase": "maximum_number"}, {"score": 0.00290473242917264, "phrase": "open_stacks"}, {"score": 0.002851790448644913, "phrase": "experimental_results"}, {"score": 0.002224510044064184, "phrase": "open_stacks_problem"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Dynamic programming", " Lock-free hash tables", " Constraint programming", " Multicores", " Parallelism"], "paper_abstract": "We show a method for parallelizing top down dynamic programs in a straightforward way by a careful choice of a lock-free shared hash table implementation and randomization of the order in which the dynamic program computes its subproblems. This generic approach is applied to dynamic programs for knapsack, shortest paths, and RNA structure alignment, as well as to a state-of-the-art solution for minimizing the maximum number of open stacks. Experimental results are provided on three different modern multicore architectures which show that this parallelization is effective and reasonably scalable. In particular, we obtain over 10 times speedup for 32 threads on the open stacks problem. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Lock-free parallel dynamic programming", "paper_id": "WOS:000278924200005"}