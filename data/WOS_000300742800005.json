{"auto_keywords": [{"score": 0.03478739976393434, "phrase": "pycuda"}, {"score": 0.034513826462116794, "phrase": "pyopencl"}, {"score": 0.00481495049065317, "phrase": "gpu_run-time_code_generation"}, {"score": 0.004548253531664032, "phrase": "heterogeneous_systems"}, {"score": 0.0044385053213394175, "phrase": "modern_graphics_processing_units"}, {"score": 0.004296264970612285, "phrase": "tremendous_potential"}, {"score": 0.004192571571622019, "phrase": "important_large-scale_applications"}, {"score": 0.0038645966233348933, "phrase": "specialized_and_rapidly_evolving_computing_environment"}, {"score": 0.0036503460615862574, "phrase": "better_techniques"}, {"score": 0.0028121429464519733, "phrase": "compelling_two-tiered_computing_platform"}, {"score": 0.002699769374493867, "phrase": "conventional_single-tier"}, {"score": 0.002379092507901856, "phrase": "custom_application-specific_tools"}, {"score": 0.00224701149477484, "phrase": "wide_range"}, {"score": 0.0021571717917276724, "phrase": "considerable_success"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["GPU", " Many-core", " Code generation", " Automated tuning", " Software engineering", " High-level languages", " Massive parallelism", " Single-instruction multiple-data", " CUDA", " OpenCL"], "paper_abstract": "High-performance computing has recently seen a surge of interest in heterogeneous systems, with an emphasis on modern Graphics Processing Units (GPUs). These devices offer tremendous potential for performance and efficiency in important large-scale applications of computational science. However, exploiting this potential can be challenging, as one must adapt to the specialized and rapidly evolving computing environment currently exhibited by GPUs. One way of addressing this challenge is to embrace better techniques and develop tools tailored to their needs. This article presents one simple technique, CPU run-time code generation (RTCG), along with PyCUDA and PyOpenCL, two open-source tool-kits that supports this technique. In introducing PyCUDA and PyOpenCL, this article proposes the combination of a dynamic, high-level scripting language with the massive performance of a CPU as a compelling two-tiered computing platform, potentially offering significant performance and productivity advantages over conventional single-tier, static systems. The concept of RTCG is simple and easily implemented using existing, robust infrastructure. Nonetheless it is powerful enough to support (and encourage) the creation of custom application-specific tools by its users. The premise of the paper is illustrated by a wide range of examples where the technique has been applied with considerable success. (C) 2011 Elsevier B.V. All rights", "paper_title": "PyCUDA and PyOpenCL: A scripting-based approach to GPU run-time code generation", "paper_id": "WOS:000300742800005"}