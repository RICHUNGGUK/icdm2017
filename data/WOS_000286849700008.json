{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "automatic_monitoring"}, {"score": 0.004781915513030716, "phrase": "program_security_vulnerability_exploitations"}, {"score": 0.004604214511792668, "phrase": "wide_variety"}, {"score": 0.004510073211984104, "phrase": "different_execution_environments"}, {"score": 0.004253618550301311, "phrase": "program_vulnerabilities"}, {"score": 0.003970439654470374, "phrase": "development_phases"}, {"score": 0.003929613937944779, "phrase": "large_vulnerability-free_programs"}, {"score": 0.0036177098964897364, "phrase": "online_monitoring"}, {"score": 0.003555902292752528, "phrase": "operational_stage"}, {"score": 0.0034118234596993836, "phrase": "vulnerability_exploitations"}, {"score": 0.0033767221949228834, "phrase": "early_detection"}, {"score": 0.002822434555587263, "phrase": "program_vulnerability_exploitations"}, {"score": 0.002726740692380339, "phrase": "existing_approaches"}, {"score": 0.0026252106881752067, "phrase": "online_attack_detection_approaches"}, {"score": 0.0023999697562763433, "phrase": "open_issues"}, {"score": 0.0023834640793589435, "phrase": "future_research_direction"}, {"score": 0.0023426936553484546, "phrase": "program_vulnerability_exploitation_monitoring"}, {"score": 0.0022476609946536345, "phrase": "existing_monitoring_approaches"}, {"score": 0.0021714122348552747, "phrase": "desired_characteristics"}, {"score": 0.0021490449563443025, "phrase": "monitoring_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Program security vulnerabiilties", " Monitoring", " Taxonomy"], "paper_abstract": "Software applications (programs) are implemented in a wide variety of languages and run on different execution environments. Programs contain vulnerabilities which can be detected before their deployment. Nevertheless, there exist some program vulnerabilities, which do not surface until a program is operational. No matter how much effort has been put during the development phases, building large vulnerability-free programs has proven extremely difficult in practice. Given that, it is very important to have a tool that can be used for online monitoring of programs in the operational stage. The tool can help to mitigate the consequences of some vulnerability exploitations, by early detection of attacks at runtime. Currently, many monitoring approaches have been proposed and applied in practice. However, there is no classification of these approaches to understand their common characteristics and limitations. In this paper, we present a taxonomy and classification of the state of the art approaches employed for monitoring program vulnerability exploitations (or attacks). We first classify the existing approaches based on a set of characteristics which are common in online attack detection approaches. Then, we present a taxonomy by classifying the approaches based on monitoring aspects that primarily differentiate among the approaches. We also discuss open issues and future research direction in the area of program vulnerability exploitation monitoring. The study will enable practitioners and researchers to differentiate among existing monitoring approaches. It will provide a guideline to consider the desired characteristics while developing monitoring approaches. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Taxonomy and classification of automatic monitoring of program security vulnerability exploitations", "paper_id": "WOS:000286849700008"}