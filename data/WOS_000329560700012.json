{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "linear_prefix_tree"}, {"score": 0.004616859702338596, "phrase": "low_memory_usage"}, {"score": 0.004489327204473076, "phrase": "different_types"}, {"score": 0.004108161406159407, "phrase": "memory_usage"}, {"score": 0.0038301525703886585, "phrase": "mining_methods"}, {"score": 0.0036553070575015344, "phrase": "state-of-the-art_mining_algorithms_use_tree_structures"}, {"score": 0.0031475032122226, "phrase": "inefficient_way"}, {"score": 0.0030461580449080553, "phrase": "numerous_pointers"}, {"score": 0.0029206231857112305, "phrase": "novel_tree_structure"}, {"score": 0.0028133741785871867, "phrase": "lp-tree"}, {"score": 0.002787181295054319, "phrase": "linear_prefix_-_tree"}, {"score": 0.002722758109991685, "phrase": "array_forms"}, {"score": 0.0025741370320813968, "phrase": "minimum_information_required_in_mining_process_and_linearly_accesses_corresponding_nodes"}, {"score": 0.002445021071485221, "phrase": "mining_process"}, {"score": 0.0023223663501882917, "phrase": "experimental_results"}, {"score": 0.0022686625017583387, "phrase": "previous_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data mining", " Frequent pattern mining", " Linear tree", " Pattern growth", " Knowledge discovery"], "paper_abstract": "Outstanding frequent pattern mining guarantees both fast runtime and low memory usage with respect to various data with different types and sizes. However, it is hard to improve the two elements since runtime is inversely proportional to memory usage in general. Researchers have made efforts to overcome the problem and have proposed mining methods which can improve both through various approaches. Many of state-of-the-art mining algorithms use tree structures, and they create nodes independently and connect them as pointers when constructing their own trees. Accordingly, the methods have pointers for each node in the trees, which is an inefficient way since they should manage and maintain numerous pointers. In this paper, we propose a novel tree structure to solve the limitation. Our new structure, LP-tree (Linear Prefix - Tree) is composed of array forms and minimizes pointers between nodes. In addition, LP-tree uses minimum information required in mining process and linearly accesses corresponding nodes. We also suggest an algorithm applying LP-tree to the mining process. The algorithm is evaluated through various experiments, and the experimental results show that our approach outperforms previous algorithms in term of the runtime, memory, and scalability. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Efficient frequent pattern mining based on Linear Prefix tree", "paper_id": "WOS:000329560700012"}