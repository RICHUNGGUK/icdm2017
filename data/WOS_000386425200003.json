{"auto_keywords": [{"score": 0.04346060492379688, "phrase": "existing_solutions"}, {"score": 0.03330494146203023, "phrase": "cloudwalker"}, {"score": 0.00481495049065317, "phrase": "parallel_simrank"}, {"score": 0.0046783905123665296, "phrase": "simrank"}, {"score": 0.004362564831572539, "phrase": "great_challenge"}, {"score": 0.00430907756010007, "phrase": "modern_distributed_computing_power"}, {"score": 0.004067977399245212, "phrase": "practical_issues"}, {"score": 0.0039040344230094164, "phrase": "maximum_efficiency"}, {"score": 0.0037776319581225046, "phrase": "online_phases"}, {"score": 0.0037312893857519803, "phrase": "offline_phase"}, {"score": 0.0036855132234738736, "phrase": "length-n_indexing_vector"}, {"score": 0.0035956327252723483, "phrase": "linear_system"}, {"score": 0.0035224030823976186, "phrase": "online_query_time"}, {"score": 0.003394314924677555, "phrase": "index_vector"}, {"score": 0.0033251716926666437, "phrase": "monte_carlo_method"}, {"score": 0.0029147175927233546, "phrase": "single-source_queries"}, {"score": 0.0027176309244222, "phrase": "large-scale_problems"}, {"score": 0.0025972447844047515, "phrase": "web-scale_clue-web_graph"}, {"score": 0.0024821782596371536, "phrase": "offline_indexing"}, {"score": 0.002431570196486513, "phrase": "single-pair_query"}, {"score": 0.0023624435546097658, "phrase": "single-source_query"}, {"score": 0.0022117133940361025, "phrase": "clue_web"}, {"score": 0.002139986159978777, "phrase": "largest_graph"}, {"score": 0.0021049977753042253, "phrase": "simrank_computation"}], "paper_keywords": [""], "paper_abstract": "Despite its popularity, SimRank is computationally costly, in both time and space. In particular, its recursive nature poses a great challenge in using modern distributed computing power, and also prevents querying similarities individually. Existing solutions suffer greatly from these practical issues. In this paper, we break such dependency for maximum efficiency possible. Our method consists of offline and online phases. In offline phase, a length-n indexing vector is derived by solving a linear system in parallel. At online query time, the similarities are computed instantly from the index vector. Throughout, the Monte Carlo method is used to maximally reduce time and space. Our algorithm, called CloudWalker, is highly parallelizable, with only linear time and space. Remarkably, it responses to both single-pair and single-source queries in constant time. CloudWalker is orders of magnitude more efficient and scalable than existing solutions for large-scale problems. Implemented on Spark with 10 machines and tested on the web-scale clue-web graph with 1 billion nodes and 43 billion edges, it takes 110 hours for offline indexing, 64 seconds for a single-pair query, and 188 seconds for a single-source query. To the best of our knowledge, our work is the first to report results on clue web, which is 10x larger than the largest graph ever reported for SimRank computation.", "paper_title": "Walking in the Cloud: Parallel SimRank at Scale", "paper_id": "WOS:000386425200003"}