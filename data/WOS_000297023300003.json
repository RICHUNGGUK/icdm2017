{"auto_keywords": [{"score": 0.049445419527232096, "phrase": "concurrent_programs"}, {"score": 0.04820189656526341, "phrase": "machine-level_language"}, {"score": 0.00481495049065317, "phrase": "colored_petri_nets"}, {"score": 0.004158290806404304, "phrase": "programming_language_community"}, {"score": 0.004048860957751714, "phrase": "existing_contributions"}, {"score": 0.003942299471749811, "phrase": "safety_properties"}, {"score": 0.003813017794036879, "phrase": "high-level_languages"}, {"score": 0.003381607100127276, "phrase": "low_level"}, {"score": 0.0033367819052051995, "phrase": "additional_work"}, {"score": 0.0029789104204803137, "phrase": "petri_nets"}, {"score": 0.0029394074636168435, "phrase": "low-level_concurrent_programs"}, {"score": 0.002861961643289598, "phrase": "new_programming_model"}, {"score": 0.0026771333996253783, "phrase": "programming_model"}, {"score": 0.0026240423738883704, "phrase": "restricted_version"}, {"score": 0.0025892330566358503, "phrase": "colored_petri_net"}, {"score": 0.0024875444192203485, "phrase": "assembly_codes"}, {"score": 0.0024545413637350765, "phrase": "machine-level_threads"}, {"score": 0.00235813005446246, "phrase": "shared_data"}, {"score": 0.0023113506171584157, "phrase": "memory_locations"}, {"score": 0.002250415129116109, "phrase": "existing_analysis_and_verification_approaches"}, {"score": 0.00220578747145195, "phrase": "petri"}], "paper_keywords": ["low-level concurrent programs", " colored Petri nets", " abstract machine", " verification"], "paper_abstract": "Concurrent programs written in a machine-level language are being used in many areas, but the verification of such programs brings various new challenges to the programming language community. Most of existing contributions on verifying the safety properties of concurrent programs are for high-level languages, specifications, or calculi in the literature. Due to the lack of abstraction at a low level, additional work is needed to extend these methods to machine-level language. This paper describes an approach to integrate Petri nets into low-level concurrent programs to form a new programming model ( abstract machine). A program in the programming model is a restricted version of colored Petri net, with transitions colored by assembly codes for machine-level threads, and places colored by shared data consisting of memory locations or registers. Existing analysis and verification approaches for usual Petri nets can be applied indirectly for such a low-level concurrent program.", "paper_title": "A verifiable low-level concurrent programming model based on colored Petri nets", "paper_id": "WOS:000297023300003"}