{"auto_keywords": [{"score": 0.03215365645302042, "phrase": "light"}, {"score": 0.00481495049065317, "phrase": "query-efficient_yet_low-maintenance_indexing_scheme"}, {"score": 0.004716532273390275, "phrase": "dht"}, {"score": 0.004644014990871423, "phrase": "widely_used_building_block"}, {"score": 0.004479120557712926, "phrase": "uniform_hashing"}, {"score": 0.004364919932563366, "phrase": "data_locality"}, {"score": 0.004231699728933577, "phrase": "trivial_task"}, {"score": 0.0041666157975446564, "phrase": "complex_queries"}, {"score": 0.004123781267600542, "phrase": "e._g."}, {"score": 0.0040186038781533946, "phrase": "k-nearest-neighbor_queries"}, {"score": 0.003835972725191194, "phrase": "efficient_processing"}, {"score": 0.0037381083634085424, "phrase": "popular_solution"}, {"score": 0.0035681793227538778, "phrase": "dht."}, {"score": 0.003513264130359459, "phrase": "existing_over-dht_indexing_schemes"}, {"score": 0.0033883824438527316, "phrase": "high_maintenance_cost"}, {"score": 0.0032510690712452147, "phrase": "lightweight_hash_tree"}, {"score": 0.0029164434911787187, "phrase": "tree_summarization_strategy"}, {"score": 0.0028864239961184364, "phrase": "graceful_distribution"}, {"score": 0.002684740763324991, "phrase": "near-optimal_performance"}, {"score": 0.0026570998719084153, "phrase": "extensive_experimental_results"}, {"score": 0.0025625729433234644, "phrase": "state_of_the_art_over-dht_indexing_schemes"}, {"score": 0.002471400498582011, "phrase": "index_maintenance_cost"}, {"score": 0.002420762293555924, "phrase": "query_performance"}, {"score": 0.002358917661465133, "phrase": "response_time"}, {"score": 0.0023346234464901978, "phrase": "bandwidth_consumption"}, {"score": 0.0022283519468680475, "phrase": "generic_dhts"}], "paper_keywords": ["Distributed hash tables", " indexing", " complex queries"], "paper_abstract": "DHT is a widely used building block for scalable P2P systems. However, as uniform hashing employed in DHTs destroys data locality, it is not a trivial task to support complex queries (e. g., range queries and k-nearest-neighbor queries) in DHT-based P2P systems. In order to support efficient processing of such complex queries, a popular solution is to build indexes on top of the DHT. Unfortunately, existing over-DHT indexing schemes suffer from either query inefficiency or high maintenance cost. In this paper, we propose LIGhtweight Hash Tree (LIGHT)-a query-efficient yet low-maintenance indexing scheme. LIGHT employs a novel naming mechanism and a tree summarization strategy for graceful distribution of its index structure. We show through analysis that it can support various complex queries with near-optimal performance. Extensive experimental results also demonstrate that, compared with state of the art over-DHT indexing schemes, LIGHT saves 50-75 percent of index maintenance cost and substantially improves query performance in terms of both response time and bandwidth consumption. In addition, LIGHT is designed over generic DHTs and hence can be easily implemented and deployed in any DHT-based P2P system.", "paper_title": "LIGHT: A Query-Efficient Yet Low-Maintenance Indexing Scheme over DHTs", "paper_id": "WOS:000271852200006"}