{"auto_keywords": [{"score": 0.04821664133686309, "phrase": "two-dimensional_suffix_tree"}, {"score": 0.032680919121689925, "phrase": "gg_algorithm"}, {"score": 0.00481495049065317, "phrase": "line_construction"}, {"score": 0.004783232571029632, "phrase": "two-dimensional_suffix_trees"}, {"score": 0.0045820747375409435, "phrase": "n_x_n_square_matrix_a"}, {"score": 0.004462494148878735, "phrase": "square_submatrices"}, {"score": 0.004331675965350876, "phrase": "off-line_case"}, {"score": 0.00404109360612109, "phrase": "optimal_time"}, {"score": 0.003961694867182568, "phrase": "alphabet_size"}, {"score": 0.003794954883650141, "phrase": "image_compression"}, {"score": 0.003732702104052828, "phrase": "giancarlo"}, {"score": 0.003708086804757529, "phrase": "guaiana"}, {"score": 0.0033576858946833587, "phrase": "nontrivial_generalization"}, {"score": 0.0033355353594739707, "phrase": "ukkonen's_on-line_algorithm"}, {"score": 0.0032269483581856737, "phrase": "main_contribution"}, {"score": 0.003030247482854539, "phrase": "unbounded_alphabets"}, {"score": 0.002883439044844259, "phrase": "major_simplification"}, {"score": 0.0027166013332405453, "phrase": "original_gg_algorithm"}, {"score": 0.002671990515821213, "phrase": "computational_bottleneck"}, {"score": 0.0026455755027979533, "phrase": "primitive_operation"}, {"score": 0.0026107601878587816, "phrase": "lcharacters"}, {"score": 0.0025509294021449254, "phrase": "constant_time"}, {"score": 0.00250073564820402, "phrase": "gg."}, {"score": 0.0023172863267744703, "phrase": "careful_reorganization"}, {"score": 0.002294369814584028, "phrase": "fundamental_algorithm"}, {"score": 0.002279222647514858, "phrase": "weiner"}, {"score": 0.002226968099778524, "phrase": "standard_suffix_trees"}, {"score": 0.0021049977753042253, "phrase": "linear_time"}], "paper_keywords": ["two-dimensional suffix tree", " on-line algorithm", " index data structures"], "paper_abstract": "The two-dimensional suffix tree of an n x n square matrix A is a compacted trie that represents all square submatrices of A [11]. For the off-line case, i.e., A is given in advance to the algorithm, it is known how to build it in optimal time, for any type of alphabet size [11], [18]. Motivated by applications in Image Compression [22], Giancarlo and Guaiana [14] considered the on-line version of the two-dimensional suffix tree and presented an 0(n(2) log(2) n)-time algorithm, which we refer to as GG. That algorithm is a nontrivial generalization of Ukkonen's on-line algorithm for standard suffix trees [23]. The main contribution in this paper is an 0(log n) factor improvement in the time complexity of the GG algorithm, making it optimal for unbounded alphabets [9]. Moreover, the ideas presented here also lead to a major simplification of the GG algorithm. Technically, we are able to preserve most of the structure of the original GG algorithm, by reducing a computational bottleneck to a primitive operation, i.e., comparison of Lcharacters, which is here implemented in constant time rather than 0 (log n) time as in GG. However, preserving that structure comes at a price. Indeed, in order to make everything work, we need a careful reorganization of another fundamental algorithm: Weiner's algorithm for the construction of standard suffix trees [24]. Specifically, here we provide a version of that algorithm which takes linear time and works on-line and concurrently over a set of strings.", "paper_title": "On-line construction of two-dimensional suffix trees in O(n(2) log n) time", "paper_id": "WOS:000247032500005"}