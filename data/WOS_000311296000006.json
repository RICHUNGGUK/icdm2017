{"auto_keywords": [{"score": 0.0046477357199085035, "phrase": "shared_state"}, {"score": 0.004606843145343611, "phrase": "higher-order_languages"}, {"score": 0.004254558771304349, "phrase": "disjoint_pieces"}, {"score": 0.0042171108629745655, "phrase": "different_parts"}, {"score": 0.003877329308854808, "phrase": "logical_notion"}, {"score": 0.00342568771304873, "phrase": "nearly_all_existing_systems"}, {"score": 0.0028572658971252616, "phrase": "recent_work"}, {"score": 0.0028195727965553367, "phrase": "fictional_disjointness"}, {"score": 0.00278237555651743, "phrase": "separation_logic"}, {"score": 0.002721464488351771, "phrase": "simple_and_flexible_way"}, {"score": 0.002512990657100351, "phrase": "commutative_monoid"}, {"score": 0.0024579623598183355, "phrase": "fine-grained_control"}, {"score": 0.0024148064819862337, "phrase": "module's_private_state"}, {"score": 0.002279702500235741, "phrase": "otherwise_standard_substructural_type_system"}, {"score": 0.0022297712188622293, "phrase": "new_typing_rule"}, {"score": 0.0021049977753042253, "phrase": "novel_resource-oriented_kripke_logical_relation"}], "paper_keywords": ["Languages", " Design", " Theory", " Verification", " Substructural type systems", " separation logic", " sharing rule", " commutative monoids", " fictional disjointness", " ADTs", " hidden state", " dependent types", " capabilities", " Kripke logical relations"], "paper_abstract": "Many substructural type systems have been proposed for controlling access to shared state in higher-order languages. Central to these systems is the notion of a resource, which may be split into disjoint pieces that different parts of a program can manipulate independently without worrying about interfering with one another. Some systems support a logical notion of resource (such as permissions), under which two resources may be considered disjoint even if they govern the same piece of state. However, in nearly all existing systems, the notions of resource and disjointness are fixed at the outset, baked into the model of the language, and fairly coarse-grained in the kinds of sharing they enable. In this paper, inspired by recent work on \"fictional disjointness\" in separation logic, we propose a simple and flexible way of enabling any module in a program to create its own custom type of splittable resource (represented as a commutative monoid), thus providing fine-grained control over how the module's private state is shared with its clients. This functionality can be incorporated into an otherwise standard substructural type system by means of a new typing rule we call the sharing rule, whose soundness we prove semantically via a novel resource-oriented Kripke logical relation.", "paper_title": "Superficially Substructural Types", "paper_id": "WOS:000311296000006"}