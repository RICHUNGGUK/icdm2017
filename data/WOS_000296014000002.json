{"auto_keywords": [{"score": 0.046944515555628875, "phrase": "advance_reservation"}, {"score": 0.00481495049065317, "phrase": "bounded_path_dispersion"}, {"score": 0.004707672504464783, "phrase": "high_throughput_needs"}, {"score": 0.004637478829869904, "phrase": "cloud_computing_applications"}, {"score": 0.004466519142879166, "phrase": "dedicated_circuits"}, {"score": 0.004416465443332974, "phrase": "important_open_problem"}, {"score": 0.004301834610818624, "phrase": "advance_reservation_algorithms"}, {"score": 0.004237666411136617, "phrase": "provable_throughput_performance_guarantees"}, {"score": 0.004174451361776433, "phrase": "specific_network_topology"}, {"score": 0.004143196873246147, "phrase": "arrival_pattern"}, {"score": 0.004112175423546628, "phrase": "reservation_requests"}, {"score": 0.0039456466422100045, "phrase": "throughput_performance"}, {"score": 0.003916098498242888, "phrase": "greedy_approaches"}, {"score": 0.0038431888954930083, "phrase": "earliest_possible_completion_time"}, {"score": 0.003800093834008562, "phrase": "incoming_request"}, {"score": 0.0032694619052789768, "phrase": "delay_bounds"}, {"score": 0.003113441660343867, "phrase": "completion_time"}, {"score": 0.002931569771634119, "phrase": "looser_delay_performance"}, {"score": 0.0028446460307503343, "phrase": "simple_approach"}, {"score": 0.0028127163745564777, "phrase": "path_dispersion"}, {"score": 0.0027395968397212053, "phrase": "parallel_paths"}, {"score": 0.0026384167183586015, "phrase": "maximum_reduction_factor"}, {"score": 0.0026087958216676676, "phrase": "transmission_throughput"}, {"score": 0.0024105326885334962, "phrase": "total_number"}, {"score": 0.0023040642263522505, "phrase": "traffic_parameters"}, {"score": 0.002252602622785975, "phrase": "proposed_algorithms"}, {"score": 0.00223570488212345, "phrase": "reasonable_delay_performance"}, {"score": 0.0022022878843247257, "phrase": "request_arrival_rates"}, {"score": 0.0021775526153883355, "phrase": "capacity_bounds"}, {"score": 0.0021049977753042253, "phrase": "near-optimal_performance"}], "paper_keywords": ["Approximation algorithms", " high-speed networks", " routing", " scheduling"], "paper_abstract": "In response to the high throughput needs of grid and cloud computing applications, several production networks have recently started to support advance reservation of dedicated circuits. An important open problem within this context is to devise advance reservation algorithms that can provide provable throughput performance guarantees independently of the specific network topology and arrival pattern of reservation requests. In this paper, we first show that the throughput performance of greedy approaches, which return the earliest possible completion time for each incoming request, can be arbitrarily worse than optimal. Next, we introduce two new online, polynomial-time algorithms for advance reservation, called BatchAll and BatchLim. Both algorithms are shown to be throughput-optimal through the derivation of delay bounds for 1 + epsilon bandwidth augmented networks. The BatchLim algorithm has the advantage of returning the completion time of a connection immediately as a request is placed, but at the expense of looser delay performance than BatchAll. We then propose a simple approach that limits path dispersion, i.e., the number of parallel paths used by the algorithms, while provably bounding the maximum reduction factor in the transmission throughput. We prove that the number of paths needed to approximate any flow is quite small and never exceeds the total number of edges in the network. Through simulation for various topologies and traffic parameters, we show that the proposed algorithms achieve reasonable delay performance, even at request arrival rates close to capacity bounds, and that three to five parallel paths are sufficient to achieve near-optimal performance.", "paper_title": "Throughput-Competitive Advance Reservation With Bounded Path Dispersion", "paper_id": "WOS:000296014000002"}