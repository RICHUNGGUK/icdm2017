{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "krt"}, {"score": 0.030787368085973914, "phrase": "recursive_denotational_control_structures"}, {"score": 0.00481495049065317, "phrase": "programming_systems_allowing_program_self-reference"}, {"score": 0.00459568664065473, "phrase": "program_self-reference"}, {"score": 0.004556901872357751, "phrase": "effective_programming_systems"}, {"score": 0.0044424917428102445, "phrase": "computability-theoretic_analogs"}, {"score": 0.004312622975366676, "phrase": "partial_computable_functions"}, {"score": 0.004151188559520802, "phrase": "constructive_form"}, {"score": 0.004116139569480336, "phrase": "kleene's_recursion_theorem"}, {"score": 0.0038461532860146535, "phrase": "arbitrary_algorithmic_task"}, {"score": 0.0033865859510157238, "phrase": "not-necessarily-constructive_form"}, {"score": 0.0033579928020156494, "phrase": "kleene"}, {"score": 0.0033295966773779174, "phrase": "recursion_theorem"}, {"score": 0.003032820755030689, "phrase": "earlier_effort"}, {"score": 0.0030071884513674036, "phrase": "royer"}, {"score": 0.002704403349815203, "phrase": "finite_injury_priority_argument"}, {"score": 0.0024114635128122783, "phrase": "positive_side"}, {"score": 0.0021410718792612173, "phrase": "surprising_result"}, {"score": 0.0021049977753042253, "phrase": "hidden_and_inherent_constructivity"}], "paper_keywords": ["Computability theory", " Computable operators", " Control structures", " Numberings", " Programming systems", " Recursive function theory", " Recursive operators", " Recursion theorem", " Self-reference"], "paper_abstract": "The interest is in characterizing insightfully the power of program self-reference in effective programming systems (epses), the computability-theoretic analogs of programming languages (for the partial computable functions). In an eps in which the constructive form of Kleene's Recursion Theorem (KRT) holds, it is possible to construct, algorithmically, from an arbitrary algorithmic task, a self-referential program that, in a sense, creates a self-copy and then performs that task on the self-copy. In an eps in which the not-necessarily-constructive form of Kleene's Recursion Theorem (krt) holds, such self-referential programs exist, but cannot, in general, be found algorithmically. In an earlier effort, Royer proved that there is no collection of recursive denotational control structures whose implementability characterizes the epses in which KRT holds. One main result herein, proven by a finite injury priority argument, is that the epses in which krt holds are, similarly, not characterized by the implementability of some collection of recursive denotational control structures. On the positive side, however, a characterization of such epses of a rather different sort is shown herein. Though, perhaps not the insightful characterization sought after, this surprising result reveals that a hidden and inherent constructivity is always present in krt.", "paper_title": "Characterizing Programming Systems Allowing Program Self-Reference", "paper_id": "WOS:000268585400006"}