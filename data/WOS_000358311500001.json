{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "algebraic_effect_handlers"}, {"score": 0.0046038458731764926, "phrase": "effectful_computations"}, {"score": 0.004458722048888919, "phrase": "lightweight_and_orthogonal_technique"}, {"score": 0.00418199705290765, "phrase": "different_effects"}, {"score": 0.0038230844545071303, "phrase": "syntax_trees"}, {"score": 0.0035627492415494216, "phrase": "scoping_constructs"}, {"score": 0.0031743093007496736, "phrase": "limited_form"}, {"score": 0.002958021635132416, "phrase": "possible_interactions"}, {"score": 0.0028281000453392272, "phrase": "desired_semantics"}, {"score": 0.0026865721000905235, "phrase": "scoped_constructs"}, {"score": 0.002535779689260244, "phrase": "different_semantics"}, {"score": 0.0024399717841513354, "phrase": "first_approach"}, {"score": 0.00236289633510808, "phrase": "existing_algebraic_handlers_framework"}, {"score": 0.0021597662797996843, "phrase": "second_approach"}, {"score": 0.0021049977753042253, "phrase": "higher-order_syntax"}], "paper_keywords": ["Languages", " Haskell", " effect handlers", " modularity", " monads", " syntax", " semantics"], "paper_abstract": "Algebraic effect handlers are a powerful means for describing effectful computations. They provide a lightweight and orthogonal technique to define and compose the syntax and semantics of different effects. The semantics is captured by handlers, which are functions that transform syntax trees. Unfortunately, the approach does not support syntax for scoping constructs, which arise in a number of scenarios. While handlers can be used to provide a limited form of scope, we demonstrate that this approach constrains the possible interactions of effects and rules out some desired semantics. This paper presents two different ways to capture scoped constructs in syntax, and shows how to achieve different semantics by reordering handlers. The first approach expresses scopes using the existing algebraic handlers framework, but has some limitations. The problem is fully solved in the second approach where we introduce higher-order syntax.", "paper_title": "Effect Handlers in Scope", "paper_id": "WOS:000358311500001"}