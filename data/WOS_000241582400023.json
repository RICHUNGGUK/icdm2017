{"auto_keywords": [{"score": 0.03427865092078709, "phrase": "backtracking"}, {"score": 0.00481495049065317, "phrase": "open_csps"}, {"score": 0.004735519962945449, "phrase": "previous_work"}, {"score": 0.004657393640152439, "phrase": "new_approach"}, {"score": 0.004333406378146173, "phrase": "integrate_information_gathering"}, {"score": 0.004261710203699135, "phrase": "ocsp"}, {"score": 0.004122351497440992, "phrase": "variable_values"}, {"score": 0.004076858589744185, "phrase": "csp_resolution"}, {"score": 0.003814212645832246, "phrase": "solving_process"}, {"score": 0.003730465168354817, "phrase": "possibly_empty_domains"}, {"score": 0.003588291565092195, "phrase": "unbounded_domains"}, {"score": 0.0034707339811048403, "phrase": "current_ocsp_algorithms"}, {"score": 0.0034134024569847264, "phrase": "poor_performance"}, {"score": 0.0033015555065209865, "phrase": "fo-search_algorithm"}, {"score": 0.0031405975280029913, "phrase": "new_problem"}, {"score": 0.0030376623293574905, "phrase": "new_value"}, {"score": 0.002873524721802591, "phrase": "original_algorithm"}, {"score": 0.0028260302580927856, "phrase": "ocsp_model"}, {"score": 0.0027031706928674092, "phrase": "local_consistency"}, {"score": 0.0025713100093065645, "phrase": "previous_steps"}, {"score": 0.0021885300925245516, "phrase": "experimental_results"}, {"score": 0.002140400526572388, "phrase": "significant_speed-up"}, {"score": 0.0021049977753042253, "phrase": "original_approach"}], "paper_keywords": [""], "paper_abstract": "In previous work, a new approach called Open CSP (OCSP) was defined as a way of integrate information gathering and problem solving. Instead of collecting all variable values before CSP resolution starts, OCSP asks for values dynamically as required by the solving process, starting from possibly empty domains. This strategy permits to handle unbounded domains keeping completeness. However, current OCSP algorithms show a poor performance. For instance, the FO-Search algorithm uses a Backtracking and needs to solve the new problem from scratch every time a new value is acquired. In this paper we improve the original algorithm for the OCSP model. Our contribution is two-fold: we incorporate local consistency and we avoid solving subproblems already explored in previous steps. Moreover, these two contributions guarantee the completeness of the algorithm and they do not increase the number of values needed for finding a solution. We provide experimental results than confirm a significant speed-up on the original approach.", "paper_title": "Boosting Open CSPs", "paper_id": "WOS:000241582400023"}