{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "important_data_analysis_operator"}, {"score": 0.0047113960612140335, "phrase": "k_most_important_groups"}, {"score": 0.004491313367627919, "phrase": "highest_aggregate_values"}, {"score": 0.004394688617163029, "phrase": "data_warehousing_context"}, {"score": 0.004063664475797303, "phrase": "largest_sum"}, {"score": 0.0038737214010638745, "phrase": "potential_number"}, {"score": 0.0037249113156851013, "phrase": "memory_capacity"}, {"score": 0.0035974243349266894, "phrase": "efficient_top-k_groups"}, {"score": 0.003535320700255283, "phrase": "limited_memory_size"}, {"score": 0.0034291991359158827, "phrase": "top-k_groups_retrieval_techniques"}, {"score": 0.003129509028432954, "phrase": "write-optimized_multi-pass"}, {"score": 0.0029961221584602405, "phrase": "available_memory"}, {"score": 0.0029701328654852246, "phrase": "efficient_top-k_groups_computation"}, {"score": 0.002893505913503472, "phrase": "unordered_data"}, {"score": 0.002831158147480665, "phrase": "recursive_hash_algorithm"}, {"score": 0.002722288966917744, "phrase": "early_aggregation"}, {"score": 0.002675252546913683, "phrase": "branch-and_bound_techniques"}, {"score": 0.0026175952455594277, "phrase": "tight_score_bounds"}, {"score": 0.002594880866651459, "phrase": "hash_partitions"}, {"score": 0.002516917671182532, "phrase": "clustered_groups_algorithm"}, {"score": 0.0024412911465483225, "phrase": "top-k_groups"}, {"score": 0.002257070536352418, "phrase": "extensive_experiments"}, {"score": 0.002237477619351199, "phrase": "real_and_synthetic_datasets"}, {"score": 0.0021607883988873492, "phrase": "proposed_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["optimization and performance"], "paper_abstract": "We study an important data analysis operator, which extracts the k most important groups from data (i.e., the k groups with the highest aggregate values). In a data warehousing context, an example of the above query is \"find the 10 combinations of product-type and month with the largest sum of sales\". The problem is challenging as the potential number of groups can be much larger than the memory capacity. We propose on-demand methods for efficient top-k groups processing, under limited memory size. In particular, we design top-k groups retrieval techniques for three representative scenarios as follows. For the scenario with data physically ordered by measure, we propose the write-optimized multi-pass sorted access algorithm (WMSA), that exploits available memory for efficient top-k groups computation. Regarding the scenario with unordered data, we develop the recursive hash algorithm (RHA), which applies hashing with early aggregation, coupled with branch-and bound techniques and derivation heuristics for tight score bounds of hash partitions. Next, we design the clustered groups algorithm (CGA), which accelerates top-k groups processing for the case where data is clustered by a subset of group-by attributes. Extensive experiments with real and synthetic datasets demonstrate the applicability and efficiency of the proposed algorithms. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Extracting k most important groups from data efficiently", "paper_id": "WOS:000258448400005"}