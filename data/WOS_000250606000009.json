{"auto_keywords": [{"score": 0.04231365345404785, "phrase": "noc"}, {"score": 0.00481495049065317, "phrase": "object-oriented_emmbedded_systems"}, {"score": 0.004448705308279165, "phrase": "noc_paradigm"}, {"score": 0.0043500266512036525, "phrase": "vmt"}, {"score": 0.0041102032028337366, "phrase": "routing_capabilities"}, {"score": 0.0037973594873521596, "phrase": "virtual_method_table"}, {"score": 0.0032697235411641695, "phrase": "hardware_modules"}, {"score": 0.0031565959573536194, "phrase": "vmt_area"}, {"score": 0.003101503914610488, "phrase": "performance_overhead"}, {"score": 0.0030206579994328975, "phrase": "co-designed_embedded_systems"}, {"score": 0.002600661525224505, "phrase": "performance_goals"}, {"score": 0.0024451427672857458, "phrase": "real_world"}, {"score": 0.002142426911242168, "phrase": "traditional_implementation"}], "paper_keywords": ["embedded systems", " object-oriented design", " Network-on-Chip (NoC)", " hard ware-software co-design", " polymorphism", " virtual method", " dispatch", " application-specific instruction processor (ASIP)"], "paper_abstract": "The Network-on-Chip (NoC paradigm brings networks inside chips. We use the routing capabilities inside NoC to serve as a replacement for Virtual Method Table (VMT) for Object-Oriented (OO) designed hardware/software co-design systems where some methods could be implemented as hardware modules. This eliminates VMT area and performance overhead in OO co-designed embedded systems where resources are limited and where some functionality needs to be implemented in hardware to meet performance goals of the system. Our experimental results on real world embedded applications show up to 32.15% lower area and up to 5.1% higher speed compared to traditional implementation using VMT. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Using on-chip networks to implement polymorphism in the co-design of object-oriented emmbedded systems", "paper_id": "WOS:000250606000009"}