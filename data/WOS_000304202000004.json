{"auto_keywords": [{"score": 0.04371316750489408, "phrase": "alice"}, {"score": 0.00481495049065317, "phrase": "continuous_detour_queries"}, {"score": 0.004780030485538593, "phrase": "spatial_networks"}, {"score": 0.004625983640628956, "phrase": "shortest_route"}, {"score": 0.004428248351415723, "phrase": "example_scenario"}, {"score": 0.004208169035079665, "phrase": "bob's_place"}, {"score": 0.004117215958803593, "phrase": "nearby_take-away_italian_restaurant"}, {"score": 0.003898307690037192, "phrase": "total_trip_distance"}, {"score": 0.003624553144973088, "phrase": "bob"}, {"score": 0.0035202324978577263, "phrase": "query_points"}, {"score": 0.0033942533792009687, "phrase": "minimum_detour_object"}, {"score": 0.0029551803384781604, "phrase": "realistic_location-based_application_environment"}, {"score": 0.002838993542880416, "phrase": "particular_detour_option"}, {"score": 0.0024625698287060586, "phrase": "continuous_detour_query"}, {"score": 0.0024004805502253427, "phrase": "incremental_construction"}, {"score": 0.002374351263279043, "phrase": "shortest_path_tree"}, {"score": 0.002339953069296797, "phrase": "experimental_studies"}, {"score": 0.002183230464873613, "phrase": "real_road-network_data_sets"}], "paper_keywords": ["Continuous queries", " spatial network", " spatial databases"], "paper_abstract": "We study the problem of finding the shortest route between two locations that includes a stopover of a given type. An example scenario of this problem is given as follows: \"On the way to Bob's place, Alice searches for a nearby take-away Italian restaurant to buy a pizza.\" Assuming that Alice is interested in minimizing the total trip distance, this scenario can be modeled as a query where the current Alice's location (start) and Bob's place (destination) function as query points. Based on these two query points, we find the minimum detour object (MDO), i.e., a stopover that minimizes the sum of the distances: 1) from the start to the stopover, and 2) from the stopover to the destination. In a realistic location-based application environment, a user can be indecisive about committing to a particular detour option. The user may wish to browse multiple (k) MDOs before making a decision. Furthermore, when a user moves, the kMDO results at one location may become obsolete. We propose a method for continuous detour query (CDQ) processing based on incremental construction of a shortest path tree. We conducted experimental studies to compare the performance of our proposed method against two methods derived from existing k-nearest neighbor querying techniques using real road-network data sets. Experimental results show that our proposed method significantly outperforms the two competitive techniques.", "paper_title": "Continuous Detour Queries in Spatial Networks", "paper_id": "WOS:000304202000004"}