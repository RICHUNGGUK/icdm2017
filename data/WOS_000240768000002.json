{"auto_keywords": [{"score": 0.04832675252243853, "phrase": "logic_programming_languages"}, {"score": 0.00481495049065317, "phrase": "yap_compiler"}, {"score": 0.00449698640946795, "phrase": "prolog"}, {"score": 0.004413846562278824, "phrase": "efficient_manner"}, {"score": 0.004252296935371162, "phrase": "original_interpreter"}, {"score": 0.0038978806337961565, "phrase": "efficient_prolog_implementation"}, {"score": 0.0034206776096452015, "phrase": "native_code"}, {"score": 0.003254610516477302, "phrase": "good_solution"}, {"score": 0.0027341763737751467, "phrase": "code_analysis"}, {"score": 0.002474961375646351, "phrase": "low_level_code"}, {"score": 0.002444333100610621, "phrase": "faster_programs"}, {"score": 0.00231111848128734, "phrase": "compilation_phase"}, {"score": 0.002212535878761148, "phrase": "mixed_execution_mode"}, {"score": 0.0021446993452098597, "phrase": "optimizing_compiler"}, {"score": 0.0021049977753042253, "phrase": "type_feedback"}], "paper_keywords": ["dynamic compilation", " Just-in-Time compiler", " compiler optimizations"], "paper_abstract": "Several techniques for implementing Prolog in a efficient manner have been devised since the original interpreter, many of them aimed at achieving more speed. There are two main approaches to efficient Prolog implementation: ( 1) compilers to bytecode and then interpreting it ( emulators) or ( 2) compilers to native code. Emulators have smaller load/compilation time and are a good solution for their simplicity when speed is not a priority. Compilers are more complex than emulators, and the difference is much more acute if some form of code analysis is performed as part of the compilation, which impacts development time. Generation of low level code promises faster programs at the expense of using more resources during the compilation phase. In our work besides using an mixed execution mode, we design an optimizing compiler that using type feedback profiling, dynamic compilation and dynamic deoptimization for improving the performance of logic programming languages.", "paper_title": "The design of the YAP compiler: An optimizing compiler for logic programming languages", "paper_id": "WOS:000240768000002"}