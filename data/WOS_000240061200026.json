{"auto_keywords": [{"score": 0.039591220782297654, "phrase": "declarative_problem"}, {"score": 0.00481495049065317, "phrase": "modular_answer"}, {"score": 0.004529093447865156, "phrase": "logic_programming"}, {"score": 0.004460309246062286, "phrase": "answer_set_semantics"}, {"score": 0.0038862297330905836, "phrase": "modular_structure"}, {"score": 0.0038271712887391015, "phrase": "knowledge_representation"}, {"score": 0.0036553076010367863, "phrase": "ansprolog"}, {"score": 0.003064809736127888, "phrase": "large_knowledge_bases"}, {"score": 0.00290473242917264, "phrase": "existing_modules"}, {"score": 0.0022211005680689666, "phrase": "knowledge_engineers"}, {"score": 0.0021049977753042253, "phrase": "basic_knowledge_representation_concepts"}], "paper_keywords": [""], "paper_abstract": "Currently, most knowledge representation using logic programming with answer set semantics (AnsProlog) is 'flat'. In this paper we elaborate on our thoughts about a modular structure for knowledge representation and declarative problem solving formalism using AnsProlog. We present language constructs that allow defining of modules and calling of such modules from programs. This allows one to write large knowledge bases or declarative problem solving programs by reusing existing modules instead of writing everything from scratch. We report on an implementation that allows such constructs. Our ultimate aim is to facilitate the creation and use of a repository of modules that can be used by knowledge engineers without having to re-implement basic knowledge representation concepts from scratch.", "paper_title": "Macros, macro calls and use of ensembles in modular answer set programming", "paper_id": "WOS:000240061200026"}