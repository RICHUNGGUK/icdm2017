{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_multi-threaded_transactions"}, {"score": 0.004718314112245913, "phrase": "right_techniques"}, {"score": 0.004670722261414736, "phrase": "multicore_architectures"}, {"score": 0.004507882471601552, "phrase": "exponential_performance_trend"}, {"score": 0.00409382470158851, "phrase": "speculative_techniques"}, {"score": 0.0040525061916685924, "phrase": "speculative_parallelism"}, {"score": 0.0038325685550319863, "phrase": "general-purpose_applications"}, {"score": 0.003587924960158317, "phrase": "bridges_et_al"}, {"score": 0.00351582806482809, "phrase": "thies_et_al"}, {"score": 0.003445174898115646, "phrase": "scalable_performance"}, {"score": 0.003410380718649286, "phrase": "multiple_cores"}, {"score": 0.0032746712603464235, "phrase": "atomic_units"}, {"score": 0.00317643367669255, "phrase": "multiple_threads"}, {"score": 0.00309681702203087, "phrase": "data_parallelism"}, {"score": 0.0029285940369182277, "phrase": "transactional_memories"}, {"score": 0.0028120022457134267, "phrase": "single-threaded_atomic_units"}, {"score": 0.0027835848648596513, "phrase": "multi-threaded_transactions"}, {"score": 0.002632332114727894, "phrase": "expensive_hardware_support"}, {"score": 0.0023780209525032688, "phrase": "hardware_mtx"}, {"score": 0.0023301793939902015, "phrase": "existing_multicore_machines"}, {"score": 0.002294929467537814, "phrase": "smtx_system"}, {"score": 0.002260211578368138, "phrase": "harmonic_mean_speedup"}, {"score": 0.002214734873559146, "phrase": "native_hardware"}, {"score": 0.0021049977753042253, "phrase": "speculatively_parallelized_applications"}], "paper_keywords": ["Algorithms", " Design", " Languages", " Performance", " automatic parallelization", " loop-level parallelism", " multi-threaded transactions", " pipelined parallelism", " software transactional memory", " thread-level speculation"], "paper_abstract": "With the right techniques, multicore architectures may be able to continue the exponential performance trend that elevated the performance of applications of all types for decades. While many scientific programs can be parallelized without speculative techniques, speculative parallelism appears to be the key to continuing this trend for general-purpose applications. Recently-proposed code parallelization techniques, such as those by Bridges et al. and by Thies et al., demonstrate scalable performance on multiple cores by using speculation to divide code into atomic units (transactions) that span multiple threads in order to expose data parallelism. Unfortunately, most software and hardware Thread-Level Speculation (TLS) memory systems and transactional memories are not sufficient because they only support single-threaded atomic units. Multi-threaded Transactions (MTXs) address this problem, but they require expensive hardware support as currently proposed in the literature. This paper proposes a Software MTX (SMTX) system that captures the applicability and performance of hardware MTX, but on existing multicore machines. The SMTX system yields a harmonic mean speedup of 13.36x on native hardware with four 6-core processors (24 cores in total) running speculatively parallelized applications.", "paper_title": "Speculative Parallelization Using Software Multi-threaded Transactions", "paper_id": "WOS:000275926700007"}