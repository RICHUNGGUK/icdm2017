{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "component_architecture_specification"}, {"score": 0.004741167616693272, "phrase": "component-based_development"}, {"score": 0.00456159659731398, "phrase": "domain_engineering"}, {"score": 0.004388796812234033, "phrase": "important_approaches"}, {"score": 0.0043215158337835706, "phrase": "software_reuse"}, {"score": 0.004190019394361629, "phrase": "de_process"}, {"score": 0.0039694170761766226, "phrase": "high_abstraction_level"}, {"score": 0.0036178264212372497, "phrase": "application_engineering"}, {"score": 0.0032972747743006603, "phrase": "third-party_components"}, {"score": 0.002846647336160784, "phrase": "defined_architecture"}, {"score": 0.0022568916758097138, "phrase": "odyssey"}, {"score": 0.0021544587602892466, "phrase": "de_and_ae_processes"}, {"score": 0.0021049977753042253, "phrase": "preliminary_study"}], "paper_keywords": [""], "paper_abstract": "Component-Based Development (CBD) and Domain Engineering (DE) are important approaches for software reuse. In a DE process, components are specified in a high abstraction level, within a component architecture specification. When components are reused during an Application Engineering (AE), they are composed with each other and third-party components. However, conflicts usually occur and they must be considered as early as possible, otherwise they may jeopardize the defined architecture. This work proposes a set of functionalities for development with components, with focus on the support for the adaptation and composition functionalities. These were included in Odyssey, an environment that supports DE and AE processes. A preliminary study on the use of these functionalities is also reported.", "paper_title": "Adaptation and composition within component architecture specification", "paper_id": "WOS:000238575400011"}