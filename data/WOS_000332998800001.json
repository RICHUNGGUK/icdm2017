{"auto_keywords": [{"score": 0.04228776437417508, "phrase": "stiffness_matrix"}, {"score": 0.00481495049065317, "phrase": "parallel_finite_element"}, {"score": 0.004766683200410046, "phrase": "meshless_analyses"}, {"score": 0.0044644734709113985, "phrase": "parallel_solution_procedures"}, {"score": 0.004397487039229447, "phrase": "finite_element"}, {"score": 0.0043533862892678864, "phrase": "meshless_analysis_program"}, {"score": 0.004309725894724034, "phrase": "shared_memory_computers"}, {"score": 0.0038573081851680656, "phrase": "solution_schemes"}, {"score": 0.0038186039088445524, "phrase": "sky-line_cholesky"}, {"score": 0.00376127170364341, "phrase": "preconditioned_conjugate_gradient-like_methods"}, {"score": 0.0032989853590079153, "phrase": "private_arrays"}, {"score": 0.002982307044758515, "phrase": "complicated_arrays"}, {"score": 0.002878785759716458, "phrase": "source_codes"}, {"score": 0.002723301730223192, "phrase": "major_advantage"}, {"score": 0.0025374674652885354, "phrase": "efficient_parallel_finite_element"}, {"score": 0.0023762535034673017, "phrase": "minimum_requirement"}, {"score": 0.0023523750536537102, "phrase": "computer_memory"}, {"score": 0.0021049977753042253, "phrase": "global_stiffness_matrix"}], "paper_keywords": ["Parallel", " Finite element method", " C plus", " Conjugate gradient method", " Fortran", " Object-oriented programming"], "paper_abstract": "Purpose - This paper develops C++ and Fortran-90 solvers to establish parallel solution procedures in a finite element or meshless analysis program using shared memory computers. The paper aims to discuss these issues. Design/methodology/approach - The stiffness matrix can be symmetrical or unsymmetrical, and the solution schemes include sky-line Cholesky and parallel preconditioned conjugate gradient-like methods. Findings - By using the features of C++ or Fortran-90, the stiffness matrix and its auxiliary arrays can be encapsulated into a class or module as private arrays. This class or module will handle how to allocate, renumber, assemble, parallelize and solve these complicated arrays automatically. Practical implications - The source codes can be obtained online at http//myweb.ncku.edu.tw/similar to juju. The major advantage of the scheme is that it is simple and systematic, so an efficient parallel finite element or meshless program can be established easily. Originality/value - With the minimum requirement of computer memory, an object-oriented C++ class and a Fortran-90 module were established to allocate, renumber, assemble, parallel, and solve the global stiffness matrix, so that the programmer does not need to handle them directly.", "paper_title": "OpenMp solvers for parallel finite element and meshless analyses", "paper_id": "WOS:000332998800001"}