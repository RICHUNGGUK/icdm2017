{"auto_keywords": [{"score": 0.04890933270671446, "phrase": "real_system"}, {"score": 0.01467846246334427, "phrase": "shared_cache"}, {"score": 0.011317294664697058, "phrase": "memory_pressure"}, {"score": 0.00481495049065317, "phrase": "last-level_cache"}, {"score": 0.004628101576367193, "phrase": "rapid_development"}, {"score": 0.0043183186953102805, "phrase": "performance_improvement"}, {"score": 0.00427578268550103, "phrase": "parallel_programs"}, {"score": 0.0042336638794732255, "phrase": "recent_researches"}, {"score": 0.004171259063201874, "phrase": "page_coloring_mechanism"}, {"score": 0.003853583126988071, "phrase": "page_coloring-based_cache_partitioning"}, {"score": 0.0037039021744127783, "phrase": "page_coloring"}, {"score": 0.003667395956878177, "phrase": "memory_space"}, {"score": 0.003371220210416809, "phrase": "cache_partition"}, {"score": 0.0033214855341753544, "phrase": "massive_page_copying"}, {"score": 0.0032563083791198534, "phrase": "large_overhead"}, {"score": 0.003192406091820197, "phrase": "page_coloring-based_cache_partition"}, {"score": 0.003068327486877065, "phrase": "malloc_allocator-based_dynamic_cache"}, {"score": 0.002834409847642238, "phrase": "different_applications"}, {"score": 0.002710735995572145, "phrase": "dynamically_allocated_pages"}, {"score": 0.00263129148531588, "phrase": "page_copying_overhead"}, {"score": 0.002516457934208144, "phrase": "-page_coloring"}, {"score": 0.002394719113232821, "phrase": "minimum_distance_page_copying_strategy"}, {"score": 0.0021259846592569386, "phrase": "cache_misses"}, {"score": 0.0021049977753042253, "phrase": "re-coloring_overhead"}], "paper_keywords": ["Multicore", " Cache partition", " Dynamic re-coloring", " Page copying", " Malloc allocator"], "paper_abstract": "With rapid development of multi/many-core processors, contention in shared cache becomes more and more serious that restricts performance improvement of parallel programs. Recent researches have employed page coloring mechanism to realize cache partitioning on real system and to reduce contentions in shared cache. However, page coloring-based cache partitioning has some side effects, one is page coloring restricts memory space that an application can allocate, from which may lead to memory pressure, another is changing cache partition dynamically needs massive page copying which will incur large overhead. To make page coloring-based cache partition more practical, this paper proposes a malloc allocator-based dynamic cache partitioning mechanism with page coloring. Memory allocated by our malloc allocator can be dynamically partitioned among different applications according to partitioning policy. Only coloring the dynamically allocated pages can remit memory pressure and reduce page copying overhead led by re-coloring compared to all-page coloring. To further alleviate the overhead, we introduce minimum distance page copying strategy and lazy flush strategy. We conduct experiments on real system to evaluate these strategies and results show that they work well for reducing cache misses and re-coloring overhead.", "paper_title": "Lightweight dynamic partitioning for last-level cache of multicore processor on real system", "paper_id": "WOS:000339826700004"}