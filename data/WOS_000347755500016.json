{"auto_keywords": [{"score": 0.03322245116452338, "phrase": "possible_custom_instructions"}, {"score": 0.00481495049065317, "phrase": "application-specific_instruction"}, {"score": 0.004692980391580608, "phrase": "application-specific_instruction_set_processors"}, {"score": 0.004235095881928715, "phrase": "base_instruction"}, {"score": 0.0041490029730869345, "phrase": "general-purpose_processor"}, {"score": 0.004106612344123407, "phrase": "custom_functional_units"}, {"score": 0.004002513373645485, "phrase": "custom_instructions"}, {"score": 0.00368673793612343, "phrase": "extensible_processors"}, {"score": 0.002986329509791943, "phrase": "enumerated_custom_instructions"}, {"score": 0.002955782731675529, "phrase": "computationally_difficult_problems"}, {"score": 0.002836679611901583, "phrase": "efficient_algorithms"}, {"score": 0.0028076592725295646, "phrase": "custom_instruction_enumeration"}, {"score": 0.0027789349951704177, "phrase": "custom_instruction_selection"}, {"score": 0.0027223626424366207, "phrase": "previously_proposed_well-known_enumeration_algorithms"}, {"score": 0.0026261108615242557, "phrase": "significant_speedup"}, {"score": 0.0025726416100664853, "phrase": "identical_set"}, {"score": 0.0024062532032402533, "phrase": "code_size_reduction_rate"}, {"score": 0.0022738775158524793, "phrase": "computational_intensive_programs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Extensible processors", " ASIPs", " DFG", " Custom instruction", " Custom instruction enumeration", " Custom instruction selection"], "paper_abstract": "The application-specific instruction set processors (ASIPs) have received more and more attention in recent years. ASIPs make trade-offs between flexibility and performance by extending the base instruction set of a general-purpose processor with custom functional units (CFUs). Custom instructions, executed on CFUs, make it possible to improve performance and achieve flexibility for extensible processors. The custom instruction synthesis flow involves two essential issues: custom instruction enumeration (subgraph enumeration) and custom instruction selection (subgraph selection). However, both enumerating all possible custom instructions of a given data-flow graph and selecting the most profitable custom instructions from the enumerated custom instructions are computationally difficult problems. In this paper, we propose efficient algorithms for custom instruction enumeration and custom instruction selection. Compared with previously proposed well-known enumeration algorithms, our approach can achieve a significant speedup while generating the identical set of all possible custom instructions or only connected custom instructions. Experimental results also show that a code size reduction rate up to 76% can be achieved for a set of computational intensive programs, and the speed-up achieved is up to 8.2x. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Automatic custom instruction identification for application-specific instruction set processors", "paper_id": "WOS:000347755500016"}