{"auto_keywords": [{"score": 0.029600443367118274, "phrase": "static_analysis"}, {"score": 0.00481495049065317, "phrase": "software_model_checking"}, {"score": 0.004755054742217193, "phrase": "current_research"}, {"score": 0.004695900553353526, "phrase": "software_model"}, {"score": 0.004608539830653038, "phrase": "new_techniques"}, {"score": 0.004438642216475526, "phrase": "visited_states"}, {"score": 0.003771631577951067, "phrase": "new_technique"}, {"score": 0.003701401653850141, "phrase": "sound_abstract_matching"}, {"score": 0.0031448288291084, "phrase": "useful_result"}, {"score": 0.0029909851863915283, "phrase": "correctness_conditions"}, {"score": 0.002935248513348432, "phrase": "matching_scheme"}, {"score": 0.0027054473441439422, "phrase": "abstract_matching_function"}, {"score": 0.0022696277881969896, "phrase": "overall_technique"}, {"score": 0.0021857667493036786, "phrase": "correctness_issues"}], "paper_keywords": ["state explosion", " model extraction", " static analysis"], "paper_abstract": "Current research in software model checking explores new techniques to handle the storage of visited states (usually called the heap). One approach consists in saving only parts or representations of the states in the heap. This paper presents a new technique to implement sound abstract matching of states. This kind of matching produces a reduction in the number of states and traces explored. With the aim of obtaining a useful result, it is necessary to establish some correctness conditions on the matching scheme. In this paper, we use static analysis to automatically construct an abstract matching function which depends on the program and the property to be verified. The soundness of the static analysis guarantees the soundness of verification. This paper describes the overall technique applied to Spin, the correctness issues and some examples which show its efficiency.", "paper_title": "Abstract matching for software model checking", "paper_id": "WOS:000236941300011"}