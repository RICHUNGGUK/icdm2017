{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "sliding_windows"}, {"score": 0.004390764654147291, "phrase": "sliding_windows_model"}, {"score": 0.004093453936415085, "phrase": "multiple_papers"}, {"score": 0.004063348730077936, "phrase": "considerable_success"}, {"score": 0.0038729688332870865, "phrase": "existing_methods"}, {"score": 0.0037602557461171478, "phrase": "smooth_histograms"}, {"score": 0.0037325918533747953, "phrase": "exponential_histograms"}, {"score": 0.003531474887552889, "phrase": "first_polylogarithmic-memory_algorithm"}, {"score": 0.003441352119167824, "phrase": "sliding_window_model"}, {"score": 0.002903540062437197, "phrase": "l-p-heavy_elements"}, {"score": 0.0028293966058473476, "phrase": "polylogarithmic_memory"}, {"score": 0.0026277995163948263, "phrase": "broader_applicability"}, {"score": 0.0025137856138000014, "phrase": "sliding_window_approximation"}, {"score": 0.0023606625824479956, "phrase": "specified_number"}, {"score": 0.0021682027434117095, "phrase": "current_expected_memory_bounds"}, {"score": 0.0021522261505574035, "phrase": "worst_case_bounds"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data streams", " Approximation algorithms", " Heavy hitters", " Sliding window model"], "paper_abstract": "Finding heavy-elements (heavy-hitters) in streaming data is one of the central, and well-understood tasks. Despite the importance of this problem, when considering the sliding windows model of streaming (where elements eventually expire) the problem of finding L-2-heavy elements has remained completely open despite multiple papers and considerable success in finding L-1-heavy elements. Since the L-2-heavy element problem doesn't satisfy certain conditions, existing methods for sliding windows algorithms, such as smooth histograms or exponential histograms are not directly applicable to it. In this paper, we develop the first polylogarithmic-memory algorithm for finding L-2-heavy elements in the sliding window model. Our technique allows us not only to find L-2-heavy elements, but also heavy elements with respect to any L-p with 0 < p <= 2 on sliding windows. By this we completely \"close the gap\" and resolve the question of finding L-p-heavy elements in the sliding window model with polylogarithmic memory, since it is well known that for p > 2 this task is impossible. We demonstrate a broader applicability of our method on two additional examples: we show how to obtain a sliding window approximation of the similarity of two streams, and of the fraction of elements that appear exactly a specified number of times within the window (the alpha-rarity problem). In these two illustrative examples of our method, we replace the current expected memory bounds with worst case bounds. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "How to catch L-2-heavy-hitters on sliding windows", "paper_id": "WOS:000343639100008"}