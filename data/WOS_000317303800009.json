{"auto_keywords": [{"score": 0.04760688643890386, "phrase": "feature_models"}, {"score": 0.009195775929925726, "phrase": "feature_model"}, {"score": 0.00481495049065317, "phrase": "feature_model_refinement"}, {"score": 0.004764220976404241, "phrase": "updatable_view"}, {"score": 0.004615202066192795, "phrase": "software_reuse"}, {"score": 0.004173244935967375, "phrase": "similar_applications"}, {"score": 0.0041074234667687875, "phrase": "software_domain"}, {"score": 0.003957833102043277, "phrase": "especially_the_refinement"}, {"score": 0.0038339398365449507, "phrase": "labor-intensive_process"}, {"score": 0.0037139103792217143, "phrase": "effective_way"}, {"score": 0.0036553070575015344, "phrase": "domain_engineers"}, {"score": 0.0036167509502276294, "phrase": "refining_feature_models"}, {"score": 0.0034482025128821548, "phrase": "new_approach"}, {"score": 0.0033937776228549557, "phrase": "interactive_refinement"}, {"score": 0.003287482882222731, "phrase": "view_updating_technique"}, {"score": 0.0032355864829403413, "phrase": "basic_idea"}, {"score": 0.0030039966201398966, "phrase": "possibly_large_and_complicated_feature_model"}, {"score": 0.0028944757265206332, "phrase": "comprehensible_view"}, {"score": 0.002687235334499192, "phrase": "main_characteristics"}, {"score": 0.002548331088496964, "phrase": "powerful_rules"}, {"score": 0.0024947959375982614, "phrase": "slicing_criterion"}, {"score": 0.002328434471939886, "phrase": "novel_use"}, {"score": 0.00229164285862567, "phrase": "bidirectional_transformation_language"}, {"score": 0.0021049977753042253, "phrase": "nontrivial_case_study"}], "paper_keywords": ["feature model refinement", " slicing", " bidrectional transformation"], "paper_abstract": "In the research of software reuse, feature models have been widely adopted to capture, organize and reuse the requirements of a set of similar applications in a software domain. However, the construction, especially the refinement, of feature models is a labor-intensive process, and there lacks an effective way to aid domain engineers in refining feature models. In this paper, we propose a new approach to support interactive refinement of feature models based on the view updating technique. The basic idea of our approach is to first extract features and relationships of interest from a possibly large and complicated feature model, then organize them into a comprehensible view, and finally refine the feature model through modifications on the view. The main characteristics of this approach are twofold: a set of powerful rules (as the slicing criterion) to slice the feature model into a view automatically, and a novel use of a bidirectional transformation language to make the view updatable. We have successfully developed a tool, and a nontrivial case study shows the feasibility of this approach.", "paper_title": "Supporting feature model refinement with updatable view", "paper_id": "WOS:000317303800009"}