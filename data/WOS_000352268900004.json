{"auto_keywords": [{"score": 0.03023971181854085, "phrase": "epga"}, {"score": 0.026955985032339768, "phrase": "genome_assembly"}, {"score": 0.015306956709188467, "phrase": "insert_size"}, {"score": 0.006487292329586157, "phrase": "complex_repetitive_regions"}, {"score": 0.006364043321492536, "phrase": "sequencing_errors"}, {"score": 0.0062431211491562845, "phrase": "uneven_sequencing_depth"}, {"score": 0.0050546893901253385, "phrase": "extension_candidates"}, {"score": 0.00481495049065317, "phrase": "novo_assembly"}, {"score": 0.004545240514015278, "phrase": "primary_issue"}, {"score": 0.00442457549952546, "phrase": "downstream_sequence_regions"}, {"score": 0.004390689303780405, "phrase": "sequence_seeds"}, {"score": 0.004340343873304156, "phrase": "long_contigs"}, {"score": 0.0040971095888461045, "phrase": "multiple_feasible_extension_candidates"}, {"score": 0.003957735532719663, "phrase": "universally_accepted_solution"}, {"score": 0.0038674532861321864, "phrase": "read_overlaps"}, {"score": 0.0034725269588525534, "phrase": "false_repetitive_regions"}, {"score": 0.0034063576796640603, "phrase": "sequence_regions"}, {"score": 0.003202944392720772, "phrase": "satisfactory_assembly_results"}, {"score": 0.0028979065012624044, "phrase": "de_bruijn_graph"}, {"score": 0.002820850247525606, "phrase": "new_score_function"}, {"score": 0.002571841741339248, "phrase": "short_repetitive_regions"}, {"score": 0.0023178219772486868, "phrase": "relative_mapping"}, {"score": 0.0022648637058989463, "phrase": "real_datasets"}, {"score": 0.0021625417261202603, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "longer_and_more_accurate_contigs"}], "paper_keywords": [""], "paper_abstract": "Motivation: In genome assembly, the primary issue is how to determine upstream and downstream sequence regions of sequence seeds for constructing long contigs or scaffolds. When extending one sequence seed, repetitive regions in the genome always cause multiple feasible extension candidates which increase the difficulty of genome assembly. The universally accepted solution is choosing one based on read overlaps and paired-end (mate-pair) reads. However, this solution faces difficulties with regard to some complex repetitive regions. In addition, sequencing errors may produce false repetitive regions and uneven sequencing depth leads some sequence regions to have too few or too many reads. All the aforementioned problems prohibit existing assemblers from getting satisfactory assembly results. Results: In this article, we develop an algorithm, called extract paths for genome assembly (EPGA), which extracts paths from De Bruijn graph for genome assembly. EPGA uses a new score function to evaluate extension candidates based on the distributions of reads and insert size. The distribution of reads can solve problems caused by sequencing errors and short repetitive regions. Through assessing the variation of the distribution of insert size, EPGA can solve problems introduced by some complex repetitive regions. For solving uneven sequencing depth, EPGA uses relative mapping to evaluate extension candidates. On real datasets, we compare the performance of EPGA and other popular assemblers. The experimental results demonstrate that EPGA can effectively obtain longer and more accurate contigs and scaffolds.", "paper_title": "EPGA: de novo assembly using the distributions of reads and insert size", "paper_id": "WOS:000352268900004"}