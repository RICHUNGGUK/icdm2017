{"auto_keywords": [{"score": 0.04610150656336703, "phrase": "data_warehouse_queries"}, {"score": 0.00481495049065317, "phrase": "big_data_warehouse"}, {"score": 0.004611108249179507, "phrase": "rapidly_increasing_scale"}, {"score": 0.00457138247462329, "phrase": "data_warehouses"}, {"score": 0.0045124316982387315, "phrase": "today's_data_analytical_technologies"}, {"score": 0.004454237726525018, "phrase": "conventional_data_analytical_platform"}, {"score": 0.004358903464536199, "phrase": "star_schema"}, {"score": 0.004210576688291019, "phrase": "fact_table"}, {"score": 0.004120435930514554, "phrase": "dimension_tables"}, {"score": 0.004049709080817396, "phrase": "query_processing"}, {"score": 0.003911862375084159, "phrase": "users'_demands"}, {"score": 0.0036500346000495317, "phrase": "big_data"}, {"score": 0.0035410467987580484, "phrase": "expensive_operation"}, {"score": 0.003465189575252443, "phrase": "parallel_database"}, {"score": 0.0034204548167213545, "phrase": "mapreduce-based_system"}, {"score": 0.0031502008922533894, "phrase": "numerous_join_results"}, {"score": 0.0030693625816617044, "phrase": "different_queries"}, {"score": 0.0029519664912853938, "phrase": "new_query_processing_framework"}, {"score": 0.0028513785049061767, "phrase": "join_operations"}, {"score": 0.002802373595203129, "phrase": "pre-processing_phase"}, {"score": 0.0027422968723193057, "phrase": "post-processing_phase"}, {"score": 0.002637377202509382, "phrase": "massive_parallelized_filter-aggregation_operations"}, {"score": 0.002525489173110693, "phrase": "conventional_query_processing_models"}, {"score": 0.002387083859537412, "phrase": "large_number"}, {"score": 0.0022464835515931592, "phrase": "large-scale_parallel_data_warehouse"}, {"score": 0.0021888171680504954, "phrase": "hadoop"}, {"score": 0.0021418339161425994, "phrase": "linear_scalability"}, {"score": 0.0021049977753042253, "phrase": "existing_approaches"}], "paper_keywords": ["data warehouse", " large scale", " TAMP", " join-free", " multi-version schema"], "paper_abstract": "The rapidly increasing scale of data warehouses is challenging today's data analytical technologies. A conventional data analytical platform processes data warehouse queries using a star schema - it normalizes the data into a fact table and a number of dimension tables, and during query processing it selectively joins the tables according to users' demands. This model is space economical. However, it faces two problems when applied to big data. First, join is an expensive operation, which prohibits a parallel database or a MapReduce-based system from achieving efficiency and scalability simultaneously. Second, join operations have to be executed repeatedly, while numerous join results can actually be reused by different queries. In this paper, we propose a new query processing framework for data warehouses. It pushes the join operations partially to the pre-processing phase and partially to the post-processing phase, so that data warehouse queries can be transformed into massive parallelized filter-aggregation operations on the fact table. In contrast to the conventional query processing models, our approach is efficient, scalable and stable despite of the large number of tables involved in the join. It is especially suitable for a large-scale parallel data warehouse. Our empirical evaluation on Hadoop shows that our framework exhibits linear scalability and outperforms some existing approaches by an order of magnitude.", "paper_title": "Efficient query processing framework for big data warehouse: an almost join-free approach", "paper_id": "WOS:000351519500005"}