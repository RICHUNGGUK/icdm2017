{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "bounded_exhaustive_testing"}, {"score": 0.0046797114400479135, "phrase": "bounded_exhaustive_test_suites"}, {"score": 0.004483909657713567, "phrase": "bounded_exhaustive_generation"}, {"score": 0.004357927940322685, "phrase": "test_generation"}, {"score": 0.004255639740735269, "phrase": "test_execution"}, {"score": 0.003815064377019477, "phrase": "exhaustive_testing"}, {"score": 0.00370780481244907, "phrase": "generation_time"}, {"score": 0.003603549914861701, "phrase": "exhaustive_suites"}, {"score": 0.0035022161192936234, "phrase": "representation_invariant"}, {"score": 0.003419943984098415, "phrase": "test's_input"}, {"score": 0.0033395980635636644, "phrase": "repok_routine"}, {"score": 0.003094920033010818, "phrase": "separate_representation_invariants"}, {"score": 0.0030656196752517836, "phrase": "disjoint_structures"}, {"score": 0.002909342017421165, "phrase": "valid_inputs"}, {"score": 0.002881793492919646, "phrase": "equivalence_classes"}, {"score": 0.0027741761880779535, "phrase": "repok_code"}, {"score": 0.002632716358833918, "phrase": "test_input_generation_process"}, {"score": 0.0025954008219792337, "phrase": "disjoint_substructures"}, {"score": 0.002382329940096419, "phrase": "bounded_exhaustive_test_suite"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["bounded exhaustive testing", " automated test generation", " test suite reduction"], "paper_abstract": "While the effectiveness of bounded exhaustive test suites increases as one increases the scope for the bounded exhaustive generation, both the time for test generation and the time for test execution grow exponentially with respect to the scope. In this article, a set of techniques for reducing the time for bounded exhaustive testing, by either reducing the generation time or reducing the obtained bounded exhaustive suites, is proposed. The representation invariant of the software under test's input, implemented as a repOK routine, is exploited for these reductions in two ways: (i) to factor out separate representation invariants for disjoint structures of the inputs; and (ii) to partition valid inputs into equivalence classes, according to how these exercise the repOK code. The first is used in order to split the test input generation process, as disjoint substructures can be independently generated. The second is used in order to reduce the size of a bounded exhaustive test suite, by removing from the suite those tests that are equivalent to some tests already present in the suite. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "RepOK-based reduction of bounded exhaustive testing", "paper_id": "WOS:000345214800004"}