{"auto_keywords": [{"score": 0.04399755003715801, "phrase": "disk-based_relation"}, {"score": 0.02927701149985092, "phrase": "hybridjoin"}, {"score": 0.02565372192030359, "phrase": "zipfian_distribution"}, {"score": 0.00481495049065317, "phrase": "near-real-time_data_warehousing"}, {"score": 0.004672444473700524, "phrase": "near-real-time_data_warehouses"}, {"score": 0.004602773636967002, "phrase": "near-real-time_integration_layer"}, {"score": 0.004466519142879166, "phrase": "near-real-time_data_integration"}, {"score": 0.004143196873246147, "phrase": "high-throughput_streams"}, {"score": 0.004101886428528311, "phrase": "stream-based_algorithms"}, {"score": 0.0032900200522703923, "phrase": "stream_input"}, {"score": 0.0031448288291084, "phrase": "update_stream"}, {"score": 0.0030823667846259836, "phrase": "low_throughput"}, {"score": 0.0029909851863915283, "phrase": "robust_stream-based_join_algorithm"}, {"score": 0.0029611289031152856, "phrase": "hybrid_join"}, {"score": 0.0028021527740710508, "phrase": "theoretical_result"}, {"score": 0.002560162916190598, "phrase": "performance_measurements"}, {"score": 0.002459414063407306, "phrase": "synthetic_data"}, {"score": 0.002327310963701377, "phrase": "typical_parameters"}, {"score": 0.002246955931290095, "phrase": "general_performs"}, {"score": 0.0021912600076114033, "phrase": "theoretical_model"}, {"score": 0.0021049977753042253, "phrase": "different_settings"}], "paper_keywords": ["Data Transformation", " Data Warehousing", " Near-Real-Time", " Performance and Tuning"], "paper_abstract": "An important component of near-real-time data warehouses is the near-real-time integration layer. One important element in near-real-time data integration is the join of a continuous input data stream with a disk-based relation. For high-throughput streams, stream-based algorithms, such as Mesh Join (MESHJOIN), can be used. However, in MESHJOIN the performance of the algorithm is inversely proportional to the size of disk-based relation. The Index Nested Loop Join (INLJ) can be set up so that it processes stream input, and can deal with intermittences in the update stream but it has low throughput. This paper introduces a robust stream-based join algorithm called Hybrid Join (HYBRIDJOIN), which combines the two approaches. A theoretical result shows that HYBRIDJOIN is asymptotically as fast as the fastest of both algorithms. The authors present performance measurements of the implementation. In experiments using synthetic data based on a Zipfian distribution, HYBRIDJOIN performs significantly better for typical parameters of the Zipfian distribution, and in general performs in accordance with the theoretical model while the other two algorithms are unacceptably slow under different settings.", "paper_title": "HYBRIDJOIN for Near-Real-Time Data Warehousing", "paper_id": "WOS:000307051800002"}