{"auto_keywords": [{"score": 0.0491163375687563, "phrase": "fully_abstract_compiler"}, {"score": 0.039629568495239645, "phrase": "target_language"}, {"score": 0.02246846748295755, "phrase": "compilation_scheme"}, {"score": 0.00481495049065317, "phrase": "protected_module_architectures"}, {"score": 0.004654642380553263, "phrase": "security_features"}, {"score": 0.004561019117546361, "phrase": "source_language"}, {"score": 0.004262273304740847, "phrase": "target_language_level"}, {"score": 0.004120289747942224, "phrase": "fully_abstract_compilers"}, {"score": 0.0036968421974412522, "phrase": "untyped_assembly_language"}, {"score": 0.0035016702571862165, "phrase": "untyped_assembly"}, {"score": 0.0032279990773657215, "phrase": "protected_module_architecture-an_assembly-level_isolation_mechanism"}, {"score": 0.002915701586760994, "phrase": "fully_abstract_compilation_scheme"}, {"score": 0.0025284524249379265, "phrase": "dynamic_memory_allocation"}, {"score": 0.0024607296642187846, "phrase": "secure_compilation"}, {"score": 0.002427549902743566, "phrase": "first-order_method_references"}, {"score": 0.0023948164534491273, "phrase": "cross-package_inheritance"}, {"score": 0.0023465400668244386, "phrase": "inner_classes"}, {"score": 0.0021776870246727233, "phrase": "formal_proof"}, {"score": 0.002148315508445588, "phrase": "full_abstraction"}], "paper_keywords": ["Secure Compilation", " Object-Oriented Programming", " Untyped Machine Code", " Security", " Fully abstract compilation", " protected module architecture"], "paper_abstract": "A fully abstract compiler prevents security features of the source language from being bypassed by an attacker operating at the target language level. Unfortunately, developing fully abstract compilers is very complex, and it is even more so when the target language is an untyped assembly language. To provide a fully abstract compiler that targets untyped assembly, it has been suggested to extend the target language with a protected module architecture-an assembly-level isolation mechanism which can be found in next-generation processors. This article provides a fully abstract compilation scheme whose source language is an object-oriented, high-level language and whose target language is such an extended assembly language. The source language enjoys features such as dynamic memory allocation and exceptions. Secure compilation of first-order method references, cross-package inheritance, and inner classes is also presented. Moreover, this article contains the formal proof of full abstraction of the compilation scheme. Measurements of the overhead introduced by the compilation scheme indicate that it is negligible.", "paper_title": "Secure Compilation to Protected Module Architectures", "paper_id": "WOS:000353474100002"}