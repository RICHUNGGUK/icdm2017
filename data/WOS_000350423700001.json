{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "scalalab"}, {"score": 0.015541082532247416, "phrase": "groovylab"}, {"score": 0.0046778598985664525, "phrase": "scala"}, {"score": 0.0046240999614456605, "phrase": "groovy_for_scientific_computing"}, {"score": 0.004440780432053927, "phrase": "matlab-like_environments"}, {"score": 0.004215677131963292, "phrase": "scala_programming_language"}, {"score": 0.004048483412089098, "phrase": "groovy_programming_language"}, {"score": 0.003955926499405168, "phrase": "similar_user_interfaces"}, {"score": 0.0036694287631595995, "phrase": "java_scientific_libraries"}, {"score": 0.0036063061558261546, "phrase": "native_code_libraries"}, {"score": 0.003523822585025555, "phrase": "programmer's_point"}, {"score": 0.0033839745649214548, "phrase": "significant_differences"}, {"score": 0.003031650815900696, "phrase": "scala_versus_groovy"}, {"score": 0.0029967610945411593, "phrase": "scientific_computing"}, {"score": 0.0027795345823932406, "phrase": "dynamic_typing"}, {"score": 0.0027475383418803724, "phrase": "static_typing"}, {"score": 0.0027159094186967247, "phrase": "scientific_programming"}, {"score": 0.002623184850933423, "phrase": "java_platform"}, {"score": 0.0025336179740814905, "phrase": "fast_pace"}, {"score": 0.002490053845036978, "phrase": "java"}, {"score": 0.002418923027024191, "phrase": "high-performance_computing"}, {"score": 0.002349884235026956, "phrase": "multicore_platforms"}], "paper_keywords": [""], "paper_abstract": "ScalaLab and GroovyLab are both MATLAB-like environments for the Java Virtual Machine. ScalaLab is based on the Scala programming language and GroovyLab is based on the Groovy programming language. They present similar user interfaces and functionality to the user. They also share the same set of Java scientific libraries and of native code libraries. From the programmer's point of view though, they have significant differences. This paper compares some aspects of the two environments and highlights some of the strengths and weaknesses of Scala versus Groovy for scientific computing. The discussion also examines some aspects of the dilemma of using dynamic typing versus static typing for scientific programming. The performance of the Java platform is continuously improved at a fast pace. Today Java can effectively support demanding high-performance computing and scales well on multicore platforms. Thus, both systems can challenge the performance of the traditional C/C++/Fortran scientific code with an easier to use and more productive programming environment.", "paper_title": "ScalaLab and GroovyLab: Comparing Scala and Groovy for Scientific Computing", "paper_id": "WOS:000350423700001"}