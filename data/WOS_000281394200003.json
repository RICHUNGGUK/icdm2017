{"auto_keywords": [{"score": 0.04652051463536456, "phrase": "path_patterns"}, {"score": 0.00866041977300634, "phrase": "xml_data"}, {"score": 0.006835262655264205, "phrase": "partial_path_queries"}, {"score": 0.006407555872070964, "phrase": "repeated_labels"}, {"score": 0.00482638507578506, "phrase": "query_dag"}, {"score": 0.00481495049065317, "phrase": "generalized_path_pattern_queries"}, {"score": 0.004697655699119423, "phrase": "structural_patterns"}, {"score": 0.004625795150473604, "phrase": "key_operation"}, {"score": 0.00459735824483322, "phrase": "xml_query_processing"}, {"score": 0.004569095351567258, "phrase": "existing_algorithms"}, {"score": 0.004430354365175098, "phrase": "tree_patterns"}, {"score": 0.004403113609805679, "phrase": "current_applications"}, {"score": 0.0043760722840497646, "phrase": "xml"}, {"score": 0.0041269626762569095, "phrase": "xml_data_sources"}, {"score": 0.004101579688745222, "phrase": "different_structures"}, {"score": 0.003976978140059542, "phrase": "query_languages"}, {"score": 0.0039281997063335735, "phrase": "partial_specification"}, {"score": 0.0037159680715717056, "phrase": "path_pattern_queries"}, {"score": 0.003614175930699828, "phrase": "indexed_streaming_evaluation_model"}, {"score": 0.0032945169562318575, "phrase": "rooted_dags"}, {"score": 0.0032540816985401704, "phrase": "topological_ordering"}, {"score": 0.003145417398038261, "phrase": "efficient_evaluation"}, {"score": 0.0030876784650745973, "phrase": "first_one"}, {"score": 0.003059206456855218, "phrase": "structural_summary"}, {"score": 0.0029207251108325006, "phrase": "partial_path_query"}, {"score": 0.002831894638104635, "phrase": "previous_algorithm"}, {"score": 0.002814454488050123, "phrase": "path-pattern_queries"}, {"score": 0.0027120400060701034, "phrase": "second_one"}, {"score": 0.002687022487756706, "phrase": "spanning_tree"}, {"score": 0.002629539710839523, "phrase": "stack-based_algorithm"}, {"score": 0.0025732834751685803, "phrase": "root-to-leaf_paths"}, {"score": 0.002426566352219336, "phrase": "third_one"}, {"score": 0.0024116163689723354, "phrase": "multiple_pointers"}, {"score": 0.0023967582707115354, "phrase": "stack_entries"}, {"score": 0.002316656229510391, "phrase": "stack-based_holistic_technique"}, {"score": 0.0022670785913397637, "phrase": "extensive_experimental_evaluations"}, {"score": 0.002225426912273257, "phrase": "holistic_algorithm"}, {"score": 0.0021710766932077972, "phrase": "first_ones"}, {"score": 0.0021049977753042253, "phrase": "indexed_streaming_model"}], "paper_keywords": ["XPath query evaluation", " XML"], "paper_abstract": "Finding the occurrences of structural patterns in XML data is a key operation in XML query processing. Existing algorithms for this operation focus almost exclusively on path patterns or tree patterns. Current applications of XML require querying of data whose structure is complex or is not fully known to the user, or integrating XML data sources with different structures. These applications have motivated recently the introduction of query languages that allow a partial specification of path patterns in a query. In this paper, we consider partial path queries, a generalization of path pattern queries, and we focus on their efficient evaluation under the indexed streaming evaluation model. Our approach explicitly deals with repeated labels (that is, multiple occurrences of the same label in a query). We show that partial path queries can be represented as rooted dags for which a topological ordering of the nodes exists. We present three algorithms for the efficient evaluation of these queries. The first one exploits a structural summary of data to generate a set of path patterns that together are equivalent to a partial path query. To evaluate these path patterns, we extend a previous algorithm for path-pattern queries so that it can work on path patterns with repeated labels. The second one extracts a spanning tree from the query dag, uses a stack-based algorithm to find the matches of the root-to-leaf paths in the tree, and merge-joins the matches to compute the answer. Finally, the third one exploits multiple pointers of stack entries and a topological ordering of the query dag to apply a stack-based holistic technique. We analyze our algorithms and perform extensive experimental evaluations. Our experimental results show that the holistic algorithm outperforms the other ones. Our approaches are the first ones to efficiently evaluate this class of queries in the indexed streaming model.", "paper_title": "Evaluation Techniques for Generalized Path Pattern Queries on XML Data", "paper_id": "WOS:000281394200003"}