{"auto_keywords": [{"score": 0.045521727399967175, "phrase": "application_requirements"}, {"score": 0.004483909657713567, "phrase": "scalable_resource_selection_services"}, {"score": 0.0042354707960660706, "phrase": "efficient_lookup"}, {"score": 0.004136044939878838, "phrase": "resource_attributes"}, {"score": 0.004077508669922702, "phrase": "disk_size"}, {"score": 0.003962899903266524, "phrase": "installed_software_libraries"}, {"score": 0.00388828234270598, "phrase": "system_composition"}, {"score": 0.0031393948330209224, "phrase": "attribute_values"}, {"score": 0.003036595866130994, "phrase": "search_attributes"}, {"score": 0.002923214590192792, "phrase": "new_requirements"}, {"score": 0.0025586128304269616, "phrase": "node_failures"}, {"score": 0.002371018116266096, "phrase": "node_attributes"}, {"score": 0.0022824314760583834, "phrase": "autonomous_optimization"}, {"score": 0.0022076314894741394, "phrase": "long-lived_service"}, {"score": 0.0021049977753042253, "phrase": "resources_changes"}], "paper_keywords": ["Performance", " Reliability", " XtreemOS", " RSS", " resource selection", " self-adaptation"], "paper_abstract": "Many large-scale utility computing infrastructures comprise heterogeneous hardware and software resources. This raises the need for scalable resource selection services that identify resources that match application requirements. Such a service must provide an efficient lookup in spite of changing resource attributes such as disk size, changing application requirements such as installed software libraries, and changing system composition as resources join or leave. We present a fully decentralized, self-managing Resource Selection Service (RSS) algorithm by which resources autonomously select themselves when their attributes match a query. An application specifies what it expects from a resource by means of a conjunction of (attribute,value-range) pairs, which are matched against the attribute values of resources. The set of search attributes can also be updated online to reflect new requirements. We show that our solution scales in the number of resources and in the number of attributes, while being relatively insensitive to churn and other membership changes like node failures. Our RSS continuously self-adapts its routing structure in response to variations in the distribution of node attributes and queries. We show that this autonomous optimization maintains performance and availability in a long-lived service even when the set of application requirements used to select resources changes.", "paper_title": "The XtreemOS Resource Selection Service", "paper_id": "WOS:000312415700003"}