{"auto_keywords": [{"score": 0.048186916426953504, "phrase": "sat"}, {"score": 0.006547008480748744, "phrase": "sat."}, {"score": 0.004687305496643216, "phrase": "algorithm_portfolio_techniques"}, {"score": 0.003510754567808717, "phrase": "algorithm_portfolio"}, {"score": 0.003210591082919714, "phrase": "satzilla"}, {"score": 0.0030482430937467013, "phrase": "new_sat_instance"}, {"score": 0.0025761937402886954, "phrase": "main_distinguishing_feature"}, {"score": 0.002441118140830714, "phrase": "selection_procedure"}, {"score": 0.002344468886431959, "phrase": "sat_solver"}, {"score": 0.0021479597698614355, "phrase": "open_source_tool"}], "paper_keywords": ["Algorithm portfolios", " SAT solving", " Nearest neighbors"], "paper_abstract": "The importance of algorithm portfolio techniques for SAT has long been noted, and a number of very successful systems have been devised, including the most successful one-SATzilla. However, all these systems are quite complex (to understand, reimplement, or modify). In this paper we present an algorithm portfolio for SAT that is extremely simple, but in the same time so efficient that it outperforms SATzilla. For a new SAT instance to be solved, our portfolio finds its k-nearest neighbors from the training set and invokes a solver that performs the best for those instances. The main distinguishing feature of our algorithm portfolio is the locality of the selection procedure-the selection of a SAT solver is based only on few instances similar to the input one. An open source tool that implements our approach is publicly available.", "paper_title": "Simple algorithm portfolio for SAT", "paper_id": "WOS:000327076900005"}