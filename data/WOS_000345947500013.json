{"auto_keywords": [{"score": 0.035992921575902365, "phrase": "input_structure"}, {"score": 0.00481495049065317, "phrase": "semantically_valid_test_inputs"}, {"score": 0.004780633011300165, "phrase": "constrained_input_grammars"}, {"score": 0.00462919213721188, "phrase": "software_input_interface"}, {"score": 0.004579780586951551, "phrase": "black-box_testing_technique"}, {"score": 0.0044346739635814135, "phrase": "structured_input_models"}, {"score": 0.004387329529902255, "phrase": "input_grammars"}, {"score": 0.004324985524216987, "phrase": "grammar-based_test_inputs"}, {"score": 0.004263523633867905, "phrase": "structurally_valid_but_semantically_invalid_inputs"}, {"score": 0.0038431888954930083, "phrase": "grammar-based_input_model"}, {"score": 0.003802135020791801, "phrase": "model's_semantic_constraints"}, {"score": 0.0036947814248579243, "phrase": "positive_test_inputs"}, {"score": 0.003552084379143929, "phrase": "effective_test_suites"}, {"score": 0.0035141291835319682, "phrase": "appropriate_grammar-based_coverage_criteria"}, {"score": 0.0033905067962602515, "phrase": "input_semantics"}, {"score": 0.003318423751430509, "phrase": "model_instantiation_techniques"}, {"score": 0.0032829570709414736, "phrase": "model_instances"}, {"score": 0.00323625520042892, "phrase": "specified_constraints"}, {"score": 0.0032016639006812826, "phrase": "input_interface"}, {"score": 0.003167441161387607, "phrase": "subject_system"}, {"score": 0.003100085797251317, "phrase": "high-level_specification_scheme"}, {"score": 0.0030124946762144717, "phrase": "transformation_function"}, {"score": 0.0029484244900690485, "phrase": "instantiable_formal_modeling_language"}, {"score": 0.0029064676523923886, "phrase": "desired_model_instances"}, {"score": 0.002834470668509792, "phrase": "declarative_grammar-based_input_specification_method"}, {"score": 0.0027543636132088332, "phrase": "attribute_grammars"}, {"score": 0.002686124293881678, "phrase": "input_constraints"}, {"score": 0.0025273383208209922, "phrase": "valid_test_inputs"}, {"score": 0.0025003054002226965, "phrase": "proposed_method"}, {"score": 0.002447101794397243, "phrase": "test_requirements"}, {"score": 0.0024296194239886676, "phrase": "coverage_criteria"}, {"score": 0.002377916348320401, "phrase": "valid_test_suites"}, {"score": 0.002229300966775032, "phrase": "black-box_test_generation_method"}, {"score": 0.0022133711375320244, "phrase": "grammar-based_software_inputs"}, {"score": 0.0021507795710951384, "phrase": "test_suites"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software testing", " Test input generation", " Grammar-basqd software", " Test coverage criteria"], "paper_abstract": "Context: Generating test cases based on software input interface is a black-box testing technique that can be made more effective by using structured input models such as input grammars. Automatically generating grammar-based test inputs may lead to structurally valid but semantically invalid inputs that may be rejected in early semantic error checking phases of a system under test. Objective: This paper aims to introduce a method for specifying a grammar-based input model with the model's semantic constraints to be used in the generation of positive test inputs. It is also important that the method can generate effective test suites based on appropriate grammar-based coverage criteria. Method: Formal specification of both input structure and input semantics provides the opportunity to use model instantiation techniques to create model instances that satisfy all specified constraints. The input interface of a subject system can be specified using a high-level specification scheme such as attribute grammars, and a transformation function from this scheme to an instantiable formal modeling language can generate the desired model instances. Results: We propose a declarative grammar-based input specification method that is based on a variation of attribute grammars and allows the user to specify input constraints in addition to input structure. The model can be instantiated automatically to generate structurally and semantically valid test inputs. The proposed method has the capability to specify test requirements and coverage criteria and use them to generate valid test suites that satisfy test coverage criteria requirements. Conclusion: The work presented in this paper provides a black-box test generation method for grammar-based software inputs that can automatically generate criteria-covering test suites. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Generating semantically valid test inputs using constrained input grammars", "paper_id": "WOS:000345947500013"}