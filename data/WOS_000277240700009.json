{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "graph_constraints"}, {"score": 0.0045346863560033175, "phrase": "graph_transformation"}, {"score": 0.004021954624114115, "phrase": "transformation_rules"}, {"score": 0.003712640297460159, "phrase": "significant_role"}, {"score": 0.0035908627899097407, "phrase": "visual_software_modelling"}, {"score": 0.003404244237372396, "phrase": "semi-structured_documents"}, {"score": 0.0032925572575951897, "phrase": "html"}, {"score": 0.0032489327852993576, "phrase": "xml"}, {"score": 0.0029394074636168435, "phrase": "application_areas"}, {"score": 0.0024545413637350765, "phrase": "proof_rules"}], "paper_keywords": ["Graph constraints", " Visual modelling", " Graph transformation"], "paper_abstract": "Graph constraints were introduced in the area of graph transformation, in connection with the notion of (negative) application conditions, as a form to limit the applicability of transformation rules. However, we believe that graph constraints may also play a significant role in the area of visual software modelling or in the specification and verification of semi-structured documents or websites (i.e. HTML or XML sets of documents). In this sense, after some discussion on these application areas, we concentrate on the problem of how to prove the consistency of specifications based on this kind of constraints. In particular, we present proof rules for two classes of graph constraints and show that our proof rules are sound and (refutationally) complete for each class. In addition, we study clause subsumption in this context as a form to speed up refutation.", "paper_title": "Reasoning with graph constraints", "paper_id": "WOS:000277240700009"}