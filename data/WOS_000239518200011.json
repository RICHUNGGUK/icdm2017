{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "chemical_application"}, {"score": 0.00447251540886613, "phrase": "formal_islands"}, {"score": 0.004216112320418982, "phrase": "existing_programming_languages"}, {"score": 0.004093453936415085, "phrase": "formal_features"}, {"score": 0.003584025547693836, "phrase": "host_language"}, {"score": 0.0031377955308198634, "phrase": "formal_language"}, {"score": 0.0027878797103973313, "phrase": "tom_system"}, {"score": 0.0025137856138000036, "phrase": "strategic_rewriting"}, {"score": 0.0023003498123420237, "phrase": "formal_island_implementation"}, {"score": 0.0021049977753042253, "phrase": "chemical_reactor"}], "paper_keywords": [""], "paper_abstract": "The concept of formal islands allows adding to existing programming languages, formal features that can be compiled later on into the host language itself, therefore inducing no dependency on the formal language. We illustrate this approach with the TOM system that provides matching, normalization and strategic rewriting, and we give a formal island implementation for the simulation of a chemical reactor.", "paper_title": "Non-intrusive formal methods and strategic rewriting for a chemical application", "paper_id": "WOS:000239518200011"}