{"auto_keywords": [{"score": 0.026084104296837836, "phrase": "mfgs"}, {"score": 0.014737221351168383, "phrase": "fgs_streams"}, {"score": 0.012557338186890922, "phrase": "larger_base_layers"}, {"score": 0.011100035115187954, "phrase": "base_layer_rate"}, {"score": 0.008996711115390571, "phrase": "mfgsopt"}, {"score": 0.00481495049065317, "phrase": "multiple_fine-grained_scalable_video_sequences"}, {"score": 0.004539005582217309, "phrase": "client_heterogeneity"}, {"score": 0.004345804626592329, "phrase": "basic_quality"}, {"score": 0.004225950334493496, "phrase": "incremental_quality_refinements"}, {"score": 0.004109387898181154, "phrase": "base_layer"}, {"score": 0.003971262520692664, "phrase": "compression_ratio"}, {"score": 0.003946650265907885, "phrase": "scalable_coding"}, {"score": 0.0038978806337961565, "phrase": "enhancement_layer"}, {"score": 0.003849711329589429, "phrase": "coding_efficiency"}, {"score": 0.0035728978842974246, "phrase": "coding_efficiency_gap"}, {"score": 0.0035507457285983268, "phrase": "diverse_video_sequences"}, {"score": 0.003517773841528639, "phrase": "fgs_sequences"}, {"score": 0.0034206776096452015, "phrase": "non-increasing_function"}, {"score": 0.0033262524445013303, "phrase": "optimization_problem"}, {"score": 0.0032546105164772995, "phrase": "single_sequence"}, {"score": 0.0032143649757754595, "phrase": "average_quality"}, {"score": 0.003135356056324338, "phrase": "optimal_and_efficient_algorithm"}, {"score": 0.0031062294139798273, "phrase": "fgsopt"}, {"score": 0.002992395566992563, "phrase": "multiple-sequence_case"}, {"score": 0.0029462012558267863, "phrase": "bandwidth-limited_server"}, {"score": 0.002918826667294298, "phrase": "multiple_fgs_sequences"}, {"score": 0.0029007179823144357, "phrase": "diverse_sets"}, {"score": 0.0028118558349788567, "phrase": "np-complete"}, {"score": 0.0027684263985790526, "phrase": "branch-and-bound_algorithm"}, {"score": 0.002700348931172875, "phrase": "optimal_solution"}, {"score": 0.0026013505538490223, "phrase": "search_space"}, {"score": 0.0025691622090542304, "phrase": "worst_case"}, {"score": 0.002521623057264411, "phrase": "exponential_time_complexity"}, {"score": 0.002474961375646351, "phrase": "heuristic_algorithm"}, {"score": 0.002414082940963702, "phrase": "multiple-sequence_problem"}, {"score": 0.0023546984428119864, "phrase": "near-optimal_results"}, {"score": 0.0023183255207530193, "phrase": "large_problems"}, {"score": 0.00219196314559129, "phrase": "dynamic_systems"}, {"score": 0.0021049977753042253, "phrase": "current_client_distributions"}], "paper_keywords": ["fine-grained scalable coding", " multimedia communication", " quality optimization", " video streaming"], "paper_abstract": "Fine-grained scalable (FGS) coding of video streams has been proposed in the literature to accommodate client heterogeneity. FGS streams are composed of two layers: a base layer, which provides basic quality, and a single enhancement layer that adds incremental quality refinements proportional to number of bits received. The base layer uses nonscalable coding which is more efficient in terms of compression ratio than scalable coding used in the enhancement layer. Thus for coding efficiency larger base layers are desired. Larger base layers, however, disqualify more clients from getting the stream. In this paper, we experimentally analyze this coding efficiency gap using diverse video sequences. For FGS sequences, we show that this gap is a non-increasing function of the base layer rate. We then formulate an optimization problem to determine the base layer rate of a single sequence to maximize the average quality for a given client bandwidth distribution. We design an optimal and efficient algorithm (called FGSOPT) to solve this problem. We extend our formulation to the multiple-sequence case, in which a bandwidth-limited server concurrently streams multiple FGS sequences to diverse sets of clients. We prove that this problem is NP-Complete. We design a branch-and-bound algorithm (called MFGSOPT) to compute the optimal solution. MFGSOPT runs fast for many typical cases because it intelligently cuts the search space. In the worst case, however, it has exponential time complexity. We also propose a heuristic algorithm (called MFGS) to solve the multiple-sequence problem. We experimentally show that MFGS produces near-optimal results and it scales to large problems: it terminates in less than 0.5 s for problems with more than 30 sequences. Therefore, MFGS can be used in dynamic systems, where the server periodically adjusts the structure of FGS streams to suit current client distributions.", "paper_title": "Partitioning of multiple fine-grained scalable video sequences concurrently streamed to heterogeneous clients", "paper_id": "WOS:000258767100014"}