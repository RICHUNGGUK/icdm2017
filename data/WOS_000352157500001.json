{"auto_keywords": [{"score": 0.035450305010581724, "phrase": "regular_inference"}, {"score": 0.03486768905254144, "phrase": "data_parameters"}, {"score": 0.02416138085009886, "phrase": "sip"}, {"score": 0.022848805573740204, "phrase": "tcp"}, {"score": 0.00481495049065317, "phrase": "infinite-state_communication_protocols"}, {"score": 0.004522406417999492, "phrase": "model-based_verification"}, {"score": 0.004175533280178052, "phrase": "communication_system_components"}, {"score": 0.003966667994579941, "phrase": "regular_inference_techniques"}, {"score": 0.003899385109646589, "phrase": "modest-size_finite-state_models"}, {"score": 0.0036207206487324506, "phrase": "significant_impact"}, {"score": 0.0035796471115594553, "phrase": "control_flow"}, {"score": 0.0031393948330209255, "phrase": "large_or_infinite_message_alphabets"}, {"score": 0.0029483516334882862, "phrase": "predicate_abstraction"}, {"score": 0.0028653893877383188, "phrase": "formal_verification"}, {"score": 0.002753138528582461, "phrase": "black-box_setting"}, {"score": 0.002386869729952315, "phrase": "learnlib_tool"}, {"score": 0.0022933216359142736, "phrase": "session_initiation_protocol"}, {"score": 0.0021659920594094407, "phrase": "transmission_control_protocol"}, {"score": 0.002105150416424927, "phrase": "windows"}], "paper_keywords": ["Active automata learning", " Mealy machines", " Abstraction techniques", " Communication protocols", " Session initiation protocol", " Transmission control protocol"], "paper_abstract": "In order to facilitate model-based verification and validation, effort is underway to develop techniques for generating models of communication system components from observations of their external behavior. Most previous such work has employed regular inference techniques which generate modest-size finite-state models. They typically suppress parameters of messages, although these have a significant impact on control flow in many communication protocols. We present a framework, which adapts regular inference to include data parameters in messages and states for generating components with large or infinite message alphabets. A main idea is to adapt the framework of predicate abstraction, successfully used in formal verification. Since we are in a black-box setting, the abstraction must be supplied externally, using information about how the component manages data parameters. We have implemented our techniques by connecting the LearnLib tool for regular inference with an implementation of session initiation protocol (SIP) in ns-2 and an implementation of transmission control protocol (TCP) in Windows 8, and generated models of SIP and TCP components.", "paper_title": "Generating models of infinite-state communication protocols using regular inference with abstraction", "paper_id": "WOS:000352157500001"}