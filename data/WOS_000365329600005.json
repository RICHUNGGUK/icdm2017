{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "time-stepped_applications"}, {"score": 0.004573842508130535, "phrase": "scientific_computing_domain"}, {"score": 0.004344755264641137, "phrase": "discrete_time-step"}, {"score": 0.004252707756312684, "phrase": "logical_synchronization_barriers"}, {"score": 0.004216434794603139, "phrase": "tick_boundaries"}, {"score": 0.004039639718055365, "phrase": "accumulated_computational_skew"}, {"score": 0.0037238193456845124, "phrase": "existing_solutions"}, {"score": 0.003316884515934182, "phrase": "efficient_approach"}, {"score": 0.003044313656896057, "phrase": "new_approach"}, {"score": 0.002665305036900055, "phrase": "different_ticks"}, {"score": 0.002575385171755899, "phrase": "idle_time"}, {"score": 0.0025424508991051483, "phrase": "needed_data_object"}, {"score": 0.002477837342313456, "phrase": "negative_effects"}, {"score": 0.0024461474613359994, "phrase": "accumulated_unsolved_computational_and_communication_skew"}, {"score": 0.0023636038312749245, "phrase": "data-centric_programming_model"}, {"score": 0.0023434058350520763, "phrase": "also_a_runtime_system"}, {"score": 0.0023134312557290043, "phrase": "asytick"}, {"score": 0.002264321283759897, "phrase": "ad_hoc_scheduler"}, {"score": 0.0022257833099336858, "phrase": "experimental_results"}, {"score": 0.00218789980093445, "phrase": "proposed_approach"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_computational_skew-resistant_approach"}], "paper_keywords": ["Time-stepped applications", " computational skew", " communication skew", " asynchronous execution", " parallelism"], "paper_abstract": "Time-stepped applications are pervasive in scientific computing domain but perform poorly in the cloud because these applications execute in discrete time-step or tick and use logical synchronization barriers at tick boundaries to ensure correctness. As a result, the accumulated computational skew and communication skew that were unsolved in each tick can slow down time-stepped applications significantly. However, the existing solutions have focused only on the skew in each tick and thus cannot resist the accumulation of skew. To fill in this gap, an efficient approach to resisting the accumulation of skew is proposed in this paper via fully exploiting parallelism among ticks. This new approach allows the user to decompose much computational part (also called asynchronous part) of the processing for an object, into several asynchronous sub-processes which are dependent on one data object. Each sub-process from different ticks can then proceed in advance using the idle time whenever the needed data object is available, redressing the negative effects caused by accumulated unsolved computational and communication skew. To efficiently support such an approach, a data-centric programming model and also a runtime system, namely AsyTick, coupled with an ad hoc scheduler are developed. Experimental results show that the proposed approach can improve the performance of time-stepped applications over a state-of-the-art computational skew-resistant approach up to 2: 53 times.", "paper_title": "Resisting Skew-Accumulation for Time-Stepped Applications in the Cloud via Exploiting Parallelism", "paper_id": "WOS:000365329600005"}