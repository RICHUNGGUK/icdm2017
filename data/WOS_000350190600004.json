{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "galerkin_meshfree_methods"}, {"score": 0.03932486938372318, "phrase": "basis_functions"}, {"score": 0.004739773204474094, "phrase": "large-scale_problems"}, {"score": 0.004556901872357751, "phrase": "maximum_entropy_approximants"}, {"score": 0.004278807087784626, "phrase": "denser_and_unstructured_connectivity"}, {"score": 0.00404937519538515, "phrase": "sparse_matrices"}, {"score": 0.003541923233726252, "phrase": "repetitive_evaluations"}, {"score": 0.0031719830393831115, "phrase": "simple_and_effective_algorithms"}, {"score": 0.0027741761880779535, "phrase": "quadrature_points"}, {"score": 0.0022070310530794097, "phrase": "relevant_problems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Meshfree methods", " Local maximum entropy", " Sparse matrix efficient assembly", " Matrix structure creation", " Optimal memory storage", " Code optimization"], "paper_abstract": "In Galerkin meshfree methods, because of a denser and unstructured connectivity, the creation and assembly of sparse matrices is expensive. Additionally, the cost of computing basis functions can be significant in problems requiring repetitive evaluations. We show that it is possible to overcome these two bottlenecks resorting to simple and effective algorithms. First, we create and fill the matrix by coarse-graining the connectivity between quadrature points and nodes. Second, we store only partial information about the basis functions, striking a balance between storage and computation. We show the performance of these strategies in relevant problems. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Efficient implementation of Galerkin meshfree methods for large-scale problems with an emphasis on maximum entropy approximants", "paper_id": "WOS:000350190600004"}