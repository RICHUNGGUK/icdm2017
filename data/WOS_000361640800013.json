{"auto_keywords": [{"score": 0.04146974017351405, "phrase": "libra"}, {"score": 0.010529857866375909, "phrase": "mapreduce"}, {"score": 0.00708810417506308, "phrase": "intermediate_data"}, {"score": 0.00481495049065317, "phrase": "lightweight_data_skew_mitigation"}, {"score": 0.004684157900507474, "phrase": "effective_tool"}, {"score": 0.004647442352794694, "phrase": "parallel_data_processing"}, {"score": 0.0045748683993128425, "phrase": "practical_mapreduce_applications"}, {"score": 0.004539005582217309, "phrase": "data_skew"}, {"score": 0.003742711659195878, "phrase": "mapreduce_applications"}, {"score": 0.0036987521452843987, "phrase": "previous_work"}, {"score": 0.0035981701736904495, "phrase": "pre-run_sampling"}, {"score": 0.003555902292752528, "phrase": "input_data"}, {"score": 0.0034185505275141077, "phrase": "reduce_stages"}, {"score": 0.0033518704336033905, "phrase": "innovative_sampling_method"}, {"score": 0.003286486670483032, "phrase": "highly_accurate_approximation"}, {"score": 0.003097865379563127, "phrase": "normal_map_processing"}, {"score": 0.002931569771634119, "phrase": "chosen_sample_map_tasks"}, {"score": 0.002851790448644913, "phrase": "map_tasks"}, {"score": 0.0027093285574752457, "phrase": "large_keys"}, {"score": 0.002688050388891007, "phrase": "application_semantics"}, {"score": 0.0026045914281028473, "phrase": "output_data"}, {"score": 0.0025237171554924128, "phrase": "computing_resources"}, {"score": 0.0023694065215394593, "phrase": "wide_range"}, {"score": 0.0022421381694107414, "phrase": "hadoop"}, {"score": 0.002181069180139225, "phrase": "negligible_overhead"}, {"score": 0.0021049977753042253, "phrase": "popular_applications"}], "paper_keywords": ["MapReduce", " data skew", " sampling", " partitioning"], "paper_abstract": "MapReduce is an effective tool for parallel data processing. One significant issue in practical MapReduce applications is data skew: the imbalance in the amount of data assigned to each task. This causes some tasks to take much longer to finish than others and can significantly impact performance. This paper presents LIBRA, a lightweight strategy to address the data skew problemamong the reducers of MapReduce applications. Unlike previous work, LIBRA does not require any pre-run sampling of the input data or prevent the overlap between the map and the reduce stages. It uses an innovative sampling method which can achieve a highly accurate approximation to the distribution of the intermediate data by sampling only a small fraction of the intermediate data during the normal map processing. It allows the reduce tasks to start copying as soon as the chosen sample map tasks (only a small fraction of map tasks which are issued first) complete. It supports the split of large keys when application semantics permit and the total order of the output data. It considers the heterogeneity of the computing resources when balancing the load among the reduce tasks appropriately. LIBRA is applicable to a wide range of applications and is transparent to the users. We implement LIBRA in Hadoop and our experiments show that LIBRA has negligible overhead and can speed up the execution of some popular applications by", "paper_title": "LIBRA: Lightweight Data Skew Mitigation in MapReduce", "paper_id": "WOS:000361640800013"}