{"auto_keywords": [{"score": 0.05007810365319662, "phrase": "generalized_voronoi_diagram"}, {"score": 0.049459866024533096, "phrase": "closely_spaced_objects"}, {"score": 0.04533113884840749, "phrase": "gvd"}, {"score": 0.0042550030421781605, "phrase": "arbitrary_collections"}, {"score": 0.003834099867584972, "phrase": "gvd_approximation"}, {"score": 0.0035923719610602214, "phrase": "previous_algorithms"}, {"score": 0.0033439771810057717, "phrase": "commodity_hardware"}, {"score": 0.0028973794653974327, "phrase": "adjacency_structure"}, {"score": 0.0027862576750944277, "phrase": "novel_adaptive_distance"}, {"score": 0.0026969099161088398, "phrase": "distance_function"}, {"score": 0.0026619761089539595, "phrase": "octree_vertices"}, {"score": 0.0026104197983396367, "phrase": "computed_distance_field"}, {"score": 0.002398274973378986, "phrase": "robust_and_parallelizable_gvd_surface_generation"}, {"score": 0.0022033327475266496, "phrase": "example_applications"}], "paper_keywords": [""], "paper_abstract": "We present an algorithm to compute an approximation of the generalized Voronoi diagram (GVD) on arbitrary collections of 2D or 3D geometric objects. In particular, we focus on datasets with closely spaced objects; GVD approximation is expensive and sometimes intractable on these datasets using previous algorithms. With our approach, the GVD can be computed using commodity hardware even on datasets with many, extremely tightly packed objects. Our approach is to subdivide the space with an octree that is represented with an adjacency structure. We then use a novel adaptive distance transform to compute the distance function on octree vertices. The computed distance field is sampled more densely in areas of close object spacing, enabling robust and parallelizable GVD surface generation. We demonstrate our method on a variety of data and show example applications of the GVD in 2D and 3D.", "paper_title": "Approximating the Generalized Voronoi Diagram of Closely Spaced Objects", "paper_id": "WOS:000358326600030"}