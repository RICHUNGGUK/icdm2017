{"auto_keywords": [{"score": 0.04907561130245922, "phrase": "atlas"}, {"score": 0.040025459638275786, "phrase": "model-driven_approach"}, {"score": 0.02491741315239883, "phrase": "quantum_chemistry"}, {"score": 0.00481495049065317, "phrase": "tensor_contraction_expressions"}, {"score": 0.004764220976404241, "phrase": "empirical_optimizers"}, {"score": 0.004542441734438654, "phrase": "computational_kernels"}, {"score": 0.0044237033788643715, "phrase": "best_choice"}, {"score": 0.0043080553835735825, "phrase": "tile_size"}, {"score": 0.004217708394188058, "phrase": "loop_unrolling"}, {"score": 0.004064117897000019, "phrase": "different_versions"}, {"score": 0.003466536738232506, "phrase": "atlas-like_library_generators"}, {"score": 0.0032527939106509946, "phrase": "performance_models"}, {"score": 0.0029098743621130004, "phrase": "constituent_operations"}, {"score": 0.002744888626958772, "phrase": "overall_execution_time"}, {"score": 0.0027015344365793016, "phrase": "performance_model"}, {"score": 0.00267301171407926, "phrase": "empirically_determined_cost_components"}, {"score": 0.002603012037901889, "phrase": "library_calls"}, {"score": 0.002561892963059385, "phrase": "data_layout_transformations"}, {"score": 0.002416589459425828, "phrase": "high-level_domain-specific_language"}, {"score": 0.002219790619936024, "phrase": "experimental_measurements"}, {"score": 0.002196342933346204, "phrase": "representative_computations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Data layout optimization", " Library call selection", " Compiler optimization", " Tensor contractions"], "paper_abstract": "Empirical optimizers like ATLAS have been very effective in optimizing computational kernels in libraries. The best choice of parameters such as tile size and degree of loop unrolling is determined in ATLAS by executing different versions of the computation. In contrast, optimizing compilers use a model-driven approach to program transformation. While the model-driven approach of optimizing compilers is generally orders of magnitude faster than ATLAS-like library generators, its effectiveness can be limited by the accuracy of the performance models used. In this paper, we describe an approach where a class of computations is modeled in terms of constituent operations that are empirically measured, thereby allowing modeling of the overall execution time. The performance model with empirically determined cost components is used to select library calls and choose data layout transformations in the context of the Tensor Contraction Engine, a compiler for a high-level domain-specific language for expressing computational models in quantum chemistry. The effectiveness of the approach is demonstrated through experimental measurements on representative computations from quantum chemistry. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Empirical performance model-driven data layout optimization selection for tensor contraction expressions", "paper_id": "WOS:000300033500002"}