{"auto_keywords": [{"score": 0.04501851799576053, "phrase": "nfa"}, {"score": 0.018737920128437443, "phrase": "real-world_rule_sets"}, {"score": 0.016161464265380645, "phrase": "character_sets"}, {"score": 0.010612367500608065, "phrase": "deep_packet_inspection"}, {"score": 0.008724077445807037, "phrase": "dfa"}, {"score": 0.006388108987172134, "phrase": "dual_fa"}, {"score": 0.006226375466953213, "phrase": "lfa"}, {"score": 0.004753512932910936, "phrase": "dual_finite_automata"}, {"score": 0.004632968695963776, "phrase": "packet_payloads"}, {"score": 0.0045348429403481464, "phrase": "large_set"}, {"score": 0.004419819325202464, "phrase": "important_algorithm"}, {"score": 0.004344755264641137, "phrase": "nondeterministic_finite_automaton"}, {"score": 0.004074397977869244, "phrase": "existing_algorithms"}, {"score": 0.003788196352457501, "phrase": "minimum_storage"}, {"score": 0.003598317040926701, "phrase": "minimum_memory_bandwidth"}, {"score": 0.003031287195944274, "phrase": "dual_finite_automaton"}, {"score": 0.002842428606954139, "phrase": "linear_finite_automaton"}, {"score": 0.0027702126237754625, "phrase": "extended_deterministic_finite_automaton"}, {"score": 0.002586457551025025, "phrase": "alternative_approach"}, {"score": 0.0024252458095689847, "phrase": "state_explosion_problem"}, {"score": 0.002353483216544667, "phrase": "memory_bandwidth"}, {"score": 0.002264321283759897, "phrase": "different_synthetic_payload_streams"}], "paper_keywords": ["Deep packet inspection", " linear finite automaton (LFA)", " dual finite automaton (dual FA)"], "paper_abstract": "Deep packet inspection, in which packet payloads are matched against a large set of patterns, is an important algorithm in many networking applications. Nondeterministic Finite Automaton (NFA) and Deterministic Finite Automaton (DFA) are the basis of existing algorithms. However, both NFA and DFA are not ideal for real-world rule sets: NFA has the minimum storage, but the maximum memory bandwidth; while DFA has the minimum memory bandwidth, but the maximum storage. Specifically, NFA and DFA cannot handle the presence of character sets, wildcards, and repetitions of character sets or wildcards in real-world rule sets. In this paper, we propose and evaluate a dual Finite Automaton (dual FA) to address these shortcomings. The dual FA consists of a linear finite automaton (LFA) and an extended deterministic finite automaton (EDFA). The LFA is simple to implement, and it provides an alternative approach to handle the repetition of character sets and wildcards (which could otherwise cause the state explosion problem in a DFA) without increasing memory bandwidth. We evaluate the automaton in real-world rule sets using different synthetic payload streams. The results show that dual FA can reduce the number of states up to five orders of magnitude while their memory bandwidth is close to minimum.", "paper_title": "Fast Deep Packet Inspection with a Dual Finite Automata", "paper_id": "WOS:000312830300010"}