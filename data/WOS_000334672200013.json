{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "k-step_hints"}, {"score": 0.011999093614827261, "phrase": "hint-k"}, {"score": 0.00958769530369447, "phrase": "lru-k"}, {"score": 0.004653667500876187, "phrase": "large-scale_distributed_systems"}, {"score": 0.004536244367689415, "phrase": "hint-based_multilevel_cache"}, {"score": 0.004347057700479576, "phrase": "different_levels"}, {"score": 0.004219321533320583, "phrase": "cache_blocks"}, {"score": 0.004148014765950199, "phrase": "latest_history_information"}, {"score": 0.003557924423642353, "phrase": "distributed_systems"}, {"score": 0.003512702405367876, "phrase": "basic_idea"}, {"score": 0.003394891095032025, "phrase": "lower_level_cache"}, {"score": 0.0031981188104809994, "phrase": "block's_previous_k-step"}, {"score": 0.002801935384649699, "phrase": "last_k_references"}, {"score": 0.002742787059497186, "phrase": "single_cache_level"}, {"score": 0.002617007341172262, "phrase": "last_k_movements"}, {"score": 0.0025076619172878945, "phrase": "different_cache_levels"}, {"score": 0.0024234763342790852, "phrase": "mathematical_model"}, {"score": 0.0023024551893939403, "phrase": "cache_level"}, {"score": 0.0022828795331819025, "phrase": "simulation_results"}, {"score": 0.0022346638243276717, "phrase": "better_performance"}, {"score": 0.0021968238865548812, "phrase": "existing_popular_multilevel_cache_schemes"}, {"score": 0.0021688645910972054, "phrase": "promote"}, {"score": 0.0021504218042734677, "phrase": "demote"}, {"score": 0.002123056877042193, "phrase": "mq"}], "paper_keywords": ["Multilevel cache", " hints", " demote", " promote", " I/O performance"], "paper_abstract": "I/O performance has been critical for large-scale distributed systems. Many approaches, including hint-based multilevel cache, have been proposed to smooth the gap between different levels. These solutions demote or promote cache blocks based on the latest history information, which is insufficient for applications where frequent demote and promote operations occur. In this paper, we propose a novel multilevel buffer cache using K-step hints (Hint-K) to improve the I/O performance of distributed systems. The basic idea is to promote a block from the lower level cache to the higher level(s) or demote a block vice versa based on the block's previous K-step promote or demote operations, which are referred to as K-step hints. If we make an analogy between Hint-K and LRU-K, then LRU-K keeps track of the times of last K references for blocks within a single cache level, while our Hint-K keeps track of the information of the last K movements (either demote or promote) of blocks among different cache levels. We develop our Hint-K algorithms and design a mathematical model that can efficiently describe the activeness of any block in any cache level. Simulation results show that Hint-K achieves better performance compared to the existing popular multilevel cache schemes such as PROMOTE, DEMOTE, and MQ under different I/O workloads.", "paper_title": "Hint-K: An Efficient Multilevel Cache Using K-Step Hints", "paper_id": "WOS:000334672200013"}