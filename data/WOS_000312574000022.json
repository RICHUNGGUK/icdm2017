{"auto_keywords": [{"score": 0.031623865134248225, "phrase": "loop_invariants"}, {"score": 0.00481495049065317, "phrase": "combined_abstract_domain"}, {"score": 0.00475413908468027, "phrase": "automated_verification"}, {"score": 0.004694092086199672, "phrase": "memory_safety"}, {"score": 0.004634799977448855, "phrase": "functional_correctness"}, {"score": 0.004576253356889219, "phrase": "heap-manipulating_programs"}, {"score": 0.004461359547152617, "phrase": "challenging_task"}, {"score": 0.004294381488413906, "phrase": "complex_data_structures"}, {"score": 0.004240116703465252, "phrase": "strong_invariants"}, {"score": 0.0040298010803060495, "phrase": "existing_verification_systems"}, {"score": 0.0033084729942065142, "phrase": "verification_system"}, {"score": 0.0030651710672229926, "phrase": "user_annotations"}, {"score": 0.002931569771634119, "phrase": "abstract_domain"}, {"score": 0.0028397103530211415, "phrase": "numerical_information"}, {"score": 0.002785978280998868, "phrase": "invariant_synthesis"}, {"score": 0.0026815368507715, "phrase": "fixed-point_iteration_process"}, {"score": 0.0026140878612307536, "phrase": "newly_designed_abstraction_mechanism"}, {"score": 0.0024527767211457046, "phrase": "combined_domain"}, {"score": 0.0022578275190855124, "phrase": "initial_experiments"}, {"score": 0.0021456243019466843, "phrase": "non-trivial_constraints"}], "paper_keywords": ["Loop invariant", " Fixpoint analysis", " Abstraction", " Combining analysis", " Shape analysis", " Numerical analysis", " Separation logic"], "paper_abstract": "Automated verification of memory safety and functional correctness for heap-manipulating programs has been a challenging task, especially when dealing with complex data structures with strong invariants involving both shape and numerical properties. Existing verification systems usually rely on users to supply annotations to guide the verification, which can be cumbersome and error-prone by hand and can significantly restrict the usability of the verification system. In this paper, we reduce the need for some user annotations by automatically inferring loop invariants over an abstract domain with both shape and numerical information. Our loop invariant synthesis is conducted automatically by a fixed-point iteration process, equipped with newly designed abstraction mechanism, together with join and widening operators over the combined domain. We have also proven the soundness and termination of our approach. Initial experiments confirm that we can synthesise loop invariants with non-trivial constraints. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Loop invariant synthesis in a combined abstract domain", "paper_id": "WOS:000312574000022"}