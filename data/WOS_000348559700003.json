{"auto_keywords": [{"score": 0.048171695241769216, "phrase": "software_testing"}, {"score": 0.029002265469697457, "phrase": "proposed_model"}, {"score": 0.00481495049065317, "phrase": "empirical_study"}, {"score": 0.00471811808206897, "phrase": "hybrid_self-organizing_map"}, {"score": 0.004576491793324233, "phrase": "crucial_task"}, {"score": 0.004545598514506788, "phrase": "software_development_process"}, {"score": 0.004190682785437681, "phrase": "testing_process"}, {"score": 0.003929391999210588, "phrase": "defect_data"}, {"score": 0.0039028497942174777, "phrase": "quality-based_class_labels"}, {"score": 0.003772793879444995, "phrase": "similar_or_earlier_versions"}, {"score": 0.0037346256869699975, "phrase": "software_project"}, {"score": 0.0036594395622282358, "phrase": "supervised_classification_methods"}, {"score": 0.0036347141744359442, "phrase": "defect_detection"}, {"score": 0.0035615322947497013, "phrase": "defect_proneness"}, {"score": 0.0035135619115963627, "phrase": "software_projects"}, {"score": 0.0034898187091432806, "phrase": "high_accuracy"}, {"score": 0.0034545033623115634, "phrase": "detection_model_generalization_ability"}, {"score": 0.0033964341293094545, "phrase": "automated_software_fault_detection_model"}, {"score": 0.003373479748579021, "phrase": "semi-supervised_hybrid_self-organizing_map"}, {"score": 0.003283198043537134, "phrase": "semi-supervised_model"}, {"score": 0.003249966782844541, "phrase": "self-organizing_map"}, {"score": 0.0032279990773657215, "phrase": "artificial_neural_network"}, {"score": 0.003036832649117453, "phrase": "semi-supervised_manner"}, {"score": 0.0030163012350270025, "phrase": "software_measurement_threshold_values"}, {"score": 0.0029655761366079877, "phrase": "quality_data"}, {"score": 0.0029355502535757696, "phrase": "semi-supervised_hysom"}, {"score": 0.0028472791870440065, "phrase": "prone_modules"}, {"score": 0.0027152006721460347, "phrase": "eight_industrial_data_sets"}, {"score": 0.002696938205695779, "phrase": "nasa"}, {"score": 0.002678598911294797, "phrase": "turkish_white-goods"}, {"score": 0.0025892330566358503, "phrase": "false_negative_rate"}, {"score": 0.0025717199672018304, "phrase": "overall_error_rate"}, {"score": 0.002485911017095097, "phrase": "nasa_data_sets"}, {"score": 0.0022836785412390544, "phrase": "automated_tool"}, {"score": 0.0022605410856853785, "phrase": "testing_effort"}, {"score": 0.0022300545742463262, "phrase": "module's_defects"}, {"score": 0.0021925226977381244, "phrase": "software_development"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Artificial neural network", " Clustering", " Self-organizing maps", " Semi-supervised", " Software fault prediction", " Threshold"], "paper_abstract": "Software testing is a crucial task during software development process with the potential to save time and budget by recognizing defects as early as possible and delivering a more defect-free product. To improve the testing process, fault prediction approaches identify parts of the system that are more defect prone. However, when the defect data or quality-based class labels are not identified or the company does not have similar or earlier versions of the software project, researchers cannot use supervised classification methods for defect detection. In order to detect defect proneness of modules in software projects with high accuracy and improve detection model generalization ability, we propose an automated software fault detection model using semi-supervised hybrid self-organizing map (HySOM). HySOM is a semi-supervised model based on self-organizing map and artificial neural network. The advantage of HySOM is the ability to predict the label of the modules in a semi-supervised manner using software measurement threshold values in the absence of quality data. In semi-supervised HySOM, the role of expert for identifying fault prone modules becomes less critical and more supportive. We have benchmarked the proposed model with eight industrial data sets from NASA and Turkish white-goods embedded controller software. The results show improvement in false negative rate and overall error rate in 80% and 60% of the cases respectively for NASA data sets. Moreover, we investigate the performance of the proposed model with other recent proposed methods. According to the results, our semi-supervised model can be used as an automated tool to guide testing effort by prioritizing the module's defects improving the quality of software development and software testing in less time and budget. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "An empirical study based on semi-supervised hybrid self-organizing map for software fault prediction", "paper_id": "WOS:000348559700003"}