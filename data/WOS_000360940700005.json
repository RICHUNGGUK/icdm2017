{"auto_keywords": [{"score": 0.05007689684343517, "phrase": "minimal_intrusion"}, {"score": 0.04174986960860372, "phrase": "program_execution"}, {"score": 0.03137538591643984, "phrase": "gpu."}, {"score": 0.004734448316824488, "phrase": "runtime_verification"}, {"score": 0.004674952036988355, "phrase": "monitoring_technique"}, {"score": 0.004444317282171449, "phrase": "run_time"}, {"score": 0.0043699845927285905, "phrase": "sequential_monitors"}, {"score": 0.004084829853870028, "phrase": "interest_changes"}, {"score": 0.003883194688426525, "phrase": "logical_properties"}, {"score": 0.0036450381529042133, "phrase": "gpu-based_method"}, {"score": 0.003117986133774198, "phrase": "parallel_fashion"}, {"score": 0.003014422649429416, "phrase": "many-core_platform"}, {"score": 0.002914288956035066, "phrase": "parallel_processing"}, {"score": 0.0028293966058473476, "phrase": "true_separation"}, {"score": 0.0027819985260847577, "phrase": "functional_concerns"}, {"score": 0.00257831812581194, "phrase": "monitoring_tasks"}, {"score": 0.002524428047147766, "phrase": "different_computing_hardware"}, {"score": 0.0022238834225283594, "phrase": "power_consumption"}, {"score": 0.0021773853011112882, "phrase": "gpu_technology"}], "paper_keywords": ["Runtime monitoring", " Parallel algorithms", " Temporal logic", " Formal methods"], "paper_abstract": "Runtime verification is a monitoring technique to gain assurance about well-being of a program at run time. Most existing approaches use sequential monitors; i.e., when the state of the program with respect to an event of interest changes, the monitor interrupts the program execution, evaluates a set of logical properties, and finally resumes the program execution. In this paper, we propose a GPU-based method for design and implementation of monitors that enjoy two levels of parallelism: the monitor (1) works along with the program in parallel, and (2) evaluates a set of properties in a parallel fashion as well. Our parallel monitoring algorithms effectively exploit the many-core platform available in the GPU. In addition to parallel processing, our approach benefits from a true separation of monitoring and functional concerns, as it isolates the monitor in the GPU. Thus, our monitoring approach incurs minimal intrusion, as executing monitoring tasks take place in a different computing hardware from execution of the program under inspection. Our method is fully implemented for parametric and non-parametric 3-valued linear temporal logic. Our experimental results show significant reduction in monitoring overhead, monitoring interference, and power consumption due to leveraging the GPU technology. In particular, we observe that our parallel verification algorithms are indeed scalable.", "paper_title": "Runtime verification with minimal intrusion through parallelism", "paper_id": "WOS:000360940700005"}