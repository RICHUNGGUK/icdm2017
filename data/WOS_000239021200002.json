{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "development_history"}, {"score": 0.031829428344297146, "phrase": "code_layout_information"}, {"score": 0.02688335873924347, "phrase": "source_control_repositories"}, {"score": 0.0046741260449047976, "phrase": "change_propagation_tools"}, {"score": 0.0045599093158915326, "phrase": "software_entities"}, {"score": 0.004382913938427474, "phrase": "new_features"}, {"score": 0.0043183186953102805, "phrase": "old_ones"}, {"score": 0.0040491842732233154, "phrase": "software_system"}, {"score": 0.0038919354605673104, "phrase": "new_changes"}, {"score": 0.00320826350799124, "phrase": "dependency_browsers"}, {"score": 0.003176626803985225, "phrase": "static_code_dependencies"}, {"score": 0.0031453010852936334, "phrase": "source_code_entities"}, {"score": 0.003038066486989815, "phrase": "historical_co-change"}, {"score": 0.0024306105794630246, "phrase": "case_study"}, {"score": 0.00240662380079115, "phrase": "five_large_open_source_systems"}, {"score": 0.0022675820982741347, "phrase": "historical_co-change_information"}, {"score": 0.0021049977753042253, "phrase": "simple_static_dependency_information"}], "paper_keywords": ["change propagation", " mining software repositories", " historical co-change", " static dependency", " source control systems"], "paper_abstract": "As developers modify software entities such as functions or variables to introduce new features, enhance old ones, or fix bugs, they must ensure that other entities in the software system are updated to be consistent with these new changes. Many hard to find bugs are introduced by developers who did not notice dependencies between entities, and failed to propagate changes correctly. Most modern development environments offer tools to assist developers in propagating changes. For example, dependency browsers show static code dependencies between source code entities. Other sources of information such as historical co-change or code layout information could be used by tools to support developers in propagating changes. We present the Development Replay (DR) approach which empirically assess and compares the effectiveness of several not-yet-existing change propagation tools by reenacting the changes stored in source control repositories using these tools. We present a case study of five large open source systems with a total of over 40 years of development history. Our empirical results show that historical co-change information recovered from source control repositories along with code layout information can guide developers in propagating changes better than simple static dependency information.", "paper_title": "Replaying development history to assess the effectiveness of change propagation tools", "paper_id": "WOS:000239021200002"}