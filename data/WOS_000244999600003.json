{"auto_keywords": [{"score": 0.044574637206824884, "phrase": "m._szydlo"}, {"score": 0.04095437418951115, "phrase": "merkle"}, {"score": 0.040297335566042466, "phrase": "log_space"}, {"score": 0.00481495049065317, "phrase": "merkle_tree_traversal"}, {"score": 0.004675652357253327, "phrase": "optimal_trade-offs"}, {"score": 0.004597861947580946, "phrase": "space_complexity"}, {"score": 0.004559451202070545, "phrase": "merkle_tree_traversals"}, {"score": 0.0044275118637330975, "phrase": "previous_results"}, {"score": 0.004390517953424082, "phrase": "m._jakobsson"}, {"score": 0.004353831792593701, "phrase": "t._leighton"}, {"score": 0.004317450843594688, "phrase": "s._micali"}, {"score": 0.00422781730455246, "phrase": "fractal_merkle"}, {"score": 0.004020185355794902, "phrase": "rsa_security_conference"}, {"score": 0.0037120135195886327, "phrase": "eurocrypt"}, {"score": 0.003650202126654272, "phrase": "lncs"}, {"score": 0.002873038567884343, "phrase": "n_hash_values"}, {"score": 0.002743262400544957, "phrase": "merkle_tree"}, {"score": 0.0022514836269627186, "phrase": "special_interest"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["time and space complexity", " optimality", " trade-offs", " Merkle trees", " Merkle tree traversal", " authentitication path", " amortization"], "paper_abstract": "In this paper we describe optimal trade-offs between time and space complexity of Merkle tree traversals with their associated authentication paths, improving on the previous results of M. Jakobsson, T. Leighton, S. Micali, and M. Szydlo [Fractal Merkle tree representation and traversal, in: RSA Cryptographers Track, RSA Security Conference, 2003] and M. Szydlo [Merkle tree traversal in log space and time, in: Proc. Eurocrypt, in: LNCS, vol. 3027, 2004, pp. 541-554; Merkle tree traversal in log space and time, Preprint version 2003, available at http://www.szydlo.com]. in particular, we show that our algorithm requires 2 log n/log(3)n hash function computations and storage for less than (log n/log(3) n + 1) log log n + 2 log n hash values, where n is the number of leaves in the Merkle tree. We also prove that these trade-offs are optimal, i.e. there is no algorithm that requires less than O(log n/log t) time and less than O (t log n/log t) space for any choice of parameter t >= 2. Our algorithm could be of special interest in the case when both time and space are limited. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Optimal trade-off for Merkle tree traversal", "paper_id": "WOS:000244999600003"}