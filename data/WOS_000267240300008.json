{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nested_datatypes"}, {"score": 0.010528904161239997, "phrase": "intensional_type_theory"}, {"score": 0.006293791050029697, "phrase": "induction_principle"}, {"score": 0.004429566229017728, "phrase": "different_family_members"}, {"score": 0.00435971969507033, "phrase": "homogeneous_lists"}, {"score": 0.004257000695796238, "phrase": "argument_types"}, {"score": 0.004042635935882651, "phrase": "family_name"}, {"score": 0.0039005612858880115, "phrase": "true_nesting"}, {"score": 0.0037935066882208235, "phrase": "data_structures"}, {"score": 0.0036311617742547167, "phrase": "a._abel"}, {"score": 0.0032744315183287024, "phrase": "iteration_schemes"}, {"score": 0.003197200793408836, "phrase": "structural_requirements"}, {"score": 0.0031467250930224152, "phrase": "polymorphic_typing"}, {"score": 0.0030239842475439814, "phrase": "specific_syntactic_form"}, {"score": 0.002988101395789399, "phrase": "underlying_datatype"}, {"score": 0.002662393295121998, "phrase": "usual_model"}, {"score": 0.0026412824985309323, "phrase": "initial_algebras_oil_endofunctor_categories"}, {"score": 0.002439143581855858, "phrase": "inductive_constructions"}, {"score": 0.0022977342663599042, "phrase": "expressible_programs"}, {"score": 0.002190519728921395, "phrase": "monotonicity_witnesses"}, {"score": 0.0021049977753042253, "phrase": "iteratively_defined_polymorphic_functions"}], "paper_keywords": [""], "paper_abstract": "Nested datatypes are families of datatypes that are indexed over all types such that the constructors may relate different family members (unlike the homogeneous lists). Moreover, the argument types of the constructors refer to indices given by expressions ill which the family name may occur. Especially ill this case of true nesting, termination of functions that traverse these data structures is far from being obvious. A joint paper with A. Abel and I Uustalu (Theor. Comput. Sci., 333 (1-2), 2005, pp. 3-66) proposed iteration schemes that guarantee termination not by structural requirements but just by polymorphic typing. They are generic in the sense that no specific syntactic form of the underlying datatype \"functor\" is required. However, there was no induction principle for the verification of the programs thus obtained, although they are well known in the Usual model of initial algebras oil endofunctor categories. The new contribution is a representation of nested datatypes in intensional type theory (more specifically, in the calculus of inductive constructions) that is still generic and covers true nesting, guarantees termination of all expressible programs, and has all induction principle that allows to prove functoriality of monotonicity witnesses (maps for nested datatypes) and naturality properties of iteratively defined polymorphic functions.", "paper_title": "An induction principle for nested datatypes in intensional type theory", "paper_id": "WOS:000267240300008"}