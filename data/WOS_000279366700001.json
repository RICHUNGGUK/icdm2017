{"auto_keywords": [{"score": 0.0482650857509263, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "mobile_processes"}, {"score": 0.003789561910103601, "phrase": "concurrent_programs"}, {"score": 0.003674192201248236, "phrase": "recursive_communication_structures"}, {"score": 0.003123527559542239, "phrase": "local_reasoning"}, {"score": 0.0023099082804523044, "phrase": "lock-freedom_analysis_tool"}, {"score": 0.00218807532188779, "phrase": "proposed_type_system"}, {"score": 0.0021049977753042253, "phrase": "nontrivial_programs"}], "paper_keywords": ["Languages", " Verification", " Type systems", " concurrency", " mobile processes"], "paper_abstract": "We propose a type system for lock-freedom in the pi-calculus, which guarantees that certain communications will eventually succeed. Distinguishing features of our type system are: it can verify lock-freedom of concurrent programs that have sophisticated recursive communication structures; it can be fully automated; it is hybrid, in that it combines a type system for lock-freedom with local reasoning about deadlock-freedom, termination, and confluence analyses. Moreover, the type system is parameterized by deadlock-freedom/termination/confluence analyses, so that any methods (e.g. type systems and model checking) can be used for those analyses. A lock-freedom analysis tool has been implemented based on the proposed type system, and tested for nontrivial programs.", "paper_title": "A Hybrid Type System for Lock-Freedom of Mobile Processes", "paper_id": "WOS:000279366700001"}