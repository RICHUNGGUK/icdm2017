{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multilevel_modelling"}, {"score": 0.004577076689777069, "phrase": "primary_artefacts"}, {"score": 0.004523865550323285, "phrase": "software_development_process"}, {"score": 0.004402088928254543, "phrase": "final_application"}, {"score": 0.004283584545154191, "phrase": "mde"}, {"score": 0.004087756756529841, "phrase": "two-level_metamodelling_setting"}, {"score": 0.004055998173160551, "phrase": "domain-specific_modelling_languages"}, {"score": 0.0036221822903900725, "phrase": "standard_approach"}, {"score": 0.0035108659422301985, "phrase": "arbitrary_number"}, {"score": 0.00337650257503995, "phrase": "multilevel_modelling_claim"}, {"score": 0.003324203391715804, "phrase": "simpler_model_descriptions"}, {"score": 0.002968424524565369, "phrase": "multilevel_solutions"}, {"score": 0.0027240799841720957, "phrase": "recurring_patterns"}, {"score": 0.0025892330566358503, "phrase": "identified_patterns"}, {"score": 0.002499798127196099, "phrase": "wide_range"}, {"score": 0.0024803459795996116, "phrase": "existing_two-level_dsmls"}, {"score": 0.0022146817879683204, "phrase": "application_domains"}, {"score": 0.002188874450946842, "phrase": "software_architecture"}, {"score": 0.0021215125099937663, "phrase": "high_average_number"}, {"score": 0.0021049977753042253, "phrase": "pattern_occurrences"}], "paper_keywords": ["Design", " Languages", " Model-driven engineering", " metamodelling", " domain-specific modelling languages", " multilevel modelling", " metamodelling patterns"], "paper_abstract": "Model-Driven Engineering (MDE) promotes models as the primary artefacts in the software development process, from which code for the final application is derived. Standard approaches to MDE (like those based on MOF or EMF) advocate a two-level metamodelling setting where Domain-Specific Modelling Languages (DSMLs) are defined through a metamodel that is instantiated to build models at the metalevel below. Multilevel modelling (also called deep metamodelling) extends the standard approach to metamodelling by enabling modelling at an arbitrary number of metalevels, not necessarily two. Proposers of multilevel modelling claim this leads to simpler model descriptions in some situations, although its applicability has been scarcely evaluated. Thus, practitioners may find it difficult to discern when to use it and how to implement multilevel solutions in practice. In this article, we discuss those situations where the use of multilevel modelling is beneficial, and identify recurring patterns and idioms. Moreover, in order to assess how often the identified patterns arise in practice, we have analysed a wide range of existing two-level DSMLs from different sources and domains, to detect when their elements could be rearranged in more than two metalevels. The results show this scenario is not uncommon, while in some application domains (like software architecture and enterprise/process modelling) pervasive, with a high average number of pattern occurrences per metamodel. Categories and Subject Descriptors: D.2.2 [Software Engineering]: Design Tools and Techniques", "paper_title": "When and How to Use Multilevel Modelling", "paper_id": "WOS:000347030200006"}