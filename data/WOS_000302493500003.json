{"auto_keywords": [{"score": 0.03900291508534277, "phrase": "tcam"}, {"score": 0.00481495049065317, "phrase": "multiple_pattern_matching_method"}, {"score": 0.0047787596516662, "phrase": "malicious_code_detection"}, {"score": 0.004689462599037994, "phrase": "malicious_behaviors"}, {"score": 0.00463668357590034, "phrase": "intrusion_detection_system"}, {"score": 0.004448169552315403, "phrase": "hardware-based_ids"}, {"score": 0.00421923944095905, "phrase": "malicious_activities"}, {"score": 0.003956971099850658, "phrase": "ternary_content_addressable_memory"}, {"score": 0.0038247634489737142, "phrase": "software-based_algorithm"}, {"score": 0.0037674258625824113, "phrase": "first_pass"}, {"score": 0.0036553070575015344, "phrase": "input_pattern"}, {"score": 0.003627800727103479, "phrase": "incoming_packet"}, {"score": 0.003546513036085932, "phrase": "static_random_access_memory"}, {"score": 0.0034279721355412285, "phrase": "intact_pattern"}, {"score": 0.0033511469200347907, "phrase": "second_pass"}, {"score": 0.003226899588787952, "phrase": "pattern-matching_problem"}, {"score": 0.0031072444973406586, "phrase": "specific_queue"}, {"score": 0.0029360049890445944, "phrase": "best_performance"}, {"score": 0.002902903244616154, "phrase": "experimental_results"}, {"score": 0.002837811982066224, "phrase": "matching_probability"}, {"score": 0.0028058141911641225, "phrase": "sram_lookup"}, {"score": 0.0027325449069867222, "phrase": "processing_speeds"}, {"score": 0.002631172352670227, "phrase": "tcam_lookup"}, {"score": 0.002562451837774567, "phrase": "processing_speed"}, {"score": 0.002543148295176345, "phrase": "pattern_matching"}, {"score": 0.002514464610980629, "phrase": "store_patterns"}, {"score": 0.0023758152068732025, "phrase": "multiple_positions"}, {"score": 0.0021049977753042253, "phrase": "tcam_memory_spaces"}], "paper_keywords": ["Ternary Content Addressable Memory (TCAM)", " Pattern matching", " Intrusion detection", " Malicious code"], "paper_abstract": "To detect the malicious behaviors, an Intrusion Detection System (IDS) has been proposed in most security applications. A hardware-based IDS has been adopted popularly to increase the performance of detection such that the malicious activities can be detected and isolated as early as possible. This paper presents a two pass multiple pattern-matching method with Ternary Content Addressable Memory (TCAM) to improve the deficiency of software-based algorithm. At the first pass, we use TCAM to filter the input pattern of incoming packet quickly, and then apply Static Random Access Memory (SRAM) to store and fetch the intact pattern to perform re-compare at the second pass. Based on the two pass processes, we can handle pattern-matching problem fast and correct. Moreover, we add a specific queue between the two pass processes to ensure it can be performed in parallel to reach the best performance. By experimental results, we get that the matching probability of performing SRAM lookup is less than 0.523%. Therefore, the processing speeds of pattern matching mainly depend on the rate of TCAM lookup. In order to accelerate the processing speed of pattern matching, the store patterns in TCAM can be duplicated more times to make TCAM be able to carry out multiple positions at one lookup. If we use 266 MHz TCAM to deal with 2,082 Snort pattern, and each pattern is stored to duplicate four times in TCAM, then the method can achieve 8Gbps with total 48,677 bytes TCAM memory spaces.", "paper_title": "A Multiple Pattern Matching Method for Malicious Code Detection", "paper_id": "WOS:000302493500003"}