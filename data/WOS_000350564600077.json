{"auto_keywords": [{"score": 0.030632066241378757, "phrase": "varys"}, {"score": 0.00481495049065317, "phrase": "data-parallel_applications"}, {"score": 0.004638788604042707, "phrase": "parallel_flows"}, {"score": 0.004581505405526037, "phrase": "traditional_techniques"}, {"score": 0.004046020290832207, "phrase": "application-level_requirements"}, {"score": 0.0037551444630619015, "phrase": "new_opportunities"}, {"score": 0.0037087324991876727, "phrase": "network_scheduling"}, {"score": 0.003528730431045574, "phrase": "inter-coflow_scheduling"}, {"score": 0.0034206776096452015, "phrase": "communication_time"}, {"score": 0.003378385493203297, "phrase": "data-intensive_jobs"}, {"score": 0.0033159224502739247, "phrase": "predictable_communication_time"}, {"score": 0.0032143649757754595, "phrase": "concurrent_open_shop_scheduling"}, {"score": 0.0031746155143471725, "phrase": "coupled_resources_problem"}, {"score": 0.003039311963787733, "phrase": "effective_heuristics"}, {"score": 0.0027857115172243226, "phrase": "data-intensive_frameworks"}, {"score": 0.0026835920552084488, "phrase": "proposed_algorithms"}, {"score": 0.002633941112839883, "phrase": "high_network_utilization"}, {"score": 0.002585206414738808, "phrase": "starvation_freedom"}, {"score": 0.002521623057264411, "phrase": "trace-driven_simulations"}, {"score": 0.002474961375646351, "phrase": "communication_stages"}, {"score": 0.0021851480717840484, "phrase": "per-flow_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "non-preemptive_coflow_schedulers"}], "paper_keywords": ["Coflow", " data-intensive applications", " datacenter networks"], "paper_abstract": "Communication in data-parallel applications often involves a collection of parallel flows. Traditional techniques to optimize flowlevel metrics do not perform well in optimizing such collections, because the network is largely agnostic to application-level requirements. The recently proposed coflow abstraction bridges this gap and creates new opportunities for network scheduling. In this paper, we address inter-coflow scheduling for two different objectives: decreasing communication time of data-intensive jobs and guaranteeing predictable communication time. We introduce the concurrent open shop scheduling with coupled resources problem, analyze its complexity, and propose effective heuristics to optimize either objective. We present Varys, a system that enables data-intensive frameworks to use coflows and the proposed algorithms while maintaining high network utilization and guaranteeing starvation freedom. EC2 deployments and trace-driven simulations show that communication stages complete up to 3.16x faster on average and up to 2x more coflows meet their deadlines using Varys in comparison to per-flow mechanisms. Moreover, Varys outperforms non-preemptive coflow schedulers by more than 5x", "paper_title": "Efficient Coflow Scheduling with Varys", "paper_id": "WOS:000350564600077"}