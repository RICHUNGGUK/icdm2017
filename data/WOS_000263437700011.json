{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "critical_applications"}, {"score": 0.004707479285061122, "phrase": "critical_systems"}, {"score": 0.004320421465896323, "phrase": "precedence_task_graphs"}, {"score": 0.004092463367307375, "phrase": "new_method"}, {"score": 0.0029689311901364797, "phrase": "application's_requirements"}, {"score": 0.0028764048059439205, "phrase": "adequate_tasks"}, {"score": 0.0028505007899807446, "phrase": "well_chosen_processors"}, {"score": 0.0026514708899935333, "phrase": "transient_failures"}, {"score": 0.0025341792091114184, "phrase": "constant_parameter_poisson_law"}, {"score": 0.002433048706565187, "phrase": "extensive_simulations"}, {"score": 0.002400241288973103, "phrase": "random_graphs"}, {"score": 0.00237861522566195, "phrase": "actual_application_graphs"}, {"score": 0.0022124605840026313, "phrase": "existing_reference_scheduling_methods"}, {"score": 0.0021049977753042253, "phrase": "better_reliability"}], "paper_keywords": ["Multi-processor scheduling", " Multi-objective optimization", " Reliability"], "paper_abstract": "Applications implemented on critical systems are subject to both safety critical and real-time constraints. Classically, applications are specified as precedence task graphs that must be scheduled onto a given target multiprocessor heterogeneous architecture. We propose a new method for simultaneously optimizing two objectives: the execution time and the reliability of the schedule. The problem is decomposed into two successive steps: a spatial allocation during which the reliability is maximized (randomized algorithm), and a scheduling during which the makespan is minimized (list scheduling algorithm). It allows us to produce several trade-off solutions, among which the user can choose the solution that best fits the application's requirements. Reliability is increased by replicating adequate tasks onto well chosen processors. Our fault model assumes that processors are fail-silent, that they are subject to transient failures, and that the occurrences of failures follow a constant parameter Poisson law. We assess and validate our method by running extensive simulations on both random graphs and actual application graphs. They show that it is competitive, in terms of makespan, compared to existing reference scheduling methods for heterogeneous processors (HEFT), while providing a better reliability. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Reliability versus performance for critical applications", "paper_id": "WOS:000263437700011"}