{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parametrised_modal_interface_automata"}, {"score": 0.004738325072560588, "phrase": "interface_theories"}, {"score": 0.00440825801245188, "phrase": "compatibility_interfaces"}, {"score": 0.003971502222405927, "phrase": "finite_state_interfaces"}, {"score": 0.003876996400581697, "phrase": "computing_systems"}, {"score": 0.003022465992278672, "phrase": "parametric_number"}, {"score": 0.0028115863316685937, "phrase": "fully_algorithmic_procedure"}, {"score": 0.0024922258873137093, "phrase": "parametrised_interfaces"}, {"score": 0.0021049977753042253, "phrase": "refinement_checking_problem"}], "paper_keywords": ["Formal verification", " parameterized systems", " interface theories", " modal interface automata", " compatibility", " refinement", " decidability"], "paper_abstract": "Interface theories (ITs) enable us to analyse the compatibility interfaces and refine them while preserving their compatibility. However, most ITs are for finite state interfaces, whereas computing systems are often parametrised involving components, the number of which cannot be fixed. We present, to our knowledge, the first IT that allows us to specify a parametric number of interfaces. Moreover, we provide a fully algorithmic procedure, implemented in a tool, for checking the compatibility of and refinement between parametrised interfaces. Finally, we show that the restrictions of the technique are necessary; removing any of them renders the refinement checking problem undecidable.", "paper_title": "Parametrised Modal Interface Automata", "paper_id": "WOS:000367206600005"}