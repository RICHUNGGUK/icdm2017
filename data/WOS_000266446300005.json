{"auto_keywords": [{"score": 0.026033701006803824, "phrase": "regular_expressions"}, {"score": 0.00481495049065317, "phrase": "regular_language"}, {"score": 0.004637478829869904, "phrase": "glider-based_structures"}, {"score": 0.003771631577951067, "phrase": "complex_elementary_cellular_automaton"}, {"score": 0.0034984340449789745, "phrase": "universal_computation"}, {"score": 0.003369322866499541, "phrase": "complicated_collision-based_reactions"}, {"score": 0.0027916287357898544, "phrase": "initial_conditions"}, {"score": 0.0025409639091476363, "phrase": "finite_subset"}, {"score": 0.0021049977753042253, "phrase": "de_bruijn_diagrams"}], "paper_keywords": ["Cellular automata", " Rule 110", " de Bruijn diagrams and regular expressions"], "paper_abstract": "Rule 110 is a complex elementary cellular automaton able of support universal computation and complicated collision-based reactions between gliders. We propose a representation for coding initial conditions by means of a finite subset of regular expressions. The sequences are extracted both from de Bruijn diagrams and tiles specifying a set of phases f(i)-1 for each glider in Rule 110. The subset of regular expressions is explained in detail.", "paper_title": "Determining a Regular Language by Glider-Based Structures called Phases f(i)-1 in Rule 110", "paper_id": "WOS:000266446300005"}