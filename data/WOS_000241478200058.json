{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "treewidth"}, {"score": 0.006538930340657572, "phrase": "karp"}, {"score": 0.00481495049065317, "phrase": "exact_algorithms"}, {"score": 0.004669845451682529, "phrase": "experimental_and_theoretical_results"}, {"score": 0.004392565073466714, "phrase": "exact_exponential_time_algorithms"}, {"score": 0.0040481944502103505, "phrase": "dynamic_programming_algorithm"}, {"score": 0.003990513262527895, "phrase": "held"}, {"score": 0.003636692152882991, "phrase": "old_dynamic_programming_method"}, {"score": 0.0034911335714333507, "phrase": "traveling_salesman_problem"}, {"score": 0.0033004240095380623, "phrase": "worst_case"}, {"score": 0.0031845067058084583, "phrase": "running_time"}, {"score": 0.0031521392193570846, "phrase": "actual_instances"}, {"score": 0.003010496595090984, "phrase": "small_instances"}, {"score": 0.0027883885425383534, "phrase": "important_factor"}, {"score": 0.0022267859286766553, "phrase": "polynomial_space"}, {"score": 0.002126635713519053, "phrase": "balanced_separators"}], "paper_keywords": [""], "paper_abstract": "We give experimental and theoretical results on the problem of computing the treewidth of a graph by exact exponential time algorithms using exponential space or using only polynomial space. We first report on an implementation of a dynamic programming algorithm for computing the treewidth of a graph with running time O* (2(n)). This algorithm is based on the old dynamic programming method introduced by Held and Karp for the TRAVELING SALESMAN problem. We use some optimizations that do not affect the worst case running time but improve on the running time on actual instances and can be seen to be practical for small instances. However, our experiments show that the space used by the algorithm is an important factor to what input sizes the algorithm is effective. For this purpose, we settle the problem of computing treewidth under the restriction that the space used is only polynomial. In this direction we give a simple O*(4(n)) algorithm that requires polynomial space. We also prove that using more refined techniques with balanced separators, TREEWIDTH can be computed in O*(2.9512(n)) time and polynomial space.", "paper_title": "On exact algorithms for treewidth", "paper_id": "WOS:000241478200058"}