{"auto_keywords": [{"score": 0.04577680896363523, "phrase": "et_rules"}, {"score": 0.036345261759194745, "phrase": "functionality-based_rules"}, {"score": 0.03504655810030533, "phrase": "functionality-based_rule"}, {"score": 0.00481495049065317, "phrase": "functionality-based_rules_for"}, {"score": 0.00470325458481566, "phrase": "equivalent_transformation"}, {"score": 0.004424768776701965, "phrase": "successive_accumulation"}, {"score": 0.004281678802569817, "phrase": "correct_et_rule_generation"}, {"score": 0.003990385737207714, "phrase": "broad_range"}, {"score": 0.003615443704375908, "phrase": "generation_methods"}, {"score": 0.003531474887552889, "phrase": "important_classes"}, {"score": 0.0027395968397212053, "phrase": "et_programs"}, {"score": 0.002613709503583786, "phrase": "logical_formula"}, {"score": 0.002196077907454079, "phrase": "difficult_problems"}, {"score": 0.0021049977753042253, "phrase": "definite_clause_logic_programs"}], "paper_keywords": ["Equivalent transformation", " Rule generation algorithm", " Functionality-based", " ET rule", " Inductively-used rule"], "paper_abstract": "In the Equivalent Transformation (ET) computation model, a program is constructed by the successive accumulation of ET rules. A method of correct ET rule generation by meta-computation has already been proposed. However, although the method covers a broad range in the generation of ET rules, all the important ET rules are not necessarily generated. Generation of more ET rules can be achieved by supplementing generation methods which are specialized for important classes. A class of functionality-based rules is one of those classes. A functionality-based rule describes a procedure in which two different variables included in two atoms are equalized based on the functionality of the atoms. In this paper, we propose an algorithm that systematically and recursively generates functionality-based rules and discuss its effectiveness in the synthesis of ET programs. A functionality-based rule is generated based on proving a logical formula consisting of the given atoms and dis-equality. The proof is computed by utilizing several ET rules and the rule which will be obtained by the algorithm. The proposed algorithm together with meta-computation can synthesize programs to solve difficult problems including those that cannot be solved by definite clause Logic programs.", "paper_title": "GENERATING FUNCTIONALITY-BASED RULES FOR PROGRAM CONSTRUCTION", "paper_id": "WOS:000270426300001"}