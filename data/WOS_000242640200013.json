{"auto_keywords": [{"score": 0.04962913836247384, "phrase": "object-oriented_systems"}, {"score": 0.04010882425349306, "phrase": "ecfg"}, {"score": 0.014384436756191284, "phrase": "cfg"}, {"score": 0.013791492835483232, "phrase": "independent_paths"}, {"score": 0.00481495049065317, "phrase": "based_analysis"}, {"score": 0.0047026237903774895, "phrase": "basic_features"}, {"score": 0.004658426838467567, "phrase": "object-oriented_software"}, {"score": 0.004528301408585875, "phrase": "traditional_testing_methods"}, {"score": 0.0044435677598780796, "phrase": "control_flow_graph"}, {"score": 0.0043194180167921165, "phrase": "well-known_model"}, {"score": 0.004178935413340453, "phrase": "procedural_software"}, {"score": 0.0038930368103015467, "phrase": "new_model"}, {"score": 0.0038564191670589884, "phrase": "extended_control_flow_graph"}, {"score": 0.003766369160795001, "phrase": "code_based_analysis"}, {"score": 0.003643807817480753, "phrase": "layered_cfg"}, {"score": 0.003459191419478298, "phrase": "new_metrics-extended_cyclomatic_complexity"}, {"score": 0.00326840809777013, "phrase": "mccabe's_cyclomatic_complexity"}, {"score": 0.0031174595932694036, "phrase": "independent_execution_paths"}, {"score": 0.003073545175760353, "phrase": "oo_software"}, {"score": 0.003030247482854539, "phrase": "different_ways"}, {"score": 0.0029454679553901613, "phrase": "individual_methods"}, {"score": 0.0027567336518542858, "phrase": "different_cases"}, {"score": 0.002617015768238906, "phrase": "java"}, {"score": 0.002426137929553722, "phrase": "total_system"}, {"score": 0.002196609505859369, "phrase": "oo_system"}, {"score": 0.002125020720324262, "phrase": "test_cases"}, {"score": 0.0021049977753042253, "phrase": "code_testing"}], "paper_keywords": ["object-oriented testing", " extended control flow graph", " extended cyclomatic complexity", " test paths", " graph-based testing"], "paper_abstract": "The basic features of object-oriented software makes it difficult to apply traditional testing methods in object-oriented systems. Control Flow Graph (CFG) is a well-known model used for identification of independent paths in procedural software. This paper highlights the problem of constructing CFG in object-oriented systems and proposes a new model named Extended Control Flow Graph (ECFG) for code based analysis of Object-Oriented (OO) software. ECFG is a layered CFG where nodes refer to methods rather than statements. A new metrics-Extended Cyclomatic Complexity (E-CC) is developed which is analogous to McCabe's Cyclomatic Complexity (CC) and refers to the number of independent execution paths within the OO software. The different ways in which CFG's of individual methods are connected in an ECFG are presented and formulas for E-CC for these different cases are proposed. Finally we have considered an example in Java and based on its ECFG, applied these cases to arrive at the E-CC of the total system as well as proposed a methodology for calculating the basis set, i.e., the set of independent paths for the OO system that will help in creation of test cases for code testing.", "paper_title": "Code based analysis for object-oriented systems", "paper_id": "WOS:000242640200013"}