{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "visible_points"}, {"score": 0.006323890543782003, "phrase": "large_datasets"}, {"score": 0.004784565134881178, "phrase": "large_obstructed_space"}, {"score": 0.004694549334241098, "phrase": "fundamental_problem"}, {"score": 0.004664920223650814, "phrase": "computational_geometry"}, {"score": 0.004635477242873163, "phrase": "spatial_databases"}, {"score": 0.004548253531664032, "phrase": "new_applications"}, {"score": 0.0045052562941109734, "phrase": "trip_planning"}, {"score": 0.004476816511183382, "phrase": "nearest_neighbors"}, {"score": 0.004392565073466714, "phrase": "key_role"}, {"score": 0.004364833543615155, "phrase": "obstacle_space"}, {"score": 0.004202067185873954, "phrase": "shortest_path"}, {"score": 0.00398177607914381, "phrase": "current_methods"}, {"score": 0.0038090252359678336, "phrase": "new_and_fast_algorithm"}, {"score": 0.00373729411492695, "phrase": "arbitrary_query_location"}, {"score": 0.0037019348293573675, "phrase": "large_polygon"}, {"score": 0.0035978443860856216, "phrase": "polygon_triangulation"}, {"score": 0.0033661687998511737, "phrase": "efficient_way"}, {"score": 0.003313236365209158, "phrase": "large_number"}, {"score": 0.003240521834737935, "phrase": "data_structure"}, {"score": 0.003199687131875466, "phrase": "searching_space"}, {"score": 0.002909342017421165, "phrase": "progressive_way"}, {"score": 0.0028726685746632654, "phrase": "theoretical_analysis"}, {"score": 0.0028185209235368856, "phrase": "n_vertices"}, {"score": 0.0027741761880779535, "phrase": "time_complexity"}, {"score": 0.002696101728474703, "phrase": "existing_method"}, {"score": 0.002546466113418944, "phrase": "space_complexity"}, {"score": 0.0024051153560799335, "phrase": "threshold_distance"}, {"score": 0.002382329940096419, "phrase": "query_location"}, {"score": 0.0023299979520479182, "phrase": "extensive_experiments"}, {"score": 0.0022146486355422244, "phrase": "large_obstacle_space"}, {"score": 0.0021049977753042253, "phrase": "competitive_methods"}], "paper_keywords": ["Visible points", " Obstacle space", " Polygon triangulation"], "paper_abstract": "Querying visible points is a fundamental problem in computational geometry and spatial databases. With the development of new applications such as trip planning and nearest neighbors, querying visible points plays a key role in obstacle space and the result can be further used such as defining the shortest path. Thereby, efficiently finding the result is essentially important. However, the performance of current methods decrease substantially for large datasets. To solve the problem, we proposes a new and fast algorithm to find visible points for an arbitrary query location inside a large polygon containing obstacles. The method is based on polygon triangulation. By decomposing the polygon into a set of triangles, we manage the polygon by organizing triangles in an efficient way instead of maintaining a large number of vertices. We propose a data structure to partition the searching space into several parts, each of which is independently processed. Afterwards, by recursively calling a method we search visible points by accessing triangles and return the result in a progressive way. Through a theoretical analysis, assuming the polygon contains N vertices in total, the time complexity of our algorithm is O(N), improving the existing method O(N l o g N). We prove the correctness of the algorithm and analyze the space complexity, which is O(N). The technique is extended to return visible points less than a threshold distance to the query location. Using both synthetic and real datasets, we perform extensive experiments to test our algorithm and demonstrate its efficiency and effectiveness. Visible points are efficiently processed in a large obstacle space with over one million vertices. Experimental results show that our technique gains more than one order of magnitude speedup compared to competitive methods using large datasets.", "paper_title": "Querying visible points in large obstructed space", "paper_id": "WOS:000353294800001"}