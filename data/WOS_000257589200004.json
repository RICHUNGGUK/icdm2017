{"auto_keywords": [{"score": 0.04328164827802023, "phrase": "alm"}, {"score": 0.00599862356412535, "phrase": "hard_and_soft_constraints"}, {"score": 0.004816900054604951, "phrase": "domain"}, {"score": 0.004801393435283388, "phrase": "specific_high-level_constraints"}, {"score": 0.004681076799813777, "phrase": "auckland_layout_model"}, {"score": 0.004387061665897055, "phrase": "graphical_user_interface"}, {"score": 0.004301283029085706, "phrase": "layout_managers"}, {"score": 0.004253018585673207, "phrase": "adjustable_tables"}, {"score": 0.00421717448686134, "phrase": "adjacent_table_cells"}, {"score": 0.004053839332787437, "phrase": "table_cells"}, {"score": 0.004031025863509595, "phrase": "vertical_and_horizontal_tabulators"}, {"score": 0.003952181032417829, "phrase": "lowest_level"}, {"score": 0.0038748723665440027, "phrase": "linear_constraints"}, {"score": 0.0038313742407700144, "phrase": "optimal_layout"}, {"score": 0.003788362554541234, "phrase": "linear_programming"}, {"score": 0.0037458319094677353, "phrase": "bare_linear_programming"}, {"score": 0.003724745306512945, "phrase": "layout_specification"}, {"score": 0.0036518692027382353, "phrase": "gui_domain_experts"}, {"score": 0.0033552975070941416, "phrase": "common_gui_layout"}, {"score": 0.0032803494445914944, "phrase": "user_interfaces"}, {"score": 0.003144290575504966, "phrase": "soft_constraints"}, {"score": 0.0030138579483664917, "phrase": "objective_function"}, {"score": 0.0029548493827229088, "phrase": "rectangular_areas"}, {"score": 0.0028563595473206555, "phrase": "dynamic_resizing_behavior"}, {"score": 0.0027767900889698713, "phrase": "domain-specific_parameters"}, {"score": 0.0026690928516336153, "phrase": "third_level"}, {"score": 0.0025947264971912616, "phrase": "tabular_fashion"}, {"score": 0.002515308398127586, "phrase": "additional_parameters"}, {"score": 0.0024590770730682377, "phrase": "column_definitions"}, {"score": 0.0024040998053958375, "phrase": "lower_levels"}, {"score": 0.00224007572741723, "phrase": "rich_set"}, {"score": 0.0021776365628787065, "phrase": "pure_linear_constraints"}, {"score": 0.0021653586946215227, "phrase": "incremental_computation"}, {"score": 0.0021049977753042253, "phrase": "real-time_use"}], "paper_keywords": ["Auckland Layout Model", " GUI", " Constraint"], "paper_abstract": "We present the Auckland Layout Model (ALM), a constraint-based technique for specifying 2D layout as it is used for arranging the controls in a graphical user interface (GUI). Most GUI frameworks offer layout managers that are basically adjustable tables; often adjacent table cells can be merged. In the ALM, the focus switches from the table cells to vertical and horizontal tabulators between the cells. On the lowest level of abstraction, the model applies linear constraints, and an optimal layout is calculated using linear programming. However, bare linear programming makes layout specification cumbersome and unintuitive, especially for GUI domain experts who are often not used to such mathematical formalisms. In order to improve the usability of the model, ALM offers several other layers of abstraction that make it possible to define common GUI layout more easily. In the domain of user interfaces it is important that specifications are not over-constrained, therefore ALM introduces soft constraints, which are automatically translated to appropriate hard linear constraints and terms in the objective function. GUIs are usually composed of rectangular areas containing controls, therefore ALM offers an abstraction for such areas. Dynamic resizing behavior is very important for GUIs, hence areas have domain-specific parameters specifying their minimum, maximum and preferred sizes. From such definitions, hard and soft constraints are automatically derived. A third level of abstraction allows designers to arrange GUIs in a tabular fashion, using abstractions for columns and rows, which offer additional parameters for ordering and alignment. Row and column definitions are used to automatically generate definitions from lower levels of abstraction, such as hard and soft constraints and areas. Specifications from all levels of abstraction can be consistently combined, offering GUI developers a rich set of tools that is much closer to their needs than pure linear constraints. Incremental computation of solutions makes constraint solving fast enough for near real-time use.", "paper_title": "Domain specific high-level constraints for user interface layout", "paper_id": "WOS:000257589200004"}