{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "safegen"}, {"score": 0.008210071736837, "phrase": "generated_program"}, {"score": 0.00468991337957911, "phrase": "meta-programming_language"}, {"score": 0.0046164478775379105, "phrase": "statically_safe_generators"}, {"score": 0.004568108391981922, "phrase": "java_programs"}, {"score": 0.004472935829694716, "phrase": "program_generator"}, {"score": 0.004265953661191515, "phrase": "safegen_compiler"}, {"score": 0.004089991141220082, "phrase": "well-formed_java_programs"}, {"score": 0.0040047396607954325, "phrase": "generator_input"}, {"score": 0.003623352647973122, "phrase": "static_checks"}, {"score": 0.003529149828147388, "phrase": "conventional_compiler"}, {"score": 0.0034738037330064885, "phrase": "type_safety"}, {"score": 0.0030772505522663612, "phrase": "existing_well-formed_java_program"}, {"score": 0.002997203022420553, "phrase": "program_fragments"}, {"score": 0.002828331235643921, "phrase": "conditional_actions"}, {"score": 0.002783945062714816, "phrase": "name_generation"}, {"score": 0.0027547408718334603, "phrase": "safegen's_static_checking_algorithm"}, {"score": 0.0026830601040919166, "phrase": "traditional_type_checking"}, {"score": 0.002654960263447658, "phrase": "java"}, {"score": 0.0025318431634446426, "phrase": "theorem_prover"}, {"score": 0.0024529757621396717, "phrase": "first-order_logical_sentences"}, {"score": 0.0023891283748647416, "phrase": "well-formedness_properties"}, {"score": 0.0021498955164659145, "phrase": "correct_generators"}, {"score": 0.0021049977753042253, "phrase": "interesting_bugs"}], "paper_keywords": ["Meta-programming", " Domain-specific languages", " Language extensions"], "paper_abstract": "SafeGen is a meta-programming language for writing statically safe generators of Java programs. If a program generator written in SafeGen passes the checks of the SafeGen compiler, then the generator will only generate well-formed Java programs, for any generator input. In other words, statically checking the generator guarantees the correctness of any generated program, with respect to static checks commonly performed by a conventional compiler (including type safety, existence of a superclass, etc.). To achieve this guarantee, SafeGen supports only language primitives for reflection over an existing well-formed Java program, primitives for creating program fragments, and a restricted set of constructs for iteration, conditional actions, and name generation. SafeGen's static checking algorithm is a combination of traditional type checking for Java, and a series of calls to a theorem prover to check the validity of first-order logical sentences, constructed to represent well-formedness properties of the generated program under all inputs. The approach has worked quite well in our tests, providing proofs for correct generators or pointing out interesting bugs. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Statically safe program generation with SafeGen", "paper_id": "WOS:000289387000003"}