{"auto_keywords": [{"score": 0.046435727262902265, "phrase": "jvm"}, {"score": 0.004814951205790273, "phrase": "jvm."}, {"score": 0.004642604455537883, "phrase": "software_ageing_analysis"}, {"score": 0.004586531354697466, "phrase": "java-based_software_systems"}, {"score": 0.00436890075128947, "phrase": "core_layer"}, {"score": 0.0043161190928529755, "phrase": "java-based_systems"}, {"score": 0.004136333933790974, "phrase": "overall_system_quality"}, {"score": 0.004012500850311087, "phrase": "experimental_campaign"}, {"score": 0.003939980614608312, "phrase": "real-world_test_bed"}, {"score": 0.0036627245728600073, "phrase": "overall_ageing_trend"}, {"score": 0.003531474887552889, "phrase": "statistical_methods"}, {"score": 0.0034676182423067307, "phrase": "workload_parameters"}, {"score": 0.0033433365160336842, "phrase": "ageing_dynamics"}, {"score": 0.0028890603352364273, "phrase": "just-in-time-compiler_activity"}, {"score": 0.002685558057339722, "phrase": "outlined_procedure"}, {"score": 0.0024511688853030168, "phrase": "ageing_phenomena"}, {"score": 0.0023632309822037637, "phrase": "online_ageing_detection"}, {"score": 0.002278440725193305, "phrase": "exhaustion_prediction"}, {"score": 0.0021966859554037174, "phrase": "optimal_rejuvenation_techniques"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software ageing", " software reliability evaluation", " workload characterization", " JVM"], "paper_abstract": "In this work, a software ageing analysis of Java-based software systems is conducted. The JVM is the core layer in Java-based systems, and its dependability greatly affects the overall system quality. Starting from an experimental campaign on a real-world test bed, this work isolates the contribution of the JVM to the overall ageing trend, and identifies, through statistical methods, which workload parameters are the most relevant to ageing dynamics. Results revealed the presence of several ageing dynamics in the JVM, including (i) a throughput loss trend mainly dependent on the execution unit, (ii) a slow memory depletion drift due to the just-in-time-compiler activity and (iii) a fast memory depletion drift caused by dynamics inside the garbage collector. The outlined procedure and obtained results are useful in order to (i) identify the presence of ageing phenomena, (ii) perform online ageing detection and time-to-exhaustion prediction and (iii) define optimal rejuvenation techniques. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "A measurement-based ageing analysis of the JVM", "paper_id": "WOS:000317938400003"}