{"auto_keywords": [{"score": 0.03397371904693441, "phrase": "new_join_points"}, {"score": 0.00481495049065317, "phrase": "pointcut_expressions"}, {"score": 0.004766090327062509, "phrase": "evolving_aspect-oriented_software"}, {"score": 0.004622450915803531, "phrase": "well-documented_problem"}, {"score": 0.00457553517865013, "phrase": "aspect-oriented_programming"}, {"score": 0.004460309246062286, "phrase": "base_code"}, {"score": 0.003946195919158241, "phrase": "automated_approach"}, {"score": 0.0038862297330905836, "phrase": "fragility_problems"}, {"score": 0.0038271712887391015, "phrase": "mechanical_assistance"}, {"score": 0.003788296551609616, "phrase": "pointcut_maintenance"}, {"score": 0.003636692152882991, "phrase": "arbitrarily_deep_structural_commonalities"}, {"score": 0.0033857878144822906, "phrase": "extracted_patterns"}, {"score": 0.0033004240095380623, "phrase": "later_versions"}, {"score": 0.002875200380397413, "phrase": "join_points"}, {"score": 0.0028170314398963704, "phrase": "single_pointcut"}, {"score": 0.0027600360731762997, "phrase": "significant_amount"}, {"score": 0.002731971103291716, "phrase": "unique_structural_commonality"}, {"score": 0.002466510117718297, "phrase": "multiple_versions"}, {"score": 0.0021817065300196634, "phrase": "subsequent_software_versions"}, {"score": 0.0021049977753042253, "phrase": "original_pointcuts"}], "paper_keywords": ["Software development environments", " software maintenance", " software tools"], "paper_abstract": "Pointcut fragility is a well-documented problem in Aspect-Oriented Programming; changes to the base code can lead to join points incorrectly falling in or out of the scope of pointcuts. In this paper, we present an automated approach that limits fragility problems by providing mechanical assistance in pointcut maintenance. The approach is based on harnessing arbitrarily deep structural commonalities between program elements corresponding to join points selected by a pointcut. The extracted patterns are then applied to later versions to offer suggestions of new join points that may require inclusion. To illustrate that the motivation behind our proposal is well founded, we first empirically establish that join points captured by a single pointcut typically portray a significant amount of unique structural commonality by analyzing patterns extracted from 23 AspectJ programs. Then, we demonstrate the usefulness of our technique by rejuvenating pointcuts in multiple versions of three of these programs. The results show that our parameterized heuristic algorithm was able to accurately and automatically infer the majority of new join points in subsequent software versions that were not captured by the original pointcuts.", "paper_title": "Pointcut Rejuvenation: Recovering Pointcut Expressions in Evolving Aspect-Oriented Software", "paper_id": "WOS:000304414400010"}