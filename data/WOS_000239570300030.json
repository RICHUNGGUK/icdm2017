{"auto_keywords": [{"score": 0.02834254196011163, "phrase": "code_size_reduction"}, {"score": 0.00481495049065317, "phrase": "code_size"}, {"score": 0.004741845603430361, "phrase": "embedded_real-time_applications"}, {"score": 0.004529093447865156, "phrase": "efficient_technique"}, {"score": 0.004460309246062286, "phrase": "code_compression"}, {"score": 0.0034911335714333507, "phrase": "operation_part"}, {"score": 0.0031121406603482112, "phrase": "run-time_overhead"}, {"score": 0.0029951555610569225, "phrase": "instruction_prefetching_mechanism"}, {"score": 0.0027529929913806066, "phrase": "optimization_techniques"}, {"score": 0.002472822097373027, "phrase": "experimental_results"}, {"score": 0.0022211005680689666, "phrase": "low_overhead"}, {"score": 0.0021049977753042253, "phrase": "run_time"}], "paper_keywords": [""], "paper_abstract": "This paper presents an efficient technique for code compression. In our work, a sequence of instructions that occurs repeatedly in an application will be compressed to reduce its code size. During compression, each instruction is first divided into the operation part and the register part, and then only the operation part is compressed. For reducing the run-time overhead, we propose an instruction prefetching mechanism to speed the decompression. Moreover, we devise some optimization techniques to improve the code size reduction and the performance, and show their impacts. The experimental results show that our work can achieve a code size reduction of 33% on average and a low overhead in the process of decompression at run time for these benchmarks.", "paper_title": "Optimizing code size for embedded real-time applications", "paper_id": "WOS:000239570300030"}