{"auto_keywords": [{"score": 0.04921771032829598, "phrase": "quality_attributes"}, {"score": 0.0401018006404259, "phrase": "design_time"}, {"score": 0.03438826262822822, "phrase": "different_quality_attributes"}, {"score": 0.00481495049065317, "phrase": "adaptive_architectures"}, {"score": 0.004685575787741084, "phrase": "e.g._performance"}, {"score": 0.004417012437860011, "phrase": "software_systems"}, {"score": 0.004317848984770719, "phrase": "critical_issues"}, {"score": 0.004278807087784626, "phrase": "quality_assurance"}, {"score": 0.0041827333568982055, "phrase": "good_enough_tradeoffs"}, {"score": 0.003996983218174335, "phrase": "architecture-based_quality_design"}, {"score": 0.0036998728605395384, "phrase": "runtime_contexts"}, {"score": 0.0033175095965171674, "phrase": "adaptive_architecture_model"}, {"score": 0.003287482882222731, "phrase": "capture_candidate_strategies"}, {"score": 0.002816556934231128, "phrase": "existing_architecture-based_quality_design_and_analysis_methods"}, {"score": 0.0026307897899760383, "phrase": "traditional_architecture_description_language"}, {"score": 0.002525248554951453, "phrase": "adaptive_architecture"}, {"score": 0.0024349853033241663, "phrase": "different_conditions"}, {"score": 0.0023802126605244438, "phrase": "reflective_middleware"}, {"score": 0.002316105585203396, "phrase": "runtime_system"}, {"score": 0.0022847009758393405, "phrase": "required_information"}, {"score": 0.0022537212268979507, "phrase": "appropriate_strategies"}, {"score": 0.002203016940021265, "phrase": "application's_architecture"}, {"score": 0.0021731423856364003, "phrase": "expected_quality_attributes"}], "paper_keywords": ["Quality attribute tradeoff", " Software architecture", " Quality attribute scenario", " Adaptive architecture", " Reflective middleware"], "paper_abstract": "Quality attributes, e.g. performance and reliability, become more and more important for the development of software systems. One of the critical issues on quality assurance is how to make good enough tradeoffs between quality attributes that interfere with each other. Some architecture-based quality design and analysis methods are proposed to make tradeoffs at design time. However, many quality attributes depend on runtime contexts; it may be difficult and even impossible to make tradeoffs between them at design time. In this paper, we use an adaptive architecture model to Capture candidate strategies for different quality attributes; the tradeoff, i.e. which strategies are more appropriate and thus applied, is postponed to runtime. The contribution of our approach is threefold. First, it makes use of existing architecture-based quality design and analysis methods to identify why and where quality attribute tradeoffs are necessary. Second, a traditional architecture description language is extended to support the modeling of an adaptive architecture, which records strategies for different quality attributes under different conditions. Third, a reflective middleware is used to monitor the runtime system, collect required information to determine appropriate strategies, and adapt the application's architecture to achieve expected quality attributes. This approach is demonstrated on J2EE. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Quality attribute tradeoff through adaptive architectures at runtime", "paper_id": "WOS:000263426900011"}