{"auto_keywords": [{"score": 0.03241918703002573, "phrase": "pnp"}, {"score": 0.00481495049065317, "phrase": "\"pipe_'n_prune"}, {"score": 0.004553822674247401, "phrase": "iceberg-cube_query_computation"}, {"score": 0.004306795240631196, "phrase": "tight_integration"}, {"score": 0.004263336444795021, "phrase": "top-down_piping"}, {"score": 0.004073113268289532, "phrase": "priori_data_pruning"}, {"score": 0.004011603024990615, "phrase": "particular_strength"}, {"score": 0.0035158719842941027, "phrase": "external"}, {"score": 0.0032251796659158696, "phrase": "shared-nothing_pc_clusters"}, {"score": 0.00309681702203087, "phrase": "extensive_performance_analysis"}, {"score": 0.0029137604783116065, "phrase": "first_scenario"}, {"score": 0.0027276072007925475, "phrase": "buc"}, {"score": 0.0027000395818027366, "phrase": "star-cubing"}, {"score": 0.0026457367614424756, "phrase": "second_scenario"}, {"score": 0.002592523232809191, "phrase": "surprisingly_efficient_handling"}, {"score": 0.0025146979283050923, "phrase": "external_memory"}, {"score": 0.002426842369975213, "phrase": "full_in-memory_computation"}, {"score": 0.002294929467537814, "phrase": "linear_speedup"}, {"score": 0.002260211578368138, "phrase": "larger_number"}, {"score": 0.002181227522730908, "phrase": "scalability_problem"}, {"score": 0.0021373366163721518, "phrase": "parallel_iceberg-cubes"}, {"score": 0.0021049977753042253, "phrase": "ng_et_al"}], "paper_keywords": ["Pipe 'n Prune (PnP)", " iceberg cube query", " data cube", " parallel computing", " OLAP"], "paper_abstract": "We present \"Pipe 'n Prune\" (PnP), a new hybrid method for iceberg-cube query computation. The novelty of our method is that it achieves a tight integration of top-down piping for data aggregation with bottom-up a priori data pruning. A particular strength of PnP is that it is efficient for all of the following scenarios: (1) Sequential iceberg-cube queries, (2) External memory iceberg-cube queries, and (3) Parallel iceberg-cube queries on shared-nothing PC clusters with multiple disks. We performed an extensive performance analysis of PnP for the above scenarios with the following main results: In the first scenario PnP performs very well for both dense and sparse data sets, providing an interesting alternative to BUC and Star-Cubing. In the second scenario PnP shows a surprisingly efficient handling of disk I/O, with an external memory running time that is less than twice the running time for full in-memory computation of the same iceberg-cube query. In the third scenario PnP scales very well, providing near linear speedup for a larger number of processors and thereby solving the scalability problem observed for the parallel iceberg-cubes proposed by Ng et al.", "paper_title": "PnP: sequential, external memory, and parallel iceberg cube computation", "paper_id": "WOS:000253212800001"}