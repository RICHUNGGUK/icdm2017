{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "t-trees_cache_conscious"}, {"score": 0.004618166136069052, "phrase": "recent_research"}, {"score": 0.004466519142879166, "phrase": "database_performance"}, {"score": 0.00421297029755273, "phrase": "effective_cache_utilization"}, {"score": 0.004108742905942481, "phrase": "conventional_microprocessors"}, {"score": 0.003940706575253453, "phrase": "existing_index_structures"}, {"score": 0.0037795163893761027, "phrase": "cpu_cache_performance"}, {"score": 0.0037168948492715386, "phrase": "main_memory_database_environments"}, {"score": 0.002966084234963723, "phrase": "main_memory_index_structure"}, {"score": 0.0027054473441439422, "phrase": "cache_sensitive_t-tree"}, {"score": 0.0022507188208913394, "phrase": "experimental_performance_study"}], "paper_keywords": ["main memory", " index structure", " cache", " CST-tree", " microprocessor", " T-tree"], "paper_abstract": "Recent research shows that the database performance can be significantly improved by the effective cache utilization of the conventional microprocessors. Researchers have modified existing index structures into ones optimized for CPU cache performance in main memory database environments. A Cache Sensitive B+-Tree is designed to minimize the impact of cache misses for B+-Trees and it has been known to be more effective than other types of main memory index structure including T-Trees. In this paper, we introduce a Cache Sensitive T-Tree (CST-Tree) and show how T-Trees can also be redesigned to be cache sensitive. We present an experimental performance study which shows that our Cache Sensitive T-Trees can outperform the original T-Trees and Cache Sensitive B+-Trees on commodity microprocessors.", "paper_title": "Making T-Trees Cache Conscious on Commodity Microprocessors", "paper_id": "WOS:000286692500011"}