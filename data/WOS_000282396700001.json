{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "regular_expressions"}, {"score": 0.03610310423475187, "phrase": "state-explosion_problem"}, {"score": 0.00476323161560059, "phrase": "intrusion_detection_systems"}, {"score": 0.004586531354697466, "phrase": "security_threats'_signatures"}, {"score": 0.004537254814246843, "phrase": "network_intrusion_detection"}, {"score": 0.004488513303763406, "phrase": "nid"}, {"score": 0.004345363360869553, "phrase": "suspicious_packets"}, {"score": 0.004298666679374568, "phrase": "regular_expression_matching"}, {"score": 0.004206767038617782, "phrase": "memory-based_deterministic_finite-state_automata"}, {"score": 0.004094639048362357, "phrase": "one-pass-scanning_model"}, {"score": 0.00394264312173188, "phrase": "dynamic_updates"}, {"score": 0.003796267885124202, "phrase": "practical_signature_patterns"}, {"score": 0.0036553070575015344, "phrase": "nid_systems"}, {"score": 0.0032278559855285975, "phrase": "two-phase_pattern"}, {"score": 0.0029763124376934813, "phrase": "state_storage_cost"}, {"score": 0.0027001292153471202, "phrase": "new_approach"}, {"score": 0.0025717770066591076, "phrase": "practical_patterns"}, {"score": 0.0024628046987344846, "phrase": "memory-based_dfa."}, {"score": 0.0023970487263732737, "phrase": "tpme"}, {"score": 0.00235843888868088, "phrase": "field_programmable_gate_array"}, {"score": 0.0021394674440767124, "phrase": "pattern_matching"}, {"score": 0.0021049977753042253, "phrase": "practical_nid_system"}], "paper_keywords": ["network intrusion detection", " pattern matching", " regular expressions", " deterministic finite-state automata", " two-phase matching engine"], "paper_abstract": "Regular expressions are used to describe security threats' signatures in network intrusion detection (NID) systems. To identify suspicious packets using regular expression matching, many NID systems use memory-based deterministic finite-state automata (DFA) with one-pass-scanning model, which is fast and allows dynamic updates. However, a number of practical signature patterns commonly found in a variety of NID systems, e.g.,\". (star)A. {N} B\", can cause a state-explosion problem in such a model. In this paper, we propose a two-phase pattern matching engine (TPME) to solve this problem. In our proposed approach, the state storage cost is reduced to linearly dependent on the number of repetitions N in the patterns. With the new approach, we are now able to handle those practical patterns that would have caused the state-explosion problem in memory-based DFA. We report our implementation of TPME on a field programmable gate array (FPGA). With our prototype implementation, we can achieve a throughput of more than 1.86 gigabits per second for pattern matching in a practical NID system.", "paper_title": "Two-phase Pattern Matching for Regular Expressions in Intrusion Detection Systems", "paper_id": "WOS:000282396700001"}