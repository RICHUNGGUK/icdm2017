{"auto_keywords": [{"score": 0.04947447224326206, "phrase": "javascript"}, {"score": 0.00481495049065317, "phrase": "semi-automatic_rename_refactoring"}, {"score": 0.004694092086199672, "phrase": "modern_ides"}, {"score": 0.0040298010803060495, "phrase": "fundamental_refactorings"}, {"score": 0.0038789122930433305, "phrase": "practical_alternative"}, {"score": 0.003829877278269543, "phrase": "simple_syntactic_search"}, {"score": 0.003459191419478298, "phrase": "whole-program_assumptions"}, {"score": 0.003245900020944865, "phrase": "semi-automatic_refactoring"}, {"score": 0.003026391655379905, "phrase": "traditional_refactoring_algorithms"}, {"score": 0.002821685815956478, "phrase": "static_analysis"}, {"score": 0.002664513608074113, "phrase": "pragmatic_approach"}, {"score": 0.002548331088496964, "phrase": "effective_refactoring_support"}, {"score": 0.0025160740422447837, "phrase": "real-world_code"}, {"score": 0.0024372021710656585, "phrase": "incomplete_applications"}, {"score": 0.0021049977753042253, "phrase": "useful_improvement"}], "paper_keywords": ["Languages", " Refactoring", " Dynamic Programming Languages", " Program Analysis"], "paper_abstract": "Modern IDEs support automated refactoring for many programming languages, but support for JavaScript is still primitive. To perform renaming, which is one of the fundamental refactorings, there is often no practical alternative to simple syntactic search-and-replace. Although more sophisticated alternatives have been developed, they are limited by whole-program assumptions and poor scalability. We propose a technique for semi-automatic refactoring for JavaScript, with a focus on renaming. Unlike traditional refactoring algorithms, semi-automatic refactoring works by a combination of static analysis and interaction with the programmer. With this pragmatic approach, we can provide scalable and effective refactoring support for real-world code, including libraries and incomplete applications. Through a series of experiments that estimate how much manual effort our technique demands from the programmer, we show that our approach is a useful improvement compared to search-and-replace tools.", "paper_title": "Semi-Automatic Rename Refactoring for JavaScript", "paper_id": "WOS:000327697300018"}