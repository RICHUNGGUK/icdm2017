{"auto_keywords": [{"score": 0.03609331121775906, "phrase": "domain_permutations"}, {"score": 0.006586030484478308, "phrase": "tractable_language"}, {"score": 0.0048161201384789515, "phrase": "domain"}, {"score": 0.004769313572444002, "phrase": "constraint_satisfaction_problems"}, {"score": 0.0046793272171911215, "phrase": "constraint_satisfaction_problem"}, {"score": 0.0045475066042750135, "phrase": "general_csp"}, {"score": 0.00453317628673452, "phrase": "domain_size"}, {"score": 0.00452626719874797, "phrase": "np"}, {"score": 0.00442992128941259, "phrase": "significant_success"}, {"score": 0.004405454645984481, "phrase": "simple_proof"}, {"score": 0.004223831484770622, "phrase": "tractable_subproblem"}, {"score": 0.00414409430952873, "phrase": "constraint_relations"}, {"score": 0.004017706312136239, "phrase": "new_way"}, {"score": 0.003989089382881299, "phrase": "tractable_subproblems"}, {"score": 0.003960675472956795, "phrase": "csp_let_p"}, {"score": 0.003932463153573191, "phrase": "arbitrary_csp_instance"}, {"score": 0.0036524039885776852, "phrase": "domain_permuted_instance"}, {"score": 0.0035919674238138605, "phrase": "tractable_class"}, {"score": 0.00353252736114556, "phrase": "polynomial_time_algorithm"}, {"score": 0.0032188633922738906, "phrase": "method's_tractability"}, {"score": 0.0031807119319674977, "phrase": "important_contributions"}, {"score": 0.003105756008031797, "phrase": "\"lifted_constraint_instance"}, {"score": 0.0030689410213372817, "phrase": "powerful_tool"}, {"score": 0.0030037669848015885, "phrase": "open_problem"}, {"score": 0.002891290813406762, "phrase": "bounded_arity_instances"}, {"score": 0.002870673882652362, "phrase": "boolean_domain"}, {"score": 0.00276976750429457, "phrase": "binary_instances"}, {"score": 0.002634413681446531, "phrase": "published_result"}, {"score": 0.0025116441559424408, "phrase": "connected_row_convex"}, {"score": 0.002481854114896341, "phrase": "triangulated_and_stable_marriage_instances"}, {"score": 0.002434921446474405, "phrase": "max-closed_instances"}, {"score": 0.002406039201078674, "phrase": "simple_explanation"}, {"score": 0.002394582226465989, "phrase": "arc_consistency"}, {"score": 0.00234369564619164, "phrase": "simple_direct_proof"}, {"score": 0.002310372057903139, "phrase": "renamable_horn_instances"}, {"score": 0.002266674802326747, "phrase": "largest_renamable_horn_subset"}, {"score": 0.0022291191437830253, "phrase": "sat."}, {"score": 0.0022132110419604534, "phrase": "natural_tractable_classes"}, {"score": 0.00218695288778402, "phrase": "maximal_relational_classes"}, {"score": 0.00217134744324415, "phrase": "tractable_constraint_languages"}, {"score": 0.0021455849024636696, "phrase": "domain_permutation_reductions"}, {"score": 0.0021302740173347627, "phrase": "significant_chance"}, {"score": 0.0021049977753042253, "phrase": "practical_applications"}], "paper_keywords": ["complexity", " constraint satisfaction problem", " CSP", " NP-completeness", " renamable horn", " stable marriage", " tractability"], "paper_abstract": "This paper is concerned with the Constraint Satisfaction Problem (CSP). It is well-known that the general CSP is NP-hard. However, there has been significant success in discovering subproblems which are tractable (polynomial time solvable). One of the most effective ways to obtain a tractable subproblem has been to force all of the constraint relations to lie in some tractable language. In this paper we define a new way of identifying tractable subproblems of the CSP Let P be an arbitrary CSP instance and Gamma be any tractable language. Suppose there exists, for each variable of P, a permutation of the domain such the resultant permuted constraint relations of P all lie in Gamma. The domain permuted instance is then an instance of a tractable class and can be solved by the polynomial time algorithm for Gamma. Solutions to P can be obtained by inverting the domain permutations. The question, for a given class of instances and language , whether such a set of domain permutations can be found efficiently is the key to this method's tractability. One of the important contributions made in this paper is the notion of a \"lifted constraint instance\" which is a powerful tool to study this question. We consider the open problem of discovering domain permutations which make instances max-closed. We show that, for bounded arity instances over a Boolean domain this problem is tractable, while for domain size three it is intractable even for binary instances. We give a simple proof verifying the tractability of discovering domain permutations which make instances row convex. We refute a published result by giving a simple proof of the intractability of discovering domain permutations which make instances, even with domain size four, connected row convex. We demonstrate that triangulated and stable marriage instances are reducible, via domain permutations, to max-closed instances. This provides a simple explanation for arc consistency deciding these instances. We verify with a simple direct proof the tractability of identification of renamable Horn instances, and the intractability of finding the largest renamable Horn subset of clauses of an instance of SAT. We describe natural tractable classes which properly extend the maximal relational classes arising from tractable constraint languages. We believe that domain permutation reductions have a significant chance of being useful in practical applications. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Domain permutation reduction for constraint satisfaction problems", "paper_id": "WOS:000255455200008"}