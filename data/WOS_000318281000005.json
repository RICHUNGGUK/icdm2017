{"auto_keywords": [{"score": 0.04950097558699651, "phrase": "modelica"}, {"score": 0.015719713042815744, "phrase": "uml_state_machines"}, {"score": 0.015072108954930954, "phrase": "modelicaml"}, {"score": 0.004670896353428476, "phrase": "semantic_issues"}, {"score": 0.00453113241842654, "phrase": "uml_profile"}, {"score": 0.004086350434865782, "phrase": "omg_uml"}, {"score": 0.004061584718427419, "phrase": "standardized_graphical_notation"}, {"score": 0.003964007795174772, "phrase": "software_modeling"}, {"score": 0.00386876598761639, "phrase": "simulation_power"}, {"score": 0.0037075456471849892, "phrase": "increasing_need"}, {"score": 0.0036627245728600073, "phrase": "precise_and_integrated_modeling"}, {"score": 0.0033433365160336842, "phrase": "executable_uml_state_machines"}, {"score": 0.003089080923888397, "phrase": "state-based_dynamic_behavior"}, {"score": 0.002735052488172277, "phrase": "action_language"}, {"score": 0.002685558057339722, "phrase": "integrated_simulation"}, {"score": 0.002348883765159185, "phrase": "uml_specification"}, {"score": 0.002278440725193305, "phrase": "typical_executable_implementations"}, {"score": 0.0021049977753042253, "phrase": "taken_design_decisions"}], "paper_keywords": ["UML", " Modelica", " ModelicaML", " execution semantics", " state machine", " statechart"], "paper_abstract": "ModelicaML is a UML profile that enables modeling and simulation of systems and their dynamic behavior. ModelicaML combines the power of the OMG UML standardized graphical notation for systems and software modeling, and the simulation power of Modelica. This addresses the increasing need for precise and integrated modeling of products containing both software and hardware. This article discusses the usage of executable UML state machines for system modeling, i.e. usage of the same formalism for describing the state-based dynamic behavior of physical system components and software. Moreover, it points out that the usage of Modelica as an action language enables an integrated simulation of continuous-time and reactive/event-based system dynamics. The main purpose of this article is however to highlight issues that are identified regarding the UML specification which are experienced with typical executable implementations of UML state machines. The issues identified are resolved and rationales for the taken design decisions are provided.", "paper_title": "Translation of UML state machines to Modelica: Handling semantic issues", "paper_id": "WOS:000318281000005"}