{"auto_keywords": [{"score": 0.048522326887293465, "phrase": "parallel_evolutionary_algorithms"}, {"score": 0.00481495049065317, "phrase": "general_upper_bounds"}, {"score": 0.004506968388996092, "phrase": "general_method"}, {"score": 0.004274766964161756, "phrase": "spatially_structured_populations"}, {"score": 0.0041357305373417455, "phrase": "fitness-level_method"}, {"score": 0.004027751272984522, "phrase": "upper_bounds"}, {"score": 0.003948613642680196, "phrase": "expected_parallel_runtime"}, {"score": 0.003794954883650141, "phrase": "rigorous_estimate"}, {"score": 0.0035993041437026225, "phrase": "tailored_results"}, {"score": 0.0035052810710060893, "phrase": "common_migration_topologies"}, {"score": 0.0031739835218110015, "phrase": "example_applications"}, {"score": 0.003132236287543072, "phrase": "pseudo-boolean_optimization"}, {"score": 0.0028930017387859804, "phrase": "powerful_results"}, {"score": 0.002798780784517325, "phrase": "performance_guarantees"}, {"score": 0.002602127996667857, "phrase": "even_sparse_topologies"}, {"score": 0.0025509294021449254, "phrase": "ring_graphs"}, {"score": 0.0024842242921857705, "phrase": "significant_speedup"}, {"score": 0.0023716501597131024, "phrase": "total_number"}, {"score": 0.00234043119560776, "phrase": "function_evaluations"}, {"score": 0.0022641658133181115, "phrase": "constant_factor"}, {"score": 0.0021049977753042253, "phrase": "best_guaranteed_speedups"}], "paper_keywords": ["Parallel evolutionary algorithms", " runtime analysis", " island model", " spatial structures"], "paper_abstract": "We present a general method for analyzing the runtime of parallel evolutionary algorithms with spatially structured populations. Based on the fitness-level method, it yields upper bounds on the expected parallel runtime. This allows for a rigorous estimate of the speedup gained by parallelization. Tailored results are given for common migration topologies: ring graphs, torus graphs, hypercubes, and the complete graph. Example applications for pseudo-Boolean optimization show that our method is easy to apply and that it gives powerful results. In our examples the performance guarantees improve with the density of the topology. Surprisingly, even sparse topologies such as ring graphs lead to a significant speedup for many functions while not increasing the total number of function evaluations by more than a constant factor. We also identify which number of processors lead to the best guaranteed speedups, thus giving hints on how to parameterize parallel evolutionary algorithms.", "paper_title": "General Upper Bounds on the Runtime of Parallel Evolutionary Algorithms", "paper_id": "WOS:000340812100002"}