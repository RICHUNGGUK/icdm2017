{"auto_keywords": [{"score": 0.04453527007923276, "phrase": "web_pages"}, {"score": 0.036808897044971645, "phrase": "xss_vulnerabilities"}, {"score": 0.027269935036491222, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "cross_site_scripting_vulnerabilities"}, {"score": 0.0045557008859819234, "phrase": "top_web_application_vulnerabilities"}, {"score": 0.00450198136261303, "phrase": "recent_surveys"}, {"score": 0.0043790755286923794, "phrase": "web_application"}, {"score": 0.004062057297453209, "phrase": "malicious_scripts"}, {"score": 0.003904495523681369, "phrase": "malicious_actions"}, {"score": 0.003812896124654341, "phrase": "exploited_web_pages"}, {"score": 0.003738200814271716, "phrase": "serious_security_violations"}, {"score": 0.0036940852452587093, "phrase": "account_hijacking"}, {"score": 0.003664963414801933, "phrase": "cookie_theft"}, {"score": 0.003636070324571016, "phrase": "current_approaches"}, {"score": 0.003522749900725601, "phrase": "effective_detection"}, {"score": 0.003399466007862412, "phrase": "real_time_xss_attacks"}, {"score": 0.0029949359231919307, "phrase": "web_applications"}, {"score": 0.0029246121262946384, "phrase": "static_analysis_and_pattern_matching_techniques"}, {"score": 0.002867268370615848, "phrase": "potential_xss_vulnerabilities"}, {"score": 0.0028446460307503343, "phrase": "program_source_code"}, {"score": 0.002788865808981643, "phrase": "appropriate_escaping_mechanisms"}, {"score": 0.0027559226203857316, "phrase": "input_values"}, {"score": 0.0027126012542151015, "phrase": "script_execution"}, {"score": 0.002370748155770563, "phrase": "five_java-based_web_applications"}, {"score": 0.0022339335462778437, "phrase": "real-world_web_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Cross site scripting", " Injection vulnerability", " Character escaping", " Encoding", " Web security", " Automated bug fixing"], "paper_abstract": "Context: Cross site scripting (XSS) vulnerability is among the top web application vulnerabilities according to recent surveys. This vulnerability occurs when a web application uses inputs received from users in web pages without properly checking them. This allows an attacker to inject malicious scripts in web pages via such inputs such that the scripts perform malicious actions when a client visits the exploited web pages. Such an attack may cause serious security violations such as account hijacking and cookie theft. Current approaches to mitigate this problem mainly focus on effective detection of XSS vulnerabilities in the programs or prevention of real time XSS attacks. As more sophisticated attack vectors are being discovered, vulnerabilities if not removed could be exploited anytime. Objective: To address this issue, this paper presents an approach for removing XSS vulnerabilities in web applications. Method: Based on static analysis and pattern matching techniques, our approach identifies potential XSS vulnerabilities in program source code and secures them with appropriate escaping mechanisms which prevent input values from causing any script execution. Results: We developed a tool, saferXSS, to implement the proposed approach. Using the tool, we evaluated the applicability and effectiveness of the proposed approach based on the experiments on five Java-based web applications. Conclusion: Our evaluation has shown that the tool can be applied to real-world web applications and it automatically removed all the real XSS vulnerabilities in the test subjects. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Automated removal of cross site scripting vulnerabilities in web applications", "paper_id": "WOS:000301323000003"}