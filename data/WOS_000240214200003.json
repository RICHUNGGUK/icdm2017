{"auto_keywords": [{"score": 0.01357846847827987, "phrase": "vliw"}, {"score": 0.00481495049065317, "phrase": "vliw_architectures"}, {"score": 0.0046937237797352515, "phrase": "dynamic_programming_method"}, {"score": 0.004646088032529303, "phrase": "optimal_integrated_code_generation"}, {"score": 0.0043258453436258405, "phrase": "single-issue_pipelined_processors"}, {"score": 0.003866443402315402, "phrase": "multiple_register_sets"}, {"score": 0.003581412258960711, "phrase": "instruction_selection"}, {"score": 0.003545024951402821, "phrase": "instruction_scheduling"}, {"score": 0.00342054627009158, "phrase": "clustered_vliw_architectures"}, {"score": 0.0033173234105492895, "phrase": "optimal_partitioning"}, {"score": 0.0031845067058084613, "phrase": "temporary_variables"}, {"score": 0.0031042018721479385, "phrase": "data_transfer_operations"}, {"score": 0.0029196116767956273, "phrase": "retargetable_code_generation_framework"}, {"score": 0.002889928791032578, "phrase": "digital_signal_processors"}, {"score": 0.0028026735035370206, "phrase": "optimist."}, {"score": 0.0026091594819333654, "phrase": "single-cluster_variant"}, {"score": 0.002466510117718297, "phrase": "optimal_solutions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["instruction-level parallelism", " integrated code generation", " dynamic programming", " instruction scheduling", " instruction selection", " clustered VLIW architecture", " data partitioning"], "paper_abstract": "We present a dynamic programming method for optimal integrated code generation for basic blocks that minimizes execution time. It can be applied to single-issue pipelined processors, in-order-issue superscalar processors, VLIW architectures with a single homogeneous register set, and clustered VLIW architectures with multiple register sets. For the case of a single register set, our method simultaneously copes with instruction selection, instruction scheduling, and register allocation. For clustered VLIW architectures, we also integrate the optimal partitioning of instructions, allocation of registers for temporary variables, and scheduling of data transfer operations between clusters. Our method is implemented in the prototype of a retargetable code generation framework for digital signal processors (DSPs), called OPTIMIST. We present results for the processors ARM9E, TI C62x, and a single-cluster variant of C62x. Our results show that the method can produce optimal solutions for small and (in the case of a single register set) medium-sized problem instances with a reasonable amount of time and space. For larger problem instances, our method can be seamlessly changed into a heuristic. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Optimal integrated code generation for VLIW architectures", "paper_id": "WOS:000240214200003"}