{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_code_mutation"}, {"score": 0.004539005582217309, "phrase": "executable_programs"}, {"score": 0.004129873531628877, "phrase": "program_analyses"}, {"score": 0.003986103192038901, "phrase": "high_level_semantic_information"}, {"score": 0.003802135020791801, "phrase": "important_role"}, {"score": 0.003626626504149897, "phrase": "software_systems"}, {"score": 0.0034185505275141077, "phrase": "software_piracy"}, {"score": 0.0031845067058084613, "phrase": "novel_technique"}, {"score": 0.003073545175760353, "phrase": "reverse_engineering"}, {"score": 0.0027961342030212353, "phrase": "program_code"}, {"score": 0.0022070310530794097, "phrase": "least_secure_component"}, {"score": 0.002155412043665635, "phrase": "opaque_variables"}, {"score": 0.0021049977753042253, "phrase": "pseudorandom_number_generators"}], "paper_keywords": [""], "paper_abstract": "Reverse engineering of executable programs, by disassembling them and then using program analyses to recover high level semantic information, plays an important role in attacks against software systems, and can facilitate software piracy. This paper introduces a novel technique to complicate reverse engineering. The idea is to change the program code repeatedly as it executes, thereby thwarting correct disassembly. The technique can be made as secure as the least secure component of opaque variables and pseudorandom number generators.", "paper_title": "Software protection through dynamic code mutation", "paper_id": "WOS:000236882500015"}