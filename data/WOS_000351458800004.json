{"auto_keywords": [{"score": 0.040276156621459995, "phrase": "bbmvbt"}, {"score": 0.006924783869507082, "phrase": "data_items"}, {"score": 0.006797388397645764, "phrase": "emvdb"}, {"score": 0.005858596954054029, "phrase": "multi-version_index"}, {"score": 0.005499749118542996, "phrase": "version_block"}, {"score": 0.00481495049065317, "phrase": "block-based"}, {"score": 0.004761494044422926, "phrase": "flash-based_embedded_database_systems"}, {"score": 0.004350452340918096, "phrase": "version_blocks"}, {"score": 0.004258372598568333, "phrase": "embedded_multi-version_database"}, {"score": 0.004179824713643488, "phrase": "flash_memory"}, {"score": 0.004042056914551798, "phrase": "update_transactions"}, {"score": 0.004012061349250865, "phrase": "version-range_queries"}, {"score": 0.0039674831861175935, "phrase": "different_versions"}, {"score": 0.0036826452656927877, "phrase": "higher_level"}, {"score": 0.0035744997458371335, "phrase": "successive_versions"}, {"score": 0.00353476609156032, "phrase": "data_item"}, {"score": 0.003367611042980526, "phrase": "lower_level"}, {"score": 0.0033301694494391643, "phrase": "version_array"}, {"score": 0.0032444113660668743, "phrase": "specific_data_version"}, {"score": 0.003160854709666311, "phrase": "reduced_index_structure"}, {"score": 0.0030225753906647935, "phrase": "update_operations"}, {"score": 0.0027741761880779535, "phrase": "processing_version-range_queries"}, {"score": 0.0027331033178323145, "phrase": "sufficient_free_blocks"}, {"score": 0.0026826140171754675, "phrase": "efficient_execution"}, {"score": 0.0025461386232786356, "phrase": "garbage_collection"}, {"score": 0.0025178072071268534, "phrase": "purging-range_queries"}, {"score": 0.0024897902536499005, "phrase": "\"old\"_versions"}, {"score": 0.00241658945942583, "phrase": "index_nodes"}, {"score": 0.0023021895404322767, "phrase": "performance_studies"}, {"score": 0.0021049977753042253, "phrase": "mvbt"}], "paper_keywords": ["Embedded databases", " multi-version data", " real-time data", " flash memory", " index structure"], "paper_abstract": "In this paper, we propose a novel multi-version B+-tree index structure, called block-based multi-version B+-tree (BbMVBT), for indexing multi-versions of data items in an embedded multi-version database (EMVDB) on flash memory. An EMVDB needs to support streams of update transactions and version-range queries to access different versions of data items maintained in the database. In BbMVBT, the index is divided into two levels. At the higher level, a multi-version index is maintained for keeping successive versions of each data item. These versions are allocated consecutively in a version block. At the lower level, a version array is used to search for a specific data version within a version block. With the reduced index structure of BbMVBT, the overhead for managing the index in processing update operations can be greatly reduced. At the same time, BbMVBT can also greatly reduce the number of accesses to the index in processing version-range queries. To ensure sufficient free blocks for creating version blocks for efficient execution of BbMVBT, in this paper, we also discuss how to perform garbage collection using the purging-range queries for reclaiming \"old\" versions of data items and their associated entries in the index nodes. Analysis of the performance of BbMVBT is presented and verified with performance studies using both synthetic and real workloads. The performance results illustrate that BbMVBT can significantly improve the read and write performance to the multi-version index as compared with MVBT even though the sizes of the version blocks are not large.", "paper_title": "Block-Based Multi-Version B+-Tree for Flash-Based Embedded Database Systems", "paper_id": "WOS:000351458800004"}