{"auto_keywords": [{"score": 0.04960202571834177, "phrase": "parallel_independent_disks"}, {"score": 0.00481495049065317, "phrase": "randomized_cycling"}, {"score": 0.004625881588444304, "phrase": "external_memory"}, {"score": 0.004444203710097833, "phrase": "programming_task"}, {"score": 0.0037106898330901534, "phrase": "randomized_allocation_discipline"}, {"score": 0.003356675879109443, "phrase": "efficient_distribution_sort_algorithm"}, {"score": 0.00327356326590461, "phrase": "randomized_cycling_distribution_sort"}, {"score": 0.002976019715894587, "phrase": "novel_reduction"}, {"score": 0.002902304851882577, "phrase": "significantly_fewer_probabilistic_interdependencies"}, {"score": 0.0028446460307503343, "phrase": "rcd's_practicality"}, {"score": 0.002816246391862638, "phrase": "experimental_simulations"}, {"score": 0.0027602925235474317, "phrase": "randomized_cycling_discipline"}, {"score": 0.002678433668156676, "phrase": "unrealistic_multilread_disk_model"}, {"score": 0.0025989960809479104, "phrase": "realistic_parallel_disk_model"}, {"score": 0.002534596206835737, "phrase": "multipass_algorithms"}, {"score": 0.0024717881264735477, "phrase": "complete_pass"}, {"score": 0.0022582634725291225, "phrase": "well-known_distribution"}, {"score": 0.0022022878843247257, "phrase": "em_computation"}, {"score": 0.0021262403223013242, "phrase": "single_disk"}, {"score": 0.0021049977753042253, "phrase": "parallel_disks"}], "paper_keywords": ["algorithms", " design", " experimentation", " performance", " theory", " sorting", " external sorting", " distribution", " external memory", " input/output", " merging", " multiple disks", " multipass algorithms", " parallel disks", " randomization", " sorting"], "paper_abstract": "Parallel independent disks can enhance the performance of external memory (EM) algorithms, but the programming task is often difficult. Each disk can service only one read or write request at a time; the challenge is to keep the disks as busy as possible. In this article, we develop a randomized allocation discipline for parallel independent disks, called randomized cycling. We show how it can be used as the basis for an efficient distribution sort algorithm, which we call randomized cycling distribution sort (RCD). We prove that the expected I/O complexity of RCD is optimal. The analysis uses a novel reduction to a scenario with significantly fewer probabilistic interdependencies. We demonstrate RCD's practicality by experimental simulations. Using the randomized cycling discipline, algorithms developed for the unrealistic multilread disk model can be simulated on the realistic parallel disk model for the class of multipass algorithms, which make a complete pass through their data before accessing any element a second time. In particular, algorithms based upon the well-known distribution and merge paradigms of EM computation can be optimally extended from a single disk to parallel disks.", "paper_title": "Distribution sort with randomized cycling", "paper_id": "WOS:000241211400003"}