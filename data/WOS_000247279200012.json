{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "sum_selection_problem"}, {"score": 0.004652016085325825, "phrase": "real_numbers"}, {"score": 0.003901135641717704, "phrase": "feasible_segment"}, {"score": 0.003585986761045987, "phrase": "consecutive_subsequence"}, {"score": 0.0031967297437935772, "phrase": "computer_science"}, {"score": 0.003066924760122126, "phrase": "maximum"}, {"score": 0.0029158847555394714, "phrase": "total_number"}, {"score": 0.0028936226331006563, "phrase": "possible_feasible_segments"}, {"score": 0.0028278480051602355, "phrase": "randomized_algorithm"}, {"score": 0.0025694584194998356, "phrase": "k_maximum_sums_problem"}, {"score": 0.0025110337774260773, "phrase": "largest_sums"}, {"score": 0.0024073421672242486, "phrase": "previously_best_known_result"}, {"score": 0.0021539955106204354, "phrase": "worst_case"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["bioinformatics", " randomized algorithm", " random sampling", " order-statistic tree", " k maximum sums problem", " sum selection problem", " selection problem", " maximum sum segment problem", " maximum sum problem"], "paper_abstract": "Let A be a sequence of n real numbers a(1), a(2),., a(n). We consider the SUM SELECTION PROBLEM as that of finding the segment A(i*, j*) such that the rank of s(i*, j*) = Sigma(j*)(t=i) at over all possible feasible segments is k, where a feasible segment A (i, j) = a(i), a(i + 1),..., a(j) is a consecutive subsequence of A, and its width j - i + 1 satisfies l <= j - i + 1 <= u for some given integers t and it, and l <= u. It is a generalization of two well-known problems: the SELECTION PROBLEM in computer science for which e = it = 1, and the MAXIMUM SUM SEGMENT PROBLEM in bioinformatics for which the rank k is the total number of possible feasible segments. We will give a randomized algorithm for the Sum SELECTION PROBLEM that runs in expected O(n log(u - l)) time. It matches the optimal O(n) time randomized algorithm for the SELECTION PROBLEM. We can also solve the K MAXIMUM SUMS PROBLEM, to enumerate the k largest sums, in expected 0(n log(u - e) + k) time. The previously best known result was an algorithm that solves this problem for the case when f = 1, u = n and runs in O(n log(2) n + k) time in the worst case. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Randomized algorithm for the sum selection problem", "paper_id": "WOS:000247279200012"}