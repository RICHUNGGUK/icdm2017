{"auto_keywords": [{"score": 0.04622261801654317, "phrase": "mobile_devices"}, {"score": 0.01331653048045907, "phrase": "energy_consumption"}, {"score": 0.01140671153039606, "phrase": "thin_mobile_clients"}, {"score": 0.010169070938737925, "phrase": "thin_clients"}, {"score": 0.008681652597322937, "phrase": "thin_client"}, {"score": 0.004773404795430319, "phrase": "rapid_advances"}, {"score": 0.0047459060595229224, "phrase": "mobile_computing"}, {"score": 0.0047185649878632475, "phrase": "multi-core_processors"}, {"score": 0.004691380685111258, "phrase": "expanded_memory_resources"}, {"score": 0.00461075951152053, "phrase": "new_mobile_devices"}, {"score": 0.004518442937844318, "phrase": "wider_range"}, {"score": 0.004492406361795448, "phrase": "existing_applications"}, {"score": 0.00435185229819578, "phrase": "desktop_applications"}, {"score": 0.004264697351852424, "phrase": "arm-based_mobile_devices"}, {"score": 0.004227879333383761, "phrase": "dynamic_binary_translation"}, {"score": 0.0041312380622750555, "phrase": "overall_performance"}, {"score": 0.003876669922047053, "phrase": "overall_execution_time"}, {"score": 0.0038431888954930083, "phrase": "translated_code"}, {"score": 0.0037444643255115265, "phrase": "today's_mobile_devices"}, {"score": 0.0036482665232275583, "phrase": "translation_efficiency"}, {"score": 0.0034036089823450385, "phrase": "network_accessibility"}, {"score": 0.0032590737464194696, "phrase": "network_servers"}, {"score": 0.003202987495080647, "phrase": "substantial_amount"}, {"score": 0.0031206593431652766, "phrase": "dbt"}, {"score": 0.0029028648824177715, "phrase": "design_issues"}, {"score": 0.0028694530267725925, "phrase": "distributed_dbt_system"}, {"score": 0.0026691455928407022, "phrase": "thin_dbt"}, {"score": 0.002623184850933423, "phrase": "lightweight_binary_translation"}, {"score": 0.002608040688794517, "phrase": "basic_emulation_functions"}, {"score": 0.0024899850926034567, "phrase": "dbt_overhead"}, {"score": 0.002418923027024191, "phrase": "significant_performance_improvement"}, {"score": 0.002230531232007796, "phrase": "mibench"}, {"score": 0.0022048406330100697, "phrase": "test_inputs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Dynamic binary translation", " Client/server model", " Asynchronous computing", " Region formation optimization"], "paper_abstract": "With rapid advances in mobile computing, multi-core processors and expanded memory resources are being made available in new mobile devices. This trend will allow a wider range of existing applications to be migrated to mobile devices, for example, running desktop applications in IA-32 (x86) binaries on ARM-based mobile devices transparently using dynamic binary translation (DBT). However, the overall performance could significantly affect the energy consumption of the mobile devices because it is directly linked to the number of instructions executed and the overall execution time of the translated code. Hence, even though the capability of today's mobile devices will continue to grow, the concern over translation efficiency and energy consumption will put more constraints on a DBT for mobile devices, in particular, for thin mobile clients than that for severs. With increasing network accessibility and bandwidth in various environments, it makes many network servers highly accessible to thin mobile clients. Those network servers are usually equipped with a substantial amount of resources. This provides an opportunity for DBT on thin clients to leverage such powerful servers. However, designing such a DBT for a client/server environment requires many critical considerations. In this work, we looked at those design issues and developed a distributed DBT system based on a client/server model. It consists of two dynamic binary translators. An aggressive dynamic binary translator/optimizer on the server to service the translation/optimization requests from thin clients, and a thin DBT on each thin client to perform lightweight binary translation and basic emulation functions for its own. With such a two-translator client/server approach, we successfully off-load the DBT overhead of the thin client to the server and achieve a significant performance improvement over the non-client/server model. Experimental results show that the DBT of the client/server model could achieve 37% and 17% improvement over that of non-client/server model for x86/32-to-ARM emulation using MiBench and SPEC CINT2006 benchmarks with test inputs, respectively, and 84% improvement using SPLASH-2 benchmarks running two emulation threads. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "A dynamic binary translation system in a client/server environment", "paper_id": "WOS:000359033000004"}