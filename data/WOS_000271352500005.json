{"auto_keywords": [{"score": 0.03972047498910882, "phrase": "graph_transformation_systems"}, {"score": 0.007740489563401459, "phrase": "novel_approach"}, {"score": 0.006018555122122328, "phrase": "layered_graphs"}, {"score": 0.004324985524216987, "phrase": "general_formal_modeling_language"}, {"score": 0.004210458358142504, "phrase": "dynamic_systems"}, {"score": 0.004121015016128205, "phrase": "model_transformations"}, {"score": 0.0038846843242954935, "phrase": "software_engineering"}, {"score": 0.0038226070564362697, "phrase": "special_type"}, {"score": 0.0036422425344358037, "phrase": "suitable_formalism"}, {"score": 0.003584025547693836, "phrase": "hierarchical_systems"}, {"score": 0.003167441161387607, "phrase": "suitable_analysis_tools"}, {"score": 0.002769209760453212, "phrase": "designed_graph_transformation_systems"}, {"score": 0.002610198789888055, "phrase": "bogor_model_checker"}, {"score": 0.0025273386970548427, "phrase": "agg"}, {"score": 0.0023566987138026285, "phrase": "bogor_-_and"}, {"score": 0.0023440589713514177, "phrase": "bogor"}, {"score": 0.0022213304040602224, "phrase": "ltl"}, {"score": 0.0021975548867457606, "phrase": "special_purpose_graph_rules"}, {"score": 0.002162379426839795, "phrase": "schema-based_and_layered_graphs"}, {"score": 0.0021049977753042253, "phrase": "existing_solutions"}], "paper_keywords": ["Graph transformation systems", " graph schemas", " layered graphs", " model checking", " Bogor"], "paper_abstract": "Graph Grammars have recently become more and more popular as a general formal modeling language. Behavioral modeling of dynamic systems and model to model transformations are a few well-known examples in which graphs have proven their usefulness in software engineering. A special type of graph transformation systems is layered graphs. Layered graphs are a suitable formalism for modeling hierarchical systems. However, most of the research so far concentrated on graph transformation systems as a modeling means, without considering the need for suitable analysis tools. In this paper we concentrate on how to analyze these models. We will describe our approach to show how one can verify the designed graph transformation systems. To verify graph transformation systems we use a novel approach: using Bogor model checker to verify graph transformation systems. The AGG-like graph transformation systems are translated to BIR - the input language of Bogor - and Bogor verifies that model against some properties defined by combining LTL and special purpose graph rules. Supporting schema-based and layered graphs characterize our approach among existing solutions for verification of graph transformation systems.", "paper_title": "A NOVEL APPROACH TO VERIFY GRAPH SCHEMA-BASED SOFTWARE SYSTEMS", "paper_id": "WOS:000271352500005"}