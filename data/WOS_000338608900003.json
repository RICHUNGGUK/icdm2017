{"auto_keywords": [{"score": 0.049965499133039604, "phrase": "kmclib"}, {"score": 0.007808495762930416, "phrase": "python_module"}, {"score": 0.007172281662321228, "phrase": "individual_particle_movements"}, {"score": 0.0071300614767154935, "phrase": "mean_square_displacement_analysis"}, {"score": 0.007046359958182141, "phrase": "diffusion_processes"}, {"score": 0.006697421892395791, "phrase": "distributed_program"}, {"score": 0.006673727947910125, "phrase": "test_data"}, {"score": 0.0064491066091839164, "phrase": "python"}, {"score": 0.006350625285696417, "phrase": "python_interpreter"}, {"score": 0.0062540361825115815, "phrase": "mac"}, {"score": 0.005832496084458201, "phrase": "input_parameters"}, {"score": 0.004826725897274584, "phrase": "time_scales"}, {"score": 0.004565181412007407, "phrase": "complex_custom_kmc_models"}, {"score": 0.004516797236672313, "phrase": "core_functionality"}, {"score": 0.004453078187625582, "phrase": "elementary_step_diffusion_rate_calculations"}, {"score": 0.004411096776740219, "phrase": "well-defined_api."}, {"score": 0.004364338510837832, "phrase": "core_kmclib_program"}, {"score": 0.004348862343755694, "phrase": "python_scripting_language"}, {"score": 0.004282427903176925, "phrase": "initial_compilation"}, {"score": 0.004267240950397144, "phrase": "backend_library"}, {"score": 0.004187145021518927, "phrase": "python_script"}, {"score": 0.004167356068778172, "phrase": "standard_python_interpreter"}, {"score": 0.004142750798581288, "phrase": "detailed_description"}, {"score": 0.004079452075021244, "phrase": "parallel_performance"}, {"score": 0.0040649820052444845, "phrase": "simple_one-dimensional_a-b-c_lattice_kmc_model"}, {"score": 0.004007611113050601, "phrase": "oxygen-vacancy_diffusion"}, {"score": 0.003993394845843522, "phrase": "fluorite_structured_metal_oxide"}, {"score": 0.003849942387216879, "phrase": "program"}, {"score": 0.0038357455009733654, "phrase": "kmclib_catalogue"}, {"score": 0.00378159764053533, "phrase": "cpc_program_library"}, {"score": 0.003772647323211557, "phrase": "queen's_university"}, {"score": 0.0037637182494412455, "phrase": "belfast"}, {"score": 0.0037548099501471303, "phrase": "n._ireland"}, {"score": 0.00373705659722071, "phrase": "gnu_general_public_license"}, {"score": 0.003370986097652021, "phrase": "mpi"}, {"score": 0.0031358032682090595, "phrase": "external_mersenne_twister_pseudo_random_number_generator"}, {"score": 0.0030695912300807214, "phrase": "serial_version"}, {"score": 0.0030406128119609267, "phrase": "parallel_version"}, {"score": 0.0030334109237085305, "phrase": "mpi_implementation"}, {"score": 0.0030119071375458023, "phrase": "e.g._mpich"}, {"score": 0.0029100955653992085, "phrase": "backend_module"}, {"score": 0.0029032029955224172, "phrase": "sphinx"}, {"score": 0.002858788378807115, "phrase": "cppunit"}, {"score": 0.0028050545701581073, "phrase": "atomic_scale_simulation"}, {"score": 0.002781863858987322, "phrase": "great_challenge"}, {"score": 0.0027686979689269006, "phrase": "computational_materials_science"}, {"score": 0.00274906555288626, "phrase": "rare-events_dynamics"}, {"score": 0.0027166528869182727, "phrase": "typical_atomic_vibrational_frequencies"}, {"score": 0.0027102162327712186, "phrase": "straight-forward_propagation"}, {"score": 0.0026435428214880694, "phrase": "slow_dynamics"}, {"score": 0.0026092741131265966, "phrase": "kinetic_monte_carlo"}, {"score": 0.002584630043678074, "phrase": "slow_dynamics_problem"}, {"score": 0.002560218135040284, "phrase": "fast_vibrational_motion"}, {"score": 0.002551123078520178, "phrase": "slowly_evolving_rare-events_dynamics"}, {"score": 0.0025031576322936816, "phrase": "fully_equilibrated_local_energy_minima"}, {"score": 0.0024942647736734547, "phrase": "slow-dynamics_potential_energy_surface"}, {"score": 0.0024736371348038043, "phrase": "lattice_kmc_method"}, {"score": 0.002421372678984467, "phrase": "unusual_features"}, {"score": 0.002381485372550332, "phrase": "user-defined_functionality"}, {"score": 0.0023422641365823706, "phrase": "api"}, {"score": 0.0023311634030822527, "phrase": "site-specific_elementary_process_rates"}, {"score": 0.0023146262770324002, "phrase": "long-range_interactions"}, {"score": 0.002309139952095626, "phrase": "complex_geometrical_features"}, {"score": 0.002281902329634545, "phrase": "on-the-fly_analysis"}, {"score": 0.0022764933928073653, "phrase": "user-defined_analysis_modules"}, {"score": 0.002199486187161615, "phrase": "additional_comments"}, {"score": 0.002191669798405392, "phrase": "full_documentation"}], "paper_keywords": ["KMC", " Kinetic Monte Carlo", " Diffusion", " Simulation framework", " Python"], "paper_abstract": "KMCLib is a general framework for lattice kinetic Monte Carlo (KMC) simulations. The program can handle simulations of the diffusion and reaction of millions of particles in one, two, or three dimensions, and is designed to be easily extended and customized by the user to allow for the development of complex custom KMC models for specific systems without having to modify the core functionality of the program. Analysis modules and on-the-fly elementary step diffusion rate calculations can be implemented as plugins following a well-defined API. The plugin modules are loosely coupled to the core KMCLib program via the Python scripting language. KMCLib is written as a Python module with a backend C++ library. After initial compilation of the backend library KMCLib is used as a Python module; input to the program is given as a Python script executed using a standard Python interpreter. We give a detailed description of the features and implementation of the code and demonstrate its scaling behavior and parallel performance with a simple one-dimensional A-B-C lattice KMC model and a more complex three-dimensional lattice KMC model of oxygen-vacancy diffusion in a fluorite structured metal oxide. KMCLib can keep track of individual particle movements and includes tools for mean square displacement analysis, and is therefore particularly well suited for studying diffusion processes at surfaces and in solids. Program summary Program title: KMCLib Catalogue identifier: AESZ_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AESZ_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public License, version 3 No. of lines in distributed program, including test data, etc.: 49 064 No. of bytes in distributed program, including test data, etc.: 1 575 172 Distribution format: tar.gz Programming language: Python and C++. Computer: Any computer that can run a C++ compiler and a Python interpreter. Operating system: Tested on Ubuntu 12.4 LTS, CentOS release 5.9, Mac OSX 10.5.8 and Mac OSX 10.8.2, but should run on any system that can have a C++ compiler, MPI and a Python interpreter. Has the code been vectorized or parallelized?: Yes. From one to hundreds of processors depending on the type of input and simulation. RAM: From a few megabytes to several gigabytes depending on input parameters and the size of the system to simulate. Classification: 4.13, 16.13. External routines: KMCLib uses an external Mersenne Twister pseudo random number generator that is included in the code. A Python 2.7 interpreter and a standard C++ runtime library are needed to run the serial version of the code. For running the parallel version an MPI implementation is needed, such as e.g. MPICH from http://www.mpich.org or Open-MPI from http://www.open-mpi.org. SWIG (obtainable from http://www.swig.org/) and CMake (obtainable from http://www.cmake.org/) are needed for building the backend module, Sphinx (obtainable from http://sphinx-doc.org) for building the documentation and CPPUNIT (obtainable from http://sourceforge.net/projects/cppunit/) for building the C++ unit tests. Nature of problem: Atomic scale simulation of slowly evolving dynamics is a great challenge in many areas of computational materials science and catalysis. When the rare-events dynamics of interest is orders of magnitude slower than the typical atomic vibrational frequencies a straight-forward propagation of the equations of motions for the particles in the simulation cannot reach time scales of relevance for modeling the slow dynamics. Solution method: KMCLib provides an implementation of the kinetic Monte Carlo (KMC) method that solves the slow dynamics problem by utilizing the separation of time scales between fast vibrational motion and the slowly evolving rare-events dynamics. Only the latter is treated explicitly and the system is simulated as jumping between fully equilibrated local energy minima on the slow-dynamics potential energy surface. Restrictions: KMCLib implements the lattice KMC method and is as such restricted to geometries that can be expressed on a grid in space. Unusual features: KMCLib has been designed to be easily customized, to allow for user-defined functionality and integration with other codes. The user can define her own on-the-fly rate calculator via a Python API, so that site-specific elementary process rates, or rates depending on long-range interactions or complex geometrical features can easily be included. KMCLib also allows for on-the-fly analysis with user-defined analysis modules. KMCLib can keep track of individual particle movements and includes tools for mean square displacement analysis, and is therefore particularly well suited for studying diffusion processes at surfaces and in solids. Additional comments: The full documentation of the program is distributed with the code and can also be found at http://www.github.com/leetmaa/KMCLib/manual Running time: From a few seconds to several days depending on the type of simulation and input parameters. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "KMCLib: A general framework for lattice kinetic Monte Carlo (KMC) simulations", "paper_id": "WOS:000338608900003"}