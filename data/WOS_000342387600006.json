{"auto_keywords": [{"score": 0.04185009801891845, "phrase": "power_consumption"}, {"score": 0.010612387000973441, "phrase": "power_efficiency"}, {"score": 0.009099988127674746, "phrase": "heterogeneous_applications"}, {"score": 0.00803599532295771, "phrase": "different_optimizations"}, {"score": 0.007709511264594423, "phrase": "energy_consumption"}, {"score": 0.0047864177420244795, "phrase": "optimization_techniques"}, {"score": 0.004758053266234474, "phrase": "algorithm_design_methods"}, {"score": 0.004701825207431857, "phrase": "heterogeneous_platforms"}, {"score": 0.0046739596755881185, "phrase": "graphics_processing_units"}, {"score": 0.0045370785151713396, "phrase": "computing_platform"}, {"score": 0.004417301047282113, "phrase": "programming_standards"}, {"score": 0.004378089812645504, "phrase": "opencl"}, {"score": 0.00430067200637091, "phrase": "inherent_parallelism"}, {"score": 0.004237208239631876, "phrase": "source_code_optimizations"}, {"score": 0.0041995784967999985, "phrase": "loop_unrolling"}, {"score": 0.004088674329188, "phrase": "large_gains"}, {"score": 0.0038755411593867284, "phrase": "better_solutions"}, {"score": 0.0037619540348087493, "phrase": "heterogeneous_systems"}, {"score": 0.0033898953358387075, "phrase": "different_optimization_techniques"}, {"score": 0.003340317933545257, "phrase": "fourier"}, {"score": 0.0032807160037434317, "phrase": "discrete_gpus"}, {"score": 0.0030363880573817483, "phrase": "llano_apus"}, {"score": 0.0029915329205767102, "phrase": "nvidia"}, {"score": 0.0029739057569310623, "phrase": "kepler"}, {"score": 0.0028779496327516634, "phrase": "test_platforms"}, {"score": 0.0028269905110337094, "phrase": "architectural_and_algorithmic_factors"}, {"score": 0.0027277558893834273, "phrase": "application_optimizations"}, {"score": 0.002472412920623605, "phrase": "fft_implementations"}, {"score": 0.0023433334920926713, "phrase": "execution_performance"}, {"score": 0.0023224836187453954, "phrase": "heterogeneous_application"}, {"score": 0.0022077827041801193, "phrase": "different_algorithms"}, {"score": 0.002142970278347126, "phrase": "vast_differences"}, {"score": 0.002117580079489708, "phrase": "target_hardware"}, {"score": 0.0021049977753042253, "phrase": "associated_application_design"}], "paper_keywords": ["OpenCL", " fast Fourier Transform", " power", " optimizations", " GPUs", " system-on-chip"], "paper_abstract": "Graphics processing units (GPUs) have become widely accepted as the computing platform of choice in many high performance computing domains. The availability of programming standards such as OpenCL are used to leverage the inherent parallelism offered by GPUs. Source code optimizations such as loop unrolling and tiling when targeted to heterogeneous applications have reported large gains in performance. However, given the power consumption of GPUs, platforms can exhaust their power budgets quickly. Better solutions are needed to effectively exploit the power-efficiency available on heterogeneous systems. In this work, we evaluate the power/performance efficiency of different optimizations used on heterogeneous applications. We analyze the power/performance trade-off by evaluating energy consumption of the optimizations. We compare the performance of different optimization techniques on four different fast Fourier transform implementations. Our study covers discrete GPUs, shared memory GPUs (APUs) and low power system-on-chip (SoC) devices, and includes hardware from AMD (Llano APUs and the Southern Islands GPU), Nvidia (Kepler), Intel (Ivy Bridge) and Qualcomm (Snapdragon S4) as test platforms. The study identifies the architectural and algorithmic factors which can most impact power consumption. We explore a range of application optimizations which show an increase in power consumption by 27%, but result in more than 1.8X increase in speed of performance. We observe up to an 18% reduction in power consumption due to reduced kernel calls across FFT implementations. We also observe an 11% variation in energy consumption among different optimizations. We highlight how different optimizations can improve the execution performance of a heterogeneous application, but also impact the power efficiency of the application. More importantly, we demonstrate that different algorithms implementing the same fundamental function (FFT) can perform with vast differences based on the target hardware and associated application design.", "paper_title": "Analyzing power efficiency of optimization techniques and algorithm design methods for applications on heterogeneous platforms", "paper_id": "WOS:000342387600006"}