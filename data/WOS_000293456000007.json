{"auto_keywords": [{"score": 0.03526300604455722, "phrase": "event_combinations"}, {"score": 0.00481495049065317, "phrase": "gui_interaction_testing"}, {"score": 0.004676575291629554, "phrase": "graphical_user_interfaces"}, {"score": 0.00443308765153716, "phrase": "enormous_and_potentially_unbounded_way"}, {"score": 0.0040222701316738295, "phrase": "interaction_space"}, {"score": 0.0038499929374478125, "phrase": "new_family"}, {"score": 0.0038127186374325582, "phrase": "coverage_criteria"}, {"score": 0.003775803846431323, "phrase": "gui_testing"}, {"score": 0.003721098220825489, "phrase": "combinatorial_interaction_testing"}, {"score": 0.0036671822784770463, "phrase": "key_motivation"}, {"score": 0.003614044704141927, "phrase": "combinatorial_techniques"}, {"score": 0.003200045185608395, "phrase": "possible_positions"}, {"score": 0.0029458777184930896, "phrase": "test_suite"}, {"score": 0.0028195727965553367, "phrase": "test_suites"}, {"score": 0.002711842889248926, "phrase": "case_study"}, {"score": 0.002685558057339722, "phrase": "eight_applications"}, {"score": 0.0026209522797963447, "phrase": "test_cases"}, {"score": 0.0023091721866305426, "phrase": "relative_positions"}, {"score": 0.002242647404307089, "phrase": "new_criteria"}, {"score": 0.0021780349459687622, "phrase": "large_number"}, {"score": 0.0021049977753042253, "phrase": "earlier_techniques"}], "paper_keywords": ["GUI testing", " automated testing", " model-based testing", " combinatorial interaction testing", " GUITAR testing system"], "paper_abstract": "Graphical user interfaces (GUIs), due to their event-driven nature, present an enormous and potentially unbounded way for users to interact with software. During testing, it is important to \"adequately cover\" this interaction space. In this paper, we develop a new family of coverage criteria for GUI testing grounded in combinatorial interaction testing. The key motivation of using combinatorial techniques is that they enable us to incorporate \"context\" into the criteria in terms of event combinations, sequence length, and by including all possible positions for each event. Our new criteria range in both efficiency (measured by the size of the test suite) and effectiveness (the ability of the test suites to detect faults). In a case study on eight applications, we automatically generate test cases and systematically explore the impact of context, as captured by our new criteria. Our study shows that by increasing the event combinations tested and by controlling the relative positions of events defined by the new criteria, we can detect a large number of faults that were undetectable by earlier techniques.", "paper_title": "GUI Interaction Testing: Incorporating Event Context", "paper_id": "WOS:000293456000007"}