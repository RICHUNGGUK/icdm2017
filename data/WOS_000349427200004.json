{"auto_keywords": [{"score": 0.04871897605022266, "phrase": "new_set"}, {"score": 0.03981473626398458, "phrase": "multiple_refactorings"}, {"score": 0.038831381980902774, "phrase": "maintainability_improvement"}, {"score": 0.03714047494180222, "phrase": "refactoring_identification"}, {"score": 0.03483431584350194, "phrase": "mis"}, {"score": 0.03303218798120384, "phrase": "refactoring_candidates"}, {"score": 0.00481495049065317, "phrase": "multiple_and_independent_move_method_refactoring_candidates"}, {"score": 0.004718897469501381, "phrase": "refactoring_operation"}, {"score": 0.0046114557978424245, "phrase": "revised_design"}, {"score": 0.004442032546224076, "phrase": "stepwise_refactoring_recommendation_approaches"}, {"score": 0.004193404476461011, "phrase": "best_candidate"}, {"score": 0.0041215546273657795, "phrase": "identification_process"}, {"score": 0.003958637205284778, "phrase": "multiple_and_independent_candidates"}, {"score": 0.003902020354497715, "phrase": "refactoring_process"}, {"score": 0.003824109314333028, "phrase": "automated_approach"}, {"score": 0.003589193972443107, "phrase": "maintainability_enhancement"}, {"score": 0.0033204536265162114, "phrase": "maximal_independent_set"}, {"score": 0.003244748458248666, "phrase": "multiple_refactoring_operations"}, {"score": 0.0029672941061574375, "phrase": "refactoring_effect_delta_table"}, {"score": 0.002907992115184249, "phrase": "elementary_candidate"}, {"score": 0.0028498718992429825, "phrase": "refactoring_identification_process"}, {"score": 0.00264395802739923, "phrase": "proposed_approach"}, {"score": 0.0026136238204136947, "phrase": "refactoring_operations"}, {"score": 0.002576194123772577, "phrase": "jedit"}, {"score": 0.0025392983369523143, "phrase": "jgit"}, {"score": 0.0024247382451294255, "phrase": "better_extent"}, {"score": 0.002403839385995682, "phrase": "competing_method"}, {"score": 0.002335465722613665, "phrase": "significantly_smaller_number"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Refactoring identification process", " Refactoring selection", " Multiple simultaneous refactorings", " Maintainability improvement", " Refactoring effect dependency"], "paper_abstract": "Context: Application of a refactoring operation creates a new set of dependency in the revised design as well as a new set of further refactoring candidates. In the studies of stepwise refactoring recommendation approaches, applying one refactoring at a time has been used, but is inefficient because the identification of the best candidate in each iteration of refactoring identification process is computation-intensive. Therefore, it is desirable to accurately identify multiple and independent candidates to enhance efficiency of refactoring process. Objective: We propose an automated approach to identify multiple refactorings that can be applied simultaneously to maximize the maintainability improvement of software. Our approach can attain the same degree of maintainability enhancement as the method of the refactoring identification of the single best one, but in fewer iterations (lower computation cost). Method: The concept of maximal independent set (MIS) enables us to identify multiple refactoring operations that can be applied simultaneously. Each MIS contains a group of refactoring candidates that neither affect (i.e., enable or disable) nor influence maintainability on each other. Refactoring effect delta table quantifies the degree of maintainability improvement each elementary candidate. For each iteration of the refactoring identification process, multiple refactorings that best improve maintainability are selected among sets of refactoring candidates (MISs). Results: We demonstrate the effectiveness and efficiency of the proposed approach by simulating the refactoring operations on several large-scale open source projects such as jEdit, Columba, and jGit. The results show that our proposed approach can improve maintainability by the same degree or to a better extent than the competing method, choosing one refactoring candidate at a time, in a significantly smaller number of iterations. Thus, applying multiple refactorings at a time is both effective and efficient. Conclusion: Our proposed approach helps improve the maintainability as well as the productivity of refactoring identification. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "An efficient approach to identify multiple and independent Move Method refactoring candidates", "paper_id": "WOS:000349427200004"}