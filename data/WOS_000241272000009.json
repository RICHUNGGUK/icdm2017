{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "input_history"}, {"score": 0.04522176534199054, "phrase": "basic_blocks"}, {"score": 0.004730158389701481, "phrase": "improved_instruction-memory_performance"}, {"score": 0.004484596684703308, "phrase": "relative_position"}, {"score": 0.00408501512749186, "phrase": "instruction-memory_hierarchy"}, {"score": 0.003737485125097945, "phrase": "bayesian_networks"}, {"score": 0.0035590664550919854, "phrase": "main_point"}, {"score": 0.003465350958971198, "phrase": "probabilistic_model"}, {"score": 0.003329368827624161, "phrase": "different_inputs"}, {"score": 0.0032706520949775065, "phrase": "new_input"}, {"score": 0.0031562971707460802, "phrase": "program's_input_history"}, {"score": 0.0028366012006726896, "phrase": "next_input"}, {"score": 0.002572001496778222, "phrase": "extensive_experiments"}, {"score": 0.002482013330276732, "phrase": "overall_approach"}, {"score": 0.002427372728532664, "phrase": "execution_times"}, {"score": 0.0023739321566540682, "phrase": "identical_inputs"}, {"score": 0.0023010815714140467, "phrase": "varied_inputs"}, {"score": 0.0021049977753042253, "phrase": "pettis-hansen_reordering"}], "paper_keywords": ["instruction memory", " code-layout optimization", " Bayesian networks"], "paper_abstract": "When a program is loaded into memory for execution the relative position of its basic blocks is crucial, since loading basic blocks that are unlikely to be executed first places them high in the instruction-memory hierarchy only to be dislodged as the execution goes on. In this paper, we study the use of Bayesian networks as models of the input history of a program. The main point is the creation of a probabilistic model that persists as the program is run on different inputs and at each new input refines its own parameters in order to reflect the program's input history more accurately. As the model is thus tuned, it causes basic blocks to be reordered so that, upon arrival of the next input for execution, loading the basic blocks into memory automatically takes into account the input history of the program. We report on extensive experiments, whose results demonstrate the efficacy of the overall approach in progressively lowering the execution times of a program on identical inputs placed randomly in a sequence of varied inputs. We provide results on selected SPEC CINT2000 programs and also evaluate our approach as compared with the gcc level-3 optimization and with Pettis-Hansen reordering.", "paper_title": "Modeling the input history of programs for improved instruction-memory performance", "paper_id": "WOS:000241272000009"}