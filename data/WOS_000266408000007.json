{"auto_keywords": [{"score": 0.0496463517482477, "phrase": "code_reviews"}, {"score": 0.015029355409935653, "phrase": "defect_types"}, {"score": 0.011524201791584344, "phrase": "software_evolvability"}, {"score": 0.009796197223176921, "phrase": "functional_defects"}, {"score": 0.007778865015028015, "phrase": "evolvability_defects"}, {"score": 0.004664352260912174, "phrase": "defect_counts"}, {"score": 0.004497973025639345, "phrase": "imperfect_view"}, {"score": 0.004457309741979921, "phrase": "code_review_benefits"}, {"score": 0.003683097597914604, "phrase": "visible_functionality"}, {"score": 0.003287482882222731, "phrase": "defect_classification"}, {"score": 0.0032429499567088113, "phrase": "functional_and_evolvability_defects"}, {"score": 0.0031990183472675377, "phrase": "evolvability_defect_classification"}, {"score": 0.0029076695661972114, "phrase": "existing_functional_defect_classifications"}, {"score": 0.0027910516355928983, "phrase": "code_review_roles"}, {"score": 0.00266693888510356, "phrase": "software_engineering_tools"}, {"score": 0.0024460897937643032, "phrase": "additional_benefits"}, {"score": 0.002423931101340771, "phrase": "execution-based_quality_assurance_methods"}, {"score": 0.0022537212268979507, "phrase": "software_products"}, {"score": 0.0022333012657436307, "phrase": "long_life_cycles"}, {"score": 0.0021049977753042253, "phrase": "short_life_cycle_systems"}], "paper_keywords": ["Code inspections and walkthroughs", " enhancement", " extensibility", " maintainability", " restructuring"], "paper_abstract": "Research on code reviews has often focused on defect counts instead of defect types, which offers an imperfect view of code review benefits. In this paper, we classified the defects of nine industrial (C/C++) and 23 student (Java) code reviews, detecting 388 and 371 defects, respectively. First, we discovered that 75 percent of defects found during the review do not affect the visible functionality of the software. Instead, these defects improved software evolvability by making it easier to understand and modify. Second, we created a defect classification consisting of functional and evolvability defects. The evolvability defect classification is based on the defect types found in this study, but, for the functional defects, we studied and compared existing functional defect classifications. The classification can be useful for assigning code review roles, creating checklists, assessing software evolvability, and building software engineering tools. We conclude that, in addition to functional defects, code reviews find many evolvability defects and, thus, offer additional benefits over execution-based quality assurance methods that cannot detect evolvability defects. We suggest that code reviews may be most valuable for software products with long life cycles as the value of discovering evolvability defects in them is greater than for short life cycle systems.", "paper_title": "What Types of Defects Are Really Discovered in Code Reviews?", "paper_id": "WOS:000266408000007"}