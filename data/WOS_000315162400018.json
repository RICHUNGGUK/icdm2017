{"auto_keywords": [{"score": 0.03152938003499142, "phrase": "gpu"}, {"score": 0.008206002793115215, "phrase": "gpu."}, {"score": 0.004565007074039171, "phrase": "highly_general_implementation"}, {"score": 0.004444921827311577, "phrase": "fast_multipole_methods"}, {"score": 0.004327981760540394, "phrase": "graphics_processing_units"}, {"score": 0.003737485125097945, "phrase": "adaptive_space"}, {"score": 0.0034963129868796033, "phrase": "particularly_elegant_and_flexible_implementation"}, {"score": 0.0032272929113113203, "phrase": "multipole_algorithm"}, {"score": 0.002824005136794786, "phrase": "initial_phase"}, {"score": 0.002641621667026613, "phrase": "topological_information"}, {"score": 0.002537880772794665, "phrase": "input_data"}, {"score": 0.002438203996977464, "phrase": "careful_timing_experiments"}, {"score": 0.0021049977753042253, "phrase": "gpu_architecture"}], "paper_keywords": ["Adaptive fast multipole method", " CUDA", " Graphics processing units", " Tesla C2075"], "paper_abstract": "We present a highly general implementation of fast multipole methods on graphics processing units (GPUs). Our two-dimensional double precision code features an asymmetric type of adaptive space discretization leading to a particularly elegant and flexible implementation. All steps of the multipole algorithm are efficiently performed on the GPU, including the initial phase, which assembles the topological information of the input data. Through careful timing experiments, we investigate the effects of the various peculiarities of the GPU architecture.", "paper_title": "Adaptive fast multipole methods on the GPU", "paper_id": "WOS:000315162400018"}