{"auto_keywords": [{"score": 0.04933866662045337, "phrase": "arise"}, {"score": 0.047709312484212084, "phrase": "embedded_processor"}, {"score": 0.00481495049065317, "phrase": "embedded_processors"}, {"score": 0.004777569299319633, "phrase": "arbitrary_hardware_accelerators"}, {"score": 0.004436545340717729, "phrase": "arbitrary_number"}, {"score": 0.004402088928254543, "phrase": "custom_computing_units"}, {"score": 0.004184526032558792, "phrase": "reconfigurable_unit"}, {"score": 0.003946766004066276, "phrase": "appropriate_model"}, {"score": 0.003781005930058317, "phrase": "complete_application_space"}, {"score": 0.0036648265911110164, "phrase": "significant_performance_improvements"}, {"score": 0.0034564928013639125, "phrase": "opeode_space"}, {"score": 0.0034162643819889054, "phrase": "limitation_problems"}, {"score": 0.0032220148724914867, "phrase": "machine_organization"}, {"score": 0.0029800360974218836, "phrase": "instruction_set"}, {"score": 0.0029224275921964724, "phrase": "eight_instructions"}, {"score": 0.002766963729586353, "phrase": "micro-architecture_implementation"}, {"score": 0.002702887319160534, "phrase": "communication_overhead"}, {"score": 0.002549096826249, "phrase": "mips_processor"}, {"score": 0.002519402443228795, "phrase": "arise_infrastructure"}, {"score": 0.0024610448251906453, "phrase": "xilinx_field-programmable_gate_array"}, {"score": 0.0024134449026937586, "phrase": "implementation_results"}, {"score": 0.002366763442497185, "phrase": "timing_model"}, {"score": 0.002206045784326466, "phrase": "arise_evaluation_machine"}, {"score": 0.002188874450946842, "phrase": "performance_results"}, {"score": 0.002171836484200008, "phrase": "significant_improvements"}, {"score": 0.0021049977753042253, "phrase": "typical_coprocessor_approach"}], "paper_keywords": ["Coprocessors", " custom computing units (CCUs)", " custom instructions", " hybrid computational model", " instruction set extensions", " reconfigurable processors"], "paper_abstract": "ARISE Introduces a systematic approach for extending once an embedded processor to support thereafter the coupling of an arbitrary number of custom computing units (CCUs). A CCU can be a hardwired or a reconfigurable unit, which can be utilized following a tight and/or loose model of computation. By selecting the appropriate model of computation for each part of the application, the complete application space is considered for acceleration, resulting in significant performance improvements. Also, ARISE offers modularity and scalability and is not restricted by the opeode space and operands limitation problems that exist in such type of machines. To support these features we introduce a machine organization that allows the cooperation a processor and a set of CCUs. To control the CCUs we extend the instruction set of the processor with eight instructions. To efficiently incorporate these features to an embedded processor, we propose a micro-architecture implementation that minimizes the control and communication overhead between the processor and the CCUs. To evaluate our proposal, we extended a MIPS processor with the ARISE infrastructure and implemented it on a Xilinx field-programmable gate array (FPGA). Implementation results, demonstrate that the timing model of the processor is not affected. Also, we implemented a set of benchmarks on the ARISE evaluation machine. Performance results prove significant improvements and reduced communication overhead compared to a typical coprocessor approach.", "paper_title": "The ARISE Approach for Extending Embedded Processors With Arbitrary Hardware Accelerators", "paper_id": "WOS:000262778500006"}