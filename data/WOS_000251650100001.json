{"auto_keywords": [{"score": 0.045554656408954584, "phrase": "cycle-approximate_simulation"}, {"score": 0.027144666553810464, "phrase": "hw"}, {"score": 0.00481495049065317, "phrase": "synchronization_time-point_prediction"}, {"score": 0.004582528208024817, "phrase": "fast_cycle-approximate_multi-processor_soc_simulation"}, {"score": 0.004296998284839309, "phrase": "abstract_model"}, {"score": 0.00419195822011581, "phrase": "fast_validation"}, {"score": 0.004130165601475531, "phrase": "multi-processor_soc"}, {"score": 0.004089475312474684, "phrase": "early_design_stages"}, {"score": 0.003989487818395848, "phrase": "performance_gain"}, {"score": 0.00395017798595193, "phrase": "abstract-level_simulation"}, {"score": 0.003685604033479918, "phrase": "timed_simulation"}, {"score": 0.0035954555250614197, "phrase": "synchronization_overhead"}, {"score": 0.003507504253087326, "phrase": "synchronization_time-point_prediction_method"}, {"score": 0.00320826350799124, "phrase": "static_analysis_phase"}, {"score": 0.003114283314285167, "phrase": "minimum_execution_time"}, {"score": 0.0029784342137867776, "phrase": "nearest_synchronization_point"}, {"score": 0.0028203950416405563, "phrase": "synchronization_time-points"}, {"score": 0.0026839922027139967, "phrase": "fast_cycle-approximate_simulation"}, {"score": 0.002605329434787829, "phrase": "annotated_sw_code"}, {"score": 0.002579622880371082, "phrase": "transaction_level_models"}, {"score": 0.0025289662786567896, "phrase": "dynamic_behavior"}, {"score": 0.0023594649176493995, "phrase": "sw"}, {"score": 0.002301572462091142, "phrase": "minimal_number_synchronizations"}, {"score": 0.0021259846592569386, "phrase": "higher_performance"}, {"score": 0.0021049977753042253, "phrase": "cycle-approximate_multi-processor_soc_simulation"}], "paper_keywords": ["multiprocessor system-on-chip", " cycle-approximate simulation", " transaction-level model", " OS model"], "paper_abstract": "In this paper, we propose techniques for fast cycle-approximate multi-processor SoC simulation with timed transaction level models and OS models. Cycle-approximate simulation with an abstract model is widely used for fast validation of a multi-processor SoC in early design stages. However, the performance gain of abstract-level simulation is limited by the overhead of synchronizing multiple concurrent processor/module simulators, which is inevitable in timed simulation. To reduce the synchronization overhead, we adopt the synchronization time-point prediction method, which consists of two phases: static code analysis and dynamic scheduling of synchronizations. In the static analysis phase before simulation, it estimates minimum execution time from every point in the code to the nearest synchronization point. Then, during simulation, it pessimistically predicts the synchronization time-points based on the estimates. The proposed approach targets fast cycle-approximate simulation of a system with delay annotated SW code and transaction level models of HW with dynamic behavior. We present, in this paper, techniques to analyze such abstract models of SW and HW and schedule minimal number synchronizations during cycle-approximate simulation of the models. Experiments show that the approach achieves orders of magnitude higher performance in cycle-approximate multi-processor SoC simulation.", "paper_title": "Fast cycle-approximate MPSoC simulation based on synchronization time-point prediction", "paper_id": "WOS:000251650100001"}