{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "periodic_register"}, {"score": 0.04957680050135306, "phrase": "software_pipelining"}, {"score": 0.03783388231449635, "phrase": "minimal_number"}, {"score": 0.004583686207645165, "phrase": "periodic_schedules"}, {"score": 0.0045037997020733415, "phrase": "maxlive."}, {"score": 0.0044408896450445125, "phrase": "novel_formula"}, {"score": 0.004378854464130883, "phrase": "exact_number"}, {"score": 0.004287415750101536, "phrase": "scheduled_loop"}, {"score": 0.004081385289516914, "phrase": "polynomial_algorithm"}, {"score": 0.0037773674108196376, "phrase": "previous_result"}, {"score": 0.003483631502938922, "phrase": "initiation_interval"}, {"score": 0.0033044432971036652, "phrase": "zero_architectural_delays"}, {"score": 0.003212663446866794, "phrase": "sufficient_condition"}, {"score": 0.0030259817489390302, "phrase": "interesting_property"}, {"score": 0.002941913249957503, "phrase": "minimal_periodic_register_sufficiency"}, {"score": 0.002850116748762153, "phrase": "ii._fourth"}, {"score": 0.0027514668612638074, "phrase": "optimal_stage"}, {"score": 0.0027225413530200505, "phrase": "register_constraints"}, {"score": 0.002646880721119838, "phrase": "data_dependence_graphs"}, {"score": 0.00256531245688337, "phrase": "np"}, {"score": 0.002528379400564723, "phrase": "arbitrary_dependence_graphs"}, {"score": 0.0024581013157048926, "phrase": "previous_achievement"}, {"score": 0.0024066745849759706, "phrase": "data_dependence_trees"}, {"score": 0.0023070189467375374, "phrase": "cyclic_data_dependence_graphs"}, {"score": 0.002258745901862197, "phrase": "resource_constraints"}, {"score": 0.002142426911242168, "phrase": "future_software_pipeliners"}, {"score": 0.0021273762177807876, "phrase": "significant_performance_improvements"}], "paper_keywords": ["periodic register requirement", " MAXLIVE", " periodic register sufficiency", " software pipelining", " stage scheduling", " instruction-level parallelism"], "paper_abstract": "This paper presents several theoretical and fundamental results on the register need in periodic schedules, also known as MAXLIVE. Our first contribution is a novel formula for computing the exact number of registers needed by a scheduled loop. This formula has two advantages: Its computation can be done by using a polynomial algorithm with O(n lg n) complexity (n is the number of instructions in the loop) and it allows the generalization of a previous result [13]. Second, during software pipelining, we show that the minimal number of registers needed may increase when incrementing the initiation interval (II), which is contrary to intuition. For the case of zero architectural delays in accessing registers, we provide a sufficient condition for keeping the minimal number of registers from increasing when incrementing the II. Third, we prove an interesting property that enables us to optimally compute the minimal periodic register sufficiency of a loop for all its valid periodic schedules, irrespective of II. Fourth and last, we prove that the problem of optimal stage scheduling under register constraints is polynomially solvable for a subclass of data dependence graphs, whereas this problem is known to be NP-complete for arbitrary dependence graphs [7]. Our latter result generalizes a previous achievement [13] which addressed data dependence trees and forest of trees. In this study, we consider cyclic data dependence graphs without taking into account any resource constraints. The aim of our theoretical results on the periodic register need is to help current and future software pipeliners achieve significant performance improvements by making better (if not the best) use of the available resources.", "paper_title": "On the periodic register need in software pipelining", "paper_id": "WOS:000249594900005"}