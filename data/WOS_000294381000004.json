{"auto_keywords": [{"score": 0.03715668818702572, "phrase": "junit"}, {"score": 0.0313139485097421, "phrase": "test_cases"}, {"score": 0.014844689958668155, "phrase": "specific_points"}, {"score": 0.012303331864465764, "phrase": "new_behavior"}, {"score": 0.00481495049065317, "phrase": "pointcut_descriptors"}, {"score": 0.00478968045369969, "phrase": "aspectj._aspect-oriented_programming"}, {"score": 0.004764547712752326, "phrase": "aop"}, {"score": 0.004727081317938917, "phrase": "better_software_quality"}, {"score": 0.004702270260893693, "phrase": "enhanced_modularity"}, {"score": 0.004677588817740052, "phrase": "crosscutting_concerns"}, {"score": 0.004628612093713039, "phrase": "separate_units"}, {"score": 0.004508391992630655, "phrase": "base_program"}, {"score": 0.004484723599243358, "phrase": "compile_time"}, {"score": 0.00441445805214264, "phrase": "aspect-oriented_mechanisms"}, {"score": 0.004379737380744606, "phrase": "new_risks"}, {"score": 0.004288472456976113, "phrase": "specific_testing_techniques"}, {"score": 0.004111584914709491, "phrase": "pointcut_descriptor"}, {"score": 0.00398370478688858, "phrase": "base_program's_execution"}, {"score": 0.003952358633642862, "phrase": "crosscutting_concern"}, {"score": 0.0038597923599717463, "phrase": "pcd"}, {"score": 0.003819339842998955, "phrase": "ripple_effect"}, {"score": 0.0037102752163026866, "phrase": "unexpected_places"}, {"score": 0.0035665344993417603, "phrase": "aspect-oriented_programs"}, {"score": 0.003547794416056852, "phrase": "aspectj"}, {"score": 0.0032954891106214018, "phrase": "pcd."}, {"score": 0.0031929098985796814, "phrase": "complex_test_scenarios"}, {"score": 0.0031761255583359726, "phrase": "side_effects"}, {"score": 0.0030130446986008277, "phrase": "aspect-oriented_program"}, {"score": 0.0028962370433768267, "phrase": "advicetracer_tool"}, {"score": 0.002798662730881037, "phrase": "advice_executions"}, {"score": 0.0025452314655691165, "phrase": "pcd_test_cases"}, {"score": 0.00252517537784896, "phrase": "empirical_study"}, {"score": 0.002333084527546362, "phrase": "healthwatcher_system"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software testing", " aspect-oriented programming", " mutation analysis", " test oracle", " test framework"], "paper_abstract": "Aspect-oriented programming (AOP) promises better software quality through enhanced modularity. Crosscutting concerns are encapsulated in separate units called aspects and are introduced at specific points in the base program at compile time or runtime. However, aspect-oriented mechanisms also introduce new risks for reliability that must be tackled by specific testing techniques in order to fully benefit from the use of AOP. This paper focuses on the pointcut descriptor (PCD) that declares the set of points in the base program's execution where the crosscutting concern must be woven. A fault in the PCD can have a ripple effect and result in many different faults. New behavior may be added in unexpected places, or places where new behavior should be added may be missed. When implementing aspect-oriented programs with AspectJ, JUnit is most commonly used to test the program. However, JUnit does not offer any mechanism to look for faults specifically located in the PCD. As a consequence, these faults can be detected only through complex test scenarios and side effects that are difficult to trigger and observe. This paper proposes to monitor the execution of advices in an aspect-oriented program and use this information to build test cases that target faults in PCDs. The AdviceTracer tool has been developed to automatically monitor and store all information related to advice executions. It also offers a set of operations that can be used to check the presence or absence of advices at specific points in the execution. These operations improve the definition of an oracle for PCD test cases. An empirical study is performed to compare JUnit and AdviceTracer for testing PCDs in terms of the complexity of test cases and their ability to detect faults. The study is performed on a Healthwatcher system that has 93 classes and 19 PCDs. It reveals that test cases that use AdviceTracer to test PCDs are easier to write (shorter test cases and written in less time than with JUnit) and detect more faults. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "An approach for testing pointcut descriptors in AspectJ", "paper_id": "WOS:000294381000004"}