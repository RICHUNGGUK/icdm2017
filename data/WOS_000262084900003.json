{"auto_keywords": [{"score": 0.02812242802218053, "phrase": "microsoft"}, {"score": 0.00481495049065317, "phrase": "optimizing_reflective_primitives"}, {"score": 0.004757227624616643, "phrase": "dynamic_languages._dynamic_languages"}, {"score": 0.004588158931776543, "phrase": "software_engineering"}, {"score": 0.004398457709182882, "phrase": "specific_software_systems"}, {"score": 0.004345706062641742, "phrase": "different_example_scenarios"}, {"score": 0.004216566615939546, "phrase": "dynamic_aspect_oriented_software"}, {"score": 0.004091248980678087, "phrase": "adaptable_and_adaptive_software"}, {"score": 0.0038516336597530614, "phrase": "compile-time_error_detection"}, {"score": 0.0036700484729006136, "phrase": "runtime_performance"}, {"score": 0.003496994062890991, "phrase": "commercial_software_development"}, {"score": 0.0034342161742428635, "phrase": "jit_optimizing_compilation"}, {"score": 0.0033725614574134396, "phrase": "widely_used_technique"}, {"score": 0.0032920678776655783, "phrase": "intermediate_code_execution"}, {"score": 0.003117890043128058, "phrase": "dynamically_adaptive_platforms"}, {"score": 0.0029351141718104725, "phrase": "structural_reflective_primitives"}, {"score": 0.0028823939507764238, "phrase": "dynamic_languages"}, {"score": 0.002796616969627065, "phrase": "language-neutral_platform"}, {"score": 0.0027463775689957255, "phrase": "good_jit-based_run-time_performance"}, {"score": 0.002616762777413686, "phrase": "source_implementation"}, {"score": 0.0025697460140513932, "phrase": "cli."}, {"score": 0.002448446849997207, "phrase": "prototype-based_object-oriented_models"}, {"score": 0.0023470051993423483, "phrase": "class-based_one"}, {"score": 0.002209319719984651, "phrase": "jit_generation"}, {"score": 0.0021827653135510225, "phrase": "native_code"}, {"score": 0.002143529653780496, "phrase": "significantly_better_runtime_performance"}, {"score": 0.0021049977753042253, "phrase": "existing_implementations"}], "paper_keywords": ["Dynamic languages", " structural reflection", " prototype-based object-oriented computational model", " Shared Source Common Language Infrastructure", " Just In Time compilation", " abstract machine", " virtual machine"], "paper_abstract": "Dynamic languages are becoming widely used in software engineering due to the flexibility needs of specific software systems. Different example scenarios are the development of dynamic aspect oriented software, Web applications, adaptable and adaptive software or application frameworks. One important lack of these languages is compile-time error detection offered by static languages. However, runtime performance is the most serious limitation to use them in commercial software development. Although JIT optimizing compilation is a widely used technique to speed up intermediate code execution,this has not been successfully applied to dynamically adaptive platforms yet. We present an approach to improve the structural reflective primitives offered by dynamic languages. Looking for a language-neutral platform with a good JIT-based run-time performance, we have used the Microsoft shared source implementation of the CLI. Its model has been extended with semantics of prototype-based object-oriented models, much more suitable than the class-based one for reflective environments. This augmented semantics together with JIT generation of native code has produced significantly better runtime performance than the existing implementations.", "paper_title": "OPTIMIZING REFLECTIVE PRIMITIVES OF DYNAMIC LANGUAGES", "paper_id": "WOS:000262084900003"}