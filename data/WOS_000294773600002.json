{"auto_keywords": [{"score": 0.04660802533264657, "phrase": "global_sequence"}, {"score": 0.02526752565322718, "phrase": "controllable_test_cases"}, {"score": 0.00481495049065317, "phrase": "distributed_ports"}, {"score": 0.004792402101614527, "phrase": "distributed_systems"}, {"score": 0.004670251454002573, "phrase": "specific_ports"}, {"score": 0.003888597327207888, "phrase": "particular_objective"}, {"score": 0.003771631577951067, "phrase": "significant_delay"}, {"score": 0.0035648266669315943, "phrase": "global_system"}, {"score": 0.003531474887552889, "phrase": "state-based_notation"}, {"score": 0.003306559295382181, "phrase": "first_approach"}, {"score": 0.0031995142224983094, "phrase": "synchronization_points"}, {"score": 0.003066945490483524, "phrase": "second_approach"}, {"score": 0.002885066818322192, "phrase": "similar_expressive_power"}, {"score": 0.0028446460307503343, "phrase": "marked_states"}, {"score": 0.0027075691951575238, "phrase": "conservative_extension"}, {"score": 0.0026948629382851272, "phrase": "previous_implementation_relations"}, {"score": 0.002650857539177183, "phrase": "distributed_test_architecture"}, {"score": 0.0025349937214967553, "phrase": "single-port_systems"}, {"score": 0.0024356148906608025, "phrase": "multi-port_systems"}, {"score": 0.002340122847310599, "phrase": "local_tester"}, {"score": 0.002253662952588274, "phrase": "implementation_relation"}, {"score": 0.0021551222226685648, "phrase": "test_case"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["formal testing", " systems with distributed ports", " scenarios", " implementation relations", " controllable testing"], "paper_abstract": "Distributed systems are usually composed of several distributed components that communicate with their environment through specific ports. When testing such a system we separately observe sequences of inputs and outputs at each port rather than a global sequence and potentially cannot reconstruct the global sequence that occurred. Typically, the users of such a system cannot synchronize their actions during use or testing. However, the use of the system might correspond to a sequence of scenarios, where each scenario involves a sequence of interactions with the system that, for example, achieves a particular objective. When this is the case there is the potential for a significant delay between two scenarios and this effectively allows the users of the system to synchronize between scenarios. If we represent the specification of the global system by using a state-based notation, we say that a scenario is any sequence of events that happens between two of these operations. We can encode scenarios in two different ways. The first approach consists of marking some of the states of the specification to denote these synchronization points. It transpires that there are two ways to interpret such models and these lead to two implementation relations. The second approach consists of adding a set of traces to the specification to represent the traces that correspond to scenarios. We show that these two approaches have similar expressive power by providing an encoding from marked states to sets of traces. In order to assess the appropriateness of our new framework, we show that it represents a conservative extension of previous implementation relations defined in the context of the distributed test architecture: if we consider that all the states are marked then we simply obtain ioco (the classical relation for single-port systems) while if no state is marked then we obtain dioco (our previous relation for multi-port systems). Finally, we concentrate on the study of controllable test cases, that is, test cases such that each local tester knows exactly when to apply inputs. We give two notions of controllable test cases, define an implementation relation for each of these notions and relate them. We also show how we can decide whether a test case satisfies these conditions. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Scenarios-based testing of systems with distributed ports", "paper_id": "WOS:000294773600002"}