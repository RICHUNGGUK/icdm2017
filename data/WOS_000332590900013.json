{"auto_keywords": [{"score": 0.04592743081624462, "phrase": "state_graphs"}, {"score": 0.00481495049065317, "phrase": "software_trust_analysis"}, {"score": 0.004478782833067256, "phrase": "new_trusted_modeling_approach"}, {"score": 0.004267757384195032, "phrase": "novel_method"}, {"score": 0.004116012194714212, "phrase": "system_call_sequence"}, {"score": 0.004017846065981189, "phrase": "probability_and_statistics_theory"}, {"score": 0.0038749521906474593, "phrase": "state_sequence"}, {"score": 0.0037597491055035895, "phrase": "hidden_markov_model"}, {"score": 0.00360417515510547, "phrase": "state_transition_graph"}, {"score": 0.003539479990299223, "phrase": "software_executing_process_and_pruning_rules"}, {"score": 0.0034135407979996673, "phrase": "local_function_graphs"}, {"score": 0.003352256019007896, "phrase": "software_specific_functions"}, {"score": 0.003312009953245191, "phrase": "semantic_analysis"}, {"score": 0.0031367803372203498, "phrase": "basic_behaviors"}, {"score": 0.003080449000295983, "phrase": "upper_layer_functions"}, {"score": 0.0029887957779347394, "phrase": "semantic_faults"}, {"score": 0.0028823939507764238, "phrase": "pruning_strategy"}, {"score": 0.002680789041160613, "phrase": "software_functions"}, {"score": 0.002600995957987461, "phrase": "detecting_system"}, {"score": 0.0024632912250657636, "phrase": "case_study"}, {"score": 0.0024336917123957387, "phrase": "rss_software"}, {"score": 0.0022633993976138387, "phrase": "software_behaviors"}, {"score": 0.0021827653135510225, "phrase": "un-trust_behaviors"}, {"score": 0.0021049977753042253, "phrase": "illegal_input_behaviors"}], "paper_keywords": ["trust", " software behavior", " system call", " state-layer", " state graph"], "paper_abstract": "In this paper, we propose a new trusted modeling approach based on state graphs. We introduce a novel method of deriving state-layer from a system call sequence in terms of probability and statistics theory, and we identify the state sequence with the help of Hidden Markov Model (HMM). We generate state transition graph according to software executing process and pruning rules. Then, we separate local function graphs according to software specific functions by semantic analysis. The state-layer is a bridge between the basic behaviors and the upper layer functions of software to compensate semantic faults. In addition, a pruning strategy of formulating state graphs is designed to precisely describe each piece of software functions. Finally, a detecting system based on our model is proposed, and a case study of RSS software reveals how our system works. The results demonstrate that our trusted model describes software behaviors successfully and can well detect un-trust behaviors, anomaly behaviors, and illegal input behaviors.", "paper_title": "Research on Software Trust Analysis Based on Behavior", "paper_id": "WOS:000332590900013"}