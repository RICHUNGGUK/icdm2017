{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "k_mismatches"}, {"score": 0.004635187610736025, "phrase": "k-mismatches_problem"}, {"score": 0.004342430078306461, "phrase": "longest_substring"}, {"score": 0.004046020290832207, "phrase": "hamming_distance"}, {"score": 0.003219368413618912, "phrase": "matching_statistics"}, {"score": 0.0028249975318149468, "phrase": "theoretical_solution"}, {"score": 0.0022718781548970806, "phrase": "starikovskaya"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Combinatorial problems", " String algorithms", " Hamming distance", " Longest common substring"], "paper_abstract": "The longest common substring with k-mismatches problem is to find, given two strings S-1 and S-2, a longest substring A(1) of S-1 and A(2) of S-2 such that the Hamming distance between A(1) and A(2) is <= k. We introduce a practical O(nm) time and O(1) space solution for this problem, where n and m are the lengths of S-1 and S-2, respectively. This algorithm can also be used to compute the matching statistics with k-mismatches of S-1 and S-2 in O (nm) time and O(m) space. Moreover, we also present a theoretical solution for the k = 1 case which runs in O(n log m) time, assuming m <= n, and uses O(m) space, improving over the existing O(nm) time and O(m) space bound of Babenko and Starikovskaya [1]. (c) 2015 The Authors. Published by Elsevier B.V.", "paper_title": "Longest common substrings with k mismatches", "paper_id": "WOS:000353742700020"}