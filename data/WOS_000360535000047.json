{"auto_keywords": [{"score": 0.04785759495634684, "phrase": "data-race_exceptions"}, {"score": 0.03696404459804347, "phrase": "low-level_data-race_detectors"}, {"score": 0.03495219444469634, "phrase": "java"}, {"score": 0.02329340124633431, "phrase": "lard"}, {"score": 0.00481495049065317, "phrase": "language-level_data_races"}, {"score": 0.004426092397211699, "phrase": "ill_effects"}, {"score": 0.004379737380744606, "phrase": "data_races"}, {"score": 0.004311109608629196, "phrase": "slow_performance"}, {"score": 0.004265953661191515, "phrase": "accurate_dynamic_data-race_detection"}, {"score": 0.003941964605885606, "phrase": "accurate_low-level"}, {"score": 0.003623352647973122, "phrase": "performance_barrier"}, {"score": 0.003383475802364289, "phrase": "high-level_languages"}, {"score": 0.003226744277130179, "phrase": "true_data_races"}, {"score": 0.0031761255583359726, "phrase": "false_data_races"}, {"score": 0.0030130446986008277, "phrase": "low-level_data-race_detection"}, {"score": 0.0028734230458881903, "phrase": "low-level_abstractable_race_detection"}, {"score": 0.0025994945418484935, "phrase": "accurate_language-level_data-race_detection"}, {"score": 0.0024659480471085405, "phrase": "accurate_lard_data-race_exception_support"}, {"score": 0.0023891283748647416, "phrase": "modified_jikes_rvm_java_virtual_machine"}, {"score": 0.0022307779508260205, "phrase": "accurate_dynamic_java_data-race_detector"}, {"score": 0.0021385822825864425, "phrase": "naive_accurate_low-level_data-race_detectors"}], "paper_keywords": ["data-race detection", " data-race exceptions", " dynamic analysis", " run-time systems"], "paper_abstract": "Researchers have proposed always-on data-race exceptions as a way to avoid the ill effects of data races, but slow performance of accurate dynamic data-race detection remains a barrier to the adoption of always-on data-race exceptions. Proposals for accurate low-level (e.g., hardware) data-race detection have the potential to reduce this performance barrier. This paper explains why low-level data-race detectors are wrong for programs written in high-level languages (e.g., Java): they miss true data races and report false data races in these programs. To bring the benefits of low-level data-race detection to high-level languages, we design low-level abstractable race detection (LARD), an extension of the interface between low-level data-race detectors and run-time systems that enables accurate language-level data-race detection using low-level detection mechanisms. We implement accurate LARD data-race exception support for Java, coupling a modified Jikes RVM Java virtual machine and a simulated hardware race detector. We evaluate our detector's accuracy against an accurate dynamic Java data-race detector and other low-level race detectors without LARD, showing that naive accurate low-level data-race detectors suffer from many missed and false language-level races in practice, and that LARD prevents this inaccuracy.", "paper_title": "Low-Level Detection of Language-Level Data Races with LARD", "paper_id": "WOS:000360535000047"}