{"auto_keywords": [{"score": 0.027140291257134692, "phrase": "semantic_constraints"}, {"score": 0.00481495049065317, "phrase": "data_structures"}, {"score": 0.004762202897268383, "phrase": "task-based_priority_scheduling"}, {"score": 0.004241914481080374, "phrase": "p-relaxed_semantics"}, {"score": 0.003778253716938922, "phrase": "different_approaches"}, {"score": 0.0036553070575015344, "phrase": "upper_bounds"}, {"score": 0.003555902292752528, "phrase": "examined_nodes"}, {"score": 0.003459191419478298, "phrase": "priority_task_scheduling"}, {"score": 0.0033837135367113004, "phrase": "intuitive_and_easy_way"}, {"score": 0.003309877074892399, "phrase": "sssp_problem"}, {"score": 0.0031845067058084583, "phrase": "experimental_evidence"}, {"score": 0.003132236287543072, "phrase": "good_scalability"}, {"score": 0.0030808211830129304, "phrase": "resulting_algorithm"}, {"score": 0.003030247482854539, "phrase": "larger_aim"}, {"score": 0.0028360962841331634, "phrase": "priority_guarantees"}, {"score": 0.00280496585980086, "phrase": "task_scheduling_systems"}, {"score": 0.0026838147966444783, "phrase": "valuable_technique"}, {"score": 0.0022994427535192492, "phrase": "strong_priority_scheduling_guarantees"}, {"score": 0.002224510044064184, "phrase": "parameter_k."}, {"score": 0.0021520139248317333, "phrase": "even_more_scalable_data_structures"}, {"score": 0.0021049977753042253, "phrase": "weaker_form"}], "paper_keywords": ["Task-parallelism", " priority scheduling", " k-priority data structure", " work-stealing", " parallel single-source shortest paths"], "paper_abstract": "We present three lock-free data structures for priority task scheduling: a priority work-stealing one, a centralized one with p-relaxed semantics, and a hybrid one combining both concepts. With the single-source shortest path (SSSP) problem as example, we show how the different approaches affect the prioritization and provide upper bounds on the number of examined nodes. We argue that priority task scheduling allows for an intuitive and easy way to parallelize the SSSP problem, notoriously a hard task. Experimental evidence supports the good scalability of the resulting algorithm. The larger aim of this work is to understand the trade-offs between scalability and priority guarantees in task scheduling systems. We show that rho-relaxation is a valuable technique for improving the first, while still allowing semantic constraints to be satisfied: the lock-free, hybrid k-priority data structure can scale as well as work-stealing, while still providing strong priority scheduling guarantees, which depend on the parameter k. Our theoretical results open up possibilities for even more scalable data structures by adopting a weaker form of p-relaxation, which still enables the semantic constraints to be respected.", "paper_title": "Data Structures for Task-based Priority Scheduling", "paper_id": "WOS:000349142100037"}