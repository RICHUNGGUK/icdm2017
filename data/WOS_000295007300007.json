{"auto_keywords": [{"score": 0.026758392565224182, "phrase": "proposed_method"}, {"score": 0.015518194058481686, "phrase": "embedded_programmable_platform"}, {"score": 0.008118416335260597, "phrase": "conventional_methods"}, {"score": 0.00481495049065317, "phrase": "video_codecs"}, {"score": 0.004630150894006861, "phrase": "efficient_low-complexity_method"}, {"score": 0.004318894014193225, "phrase": "eob"}, {"score": 0.0037411604449359794, "phrase": "operational_mode"}, {"score": 0.003660614912817745, "phrase": "eob_point"}, {"score": 0.0035507457285983268, "phrase": "reduced_dimensional_sizes"}, {"score": 0.003340768341189764, "phrase": "computational_order"}, {"score": 0.0031023662967184216, "phrase": "computational_complexity"}, {"score": 0.0029961221584602405, "phrase": "determined_operational_mode"}, {"score": 0.0027581067089091434, "phrase": "column_manner"}, {"score": 0.002675252546913683, "phrase": "cycle-efficient_structures"}, {"score": 0.0025611773887867255, "phrase": "simulation_results"}, {"score": 0.0022967713922705, "phrase": "computational_time"}, {"score": 0.002218054404179068, "phrase": "fairly_increased_code_size"}, {"score": 0.0021049977753042253, "phrase": "low-complexity_computations"}], "paper_keywords": ["Computational complexity", " end-of-block point", " H.264/AVC", " inverse transform", " MPEG-2", " video coding"], "paper_abstract": "This work presents an efficient low-complexity method to compute a 2-D inverse transform flexibly adapted to its end-of-block (EOB) point and corner coefficients. First, the EOB point is obtained from a bitstream or derived from the other parameters. Second, the values of bottom-left and/or top-right corner coefficients before an EOB point are verified as zero or not. Third, the operational mode, based on the EOB point and corner coefficient value(s), determines the reduced dimensional sizes of 1-D inverse transforms in the row and column. Additionally, the computational order of row-after-column or column-after-row is decided to minimize computational complexity. Finally, a 2-D inverse transform at the determined operational mode is computed using simplified 1-D inverse transforms in a row-by-row and column-by-column manner. Particularly, how to implement cycle-efficient structures of inverse transforms in an embedded programmable platform is investigated. Simulation results demonstrate that the proposed method has less computational complexity than conventional methods when executing 2-D inverse transforms at MPEG-2 and H. 264/AVC video streams. Notably, the proposed method can reduce computational time required by conventional methods by 14.6%-92.9% at a fairly increased code size. Therefore, the proposed method is very suitable for various applications demanding low-complexity computations of inverse transforms.", "paper_title": "Low-Complexity Inverse Transforms of Video Codecs in an Embedded Programmable Platform", "paper_id": "WOS:000295007300007"}