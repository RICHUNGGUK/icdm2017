{"auto_keywords": [{"score": 0.040937157136485436, "phrase": "distributed_testing"}, {"score": 0.037158875120775335, "phrase": "m-complete_test_suite"}, {"score": 0.00481495049065317, "phrase": "complete_controllable_test_suites"}, {"score": 0.004678940805063634, "phrase": "test_suite"}, {"score": 0.004546755482549647, "phrase": "finite_state_machine"}, {"score": 0.004313996835376177, "phrase": "faulty_fsms"}, {"score": 0.004073590964805314, "phrase": "m-complete_test_suites"}, {"score": 0.003809932244103758, "phrase": "additional_controllability"}, {"score": 0.003773680962197766, "phrase": "observability_problems"}, {"score": 0.003702206069379459, "phrase": "previous_results"}, {"score": 0.003597514862052876, "phrase": "general_method"}, {"score": 0.003176899769744057, "phrase": "different_approach"}, {"score": 0.00290087451159631, "phrase": "fsm_n"}, {"score": 0.00276534038425712, "phrase": "controllable_testing"}, {"score": 0.0021354548458657465, "phrase": "fsm."}, {"score": 0.0021049977753042253, "phrase": "standard_test_suite_generation_methods"}], "paper_keywords": ["Software engineering/software/program verification", " software engineering/testing and debugging", " systems and software", " distributed testing", " test suite generation", " checking experiment"], "paper_abstract": "A test suite is m-complete for finite state machine (FSM) M if it distinguishes betweenM and all faulty FSMs with m states or fewer. While there are several algorithms that generate m-complete test suites, they cannot be directly used in distributed testing since there can be additional controllability and observability problems. Indeed, previous results show that there is no general method for generating an m-complete test suite for distributed testing and so the focus has been on conditions under which this is possible. This paper takes a different approach, which is to generate what we call c(m)-complete test suites: controllable test suites that distinguish an FSM N with no more than m states fromM if this is possible in controllable testing. Thus, under the hypothesis that the system under test has no more than m states, a c(m)-complete test suite achieves as much as is possible given the restriction that testing should be controllable. We show how the problem of generating a c(m)-complete test suite can be mapped to the problem of generating an m-complete test suite for a partial FSM. Thus, standard test suite generation methods can be adapted for use in distributed testing.", "paper_title": "Generating Complete Controllable Test Suites for Distributed Testing", "paper_id": "WOS:000351460000004"}