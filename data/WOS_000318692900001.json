{"auto_keywords": [{"score": 0.03373905846456357, "phrase": "workflow_representation"}, {"score": 0.00481495049065317, "phrase": "script_applications"}, {"score": 0.004641351004344458, "phrase": "complex_applications"}, {"score": 0.00458488025289647, "phrase": "grid_infrastructures"}, {"score": 0.004529093447865156, "phrase": "scientific_workflows"}, {"score": 0.004392565073466714, "phrase": "convenient_high-level_alternative"}, {"score": 0.004260134699483774, "phrase": "general-purpose_programming_languages"}, {"score": 0.00410645614623058, "phrase": "gridspace"}, {"score": 0.004031699976413366, "phrase": "collaborative_programming"}, {"score": 0.003982617095636925, "phrase": "execution_environment"}, {"score": 0.0038154673253945003, "phrase": "scripting_approach"}, {"score": 0.0037231102027070724, "phrase": "ruby_language"}, {"score": 0.0036553070575015344, "phrase": "high-level_api"}, {"score": 0.003545024951402818, "phrase": "remote_resources"}, {"score": 0.003253560798692431, "phrase": "gridspace_application_source_code"}, {"score": 0.002723607240517261, "phrase": "ruby_source_code"}, {"score": 0.002673957615079041, "phrase": "variable_and_method_dependencies"}, {"score": 0.0023079225317714815, "phrase": "complex_grid_application"}, {"score": 0.0022519745140925475, "phrase": "cybershake"}, {"score": 0.0022245107065724215, "phrase": "epigenomics"}, {"score": 0.0021973824033655275, "phrase": "montage"}, {"score": 0.0021049977753042253, "phrase": "typical_workflow_control"}], "paper_keywords": ["Ruby", " grid computing", " GridSpace", " workflow construction", " analysis of script applications"], "paper_abstract": "For programming and executing complex applications on grid infrastructures, scientific workflows have been proposed as convenient high-level alternative to solutions based on general-purpose programming languages, APIs and scripts. GridSpace is a collaborative programming and execution environment, which is based on a scripting approach and it extends Ruby language with a high-level API for invoking operations on remote resources. In this paper we describe a tool which enables to convert the GridSpace application source code into a workflow representation which, in turn, may be used for scheduling, provenance, or visualization. We describe how we addressed the issues of analyzing Ruby source code, resolving variable and method dependencies, as well as building workflow representation. The solutions to these problems have been developed and they were evaluated by testing them on complex grid application workflows such as CyberShake, Epigenomics and Montage. Evaluation is enriched by representing typical workflow control flow patterns.", "paper_title": "Constructing workflows from script applications", "paper_id": "WOS:000318692900001"}