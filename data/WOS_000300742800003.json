{"auto_keywords": [{"score": 0.026021744162527984, "phrase": "bsc"}, {"score": 0.00481495049065317, "phrase": "homogeneous_pipeline_based_applications"}, {"score": 0.004596295252559861, "phrase": "parallel_application's_structure"}, {"score": 0.0043875257506180865, "phrase": "skeleton_based_development_strategy"}, {"score": 0.004081385289516914, "phrase": "computational_problems"}, {"score": 0.0038959121068990517, "phrase": "support_tools"}, {"score": 0.0037769520261285872, "phrase": "development_cycle"}, {"score": 0.0035866734383189396, "phrase": "non-expert_programmers"}, {"score": 0.0034771228725942846, "phrase": "new_strategy"}, {"score": 0.003353521531649663, "phrase": "pipeline_applications"}, {"score": 0.0032510690712452147, "phrase": "dynamic_pipeline_mapping"}, {"score": 0.0031354779851351287, "phrase": "key_idea"}, {"score": 0.0030712749385664686, "phrase": "free_computational_resources"}, {"score": 0.0030083825666563898, "phrase": "pipeline's_fastest_stages"}, {"score": 0.0028715299874549245, "phrase": "slowest_stages"}, {"score": 0.0026161698049580804, "phrase": "pipe_stages"}, {"score": 0.0025100713447593773, "phrase": "optimal_mapping_algorithm"}, {"score": 0.0022749744354271816, "phrase": "significant_performance_improvements"}, {"score": 0.0022283519468680475, "phrase": "application_throughput"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Load balancing", " Performance", " Pipeline"], "paper_abstract": "We propose to use knowledge about a parallel application's structure that was acquired with the use of a skeleton based development strategy to dynamically improve its performance. Parallel/distributed programming provides the possibility of solving highly demanding computational problems. However, this type of application requires support tools in all phases of the development cycle because the implementation is extremely difficult, especially for non-expert programmers. This work shows a new strategy for dynamically improving the performance of pipeline applications. We call this approach Dynamic Pipeline Mapping (DPM), and the key idea is to have free computational resources by gathering the pipeline's fastest stages and then using these resources to replicate the slowest stages. We present two versions of this strategy, both with complexity O(Nlog(N)) on the number of pipe stages, and we compare them to an optimal mapping algorithm and to the Binary Search Closest (BSC) algorithm [1]. Our results show that the DPM leads to significant performance improvements, increasing the application throughput up to 40% on average. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Load balancing in homogeneous pipeline based applications", "paper_id": "WOS:000300742800003"}