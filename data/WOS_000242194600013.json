{"auto_keywords": [{"score": 0.03960768973469089, "phrase": "abstract_data-types"}, {"score": 0.00481495049065317, "phrase": "array_split_obfuscation"}, {"score": 0.00464976086880886, "phrase": "behaviour-preserving_program_transformation"}, {"score": 0.004138813595009761, "phrase": "reverse_engineering"}, {"score": 0.004090901264701185, "phrase": "object-oriented_programs"}, {"score": 0.003837089839193524, "phrase": "fresh_approach"}, {"score": 0.003662410853488772, "phrase": "structure-dependent_obfuscations"}, {"score": 0.003093054709625219, "phrase": "data-type_operations"}, {"score": 0.00280126189041041, "phrase": "imperative_obfuscation_-_an_array"}, {"score": 0.0025816953009851072, "phrase": "specific_examples"}, {"score": 0.002310915790114425, "phrase": "obfuscated_operations"}, {"score": 0.0021927323694667694, "phrase": "random_obfuscations"}], "paper_keywords": ["obfuscation", " abstract data-types", " functional programming", " generalising"], "paper_abstract": "An obfuscation is a behaviour-preserving program transformation whose aim is to make a program \"harder to understand\". Obfuscations are mainly applied to make reverse engineering of object-oriented programs more difficult. In this paper, we propose a fresh approach by obfuscating abstract data-types allowing us to develop structure-dependent obfuscations that would otherwise (traditionally) not be available. We regard obfuscation as data refinement enabling us to produce equations for proving correctness. We model the data-type operations as functional programs making our proofs easy to construct. We show how we can generalise an imperative obfuscation - an array split - so that we can apply it to abstract data-types and we give specific examples for lists and matrices. We develop a theorem which allows us, under certain conditions, to produce obfuscated operations directly. Our approach also allows us to produce random obfuscations and we give an example for our list data-type. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Generalising the array split obfuscation", "paper_id": "WOS:000242194600013"}