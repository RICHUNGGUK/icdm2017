{"auto_keywords": [{"score": 0.0466435239499027, "phrase": "query_q"}, {"score": 0.03328384181526809, "phrase": "backward_axes"}, {"score": 0.00481495049065317, "phrase": "xml_querying_using_type-based_document_projection"}, {"score": 0.004588891098290524, "phrase": "natural_optimization"}, {"score": 0.004548939310612501, "phrase": "main_memory_query_engines"}, {"score": 0.0044118153390803405, "phrase": "document_d"}, {"score": 0.00406001734835979, "phrase": "smaller_document_d"}, {"score": 0.003769006950727621, "phrase": "process_nodes"}, {"score": 0.003655586382774902, "phrase": "q."}, {"score": 0.003529543381704363, "phrase": "new_approach"}, {"score": 0.003393206299636482, "phrase": "current_solutions"}, {"score": 0.003334309053314909, "phrase": "comparable_or_greater_precision"}, {"score": 0.003305243635051068, "phrase": "far_lesser_pruning_overhead"}, {"score": 0.003219553875143356, "phrase": "current_approaches"}, {"score": 0.0030281251520610604, "phrase": "multiple_queries"}, {"score": 0.002962543869356265, "phrase": "single_ones"}, {"score": 0.002923876831533028, "phrase": "side_contribution"}, {"score": 0.0028857130140890787, "phrase": "new_type_system"}, {"score": 0.0025192983141887285, "phrase": "best_possible_type-driven_pruning"}, {"score": 0.0024219097191832926, "phrase": "schemas"}, {"score": 0.002218668420806254, "phrase": "main_memory_query_engine's_performances"}, {"score": 0.0021049977753042253, "phrase": "art_native_xml_databases"}], "paper_keywords": ["Languages", " Theory", " XML", " Type projection", " document pruning", " query optimization", " type systems"], "paper_abstract": "XML data projection (or pruning) is a natural optimization for main memory query engines: given a query Q over a document D, the subtrees of D that are not necessary to evaluate Q are pruned, thus producing a smaller document D'; the query Q is then executed on D', hence avoiding to allocate and process nodes that will never be reached by Q. In this article, we propose a new approach, based on types, that greatly improves current solutions. Besides providing comparable or greater precision and far lesser pruning overhead, our solution-unlike current approaches-takes into account backward axes, predicates, and can be applied to multiple queries rather than just to single ones. A side contribution is a new type system for XPath able to handle backward axes. The soundness of our approach is formally proved. Furthermore, we prove that the approach is also complete (i.e., yields the best possible type-driven pruning) for a relevant class of queries and Schemas. We further validate our approach using the XMark and XPathMark benchmarks and show that pruning not only improves the main memory query engine's performances (as expected) but also those of state of the art native XML databases.", "paper_title": "Optimizing XML Querying Using Type-Based Document Projection", "paper_id": "WOS:000318265000004"}