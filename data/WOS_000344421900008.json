{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "design_patterns"}, {"score": 0.01158615716896308, "phrase": "software_system"}, {"score": 0.006729998999335933, "phrase": "design_pattern"}, {"score": 0.005307264951517642, "phrase": "aop"}, {"score": 0.004963102185551356, "phrase": "aop_models"}, {"score": 0.004742113322179817, "phrase": "quantitative_study"}, {"score": 0.004584896210675476, "phrase": "pattern_composition"}, {"score": 0.004367333454187657, "phrase": "multiple_pattern_elements"}, {"score": 0.004340774889203221, "phrase": "overlapping_sets"}, {"score": 0.00410886951639144, "phrase": "source_code"}, {"score": 0.003973267259774664, "phrase": "classes'_core_responsibilities"}, {"score": 0.003559884222226099, "phrase": "isolated_manner"}, {"score": 0.0035382184560822437, "phrase": "previous_studies"}, {"score": 0.0035059659238897644, "phrase": "design_pattern_implementations"}, {"score": 0.0034528614466646625, "phrase": "object-oriented_systems"}, {"score": 0.0033185114695278226, "phrase": "aspect-oriented_programming"}, {"score": 0.003218721776850253, "phrase": "natural_alternative"}, {"score": 0.0030372887922081706, "phrase": "widely_used_design_patterns"}, {"score": 0.0029190612790772675, "phrase": "gang-of-four_design_patterns"}, {"score": 0.002655354052673793, "phrase": "java"}, {"score": 0.0025597362836527705, "phrase": "complex_situations"}, {"score": 0.0023355154605700095, "phrase": "pattern_composability"}, {"score": 0.002210502984649107, "phrase": "aspecti_idioms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Design patterns", " Aspect-oriented programming", " Composability", " Empirical studies", " Metrics"], "paper_abstract": "Design patterns often need to be blended (or composed) when they are instantiated in a software system. The composition of design patterns consists of assigning multiple pattern elements into overlapping sets of classes in a software system. Whenever the modularity of each design pattern is not preserved in the source code, their implementation becomes tangled with each other and with the classes' core responsibilities. As a consequence, the change or removal of each design pattern will be costly or prohibitive as the software system evolves. In fact, composing design patterns is much harder than instantiating them in an isolated manner. Previous studies have found design pattern implementations are naturally crosscutting in object-oriented systems, thereby making it difficult to modularly compose them. Therefore, aspect-oriented programming (AOP) has been pointed out as a natural alternative for modularizing and blending design patterns. However, there is little empirical knowledge on how AOP models influence the composability of widely used design patterns. This paper investigates the influence of using AOP models for composing the Gang-of-Four design patterns. Our study categorizes different forms of pattern composition and studies the benefits and drawbacks of AOP in these contexts. We performed assessments of several pair-wise compositions taken from 3 medium-sized systems implemented in Java and two AOP models, namely, AspectJ and Compose*. We also considered complex situations where more than two patterns involved in each composition, and the patterns were interacting with other aspects implementing other crosscutting concerns of the system. In general, we observed two dominant factors impacting the pattern composability with AOP: (i) the category of the pattern composition, and (ii) the Aspecti idioms used to implement the design patterns taking part in the composition. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Blending design patterns with aspects: A quantitative study", "paper_id": "WOS:000344421900008"}