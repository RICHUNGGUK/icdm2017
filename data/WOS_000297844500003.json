{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fault_links"}, {"score": 0.019281036269613715, "phrase": "fault_link_information"}, {"score": 0.008677784607066714, "phrase": "code_reviews"}, {"score": 0.004632039024076267, "phrase": "code_faults"}, {"score": 0.004195418010131832, "phrase": "fault_link"}, {"score": 0.004141575435071002, "phrase": "controller_components"}, {"score": 0.004035946043145475, "phrase": "unreachable_code"}, {"score": 0.003751011827704279, "phrase": "fault_seeding"}, {"score": 0.003267925215811654, "phrase": "first_experiment"}, {"score": 0.0029722900280316216, "phrase": "java_component"}, {"score": 0.002934098412396701, "phrase": "online_course_management_application"}, {"score": 0.0027982016314450717, "phrase": "second_java_component"}, {"score": 0.0027150087516999047, "phrase": "second_experiment"}, {"score": 0.0023650305205893353, "phrase": "java_components"}, {"score": 0.0021695394558562927, "phrase": "control_group"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["fault taxonomy", " code inspections", " defect-based analysis", " fault-based analysis", " fault link"], "paper_abstract": "Fault links represent relationships between the types of code faults, or defects, and the types of components in which faults are detected. For example, our prior work validated that a fault link exists between Controller components and Control/Logic faults (such as unreachable code). Fault link information can guide code reviews, walkthroughs, testing, maintenance, and can advise fault seeding. In this paper, we use fault links to augment code reviews. Two experiments were undertaken to evaluate the usefulness of fault links, one with 26 Computer Science students and another with 24 software engineering professionals. The first experiment showed that fault link information assisted in finding more total defects and more hard to detect defects, in the same amount of time, in a Java component of an online course management application. The experiment was repeated with professionals, adding a second Java component from the same application. For the second experiment, more total defects were found by the participants using fault link information for one of the two components and more hard to detect defects were found, in the same amount of time, in both Java components. The group using fault link information for code walkthroughs found, on average, 1.7-2 times more faults and 23 times more hard faults than the control group. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Improved code defect detection with fault links", "paper_id": "WOS:000297844500003"}