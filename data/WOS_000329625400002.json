{"auto_keywords": [{"score": 0.013296027779533892, "phrase": "dynamic_layer_addition"}, {"score": 0.00481495049065317, "phrase": "type-safe_and_context-based_behavior_adaptation"}, {"score": 0.004610058444728656, "phrase": "mobile_and_ubiquitous_computing"}, {"score": 0.004350308086118336, "phrase": "context-oriented_programming"}, {"score": 0.004308482425680457, "phrase": "cop"}, {"score": 0.004225950334493496, "phrase": "dynamic_behavior_adaptation"}, {"score": 0.003855034057431947, "phrase": "runtime_adaptation"}, {"score": 0.0038179283509963695, "phrase": "application_behavior"}, {"score": 0.003744780941673966, "phrase": "unpredictable_execution_environments"}, {"score": 0.003637669525737665, "phrase": "block-structured_constructs"}, {"score": 0.0035336109352157763, "phrase": "fine-grain_adaptation"}, {"score": 0.0033830587647810132, "phrase": "context-specific_methods"}, {"score": 0.00320770578058916, "phrase": "virtual_machine"}, {"score": 0.0030414140732789186, "phrase": "object_composition"}, {"score": 0.002968721023376411, "phrase": "vm"}, {"score": 0.002925899335792914, "phrase": "layer_activation"}, {"score": 0.002869793011316547, "phrase": "existing_vm_services"}, {"score": 0.0027209713296448296, "phrase": "type_safety_properties"}, {"score": 0.002579847272930948, "phrase": "featherweight_java"}, {"score": 0.002446024708601971, "phrase": "type-checking_issues"}, {"score": 0.0023990982005125763, "phrase": "type_soundness"}, {"score": 0.002135812692862058, "phrase": "compilerbased_approach"}, {"score": 0.0021049977753042253, "phrase": "jcop."}], "paper_keywords": ["context-oriented programming", " object composition", " delegation", " featherweight Java", " type system"], "paper_abstract": "Context-awareness is becoming critical for mobile and ubiquitous computing, where the application needs dynamically adapt its behavior to its execution environment. Context-oriented programming (COP) languages support dynamic behavior adaptation, however, they do not support dynamic layer addition. As a result, they provide little support for the runtime adaptation of application behavior in case that unpredictable execution environments are encountered. Furthermore, block-structured constructs for layer activation hardly support fine-grain adaptation and separate changes of contexts and execution of context-specific methods with difficulty. In this paper, we propose a virtual machine (VM)-centric approach to address these issues. It incorporates object composition and delegation into the VM to implement layer activation, and extends existing VM services to support dynamic layer addition. To ensure that our approach preserves the type safety properties of the program, we develop a calculus built on featherweight Java (FJ) to describe the approach, focus on type-checking issues, and prove type soundness of the calculus. We also present the implementation and evaluation of our approach. The evaluation demonstrates that our approach has advantages over the compilerbased approach proposed by JCOP.", "paper_title": "Runtime support for type-safe and context-based behavior adaptation", "paper_id": "WOS:000329625400002"}