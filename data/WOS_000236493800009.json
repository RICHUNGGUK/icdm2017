{"auto_keywords": [{"score": 0.04694254107875594, "phrase": "aspectj"}, {"score": 0.005685066846755484, "phrase": "polyglot"}, {"score": 0.00481495049065317, "phrase": "aspect-oriented_programming_languages"}, {"score": 0.004677372885331908, "phrase": "easy_experimentation"}, {"score": 0.004632388761885302, "phrase": "new_language_features"}, {"score": 0.004587835274176236, "phrase": "implementation_techniques"}, {"score": 0.0038737214010638745, "phrase": "full_aspectj_language"}, {"score": 0.003744780941673966, "phrase": "polyglot_framework"}, {"score": 0.0036730297909962142, "phrase": "modular_extension"}, {"score": 0.0036201167891046046, "phrase": "java_language"}, {"score": 0.0034325187732054093, "phrase": "type_checking"}, {"score": 0.0033830587647810132, "phrase": "back_end"}, {"score": 0.0033021988455635403, "phrase": "soot_framework"}, {"score": 0.0032389001343643064, "phrase": "modular_code_generation"}, {"score": 0.002828418443899226, "phrase": "general_overview"}, {"score": 0.0026430660986106955, "phrase": "extension_mechanisms"}, {"score": 0.0024578987081792405, "phrase": "design_goals"}, {"score": 0.0023759728305710365, "phrase": "original_aspectj_compiler"}, {"score": 0.002319127685733821, "phrase": "different_goals"}, {"score": 0.002274630121183437, "phrase": "different_design_decisions"}, {"score": 0.0021049977753042253, "phrase": "interesting_ways"}], "paper_keywords": [""], "paper_abstract": "Research in the design of aspect-oriented programming languages requires a workbench that facilitates easy experimentation with new language features and implementation techniques. In particular, new features for AspectJ have been proposed that require extensions in many dimensions: syntax, type checking and code generation, as well as data flow and control flow analyses. The AspectBench Compiler (abc) is an implementation of such a workbench. The base version of abc implements the full AspectJ language. Its front end is built using the Polyglot framework, as a modular extension of the Java language. The use of Polyglot gives flexibility of syntax and type checking. The back end is built using the Soot framework, to give modular code generation and analyses. In this paper, we outline the design of abc, focusing mostly on how the design supports extensibility. We then provide a general overview of how to use abc to implement an extension. We illustrate the extension mechanisms of abc through a number of small, but nontrivial, examples. We then proceed to contrast the design goals of abc with those of the original AspectJ compiler, and how these different goals have led to different design decisions. Finally, we review a few examples of projects by others that extend abc in interesting ways.", "paper_title": "abc: An extensible AspectJ compiler", "paper_id": "WOS:000236493800009"}