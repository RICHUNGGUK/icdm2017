{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "interaction_graphs"}, {"score": 0.004356535752468849, "phrase": "social_media"}, {"score": 0.004198010835867604, "phrase": "temporally_evolving_graph"}, {"score": 0.003941592232278979, "phrase": "important_feature"}, {"score": 0.0037145284903339327, "phrase": "new_interactions"}, {"score": 0.003423445743298995, "phrase": "temporal_queries"}, {"score": 0.0031786037839399055, "phrase": "traditional_graph_layout"}, {"score": 0.0028969560940141233, "phrase": "recent_interactions"}, {"score": 0.0028121943702224326, "phrase": "expired_interactions"}, {"score": 0.002791393223133408, "phrase": "disk_blocks"}, {"score": 0.0024879169065840493, "phrase": "temporal_and_spatial_locality"}, {"score": 0.0024240794798626674, "phrase": "storage_layout"}, {"score": 0.002370663905320869, "phrase": "query_performance"}, {"score": 0.0022757667100089243, "phrase": "real-world_interaction_graphs"}, {"score": 0.0021927897271015657, "phrase": "temporal_neighborhood_queries"}], "paper_keywords": ["Interaction graphs", " storage and querying", " disk layout"], "paper_abstract": "In our increasingly connected and instrumented world, live data recording the interactions between people, systems, and the environment is available in various domains, such as telecommunciations and social media. This data often takes the form of a temporally evolving graph, where entities are the vertices and the interactions between them are the edges. An important feature of this graph is that the number of edges it has grows continuously, as new interactions take place. We call such graphs interaction graphs. In this paper we study the problem of storing interaction graphs such that temporal queries on them can be answered efficiently. Since interaction graphs are append-only and edges are added continuously, traditional graph layout and storage algorithms that are batch based cannot be applied directly. We present the design and implementation of a system that caches recent interactions in memory, while quickly placing the expired interactions to disk blocks such that those edges that are likely to be accessed together are placed together. We develop live block formation algorithms that are fast, yet can take advantage of temporal and spatial locality among the edges to optimize the storage layout with the goal of improving query performance. We evaluate the system on synthetic as well as real-world interaction graphs, and show that our block formation algorithms are effective for answering temporal neighborhood queries on the graph. Such queries form a foundation for building more complex online and offline temporal analytics on interaction graphs.", "paper_title": "Disk-Based Management of Interaction Graphs", "paper_id": "WOS:000343607500008"}