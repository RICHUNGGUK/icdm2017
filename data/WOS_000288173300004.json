{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parallelizing_object-oriented_applications"}, {"score": 0.004646258518859209, "phrase": "multi-core_processors"}, {"score": 0.004591345494188032, "phrase": "desktop_application_developers"}, {"score": 0.004483450050677258, "phrase": "parallel_computing"}, {"score": 0.004352123742308589, "phrase": "large_portion"}, {"score": 0.004275173711009189, "phrase": "computational_load"}, {"score": 0.004125314447335291, "phrase": "iterative_computations"}, {"score": 0.004052358316137446, "phrase": "object-oriented_languages"}, {"score": 0.003795677450778112, "phrase": "parallel_programming"}, {"score": 0.0036625643243684827, "phrase": "powerful_parallel_iterator_concept"}, {"score": 0.0035551969986263553, "phrase": "object-oriented_programs"}, {"score": 0.0034922880300145283, "phrase": "parallel_traversal"}, {"score": 0.003232254571848865, "phrase": "collection_type"}, {"score": 0.002852356597632014, "phrase": "additional_features"}, {"score": 0.002768674345336861, "phrase": "early_termination"}, {"score": 0.0027358910467781155, "phrase": "parallel_loops"}, {"score": 0.0027034948760997564, "phrase": "exception_handling"}, {"score": 0.0025471636425006155, "phrase": "slight_contract_modification"}, {"score": 0.002428617044669043, "phrase": "java-style_sequential_iterator"}, {"score": 0.002142970278347126, "phrase": "negligible_overhead"}, {"score": 0.0021049977753042253, "phrase": "expected_inherent_speedup"}], "paper_keywords": ["Object-oriented", " Desktop applications", " Parallel Iterator", " Loop scheduling"], "paper_abstract": "With the advent of multi-core processors, desktop application developers must finally face parallel computing and its challenges. A large portion of the computational load in a program rests within iterative computations. In object-oriented languages these are commonly handled using iterators which are inadequate for parallel programming. This paper presents a powerful Parallel Iterator concept to be used in object-oriented programs for the parallel traversal of a collection of elements. The Parallel Iterator may be used with any collection type (even those inherently sequential) and it supports several scheduling schemes which may even be decided dynamically at run-time. Some additional features are provided to allow early termination of parallel loops, exception handling and a solution for performing reductions. With a slight contract modification, the Parallel Iterator interface imitates that of the Java-style sequential iterator. All these features combine together to promote minimal, if any, code restructuring. Along with the ease of use, the results reveal negligible overhead and the expected inherent speedup.", "paper_title": "Parallel Iterator for Parallelizing Object-Oriented Applications", "paper_id": "WOS:000288173300004"}