{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "n_processes"}, {"score": 0.04470084024304315, "phrase": "multi-writer_multi-reader"}, {"score": 0.004642292792558686, "phrase": "large_space"}, {"score": 0.004315249628884236, "phrase": "linear_number"}, {"score": 0.003849579089885659, "phrase": "read-write_wait-free_solvable_problem"}, {"score": 0.0037454814403672697, "phrase": "existing_possible_solution"}, {"score": 0.0036944890904337833, "phrase": "adaptive_algorithms"}, {"score": 0.00349734405943853, "phrase": "sufficiency_result"}, {"score": 0.0032358709481309913, "phrase": "single-writer_multi-reader"}, {"score": 0.002993887707344862, "phrase": "necessity_result"}, {"score": 0.0027573101010593863, "phrase": "wait-free_emulation"}, {"score": 0.0025627194819793347, "phrase": "infinite_sequence"}, {"score": 0.00243694486220507, "phrase": "previous_task's_outputs"}, {"score": 0.002360132221690264, "phrase": "next_task"}, {"score": 0.0023173287402646577, "phrase": "non-blocking_emulation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Shared memory", " Read/write registers", " Distributed algorithms", " Wait-free computing", " Space complexity", " Renaming"], "paper_abstract": "Consider a system of n processes with ids that are drawn from a large space. How can these n processes communicate to solve a problem? It is shown that linear number of Multi-Writer Multi-Reader (MWMR) registers are sufficient to solve any read-write wait-free solvable problem and needed to solve some read-write wait-free solvable problem. This contrasts with the existing possible solution borrowed from adaptive algorithms that require Theta(n(3/2)) MWMR registers. To obtain the sufficiency result, the paper shows how the processes can non-blocking emulate a system of n Single-Writer Multi-Reader (SWMR) registers on top of n Multi-Writer Multi-Reader (MWMR) registers. For the necessity result, it shows it is impossible to do such an emulation with n - 1 MWMR registers. The paper also presents a wait-free emulation, using 2n - 1 rather than just n registers. The emulation can be used to solve an infinite sequence of tasks that are sequentially dependent (processes need the previous task's outputs in order to proceed to the next task). A non-blocking emulation cannot be used in this case, because it might starve a process forever. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Linear space bootstrap communication schemes", "paper_id": "WOS:000347601700005"}