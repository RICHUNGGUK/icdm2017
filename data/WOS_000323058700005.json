{"auto_keywords": [{"score": 0.032027285136601864, "phrase": "efficiency_loss"}, {"score": 0.03165905527472958, "phrase": "collaborating_servers"}, {"score": 0.00481495049065317, "phrase": "markovian_system"}, {"score": 0.004646258518859209, "phrase": "finite_intermediate_buffer"}, {"score": 0.0035977623578676496, "phrase": "system_throughput"}, {"score": 0.0034715658596258018, "phrase": "optimal_policy"}, {"score": 0.0026241684260044414, "phrase": "threshold_policy"}, {"score": 0.002593091742792519, "phrase": "dominant_server"}, {"score": 0.002357337046408753, "phrase": "faster_server"}, {"score": 0.002168664249034289, "phrase": "first_station"}, {"score": 0.0021049977753042253, "phrase": "second_station"}], "paper_keywords": ["Flexible servers", " Server collaboration", " Tandem queues", " Throughput maximization", " Markov decision processes"], "paper_abstract": "Consider a Markovian system of two stations in tandem with finite intermediate buffer and two servers. The servers are heterogeneous, flexible, and more efficient when they work on their own than when they collaborate. We determine how the servers should be assigned dynamically to the stations with the goal of maximizing the system throughput. We show that the optimal policy depends on whether or not one server is dominant (i.e., faster at both stations) and on the magnitude of the efficiency loss of collaborating servers. In particular, if one server is dominant then he must divide his time between the two stations, and we identify the threshold policy the dominant server should use; otherwise each server should focus on the station where he is the faster server. In all cases, servers only collaborate to avoid idleness when the first station is blocked or the second station is starved, and we determine when collaboration is preferable to idleness as a function of the efficiency loss of collaborating servers.", "paper_title": "Optimal assignment of servers to tasks when collaboration is inefficient", "paper_id": "WOS:000323058700005"}