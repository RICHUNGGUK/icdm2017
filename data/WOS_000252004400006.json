{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "ca"}, {"score": 0.027652543458835537, "phrase": "genetic_programming"}, {"score": 0.00481495049065317, "phrase": "structural_identification"}, {"score": 0.004739773204474094, "phrase": "cellular_automata"}, {"score": 0.0042452552248398445, "phrase": "local_state_transition_rules"}, {"score": 0.003832198214757852, "phrase": "pre-specified_global_task"}, {"score": 0.003541923233726252, "phrase": "usual_microscopic_specification"}, {"score": 0.003378385493203297, "phrase": "appropriate_description"}, {"score": 0.0030494153169181334, "phrase": "best_state_transition_rules"}, {"score": 0.002931569771634119, "phrase": "corresponding_neighbourhood"}, {"score": 0.002464709648714996, "phrase": "classical_genetic_algorithms"}, {"score": 0.002407078478216306, "phrase": "computer_programs"}, {"score": 0.002242127152093798, "phrase": "introduced_ideas"}, {"score": 0.002155412043665635, "phrase": "simulation_examples"}, {"score": 0.0021049977753042253, "phrase": "one-dimensional_density_and_synchronization_problems"}], "paper_keywords": [""], "paper_abstract": "As is well-known, it is very hard to design local state transition rules in cellular automata (CA's) in order to perform a pre-specified global task, as it is difficult to pass from the usual microscopic specification of the automaton to an appropriate description of its global behaviour. Our paper aims at demonstrating a possibility of finding the best state transition rules, along with the corresponding neighbourhood, in order for a CA to accomplish a given assignment, by means of genetic programming. Genetic programming is an extension of classical genetic algorithms in which computer programs are genetically bred to solve problems. The introduced ideas are illustrated by some simulation examples regarding solving one-dimensional density and synchronization problems.", "paper_title": "A genetic programming approach to structural identification of cellular automata", "paper_id": "WOS:000252004400006"}