{"auto_keywords": [{"score": 0.025213113489078853, "phrase": "pursuit-evasion_problems"}, {"score": 0.00481495049065317, "phrase": "graph-based_pursuit_evasion"}, {"score": 0.0047273577269638725, "phrase": "classical_edge-searching_pursuit-evasion_problem"}, {"score": 0.004523552067565685, "phrase": "fast-moving_evaders"}, {"score": 0.004328494656899359, "phrase": "cave_system"}, {"score": 0.003536346954940087, "phrase": "minimum_task-completion_time"}, {"score": 0.003334309053314909, "phrase": "vertex_connectivity"}, {"score": 0.0030414140732789186, "phrase": "limited_number"}, {"score": 0.002942373803701752, "phrase": "low_treewidth"}, {"score": 0.002857041057269513, "phrase": "optimal_polynomial-time_algorithm"}, {"score": 0.002825681384008326, "phrase": "clearthetree"}, {"score": 0.0026348886455716614, "phrase": "minimum_robot_problem"}, {"score": 0.0026155681847364483, "phrase": "unit-width_unit-length_trees"}, {"score": 0.002502576987281976, "phrase": "arbitrary-length_and_unit-length_arbitrary-width_graphs"}, {"score": 0.00238565827614317, "phrase": "graph_topologies"}, {"score": 0.0023421547766273036, "phrase": "former_graphs"}, {"score": 0.0022741894748181243, "phrase": "latter_graphs"}, {"score": 0.002224510044064184, "phrase": "minimum_robot"}, {"score": 0.0021679176844660074, "phrase": "polynomial_time"}, {"score": 0.0021520139248317333, "phrase": "unit-width_arbitrary-length_trees"}, {"score": 0.002137098367794664, "phrase": "np"}, {"score": 0.0021049977753042253, "phrase": "unit-length_arbitrary-width_trees"}], "paper_keywords": ["Pursuit evasion", " Edge search", " Graph search", " NP-complete", " Algorithm", " Tree"], "paper_abstract": "We study the classical edge-searching pursuit-evasion problem where a number of pursuers have to clear a given graph of fast-moving evaders despite poor visibility, for example, where robots search a cave system to ensure that no terrorists are hiding in it. We study when polynomial-time algorithms exist to determine how many robots are needed to clear a given graph (minimum robot problem) and how a given number of robots should move on the graph to clear it with either a minimum sum of their travel distances (minimum distance problem) or minimum task-completion time (minimum time problem). The robots cannot clear a graph if the vertex connectivity of some part of the graph exceeds the number of robots. Researchers therefore focus on graphs whose subgraphs can always be cut at a limited number of vertices, that is, graphs of low treewidth, typically trees. We describe an optimal polynomial-time algorithm, called CLEARTHETREE, that is shorter and algorithmically simpler than the state-of-the-art algorithm for the minimum robot problem on unit-width unit-length trees. We then generalize prior research to both unit-width arbitrary-length and unit-length arbitrary-width graphs and derive both algorithms and time complexity results for a variety of graph topologies. Pursuit-evasion problems on the former graphs are generally simpler than pursuit-evasion problems on the latter graphs. For example, the minimum robot and distance problems are solvable in polynomial time on unit-width arbitrary-length trees but NP-hard on unit-length arbitrary-width trees.", "paper_title": "Algorithms and complexity results for graph-based pursuit evasion", "paper_id": "WOS:000298632900003"}