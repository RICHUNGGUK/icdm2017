{"auto_keywords": [{"score": 0.04300723495941336, "phrase": "delta_modules"}, {"score": 0.009910094830746882, "phrase": "product_line"}, {"score": 0.009652407790708615, "phrase": "code_base"}, {"score": 0.009500992090881797, "phrase": "product_line_declaration"}, {"score": 0.00481495049065317, "phrase": "delta-oriented_software_product_lines"}, {"score": 0.004764220976404241, "phrase": "delta-oriented"}, {"score": 0.004664352260912174, "phrase": "compositional_approach"}, {"score": 0.004566567411073082, "phrase": "software_product_lines"}, {"score": 0.004021267064832957, "phrase": "object-oriented_programs"}, {"score": 0.003957833102043277, "phrase": "particular_product"}, {"score": 0.0038953958723049287, "phrase": "delta-oriented_product_line"}, {"score": 0.0036942726653704213, "phrase": "suitable_delta_modules"}, {"score": 0.0036359780843400625, "phrase": "empty_program"}, {"score": 0.0035786000713014625, "phrase": "product-line_declaration"}, {"score": 0.0034118234596993836, "phrase": "product_features"}, {"score": 0.0030847461428168614, "phrase": "compositional_type_checking"}, {"score": 0.0030521898646210413, "phrase": "delta-oriented_product_lines"}, {"score": 0.003020031704210929, "phrase": "java"}, {"score": 0.0029409171055888804, "phrase": "minimal_core_calculus"}, {"score": 0.0029098743621130004, "phrase": "delta-oriented_programming"}, {"score": 0.0027889366191837504, "phrase": "constraint-based_type_system"}, {"score": 0.0027159094186967247, "phrase": "delta_module"}, {"score": 0.0024423826953133844, "phrase": "analysis_results"}, {"score": 0.0021049977753042253, "phrase": "java_type_system"}], "paper_keywords": [""], "paper_abstract": "Delta-oriented programming is a compositional approach to flexibly implementing software product lines. A product line is represented by a code base and a product line declaration. The code base consists of a set of delta modules specifying modifications to object-oriented programs. A particular product in a delta-oriented product line is generated by applying the modifications contained in the suitable delta modules to the empty program. The product-line declaration provides the connection of the delta modules with the product features. This separation increases the reusability of delta modules. In this paper, we provide a foundation for compositional type checking of delta-oriented product lines of Java programs by presenting a minimal core calculus for delta-oriented programming. The calculus is equipped with a constraint-based type system that allows analyzing each delta module in isolation, such that the results of the analysis can be reused. By relying only on the analysis results for the delta modules and on the product line declaration, it is possible to establish whether all the products of the product line are well typed according to the fragment of the Java type system modeled by the calculus.", "paper_title": "Compositional type checking of delta-oriented software product lines", "paper_id": "WOS:000316014300001"}