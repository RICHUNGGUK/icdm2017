{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "timed_automata"}, {"score": 0.004515967518891287, "phrase": "distributed_fault-tolerant_real-time_application"}, {"score": 0.004058180509184539, "phrase": "controller_area_network"}, {"score": 0.0036990033106718183, "phrase": "fault-tolerant_tasks"}, {"score": 0.003544088803300751, "phrase": "operating_system"}, {"score": 0.003347547260807785, "phrase": "inter-task_synchronization_primitives"}, {"score": 0.0032073043728420843, "phrase": "model_checking_tool"}, {"score": 0.002965229277927781, "phrase": "complex_time"}, {"score": 0.002923214590192792, "phrase": "logical_properties"}, {"score": 0.0028006988338192375, "phrase": "liveness_properties"}, {"score": 0.002445514186654732, "phrase": "proposed_model"}, {"score": 0.0022447206386952126, "phrase": "execution_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Distributed real-time system", " Fault-tolerant systems", " Controller Area Network", " Timed automata", " Model checking"], "paper_abstract": "This article presents the modeling of a distributed fault-tolerant real-time application by timed automata. The application under consideration consists of several processors communicating via a Controller Area Network (CAN); each processor executes an application that consists of fault-tolerant tasks running on top of an operating system (e.g. OSEK/VDX compliant) and using inter-task synchronization primitives. For such a system. a model checking tool (e.g. UPPAAL) can be used to verify the complex time and logical properties formalized as safety or bounded liveness properties (e.g. end-to-end response time considering an occurrence of a fault). The proposed model reduces the size of the state-space by sharing clocks measuring the execution time of the tasks. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Case study on distributed and fault tolerant system modeling based on timed automata", "paper_id": "WOS:000270628100010"}