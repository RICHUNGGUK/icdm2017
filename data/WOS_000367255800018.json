{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "formalized_framework"}, {"score": 0.004658426838467567, "phrase": "corecursive_functions"}, {"score": 0.004457579615095599, "phrase": "total_setting"}, {"score": 0.0038624981944755813, "phrase": "end_product"}, {"score": 0.00373682045166829, "phrase": "general_corecursor"}, {"score": 0.003309877074892399, "phrase": "\"friendly\"_operations"}, {"score": 0.003132236287543072, "phrase": "friendly_corecursive_functions"}, {"score": 0.00280496585980086, "phrase": "corecursor's_expressiveness"}, {"score": 0.0025678829712650437, "phrase": "isabelle_proof_assistant"}, {"score": 0.0023768935613577985, "phrase": "prototype_tool"}, {"score": 0.002200077887697072, "phrase": "first_principles"}, {"score": 0.0021049977753042253, "phrase": "new_axioms"}], "paper_keywords": ["Theory", " Verification", " (Co)recursion", " parametricity", " proof assistants", " higher-order logic", " Isabelle"], "paper_abstract": "This paper presents a formalized framework for defining corecursive functions safely in a total setting, based on corecursion up-to and relational parametricity. The end product is a general corecursor that allows corecursive (and even recursive) calls under \"friendly\" operations, including constructors. Friendly corecursive functions can be registered as such, thereby increasing the corecursor's expressiveness. The metatheory is formalized in the Isabelle proof assistant and forms the core of a prototype tool. The corecursor is derived from first principles, without requiring new axioms or extensions of the logic.", "paper_title": "Foundational Extensible Corecursion A Proof Assistant Perspective", "paper_id": "WOS:000367255800018"}