{"auto_keywords": [{"score": 0.03794869647631241, "phrase": "clone_regions"}, {"score": 0.010612387000973441, "phrase": "source_code"}, {"score": 0.004767261858417823, "phrase": "source_code_duplication"}, {"score": 0.004650086856905758, "phrase": "code_cloning"}, {"score": 0.004358676214574977, "phrase": "cloned_region"}, {"score": 0.004294052530714228, "phrase": "consistent_changes"}, {"score": 0.003661382948704217, "phrase": "clone_management_approach"}, {"score": 0.003553540530701019, "phrase": "robust_way"}, {"score": 0.003448863509392547, "phrase": "exact_text"}, {"score": 0.0030296432347510687, "phrase": "abstract_clone_region_descriptors"}, {"score": 0.002687922713487696, "phrase": "clone_tracking_system"}, {"score": 0.00256993314099902, "phrase": "different_clone_detection_tools"}, {"score": 0.00239657981537094, "phrase": "documented_clone_relationships"}, {"score": 0.0022460727898764216, "phrase": "five_subject_systems"}, {"score": 0.002136747803494932, "phrase": "practical_and_robust_representation"}, {"score": 0.0021049977753042253, "phrase": "code_clones"}], "paper_keywords": ["Design", " Experimentation", " Source code duplication", " code clones", " clone detection", " refactoring", " clone management"], "paper_abstract": "Source code duplication, commonly known as code cloning, is considered an obstacle to software maintenance because changes to a cloned region often require consistent changes to other regions of the source code. Research has provided evidence that the elimination of clones may not always be practical, feasible, or cost-effective. We present a clone management approach that describes clone regions in a robust way that is independent from the exact text of clone regions or their location in a file, and that provides support for tracking clones in evolving software. Our technique relies on the concept of abstract clone region descriptors (CRDs), which describe clone regions using a combination of their syntactic, structural, and lexical information. We present our definition of CRDs, and describe a clone tracking system capable of producing CRDs from the output of different clone detection tools, notifying developers of modifications to clone regions, and supporting updates to the documented clone relationships. We evaluated the performance and usefulness of our approach across three clone detection tools and five subject systems, and the results indicate that CRDs are a practical and robust representation for tracking code clones in evolving software.", "paper_title": "Clone Region Descriptors: Representing and Tracking Duplication in Source Code", "paper_id": "WOS:000280545100003"}