{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu"}, {"score": 0.014132263752220169, "phrase": "computational_burden"}, {"score": 0.012473719694200597, "phrase": "rmse"}, {"score": 0.004785466029391189, "phrase": "novel_particle_filtering_method"}, {"score": 0.004683678340162048, "phrase": "graphics_processor_unit"}, {"score": 0.004612294931699583, "phrase": "particle_filtering_algorithm"}, {"score": 0.004500327297560586, "phrase": "novel_resampling_technique"}, {"score": 0.004377595128584772, "phrase": "particle_impoverishment"}, {"score": 0.004129329619937498, "phrase": "priori-space_dependent_distribution"}, {"score": 0.003979807104455635, "phrase": "dual_distribution"}, {"score": 0.003919109076818856, "phrase": "resampling_method"}, {"score": 0.0038593331981451257, "phrase": "lesser_values"}, {"score": 0.0038356779275844927, "phrase": "root_mean_square_error"}, {"score": 0.0037310040297385346, "phrase": "systematic_resampling"}, {"score": 0.003651562636212586, "phrase": "particle_diversity"}, {"score": 0.003562834168369313, "phrase": "overall_quality"}, {"score": 0.0034022184461070114, "phrase": "newly_formulated_resampling_framework"}, {"score": 0.0033297542331358057, "phrase": "parallel_speedup"}, {"score": 0.00328903890761552, "phrase": "cuda_version"}, {"score": 0.0032588283962316817, "phrase": "proposed_method"}, {"score": 0.0032388418727065144, "phrase": "necessary_acceleration"}, {"score": 0.003219005063545469, "phrase": "gpu."}, {"score": 0.0031992346303888397, "phrase": "gpu_programming_model"}, {"score": 0.003102316064687607, "phrase": "implementation_issues"}, {"score": 0.0030362200439452585, "phrase": "empirical_computational_efficiency"}, {"score": 0.002971528026470718, "phrase": "cuda_code"}, {"score": 0.002837493000816031, "phrase": "sequential_executions"}, {"score": 0.002734619281384385, "phrase": "running_time"}, {"score": 0.0026763361486623195, "phrase": "different_selections"}, {"score": 0.0026273662637635747, "phrase": "effective_implementations"}, {"score": 0.002485763460996919, "phrase": "cpm"}, {"score": 0.0024477867305835854, "phrase": "algorithmic_efficiency"}, {"score": 0.002344527570417709, "phrase": "comparative_factors"}, {"score": 0.002308712197991419, "phrase": "unified_parameter"}, {"score": 0.0022804533290324944, "phrase": "cpm_values"}, {"score": 0.00217082725339744, "phrase": "final_value"}, {"score": 0.0021508655858525683, "phrase": "chosen_parameter"}, {"score": 0.0021049977753042253, "phrase": "holistic_effective_estimator"}], "paper_keywords": ["Particle filters", " Resampling", " Dual distribution", " Parallel", " GPU"], "paper_abstract": "In this paper, a graphics processor unit (GPU) accelerated particle filtering algorithm is presented with an introduction to a novel resampling technique. The aim remains in the mitigation of particle impoverishment as well as computational burden, problems which are commonly associated with classical (systematic) resampled particle filtering. The proposed algorithm employs a priori-space dependent distribution in addition to the likelihood, and hence is christened as dual distribution dependent (D3) resampling method. Simulation results exhibit lesser values for root mean square error (RMSE) in comparison to that for systematic resampling. D3 resampling is shown to improve particle diversity after each iteration, thereby affecting the overall quality of estimation. However, computational burden is significantly increased owing to few excessive computations within the newly formulated resampling framework. With a view to obtaining parallel speedup we introduce a CUDA version of the proposed method for necessary acceleration by GPU. The GPU programming model is detailed in the context of this paper. Implementation issues are discussed along with illustration of empirical computational efficiency, as obtained by executing the CUDA code on Quadro 2000 GPU. The GPU enabled code has a speedup of 3 and 4 over the sequential executions of systematic and D3 resampling methods respectively. Performance both in terms of RMSE and running time have been elaborated with respect to different selections for threads per block towards effective implementations. It is in this context that, we further introduce a cost to performance metric (CPM) for assessing the algorithmic efficiency of the estimator, involving both quality of estimation and running time as comparative factors, transformed into a unified parameter for assessment. CPM values for estimators obtained from all such different choices for threads per block have been determined and a final value for the chosen parameter is resolved for generation of a holistic effective estimator.", "paper_title": "GPU accelerated novel particle filtering method", "paper_id": "WOS:000339157200003"}