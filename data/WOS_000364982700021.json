{"auto_keywords": [{"score": 0.04965999128412243, "phrase": "comic_image"}, {"score": 0.03168633494004661, "phrase": "svg"}, {"score": 0.00481495049065317, "phrase": "svg_compression"}, {"score": 0.004669085371587273, "phrase": "different_raster-to-vector_methods"}, {"score": 0.004507760907425495, "phrase": "svg_format"}, {"score": 0.004332894955218135, "phrase": "color_gradient"}, {"score": 0.004092168350316413, "phrase": "multiple_divided_color_regions"}, {"score": 0.004020813632357377, "phrase": "single_cg_region"}, {"score": 0.00395069818358908, "phrase": "poor_perceptual_quality"}, {"score": 0.003916098498242888, "phrase": "large_svg_size"}, {"score": 0.0035862794814359267, "phrase": "cgv"}, {"score": 0.00352371416065881, "phrase": "linear-time_algorithm"}, {"score": 0.00346223706087128, "phrase": "cg_vector"}, {"score": 0.003327892193373146, "phrase": "cg"}, {"score": 0.003198554193075258, "phrase": "neighboring_regions"}, {"score": 0.003101503914610488, "phrase": "large_cg_region"}, {"score": 0.0030206579994328975, "phrase": "single_path"}, {"score": 0.002967931416941965, "phrase": "linear_gradient_syntax"}, {"score": 0.002941913249957503, "phrase": "experimental_results"}, {"score": 0.0026585744349118512, "phrase": "ssim"}, {"score": 0.0026121403051734744, "phrase": "autotrace"}, {"score": 0.0024776677004255104, "phrase": "vector_magic"}, {"score": 0.002258745901862197, "phrase": "shortest_time"}, {"score": 0.0021613897794439227, "phrase": "handheld_devices"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["SVG", " Vector image", " Comic compression", " Color gradient", " Color gradient vectorization", " Color clustering", " Improved vector contour searching", " Middle point detection"], "paper_abstract": "In past years, different raster-to-vector methods were proposed to convert bitmap images to SVG format. However, they did not consider the color gradient (CG) that frequently appears in the comic image. Their results needed multiple divided color regions to represent a single CG region. It produced poor perceptual quality and large SVG size. In this paper, we propose the CGV (CG vectorization) method to resolve this problem. CGV first applies a linear-time algorithm to identify the CG vector for representing the color and the direction of CG in each region. Then, we merge neighboring regions those have the same CG vector as a large CG region and represent it by a single path of SVG with linear gradient syntax. Experimental results show that our method outperforms other state-of-the-art SVG vectorization systems in terms of not only SVG size but also perceptual quality. For example, the averages SSIM are 0.85 by Autotrace, 0.92 by Autotrace+Merge, 0.88 by SWaterG, 0.91 by Vector Magic and 0.94 by our method. It is about 57.23% for our average space saving. Moreover, comparing with other systems' results, our SVG files take the shortest time (about 0.12 s in average) of rendering on handheld devices. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Color gradient vectorization for SVG compression of comic image", "paper_id": "WOS:000364982700021"}