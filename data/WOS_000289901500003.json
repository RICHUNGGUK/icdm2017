{"auto_keywords": [{"score": 0.033438166505496705, "phrase": "product_family_algebra"}, {"score": 0.00481495049065317, "phrase": "product_families"}, {"score": 0.004362564831572539, "phrase": "single_product"}, {"score": 0.004204054047427536, "phrase": "similar_products"}, {"score": 0.00405127920820053, "phrase": "well-identified_variabilities"}, {"score": 0.0039040344230094164, "phrase": "elementary_features"}, {"score": 0.003808845109556467, "phrase": "hardware_parts"}, {"score": 0.0037621210719690594, "phrase": "software_artefacts"}, {"score": 0.0036477941360224435, "phrase": "architectural_elements"}, {"score": 0.0033457659530207306, "phrase": "well_established_mathematical_structure"}, {"score": 0.0030876784650745973, "phrase": "formal_treatment"}, {"score": 0.0027120400060701034, "phrase": "complex_systems"}, {"score": 0.0026133424923929227, "phrase": "algebraic_integration_constraints"}, {"score": 0.002426566352219336, "phrase": "different_view"}, {"score": 0.0022531089868518235, "phrase": "wide_class"}, {"score": 0.002225426912273257, "phrase": "integration_constraint_formulations"}, {"score": 0.0021311850321045767, "phrase": "haskell_prototype_implementation"}], "paper_keywords": ["Product family", " Product line", " Idempotent semiring", " Multi-view reconciliation", " Formal family specification", " Feature modelling"], "paper_abstract": "Experience from recent years has shown that it is often advantageous not to build a single product but rather a family of similar products that share at least one common functionality while having well-identified variabilities. Such product families are built from elementary features that reach from hardware parts to software artefacts such as requirements, architectural elements or patterns, components, middleware, or code. We use the well established mathematical structure of idempotent semirings as the basis for a product family algebra that allows a formal treatment of the above notions. A particular application of the algebra concerns the multi-view reconciliation problem that arises when complex systems are modelled. We use algebraic integration constraints linking features in one view to features in the same or a different view and show in several examples the suitability of this approach for a wide class of integration constraint formulations. Our approach is illustrated with a Haskell prototype implementation of one particular model of product family algebra.", "paper_title": "An algebra of product families", "paper_id": "WOS:000289901500003"}