{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "cooperative_threads"}, {"score": 0.00445293569103488, "phrase": "concurrent_imperative_programming"}, {"score": 0.004072275820209647, "phrase": "small_imperative_language"}, {"score": 0.003256526411907174, "phrase": "trace-based_denotational_semantics"}, {"score": 0.0026626797255348287, "phrase": "equational_theory"}, {"score": 0.002574788013427524, "phrase": "computational_effects"}, {"score": 0.0021049977753042253, "phrase": "free_algebra_monad"}], "paper_keywords": ["Languages", " Theory", " denotational semantics", " monad", " operational semantics", " transaction"], "paper_abstract": "We develop a model of concurrent imperative programming with threads. We focus on a small imperative language with cooperative threads which execute without interruption until they terminate or explicitly yield control. We define and study a trace-based denotational semantics for this language; this semantics is fully abstract but mathematically elementary. We also give an equational theory for the computational effects that underlie the language, including thread spawning. We then analyze threads in terms of the free algebra monad for this theory.", "paper_title": "A Model of Cooperative Threads", "paper_id": "WOS:000272013800004"}