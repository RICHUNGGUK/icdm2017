{"auto_keywords": [{"score": 0.04722362806507461, "phrase": "application_domain"}, {"score": 0.00481495049065317, "phrase": "important_step"}, {"score": 0.004630423009638876, "phrase": "information_system"}, {"score": 0.004378958522416482, "phrase": "conceptual_models"}, {"score": 0.004072275820209647, "phrase": "software_design"}, {"score": 0.00389427992231721, "phrase": "generally_accepted_language"}, {"score": 0.003829548069657859, "phrase": "conceptual_modeling"}, {"score": 0.0036826452656927877, "phrase": "object-oriented_software_modeling_languages"}, {"score": 0.0034437574674180365, "phrase": "domain_models"}, {"score": 0.003405472159599445, "phrase": "software_models"}, {"score": 0.003348838095597268, "phrase": "software-modeling_languages"}, {"score": 0.0032383707002544755, "phrase": "application_domains"}, {"score": 0.003149094460617212, "phrase": "required_semantics"}, {"score": 0.0030967107893195246, "phrase": "previous_papers"}, {"score": 0.0030113280682863234, "phrase": "structural_elements"}, {"score": 0.002944715025443487, "phrase": "object_concepts"}, {"score": 0.0028635111041882956, "phrase": "behavioral_aspects"}, {"score": 0.002722930209707764, "phrase": "proposed_semantics"}, {"score": 0.002618366076489732, "phrase": "ontological_concepts"}, {"score": 0.0025461386232786356, "phrase": "object-oriented_constructs"}, {"score": 0.0024075916292945715, "phrase": "modeling_rules"}, {"score": 0.0022893422054387235, "phrase": "ontologically_well-formed_models"}, {"score": 0.0021769116204374593, "phrase": "uml"}, {"score": 0.0021049977753042253, "phrase": "case_study"}], "paper_keywords": ["conceptual modeling", " dynamics", " ontology", " object-oriented analysis", " UML"], "paper_abstract": "An important step in developing the requirements for an information system is analyzing the application domain. In this step, conceptual models are used for representing an application domain. However, while languages for software design am available and widely used, no generally accepted language exists for conceptual modeling This work suggests the use of object-oriented software modeling languages also for conceptual modeling. Such use can support a more accurate transition from domain models to software models. As software-modeling languages were not intended for modeling application domains, their constructs lack the required semantics. While previous papers addressed the representation of structural elements of domains using object concepts, this paper addresses behavioral aspects, related to change and interaction. The proposed semantics are based on a mapping between ontological concepts that describe behavior and object-oriented constructs related to dynamics. Based on these mappings, modeling rules are proposed to guide the modeler in creating ontologically well-formed models. The mappings and rules are exemplified using UML and are demonstrated using a case study.", "paper_title": "Ontology Based Object-Oriented Domain Modeling: Representing Behavior", "paper_id": "WOS:000260404100004"}