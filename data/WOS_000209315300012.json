{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "upcoming_manycore_architectures"}, {"score": 0.0044237033788643715, "phrase": "manycore_processor_systems"}, {"score": 0.004361644989356558, "phrase": "future_system_structure"}, {"score": 0.00422516469733364, "phrase": "desktop_or_mobile_systems"}, {"score": 0.004180622964109706, "phrase": "today's_manycore_processors"}, {"score": 0.0041074234667687875, "phrase": "high_performance_applications"}, {"score": 0.004035500442527029, "phrase": "external_memory"}, {"score": 0.003992950134435965, "phrase": "individual_cores"}, {"score": 0.0038953958723049287, "phrase": "system_memory"}, {"score": 0.003760137090849196, "phrase": "small_number"}, {"score": 0.0036424097335610492, "phrase": "inefficient_memory_assignment"}, {"score": 0.0034543031591181546, "phrase": "additional_new_scenarios"}, {"score": 0.003417859963947459, "phrase": "multiple_concurrently_running_dynamic_applications"}, {"score": 0.003275879115801376, "phrase": "highly_dynamic_workloads"}, {"score": 0.0032527939106509946, "phrase": "varying_memory_usage"}, {"score": 0.003150900886669123, "phrase": "memory_management"}, {"score": 0.0030199761431186434, "phrase": "dynamic_memory_allocation"}, {"score": 0.0029357204796552653, "phrase": "transparent_optimization"}, {"score": 0.00290473242917264, "phrase": "physical_memory_resource_utilization"}, {"score": 0.002853808773854451, "phrase": "integrated_self-organization_mechanisms"}, {"score": 0.002735194789581153, "phrase": "self-aware_memory"}, {"score": 0.002687235334499192, "phrase": "scalable_pooling"}, {"score": 0.0026682872124177233, "phrase": "fully-decentralized_interacting_memory_components"}, {"score": 0.0025846562485378247, "phrase": "scalable_memory_management"}, {"score": 0.002530359917257626, "phrase": "private_and_shared_memory"}, {"score": 0.002485983124803852, "phrase": "flexible_way"}, {"score": 0.0023995451127366983, "phrase": "comfortable_usage"}, {"score": 0.0023742031943872464, "phrase": "well-known_programming_mechanisms"}, {"score": 0.00229164285862567, "phrase": "included_self-optimization_mechanism"}, {"score": 0.0021654633404434623, "phrase": "decentralized_optimization_process"}, {"score": 0.002127472359795555, "phrase": "optimized_runtime"}, {"score": 0.0021049977753042253, "phrase": "appropriate_parameter_settings"}], "paper_keywords": ["Optimization", " Adaptation", " Memory management", " Self-aware Memory (SaM)", " Manycore systems", " Scalability"], "paper_abstract": "The number of cores per processor has been increased on and on in recent years. Carrying on with that, manycore processor systems will be the future system structure, and even within range for usage in desktop or mobile systems. But today's manycore processors are primarily designed for high performance applications. Access to the external memory from the individual cores is avoided. As yet the system memory commonly consists of only one or a few memory components and offers access over a small number of controllers. This leads to congestion, inefficient memory assignment and the scalability of the memory is limited. However, there will be additional new scenarios, with multiple concurrently running dynamic applications, changing I/O characteristics and a not predictable memory usage in the near future. Highly dynamic workloads with varying memory usage have to be utilized. Consequently, the memory management must become more flexible and distributed in nature. Moreover, dynamic memory allocation will be a necessity, and a transparent optimization of the physical memory resource utilization can be done with integrated self-organization mechanisms, e.g. for locality, load distribution or energy efficiency issues. The autonomous self-optimizingmemory architecture Self-aware Memory satisfies all these challenges with a scalable pooling of fully-decentralized interacting memory components. With it, flexible, reliable and scalable memory management is available. Access to private and shared memory is enabled in a flexible way and efficient synchronization mechanism are offered while contemporaneously providing comfortable usage and supporting well-known programming mechanisms. The presented evaluation addresses the parameters of the included self-optimization mechanism and their impact on the optimization. The results show that the overhead of the decentralized optimization process is amortized by the optimized runtime using the appropriate parameter settings.", "paper_title": "Self-aware Memory: an adaptive memory management system for upcoming manycore architectures and its decentralized self-optimization process", "paper_id": "WOS:000209315300012"}