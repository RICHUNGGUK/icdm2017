{"auto_keywords": [{"score": 0.02882761156410556, "phrase": "digger"}, {"score": 0.010566096173698246, "phrase": "smus"}, {"score": 0.00481495049065317, "phrase": "smallest_minimal_unsatisfiable_subformulas"}, {"score": 0.004656871909510407, "phrase": "boolean_formulas"}, {"score": 0.004618166136069052, "phrase": "practical_applications"}, {"score": 0.004579780586951551, "phrase": "numerous_fields"}, {"score": 0.004503959683578956, "phrase": "artificial_intelligence"}, {"score": 0.004447915226010682, "phrase": "inconsistent_knowledge_bases"}, {"score": 0.0040238512275833265, "phrase": "minimal_unsatisfiable_subformulas"}, {"score": 0.003940706575253453, "phrase": "useful_insights"}, {"score": 0.0038112201846057445, "phrase": "unsatisfiable_formula"}, {"score": 0.003685972800046028, "phrase": "application_domain"}, {"score": 0.0035947360742084253, "phrase": "specific_properties"}, {"score": 0.0033482708495261864, "phrase": "smallest-cardinality_mus"}, {"score": 0.0031845067058084583, "phrase": "succinct_explanation"}, {"score": 0.0028209599545587745, "phrase": "earlier_work"}, {"score": 0.0027741766009558217, "phrase": "muses"}, {"score": 0.0024883835349005863, "phrase": "recursive_search_tree"}, {"score": 0.0023764959294052964, "phrase": "baseline_algorithm"}, {"score": 0.002337066031028783, "phrase": "existing_incomplete_genetic_algorithm_approach"}, {"score": 0.0022507188208913394, "phrase": "nearly_all_cases"}, {"score": 0.0021766418372878835, "phrase": "far_more_instances"}], "paper_keywords": ["Boolean satisfiability", " SAT", " Infeasibility", " Minimal unsatisfiable subformula", " MUS", " Smallest minimal unsatisfiable subformula", " SMUS"], "paper_abstract": "Explaining the causes of infeasibility of Boolean formulas has practical applications in numerous fields, such as artificial intelligence (repairing inconsistent knowledge bases), formal verification (abstraction refinement and unbounded model checking), and electronic design (diagnosing and correcting infeasibility). Minimal unsatisfiable subformulas (MUSes) provide useful insights into the causes of infeasibility. An unsatisfiable formula often has many MUSes. Based on the application domain, however, MUSes with specific properties might be of interest. In this paper, we tackle the problem of finding a smallest-cardinality MUS (SMUS) of a given formula. An SMUS provides a succinct explanation of infeasibility and is valuable for applications that are heavily affected by the size of the explanation. We present (1) a baseline algorithm for finding an SMUS, founded on earlier work for finding all MUSes, and (2) a new branch-and-bound algorithm called Digger that computes a strong lower bound on the size of an SMUS and splits the problem into more tractable subformulas in a recursive search tree. Using two benchmark suites, we experimentally compare Digger to the baseline algorithm and to an existing incomplete genetic algorithm approach. Digger is shown to be faster in nearly all cases. It is also able to solve far more instances within a given runtime limit than either of the other approaches.", "paper_title": "A branch and bound algorithm for extracting smallest minimal unsatisfiable subformulas", "paper_id": "WOS:000270439000001"}