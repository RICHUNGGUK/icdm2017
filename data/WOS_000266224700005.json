{"auto_keywords": [{"score": 0.04968510255692421, "phrase": "embedded_network_systems"}, {"score": 0.00481495049065317, "phrase": "runtime_behavior"}, {"score": 0.004677711903652145, "phrase": "tinyos._tinyos"}, {"score": 0.004620093797504386, "phrase": "effective_platform"}, {"score": 0.004563182153397349, "phrase": "lightweight_embedded_network_applications"}, {"score": 0.004488384083300084, "phrase": "platform's_lean_programming_model"}, {"score": 0.0044514440242754815, "phrase": "power-efficient_operation"}, {"score": 0.004342430078306461, "phrase": "tinyos_applications"}, {"score": 0.004115267130977749, "phrase": "development_difficulties"}, {"score": 0.004031082737449308, "phrase": "programming_model"}, {"score": 0.003948613642680196, "phrase": "deferred_execution"}, {"score": 0.00371115485111022, "phrase": "primitive_actions"}, {"score": 0.003459191419478298, "phrase": "resulting_set"}, {"score": 0.0034306925765832633, "phrase": "possible_execution_sequences"}, {"score": 0.0032916702592724217, "phrase": "developers'_unaided_ability"}, {"score": 0.0032376465741070274, "phrase": "program_behavior"}, {"score": 0.0031193028729331667, "phrase": "visualization_toolkit"}, {"score": 0.003030247482854539, "phrase": "program_comprehension"}, {"score": 0.002883439044844259, "phrase": "computation_forest"}, {"score": 0.002789528662623221, "phrase": "particular_branches"}, {"score": 0.0026875205754965537, "phrase": "comprehension_activities"}, {"score": 0.00255727386763536, "phrase": "full-featured_static_analysis"}, {"score": 0.0024637379406427856, "phrase": "selection-based_probe_insertion_system"}, {"score": 0.00240328454980006, "phrase": "lightweight_event_recording_service"}, {"score": 0.002344311033783139, "phrase": "trace_extraction_and_reconstruction_tool"}, {"score": 0.0021579641460002523, "phrase": "toolkit's_resource_usage_and_performance_characteristics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Embedded network systems", " Sensor networks", " TinyOS", " NesC", " Program visualization", " Program comprehension", " Dynamic analysis", " Static analysis"], "paper_abstract": "TinyOS is an effective platform for developing lightweight embedded network applications. But the platform's lean programming model and power-efficient operation come at a price: TinyOS applications are notoriously difficult to construct, debug, and maintain. The development difficulties stem largely from a programming model founded on events and deferred execution. In short, the model introduces non-determinism in the execution ordering of primitive actions - an issue exacerbated by the fact that embedded network systems are inherently distributed and reactive. The resulting set of possible execution sequences for a given system is typically large and can swamp developers' unaided ability to reason about program behavior. In this paper, we present a visualization toolkit for TinyOS 2.0 to aid in program comprehension. The goal is to assist developers in reasoning about the computation forest underlying a system under test and the particular branches chosen during each run. The toolkit supports comprehension activities involving both local and distributed runtime behavior.The constituent components include (i) a full-featured static analysis and instrumentation library, (ii) a selection-based probe insertion system, (iii) a lightweight event recording service, (iv) a trace extraction and reconstruction tool, and (v) three visualization front-ends. We demonstrate the utility of the toolkit using both standard and custom system examples and present an analysis of the toolkit's resource usage and performance characteristics. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Visualizing the runtime behavior of embedded network systems: A toolkit for TinyOS", "paper_id": "WOS:000266224700005"}