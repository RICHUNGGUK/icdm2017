{"auto_keywords": [{"score": 0.04452657881400446, "phrase": "hamiltonian"}, {"score": 0.00481495049065317, "phrase": "large-scale_many-body_calculations"}, {"score": 0.004658426838467567, "phrase": "many-fermion_systems"}, {"score": 0.004592905436175987, "phrase": "configuration-interaction_method"}, {"score": 0.0041987222897385676, "phrase": "many-body_basis"}, {"score": 0.004120130206000757, "phrase": "single-particle_wavefunctions"}, {"score": 0.004043003243656031, "phrase": "resulting_hamiltonian_matrix"}, {"score": 0.0038930368103015467, "phrase": "large_systems"}, {"score": 0.0038564191670589884, "phrase": "nonzero_matrix_elements"}, {"score": 0.0036610702290043387, "phrase": "alternate_algorithm"}, {"score": 0.0035755653799043, "phrase": "broad_class"}, {"score": 0.0034428776029411974, "phrase": "rotational_invariance"}, {"score": 0.003176986603753607, "phrase": "many-body_matrix_elements"}, {"score": 0.0030590445140753187, "phrase": "storage_requirements"}, {"score": 0.0026169435194789772, "phrase": "basis_generation"}, {"score": 0.0025436978068459565, "phrase": "required_arrays"}, {"score": 0.002336539523945236, "phrase": "bigstick"}, {"score": 0.0022706045233150795, "phrase": "serial_and_parallel_machines"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Shell model", " Configuration interaction", " Many-body"], "paper_abstract": "One approach for solving interacting many-fermion systems is the configuration-interaction method, also sometimes called the interacting shell model, where one finds eigenvalues of the Hamiltonian in a many-body basis of Slater determinants.(antisymmetrized products of single-particle wavefunctions). The resulting Hamiltonian matrix is typically very sparse, but for large systems the nonzero matrix elements can nonetheless require terabytes or more of storage. An alternate algorithm, applicable to a broad class of systems with symmetry, in our case rotational invariance, is to exactly factorize both the basis and the interaction using additive/multiplicative quantum numbers; such an algorithm recreates the many-body matrix elements on the fly and can reduce the storage requirements by an order of magnitude or more. We discuss factorization in general and introduce a novel, generalized factorization method, essentially a 'double-factorization' which speeds up basis generation and set-up of required arrays. Although we emphasize techniques, we also place factorization in the context of a specific (unpublished) configuration-interaction code, BIGSTICK, which runs both on serial and parallel machines, and discuss the savings in memory due to factorization. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Factorization in large-scale many-body calculations", "paper_id": "WOS:000328725200016"}