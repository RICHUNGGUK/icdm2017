{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "arbitrary_graph."}, {"score": 0.004666598697538815, "phrase": "social_network"}, {"score": 0.003795335309109018, "phrase": "arbitrary_network"}, {"score": 0.002671722386856879, "phrase": "expected_number"}, {"score": 0.0026384167183586015, "phrase": "\"favorable\"_decisions"}, {"score": 0.0024014759148123736, "phrase": "expected_linear_number"}, {"score": 0.0023715311257000438, "phrase": "favorable_decisions"}, {"score": 0.0022273034991008326, "phrase": "performance_bounds"}, {"score": 0.0021049977753042253, "phrase": "p_not_equal_np."}], "paper_keywords": ["information cascades", " herding", " diffusion", " contagion"], "paper_abstract": "When individuals in a social network make decisions that depend on what others have done earlier, there is the potential for a cascade to form-a run of behaviors that are highly correlated. In an arbitrary network, the outcome of such a cascade can depend sensitively on the order in which nodes make their decisions, but to date there has been very little investigation of how this dependence works or how to choose an order to optimize various parameters of the cascade. Here we formulate the problem of ordering the nodes in a cascade to maximize the expected number of \"favorable\" decisions-those that support a given option. We provide an algorithm that ensures an expected linear number of favorable decisions in any graph, and we show that the performance bounds for our algorithm are essentially the best achievable assuming P not equal NP.", "paper_title": "HOW TO SCHEDULE A CASCADE IN AN ARBITRARY GRAPH", "paper_id": "WOS:000346845600003"}