{"auto_keywords": [{"score": 0.04938622488322164, "phrase": "cumulative_constraints"}, {"score": 0.015719716506582538, "phrase": "dual_presolving_reductions"}, {"score": 0.01206191993286103, "phrase": "variable_locks"}, {"score": 0.004586531354697466, "phrase": "reformulation_techniques"}, {"score": 0.004520132822496416, "phrase": "feasible_or_even_optimal_solutions"}, {"score": 0.004284755353695709, "phrase": "original_problem"}, {"score": 0.004202223763361474, "phrase": "presolving_and_dual_reductions"}, {"score": 0.004101281992566145, "phrase": "state-of-the-art_mixed-integer_linear_programming_solvers"}, {"score": 0.0038499929374478125, "phrase": "practical_concepts"}, {"score": 0.0038127186374325582, "phrase": "constraint_programming_solvers"}, {"score": 0.003721098220825489, "phrase": "existing_idea"}, {"score": 0.0035100601949451028, "phrase": "dual_information"}, {"score": 0.00342568771304873, "phrase": "presolving_phase"}, {"score": 0.0031690434364310435, "phrase": "irrelevant_variables"}, {"score": 0.003107935254560724, "phrase": "variable_assignments"}, {"score": 0.0030778231027679464, "phrase": "domain_reductions"}, {"score": 0.003018468582368033, "phrase": "computational_complexity"}, {"score": 0.002989220655735981, "phrase": "propagation_algorithms"}, {"score": 0.002861062731782219, "phrase": "domain_size"}, {"score": 0.0027651847105654363, "phrase": "potential_computational_speed-up"}, {"score": 0.002672511078070529, "phrase": "constrained_project_scheduling_problems"}, {"score": 0.002570385604065795, "phrase": "dual_reductions"}, {"score": 0.0025207920578878894, "phrase": "well-known_benchmark_instances"}, {"score": 0.00247215300812495, "phrase": "substantial_proportion"}, {"score": 0.0021780349459687622, "phrase": "significant_change"}, {"score": 0.0021569129153653777, "phrase": "overall_run-time"}], "paper_keywords": ["Dual reductions", " Cumulative constraints", " Presolving", " Variable locks"], "paper_abstract": "Dual presolving reductions are a class of reformulation techniques that remove feasible or even optimal solutions while guaranteeing that at least one optimal solution remains, as long as the original problem was feasible. Presolving and dual reductions are important components of state-of-the-art mixed-integer linear programming solvers. In this paper, we introduce them both as unified, practical concepts in constraint programming solvers. Building on the existing idea of variable locks, we formally define and justify the use of dual information for cumulative constraints during a presolving phase of a solver. In particular, variable locks are used to decompose cumulative constraints, detect irrelevant variables, and infer variable assignments and domain reductions. Since the computational complexity of propagation algorithms typically depends on the number of variables and/or domain size, such dual reductions are a source of potential computational speed-up. Through experimental evidence on resource constrained project scheduling problems, we demonstrate that the conditions for dual reductions are present in well-known benchmark instances and that a substantial proportion of them can be solved to optimality in presolving - without search. While we consider this result very promising, we do not observe significant change in overall run-time from the use of our novel dual reductions.", "paper_title": "Using dual presolving reductions to reformulate cumulative constraints", "paper_id": "WOS:000316021000003"}