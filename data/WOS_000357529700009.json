{"auto_keywords": [{"score": 0.04757556213629672, "phrase": "shared_servers"}, {"score": 0.01270951586989118, "phrase": "application_performance"}, {"score": 0.00481495049065317, "phrase": "virtualized_environments"}, {"score": 0.004763565662615503, "phrase": "public_and_private_cloud_computing_environments"}, {"score": 0.004612662942073808, "phrase": "application_workloads"}, {"score": 0.004514714250357749, "phrase": "modern_servers"}, {"score": 0.004301834610818624, "phrase": "multi-level_caching_hierarchy"}, {"score": 0.003947765701573287, "phrase": "resource_management_methods"}, {"score": 0.0037615180375561805, "phrase": "processing_time"}, {"score": 0.0037213333316218522, "phrase": "input-output_rates"}, {"score": 0.003526735797659508, "phrase": "virtualization_kernel_resources"}, {"score": 0.003451766520526601, "phrase": "memory_hierarchy"}, {"score": 0.0032888418378433037, "phrase": "significant_impact"}, {"score": 0.0032189132350239013, "phrase": "hardware_platform_specific_counters"}, {"score": 0.0028293966058473476, "phrase": "software_probe"}, {"score": 0.002724909017963099, "phrase": "shared_platform_resources"}, {"score": 0.002568435291444709, "phrase": "low_overhead"}, {"score": 0.002473560912156024, "phrase": "performance_degradations"}, {"score": 0.0024339783012484032, "phrase": "inter-vm_interference"}, {"score": 0.0023950275815082297, "phrase": "wide_variety"}, {"score": 0.0023694065215394593, "phrase": "workload_scenarios"}, {"score": 0.0022574539115388054, "phrase": "virtualization-induced_software_bottleneck"}, {"score": 0.0021857667493036786, "phrase": "server_architectures"}, {"score": 0.0021049977753042253, "phrase": "workload_placement"}], "paper_keywords": ["Cloud computing", " virtualization", " data center management", " software performance engineering"], "paper_abstract": "Public and private cloud computing environments employ virtualization methods to consolidate application workloads onto shared servers. Modern servers typically have one or more sockets each with one or more computing cores, a multi-level caching hierarchy, a memory subsystem, and an interconnect to the memory of other sockets. While resource management methods may manage application performance by controlling the sharing of processing time and input-output rates, there is generally no management of contention for virtualization kernel resources or for the memory hierarchy and subsystems. Yet such contention can have a significant impact on application performance. Hardware platform specific counters have been proposed for detecting such contention. We show that such counters alone are not always sufficient for detecting contention. We propose a software probe based approach for detecting contention for shared platform resources and demonstrate its effectiveness. We show that the probe imposes low overhead and is remarkably effective at detecting performance degradations due to inter-VM interference over a wide variety of workload scenarios and on two different server architectures. The probe successfully detected virtualization-induced software bottleneck and memory contention on both server architectures. Our approach supports the management of workload placement on shared servers and pools of shared servers.", "paper_title": "Resource Contention Detection in Virtualized Environments", "paper_id": "WOS:000357529700009"}