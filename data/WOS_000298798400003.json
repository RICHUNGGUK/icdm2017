{"auto_keywords": [{"score": 0.049613254104042076, "phrase": "string_distances"}, {"score": 0.008713768692145006, "phrase": "test_cases"}, {"score": 0.0046986841646790315, "phrase": "case_prioritisation"}, {"score": 0.004665717584292516, "phrase": "test_suites"}, {"score": 0.004430920292612374, "phrase": "ordered_test_suite"}, {"score": 0.004387793971765289, "phrase": "traditional_techniques"}, {"score": 0.003770373393393271, "phrase": "prioritisation_algorithm"}, {"score": 0.003503497128638099, "phrase": "initial_testing"}, {"score": 0.0030847461428168614, "phrase": "proposed_prioritisation_technique"}, {"score": 0.003024909947609294, "phrase": "random_permutations"}, {"score": 0.0029229677574293725, "phrase": "obtained_results"}, {"score": 0.002852256089630964, "phrase": "statistical_analysis"}, {"score": 0.0026501935378083663, "phrase": "random_ordering"}, {"score": 0.0026115277372906805, "phrase": "test_suite"}, {"score": 0.0024503741901918527, "phrase": "strongest_mutants"}, {"score": 0.002344655708000408, "phrase": "better_apfd"}, {"score": 0.0021784745589727246, "phrase": "prioritisation_purposes"}, {"score": 0.002146676231930343, "phrase": "manhattan_distance"}, {"score": 0.0021049977753042253, "phrase": "best_choice"}], "paper_keywords": ["Software engineering", " Testing and debugging", " Testing tools", " Test case prioritisation", " String distance"], "paper_abstract": "Test case prioritisation aims at finding an ordering which enhances a certain property of an ordered test suite. Traditional techniques rely on the availability of code or a specification of the program under test. We propose to use string distances on the text of test cases for their comparison and elaborate a prioritisation algorithm. Such a prioritisation does not require code or a specification and can be useful for initial testing and in cases when code is difficult to instrument. In this paper, we also report on experiments performed on the \"Siemens Test Suite\", where the proposed prioritisation technique was compared with random permutations and four classical string distance metrics were evaluated. The obtained results, confirmed by a statistical analysis, indicate that prioritisation based on string distances is more efficient in finding defects than random ordering of the test suite: the test suites prioritized using string distances are more efficient in detecting the strongest mutants, and, on average, have a better APFD than randomly ordered test suites. The results suggest that string distances can be used for prioritisation purposes, and Manhattan distance could be the best choice.", "paper_title": "Prioritizing test cases with string distances", "paper_id": "WOS:000298798400003"}