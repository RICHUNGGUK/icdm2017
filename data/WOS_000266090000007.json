{"auto_keywords": [{"score": 0.03371615560306311, "phrase": "process_switches"}, {"score": 0.00481495049065317, "phrase": "implementation_correctness"}, {"score": 0.0047472380621488616, "phrase": "microkernel_scheduler"}, {"score": 0.004614643339546038, "phrase": "formal_proof"}, {"score": 0.004549734943142138, "phrase": "microkernel's_key_property"}, {"score": 0.0044435677598780796, "phrase": "multi-priority_process_scheduler"}, {"score": 0.004120130206000757, "phrase": "behavioral_reasoning"}, {"score": 0.004081385289516914, "phrase": "system-trace_sets"}, {"score": 0.003967910915242113, "phrase": "c."}, {"score": 0.0038564191670589884, "phrase": "memory_virtualization"}, {"score": 0.003766369160795001, "phrase": "hardware_devices"}, {"score": 0.0035925056609681194, "phrase": "assembly_instructions"}, {"score": 0.003378385493203297, "phrase": "inter-process_communication"}, {"score": 0.002822712709335093, "phrase": "application_processes"}, {"score": 0.0027961342030212353, "phrase": "maintenance_processes"}, {"score": 0.0027437235598539904, "phrase": "quite_substantial_models"}, {"score": 0.00266693888510356, "phrase": "formal_clarification"}, {"score": 0.002580061425699194, "phrase": "detailed_analysis"}, {"score": 0.0024960069794216977, "phrase": "key_ingredients"}, {"score": 0.0023139986108451967, "phrase": "correct_operation"}, {"score": 0.002281376328251423, "phrase": "overall_system"}, {"score": 0.0022385926290967263, "phrase": "methodological_side"}, {"score": 0.002145233716114994, "phrase": "later_verification"}], "paper_keywords": ["Microkernel", " Formal verification", " Interactive theorem proving", " Isabelle/HOL"], "paper_abstract": "We report on the formal proof of a microkernel's key property, namely that its multi-priority process scheduler guarantees progress, i.e., strong fairness. The proof architecture links a layer of behavioral reasoning over system-trace sets with a concrete, fairly realistic implementation written in C. Our microkernel provides an infrastructure for memory virtualization, for communication with hardware devices, for processes (represented as a sequence of assembly instructions, which are executed concurrently over an underlying, formally defined processor), and for inter-process communication (IPC) via synchronous message passing. The kernel establishes process switches according to IPCs and timer-events; the scheduling of process switches, however, follows a hierarchy of priorities, favoring, e.g., system processes over application processes over maintenance processes. Besides the quite substantial models developed in Isabelle/HOL and the formal clarification of their relationship, we provide a detailed analysis what formal requirements a microkernel imposes on the key ingredients (hardware, timers, machine-dependent code) in order to establish the correct operation of the overall system. On the methodological side, we show how early modeling with foresight to the later verification has substantially helped our project.", "paper_title": "Proving Fairness and Implementation Correctness of a Microkernel Scheduler", "paper_id": "WOS:000266090000007"}