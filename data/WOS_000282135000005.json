{"auto_keywords": [{"score": 0.03546730795101328, "phrase": "uml-based_spmls"}, {"score": 0.00481495049065317, "phrase": "six_uml-based_languages"}, {"score": 0.004430784015995566, "phrase": "software_development_processes"}, {"score": 0.004362226376603478, "phrase": "challenging_goal"}, {"score": 0.004250302819248558, "phrase": "first_generation"}, {"score": 0.004206338218873218, "phrase": "software_process_modeling_languages"}, {"score": 0.003972504904621217, "phrase": "broad_industrial_support"}, {"score": 0.0038304902197108643, "phrase": "second_generation"}, {"score": 0.0036743708250589484, "phrase": "strong_industrial_interest"}, {"score": 0.00356146589297537, "phrase": "uml."}, {"score": 0.0031928040608991543, "phrase": "spmls_most_representative"}, {"score": 0.003078577062864183, "phrase": "uml-based_framework_specializations"}, {"score": 0.0030466955629231047, "phrase": "full-blown_executable_metamodeling_approaches"}, {"score": 0.002674885993329912, "phrase": "semantic_richness"}, {"score": 0.0025524176761139413, "phrase": "uml_standard"}, {"score": 0.002448260697722081, "phrase": "relative_merits"}, {"score": 0.0023361440016375972, "phrase": "overall_suitability"}, {"score": 0.0021049977753042253, "phrase": "current_state"}], "paper_keywords": ["Metamodeling", " process modeling and execution", " software process modeling languages", " UML"], "paper_abstract": "Describing and managing activities, resources, and constraints of software development processes is a challenging goal for many organizations. A first generation of Software Process Modeling Languages (SPMLs) appeared in the 1990s but failed to gain broad industrial support. Recently, however, a second generation of SPMLs has appeared, leveraging the strong industrial interest for modeling languages such as UML. In this paper, we propose a comparison of these UML-based SPMLs. While not exhaustive, this comparison concentrates on SPMLs most representative of the various alternative approaches, ranging from UML-based framework specializations to full-blown executable metamodeling approaches. To support the comparison of these various approaches, we propose a frame gathering a set of requirements for process modeling, such as semantic richness, modularity, executability, conformity to the UML standard, and formality. Beyond discussing the relative merits of these approaches, we also evaluate the overall suitability of these UML-based SPMLs for software process modeling. Finally, we discuss the impact of these approaches on the current state of the practice, and conclude with lessons we have learned in doing this comparison.", "paper_title": "A Comparison of Six UML-Based Languages for Software Process Modeling", "paper_id": "WOS:000282135000005"}