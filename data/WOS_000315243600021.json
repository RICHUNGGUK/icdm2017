{"auto_keywords": [{"score": 0.03157244457765462, "phrase": "anti-thrashing_replacement_policy"}, {"score": 0.01505781179124599, "phrase": "chip_multiprocessors"}, {"score": 0.01435456886289701, "phrase": "llc"}, {"score": 0.012553044826119976, "phrase": "capacity_demand"}, {"score": 0.01225570446047287, "phrase": "stack_processing"}, {"score": 0.010975133366316368, "phrase": "bip-bypass"}, {"score": 0.00481495049065317, "phrase": "bypass_extended_stack_processing"}, {"score": 0.004768649568826951, "phrase": "anti-thrashing_replacement"}, {"score": 0.004456717971917794, "phrase": "different_applications"}, {"score": 0.004350308086118336, "phrase": "last_level"}, {"score": 0.004185289462328125, "phrase": "different_cache_capacity_demand"}, {"score": 0.0034826993555190765, "phrase": "anti-thrashing_replacement_algorithms"}, {"score": 0.003270396852243212, "phrase": "thrashing_problem"}, {"score": 0.0032389001343643064, "phrase": "lru_replacement_policy"}, {"score": 0.0031922210879462513, "phrase": "working_set"}, {"score": 0.003131023880006021, "phrase": "available_cache_size"}, {"score": 0.0030858947334838145, "phrase": "existing_stack_processing"}, {"score": 0.002869793011316547, "phrase": "cache_space"}, {"score": 0.0027209713296448296, "phrase": "bip_replacement_policy"}, {"score": 0.0024224481033945943, "phrase": "pipelined_hardware"}, {"score": 0.0023990982005125763, "phrase": "modified_stack_processing"}, {"score": 0.002285674008055581, "phrase": "success_function"}, {"score": 0.0021881743793875767, "phrase": "cache_capacity"}, {"score": 0.0021670777282518424, "phrase": "shared_cache"}, {"score": 0.0021049977753042253, "phrase": "real_time"}], "paper_keywords": ["last level cache", " stack processing", " replacement policy", " anti-thrashing", " cache partitioning", " chip multi-processors"], "paper_abstract": "Chip Multiprocessors (CMPs) allow different applications to share LLC (Last Level Cache). Since each application has different cache capacity demand, LLC capacity should be partitioned in accordance with the demands. Existing partitioning algorithms estimate the capacity demand of each core by stack processing considering the LRU (Least Recently Used) replacement policy only. However, anti-thrashing replacement algorithms like BIP (Binary Insertion Policy) and BIP-Bypass emerged to overcome the thrashing problem of LRU replacement policy in a working set greater than the available cache size. Since existing stack processing cannot estimate the capacity demand with anti-thrashing replacement policy, partitioning algorithms also cannot partition cache space with anti-thrashing replacement policy. In this letter, we prove that BIP replacement policy is not feasible to stack processing but BIP-bypass is. We modify stack processing to accommodate BIP-Bypass. In addition, we propose the pipelined hardware of modified stack processing. With this hardware, we can get the success function of the various capacities with anti-thrashing replacement policy and assess the cache capacity of shared cache adequate to each core in real time.", "paper_title": "Bypass Extended Stack Processing for Anti-Thrashing Replacement in Shared Last Level Cache of Chip Multiprocessors", "paper_id": "WOS:000315243600021"}