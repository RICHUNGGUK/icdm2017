{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "source_code"}, {"score": 0.008617401677324282, "phrase": "trace-based_impact_analysis"}, {"score": 0.005248674825468928, "phrase": "execution_trace"}, {"score": 0.004630423009638876, "phrase": "feature_location"}, {"score": 0.00428222231579898, "phrase": "software_maintenance"}, {"score": 0.0041642891310893, "phrase": "large_amount"}, {"score": 0.004049590638590415, "phrase": "static_analysis"}, {"score": 0.00400459716272594, "phrase": "dynamic_analysis"}, {"score": 0.0039380388343479384, "phrase": "hybrid_approaches"}, {"score": 0.0037869901077566526, "phrase": "feature_location_problems"}, {"score": 0.003724034990158436, "phrase": "existing_approaches"}, {"score": 0.003541357671562449, "phrase": "domain_experts"}, {"score": 0.003405472159599445, "phrase": "new_approach"}, {"score": 0.003348838095597268, "phrase": "functional_feature"}, {"score": 0.0032383707002544755, "phrase": "change_impact_analysis"}, {"score": 0.003202361402737197, "phrase": "information_retrieval"}, {"score": 0.0029612292670237505, "phrase": "single_scenario"}, {"score": 0.0025037596405075866, "phrase": "ranking_analysis"}, {"score": 0.0024075916292945715, "phrase": "structural_characteristics"}, {"score": 0.002341164727388946, "phrase": "identified_results"}, {"score": 0.0023021895404322767, "phrase": "higher_precision"}, {"score": 0.002263861731320045, "phrase": "individual_approaches"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": ["feature location", " impact analysis", " class ranking", " information retrieval", " trace extension"], "paper_abstract": "Feature location is to identify source code that implements a given feature. It is essential for software maintenance and evolution. A large amount of research, including static analysis, dynamic analysis and the hybrid approaches, has been done on the feature location problems. The existing approaches either need plenty of scenarios or rely on domain experts heavily. This paper proposes a new approach to locate functional feature in source code by combining the change impact analysis and information retrieval. In this approach, the source code is instrumented and executed using a single scenario to obtain the execution trace. The execution trace is extended according to the control flow to cover all the potentially relevant classes. The classes are ranked by trace-based impact analysis and information retrieval. The ranking analysis takes advantages of the semantics and structural characteristics of source code. The identified results are of higher precision than the individual approaches. Finally, two open source cases have been studied and the efficiency of the proposed approach is verified.", "paper_title": "Feature Location in Source Code by Trace-Based Impact Analysis and Information Retrieval", "paper_id": "WOS:000299588600025"}