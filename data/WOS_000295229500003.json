{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "compiled_executables"}, {"score": 0.004766683200410046, "phrase": "malware_analysis"}, {"score": 0.00464811139983244, "phrase": "engineering-compiled_executables"}, {"score": 0.004509694461067052, "phrase": "steep_learning_curve"}, {"score": 0.0040978781692373005, "phrase": "overall_flow"}, {"score": 0.003876806615011266, "phrase": "interesting_areas"}, {"score": 0.0036125439380579626, "phrase": "dynamic_analysis"}, {"score": 0.003576286811853861, "phrase": "program_execution"}, {"score": 0.003487222504700868, "phrase": "general_flow"}, {"score": 0.0033492947290751996, "phrase": "ether_hypervisor_framework"}, {"score": 0.003105168935158648, "phrase": "reverse_engineer"}, {"score": 0.0028642924503126154, "phrase": "overall_executable_functionality"}, {"score": 0.0026823700218343506, "phrase": "key_features"}, {"score": 0.0024125253170522816, "phrase": "vera_system"}, {"score": 0.0023762535034673017, "phrase": "engineer_malware"}, {"score": 0.002282166507956957, "phrase": "reversing_process"}, {"score": 0.0022478501955483007, "phrase": "effective_use"}, {"score": 0.0022252591643049744, "phrase": "dynamic_analysis_tools"}, {"score": 0.002202894673025544, "phrase": "preliminary_user_study"}, {"score": 0.0021049977753042253, "phrase": "new_and_experienced_users"}], "paper_keywords": ["reverse engineering", " visualization", " binary analysis"], "paper_abstract": "Reverse engineering-compiled executables is a task with a steep learning curve. It is complicated by the task of translating assembly into a series of abstractions that represent the overall flow of a program. Most of the steps involve finding interesting areas of an executable and determining their general functionality. This article presents a method using dynamic analysis of program execution to visually represent the general flow of a program. We use the Ether hypervisor framework to covertly monitor a program. The data are processed and presented for the reverse engineer. The VERA (Visualization of Executables for Reversing and Analysis) system specifically accelerates the location of the original entry point and understanding of overall executable functionality. Using this method, the amount of time needed to extract key features of an executable is greatly reduced, improving productivity. Two malware samples are used to demonstrate the advantages of using the VERA system to reverse engineer malware. Further, these examples exemplify a reversing process enhanced through effective use of dynamic analysis tools. Preliminary user study indicates that the tool is useful for both new and experienced users. Information Visualization (2011) 10, 117-126. doi:10.1057/ivs.2010.11; published online 13 January 2011", "paper_title": "Reversing compiled executables for malware analysis via visualization", "paper_id": "WOS:000295229500003"}