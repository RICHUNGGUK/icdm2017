{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "residual_investigation"}, {"score": 0.009554749617899996, "phrase": "static_analysis"}, {"score": 0.007493982043260818, "phrase": "program's_test_suite"}, {"score": 0.004780047997766164, "phrase": "predictive"}, {"score": 0.0045591142048535165, "phrase": "program_analysis"}, {"score": 0.004460609967916904, "phrase": "dynamic_check"}, {"score": 0.004269913167716059, "phrase": "possible_program_error"}, {"score": 0.004057670872363875, "phrase": "program_fault"}, {"score": 0.003912533878506028, "phrase": "key_feature"}, {"score": 0.0034315678891900184, "phrase": "dynamic_tests"}, {"score": 0.003320833167729157, "phrase": "statically_reported_error"}, {"score": 0.003260860308644701, "phrase": "good_residual_investigations"}, {"score": 0.0032371745435372168, "phrase": "dynamic_conditions"}, {"score": 0.003132693064568434, "phrase": "static_error_report"}, {"score": 0.002838993542880416, "phrase": "static_analyzer"}, {"score": 0.002757365657304833, "phrase": "static_error_patterns"}, {"score": 0.002737327331636384, "phrase": "findbugs"}, {"score": 0.002678078466226442, "phrase": "nine_large_open-source_systems"}, {"score": 0.0025447584328314754, "phrase": "low_occurrence"}, {"score": 0.002526261001496249, "phrase": "false_warnings"}, {"score": 0.002391739069644444, "phrase": "mere_execution"}, {"score": 0.0021050054034582916, "phrase": "fault-tolerance"}], "paper_keywords": ["Design", " Reliability", " Verification", " False warnings", " existing test cases", " RFBI"], "paper_abstract": "We introduce the concept of residual investigation for program analysis. A residual investigation is a dynamic check installed as a result of running a static analysis that reports a possible program error. The purpose is to observe conditions that indicate whether the statically predicted program fault is likely to be realizable and relevant. The key feature of a residual investigation is that it has to be much more precise (i.e., with fewer false warnings) than the static analysis alone, yet significantly more general (i.e., reporting more errors) than the dynamic tests in the program's test suite that are pertinent to the statically reported error. That is, good residual investigations encode dynamic conditions that, when considered in conjunction with the static error report, increase confidence in the existence or severity of an error without needing to directly observe a fault resulting from the error. We enhance the static analyzer FindBugs with several residual investigations appropriately tuned to the static error patterns in FindBugs, and apply it to nine large open-source systems and their native test suites. The result is an analysis with a low occurrence of false warnings (false positives) while reporting several actual errors that would not have been detected by mere execution of a program's test suite. Categories and Subject Descriptors: D.2.5 [Software Engineering]: Testing and Debugging-Debugging aids; B.8.1 [Performance and Reliability]: Reliability, Testing, and Fault-Tolerance", "paper_title": "Residual Investigation: Predictive and Precise Bug Detection", "paper_id": "WOS:000347030200001"}