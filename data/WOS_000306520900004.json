{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_theft"}, {"score": 0.004768378525561471, "phrase": "embedded_systems"}, {"score": 0.0046993598473345395, "phrase": "side-channel_approach"}, {"score": 0.004653900688892822, "phrase": "source_code_plagiarism"}, {"score": 0.004564291332315995, "phrase": "serious_problem"}, {"score": 0.004326624385772596, "phrase": "source_codes"}, {"score": 0.004141365648080381, "phrase": "embedded_environment"}, {"score": 0.004101281992566145, "phrase": "today's_microcontrollers"}, {"score": 0.0040027552011993005, "phrase": "memory_read_protection"}, {"score": 0.003831310632470526, "phrase": "necessary_source_code"}, {"score": 0.003631671435460452, "phrase": "software_plagiarism"}, {"score": 0.0035965032173588753, "phrase": "embedded_software"}, {"score": 0.003527181559366122, "phrase": "implemented_source_code"}, {"score": 0.003409057326528229, "phrase": "side-channel_information"}, {"score": 0.0032629585038738856, "phrase": "suspicious_code"}, {"score": 0.003215659239270654, "phrase": "first_method"}, {"score": 0.003018468582368033, "phrase": "hamming_weights"}, {"score": 0.0029747028229638625, "phrase": "executed_instructions"}, {"score": 0.002931569771634119, "phrase": "suspicious_device"}, {"score": 0.0027922467043592597, "phrase": "reference_implementation"}, {"score": 0.002711842889248926, "phrase": "second_method"}, {"score": 0.002685558057339722, "phrase": "additional_code_fragments"}, {"score": 0.0025578967205807843, "phrase": "power_consumption"}, {"score": 0.0025207920578878894, "phrase": "executed_source_code"}, {"score": 0.00247215300812495, "phrase": "third_method"}, {"score": 0.0021569129153653777, "phrase": "last_two_approaches"}, {"score": 0.0021049977753042253, "phrase": "code-transformation_attacks"}], "paper_keywords": ["Embedded systems", " IP protection", " side-channel analysis", " software watermarking"], "paper_abstract": "Source code plagiarism has become a serious problem for the industry. Although there exist many software solutions for comparing source codes, they are often not practical in the embedded environment. Today's microcontrollers have frequently implemented a memory read protection that prevents a verifier from reading out the necessary source code. In this paper, we present three verification methods to detect software plagiarism in embedded software without knowing the implemented source code. All three approaches make use of side-channel information that is obtained during the execution of the suspicious code. The first method is passive, i.e., no previous modification of the original code is required. It determines the Hamming weights of the executed instructions of the suspicious device and uses string matching algorithms for comparisons with a reference implementation. In contrast, the second method inserts additional code fragments as a watermark that can be identified in the power consumption of the executed source code. As a third method, we present how this watermark can be extended by using a signature that serves as a proof-of-ownership. We show that particularly the last two approaches are very robust against code-transformation attacks.", "paper_title": "Detecting Software Theft in Embedded Systems: A Side-Channel Approach", "paper_id": "WOS:000306520900004"}