{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "random_choices"}, {"score": 0.00458940888106061, "phrase": "process_calculi"}, {"score": 0.0034777028461723198, "phrase": "protocol's_random_choices"}, {"score": 0.003210110095236981, "phrase": "obviously_correct\"_protocols"}, {"score": 0.0031255543155487234, "phrase": "process-algebraic_framework"}, {"score": 0.002931569771634119, "phrase": "syntactic_terms"}, {"score": 0.0023675986784123656, "phrase": "restricted_schedulers"}, {"score": 0.0021620042653528846, "phrase": "probabilistic_summation"}, {"score": 0.0021049977753042253, "phrase": "useful_property"}], "paper_keywords": [""], "paper_abstract": "When dealing with process calculi and automata which express both nondeterministic and probabilistic behavior, it is customary to introduce the notion of scheduler to resolve the nondeterminism. It has been observed that for certain applications, notably those in security, the scheduler needs to be restricted so not to reveal the outcome of the protocol's random choices, or otherwise the model of adversary would be too strong even for \"obviously correct\" protocols. We propose a process-algebraic framework in which the control on the scheduler can be specified in syntactic terms, and we show how to apply it to solve the problem mentioned above. We also consider the definition of (probabilistic) may and must preorders, and we show that they are precongruences with respect to the restricted schedulers. Furthermore, we show that all the operators of the language, except replication, distribute over probabilistic summation, which is a useful property for verification. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Making random choices invisible to the scheduler", "paper_id": "WOS:000278070100007"}