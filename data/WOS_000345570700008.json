{"auto_keywords": [{"score": 0.04619367167340768, "phrase": "data_structure"}, {"score": 0.03172393502704535, "phrase": "propositional_formulae"}, {"score": 0.00481495049065317, "phrase": "inference_of_field-sensitive_reachability"}, {"score": 0.0047860770915590725, "phrase": "cyclicity"}, {"score": 0.004742904841489477, "phrase": "heap-based_languages"}, {"score": 0.004671932143798307, "phrase": "variable_x_points"}, {"score": 0.004629856947559767, "phrase": "acyclic_data_structure"}, {"score": 0.004216566615939546, "phrase": "x._fld"}, {"score": 0.0038749521906474593, "phrase": "program-specific_or_nonautomated_reasoning"}, {"score": 0.0038054151244558123, "phrase": "recent_work"}, {"score": 0.0036479584876742085, "phrase": "data_structures"}, {"score": 0.0035716816198586116, "phrase": "double-linked_list"}, {"score": 0.0031273209718167072, "phrase": "static_analysis"}, {"score": 0.0031084874662053426, "phrase": "field-sensitive_reachability"}, {"score": 0.0030160025335218047, "phrase": "existing_approaches"}, {"score": 0.0026970382454914437, "phrase": "right_subtrees"}, {"score": 0.002640591917408814, "phrase": "parent_node"}, {"score": 0.0021960024679620886, "phrase": "necessary_abstract_domains"}, {"score": 0.002169607777109063, "phrase": "abstract_semantics"}, {"score": 0.0021370591426091833, "phrase": "prototypical_implementation"}, {"score": 0.0021177643174759937, "phrase": "expected_result"}, {"score": 0.0021049977753042253, "phrase": "relevant_examples"}], "paper_keywords": ["Theory", " Analysis", " Verification", " Heap manipulation", " cyclicity analysis", " termination analysis", " pointer analysis", " shape analysis", " static analysis", " abstract interpretation", " data structures"], "paper_abstract": "In heap-based languages, knowing that a variable x points to an acyclic data structure is useful for analyzing termination. This information guarantees that the depth of the data structure to which x points is greater than the depth of the structure pointed to by x. fld, and allows bounding the number of iterations of a loop that traverses the data structure on fld. In general, proving termination needs acyclicity, unless program-specific or nonautomated reasoning is performed. However, recent work could prove that certain loops terminate even without inferring acyclicity, because they traverse data structures \"acyclically.\" Consider a double-linked list: if it is possible to demonstrate that every cycle involves both the \"next\" and the \"prev\" field, then a traversal on \"next\" terminates since no cycle will be traversed completely. This article develops a static analysis inferring field-sensitive reachability and cyclicity information, which is more general than existing approaches. Propositional formulae are computed, which describe which fields may or may not be traversed by paths in the heap. Consider a tree with edges \"left\" and \"right\" to the left and right subtrees, and \"parent\" to the parent node: termination of a loop traversing leaf-up cannot be guaranteed by state-of-the-art analyses. Instead, propositional formulae computed by this analysis indicate that cycles must traverse \"parent\" and at least one between \"left\" and \"right\": termination is guaranteed, as no cycle is traversed completely. This work defines the necessary abstract domains and builds an abstract semantics on them. A prototypical implementation provides the expected result on relevant examples.", "paper_title": "Inference of Field-Sensitive Reachability and Cyclicity", "paper_id": "WOS:000345570700008"}