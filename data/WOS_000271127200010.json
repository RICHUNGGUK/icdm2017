{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "web_applications"}, {"score": 0.04545831284489885, "phrase": "javascript_code"}, {"score": 0.04192102071091636, "phrase": "user's_environment"}, {"score": 0.026594017778039943, "phrase": "noxes"}, {"score": 0.004750440867604888, "phrase": "dominant_way"}, {"score": 0.004671012181488876, "phrase": "online_services"}, {"score": 0.004577440795549049, "phrase": "web_application_vulnerabilities"}, {"score": 0.004455575231721042, "phrase": "alarming_rate"}, {"score": 0.004278807087784626, "phrase": "web_pages"}, {"score": 0.004235717186207754, "phrase": "dynamic_client-side_behavior"}, {"score": 0.004067635935640407, "phrase": "user's_web_browser"}, {"score": 0.003972673543700013, "phrase": "malicious_javascript_code"}, {"score": 0.0039061983019451903, "phrase": "sand-boxing_mechanism"}, {"score": 0.0037133478610481994, "phrase": "security_mechanisms"}, {"score": 0.0036022217019257598, "phrase": "downloading_malicious_javascript_code"}, {"score": 0.0034475308539463323, "phrase": "malicious_script"}, {"score": 0.003412783661090541, "phrase": "full_access"}, {"score": 0.0032332756920184177, "phrase": "trusted_site"}, {"score": 0.0031259079097782335, "phrase": "xss"}, {"score": 0.00305285084207725, "phrase": "xss_attacks"}, {"score": 0.002892219926795975, "phrase": "high_flexibility"}, {"score": 0.002872742947035998, "phrase": "html_encoding_schemes"}, {"score": 0.0027961342030212353, "phrase": "server-side_input_filters"}, {"score": 0.002758597251689795, "phrase": "malicious_scripts"}, {"score": 0.0027123819773059127, "phrase": "trusted_sites"}, {"score": 0.0026579417954765137, "phrase": "client-side_solution"}, {"score": 0.0024016604071771556, "phrase": "first_client-side_solution"}, {"score": 0.002385479082527538, "phrase": "mitigate_cross-site_scripting_attacks"}, {"score": 0.0023375847850353355, "phrase": "web_proxy"}, {"score": 0.0022522565004588113, "phrase": "possible_cross-site_scripting_attempts"}, {"score": 0.0022070310530794097, "phrase": "information_leakage"}, {"score": 0.002162711766975021, "phrase": "minimal_user_interaction"}, {"score": 0.002148136905808445, "phrase": "customization_effort"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Cross-site scripting (XSS)", " Web security", " Intrusion detection", " Client-side protection", " Client-side defense", " Firewall", " Proxy"], "paper_abstract": "Web applications are becoming the dominant way to provide access to online services. At the same time, web application vulnerabilities are being discovered and disclosed at an alarming rate. Web applications often make use of JavaScript code that is embedded into web pages to support dynamic client-side behavior. This script code is executed in the context of the user's web browser. To protect the user's environment from malicious JavaScript code, browsers use a sand-boxing mechanism that limits a script to access only resources associated with its origin site. Unfortunately, these security mechanisms fail if a user can be lured into downloading malicious JavaScript code from an intermediate, trusted site. In this case, the malicious script is granted full access to all resources (e.g., authentication tokens and cookies) that belong to the trusted site. Such attacks are called cross-site scripting (XSS) attacks. In general, XSS attacks are easy to execute, but difficult to detect and prevent. One reason is the high flexibility of HTML encoding schemes, offering the attacker many possibilities for circumventing server-side input filters that should prevent malicious scripts from being injected into trusted sites. Also, devising a client-side solution is not easy because of the difficulty of identifying JavaScript code as being malicious. This paper presents Noxes, which is, to the best of our knowledge, the first client-side solution to Mitigate cross-site scripting attacks. Noxes acts as a web proxy and uses both manual and automatically generated rules to mitigate possible cross-site scripting attempts. Noxes effectively protects against information leakage from the user's environment while requiring minimal user interaction and customization effort. (C) 2009 Elsevier Ltd. All rights reserved.", "paper_title": "Client-side cross-site scripting protection", "paper_id": "WOS:000271127200010"}