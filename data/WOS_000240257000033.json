{"auto_keywords": [{"score": 0.041712156789843864, "phrase": "abstract_interpretation"}, {"score": 0.00481495049065317, "phrase": "shape-shifting_heaps"}, {"score": 0.004627441072541506, "phrase": "new_program_termination_analysis"}, {"score": 0.0044826811976193485, "phrase": "imperative_programs"}, {"score": 0.004206548500039536, "phrase": "program's_heap"}, {"score": 0.0037634608487353183, "phrase": "finite_number"}, {"score": 0.0031592690527974285, "phrase": "separation_logic_formulae"}, {"score": 0.0027159094186967247, "phrase": "automatic_termination_prover"}, {"score": 0.002372103459168231, "phrase": "windows_device_drivers"}, {"score": 0.0021049977753042253, "phrase": "previously_unknown_bug"}], "paper_keywords": [""], "paper_abstract": "We describe a new program termination analysis designed to handle imperative programs whose termination depends on the mutation of the program's heap. We first describe how an abstract interpretation can be used to construct a finite number of relations which, if each is well-founded, implies termination. We then give an abstract interpretation based on separation logic formulae which tracks the depths of pieces of heaps. Finally, we combine these two techniques to produce an automatic termination prover. We show that the analysis is able to prove the termination of loops extracted from Windows device drivers that could not be proved terminating before by other means; we also discuss a previously unknown bug found with the analysis.", "paper_title": "Automatic termination proofs for programs with shape-shifting heaps", "paper_id": "WOS:000240257000033"}