{"auto_keywords": [{"score": 0.03471343711349796, "phrase": "fortran"}, {"score": 0.007651026658997886, "phrase": "openmp"}, {"score": 0.00481495049065317, "phrase": "emerging_computer_architectures"}, {"score": 0.0046238380150870435, "phrase": "particle-in-cell_algorithms"}, {"score": 0.004298666679374568, "phrase": "common_approach"}, {"score": 0.004195418010131832, "phrase": "fine-grained_tiles"}, {"score": 0.003567455727660992, "phrase": "atomic_operations"}, {"score": 0.00342568771304873, "phrase": "data_collisions"}, {"score": 0.0033433365160336842, "phrase": "cuda_c"}, {"score": 0.003057910095857785, "phrase": "single_core"}, {"score": 0.0027295084882654917, "phrase": "traditional_multi-core_processors"}, {"score": 0.0026209522797963447, "phrase": "high_parallel_efficiency"}, {"score": 0.00235843888868088, "phrase": "intel_phi_coprocessor"}, {"score": 0.0023016843709107297, "phrase": "intel_mic_architecture"}, {"score": 0.0021049977753042253, "phrase": "elseviet_b.v."}], "paper_keywords": ["Parallel algorithms", " Particle-in-Cell", " GPU", " CUDA", " Plasma simulation"], "paper_abstract": "We have designed Particle-in-Cell algorithms for emerging architectures. These algorithms share a common approach, using fine-grained tiles, but different implementations depending on the architecture. On the CPU, there were two different implementations, one with atomic operations and one with no data collisions, using CUDA C and Fortran. Speedups up to about 50 compared to a single core of the Intel i7 processor have been achieved. There was also an implementation for traditional multi-core processors using OpenMP which achieved high parallel efficiency. We believe that this approach should work for other emerging designs such as Intel Phi coprocessor from the Intel MIC architecture. (C) 2013 The Authors. Published by Elseviet B.V. All rights reserved.", "paper_title": "Particle-in-Cell algorithms for emerging computer architectures", "paper_id": "WOS:000331919100002"}