{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "optimal_prefix-free_codes"}, {"score": 0.004270665568018583, "phrase": "unequal_integer_letter_costs"}, {"score": 0.003968675046544738, "phrase": "time_complexity"}, {"score": 0.0036390887584943723, "phrase": "maximum_letter_cost"}, {"score": 0.003543273649210823, "phrase": "special_case"}, {"score": 0.0034730657554172405, "phrase": "encoding_alphabet"}, {"score": 0.003359119985242403, "phrase": "faster_solution"}, {"score": 0.002861961643289598, "phrase": "monge_property"}, {"score": 0.0028052155436760528, "phrase": "cost_function"}, {"score": 0.0025892330566358503, "phrase": "r-letter_alphabet"}, {"score": 0.0023424328921363585, "phrase": "r-letter_case"}, {"score": 0.0021764949731965656, "phrase": "time_complexity_algorithm"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_number"}], "paper_keywords": ["prefix-free codes", " unequal letter costs", " lopsided trees", " optimization", " Monge property"], "paper_abstract": "We address the problem of designing optimal prefix-free codes over an encoding alphabet with unequal integer letter costs. The most efficient algorithm proposed so far has O(n(C+2)) time complexity, where n is the number of codewords and C is the maximum letter cost. For the special case when the encoding alphabet is binary, a faster solution was proposed, namely of O(n(C)) time complexity, based on a more sophisticated modeling of the problem, and on exploiting the Monge property of the cost function. However, those techniques seemed not to extend to the r-letter alphabet. This work proves that, on the contrary, the generalization to the r-letter case is possible, thus leading to a O(n(C)) time complexity algorithm for the case of arbitrary number of letters.", "paper_title": "Faster algorithm for designing optimal prefix-free codes with unequal letter costs", "paper_id": "WOS:000240746400010"}