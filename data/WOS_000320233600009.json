{"auto_keywords": [{"score": 0.048408674865636964, "phrase": "periodicity_detection"}, {"score": 0.009363490837390446, "phrase": "available_main_memory"}, {"score": 0.00924393865454271, "phrase": "suffix_tree"}, {"score": 0.007524537272653959, "phrase": "data_structures"}, {"score": 0.007239442167611751, "phrase": "external_memory"}, {"score": 0.00481495049065317, "phrase": "sequence_databases"}, {"score": 0.004677108044285109, "phrase": "scalability_problem"}, {"score": 0.004499409294175065, "phrase": "time_and_space_efficient_periodicity_detection_method"}, {"score": 0.003916098498242888, "phrase": "storage_requirements"}, {"score": 0.0038038900382901864, "phrase": "larger_suffix_trees"}, {"score": 0.0036710872046569532, "phrase": "larger_sequences"}, {"score": 0.003520082172409082, "phrase": "current_periodicity_detection_approaches"}, {"score": 0.003310447652300423, "phrase": "suffix_tree_construction_part"}, {"score": 0.0031742297618006666, "phrase": "linear_time_complexity"}, {"score": 0.002985130390111069, "phrase": "considerably_larger_space"}, {"score": 0.0028715299874549245, "phrase": "out-of-core_periodicity_detection_part"}, {"score": 0.0028072645684856313, "phrase": "required_data_structures"}, {"score": 0.002726740692380339, "phrase": "memory_overflow_situation"}, {"score": 0.002639968630788011, "phrase": "proposed_approach"}, {"score": 0.0026144780997686464, "phrase": "large_sequences"}, {"score": 0.002597620940221604, "phrase": "reasonable_amount"}, {"score": 0.0024987304152852873, "phrase": "emulated_tree_traversal"}, {"score": 0.00247460024299964, "phrase": "fast_suffix_tree_traversal"}, {"score": 0.0022676260293002706, "phrase": "proposed_framework"}, {"score": 0.0021883400011393564, "phrase": "time_sequence_data"}, {"score": 0.0021049977753042253, "phrase": "largest_reported_sequence"}], "paper_keywords": ["Suffix tree", " Periodicity detection", " Sequence mining", " External memory"], "paper_abstract": "In this paper, we address the scalability problem of periodicity detection for time series and sequence databases. We present time and space efficient periodicity detection method that efficiently uses external memory (disk) when the series cannot be processed inside the available main memory. Our approach uses suffix tree to facilitate periodicity detection. We consider two cases, namely in-core and out of core. First, we optimize storage requirements of the suffix tree to be able to fit larger suffix trees in-core. This guarantees the ability to mine larger sequences when everything can be kept in-core, which is what the current periodicity detection approaches are able to mine. Second, when the data structures go out of core, we extend the suffix tree construction part to use external memory. We are able to achieve this while maintaining linear time complexity. As a result, when we go out of core, we can mine databases that require considerably larger space to keep the data structures compared to the available main memory. For the out-of-core periodicity detection part, the proposed method allows the required data structures to be kept on external memory partially when a memory overflow situation occurs. Various pruning strategies are also proposed to allow the proposed approach to process large sequences within reasonable amount of time. Additionally, we introduced the notion of \"emulated tree traversal\" for fast suffix tree traversal. Due to all these special considerations, we are able to mine much larger sequences compared to other existing periodicity detection algorithms. To demonstrate the applicability, power, and effectiveness of the proposed framework, we present results of periodicity detection up to 500 MB of time sequence data, which (to the best of our knowledge) is the largest reported sequence mined for periodicity detection ever.", "paper_title": "Out-of-core detection of periodicity from sequence databases", "paper_id": "WOS:000320233600009"}