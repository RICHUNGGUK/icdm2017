{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "intercore_communication_overhead"}, {"score": 0.01078597281661814, "phrase": "schedule_length"}, {"score": 0.004769444094319619, "phrase": "streaming_applications"}, {"score": 0.0045052562941109734, "phrase": "joint_computation"}, {"score": 0.004462663711734448, "phrase": "communication_task"}, {"score": 0.004337276328199398, "phrase": "multiprocessor_system-on-chips"}, {"score": 0.004136044939878838, "phrase": "computation_and_communication_tasks"}, {"score": 0.004058180509184539, "phrase": "earlier_periods"}, {"score": 0.004000741805312148, "phrase": "added_periods"}, {"score": 0.0038515000499988673, "phrase": "intercore_data_transfer"}, {"score": 0.003199687131875466, "phrase": "minimum_prologue_length"}, {"score": 0.0028274743316389437, "phrase": "schedulability_analysis"}, {"score": 0.0027741761880779535, "phrase": "upper_bound"}, {"score": 0.0026705669656375197, "phrase": "computation_task"}, {"score": 0.0025586128304269616, "phrase": "integer_linear_programming"}, {"score": 0.0024630345285372958, "phrase": "optimal_solution"}, {"score": 0.002326304140277375, "phrase": "real-life_streaming_applications"}, {"score": 0.0022500695985527668, "phrase": "experimental_results"}, {"score": 0.002186712881521657, "phrase": "significant_reductions"}, {"score": 0.0021454671611847507, "phrase": "energy_consumption"}, {"score": 0.0021049977753042253, "phrase": "previous_work"}], "paper_keywords": ["Task scheduling", " intercore communication", " retiming", " streaming applications", " MPSoC"], "paper_abstract": "This paper aims to totally remove intercore communication overhead with joint computation and communication task scheduling for streaming applications on Multiprocessor System-on-Chips (MPSoCs). Our basic idea is to let some computation and communication tasks be executed in earlier periods (the added periods are called the prologue) such that intercore data transfer can be finished before the execution of the tasks that need the data to start. In particular, we solve the following problem: how to do rescheduling in such a way that the schedule length can be minimized with the minimum prologue length (the number of periods in the prologue) while the intercore communication overhead can be totally removed? To solve this problem, we first perform schedulability analysis and obtain the upper bound of the times needed to reschedule each computation task. Then we formulate the problem as an Integer Linear Programming (ILP) formulation and obtain an optimal solution. We evaluate our technique with a set of benchmarks from both real-life streaming applications and synthetic task graphs. The experimental results show that our technique can achieve significant reductions in schedule length and energy consumption compared with the previous work.", "paper_title": "Optimally Removing Intercore Communication Overhead for Streaming Applications on MPSoCs", "paper_id": "WOS:000312830300012"}