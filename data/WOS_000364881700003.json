{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "whole-program_transformations"}, {"score": 0.004223032986655664, "phrase": "initial_semantics"}, {"score": 0.003852371777780562, "phrase": "typical_term_rewriting_techniques"}, {"score": 0.003334309053314909, "phrase": "type-and-transform_systems"}, {"score": 0.0031845067058084583, "phrase": "whole-program_transformation"}, {"score": 0.002962543869356265, "phrase": "type-changing_rewrite_rules"}, {"score": 0.0028480459059007468, "phrase": "-transform_system"}, {"score": 0.0028108690791085536, "phrase": "typing_and_semantics_relations"}, {"score": 0.0027560092576928595, "phrase": "corresponding_source"}, {"score": 0.0027200305495826797, "phrase": "target_subprograms"}, {"score": 0.0025977542995083624, "phrase": "equivalent_types"}, {"score": 0.002480961181275199, "phrase": "type-and-transform_system"}, {"score": 0.0023538840032613535, "phrase": "general_recursion"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Automatic program transformation", " Type-changing rewriting", " Semantics-preserving program transformation", " Type-and-transform systems"], "paper_abstract": "We have identified a class of whole-program transformations that are regular in structure and require changing the types of terms throughout a program while simultaneously preserving the initial semantics after transformation. This class of transformations cannot be safely performed with typical term rewriting techniques, which do not allow for changing the types of terms. In this paper, we present a formalization of type-and-transform systems, an automated approach to the whole-program transformation of terms of one type to terms of a different, isomorphic type using type-changing rewrite rules. A type-and-transform system defines typing and semantics relations between all corresponding source and target subprograms such that a complete transformation guarantees that the whole programs have equivalent types and semantics. We describe the type-and-transform system for the lambda calculus with let-polymorphism and general recursion, including several examples from the literature and properties of the system. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Type-changing rewriting and semantics-preserving transformation", "paper_id": "WOS:000364881700003"}