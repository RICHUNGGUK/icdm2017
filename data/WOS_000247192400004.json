{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "first-order_syntax"}, {"score": 0.004698229304089357, "phrase": "nominal-set_approach"}, {"score": 0.0044005599565517875, "phrase": "higher-order_reduction_schemes"}, {"score": 0.004293840838533456, "phrase": "lambda-calculus_beta-reduction"}, {"score": 0.003924121879214595, "phrase": "strict_distinction"}, {"score": 0.0031975786158658158, "phrase": "special_abstraction_operation"}, {"score": 0.0028744731986533076, "phrase": "pronounced_first-order_character"}, {"score": 0.002266246304762945, "phrase": "efficient_rewriting_algorithm"}, {"score": 0.0022111720236287547, "phrase": "critical_pair_lemma"}, {"score": 0.0021398115287338693, "phrase": "confluence_theorem"}, {"score": 0.0021049977753042253, "phrase": "orthogonal_systems"}], "paper_keywords": ["binders", " alpha-conversion", " first and higher-order rewriting", " confluence"], "paper_abstract": "Nominal rewriting is based on the observation that if we add support for a-equivalence to first-order syntax using the nominal-set approach, then systems with binding, including higher-order reduction schemes such as lambda-calculus beta-reduction, can be smoothly represented. Nominal rewriting maintains a strict distinction between variables of the object-language (atoms) and of the meta-language (variables or unknowns). Atoms may be bound by a special abstraction operation, but variables cannot be bound, giving the framework a pronounced first-order character, since substitution of terms for variables is not capture-avoiding. We show how good properties of first-order rewriting survive the extension, by giving an efficient rewriting algorithm, a critical pair lemma, and a confluence theorem for orthogonal systems. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Nominal rewriting", "paper_id": "WOS:000247192400004"}