{"auto_keywords": [{"score": 0.049289627284763424, "phrase": "hamilton's_equations"}, {"score": 0.04305066820346483, "phrase": "distributed_program"}, {"score": 0.0428645128648637, "phrase": "test_data"}, {"score": 0.04134706554597161, "phrase": "python"}, {"score": 0.036176720642949065, "phrase": "numerical_solution"}, {"score": 0.00481495049065317, "phrase": "higher_order_integrators"}, {"score": 0.004793302016252947, "phrase": "explicit_algorithms"}, {"score": 0.004778923541463994, "phrase": "higher_order"}, {"score": 0.004771750408749566, "phrase": "symplectic_integration"}, {"score": 0.0047502952388959515, "phrase": "large_class"}, {"score": 0.0046935496812368525, "phrase": "mushtaq_et_al"}, {"score": 0.0046514337251894, "phrase": "python_program"}, {"score": 0.004637478829869904, "phrase": "automatic_numerical_implementation"}, {"score": 0.004596068445339469, "phrase": "hamiltonian"}, {"score": 0.004561468495520688, "phrase": "double_precision"}, {"score": 0.004547782274166457, "phrase": "multi-precision_computations"}, {"score": 0.004382570085039017, "phrase": "program"}, {"score": 0.004301834610818624, "phrase": "python_catalogue_identifier"}, {"score": 0.004231302247688895, "phrase": "cpc_program_library"}, {"score": 0.004218602458288531, "phrase": "queen's_university"}, {"score": 0.004205941249953021, "phrase": "belfast"}, {"score": 0.004193316635088688, "phrase": "n._ireland"}, {"score": 0.004168181737829043, "phrase": "standard_cpc"}, {"score": 0.003954554311987158, "phrase": "tar.gz_programming_language"}, {"score": 0.0038606501537227144, "phrase": "linux"}, {"score": 0.0038489738554904882, "phrase": "macos"}, {"score": 0.0038319268647609805, "phrase": "windows"}, {"score": 0.003559469367865952, "phrase": "generated_code"}, {"score": 0.003376933842097587, "phrase": "partial_derivative_h"}, {"score": 0.003204749469559128, "phrase": "hamiltonians"}, {"score": 0.0031893014610230985, "phrase": "form_h"}, {"score": 0.0030075338776920364, "phrase": "symplectic_property"}, {"score": 0.002993987272124797, "phrase": "time_evolution"}, {"score": 0.0029008492766093292, "phrase": "timestep_r."}, {"score": 0.0028021527740710508, "phrase": "larger_n._solution_method"}, {"score": 0.0027853332413658666, "phrase": "computer_algebra"}, {"score": 0.0027686143852727156, "phrase": "analytic_calculations"}, {"score": 0.0027519956065269126, "phrase": "specific_model"}, {"score": 0.0027272537812174365, "phrase": "python_code"}, {"score": 0.002694609420649617, "phrase": "example_programs"}, {"score": 0.0026543514413663893, "phrase": "mass_matrix"}, {"score": 0.0026225774038593982, "phrase": "unit_matrix"}, {"score": 0.002518114574233497, "phrase": "main_article"}, {"score": 0.0024360733323801963, "phrase": "f._johansson"}, {"score": 0.0024105326885334962, "phrase": "arbitrary-precision_floating-point_arithmetic"}, {"score": 0.00223570488212345, "phrase": "geometric_integrators"}, {"score": 0.002218933616777076, "phrase": "hamiltonian_systems"}, {"score": 0.0022122603123901114, "phrase": "international_journal_of_geometric_methods"}, {"score": 0.0022056070331856917, "phrase": "modern_physics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Splitting methods", " Modified integrators", " Higher order methods", " Automatic code generation"], "paper_abstract": "Some explicit algorithms for higher order symplectic integration of a large class of Hamilton's equations have recently been discussed by Mushtaq et al. Here we present a Python program for automatic numerical implementation of these algorithms for a given Hamiltonian, both for double precision and multi-precision computations. We provide examples of how to use this program, and illustrate behavior of both the code generator and the generated solver module(s). Program summary Program title: HOMsPy: Higher Order (Symplectic) Methods in Python Catalogue identifier: AESD_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AESD_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 19423 No. of bytes in distributed program, including test data, etc.: 1970283 Distribution format: tar.gz Programming language: Python 2.7. Computer: PCs or higher performance computers. Operating system: Linux, MacOS, MS Windows. RAM: Kilobytes to a several gigabytes (problem dependent). Classification: 4.3, 5. External routines: SymPy library [1] for generating the code. NumPy library [2], and optionally mpmath [3] library for running the generated code. The matplotlib [4] library for plotting results. Nature of problem: We have developed algorithms [5] for numerical solution of Hamilton's equations. (q) over dot(a) = partial derivative H (q, p)/partial derivative p(a)a, (p) over dot(a) = -partial derivative H (q, p)/partial derivative q(a), a = 1 ... N (1) for Hamiltonians of the form H (q, p) = T (p) + V (q) = (1 /2)p(T)Mp + V (q), (2) with M a symmetric positive definite matrix. The algorithms preserve the symplectic property of the time evolution exactly, and are of orders tau(N) (for 2 <= N <= 8) in the timestep r. Although explicit, the algorithms are time-consuming and error-prone to implement numerically by hand, in particular for larger N. Solution method: We use computer algebra to perform all analytic calculations required for a specific model, and to generate the Python code for numerical solution of this model, including example programs using that code. Restrictions: In our implementation the mass matrix is assumed to be equal to the unit matrix, and V (q) must be sufficiently differentiable. Running time: Subseconds to eons (problem dependent). See discussion in the main article. References: [1] SymPy Development Team, http://sympy.org/. [2] NumPy Developers, http://numpy.org/. [3] F. Johansson etal., Python library for arbitrary-precision floating-point arithmetic, http://code.google. code/p/mpmath/ (2010). [4] J.D. Hunter, Matplotlib: A 2D graphics environment, Computing in Science and Engineering 9, 90-95 (2007). [5] A. Mushtaq, A. KvRrno, K. Olaussen, Higher order Geometric Integrators for a class of Hamiltonian systems, International Journal of Geometric Methods in Modern Physics, vol. 11, no. 1 (2014), 1450009-1-1450009-20. DOI: http://dx.doi.org/10.1142/S0219887814500091. arXiv.org:1301.7736. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Automatic code generator for higher order integrators", "paper_id": "WOS:000334085600014"}