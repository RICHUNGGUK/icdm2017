{"auto_keywords": [{"score": 0.03341847804609969, "phrase": "speculated_invariants"}, {"score": 0.010470828753629435, "phrase": "java"}, {"score": 0.008906942722152155, "phrase": "multiple_phases"}, {"score": 0.00481495049065317, "phrase": "multiphase_bounds"}, {"score": 0.004576491793324233, "phrase": "precise_exceptions"}, {"score": 0.004424087591260246, "phrase": "bound_array_accesses"}, {"score": 0.004335081499311714, "phrase": "java_implementation"}, {"score": 0.00427673687759065, "phrase": "multiphase_approach"}, {"score": 0.004233492114255375, "phrase": "safe_array_accesses"}, {"score": 0.003929391999210588, "phrase": "mobile_code"}, {"score": 0.0039028497942174777, "phrase": "source_code"}, {"score": 0.0036968421974412522, "phrase": "individual_array_accesses"}, {"score": 0.0036594395622282358, "phrase": "code_producer"}, {"score": 0.0036347141744359442, "phrase": "multiple_passes"}, {"score": 0.0035979378467361762, "phrase": "common_subexpression_elimination"}, {"score": 0.00357362651129581, "phrase": "load_elimination"}, {"score": 0.0035374660789922715, "phrase": "variable_substitution"}, {"score": 0.0034898187091432806, "phrase": "dynamically_verified_invariants"}, {"score": 0.00338493754743055, "phrase": "unnecessary_bounds_checks"}, {"score": 0.0033167679667625667, "phrase": "class-loading_and_jit_compilation"}, {"score": 0.0029959082125682918, "phrase": "runtime_method_invocation"}, {"score": 0.0029655761366079877, "phrase": "method_parameters"}, {"score": 0.0028376361457661415, "phrase": "unoptimized_code"}, {"score": 0.0027523011981394835, "phrase": "combined_effect"}, {"score": 0.0026514708899935333, "phrase": "bounds-checking_array_access"}, {"score": 0.0025284524249379265, "phrase": "runtime_overhead"}, {"score": 0.0025113494092413604, "phrase": "experimental_results"}, {"score": 0.0024193249334041557, "phrase": "prior_approaches"}, {"score": 0.0024029583021102255, "phrase": "minimal_overhead"}, {"score": 0.0023867021254922755, "phrase": "jit_compilation"}, {"score": 0.0022682274656069643, "phrase": "overall_elimination"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multiphase optimization", " program analysis", " array bounds checks", " Java", " SafeTSA"], "paper_abstract": "As part of its type-safety regime, Java's semantics require precise exceptions at runtime when programs attempt out-of-bound array accesses. This paper describes a Java implementation that utilizes a multiphase approach to identifying safe array accesses. This approach reduces runtime overhead by spreading the out-of-bounds checking effort across multiple phases of compilation and execution: production of mobile code from source code, just-in-time (JIT) compilation in the virtual machine, application method invocations, and the execution of individual array accesses. The code producer uses multiple passes (including common subexpression elimination, load elimination, induction variable substitution, speculation of dynamically verified invariants, and inequality constraint analysis) to identify unnecessary bounds checks and prove their redundancy. During class-loading and JIT compilation, the virtual machine verifies the proofs, inserts code to dynamically validate speculated invariants, and generates code specialized under the assumption that the speculated invariants hold. During each runtime method invocation, the method parameters and other inputs are checked against the speculated invariants, and execution reverts to unoptimized code if the speculated invariants do not hold. The combined effect of the multiple phases is to shift the effort associated with bounds-checking array access to phases that are executed earlier and less frequently, thus, reducing runtime overhead. Experimental results show that this approach is able to eliminate more bounds checks than prior approaches with minimal overhead during JIT compilation. These results also show the contribution of each of the passes to the overall elimination. Furthermore, this approach increased the speed at which the benchmarks executed by up to 16%. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Safe, multiphase bounds check elimination in Java", "paper_id": "WOS:000290810300002"}