{"auto_keywords": [{"score": 0.046398885159174126, "phrase": "dense_linear_algebra_algorithms"}, {"score": 0.0390829115805425, "phrase": "multicore_platform"}, {"score": 0.036677105416036346, "phrase": "tile_algorithms"}, {"score": 0.00481495049065317, "phrase": "dynamically_scheduled_tile_algorithms"}, {"score": 0.004769958800452922, "phrase": "dense_linear_algebra"}, {"score": 0.004725385523804256, "phrase": "multicore_architectures"}, {"score": 0.004487541157100498, "phrase": "dynamic_scheduling"}, {"score": 0.004143196873246147, "phrase": "clear_limitations"}, {"score": 0.003934540154108188, "phrase": "numerical_algorithms"}, {"score": 0.003771631577951067, "phrase": "architectural_design"}, {"score": 0.0036667768092524576, "phrase": "parallel_linear_algebra"}, {"score": 0.0036324746826127997, "phrase": "scalable_multicore_architectures_library"}, {"score": 0.0034171734618737436, "phrase": "finer_task"}, {"score": 0.0032602525602322832, "phrase": "directed_acyclic_graphs"}, {"score": 0.0030097975788892896, "phrase": "paramount_key"}, {"score": 0.002967634471075658, "phrase": "high_performance"}, {"score": 0.0028986672783671147, "phrase": "runtime_environment"}, {"score": 0.0027916287357898544, "phrase": "directed_acyclic_graph"}, {"score": 0.0026384167183586015, "phrase": "overall_performance"}, {"score": 0.002323663295811215, "phrase": "-looking_and_right-looking_variants"}, {"score": 0.002248366278757655, "phrase": "commonly_accepted_rules"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["dense linear algebra", " dynamic scheduling", " looking variants", " multicore architectures"], "paper_abstract": "The objective of this paper is to analyze the dynamic scheduling of dense linear algebra algorithms on shared-memory, multicore architectures. Current numerical libraries (e.g., linear algebra package) show clear limitations on such emerging systems mainly because of their coarse granularity tasks. Thus, many numerical algorithms need to be redesigned to better fit the architectural design of the multicore platform. The parallel linear algebra for scalable multicore architectures library developed at the University of Tennessee tackles this challenge by using tile algorithms to achieve a finer task granularity. These tile algorithms can then be represented by directed acyclic graphs, where nodes are the tasks and edges are the dependencies between the tasks. The paramount key to achieve high performance is to implement a runtime environment to efficiently schedule the execution of the directed acyclic graph across the multicore platform. This paper studies the impact on the overall performance of some parameters, both at the level of the scheduler (e.g., window size and locality) and the algorithms (e.g., left-looking and right-looking variants). We conclude that some commonly accepted rules for dense linear algebra algorithms may need to be revisited. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Analysis of dynamically scheduled tile algorithms for dense linear algebra on multicore architectures", "paper_id": "WOS:000300046900006"}