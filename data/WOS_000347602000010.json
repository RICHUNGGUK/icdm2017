{"auto_keywords": [{"score": 0.05003965534696681, "phrase": "binary_strings"}, {"score": 0.0316149776174046, "phrase": "np"}, {"score": 0.026012980788910043, "phrase": "operator_negation"}, {"score": 0.004743164872278112, "phrase": "computer_science"}, {"score": 0.00443308765153716, "phrase": "new_objects"}, {"score": 0.004237666411136617, "phrase": "succinct_version"}, {"score": 0.00396050388346298, "phrase": "new_binary_strings"}, {"score": 0.003828770052266183, "phrase": "fundamental_problem"}, {"score": 0.003369322866499544, "phrase": "set_w"}, {"score": 0.0030901063954739375, "phrase": "minimum_subset"}, {"score": 0.0028986672783671147, "phrase": "smallest_subset"}, {"score": 0.0028233196851239753, "phrase": "original_set"}, {"score": 0.0027395968397212053, "phrase": "tight_inapproximability_results"}, {"score": 0.002719055901632759, "phrase": "approximation_algorithms"}, {"score": 0.002688532127821979, "phrase": "np-hard_problems"}, {"score": 0.002569816610348772, "phrase": "representable_strings"}, {"score": 0.0023127544795063263, "phrase": "counting_problem"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Combinatorial algorithm", " Binary strings", " Boolean operation", " NP-hard", " #P-complete"], "paper_abstract": "Many problems in Computer Science can be abstracted to the following question: given a set of objects and rules respectively, which new objects can be produced? In the paper, we consider a succinct version of the question: given a set of binary strings and several operations like conjunction and disjunction, which new binary strings can be generated? Although it is a fundamental problem, to the best of our knowledge, the problem hasn't been studied yet. In this paper, an 0 (m(2)n) algorithm is presented to determine whether a string s is representable by a set W, where n is the number of strings in W and each string has the same length m. However, looking for the minimum subset to represent a given string is shown to be NP-hard. Also, finding the smallest subset to represent each string in the original set is NP-hard. We establish tight inapproximability results and approximation algorithms for these NP-hard problems. In addition, we prove that counting the number of representable strings is #P-complete. We then explore how the problems change when the operator negation is available. For example, if the operator negation can be used, the counting problem is as simple as some power of 2. This difference may help us to better understand the problem. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Computing on binary strings", "paper_id": "WOS:000347602000010"}