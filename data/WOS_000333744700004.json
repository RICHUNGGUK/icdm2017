{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "size-change_termination_principle"}, {"score": 0.004322967486451877, "phrase": "automatic_termination_checker"}, {"score": 0.0041703614123283165, "phrase": "generic_first-order_call-by-value_language"}, {"score": 0.0030904433394138963, "phrase": "recursive_calls"}, {"score": 0.0025508872420648824, "phrase": "lee"}, {"score": 0.00249043683062043, "phrase": "jones"}, {"score": 0.002431135395174629, "phrase": "ben-amram"}, {"score": 0.0023171750718791713, "phrase": "size_changes"}, {"score": 0.0021049977753042253, "phrase": "corresponding_algorithm"}], "paper_keywords": ["program analysis", " termination analysis", " size-change principle", " ML."], "paper_abstract": "This paper describes an automatic termination checker for a generic first-order call-by-value language in ML style. We use the fact that values are built from constructors and tuples to keep some information about how arguments of recursive calls evolve during evaluation. The result is a criterion for termination extending the size-change termination principle of Lee, Jones and Ben-Amram that can detect size changes inside subvalues of arguments. Moreover the corresponding algorithm is easy to implement, making it a good candidate for experimentation.", "paper_title": "THE SIZE-CHANGE TERMINATION PRINCIPLE FOR CONSTRUCTOR BASED LANGUAGES", "paper_id": "WOS:000333744700004"}