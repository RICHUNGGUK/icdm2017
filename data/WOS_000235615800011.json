{"auto_keywords": [{"score": 0.024840162853234475, "phrase": "xduce"}, {"score": 0.00481495049065317, "phrase": "type_system"}, {"score": 0.0047026237903774895, "phrase": "regular_tree_grammars"}, {"score": 0.004592905436175987, "phrase": "algebraic_datatypes"}, {"score": 0.004415675459182871, "phrase": "structural_way"}, {"score": 0.004081385289516914, "phrase": "different_types"}, {"score": 0.003986103192038901, "phrase": "flexible_subtyping_relation"}, {"score": 0.0030494153169181334, "phrase": "even_length"}, {"score": 0.0027093285574752457, "phrase": "algebraic_patterns"}, {"score": 0.0022958180852458215, "phrase": "cduce"}, {"score": 0.0021049977753042253, "phrase": "polymorphism_and_function_types"}], "paper_keywords": ["algorithms", " design", " languages", " theory", " polymorphism", " subtyping", " tree automata"], "paper_abstract": "We propose a type system based on regular tree grammars, where algebraic datatypes are interpreted in a structural way. Thus, the same constructors can be reused for different types and a flexible subtyping relation can be defined between types, corresponding to the inclusion of their semantics. For instance, one can define a type for lists and a subtype of this type corresponding to lists of even length. Patterns are simply types annotated with binders. This provides a generalization of algebraic patterns with the ability of matching arbitrarily deep in a value. Our main contribution, compared to languages such as XDuce and CDuce, is that we are able to deal with both polymorphism and function types.", "paper_title": "Polymorphic regular tree types and patterns", "paper_id": "WOS:000235615800011"}