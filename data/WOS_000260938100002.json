{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "computational_neuron_models"}, {"score": 0.004732215871738028, "phrase": "hand_tuning"}, {"score": 0.004677847043645765, "phrase": "model_parameters"}, {"score": 0.004440780432053927, "phrase": "parallel_increase"}, {"score": 0.004389745162172933, "phrase": "computer_power"}, {"score": 0.004191377834552202, "phrase": "optimization_algorithms"}, {"score": 0.004071957673937727, "phrase": "first_one"}, {"score": 0.0035442655396704724, "phrase": "error_function"}, {"score": 0.003503497128638102, "phrase": "fitness_function"}, {"score": 0.0034036089823450385, "phrase": "different_parameter_sets"}, {"score": 0.0033257460346754718, "phrase": "second_component"}, {"score": 0.003268516165008941, "phrase": "search_algorithm"}, {"score": 0.0031937337757356526, "phrase": "parameter_space"}, {"score": 0.003120657021758196, "phrase": "best_parameter"}, {"score": 0.0030492472433481764, "phrase": "minimal_amount"}, {"score": 0.002861160152640875, "phrase": "error_functions"}, {"score": 0.0026384167183586015, "phrase": "voltage_traces"}, {"score": 0.002608040688794517, "phrase": "multi-objective_functions"}, {"score": 0.0024899850926034567, "phrase": "brute-force_methods"}, {"score": 0.002418923027024191, "phrase": "genetic_algorithms"}, {"score": 0.002391067964886602, "phrase": "evolution_strategies"}, {"score": 0.0022176487309947266, "phrase": "neurofitter"}, {"score": 0.0021049977753042253, "phrase": "phase-plane_trajectory_density_fitness_function"}], "paper_keywords": ["Optimization", " Neuron", " Model", " Parameters", " Automated tuning", " Error function", " Fitness function"], "paper_abstract": "The increase in complexity of computational neuron models makes the hand tuning of model parameters more difficult than ever. Fortunately, the parallel increase in computer power allows scientists to automate this tuning. Optimization algorithms need two essential components. The first one is a function that measures the difference between the output of the model with a given set of parameter and the data. This error function or fitness function makes the ranking of different parameter sets possible. The second component is a search algorithm that explores the parameter space to find the best parameter set in a minimal amount of time. In this review we distinguish three types of error functions: feature-based ones, point-by-point comparison of voltage traces and multi-objective functions. We then detail several popular search algorithms, including brute-force methods, simulated annealing, genetic algorithms, evolution strategies, differential evolution and particle-swarm optimization. Last, we shortly describe Neurofitter, a free software package that combines a phase-plane trajectory density fitness function with several search algorithms.", "paper_title": "Automated neuron model optimization techniques: a review", "paper_id": "WOS:000260938100002"}