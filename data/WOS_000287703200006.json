{"auto_keywords": [{"score": 0.0493653882313026, "phrase": "cross-generation_mutation"}, {"score": 0.04005075526095261, "phrase": "convergence_speed"}, {"score": 0.028851096418336983, "phrase": "benchmark_set"}, {"score": 0.00481495049065317, "phrase": "differential_evolution"}, {"score": 0.004269630481719451, "phrase": "trial_vector's_component"}, {"score": 0.0036188435232325337, "phrase": "original_algorithm"}, {"score": 0.0034332736827447654, "phrase": "new_concept"}, {"score": 0.0031845067058084613, "phrase": "evolution_process"}, {"score": 0.002392453087295389, "phrase": "proposed_methods"}, {"score": 0.0021369416775353107, "phrase": "self-adaptive_de"}, {"score": 0.0021049977753042253, "phrase": "namely_iterated_function_system_based_adaptive_differential_evolution"}], "paper_keywords": ["differential evolution", " evolutionary algorithm", " genetic algorithm", " gene sorting", " cross-generation mutation"], "paper_abstract": "Gene sorting is proposed in this paper as a method of ordering trial vector's component in differential evolution (DE). This method tends to significantly increase the convergence speed of DE with just a little modification on the original algorithm. In the meantime, a new concept of cross-generation mutation is introduced in order to perform the evolution process serially rather than parallelly. When combined with gene sorting, this method will further increase the convergence speed. A benchmark set of 18 functions is used to investigate the performance of these algorithms. Most importantly, the proposed methods can be incorporated in other variants of DE to further increase their respective speeds. Three versions of self-adaptive DE, namely iterated function system based adaptive differential evolution (IFDE), Janez's DE (jDE) and SaDE, are taken as examples, which are averagely 10, 6 and 4 times faster than the benchmark set respectively.", "paper_title": "Gene sorting in differential evolution with cross-generation mutation", "paper_id": "WOS:000287703200006"}