{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "online_dynamic_programming_speedups"}, {"score": 0.004669845451682529, "phrase": "thousand_currency_signn"}, {"score": 0.004085932261574055, "phrase": "thousand_currency"}, {"score": 0.004074574278425223, "phrase": "signna_parts"}, {"score": 0.004051952557353597, "phrase": "thousand_currency_signn."}, {"score": 0.003962835398686707, "phrase": "aggarwal"}, {"score": 0.003897064755246921, "phrase": "monge_property"}, {"score": 0.003853904381701439, "phrase": "smawk"}, {"score": 0.003696251566632813, "phrase": "offline_problem"}, {"score": 0.0035549120708420513, "phrase": "naive_algorithm"}, {"score": 0.0034476484413811987, "phrase": "online_case"}, {"score": 0.003325033439910555, "phrase": "broken_vertical_bar"}, {"score": 0.0030160945545795494, "phrase": "problem_size"}, {"score": 0.002728166176898541, "phrase": "online_fashion"}, {"score": 0.002594652434287807, "phrase": "total_time"}, {"score": 0.002447101794397243, "phrase": "worst_case"}, {"score": 0.0023931202835437626, "phrase": "amortized_time"}, {"score": 0.0022823217380708145, "phrase": "standard_smawk_algorithm"}, {"score": 0.00225700428055894, "phrase": "offline_case"}, {"score": 0.0021645343888637304, "phrase": "d-median_problem"}, {"score": 0.0021049977753042253, "phrase": "mobile_wireless_paging"}], "paper_keywords": ["Dynamic programming", " Monge property"], "paper_abstract": "Consider the dynamic program h(n)=min (1a parts per thousand currency signja parts per thousand currency signn) a(n,j), where a(n,j) is some formula that may (online) or may not (offline) depend on the previously computed h(i), for i < n. The goal is to compute all h(n), for 1a parts per thousand currency signna parts per thousand currency signN. It is well known that, if a(n,j) satisfy the Monge property, then the SMAWK algorithm (Aggarwal et al., Algorithmica 2(1):195-208, 1987) can solve the offline problem in O(N) time; a I similar to(N) speedup over the naive algorithm. In this paper we extend this speedup to the online case, that is, to compute h(n) in the order n=1,2,aEuro broken vertical bar,N when (i) we do not know the values of a(n',j) for n'> n before h(n) has been computed and (ii) do not know the problem size N in advance. We show that if a(n,j) satisfy a stronger, but sometimes still natural, property than the Monge one, then each h(n) can be computed in online fashion in O(1) amortized time. This maintains the speedup online, in the sense that the total time to compute all h(n) is O(N). We also show how to compute each h(n) in the worst case O(log N) time, while maintaining the amortized time bound. For a(n,j) satisfying our stronger property, our algorithm is also simpler than the standard SMAWK algorithm for solving the offline case. We illustrate our technique on two examples from the literature; the first is the D-median problem on a line, and the second comes from mobile wireless paging.", "paper_title": "Online Dynamic Programming Speedups", "paper_id": "WOS:000267899000002"}