{"auto_keywords": [{"score": 0.04143195963351397, "phrase": "bank_selection_instructions"}, {"score": 0.030851859679450776, "phrase": "cfg"}, {"score": 0.017689029665284628, "phrase": "minimum_number"}, {"score": 0.010324377174050754, "phrase": "embedded_systems"}, {"score": 0.00724574045164373, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "bank_selection_instruction_minimization"}, {"score": 0.004777034835192062, "phrase": "partitioned_memory_architecture"}, {"score": 0.004720717782144015, "phrase": "large_number"}, {"score": 0.004573748810476845, "phrase": "low_cost"}, {"score": 0.00453772385360173, "phrase": "multi-bank_memory_architecture"}, {"score": 0.004293336465549723, "phrase": "address_buses"}, {"score": 0.004209269012699911, "phrase": "different_memory_banks"}, {"score": 0.004159617445102161, "phrase": "special_instruction"}, {"score": 0.004126840854872329, "phrase": "bank_selection"}, {"score": 0.0038584250641318057, "phrase": "code_size"}, {"score": 0.0034129490818185595, "phrase": "control_flow_graph"}, {"score": 0.0030791137853734152, "phrase": "memory_banks"}, {"score": 0.0029595657769783314, "phrase": "rounding_method"}, {"score": 0.002607246047604476, "phrase": "polynomial_time"}, {"score": 0.002437425029824563, "phrase": "memory_bank"}, {"score": 0.0023990982005125763, "phrase": "dynamic_programming_method"}, {"score": 0.0023613726075968986, "phrase": "optimal_insertion_strategy"}, {"score": 0.0021049977753042253, "phrase": "variable_assignment"}], "paper_keywords": ["Approximation algorithms", " Rounding", " NP-hardness", " Bank selection instruction minimization", " Partitioned memory architecture"], "paper_abstract": "A large number of embedded systems include 8-bit microcontrollers for their energy efficiency and low cost. Multi-bank memory architecture is commonly applied in 8-bit microcontrollers to increase the size of memory without extending address buses. To switch among different memory banks, a special instruction, Bank Selection, is used. How to minimize the number of bank selection instructions inserted is important to reduce code size for embedded systems. In this paper, we consider how to insert the minimum number of bank selection instructions in a program to achieve feasibility. A program can be represented by a control flow graph (CFG). We prove that it is NP-hard to insert the minimum number of bank selection instructions if all the variables are pre-assigned to memory banks. Therefore, we introduce a 2-approximation algorithm using a rounding method. When the CFG is a tree or the out-degree of each node in the CFG is at most two, we show that we can insert the bank selection instructions optimally in polynomial time. We then consider the case when there are some nodes that do not access any memory bank and design a dynamic programming method to compute the optimal insertion strategy when the CFG is a tree. Finally, if the variables are not yet assigned, we show that it is NP-hard to decide the variable assignment with the minimum number of insertions needed even if the input CFG is a tree.", "paper_title": "Analysis and approximation for bank selection instruction minimization on partitioned memory architecture", "paper_id": "WOS:000300079100008"}