{"auto_keywords": [{"score": 0.04895705711811818, "phrase": "exception_handling"}, {"score": 0.03455018268948868, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "if-serial_exception"}, {"score": 0.004739773204474094, "phrase": "java_futures"}, {"score": 0.004485735417293941, "phrase": "exceptional_event"}, {"score": 0.004312622975366672, "phrase": "software_fault_tolerance"}, {"score": 0.004228577663320847, "phrase": "reliable_and_robust_software_systems"}, {"score": 0.0041625173012740544, "phrase": "recent_emergence"}, {"score": 0.004129873531628877, "phrase": "multi-processor_systems"}, {"score": 0.00409748471133883, "phrase": "parallel_programming_constructs"}, {"score": 0.003742711659195878, "phrase": "extant_semantics"}, {"score": 0.0036697319652557363, "phrase": "concurrent_settings"}, {"score": 0.0034185505275141077, "phrase": "similarly_intuitive_semantics"}, {"score": 0.0031595084685030845, "phrase": "potentially_asynchronous_computations"}, {"score": 0.003085681391556093, "phrase": "sequential_programs"}, {"score": 0.0029664385034477905, "phrase": "performance_benefits"}, {"score": 0.00290855128461017, "phrase": "method-level_concurrency"}, {"score": 0.0028743610212291727, "phrase": "as-if-serial_semantics"}, {"score": 0.0026355812883224203, "phrase": "equivalent_serial_version"}, {"score": 0.0025237171554924128, "phrase": "asif-serial_exception"}, {"score": 0.002181069180139225, "phrase": "open_source"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Java", " Exception handling", " Concurrent programming", " Futures"], "paper_abstract": "Exception handling enables programmers to specify the behavior of a program when an exceptional event occurs at runtime. Exception handling, thus, facilitates software fault tolerance and the production of reliable and robust software systems. With the recent emergence of multi-processor systems and parallel programming constructs, techniques are needed that provide exception handling support in these environments that are intuitive and easy to use. Unfortunately, extant semantics of exception handling for concurrent settings is significantly more complex to reason about than their serial counterparts. In this paper, we investigate a similarly intuitive semantics for exception handling for the future parallel programming construct in Java. Futures are used by programmers to identify potentially asynchronous computations and to introduce parallelism into sequential programs. The intent of futures is to provide some performance benefits through the use of method-level concurrency while maintaining as-if-serial semantics that novice programmers can easily understand - the semantics of a program with futures is the same as that for an equivalent serial version of the program. We extend this model to provide asif-serial exception handling semantics. Using this model our runtime delivers exceptions to the same point it would deliver them if the program was executed sequentially. We present the design and implementation of our approach and evaluate its efficiency using an open source Java virtual machine. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "As-if-serial exception handling semantics for Java futures", "paper_id": "WOS:000265390900005"}