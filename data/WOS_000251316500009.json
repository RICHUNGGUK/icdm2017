{"auto_keywords": [{"score": 0.04920822493417556, "phrase": "factor_oracle"}, {"score": 0.00481495049065317, "phrase": "factor_oracles"}, {"score": 0.004641351004344458, "phrase": "relatively_new_data_structure"}, {"score": 0.004234129588974058, "phrase": "allauzen"}, {"score": 0.004182594185074993, "phrase": "crochemore"}, {"score": 0.00410645614623058, "phrase": "raffinot"}, {"score": 0.0036553070575015344, "phrase": "experimental_behaviour"}, {"score": 0.0035668128900149814, "phrase": "factor_oracle_based_string_matching"}, {"score": 0.0031942814007173254, "phrase": "important_steps"}, {"score": 0.002673957615079041, "phrase": "known_properties"}, {"score": 0.00259320616168125, "phrase": "simple_observations"}, {"score": 0.0021049977753042253, "phrase": "factor_automata"}], "paper_keywords": ["factor oracle", " string matching", " suffix trie", " suffix tree", " graph quotient"], "paper_abstract": "The factor oracle is a relatively new data structure for the set of factors of a string. It has been introduced by Allauzen, Crochemore, and Raffinot in 1999. It may recognize nonfactors (hence the name \"oracle\") but its implementational simplicity and experimental behaviour are stunning; factor oracle based string matching has been conjectured optimal on average. However, its structure is not well understood. We take important steps in clarifying its structure by explaining how it can be obtained as a quotient of the trie of the set of factors. When seen this way, all known properties of the factor oracle become simple observations. Also, we introduce a framework where various oracles can be compared. The factor oracle is better than several natural ones obtained from the trie of the set of factors, the suffix and the factor automata, respectively.", "paper_title": "The structure of factor oracles", "paper_id": "WOS:000251316500009"}