{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "business_process_models"}, {"score": 0.004715702140552199, "phrase": "recent_literature"}, {"score": 0.00465067040500426, "phrase": "business_process"}, {"score": 0.004523272849033429, "phrase": "numerous_contributions"}, {"score": 0.0032629585038738856, "phrase": "intended_generality"}, {"score": 0.003086396772496527, "phrase": "static_and_dynamic_analysis_methods"}, {"score": 0.0027806165169981622, "phrase": "conceptually_simple_scheme"}, {"score": 0.002742196991950893, "phrase": "dynamic_or-join_synchronization_policies"}, {"score": 0.0026118503041971976, "phrase": "low_run-time_overhead"}, {"score": 0.0022567398334877847, "phrase": "intended_model_properties"}], "paper_keywords": ["business processes", " OR-join problem", " BPMN standard"], "paper_abstract": "The recent literature on business process modeling notations contains numerous contributions to the so-called OR-join (or inclusive merge gateway) problem. We analyze the problem and present an approach to solve it without compromising any of the two major concerns that are involved: a) a clear semantical definition (design), which also clarifies what has to be implemented to achieve the intended generality of the construct, and b) a comprehensive set of static and dynamic analysis methods (verification of properties of business process models using the construct). We provide a conceptually simple scheme for dynamic OR-join synchronization policies, which can be implemented with low run-time overhead and allows the practitioner to effectively link the design of business process models with OR-joins to an analysis of the intended model properties. The definitions have been experimentally validated by a graph-based simulator.(2)", "paper_title": "On Defining the Behavior of OR-joins in Business Process Models", "paper_id": "WOS:000266698400002"}