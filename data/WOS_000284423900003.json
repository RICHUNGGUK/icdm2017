{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "matrix_languages"}, {"score": 0.015103812956951613, "phrase": "octave"}, {"score": 0.010296564498083544, "phrase": "matrix_operations"}, {"score": 0.004666082578646155, "phrase": "matlab"}, {"score": 0.004342430078306461, "phrase": "interactive_programming_environments"}, {"score": 0.00415166680936294, "phrase": "matrix_data_types"}, {"score": 0.004114527599108729, "phrase": "current_implementations"}, {"score": 0.0038985716790825697, "phrase": "ibm"}, {"score": 0.0037272031155266556, "phrase": "new_framework"}, {"score": 0.003611751858608048, "phrase": "computational_power"}, {"score": 0.00333097896868937, "phrase": "explicit_notions"}, {"score": 0.0031845067058084583, "phrase": "new_matrix_data_type"}, {"score": 0.003071965703296204, "phrase": "synergistic_processing_elements"}, {"score": 0.002936849401568391, "phrase": "lazy_evaluation_semantics"}, {"score": 0.0027575842698911173, "phrase": "data_dependence_graphs"}, {"score": 0.0026962411675196213, "phrase": "data_dependence_graph"}, {"score": 0.0024421008630165046, "phrase": "data_parallelism"}, {"score": 0.0023346234464901978, "phrase": "matrix_language_programs"}, {"score": 0.002292965705677312, "phrase": "extensive_experiments"}], "paper_keywords": ["Programming languages", " lazy evaluation", " scheduling", " data partitioning", " math script languages", " Cell Broadband Engine architecture"], "paper_abstract": "Matrix languages, including MATLAB and Octave, are established standards for applications in science and engineering. They provide interactive programming environments that are easy to use due to their script languages with matrix data types. Current implementations of matrix languages do not fully utilize high-performance, special-purpose chip architectures, such as the IBM PowerXCell processor (Cell). We present a new framework that extends Octave to harvest the computational power of the Cell. With this framework, the programmer is alleviated of the burden of introducing explicit notions of parallelism. Instead, the programmer uses a new matrix data type to execute matrix operations in parallel on the synergistic processing elements (SPEs) of the Cell. We employ lazy evaluation semantics for our new matrix data type to obtain execution traces of matrix operations. Traces are converted to data dependence graphs; operations in the data dependence graph are lowered (split into submatrices), scheduled and executed on the SPEs. Thereby, we exploit 1) data parallelism, 2) instruction level parallelism, 3) pipeline parallelism, and 4) task parallelism of matrix language programs. We conducted extensive experiments to show the validity of our approach. Our Cell-based implementation achieves speedups of up to a factor of 12 over code run on recent Intel Core2 Quad processors.", "paper_title": "Accelerating the Execution of Matrix Languages on the Cell Broadband Engine Architecture", "paper_id": "WOS:000284423900003"}