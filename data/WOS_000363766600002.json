{"auto_keywords": [{"score": 0.048079189835671964, "phrase": "high_performance"}, {"score": 0.015719716506582538, "phrase": "many-core_programming"}, {"score": 0.004763895422211728, "phrase": "many-core_hardware"}, {"score": 0.00439777299939725, "phrase": "hardware-specific_details"}, {"score": 0.003931798194574009, "phrase": "high-level_language"}, {"score": 0.0038283058265876713, "phrase": "low-level_language"}, {"score": 0.003629392214109574, "phrase": "clear_and_systematic_methodology"}, {"score": 0.002947266048104005, "phrase": "multiple_levels"}, {"score": 0.0027791193706247267, "phrase": "low-level_programming"}, {"score": 0.0027058852678238632, "phrase": "detailed_performance_feedback"}, {"score": 0.0025514745448798385, "phrase": "graphical_processing_unit"}, {"score": 0.002524455425638578, "phrase": "gpu"}, {"score": 0.0022685255265595624, "phrase": "almost_all_cases"}, {"score": 0.0022087165619569006, "phrase": "substantial_performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["methodology", " stepwise-refinement", " many-core", " programming language", " hardware description", " abstraction levels"], "paper_abstract": "Many-core hardware is targeted specifically at obtaining high performance, but reaching high performance is often challenging because hardware-specific details have to be taken into account. Although there are many programming systems that try to alleviate many-core programming, some providing a high-level language, others providing a low-level language for control, none of these systems have a clear and systematic methodology as a foundation. In this article, we propose stepwise-refinement for performance: a novel, clear, and structured methodology for obtaining high performance on many-cores. We present a system that supports this methodology, offers multiple levels of abstraction to provide programmers a trade-off between high-level and low-level programming, and provides programmers detailed performance feedback. We evaluate our methodology with several widely varying compute kernels on two different many-core architectures: a Graphical Processing Unit (GPU) and the Xeon Phi. We show that our methodology gives insight in the performance, and that in almost all cases, we gain a substantial performance improvement using our methodology. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "Stepwise-refinement for performance: a methodology for many-core programming", "paper_id": "WOS:000363766600002"}