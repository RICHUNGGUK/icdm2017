{"auto_keywords": [{"score": 0.041440102784533736, "phrase": "quality_requirements"}, {"score": 0.03748524774994644, "phrase": "overall_satisfaction"}, {"score": 0.0314215624960668, "phrase": "earned_business_value"}, {"score": 0.00481495049065317, "phrase": "software_systems"}, {"score": 0.004765173195920904, "phrase": "dynamic_quality_tradeoff"}, {"score": 0.004715908063787721, "phrase": "value-based_feedback_control_loop"}, {"score": 0.004571133708117498, "phrase": "software_system"}, {"score": 0.004250302819248558, "phrase": "uncertain_and_changing_environment"}, {"score": 0.003993216345115755, "phrase": "change_impact"}, {"score": 0.0036363418376496484, "phrase": "reasonable_actions"}, {"score": 0.003434085751246066, "phrase": "existing_controllers"}, {"score": 0.0033285306462537884, "phrase": "low-level_performance_indicators"}, {"score": 0.0032769720645483102, "phrase": "high-level_requirements"}, {"score": 0.0031928040608991543, "phrase": "live_goal_model"}, {"score": 0.003143341238802547, "phrase": "runtime_requirements"}, {"score": 0.0028921584725218642, "phrase": "control-theoretic_self-tuning_method"}, {"score": 0.0027741761880779535, "phrase": "different_quality_requirements"}, {"score": 0.0026888503045081505, "phrase": "tradeoff_decisions"}, {"score": 0.0025524176761139413, "phrase": "optimal_configuration"}, {"score": 0.002512850690695835, "phrase": "variation_points"}, {"score": 0.002461044825190643, "phrase": "right_alternative"}, {"score": 0.002435542816459651, "phrase": "or-decomposed_goals"}, {"score": 0.002360607691114015, "phrase": "corresponding_system_architecture_reconfigurations"}, {"score": 0.002171836484200008, "phrase": "static_and_ad_hoc_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Feedback control theory", " Preference", " Goal-oriented reasoning", " Self-tuning", " Earned business value"], "paper_abstract": "Quality requirements of a software system cannot be optimally met, especially when it is running in an uncertain and changing environment. In principle, a controller at runtime can monitor the change impact on quality requirements of the system, update the expectations and priorities from the environment, and take reasonable actions to improve the overall satisfaction. In practice, however, existing controllers are mostly designed for tuning low-level performance indicators instead of high-level requirements. By maintaining a live goal model to represent runtime requirements and linking the overall satisfaction of quality requirements to an indicator of earned business value, we propose a control-theoretic self-tuning method that can dynamically tune the preferences of different quality requirements, and can autonomously make tradeoff decisions through our Preference-Based Goal Reasoning procedure. The reasoning procedure results in an optimal configuration of the variation points by selecting the right alternative of OR-decomposed goals and such a configuration is mapped onto corresponding system architecture reconfigurations. The effectiveness four self-tuning method is evaluated by earned business value, comparing our results with those obtained using static and ad hoc methods. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Self-tuning of software systems through dynamic quality tradeoff and value-based feedback control loop", "paper_id": "WOS:000310669500004"}