{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "overlapping_use_cases"}, {"score": 0.005942959921771887, "phrase": "overlapping_requirements"}, {"score": 0.00584939001720169, "phrase": "use_case"}, {"score": 0.004615202066192795, "phrase": "large_information_systems"}, {"score": 0.004542441734438654, "phrase": "divide-and-conquer_policy"}, {"score": 0.004330941610682453, "phrase": "large_number"}, {"score": 0.004173244935967375, "phrase": "different_stakeholders"}, {"score": 0.003916098498242888, "phrase": "full_requirement_specification"}, {"score": 0.0036167509502276294, "phrase": "driven_approach"}, {"score": 0.0031676593724896075, "phrase": "traditional_requirements"}, {"score": 0.0029409171055888804, "phrase": "message_sequence"}, {"score": 0.002879158342988017, "phrase": "common_subgoal"}, {"score": 0.002833689453299307, "phrase": "use_cases"}, {"score": 0.0027159094186967247, "phrase": "requirement_specification"}, {"score": 0.0024423826953133844, "phrase": "existing_methods"}, {"score": 0.00241658945942583, "phrase": "requirement_management"}, {"score": 0.002316105585203396, "phrase": "detection_approach"}, {"score": 0.00229164285862567, "phrase": "sequence_diagrams"}, {"score": 0.002219790619936024, "phrase": "evaluation_results"}, {"score": 0.0021847119298612264, "phrase": "practical_requirement_models"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": [""], "paper_abstract": "To deal with the complexity of large information systems, the divide-and-conquer policy is usually adopted to capture requirements from a large number of stakeholders: obtain requirements from different stakeholders, respectively, and then put them together to form a full requirement specification. One of the problems induced by the policy is overlapping requirements. A use case driven approach could not avoid overlapping requirements either: it produces overlapping use cases, which are even more harmful, because a use case describes not only inputs and outputs as traditional requirements do, but also the scenarios. Each of the overlapping use cases provides a message sequence to implement the common subgoal. Overlapping use cases not only decrease the maintainability of the requirement specification, but also result in a complicated, confusing and expensive system. To be worse, it is difficult to detect overlapping use cases with existing methods for requirement management. To find out overlapping use cases, a detection approach using sequence diagrams and statecharts is proposed. Evaluation results suggest that practical requirement models do contain overlapping use cases, and the proposed approach is effective in detecting them.", "paper_title": "Detecting overlapping use cases", "paper_id": "WOS:000249087700003"}