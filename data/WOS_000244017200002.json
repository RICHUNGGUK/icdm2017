{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "functional_dependencies"}, {"score": 0.007044026337047674, "phrase": "constraint_handling_rules"}, {"score": 0.006677503669971378, "phrase": "haskell_style_type_classes"}, {"score": 0.004591508646289516, "phrase": "sufficient_conditions"}, {"score": 0.004563880494020726, "phrase": "popular_and_useful_extension"}, {"score": 0.003946195919158241, "phrase": "previous_work"}, {"score": 0.003711723285313348, "phrase": "user-programmable_type_extensions"}, {"score": 0.0032336801561165113, "phrase": "first_time"}, {"score": 0.0031845067058084613, "phrase": "concise_result"}, {"score": 0.002255431275670053, "phrase": "better_understanding"}, {"score": 0.0021049977753042253, "phrase": "new_applications"}], "paper_keywords": [""], "paper_abstract": "Functional dependencies are a popular and useful extension to Haskell style type classes. We give a reformulation of functional dependencies in terms of Constraint Handling Rules (CHRs). In previous work, CHRs have been employed for describing user-programmable type extensions in the context of Haskell style type classes. Here, we make use of CHRs to provide for the first time a concise result that under some sufficient conditions, functional dependencies allow for sound, complete and decidable type inference. The sufficient conditions imposed on functional dependencies can be very limiting. We show how to safely relax these conditions and Suggest several sound extensions of functional dependencies. Our results allow for a better understanding of functional dependencies and open up the opportunity for new applications.", "paper_title": "Understanding functional dependencies via constraint handling rules", "paper_id": "WOS:000244017200002"}