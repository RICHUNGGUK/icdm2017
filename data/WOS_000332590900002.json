{"auto_keywords": [{"score": 0.049146612112995945, "phrase": "monte_carlo_tree_search_problem"}, {"score": 0.00481495049065317, "phrase": "efficient_sampling_method"}, {"score": 0.004539005582217309, "phrase": "monte_carlo"}, {"score": 0.004195418010131832, "phrase": "min-max_tree_search_problem"}, {"score": 0.003728000957725218, "phrase": "bernoulli_variables"}, {"score": 0.0030314419455512013, "phrase": "game_tree"}, {"score": 0.0026148807877309417, "phrase": "child_node"}, {"score": 0.0024405312482831646, "phrase": "approximate_min-max_score"}, {"score": 0.0021049977753042253, "phrase": "simple_and_efficient_algorithm"}], "paper_keywords": ["Monte Carlo tree search", " random sampling", " game", " UCT"], "paper_abstract": "We consider Monte Carlo tree search problem, a variant of Min-Max tree search problem where the score of each leaf is the expectation of some Bernoulli variables and not explicitly given but can be estimated through (random) playouts. The goal of this problem is, given a game tree and an oracle that returns an outcome of a playout, to find a child node of the root which attains an approximate min-max score. This problem arises in two player games such as computer Go. We propose a simple and efficient algorithm for Monte Carlo tree search problem.", "paper_title": "Efficient Sampling Method for Monte Carlo Tree Search Problem", "paper_id": "WOS:000332590900002"}