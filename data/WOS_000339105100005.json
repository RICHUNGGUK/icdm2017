{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fine-grained_reuse"}, {"score": 0.0045726187330434025, "phrase": "class_inheritance"}, {"score": 0.004456044928556639, "phrase": "object-oriented_programming"}, {"score": 0.004364919932563366, "phrase": "fine-grained_code_reuse"}, {"score": 0.004039423410198574, "phrase": "completely_different_context"}, {"score": 0.0036616109902631293, "phrase": "programming_languages"}, {"score": 0.003513264130359459, "phrase": "trait-based_programs"}, {"score": 0.0034236045013591437, "phrase": "type_systems"}, {"score": 0.0033190180867511605, "phrase": "first_deductive_proof_system"}, {"score": 0.003267925215811654, "phrase": "trait-based_object-oriented_language"}, {"score": 0.0025625729433234644, "phrase": "flexible_code_reuse"}, {"score": 0.002471400498582011, "phrase": "flexible_reuse_potential"}, {"score": 0.0023834640793589435, "phrase": "new_specifications"}, {"score": 0.0022749744354271816, "phrase": "incremental_way"}, {"score": 0.0022168460543913787, "phrase": "established_proofs"}, {"score": 0.0021049977753042253, "phrase": "proof_system"}], "paper_keywords": ["Traits", " Object orientation", " Program verification", " Proof systems", " Incremental reasoning"], "paper_abstract": "Traits have been proposed as a more flexible mechanism than class inheritance for structuring code in object-oriented programming, to achieve fine-grained code reuse. A trait originally developed for one purpose can be adapted and reused in a completely different context. Formalizations of traits have been extensively studied, and implementations of traits have started to appear in programming languages. So far, work on formally establishing properties of trait-based programs has mostly concentrated on type systems. This paper presents the first deductive proof system for a trait-based object-oriented language. If a specification of a trait can be given a priori, covering all actual usage of that trait, our proof system is modular as each trait is analyzed only once. However, imposing such a restriction may in many cases unnecessarily limit traits as a mechanism for flexible code reuse. In order to reflect the flexible reuse potential of traits, our proof system additionally allows new specifications to be added to a trait in an incremental way which does not violate established proofs. We formalize and show the soundness of the proof system.", "paper_title": "Verifying traits: an incremental proof system for fine-grained reuse", "paper_id": "WOS:000339105100005"}