{"auto_keywords": [{"score": 0.04188369592933691, "phrase": "test_cases"}, {"score": 0.010612387000973441, "phrase": "mutation_testing"}, {"score": 0.007854597561249503, "phrase": "fault-based_testing"}, {"score": 0.004509699374398327, "phrase": "hoare"}, {"score": 0.004419703921314433, "phrase": "unifying_theory_of_programming"}, {"score": 0.004202472962684885, "phrase": "denotational_semantics"}, {"score": 0.0040978781692373005, "phrase": "specification_predicates"}, {"score": 0.003594369823549604, "phrase": "testing_theory"}, {"score": 0.0032989853590079153, "phrase": "pre-specified_faults"}, {"score": 0.0032494292163722065, "phrase": "well-known_fault-based_technique"}, {"score": 0.0024993218789131437, "phrase": "mutation_technique"}, {"score": 0.0022252591643049744, "phrase": "semantic_level"}, {"score": 0.002202894673025544, "phrase": "utp_design_predicates"}, {"score": 0.002137137933768807, "phrase": "algebraic_properties"}, {"score": 0.0021049977753042253, "phrase": "small_programming_language"}], "paper_keywords": ["Specification-based testing", " Fault-based testing", " Mutation testing", " Unifying theories of programming", " Refinement calculus", " Algebra of programming"], "paper_abstract": "This paper presents a theory of testing that integrates into Hoare and He's Unifying Theory of Programming (UTP). We give test cases a denotational semantics by viewing them as specification predicates. This reformulation of test cases allows for relating test cases via refinement to specifications and programs. Having such a refinement order that integrates test cases, we develop a testing theory for fault-based testing. Fault-based testing uses test data designed to demonstrate the absence of a set of pre-specified faults. A well-known fault-based technique is mutation testing. In mutation testing, first, faults are injected into a program by altering (mutating) its source code. Then, test cases that can detect these errors are designed. The assumption is that other faults will be caught, too. In this paper, we apply the mutation technique to both, specifications and programs. Using our theory of testing, two new test case generation laws for detecting injected (anticipated) faults are presented: one is based on the semantic level of UTP design predicates, the other on the algebraic properties of a small programming language.", "paper_title": "Mutation testing in UTP", "paper_id": "WOS:000263058800003"}