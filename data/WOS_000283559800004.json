{"auto_keywords": [{"score": 0.04573629565804585, "phrase": "method_group_commutativity"}, {"score": 0.014799757808799186, "phrase": "object_methods"}, {"score": 0.00481495049065317, "phrase": "distributed_systems"}, {"score": 0.004439097815805505, "phrase": "cached_object_consistency"}, {"score": 0.0038764861784138117, "phrase": "semantic_specification"}, {"score": 0.003671865026158296, "phrase": "logical_expressions"}, {"score": 0.00357362651129581, "phrase": "commutativity_conjectures"}, {"score": 0.0034311578789991363, "phrase": "pvs_theorem"}, {"score": 0.0031845067058084583, "phrase": "method_commutativity_specification"}, {"score": 0.002975652654536407, "phrase": "distributed_caching_system"}, {"score": 0.0028569549040495163, "phrase": "method_invocations"}, {"score": 0.002799388549023265, "phrase": "greater_commutativity"}, {"score": 0.0027616550517346066, "phrase": "weaker_consistency_requirements"}, {"score": 0.0026514716793215425, "phrase": "mcs."}, {"score": 0.0026157259734105, "phrase": "base_approach"}, {"score": 0.0024774888010414206, "phrase": "client's_sequential_execution"}, {"score": 0.002162951519368368, "phrase": "associated_optimizations"}, {"score": 0.0021049977753042253, "phrase": "java_rmi_application_benchmarks"}], "paper_keywords": ["Pre and postconditions", " specifying and verifying and reasoning about programs", " logics and meanings of programs", " theory of computation", " distributed objects", " components", " containers", " language constructs and features", " programming languages", " software/software engineering"], "paper_abstract": "In order to utilize the semantics of object methods to ensure cached object consistency, method group commutativity specifies the conditions under which a group of methods will commute. Method group commutativity is determined using a semantic specification of object methods, provided in terms of logical expressions, to create commutativity conjectures that are analyzed using the PVS theorem prover. This analysis results in the creation of a method commutativity specification (MCS), which is used by a distributed caching system to ensure the consistency of method invocations. For greater commutativity, weaker consistency requirements can be specified in the MCS. This base approach is enhanced by optimizations that consider a client's sequential execution of methods and that reduce the amount of data cached by the client. The effectiveness of method group commutativity and associated optimizations is evaluated using Java RMI application benchmarks.", "paper_title": "Semantics-Based Object Caching in Distributed Systems", "paper_id": "WOS:000283559800004"}