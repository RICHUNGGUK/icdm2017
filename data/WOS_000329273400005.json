{"auto_keywords": [{"score": 0.04788992596085788, "phrase": "test_cases"}, {"score": 0.040163131354655414, "phrase": "essential_paths"}, {"score": 0.03986231444989042, "phrase": "security_testing"}, {"score": 0.039415135072106644, "phrase": "proposed_system"}, {"score": 0.03725049175533517, "phrase": "client_site"}, {"score": 0.03669283019044759, "phrase": "new_path"}, {"score": 0.03454147612846158, "phrase": "testing_site"}, {"score": 0.00481495049065317, "phrase": "demand-driven_software_vulnerability_detection"}, {"score": 0.004685375117376838, "phrase": "program_security_flaws"}, {"score": 0.004506265705673849, "phrase": "active_area"}, {"score": 0.004200874581076468, "phrase": "security_flaws"}, {"score": 0.004103728794623367, "phrase": "novel_distributed_demand-driven_security_testing_system"}, {"score": 0.00396218934254591, "phrase": "end_users"}, {"score": 0.00337650257503995, "phrase": "user_input"}, {"score": 0.0031721009574803127, "phrase": "symbolic_execution"}, {"score": 0.0030986716686217768, "phrase": "potential_vulnerability"}, {"score": 0.002865929543375884, "phrase": "client_sites"}, {"score": 0.0024134449026937586, "phrase": "unreported_vulnerability"}, {"score": 0.002357535807803925, "phrase": "prototype_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software vulnerability", " Security testing", " Test decomposition"], "paper_abstract": "Security testing aims at detecting program security flaws through a set of test cases and has become an active area of research. The challenge is how to efficiently produce test cases that are highly effective in detecting security flaws. This paper presents a novel distributed demand-driven security testing system to address this challenge. It leverages how end users use the software to increase the coverage of essential paths for security testing. The proposed system consists of many client sites and one testing site. The software under test is installed at each client site. Whenever a new path is about to be exercised by a user input, it will be sent to the testing site for security testing. At the testing site, symbolic execution is used to check any potential vulnerability on this new path. If a vulnerability is detected, a signature is automatically generated and updated to all client sites for protection. The benefits are as follows. First, it allows us to focus testing on essential paths, i.e., the paths that are actually being explored by users or attackers. Second, it stops an attacker from exploiting an unreported vulnerability at the client site. A prototype system has been implemented to evaluate the performance of the proposed system. The results show that it is both effective and efficient in practice. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "A distributed framework for demand-driven software vulnerability detection", "paper_id": "WOS:000329273400005"}