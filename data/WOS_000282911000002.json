{"auto_keywords": [{"score": 0.044919229938350444, "phrase": "secondary_storage"}, {"score": 0.00481495049065317, "phrase": "practical_algorithms"}, {"score": 0.004716520738331953, "phrase": "suffix_tree_construction"}, {"score": 0.004620093797504386, "phrase": "external_memory"}, {"score": 0.0043875257506180865, "phrase": "suffix_trees"}, {"score": 0.0036052633308076933, "phrase": "suffix_tree"}, {"score": 0.0031845067058084583, "phrase": "main_memory"}, {"score": 0.002841971477743441, "phrase": "algorithmic_approaches"}, {"score": 0.002755104031926742, "phrase": "external_memory_suffix_tree_construction"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["suffix tree", " external memory algorithms", " string index"], "paper_abstract": "The construction of suffix trees in secondary storage was considered impractical due to its excessive I/O cost. Algorithms developed in the last decade show that a suffix tree can efficiently be built in secondary storage for inputs which fit the main memory. In this paper, we analyze the details of algorithmic approaches to the external memory suffix tree construction and compare the performance and scalability of existing state-of-the-art software based on these algorithms. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "A survey of practical algorithms for suffix tree construction in external memory", "paper_id": "WOS:000282911000002"}