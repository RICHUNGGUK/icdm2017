{"auto_keywords": [{"score": 0.049529099900281724, "phrase": "fortran"}, {"score": 0.00481495049065317, "phrase": "multiple_inheritance"}, {"score": 0.0046240999614456605, "phrase": "high-performance_computing"}, {"score": 0.004440780432053927, "phrase": "object-oriented_programming"}, {"score": 0.004119313626110943, "phrase": "fortran_programmers"}, {"score": 0.003955929733653185, "phrase": "oop"}, {"score": 0.0036907133026806327, "phrase": "widespread_compiler_support"}, {"score": 0.003523822585025555, "phrase": "object-oriented_class_hierarchies"}, {"score": 0.0034233569308012982, "phrase": "related_class_behaviors"}, {"score": 0.0033644530302903513, "phrase": "dynamic_polymorphism"}, {"score": 0.0031753062090452864, "phrase": "multiple_parent_classes"}, {"score": 0.003031650815900696, "phrase": "explicit_multiple_inheritance_relationships"}, {"score": 0.0027634902834910184, "phrase": "intrinsic_feature"}, {"score": 0.0026384167183586015, "phrase": "user-constructed_design_pattern"}, {"score": 0.002548331088496964, "phrase": "present_paper"}, {"score": 0.002461313735611462, "phrase": "facade_structural_design_pattern"}, {"score": 0.0024049552650867935, "phrase": "multiple_inheritance_class_relationship"}, {"score": 0.0022434880661725493, "phrase": "associated_class_relationships"}, {"score": 0.0022048406330100697, "phrase": "complicated_data_structures"}, {"score": 0.0021049977753042253, "phrase": "multiple_inheritance_scenarios"}], "paper_keywords": [""], "paper_abstract": "Although the high-performance computing (HPC) community increasingly embraces object-oriented programming (OOP), most HPC OOP projects employ the C++ programming language. Until recently, Fortran programmers interested in mining the benefits of OOP had to emulate OOP in Fortran 90/95. The advent of widespread compiler support for Fortran 2003 now facilitates explicitly constructing object-oriented class hierarchies via inheritance and leveraging related class behaviors such as dynamic polymorphism. Although C++ allows a class to inherit from multiple parent classes, Fortran and several other OOP languages restrict or prohibit explicit multiple inheritance relationships in order to circumvent several pitfalls associated with them. Nonetheless, what appears as an intrinsic feature in one language can be modeled as a user-constructed design pattern in another language. The present paper demonstrates how to apply the facade structural design pattern to support a multiple inheritance class relationship in Fortran 2003. The design unleashes the power of the associated class relationships for modeling complicated data structures yet avoids the ambiguities that plague some multiple inheritance scenarios.", "paper_title": "Emulating Multiple Inheritance in Fortran 2003/2008", "paper_id": "WOS:000350127600001"}