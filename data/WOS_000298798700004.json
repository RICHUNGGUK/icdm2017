{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "active_and_semi-supervised_learning"}, {"score": 0.004520272777451894, "phrase": "software_quality"}, {"score": 0.004472935829694716, "phrase": "current_defect_prediction_techniques"}, {"score": 0.00433386573276633, "phrase": "sufficient_amount"}, {"score": 0.004288472456976113, "phrase": "historical_project_data"}, {"score": 0.004199101289890982, "phrase": "historical_data"}, {"score": 0.004068510313497539, "phrase": "new_projects"}, {"score": 0.0038801697284045864, "phrase": "effective_defect_prediction"}, {"score": 0.003623352647973122, "phrase": "sample-based_methods"}, {"score": 0.0035853745478488254, "phrase": "software_defect_prediction"}, {"score": 0.0035106041824568618, "phrase": "large_software_system"}, {"score": 0.0033656930865509547, "phrase": "small_percentage"}, {"score": 0.003226744277130179, "phrase": "defect_prediction_model"}, {"score": 0.002813457986293993, "phrase": "conventional_machine_learners"}, {"score": 0.0027258422018680453, "phrase": "semi-supervised_learner"}, {"score": 0.002654911400878851, "phrase": "active_semi-supervised_learner"}, {"score": 0.0025858215477025117, "phrase": "active_sampling"}, {"score": 0.002518525107994039, "phrase": "novel_active_semi-supervised_learning_method"}, {"score": 0.0023146962503449186, "phrase": "good_prediction_model"}, {"score": 0.002266364679369248, "phrase": "promise_datasets"}, {"score": 0.002219040041886641, "phrase": "proposed_methods"}, {"score": 0.0021049977753042253, "phrase": "industrial_practice"}], "paper_keywords": ["Software defect prediction", " Sampling", " Quality assurance", " Machine learning", " Active semi-supervised learning"], "paper_abstract": "Software defect prediction can help us better understand and control software quality. Current defect prediction techniques are mainly based on a sufficient amount of historical project data. However, historical data is often not available for new projects and for many organizations. In this case, effective defect prediction is difficult to achieve. To address this problem, we propose sample-based methods for software defect prediction. For a large software system, we can select and test a small percentage of modules, and then build a defect prediction model to predict defect-proneness of the rest of the modules. In this paper, we describe three methods for selecting a sample: random sampling with conventional machine learners, random sampling with a semi-supervised learner and active sampling with active semi-supervised learner. To facilitate the active sampling, we propose a novel active semi-supervised learning method ACoForest which is able to sample the modules that are most helpful for learning a good prediction model. Our experiments on PROMISE datasets show that the proposed methods are effective and have potential to be applied to industrial practice.", "paper_title": "Sample-based software defect prediction with active and semi-supervised learning", "paper_id": "WOS:000298798700004"}