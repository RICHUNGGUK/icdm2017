{"auto_keywords": [{"score": 0.03356689038352978, "phrase": "search_space"}, {"score": 0.015582933475847684, "phrase": "inverted_variable-length_gram_indexes"}, {"score": 0.013847453434861193, "phrase": "sql"}, {"score": 0.013429166159583292, "phrase": "substring_matching_queries"}, {"score": 0.00481495049065317, "phrase": "match_queries"}, {"score": 0.004566308708871429, "phrase": "text-based_data_sources"}, {"score": 0.004407690586271672, "phrase": "effective_support"}, {"score": 0.00436890075128947, "phrase": "string_matching_queries"}, {"score": 0.004254558771304349, "phrase": "relational_query_language"}, {"score": 0.004161553532799662, "phrase": "string_data"}, {"score": 0.0038431888954930083, "phrase": "efficient_indexes"}, {"score": 0.0035806300393050926, "phrase": "fixed_or_variable_sizes"}, {"score": 0.003365598242636633, "phrase": "optimal_processing"}, {"score": 0.003121719509312159, "phrase": "optimal_variable-length_gram"}, {"score": 0.0028572658971252616, "phrase": "effective_pruning_strategies"}, {"score": 0.002733539375462443, "phrase": "cost_estimation"}, {"score": 0.0026736945502820303, "phrase": "optimal_algorithms"}, {"score": 0.0026267609106294817, "phrase": "best_plan"}, {"score": 0.002592100731070259, "phrase": "minimum_cost"}, {"score": 0.0025578967205807843, "phrase": "matching_queries"}, {"score": 0.0025241429061867633, "phrase": "pruning_strategies"}, {"score": 0.0024579623598183355, "phrase": "approximate_algorithms"}, {"score": 0.0024148064819862337, "phrase": "exponential_nature"}, {"score": 0.002351485871160907, "phrase": "optimal_query_plan"}, {"score": 0.002289821830549781, "phrase": "proposed_techniques"}, {"score": 0.0022696277881969896, "phrase": "query_execution_time"}, {"score": 0.0021906130276146325, "phrase": "running_time"}, {"score": 0.002161695357601592, "phrase": "traditional_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Database management", " Query processing", " Substring matching", " q-Gram index", " Variable-length gram"], "paper_abstract": "With the widespread use of the internet, text-based data sources have become ubiquitous and the demand for effective support of string matching queries continues to increase. The relational query language SQL supports LIKE clauses for string data to handle substring matching queries. Due to the popularity of such substring matching queries, there have been many studies on designing efficient indexes to support the LIKE clause in SQL Among them, the indexes based on q-grams with fixed or variable sizes have been studied extensively. In this paper, we show that the optimal processing of substring matching queries with inverted variable-length gram indexes should be decided judiciously. However, the search space of finding the optimal variable-length gram set among those available is exponential with the number of grams. To reduce the search space, we present effective pruning strategies which do not sacrifice optimality. Based on the cost estimation, we propose the optimal algorithms to find the best plan with the minimum cost for substring matching queries using these pruning strategies. We also provide the approximate algorithms to overcome the exponential nature of search space to find an optimal query plan. Our performance study confirms that the proposed techniques improve query execution time for substring matching significantly compared to the running time of the traditional algorithms. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Efficient processing of substring match queries with inverted variable-length gram indexes", "paper_id": "WOS:000321479800008"}