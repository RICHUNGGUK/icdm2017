{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "procedural_shaders"}, {"score": 0.015273796863051286, "phrase": "texture_maps"}, {"score": 0.013377904034445188, "phrase": "procedural_shader"}, {"score": 0.00475924837336259, "phrase": "reduction_maps"}, {"score": 0.0042610532651691305, "phrase": "good_automatic_method"}, {"score": 0.003792657064634775, "phrase": "antialiased_version"}, {"score": 0.003662410853488772, "phrase": "new_procedural_shader"}, {"score": 0.0035989687070420977, "phrase": "original_shader's_details"}, {"score": 0.0033170847930578473, "phrase": "new_algorithm"}, {"score": 0.0028341130433482565, "phrase": "wider_range"}, {"score": 0.0027049694095434905, "phrase": "stored_reflectance_functions"}, {"score": 0.002551762519273805, "phrase": "different_reflectances"}, {"score": 0.002435453488008121, "phrase": "rendered_surface"}, {"score": 0.0023792975669318615, "phrase": "close_range"}, {"score": 0.0023380300046435187, "phrase": "original_shader"}, {"score": 0.002244494905883452, "phrase": "texture_footprint"}, {"score": 0.002142161017595363, "phrase": "shader's_result"}, {"score": 0.0021049977753042253, "phrase": "antialiased_one"}], "paper_keywords": ["antialiasing", " texture", " procedural shader", " surface normal distribution"], "paper_abstract": "Both texture maps and procedural shaders suffer from rendering artifacts during minification. Unlike texture maps, there exist no good automatic method to antialias procedural shaders. Given a procedural shader for a surface, we present a method that automatically creates an antialiased version of the procedural shader. The new procedural shader maintains the original shader's details but reduces artifacts ( aliasing or noise) due to minification. This new algorithm creates a pyramid similar to a MIP-Map in order to represent the shader. Instead of storing per-texel color, pyramid stores weighted sums of reflectance functions, allowing a wider range of effects to be antialiased. The stored reflectance functions are automatically selected based on an analysis of the different reflectances found over the surface. When the rendered surface is viewed at close range, the original shader is used, but as the texture footprint grows, the algorithm gradually replaces the shader's result with an antialiased one.", "paper_title": "Antialiasing procedural shaders with reduction maps", "paper_id": "WOS:000253880100006"}