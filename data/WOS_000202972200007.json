{"auto_keywords": [{"score": 0.03794103686733496, "phrase": "cxprop"}, {"score": 0.00481495049065317, "phrase": "embedded_software"}, {"score": 0.004339293854115301, "phrase": "dataflow_analysis"}, {"score": 0.004289419884432487, "phrase": "different_domains"}, {"score": 0.004240116703465252, "phrase": "alternative_tradeoffs"}, {"score": 0.004191377834552202, "phrase": "analysis_speed"}, {"score": 0.003955926499405168, "phrase": "better_match"}, {"score": 0.0033839745649214517, "phrase": "\"conditional_x_propagation"}, {"score": 0.0032496585171039797, "phrase": "well-known_conditional_constant_propagation_algorithm"}, {"score": 0.0031569846310720135, "phrase": "abstract_value_domain"}, {"score": 0.002877769867854964, "phrase": "reasonable_precision"}, {"score": 0.0028446460307503343, "phrase": "pointer-rich_codes"}, {"score": 0.00273167822885383, "phrase": "sensor_network_programs"}, {"score": 0.0026846448177628023, "phrase": "tinyos"}, {"score": 0.0025929837295811673, "phrase": "code_size"}, {"score": 0.0025631294247072476, "phrase": "interprocedural_dead_code_elimination"}, {"score": 0.0024899850926034567, "phrase": "limited-bitwidth_global_variables"}, {"score": 0.002418923027024191, "phrase": "global_variables"}, {"score": 0.002349884235026956, "phrase": "novel_concurrency_model"}, {"score": 0.0023228223366301226, "phrase": "interrupt-driven_software"}, {"score": 0.0022696277881969896, "phrase": "tinyos_application_code_size"}, {"score": 0.0021543421286324945, "phrase": "average_data_size_reduction"}, {"score": 0.0021049977753042253, "phrase": "ram_compression"}], "paper_keywords": ["performance", " languages", " abstract interpretation", " TinyOS", " embedded software"], "paper_abstract": "Many abstract value domains such as intervals, bitwise, constants, and value-sets have been developed to support dataflow analysis. Different domains offer alternative tradeoffs between analysis speed and precision. Furthermore, some domains are a better match for certain kinds of code than others. This paper presents the design and implementation of cXprop, an analysis and transformation tool for C that implements \"conditional X propagation,\" a generalization of the well-known conditional constant propagation algorithm where X is an abstract value domain supplied by the user. cXprop is interprocedural, context-insensitive, and achieves reasonable precision on pointer-rich codes. We have applied cXprop to sensor network programs running on TinyOS, in order to reduce code size through interprocedural dead code elimination, and to find limited-bitwidth global variables. Our analysis of global variables is supported by a novel concurrency model for interrupt-driven software. cXprop reduces TinyOS application code size by an average of 9.2% and predicts an average data size reduction of 8.2% through RAM compression.", "paper_title": "Pluggable abstract domains for analyzing embedded software", "paper_id": "WOS:000202972200007"}