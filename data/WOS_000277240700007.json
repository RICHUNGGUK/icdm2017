{"auto_keywords": [{"score": 0.048428407558443576, "phrase": "design_smells"}, {"score": 0.03868050804560161, "phrase": "analysed_systems"}, {"score": 0.00481495049065317, "phrase": "domain_analysis"}, {"score": 0.004523865550323285, "phrase": "design_problems"}, {"score": 0.004488734023485018, "phrase": "software_systems"}, {"score": 0.004217286731331736, "phrase": "smell_detection"}, {"score": 0.003885668358145471, "phrase": "predefined_smells"}, {"score": 0.0038106195546165574, "phrase": "new_smells"}, {"score": 0.0035940277928341265, "phrase": "new_detection_algorithms"}, {"score": 0.0035245918797629804, "phrase": "previous_approaches"}, {"score": 0.0032727116186194584, "phrase": "existing_approaches"}, {"score": 0.0031351720217878917, "phrase": "reduced_number"}, {"score": 0.0029338597685088603, "phrase": "detection_algorithms"}, {"score": 0.002865929543375884, "phrase": "domain-specific_language"}, {"score": 0.00277778944472107, "phrase": "thorough_domain_analysis"}, {"score": 0.002681859084438076, "phrase": "high-level_domain-related_abstractions"}, {"score": 0.002146527342660575, "phrase": "detection_results"}, {"score": 0.0021049977753042253, "phrase": "previous_approach"}], "paper_keywords": ["Design smells", " Antipatterns", " Code smells", " Domain-specific language", " Algorithm generation", " Detection", " Java"], "paper_abstract": "Code and design smells are recurring design problems in software systems that must be identified to avoid their possible negative consequences on development and maintenance. Consequently, several smell detection approaches and tools have been proposed in the literature. However, so far, they allow the detection of predefined smells but the detection of new smells or smells adapted to the context of the analysed systems is possible only by implementing new detection algorithms manually. Moreover, previous approaches do not explain the transition from specifications of smells to their detection. Finally, the validation of the existing approaches and tools has been limited on few proprietary systems and on a reduced number of smells. In this paper, we introduce an approach to automate the generation of detection algorithms from specifications written using a domain-specific language. This language is defined from a thorough domain analysis. It allows the specification of smells using high-level domain-related abstractions. It allows the adaptation of the specifications of smells to the context of the analysed systems. We specify 10 smells, generate automatically their detection algorithms using templates, and validate the algorithms in terms of precision and recall on Xerces v2.7.0 and GanttProject v1.10.2, two open-source object-oriented systems. We also compare the detection results with those of a previous approach, iPlasma.", "paper_title": "From a domain analysis to the specification and detection of code and design smells", "paper_id": "WOS:000277240700007"}