{"auto_keywords": [{"score": 0.0496439738720196, "phrase": "self-management_capabilities"}, {"score": 0.00481495049065317, "phrase": "pervasive_service_middleware"}, {"score": 0.004727837281331949, "phrase": "pervasive_computing_systems"}, {"score": 0.004335000368745273, "phrase": "easy_task"}, {"score": 0.0042178318724732005, "phrase": "autonomous_behaviors"}, {"score": 0.004066498558415824, "phrase": "single_autonomicity_handling_mechanism"}, {"score": 0.003956558420993431, "phrase": "comprehensive_self-management_capabilities"}, {"score": 0.0037454814403672697, "phrase": "hybrid_approach"}, {"score": 0.0034813964296826973, "phrase": "different_architecture_styles"}, {"score": 0.003325852346387272, "phrase": "architectural_level"}, {"score": 0.00325069754015951, "phrase": "semantic_web_technologies"}, {"score": 0.003177235604998673, "phrase": "comprehensive_context-awareness"}, {"score": 0.0030076088903023034, "phrase": "configuration_optimizations"}, {"score": 0.0028863414975346512, "phrase": "planning_procedures"}, {"score": 0.0027954035431845344, "phrase": "optimum_system_configuration"}, {"score": 0.0027573101010593863, "phrase": "current_architectural_structure"}, {"score": 0.0027197343489967322, "phrase": "underlying_system"}, {"score": 0.002682669289913153, "phrase": "architectural_query_language"}, {"score": 0.0024593458703463474, "phrase": "development_time_qualities"}, {"score": 0.002163600705898299, "phrase": "quality_attributes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Self-management", " Architectural styles", " Component control", " Goal Management", " Change Management"], "paper_abstract": "Self-management capabilities for pervasive computing systems are critical in improving dependability, usability, and autonomicity. However, realizing self-management is not an easy task due to complexities of implementing autonomous behaviors. It has been recognized that a single autonomicity handling mechanism is not sufficient to realize comprehensive self-management capabilities when different technologies are involved. Therefore, we propose a hybrid approach, the 'linkSmart Three Layered architectural (LinkSmart-3L) style', in which different architecture styles are incorporated. The LinkSmart-3L style enables self-management at an architectural level. In our approach, semantic web technologies are used to achieve comprehensive context-awareness and extensibility of self-management capabilities, genetic algorithms are used to achieve configuration optimizations, and a planner is used to compute planning procedures on how to arrive at an optimum system configuration based on current architectural structure of the underlying system using an architectural query language. These technologies are integrated seamlessly based on the service oriented computing (SoC) paradigm. We have extensively evaluated both runtime and development time qualities of our implementation of the style. These evaluations can serve as guidelines for evaluating other middleware systems. We conclude that our approach is usable and effective in achieving these quality attributes. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A hybrid approach to self-management in a pervasive service middleware", "paper_id": "WOS:000340221600012"}