{"auto_keywords": [{"score": 0.033961708538626435, "phrase": "usability_features"}, {"score": 0.00481495049065317, "phrase": "functional_usability_features"}, {"score": 0.004744437370338926, "phrase": "model-driven_development_method"}, {"score": 0.0038397509389856625, "phrase": "key_factor"}, {"score": 0.00376488621224566, "phrase": "user_acceptance"}, {"score": 0.003601715012418258, "phrase": "hci_communities"}, {"score": 0.0031377955308198634, "phrase": "software_development_process"}, {"score": 0.0028293966058473476, "phrase": "mdd_paradigm"}, {"score": 0.0026933542552712033, "phrase": "building_models"}, {"score": 0.002640781900605126, "phrase": "code_generation"}, {"score": 0.0025638362414466278, "phrase": "code_transformations"}, {"score": 0.0024405312482831646, "phrase": "important_changes"}, {"score": 0.002404706573379854, "phrase": "system_architecture"}, {"score": 0.0023117182131967523, "phrase": "early_steps"}, {"score": 0.0021363670305843403, "phrase": "conceptual_model"}], "paper_keywords": ["model-driven development", " usability", " conceptual model"], "paper_abstract": "The Software Engineering (SE) community has historically focused on working with models to represent functionality and persistence, pushing interaction modelling into the background, which has been covered by the Human Computer Interaction (HCI) community. Recently, adequately modelling interaction, and specifically usability, is being considered as a key factor for success in user acceptance, making the integration of the SE and HCI communities more necessary. If we focus on the Model-Driven Development (MDD) paradigm, we notice that there is a lack of proposals to deal with usability features from the very first steps of software development process. In general, usability features are manually implemented once the code has been generated from models. This contradicts the MDD paradigm, which claims that all the analysts' effort must be focused on building models, and the code generation is relegated to model to code transformations. Moreover, usability features related to functionality may involve important changes in the system architecture if they are not considered from the early steps. We state that these usability features related to functionality can be represented abstractly in a conceptual model, and their implementation can be carried out automatically.", "paper_title": "Including Functional Usability Features in a Model-Driven Development Method", "paper_id": "WOS:000323238700006"}