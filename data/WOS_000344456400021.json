{"auto_keywords": [{"score": 0.03771465750530587, "phrase": "stackdb"}, {"score": 0.006284697760436883, "phrase": "whole_system"}, {"score": 0.00481495049065317, "phrase": "virtual_machine_introspection"}, {"score": 0.004771435919145031, "phrase": "vmi"}, {"score": 0.004539005582217309, "phrase": "virtual_machine"}, {"score": 0.004240116703465252, "phrase": "multiple_levels"}, {"score": 0.0041827333568982055, "phrase": "software_stack"}, {"score": 0.004144908086646161, "phrase": "traditional_debuggers"}, {"score": 0.0034876091188625535, "phrase": "vmi_support"}, {"score": 0.0032135959043774085, "phrase": "particular_level"}, {"score": 0.003170060683860338, "phrase": "system's_software_stack"}, {"score": 0.0030291453183733897, "phrase": "vm_guest"}, {"score": 0.0028037753646260937, "phrase": "php_script"}, {"score": 0.002753224894944965, "phrase": "linux_process"}, {"score": 0.0027159094186967247, "phrase": "xen_vm"}, {"score": 0.0025951294037626174, "phrase": "higher-level_targets"}, {"score": 0.002536763634539386, "phrase": "lower-level_targets"}, {"score": 0.002502374576203785, "phrase": "key_contribution"}, {"score": 0.002401972657236926, "phrase": "flexible_\"stacks"}], "paper_keywords": ["virtualization", " virtual machine introspection"], "paper_abstract": "Virtual machine introspection (VMI) allows users to debug software that executes within a virtual machine. To support rich, whole-system analyses, a VMI tool must inspect and control systems at multiple levels of the software stack. Traditional debuggers enable inspection and control, but they limit users to treating a whole system as just one kind of target: e.g., just a kernel, or just a process, but not both. We created Stackdb, a debugging library with VMI support that allows one to monitor and control a whole system through multiple, coordinated targets. A target corresponds to a particular level of the system's software stack; multiple targets allow a user to observe a VM guest at several levels of abstraction simultaneously. For example, with Stackdb, one can observe a PHP script running in a Linux process in a Xen VM via three coordinated targets at the language, process, and kernel levels. Within Stackdb, higher-level targets are components that utilize lower-level targets; a key contribution of Stackdb is its API that supports multi-level and flexible \"stacks\" of targets. This paper describes the challenges we faced in creating Stackdb, presents the solutions we devised, and evaluates Stackdb through its application to a security-focused, whole-system case study.", "paper_title": "Composable Multi-Level Debugging with Stackdb", "paper_id": "WOS:000344456400021"}