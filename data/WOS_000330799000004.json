{"auto_keywords": [{"score": 0.04548812433856781, "phrase": "source_code"}, {"score": 0.009219623208507543, "phrase": "hybrid_systems"}, {"score": 0.00481495049065317, "phrase": "domain-based_coupling"}, {"score": 0.00470862827326028, "phrase": "vital_role"}, {"score": 0.004673709383305897, "phrase": "programme_comprehension"}, {"score": 0.004621813738791474, "phrase": "impact_analysis"}, {"score": 0.00443638953122199, "phrase": "source_code_analysis"}, {"score": 0.004102719715406821, "phrase": "multiple_languages"}, {"score": 0.00383668723824441, "phrase": "adequate_knowledge"}, {"score": 0.003724034990158436, "phrase": "non-technical_domain_experts"}, {"score": 0.0034824716857663114, "phrase": "requested_changes"}, {"score": 0.0033426036530090205, "phrase": "novel_approach"}, {"score": 0.0033054391731615618, "phrase": "software_dependences"}, {"score": 0.003220315882881027, "phrase": "domain-level_information"}, {"score": 0.0031257046538823354, "phrase": "software_implementation"}, {"score": 0.0030113280682863234, "phrase": "architectural_dependences"}, {"score": 0.0027949428646076627, "phrase": "heterogeneous_source_code"}, {"score": 0.0027433143290371293, "phrase": "missing_source_code"}, {"score": 0.002480520548392772, "phrase": "domain_experts"}, {"score": 0.0024346858809238766, "phrase": "software_developers"}, {"score": 0.0023719332915829268, "phrase": "case_study"}, {"score": 0.002345535736297701, "phrase": "large-scale_enterprise_system"}, {"score": 0.0022096205841489786, "phrase": "database_dependences"}, {"score": 0.0021607035327962246, "phrase": "domain_information"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["domain-based coupling", " architectural dependences", " database dependences", " source code analysis", " programme comprehension"], "paper_abstract": "Software dependences play a vital role in programme comprehension, change impact analysis and other software maintenance activities. Traditionally, these activities are supported by source code analysis; however, the source code is sometimes inaccessible or difficult to analyse, as in hybrid systems composed of source code in multiple languages using various paradigms (e.g. object-oriented programming and relational databases). Moreover, not all stakeholders have adequate knowledge to perform such analyses. For example, non-technical domain experts and consultants raise most maintenance requests; however, they cannot predict the cost and impact of the requested changes without the support of the developers. We propose a novel approach to predicting software dependences by exploiting the coupling present in domain-level information. Our approach is independent of the software implementation; hence, it can be used to approximate architectural dependences without access to the source code or the database. As such, it can be applied to hybrid systems with heterogeneous source code or legacy systems with missing source code. In addition, this approach is based solely on information visible and understandable to domain users; therefore, it can be efficiently used by domain experts without the support of software developers. We evaluate our approach with a case study on a large-scale enterprise system, in which we demonstrate how up to 65% of the source code dependences and 77% of the database dependences are predicted solely based on domain information. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Predicting dependences using domain-based coupling", "paper_id": "WOS:000330799000004"}