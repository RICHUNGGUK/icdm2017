{"auto_keywords": [{"score": 0.0500785012217586, "phrase": "monadic_second-order_logic"}, {"score": 0.00470862827326028, "phrase": "novel_technique"}, {"score": 0.004081385289516914, "phrase": "program_variables"}, {"score": 0.004027031316965272, "phrase": "abstract_built-in_string_operations"}, {"score": 0.003715726212272217, "phrase": "mona"}, {"score": 0.0027660991130161777, "phrase": "boolean"}, {"score": 0.00269263690712392, "phrase": "regular-expression_matches"}, {"score": 0.0025404470150468387, "phrase": "industrial_security_analysis"}, {"score": 0.0025178072071268534, "phrase": "web_applications"}, {"score": 0.0023968383387667404, "phrase": "malicious_patterns"}, {"score": 0.0023754752864092437, "phrase": "untrusted_strings"}, {"score": 0.0022816681646340518, "phrase": "security-sensitive_operations"}, {"score": 0.0021049977753042253, "phrase": "previously_presented_string_analysis"}], "paper_keywords": ["Languages", " Security", " Verification", " String analysis", " static program analysis", " Web security"], "paper_abstract": "We propose a novel technique for statically verifying the strings generated by a program. The verification is conducted by encoding the program in Monadic Second-order Logic (M2L). We use M2L to describe constraints among program variables and to abstract built-in string operations. Once we encode a program in M2L, a theorem prover for M2L, such as MONA, can automatically check if a string generated by the program satisfies a given specification, and if not, exhibit a counterexample. With this approach, we can naturally encode relationships among strings, accounting also for cases in which a program manipulates strings using indices. In addition, our string analysis is path sensitive in that it accounts for the effects of string and Boolean comparisons, as well as regular-expression matches. We have implemented our string analysis algorithm, and used it to augment an industrial security analysis for Web applications by automatically detecting and verifying sanitizers-methods that eliminate malicious patterns from untrusted strings, making these strings safe to use in security-sensitive operations. On the 8 benchmarks we analyzed, our string analyzer discovered 128 previously unknown sanitizers, compared to 71 sanitizers detected by a previously presented string analysis.", "paper_title": "Path- and Index-Sensitive String Analysis Based on Monadic Second-Order Logic", "paper_id": "WOS:000326024500006"}