{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed_systems"}, {"score": 0.048675858514910963, "phrase": "fault_tolerance"}, {"score": 0.0455466088830923, "phrase": "backup_machines"}, {"score": 0.03909850252418532, "phrase": "byzantine_faults"}, {"score": 0.03195404830933309, "phrase": "time_complexity"}, {"score": 0.004783232571029632, "phrase": "fused_state_machines"}, {"score": 0.004704844560325455, "phrase": "standard_technique"}, {"score": 0.004597244847332915, "phrase": "deterministic_finite_state_machines"}, {"score": 0.004462494148878735, "phrase": "crash_or_byzantine_faults"}, {"score": 0.004067911074767302, "phrase": "dfsms"}, {"score": 0.003987986947650714, "phrase": "hamming_distances"}, {"score": 0.0037450707321601963, "phrase": "crash_faults"}, {"score": 0.0032483801419536675, "phrase": "locality_sensitive_hashing"}, {"score": 0.0028930017387859804, "phrase": "high_probability"}, {"score": 0.002845502417672334, "phrase": "average_state_reduction"}, {"score": 0.002680853843094522, "phrase": "average_state_space_savings"}, {"score": 0.0025340874787959195, "phrase": "practical_use"}, {"score": 0.002363806685815014, "phrase": "sensor_networks"}, {"score": 0.0023481972886024347, "phrase": "fusion-based_solution"}, {"score": 0.0023172863267744703, "phrase": "significantly_fewer_sensor-nodes"}, {"score": 0.002294369814584028, "phrase": "replication-based_solution"}, {"score": 0.0022641658133181115, "phrase": "mapreduce_framework"}, {"score": 0.0021330830123432614, "phrase": "considerable_savings"}, {"score": 0.002118993962770973, "phrase": "state_space"}], "paper_keywords": ["Distributed systems", " Fault tolerance", " Finite state machines", " Coding theory", " Hamming distances"], "paper_abstract": "Replication is a standard technique for fault tolerance in distributed systems modeled as deterministic finite state machines (DFSMs or machines). To correct crash or Byzantine faults among different machines, replication requires backup machines. We present a solution called fusion that requires just backup machines. First, we build a framework for fault tolerance in DFSMs based on the notion of Hamming distances. We introduce the concept of an (, )-fusion, which is a set of backup machines that can correct crash faults or Byzantine faults among a given set of machines. Second, we present an algorithm to generate an (, )-fusion for a given set of machines. We ensure that our backups are efficient in terms of the size of their state and event sets. Third, we use locality sensitive hashing for the detection and correction of faults that incurs almost the same overhead as that for replication. We detect Byzantine faults with time complexity on average while we correct crash and Byzantine faults with time complexity with high probability, where is the average state reduction achieved by fusion. Finally, our evaluation of fusion on the widely used MCNC'91 benchmarks for DFSMs shows that the average state space savings in fusion (over replication) is 38 % (range 0-99 %). To demonstrate the practical use of fusion, we describe its potential application to two areas: sensor networks and the MapReduce framework. In the case of sensor networks a fusion-based solution can lead to significantly fewer sensor-nodes than a replication-based solution. For the MapReduce framework, fusion can reduce the number of map-tasks compared to replication. Hence, fusion results in considerable savings in state space and other resources such as the power needed to run the backups.", "paper_title": "Fault tolerance in distributed systems using fused state machines", "paper_id": "WOS:000339719700003"}