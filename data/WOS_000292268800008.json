{"auto_keywords": [{"score": 0.049509300669177574, "phrase": "annotation_languages"}, {"score": 0.00481495049065317, "phrase": "loop_bounds"}, {"score": 0.004719816332271661, "phrase": "worst-case_execution_time_analysis"}, {"score": 0.004340263267055143, "phrase": "maximum_time"}, {"score": 0.004087910779160781, "phrase": "safety-critical_real-time_systems"}, {"score": 0.003943569631183138, "phrase": "automotive_fields"}, {"score": 0.0038655854071187115, "phrase": "initial_works"}, {"score": 0.0038349777551897903, "phrase": "chen"}, {"score": 0.0038043104029486315, "phrase": "mok"}, {"score": 0.0037740295668681014, "phrase": "puschner"}, {"score": 0.0037440044353157223, "phrase": "shaw"}, {"score": 0.0036262149230298487, "phrase": "wcet"}, {"score": 0.0035544816252832375, "phrase": "well-established_and_vibrant_field"}, {"score": 0.0034016119212097826, "phrase": "increasing_number"}, {"score": 0.00334766260508788, "phrase": "hardware_and_software_platforms"}, {"score": 0.0033077610063168093, "phrase": "ongoing_rapid_technological_advancement"}, {"score": 0.0032036590920314725, "phrase": "wide_array"}, {"score": 0.003178147973814818, "phrase": "distinct_methods"}, {"score": 0.0031277316566463978, "phrase": "wcet_analysis"}, {"score": 0.0027852927366010406, "phrase": "feasible_and_infeasible_program_paths"}, {"score": 0.0024703502756471514, "phrase": "pivotal_criteria"}, {"score": 0.0024214281919523973, "phrase": "coherent_overview"}, {"score": 0.0021821915946356168, "phrase": "recent_approach"}, {"score": 0.0021647968783414504, "phrase": "wilhelm_et_al"}, {"score": 0.002121913011761504, "phrase": "thorough_survey"}, {"score": 0.0021049977753042253, "phrase": "wcet_analysis_methods"}], "paper_keywords": ["Worst-case execution time (WCET) analysis", " Annotation languages", " Path-oriented , constraint-oriented, and hierarchy-oriented WCET annotation languages", " WCET annotation language challenge"], "paper_abstract": "Worst-case execution time (WCET) analysis is concerned with computing a precise-as-possible bound for the maximum time the execution of a program can take. This information is indispensable for developing safety-critical real-time systems, e. g., in the avionics and automotive fields. Starting with the initial works of Chen, Mok, Puschner, Shaw, and others in the mid and late 1980s, WCET analysis turned into a well-established and vibrant field of research and development in academia and industry. The increasing number and diversity of hardware and software platforms and the ongoing rapid technological advancement became drivers for the development of a wide array of distinct methods and tools for WCET analysis. The precision, generality, and efficiency of these methods and tools depend much on the expressiveness and usability of the annotation languages that are used to describe feasible and infeasible program paths. In this article we survey the annotation languages which we consider formative for the field. By investigating and comparing their individual strengths and limitations with respect to a set of pivotal criteria, we provide a coherent overview of the state of the art. Identifying open issues, we encourage further research. This way, our approach is orthogonal and complementary to a recent approach of Wilhelm et al. who provide a thorough survey of WCET analysis methods and tools that have been developed and used in academia and industry.", "paper_title": "Beyond loop bounds: comparing annotation languages for worst-case execution time analysis", "paper_id": "WOS:000292268800008"}