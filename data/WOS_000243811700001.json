{"auto_keywords": [{"score": 0.04222565054522196, "phrase": "high-level_languages"}, {"score": 0.04070303364753307, "phrase": "low-level_languages"}, {"score": 0.00481495049065317, "phrase": "seminal_work"}, {"score": 0.00475413908468027, "phrase": "volpano"}, {"score": 0.0046942845142050734, "phrase": "smith"}, {"score": 0.00454725669814484, "phrase": "growing_evidence"}, {"score": 0.004489810932879285, "phrase": "type_systems"}, {"score": 0.0036864465771943933, "phrase": "secure_information_flow"}, {"score": 0.0036167509502276294, "phrase": "sabelfeld"}, {"score": 0.0035710664737253536, "phrase": "myers"}, {"score": 0.0032666255024083983, "phrase": "selected_areas"}, {"score": 0.0030071857666598193, "phrase": "information_flow_type_system"}, {"score": 0.0029502941554043964, "phrase": "low-level_language"}, {"score": 0.002768293851511292, "phrase": "type_system"}, {"score": 0.002733260122876447, "phrase": "termination-insensitive_non-interference"}, {"score": 0.002664513608074113, "phrase": "information_flow_type"}, {"score": 0.0023309080951251335, "phrase": "high-level_imperative_programming_language"}, {"score": 0.0021870332034407817, "phrase": "information_flow_types"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["security", " non-interference", " program analysis", " low-level languages"], "paper_abstract": "Starting from the seminal work of Volpano and Smith, there has been growing evidence that type systems may be used to enforce confidentiality of programs through non-interference. However, most type systems operate on high-level languages and calculi, and \"low-level languages have not received much attention in studies of secure information flow\" (Sabelfeld and Myers, [Language-based information-flow security. IEEE Journal on Selected Areas in Communications 2003; 21:5-19]). Therefore, we introduce an information flow type system for a low-level language featuring jumps and calls, and show that the type system enforces termination-insensitive non-interference. Furthermore, information flow type, systems for low-level languages should appropriately relate to their counterparts for high-level languages. Therefore, we introduce a compiler from a high-level imperative programming language to our low-level language, and show that the compiler preserves information flow types. (c) 2005 Elsevier Ltd. All rights reserved.", "paper_title": "Security types preserving compilation", "paper_id": "WOS:000243811700001"}