{"auto_keywords": [{"score": 0.03824046507309785, "phrase": "graph_patterns"}, {"score": 0.03607836515970264, "phrase": "regular_expressions"}, {"score": 0.00481495049065317, "phrase": "regular_graph_patterns"}, {"score": 0.004776484866276242, "phrase": "graph_data"}, {"score": 0.004662913362513954, "phrase": "application_domains"}, {"score": 0.004303404058571052, "phrase": "incompletely_specified_graph_data"}, {"score": 0.003592258384936271, "phrase": "key_features"}, {"score": 0.0034926916198124484, "phrase": "node_and_label_variables"}, {"score": 0.0032753168662834516, "phrase": "standard_graph_queries"}, {"score": 0.00319732428387928, "phrase": "precise_characterizations"}, {"score": 0.0031337465656628132, "phrase": "combined_complexity"}, {"score": 0.0028342734482926677, "phrase": "lower-complexity_restrictions"}, {"score": 0.002636489396049042, "phrase": "new_automata_model"}, {"score": 0.002244876254113051, "phrase": "additional_restrictions"}, {"score": 0.0021738146596180404, "phrase": "intractable_cases"}, {"score": 0.0021049977753042253, "phrase": "constraint_satisfaction_problems"}], "paper_keywords": ["Algorithms", " Languages", " Theory", " Graph databases", " graph patterns", " query languages", " complexity", " automata", " constraint satisfaction"], "paper_abstract": "Graph data appears in a variety of application domains, and many uses of it, such as querying, matching, and transforming data, naturally result in incompletely specified graph data, that is, graph patterns. While queries need to be posed against such data, techniques for querying patterns are generally lacking, and properties of such queries are not well understood. Our goal is to study the basics of querying graph patterns. The key features of patterns we consider here are node and label variables and edges specified by regular expressions. We provide a classification of patterns, and study standard graph queries on graph patterns. We give precise characterizations of both data and combined complexity for each class of patterns. If complexity is high, we do further analysis of features that lead to intractability, as well as lower-complexity restrictions. Since our patterns are based on regular expressions, query answering for them can be captured by a new automata model. These automata have two modes of acceptance: one captures queries returning nodes, and the other queries returning paths. We study properties of such automata, and the key computational tasks associated with them. Finally, we provide additional restrictions for tractability, and show that some intractable cases can be naturally cast as instances of constraint satisfaction problems.", "paper_title": "Querying Regular Graph Patterns", "paper_id": "WOS:000331466500008"}