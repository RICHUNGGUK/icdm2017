{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "architectural_primitives"}, {"score": 0.004549242970806199, "phrase": "interactive_approach"}, {"score": 0.004463958296056236, "phrase": "semi-automatic_identification"}, {"score": 0.0043527164193299574, "phrase": "architectural_patterns"}, {"score": 0.004244234872662471, "phrase": "domain-specific_language"}, {"score": 0.004112411350177274, "phrase": "rich_concepts"}, {"score": 0.0038365781437074017, "phrase": "pattern_description"}, {"score": 0.003693973656103879, "phrase": "primitive_abstractions"}, {"score": 0.0036246643358397272, "phrase": "architectural_level"}, {"score": 0.0034461093496505127, "phrase": "multiple_patterns"}, {"score": 0.0032763212574036748, "phrase": "software_architects"}, {"score": 0.003235193484261443, "phrase": "pattern_annotation"}, {"score": 0.003194580334752371, "phrase": "software_architecture_documentation"}, {"score": 0.0029427043216782604, "phrase": "possible_pattern_instances"}, {"score": 0.0028692628457408025, "phrase": "reusable_catalog"}, {"score": 0.0027278178983579085, "phrase": "pattern_instance"}, {"score": 0.0023438664524018634, "phrase": "practical_applicability"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software architecture", " Architectural component views", " Architectural pattern"], "paper_abstract": "In this article, we propose an interactive approach for the semi-automatic identification and documentation of architectural patterns based on a domain-specific language. To address the rich concepts and variations of patterns, we firstly propose to support pattern description through architectural primitives. These are primitive abstractions at the architectural level that can be found in realizations of multiple patterns, and they can be leveraged by software architects for pattern annotation during software architecture documentation or reconstruction. Secondly, using these annotations, our approach automatically suggests possible pattern instances based on a reusable catalog of patterns and their variants. Once a pattern instance has been documented, the annotated component models and the source code get automatically checked for consistency and traceability links are automatically generated. To study the practical applicability and performance of our approach, we have conducted three case studies for existing, non-trivial open source systems. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Semi-automatic architectural pattern identification and documentation using architectural primitives", "paper_id": "WOS:000350927300003"}