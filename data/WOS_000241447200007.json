{"auto_keywords": [{"score": 0.04720712072096041, "phrase": "prototype_implementation"}, {"score": 0.00481495049065317, "phrase": "quantifier_elimination"}, {"score": 0.004388796812234033, "phrase": "input_formulas"}, {"score": 0.00415777266387528, "phrase": "quantifier_elimination_algorithms"}, {"score": 0.00393886140366453, "phrase": "ai_search_paradigm"}, {"score": 0.003427246079774314, "phrase": "problem_formulation"}, {"score": 0.0033228699494959172, "phrase": "good_input"}, {"score": 0.003246672441842787, "phrase": "intended_q.e._program"}, {"score": 0.0026143990748127253, "phrase": "simple_check"}, {"score": 0.002364172626241202, "phrase": "quantified_formulas"}, {"score": 0.002171202123281881, "phrase": "current_quantifier_elimination_packages"}, {"score": 0.0021049977753042253, "phrase": "original_formulas"}], "paper_keywords": [""], "paper_abstract": "This paper presents a framework and prototype implementation for preprocessing quantified input formulas that are intended as input for quantifier elimination algorithms. The framework loosely follows the AI search paradigm - exploring the space of formulas derived from the input by applying various rewriting operators in search of a problem formulation that will be good input for the intended Q.E. program. The only operator provided by the prototype implementation presented here is substitution for variables constrained by equations in which they appear linearly, supported by factorization and a simple check for non-vanishing of denominators in substitutions. Yet we present examples of quantified formulas which can be reduced by our preprocessing method to problems solvable by current quantifier elimination packages, whereas the original formulas had been inaccessible to those.", "paper_title": "Efficient preprocessing methods for quantifier elimination", "paper_id": "WOS:000241447200007"}