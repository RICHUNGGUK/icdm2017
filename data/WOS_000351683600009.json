{"auto_keywords": [{"score": 0.029824082026014345, "phrase": "jigsaw"}, {"score": 0.00481495049065317, "phrase": "qos_strategies"}, {"score": 0.004617187934074393, "phrase": "main_responsibilities"}, {"score": 0.004559451202070545, "phrase": "web_server"}, {"score": 0.00444612502361583, "phrase": "communication_channel"}, {"score": 0.004299374036140852, "phrase": "additional_responsibilities"}, {"score": 0.0042455945330942746, "phrase": "processing_activities"}, {"score": 0.004105435059094976, "phrase": "request_filtering"}, {"score": 0.004003348169928476, "phrase": "quality_of_service"}, {"score": 0.003903789851015775, "phrase": "typical_qos-related_concerns"}, {"score": 0.003559387846675818, "phrase": "optimal_use"}, {"score": 0.0033420978105332686, "phrase": "communication-related_ones"}, {"score": 0.0031248767378106663, "phrase": "aspect-oriented_programming"}, {"score": 0.0030216031606457214, "phrase": "qos-related_layer"}, {"score": 0.002743262400544957, "phrase": "provided_support"}, {"score": 0.002564862727498502, "phrase": "local_resources"}, {"score": 0.0024800509241747013, "phrase": "latter_requests"}, {"score": 0.002459288755782293, "phrase": "cloud-based_resources"}, {"score": 0.0023980368333253147, "phrase": "new_qos-related_code"}, {"score": 0.0023481578019624843, "phrase": "web_server_modules"}, {"score": 0.0022514836269627186, "phrase": "runtime_behaviour"}, {"score": 0.0021678771715091492, "phrase": "qos_concerns"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software architectures", " quality of service", " aspect-oriented programming", " resource management", " performance", " cloud"], "paper_abstract": "The main responsibilities of a web server are to listen from the communication channel and to prepare replies to requests. Additional responsibilities include adapting processing activities, for example, through scheduling or request filtering, so as to satisfy Quality of Service (QoS) requirements. Typical QoS-related concerns address behavioural constraints (e.g. response time bounds, satisfiable by scheduling the most urgent requests first) and resource monitoring, for optimal use. Although such concerns are spread across several web server components, they should be handled separately from communication-related ones, for the sake of modularity.For this purpose, we advocate recourse to aspect-oriented programming and illustrate it by showing how a QoS-related layer can be smoothly superimposed on top of a well-known, unmodified, web server Jigsaw. As part of the provided support, requests are assessed and partitioned into those that can be appropriately handled by using local resources and those needing further resources. For the latter requests, cloud-based resources are gathered. Aspect-orientation enables new QoS-related code to be separated from web server modules so as to keep existing code unaltered, while runtime behaviour is modified with the measures needed to handle QoS concerns. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Providing QoS strategies and cloud-integration to web servers by means of aspects", "paper_id": "WOS:000351683600009"}