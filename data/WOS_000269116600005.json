{"auto_keywords": [{"score": 0.04717317999994781, "phrase": "concurrent_programs"}, {"score": 0.015308531076387888, "phrase": "sequential_analysis"}, {"score": 0.00481495049065317, "phrase": "concurrent_analysis"}, {"score": 0.004482873744893272, "phrase": "shared_memory"}, {"score": 0.004306205029641728, "phrase": "multiple_procedures"}, {"score": 0.004211069233133584, "phrase": "recent_work"}, {"score": 0.0039380388343479384, "phrase": "context_switches"}, {"score": 0.003868257410961701, "phrase": "concurrent_program"}, {"score": 0.0034437574674180365, "phrase": "simple_and_efficient_algorithms"}, {"score": 0.0032347516831068715, "phrase": "general_reduction"}, {"score": 0.0031916366459252992, "phrase": "concurrent_program_p"}, {"score": 0.0030520148188164084, "phrase": "sequential_program_p"}, {"score": 0.0026686444508167875, "phrase": "symbolic_constants"}, {"score": 0.0021915573326125428, "phrase": "common_program_models"}, {"score": 0.002162316557411786, "phrase": "model_checking"}, {"score": 0.0021239335561699106, "phrase": "boolean_programs"}, {"score": 0.0021049977753042253, "phrase": "pushdown_systems"}], "paper_keywords": ["Verification", " Concurrency", " Context-bounding"], "paper_abstract": "This paper addresses the analysis of concurrent programs with shared memory. Such an analysis is undecidable in the presence of multiple procedures. One approach used in recent work obtains decidability by providing only a partial guarantee of correctness: the approach bounds the number of context switches allowed in the concurrent program, and aims to prove safety, or find bugs, under the given bound. In this paper, we show how to obtain simple and efficient algorithms for the analysis of concurrent programs with a context bound. We give a general reduction from a concurrent program P, and a given context bound K, to a sequential program P (s) (K) such that the analysis of P (s) (K) can be used to prove properties about P. The reduction introduces symbolic constants and assume statements in P (s) (K) . Thus, any sequential analysis that can deal with these two additions can be extended to handle concurrent programs as well, under a context bound. We give instances of the reduction for common program models used in model checking, such as Boolean programs, pushdown systems (PDSs), and symbolic PDSs.", "paper_title": "Reducing concurrent analysis under a context bound to sequential analysis", "paper_id": "WOS:000269116600005"}