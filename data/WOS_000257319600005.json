{"auto_keywords": [{"score": 0.039254191205731113, "phrase": "standard_languages"}, {"score": 0.00481495049065317, "phrase": "context-free_grammar_rules"}, {"score": 0.004445961412092278, "phrase": "programming_language"}, {"score": 0.004165105357908494, "phrase": "program_analysis"}, {"score": 0.0037903327482565097, "phrase": "-_minor_variations"}, {"score": 0.00320770578058916, "phrase": "reverse_engineering_context-free_grammar_rules"}, {"score": 0.002855934865505357, "phrase": "approximate_grammar"}, {"score": 0.002754103864198219, "phrase": "iterative_approach"}, {"score": 0.0021049977753042253, "phrase": "programming_languages"}], "paper_keywords": [""], "paper_abstract": "The grammar of a programming language is important because it is used in developing program analysis and modi. cation tools. Sometimes programs are written in dialects - minor variations of standard languages. Normally, grammars of standard languages are available but grammars of dialects may not be available. A technique for reverse engineering context-free grammar rules is presented. The proposed technique infers rules from a given set of programs and an approximate grammar is generated using an iterative approach with backtracking. The correctness of the approach, is explained and a set of optimisations proposed to make the approach more efficient. The approach and the optimisations are experimentally verified on a set of programming languages.", "paper_title": "Learning context-free grammar rules from a set of program", "paper_id": "WOS:000257319600005"}