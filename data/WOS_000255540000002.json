{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "tree-processing_programs"}, {"score": 0.015545916774765613, "phrase": "stream-processing_programs"}, {"score": 0.01528875758766855, "phrase": "ordered_linear_type"}, {"score": 0.01414301060036108, "phrase": "xml_documents"}, {"score": 0.01360229917616525, "phrase": "tree-processing_program"}, {"score": 0.008700876133407268, "phrase": "type_system"}, {"score": 0.004400804926266097, "phrase": "tree-structured_data"}, {"score": 0.004067635935640407, "phrase": "logical_structure"}, {"score": 0.003823584649521733, "phrase": "stream-processing_program"}, {"score": 0.003738502710504415, "phrase": "physical_structure"}, {"score": 0.0034166271604770576, "phrase": "memory_usage"}, {"score": 0.003303177222901723, "phrase": "intermediate_data"}, {"score": 0.002743105561254975, "phrase": "programming_language"}, {"score": 0.0026971491199975083, "phrase": "binary_trees"}, {"score": 0.0025208755851561368, "phrase": "well-typed_program"}, {"score": 0.0024370965602952496, "phrase": "equivalent_stream-processing_program"}, {"score": 0.0021896891011033105, "phrase": "xml_stream_processor_generator"}, {"score": 0.0021049977753042253, "phrase": "promising_experimental_results"}], "paper_keywords": [""], "paper_abstract": "There are two ways to write a program for manipulating tree-structured data such as XML documents: One is to write a tree-processing program focusing on the logical structure of the data and the other is to write a stream-processing program focusing out the physical structure. While tree-processing programs are easier to write than stream-processing programs, tree-processing programs are less efficient in memory usage since they use trees as intermediate data. Our aim is to establish a method for automatically translating a tree-processing program to a stream-processing one in order to take the best of both worlds. We first define a programming language for processing binary trees and a type system based on ordered linear type, and show that every well-typed program can be translated to an equivalent stream-processing program. We then extend the language and the type system to deal with XML documents. We have implemented an XML stream processor generator based on our algorithm, and obtained promising experimental results.", "paper_title": "Translation of tree-processing programs into stream-processing programs based on ordered linear type", "paper_id": "WOS:000255540000002"}