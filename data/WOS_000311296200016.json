{"auto_keywords": [{"score": 0.034373754779657546, "phrase": "tos"}, {"score": 0.00481495049065317, "phrase": "object_transformations"}, {"score": 0.004767546015485477, "phrase": "dynamic_software_updating"}, {"score": 0.004339744430169516, "phrase": "static_code_patch"}, {"score": 0.004089475312474684, "phrase": "dynamic_update"}, {"score": 0.00393066798511457, "phrase": "running_program's_execution_state"}, {"score": 0.0036312482387007815, "phrase": "new_code"}, {"score": 0.003472927015404464, "phrase": "open_problem"}, {"score": 0.0033379819706003885, "phrase": "targeted_object_synthesis"}, {"score": 0.0031453010852936334, "phrase": "old_and_new_program_versions"}, {"score": 0.003068327486877065, "phrase": "program_heap_state"}, {"score": 0.0028484940955893134, "phrase": "key_fields"}, {"score": 0.0027513507830537165, "phrase": "old_and_new-version_objects"}, {"score": 0.002605329434787829, "phrase": "simplest-possible_function"}, {"score": 0.0025541693207036167, "phrase": "old-version_object"}, {"score": 0.002336071138145897, "phrase": "non-trivial_transformation_functions"}, {"score": 0.002212040873849046, "phrase": "memory_leaks"}, {"score": 0.0021049977753042253, "phrase": "dynamic_software_updates"}], "paper_keywords": ["Algorithms", " Languages", " Theory", " Dynamic Software Update", " DSU", " Hot-Swapping", " Program Synthesis", " State Transformation", " Object Correlation", " Object Matching"], "paper_abstract": "Dynamic software updating (DSU) systems eliminate costly downtime by dynamically fixing bugs and adding features to executing programs. Given a static code patch, most DSU systems construct runtime code changes automatically. However, a dynamic update must also specify how to change the running program's execution state, e. g., the stack and heap, to make it compatible with the new code. Constructing such state transformations correctly and automatically remains an open problem. This paper presents a solution called Targeted Object Synthesis (TOS). TOS first executes the same tests on the old and new program versions separately, observing the program heap state at a few corresponding points. Given two corresponding heap states, TOS matches objects in the two versions using key fields that uniquely identify objects and correlate old and new-version objects. Given example object pairs, TOS then synthesizes the simplest-possible function that transforms an old-version object to its new-version counterpart. We show that TOS is effective on updates to four open-source server programs for which it generates non-trivial transformation functions that use conditionals, operate on collections, and fix memory leaks. These transformations help programmers understand their changes and apply dynamic software updates.", "paper_title": "Automating Object Transformations for Dynamic Software Updating", "paper_id": "WOS:000311296200016"}