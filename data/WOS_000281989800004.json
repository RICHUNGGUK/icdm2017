{"auto_keywords": [{"score": 0.04448980345092076, "phrase": "leaps"}, {"score": 0.03851917804553377, "phrase": "chr"}, {"score": 0.00481495049065317, "phrase": "efficient_lazy_evaluation_of_rule-based_programs"}, {"score": 0.004691273968935458, "phrase": "forgy's_seminal_dissertation"}, {"score": 0.004630627258995427, "phrase": "rete"}, {"score": 0.0045411156682300695, "phrase": "de_facto_standard_matching_algorithm"}, {"score": 0.00445332728705756, "phrase": "promising_research_results"}, {"score": 0.004395742407834023, "phrase": "alternative_algorithms"}, {"score": 0.004310756041074131, "phrase": "treat"}, {"score": 0.004118751115632515, "phrase": "modern_production_rule_engines"}, {"score": 0.004065474891313382, "phrase": "constraint_handling_rules"}, {"score": 0.0034999880739789257, "phrase": "wide_range"}, {"score": 0.003454687811707182, "phrase": "general_purpose_applications"}, {"score": 0.0034099718632933027, "phrase": "state-of-the-art_chr_systems"}, {"score": 0.0031741489723036255, "phrase": "large_body"}, {"score": 0.003133052778244851, "phrase": "novel_program_analyses"}, {"score": 0.0030924870122337905, "phrase": "optimization_techniques"}, {"score": 0.002859856368059419, "phrase": "production_rules"}, {"score": 0.002543224008253855, "phrase": "cross_fertilization"}, {"score": 0.0025102759256260703, "phrase": "implementation_techniques"}, {"score": 0.0023982749733789882, "phrase": "chr's_rule_evaluation_methodology"}, {"score": 0.002336527289457915, "phrase": "recent_contributions"}, {"score": 0.0022615684627308283, "phrase": "lazy_matching"}, {"score": 0.002189009136006588, "phrase": "rete-based_engines"}, {"score": 0.0021049977753042253, "phrase": "similar_techniques"}], "paper_keywords": ["Optimizing compilation", " lazy evaluation", " matching algorithms", " production rules", " constraint handling rules"], "paper_abstract": "Thirty years after Forgy's seminal dissertation, Rete remains the de facto standard matching algorithm. Despite promising research results, alternative algorithms such as TREAT and LEAPS have had little impact on modern production rule engines. Constraint Handling Rules (CHR) is a high-level, declarative programming language, similar to production rules. In recent years, CHR has increasingly been used in a wide range of general purpose applications. State-of-the-art CHR systems use LEAPS-like lazy matching, and implement a large body of novel program analyses and optimization techniques to further improve performance. While obviously related, CHR and production rules research have mostly evolved independently from each other. With this paper, we aim to foster cross fertilization of implementation techniques. We provide a lucid, comprehensive overview of CHR's rule evaluation methodology, and survey recent contributions to the field of lazy matching. Our empirical evaluation confirms that Rete-based engines would surely benefit from incorporating similar techniques and optimizations.", "paper_title": "Efficient Lazy Evaluation of Rule-Based Programs", "paper_id": "WOS:000281989800004"}