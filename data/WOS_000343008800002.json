{"auto_keywords": [{"score": 0.0500733056534619, "phrase": "wang_tiles"}, {"score": 0.04944560093497015, "phrase": "combinators"}, {"score": 0.047305569102660615, "phrase": "combinatory_logic"}, {"score": 0.04356786662400934, "phrase": "self-assembly"}, {"score": 0.035069721025596905, "phrase": "tiles"}, {"score": 0.004218602458288531, "phrase": "programming_language"}, {"score": 0.0041084684278314305, "phrase": "dna_computing"}, {"score": 0.0037699306119313154, "phrase": "turing_complete"}, {"score": 0.0036958398682001015, "phrase": "simply_typed_combinatory_logic"}, {"score": 0.0032807941194429235, "phrase": "ski-tile"}, {"score": 0.0028549396580672417, "phrase": "program_development_methodology"}, {"score": 0.0027803070408286158, "phrase": "computable_function"}, {"score": 0.002636828502928141, "phrase": "finite_set"}, {"score": 0.0024192592458651204, "phrase": "function_applications"}, {"score": 0.0022196020509093694, "phrase": "ski-tile_program"}, {"score": 0.0021049977753042253, "phrase": "factorial_function"}], "paper_keywords": [""], "paper_abstract": "We investigate the relation between Combinatory Logic and Wang Tiles with the aim of studying Combinators as a programming language for Self-Assembly and DNA computing. We introduce a subset of Combinatory Logic, SKI#, which is Turing Complete, includes simply Typed Combinatory Logic and contains only combinators whose computations require finitely many different redexes. Then, we define a language of Tiles, SKI-Tile, for the representation and the computation of the terms of SKI# in Self-Assembly. Moreover, we introduce a program development methodology that given any computable function, expressed in SKI#, provides a finite set of Tiles that self-assemble to return the computations of the function applications. Finally, the methodology is applied to the derivation of a SKI-Tile program that self-assemble to compute the factorial function.", "paper_title": "DNA Tiles, Wang Tiles and Combinators", "paper_id": "WOS:000343008800002"}