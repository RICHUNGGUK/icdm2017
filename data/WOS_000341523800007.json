{"auto_keywords": [{"score": 0.025955178569799713, "phrase": "inclusion_property"}, {"score": 0.00481495049065317, "phrase": "interval_algorithms"}, {"score": 0.004398094237005956, "phrase": "scientific_computation"}, {"score": 0.004109212945115815, "phrase": "different_machines"}, {"score": 0.004039995317682942, "phrase": "different_types"}, {"score": 0.003949508242904001, "phrase": "processing_units"}, {"score": 0.0039050245929822354, "phrase": "execution_environments"}, {"score": 0.0038610400240820307, "phrase": "computational_loads"}, {"score": 0.003648411055689428, "phrase": "hpc_numerical_simulations"}, {"score": 0.0033893426032054366, "phrase": "interval_routines"}, {"score": 0.0033511469200347907, "phrase": "floating-point_arithmetic"}, {"score": 0.0031665087019813244, "phrase": "numerical_computations"}, {"score": 0.0030606302942851027, "phrase": "interval_computations"}, {"score": 0.0029249294679606656, "phrase": "floating-point_issues"}, {"score": 0.0027325449069867222, "phrase": "computed_interval_result"}, {"score": 0.002656158309155626, "phrase": "interval_computation"}, {"score": 0.0025673005153462707, "phrase": "numerical_reproducibility"}, {"score": 0.0023713273141757326, "phrase": "main_property"}, {"score": 0.0023445770108033288, "phrase": "interval_arithmetic"}, {"score": 0.0021049977753042253, "phrase": "interval_coefficients"}], "paper_keywords": ["Interval arithmetic", " numerical reproducibility", " parallel implementation", " floating-point arithmetic", " rounding mode"], "paper_abstract": "What is called numerical reproducibility is the problem of getting the same result when the scientific computation is run several times, either on the same machine or on different machines, with different types and numbers of processing units, execution environments, computational loads, etc. This problem is especially stringent for HPC numerical simulations. In what follows, we identify the problems encountered when implementing interval routines in floating-point arithmetic. Some are well-known and common in numerical computations, some are specific to interval computations. We propose here a classification of floating-point issues by distinguishing their severity with respect to correctness and tightness of the computed interval result. In fact, interval computation can accommodate the lack of numerical reproducibility as long as it does not affect the inclusion property, which is the main property of interval arithmetic. Several ways to preserve the inclusion property are presented, on the example of the product of matrices with interval coefficients.", "paper_title": "Numerical Reproducibility and Parallel Computations: Issues for Interval Algorithms", "paper_id": "WOS:000341523800007"}