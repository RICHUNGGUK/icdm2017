{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "g-tries"}, {"score": 0.004356620736507642, "phrase": "important_non_trivial_task"}, {"score": 0.004244375827831527, "phrase": "network_motifs"}, {"score": 0.00420760449108585, "phrase": "computing_graphlet_signatures"}, {"score": 0.003976203286249396, "phrase": "subgraph_counting_problem"}, {"score": 0.0037087324991876727, "phrase": "subgraph_frequencies"}, {"score": 0.0035199624440843892, "phrase": "entire_graph"}, {"score": 0.0034291991359158827, "phrase": "common_topologies"}, {"score": 0.0033553473725594003, "phrase": "prefix_tree"}, {"score": 0.0032974089700312423, "phrase": "common_prefixes"}, {"score": 0.003062091606343783, "phrase": "computation_time_savings"}, {"score": 0.0029961221584602405, "phrase": "specialized_canonical_labeling"}, {"score": 0.0029443683459283955, "phrase": "common_substructures"}, {"score": 0.002831158147480665, "phrase": "conditional_rules"}, {"score": 0.002663620639539737, "phrase": "novel_algorithm"}, {"score": 0.0025723630851105304, "phrase": "small_graphs"}, {"score": 0.0024095777415804346, "phrase": "larger_network"}, {"score": 0.002357632753637638, "phrase": "extensive_empirical_evaluation"}, {"score": 0.0022277448907881306, "phrase": "diversified_complex_networks"}, {"score": 0.00212343307513777, "phrase": "previously_existing_algorithms"}], "paper_keywords": ["Complex networks", " Subgraphs", " Data structures", " Trees", " Network motifs", " Graphlets"], "paper_abstract": "The ability to find and count subgraphs of a given network is an important non trivial task with multidisciplinary applicability. Discovering network motifs or computing graphlet signatures are two examples of methodologies that at their core rely precisely on the subgraph counting problem. Here we present the g-trie, a data-structure specifically designed for discovering subgraph frequencies. We produce a tree that encapsulates the structure of the entire graph set, taking advantage of common topologies in the same way a prefix tree takes advantage of common prefixes. This avoids redundancy in the representation of the graphs, thus allowing for both memory and computation time savings. We introduce a specialized canonical labeling designed to highlight common substructures and annotate the g-trie with a set of conditional rules that break symmetries, avoiding repetitions in the computation. We introduce a novel algorithm that takes as input a set of small graphs and is able to efficiently find and count them as induced subgraphs of a larger network. We perform an extensive empirical evaluation of our algorithms, focusing on efficiency and scalability on a set of diversified complex networks. Results show that g-tries are able to clearly outperform previously existing algorithms by at least one order of magnitude.", "paper_title": "G-Tries: a data structure for storing and finding subgraphs", "paper_id": "WOS:000329366300003"}