{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fault_diagnosis"}, {"score": 0.04978895903400396, "phrase": "failure_prognosis"}, {"score": 0.008608949598995897, "phrase": "complex_engineering_systems"}, {"score": 0.004642604455537883, "phrase": "industrial_processes"}, {"score": 0.0046004861111734185, "phrase": "transportation_systems"}, {"score": 0.00453113241842654, "phrase": "paradigm_shift"}, {"score": 0.00436890075128947, "phrase": "traditional_scheduled_or_breakdown_maintenance_practices"}, {"score": 0.0042252744467257885, "phrase": "condition-based_maintenance"}, {"score": 0.004136333933790974, "phrase": "preferred_practice"}, {"score": 0.003976076057473637, "phrase": "critical_systems"}, {"score": 0.003951976017359017, "phrase": "cbm_enabling_technologies"}, {"score": 0.003685067218455088, "phrase": "timely_manner"}, {"score": 0.003618443379266972, "phrase": "remaining_useful_life"}, {"score": 0.003384262486955773, "phrase": "integrating_system_architecture"}, {"score": 0.003223494720348768, "phrase": "computational_efficiency"}, {"score": 0.00316518932828897, "phrase": "off-line_applications"}, {"score": 0.003107935254560724, "phrase": ".net_framework"}, {"score": 0.0030796965618957494, "phrase": "integrating_software_platform"}, {"score": 0.003051713660488494, "phrase": "constituent_modules"}, {"score": 0.0030056376712621793, "phrase": "failure_prognosis_architecture"}, {"score": 0.0029783256772952073, "phrase": "inherent_characteristics"}, {"score": 0.0029512611306191194, "phrase": "net_framework"}, {"score": 0.0029244418026475832, "phrase": "proposed_system"}, {"score": 0.0028978654846251047, "phrase": "generic_architecture"}, {"score": 0.0027854565462509095, "phrase": "data_processing"}, {"score": 0.0027685531038981847, "phrase": "feature_extraction"}, {"score": 0.0026937446571204653, "phrase": "corresponding_modules"}, {"score": 0.002636956926079255, "phrase": "net_components"}, {"score": 0.0025501219226203515, "phrase": "net_languages"}, {"score": 0.0025039656549083497, "phrase": "bayesian_estimation_theory"}, {"score": 0.002481200970201421, "phrase": "generic_particle-filtering-based_framework"}, {"score": 0.0023063614119692476, "phrase": "dc_motor_turn-to-turn_winding_fault_diagnosis"}, {"score": 0.0022236070278432575, "phrase": "performance_requirements"}, {"score": 0.0021438155673297377, "phrase": "engineering_systems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Fault diagnosis", " Failure prognosis", " .NET framework", " Particle filtering", " Bayesian theory", " Software architecture"], "paper_abstract": "Complex engineering systems, such as aircraft, industrial processes, and transportation systems, are experiencing a paradigm shift in the way they are operated and maintained. Instead of traditional scheduled or breakdown maintenance practices, they are maintained on the basis of their current state/condition. Condition-Based Maintenance (CBM) is becoming the preferred practice since it improves significantly the reliability, safety and availability of these critical systems. CBM enabling technologies include sensing and monitoring, information processing, fault diagnosis and failure prognosis algorithms that are capable of detecting accurately and in a timely manner incipient failures and predicting the remaining useful life of failing components. If such technologies are to be implemented on-line and in real-time, it is essential that an integrating system architecture be developed that possesses features of modularity, flexibility and interoperability while exhibiting attributes of computational efficiency for both on-line and off-line applications. This paper presents a .NET framework as the integrating software platform linking all constituent modules of the fault diagnosis and failure prognosis architecture. The inherent characteristics of the NET framework provide the proposed system with a generic architecture for fault diagnosis and failure prognosis for a variety of applications. Functioning as data processing, feature extraction, fault diagnosis and failure prognosis, the corresponding modules in the system are built as NET components that are developed separately and independently in any of the NET languages. With the use of Bayesian estimation theory, a generic particle-filtering-based framework is integrated in the system for fault diagnosis and failure prognosis. The system is tested in two different applications bearing spalling fault diagnosis and failure prognosis and brushless DC motor turn-to-turn winding fault diagnosis. The results suggest that the system is capable of meeting performance requirements specified by both the developer and the user for a variety of engineering systems. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "An integrated architecture for fault diagnosis and failure prognosis of complex engineering systems", "paper_id": "WOS:000303281800056"}