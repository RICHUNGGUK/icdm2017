{"auto_keywords": [{"score": 0.039027278312474004, "phrase": "compositional_semantics"}, {"score": 0.010612387000973441, "phrase": "procedural_interpretation"}, {"score": 0.01012570904993779, "phrase": "logic_programs"}, {"score": 0.009145747776525635, "phrase": "immediate-consequence_operator"}, {"score": 0.004415675459182871, "phrase": "proof_theory"}, {"score": 0.004346704947011699, "phrase": "model_theory"}, {"score": 0.00404937519538515, "phrase": "clausal_logic"}, {"score": 0.003954837422946628, "phrase": "programming_language"}, {"score": 0.0035981701736904495, "phrase": "programming_languages"}, {"score": 0.0035141291835319682, "phrase": "abstract_syntax"}, {"score": 0.0031970796597571367, "phrase": "mathematical_operation"}, {"score": 0.0028405715222684183, "phrase": "incomplete_abstract_syntax"}, {"score": 0.002407078478216306, "phrase": "tarski's_algebraization"}, {"score": 0.0023694065215394593, "phrase": "first-order_predicate_logic"}], "paper_keywords": [""], "paper_abstract": "Semantics of logic programs has been given by proof theory, model theory and by fixpoint of the immediate-consequence operator. If clausal logic is a programming language, then it should also have a compositional semantics. Compositional semantics for programming languages follows the abstract syntax of programs, composing the meaning of a unit by a mathematical operation on the meanings of its constituent units. The procedural interpretation of logic has only yielded an incomplete abstract syntax for logic programs. We complete it and use the result as basis of a compositional semantics. We present for comparison Tarski's algebraization of first-order predicate logic, which is in substance the compositional semantics for his choice of syntax. We characterize our semantics by equivalence with the immediate-consequence operator.", "paper_title": "Compositional semantics for the procedural interpretation of logic", "paper_id": "WOS:000240061200022"}