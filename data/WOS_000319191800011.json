{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_verification_model"}, {"score": 0.004744437370338926, "phrase": "information_flow_constraint"}, {"score": 0.00462919213721188, "phrase": "common_attacks"}, {"score": 0.004561386908745206, "phrase": "software_systems"}, {"score": 0.004494570360108983, "phrase": "dynamic_software_behavior_verification_model"}, {"score": 0.004406994912939125, "phrase": "unchecked_input_data"}, {"score": 0.004342430078306461, "phrase": "software_analysis"}, {"score": 0.004299910946753963, "phrase": "dynamic_slicing_technology"}, {"score": 0.0041136473765874815, "phrase": "basic_analysis_unit"}, {"score": 0.003954837422946628, "phrase": "main_behavior"}, {"score": 0.0037834649508375544, "phrase": "information_flow"}, {"score": 0.003601715012418258, "phrase": "information_flow_verification_problem"}, {"score": 0.003462599815177726, "phrase": "variable_address's_validation"}, {"score": 0.0032639039638211347, "phrase": "untrusted_variable"}, {"score": 0.002706659627293686, "phrase": "behavior_model"}, {"score": 0.0025892330566358503, "phrase": "behavior_specification"}, {"score": 0.0025014259919355453, "phrase": "dynamic_verification"}, {"score": 0.0023003498123420237, "phrase": "input_data_related_behavior_acquiring_framework"}, {"score": 0.0021682027434117095, "phrase": "preliminary_results"}, {"score": 0.0021049977753042253, "phrase": "software's_behavior_model"}], "paper_keywords": ["program", " dynamic", " verification", " information flow"], "paper_abstract": "After analyzing the common attacks for some software systems, a dynamic software behavior verification model related with the unchecked input data based on software analysis and dynamic slicing technology is proposed. Regarding a statement as a basic analysis unit, and the information flow as the main behavior of the software, the direction of the information flow of each statement is defined as its behavior specification, the information flow verification problem is converted into the verification for assigning variable address's validation. During the execution, behavior of the statements that use untrusted variable is monitored to verify whether the address modified by the statements belongs to the specification or not. If it is consistent with the specification, the execution of the statement is permitted. Based on the behavior model proposed, a method of extracting of the behavior specification was researched and a method of dynamic verification was designed. In order to prove for efficiency and performance of the model, the input data related behavior acquiring framework was implemented, and a set of tests were conducted. Preliminary results show the validity of the software's behavior model.", "paper_title": "A Dynamic Verification Model based on Information Flow Constraint", "paper_id": "WOS:000319191800011"}