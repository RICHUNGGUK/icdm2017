{"auto_keywords": [{"score": 0.04589468431249302, "phrase": "system_evolution"}, {"score": 0.04118498548932337, "phrase": "foss_systems"}, {"score": 0.00481495049065317, "phrase": "software_evolution"}, {"score": 0.004763565662615503, "phrase": "component-based_foss_systems"}, {"score": 0.004712733613411604, "phrase": "foss"}, {"score": 0.004143196873246147, "phrase": "software_deployment_-_called_packages"}, {"score": 0.0038431888954930083, "phrase": "largest_software_systems"}, {"score": 0.0037615180375561805, "phrase": "sophisticated_static_and_dynamic_conditions"}, {"score": 0.003526735797659508, "phrase": "users'_machines"}, {"score": 0.003470358620464986, "phrase": "slightest_error"}, {"score": 0.003306559295382181, "phrase": "routine_upgrade"}, {"score": 0.0032536902910768957, "phrase": "system_administrator's_nightmare"}, {"score": 0.0031167895790050405, "phrase": "model-based_approach"}, {"score": 0.0027841357057119295, "phrase": "real_system"}, {"score": 0.0027395968397212053, "phrase": "fine-grained_static_aspects"}, {"score": 0.0025409639091476363, "phrase": "configuration_scripts"}, {"score": 0.0023440589015485077, "phrase": "upgrade_planners"}, {"score": 0.002174041708084857, "phrase": "widely-used_foss_distributions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["System's upgrade", " FOSS systems", " Open source project", " Model-driven engineering (MDE)", " Configuration management"], "paper_abstract": "FOSS (Free and Open Source Software) systems present interesting challenges in system evolution. On one hand, most FOSS systems are based on very fine-grained units of software deployment - called packages - which promote system evolution; on the other hand, FOSS systems are among the largest software systems known and require sophisticated static and dynamic conditions to be verified, in order to successfully deploy upgrades on users' machines. The slightest error in one of these conditions can turn a routine upgrade into a system administrator's nightmare. In this paper we introduce a model-based approach to support the upgrade of FOSS systems. The approach promotes the simulation of upgrades to predict failures before affecting the real system. Both fine-grained static aspects (e.g. configuration incoherences) and dynamic aspects (e.g. the execution of configuration scripts) are taken into account, improving over the state of the art of upgrade planners. The effectiveness of the approach is validated by instantiating the approach to widely-used FOSS distributions. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Supporting software evolution in component-based FOSS systems", "paper_id": "WOS:000292806900006"}