{"auto_keywords": [{"score": 0.04710443424650761, "phrase": "parallel_tasks"}, {"score": 0.00481495049065317, "phrase": "large-scale_parallel_debugging"}, {"score": 0.004723322467153553, "phrase": "large-scale_parallel_applications"}, {"score": 0.004401955895933783, "phrase": "coordinated_fashion"}, {"score": 0.0038230844545071303, "phrase": "least-progressed_tasks"}, {"score": 0.0034282732966589478, "phrase": "existing_approaches"}, {"score": 0.0033200826267264383, "phrase": "low_accuracy"}, {"score": 0.0032777653153451265, "phrase": "large_overheads"}, {"score": 0.0031743093007496736, "phrase": "imprecise_static_analysis"}, {"score": 0.003054450075234415, "phrase": "progress_dependence"}, {"score": 0.0029203055813347874, "phrase": "loop-aware_progress-dependence_analysis_tool"}, {"score": 0.0028830690329478465, "phrase": "prodometer"}, {"score": 0.0027212777001495176, "phrase": "dynamic_analysis"}, {"score": 0.0022159566043745724, "phrase": "perplexing_error"}, {"score": 0.0021877570149548935, "phrase": "mpi"}, {"score": 0.0021049977753042253, "phrase": "large_scale"}], "paper_keywords": ["Parallel debugging", " high-performance computing", " dynamic analysis", " MPI", " Performance", " Algorithms", " Reliability", " Measurement"], "paper_abstract": "Debugging large-scale parallel applications is challenging. In most HPC applications, parallel tasks progress in a coordinated fashion, and thus a fault in one task can quickly propagate to other tasks, making it difficult to debug. Finding the least-progressed tasks can significantly reduce the effort to identify the task where the fault originated. However, existing approaches for detecting them suffer low accuracy and large overheads; either they use imprecise static analysis or are unable to infer progress dependence inside loops. We present a loop-aware progress-dependence analysis tool, PRODOMETER, which determines relative progress among parallel tasks via dynamic analysis. Our fault-injection experiments suggest that its accuracy and precision are over 90% for most cases and that it scales well up to 16,384 MPI tasks. Further, our case study shows that it significantly helped diagnosing a perplexing error in MPI, which only manifested at large scale.", "paper_title": "Accurate Application Progress Analysis for Large-Scale Parallel Debugging", "paper_id": "WOS:000344455800023"}