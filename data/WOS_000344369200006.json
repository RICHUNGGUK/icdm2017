{"auto_keywords": [{"score": 0.04614766352910894, "phrase": "rendering_systems"}, {"score": 0.02955687098418996, "phrase": "run_time"}, {"score": 0.00481495049065317, "phrase": "adaptive_material_descriptions"}, {"score": 0.0047468516620285525, "phrase": "computer_graphics"}, {"score": 0.004635477242873163, "phrase": "visual_concept"}, {"score": 0.003906804492585634, "phrase": "current_approaches"}, {"score": 0.0038515000499988673, "phrase": "adaptation_logic"}, {"score": 0.0037432199549135826, "phrase": "rendering_application"}, {"score": 0.00369022262431101, "phrase": "string_manipulation"}, {"score": 0.0036553070575015344, "phrase": "compiler_directives"}, {"score": 0.003603549914861701, "phrase": "metaprogramming_facilities"}, {"score": 0.0034690732089830045, "phrase": "application-independent_and_self-contained_material_descriptions"}, {"score": 0.0032922964156452696, "phrase": "material_description"}, {"score": 0.003051073364818384, "phrase": "dynamic_language"}, {"score": 0.0029935730127943496, "phrase": "necessary_adaptivity"}, {"score": 0.0028409576481842457, "phrase": "available_parameters"}, {"score": 0.0028140548269469934, "phrase": "renderer_capabilities"}, {"score": 0.0026452734009203764, "phrase": "non-explicit_declaration"}, {"score": 0.0024051153560799335, "phrase": "concrete_execution_environment"}, {"score": 0.0023485549678832628, "phrase": "accompanied_compiler"}, {"score": 0.002326304140277375, "phrase": "specialized_shader_code"}], "paper_keywords": [""], "paper_abstract": "In computer graphics a material is a visual concept that is parameterizable and should work for arbitrary 3D assets and rendering systems. Since provided parameters and attributes as well as the capabilities of rendering systems vary considerably, a material needs to adapt to its execution environment. In current approaches, the adaptation logic is baked' into the rendering application based on string manipulation, compiler directives, or metaprogramming facilities. However, in order to achieve application-independent and self-contained material descriptions, the adaptation logic needs to be part of the material description itself. In this paper we present shade.js, a novel material description using a dynamic language to achieve the necessary adaptivity. A shader can inspect its execution environment and adapt to the available parameters and renderer capabilities at run time. Additionally, shade.js exploits the polymorphism that comes with non-explicit declaration of types. These two novel features allow for writing adaptable and thus more general material descriptions. Based on the concrete execution environment at run time, the accompanied compiler generates specialized shader code that is specifically typed and optimized for the target rendering system and algorithm. We evaluate shade.js with examples targeting four different rendering approaches (forward and deferred rasterization, ray-tracing, and global illumination). We show that we can improve convenience and flexibility for specifying materials without sacrificing performance.", "paper_title": "shade.js: Adaptive Material Descriptions", "paper_id": "WOS:000344369200006"}