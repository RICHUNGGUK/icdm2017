{"auto_keywords": [{"score": 0.03768919888285064, "phrase": "feature_models"}, {"score": 0.006846513190467273, "phrase": "owl_classes"}, {"score": 0.006747038089414216, "phrase": "owl_individuals"}, {"score": 0.00481495049065317, "phrase": "software_product_line"}, {"score": 0.004791480377720725, "phrase": "spl"}, {"score": 0.004721711709176679, "phrase": "software_systems"}, {"score": 0.004675768396728975, "phrase": "particular_set"}, {"score": 0.004652963867892925, "phrase": "common_features"}, {"score": 0.004562847483469705, "phrase": "particular_market_segment"}, {"score": 0.004518442937844318, "phrase": "feature_modeling"}, {"score": 0.004463541728507683, "phrase": "key_activities"}, {"score": 0.004366387782457736, "phrase": "feature_diagram"}, {"score": 0.004209121247582621, "phrase": "complex_domains"}, {"score": 0.003949772956223261, "phrase": "specific_spl"}, {"score": 0.0038922205435184174, "phrase": "dynamic_software_product_lines"}, {"score": 0.0037611594739947007, "phrase": "user_needs"}, {"score": 0.0035990927554317813, "phrase": "formal_representations"}, {"score": 0.0034863899423238707, "phrase": "system_execution"}, {"score": 0.003319830633865628, "phrase": "reasoning_efficiency"}, {"score": 0.0031845067058084583, "phrase": "dl_reasoners"}, {"score": 0.003168952160907741, "phrase": "previous_works"}, {"score": 0.0028873960943358546, "phrase": "individual-based_feature_modeling_style"}, {"score": 0.0028106505443369545, "phrase": "especially_its_capabilities"}, {"score": 0.0026762874092443197, "phrase": "controlled_experiment"}, {"score": 0.0026051383627560556, "phrase": "modeling_styles"}, {"score": 0.0024503741901918527, "phrase": "structural_impact"}, {"score": 0.0022434880661725493, "phrase": "insightful_assumptions"}, {"score": 0.002194549534888321, "phrase": "reasoning_capabilities"}, {"score": 0.002157223877108711, "phrase": "products_reconfiguration"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Feature modeling", " Ontology", " Software product line", " Empirical software engineering"], "paper_abstract": "A software product line (SPL) is a set of software systems that have a particular set of common features and that satisfy the needs of a particular market segment or mission. Feature modeling is one of the key activities involved in the design of SPLs. The feature diagram produced in this activity captures the commonalities and variabilities of SPLs. In some complex domains (e.g., ubiquitous computing, autonomic systems and context-aware computing), it is difficult to foresee all functionalities and variabilities a specific SPL may require. Thus, Dynamic Software Product Lines (DSPLs) bind variation points at runtime to adapt to fluctuations in user needs as well as to adapt to changes in the environment. In this context, relying on formal representations of feature models is important to allow them to be automatically analyzed during system execution. Among the mechanisms used for representing and analyzing feature models, description logic (DL) based approaches demand to be better investigated in DSPLs since it provides capabilities, such as automated inconsistency detection, reasoning efficiency, scalability and expressivity. Ontology is the most common way to represent feature models knowledge based on DL reasoners. Previous works conceived ontologies for feature modeling either based on OWL classes and properties or based on OWL individuals. However, considering change or evolution scenarios of feature models, we need to compare whether a class-based or an individual-based feature modeling style is recommended to describe feature models to support SPLs, and especially its capabilities to deal with changes in feature models, as required by DSPLs. In this paper, we conduct a controlled experiment to empirically compare two approaches based on each one of these modeling styles in several changing scenarios (e.g., add/remove mandatory feature, add/remove optional feature and so on). We measure time to perform changes, structural impact of changes (flexibility) and correctness for performing changes in our experiment. Our results indicate that using OWL individuals requires less time to change and is more flexible than using OWL classes and properties. These results provide insightful assumptions towards the definition of an approach relying on reasoning capabilities of ontologies that can effectively support products reconfiguration in the context of DSPL. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Ontology-based feature modeling: An empirical study in changing scenarios", "paper_id": "WOS:000352671700008"}