{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "tree_dependence_analysis"}, {"score": 0.0046676969718111765, "phrase": "new_framework"}, {"score": 0.004581505405526037, "phrase": "recursive_methods"}, {"score": 0.004173743791750695, "phrase": "dependence_analysis_techniques"}, {"score": 0.004122179528285764, "phrase": "regular_programs"}, {"score": 0.004046020290832207, "phrase": "irregular_space"}, {"score": 0.003825849505589868, "phrase": "recursive_method"}, {"score": 0.003640183972131238, "phrase": "dependence_test"}, {"score": 0.0035507457285983268, "phrase": "dependence_structure"}, {"score": 0.0028737647829311587, "phrase": "wider_range"}, {"score": 0.002444333100610621, "phrase": "classical_dependence_analysis_techniques"}, {"score": 0.002325554982412043, "phrase": "nested_loops"}, {"score": 0.0022967713922705, "phrase": "array_data_structures"}, {"score": 0.0021049977753042253, "phrase": "pointer-based_data_structures"}], "paper_keywords": ["dependence analysis", " irregular algorithms", " loop transformations"], "paper_abstract": "We develop a new framework for analyzing recursive methods that perform traversals over trees, called tree dependence analysis. This analysis translates dependence analysis techniques for regular programs to the irregular space, identifying the structure of dependences within a recursive method that traverses trees. We develop a dependence test that exploits the dependence structure of such programs, and can prove that several locality- and parallelism-enhancing transformations are legal. In addition, we extend our analysis with a novel path-dependent, conditional analysis to refine the dependence test and prove the legality of transformations for a wider range of algorithms. We then use these analyses to show that several common algorithms that manipulate trees recursively are amenable to several locality- and parallelism-enhancing transformations. This work shows that classical dependence analysis techniques, which have largely been confined to nested loops over array data structures, can be extended and translated to work for complex, recursive programs that operate over pointer-based data structures.", "paper_title": "Tree Dependence Analysis", "paper_id": "WOS:000361284200030"}