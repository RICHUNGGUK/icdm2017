{"auto_keywords": [{"score": 0.041562269310917936, "phrase": "aop"}, {"score": 0.015223854649801026, "phrase": "dynamic_analysis"}, {"score": 0.00481495049065317, "phrase": "aspect_orientation"}, {"score": 0.00476323161560059, "phrase": "legacy_environments"}, {"score": 0.004712065638657606, "phrase": "reverse_engineering"}, {"score": 0.004298666679374568, "phrase": "aspect-oriented_programming"}, {"score": 0.004139128578531134, "phrase": "re-engineering_a_legacy_c_application"}, {"score": 0.003879234831701853, "phrase": "important_reverse_engineering_step"}, {"score": 0.003775803846431323, "phrase": "re-engineering_effort"}, {"score": 0.0035965032173588753, "phrase": "available_aop_tools"}, {"score": 0.00355782527287734, "phrase": "legacy_c_code_bases"}, {"score": 0.003407214479510987, "phrase": "aspicere"}, {"score": 0.0031759067385562553, "phrase": "aspicere's_application"}, {"score": 0.0030911702059432224, "phrase": "legacy_industrial_software_system"}, {"score": 0.0024628046987344846, "phrase": "major_quid_pro_quo"}, {"score": 0.002410058288617039, "phrase": "aop_tools"}, {"score": 0.0023712394008737958, "phrase": "build_system"}, {"score": 0.002333044307949414, "phrase": "important_issue"}, {"score": 0.0021627595586364724, "phrase": "modular_reasoning"}, {"score": 0.0021394674440767124, "phrase": "traditional_build_systems"}, {"score": 0.0021049977753042253, "phrase": "programming_paradigm"}], "paper_keywords": ["Dynamic analysis", " Aspect-oriented programming", " Industrial case study", " Program comprehension C"], "paper_abstract": "This paper reports on the challenges of using aspect-oriented programming (AOP) to aid in re-engineering a legacy C application. More specifically, we describe how AOP helps in the important reverse engineering step which typically precedes a re-engineering effort. We first present a comparison of the available AOP tools for legacy C code bases, and then argue on our choice of Aspicere, our own AOP implementation for C. Then, we report on Aspicere's application in reverse engineering a legacy industrial software system and we show how we apply a dynamic analysis to regain insight into the system. AOP is used for instrumenting the system and for gathering the data. This approach works and is conceptually very clean, but comes with a major quid pro quo: integration of AOP tools with the build system proves an important issue. This leads to the question of how to reconcile the notion of modular reasoning within traditional build systems with a programming paradigm which breaks this notion. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Using aspect orientation in legacy environments for reverse engineering using dynamic analysis-An industrial experience report", "paper_id": "WOS:000265313700014"}