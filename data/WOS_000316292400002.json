{"auto_keywords": [{"score": 0.047948928662235685, "phrase": "lmf"}, {"score": 0.00481495049065317, "phrase": "strict_functional_programs_allowing_partial_functions"}, {"score": 0.004531637625717547, "phrase": "recursive_specification"}, {"score": 0.004232702713825967, "phrase": "strict_functional_programming_language"}, {"score": 0.004168986485488861, "phrase": "polymorphic_and_recursively_defined_partial_functions"}, {"score": 0.0038062581748678245, "phrase": "equality_symbol"}, {"score": 0.003448705829033573, "phrase": "inductive_proofs"}, {"score": 0.002985484575498061, "phrase": "consistent_presentation"}, {"score": 0.002940487679224863, "phrase": "higher-order_functions"}, {"score": 0.0028095140358025, "phrase": "new_light"}, {"score": 0.0027048247303526583, "phrase": "partial_functions"}, {"score": 0.0026640466056415298, "phrase": "loose_specifications"}, {"score": 0.0023235629819760018, "phrase": "main_result"}, {"score": 0.0022711961447468114, "phrase": "universally_quantified_equations"}], "paper_keywords": ["Verification", " Functional programming", " Logics", " Semantics", " Contextual equivalence"], "paper_abstract": "A typed program logic LMF for recursive specification and verification is presented. It comprises a strict functional programming language with polymorphic and recursively defined partial functions and polymorphic data types. The logic is two-valued with the equality symbol as only predicate. Quantifiers range over the values, which permits inductive proofs of properties. The semantics is based on a contextual (observational) semantics, which gives a consistent presentation of higher-order functions. Our analysis also sheds new light on the the role of partial functions and loose specifications. It is also an analysis of influence of extensions of programs on the tautologies. The main result is that universally quantified equations are conservative, which is also the base for several other conservative classes of formulas.", "paper_title": "A Two-Valued Logic for Properties of Strict Functional Programs Allowing Partial Functions", "paper_id": "WOS:000316292400002"}