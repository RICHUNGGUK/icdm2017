{"auto_keywords": [{"score": 0.03692204774997179, "phrase": "cholesky"}, {"score": 0.00481495049065317, "phrase": "symmetric_positive_definite_matrix"}, {"score": 0.004589124394375718, "phrase": "high-performance_implementation"}, {"score": 0.004011366422179016, "phrase": "symmetric_multiprocessors"}, {"score": 0.003934970057482768, "phrase": "distributed_memory_parallel_computers"}, {"score": 0.0033737457695128233, "phrase": "spd_matrix"}, {"score": 0.0031845067058084583, "phrase": "resulting_triangular_matrix"}, {"score": 0.002948547333717581, "phrase": "inverted_triangular_matrix"}, {"score": 0.0027830917623582903, "phrase": "different_algorithms"}, {"score": 0.0023857603808363527, "phrase": "single_sweep"}, {"score": 0.002273605493468005, "phrase": "current_scalapack_implementation"}, {"score": 0.002166711569953301, "phrase": "improved_load-balance"}, {"score": 0.0021049977753042253, "phrase": "distributed_memory_architecture"}], "paper_keywords": ["algorithms", " performance", " linear algebra", " libraries", " symmetric positive definite", " inversion"], "paper_abstract": "We study the high-performance implementation of the inversion of a Symmetric Positive Definite (SPD) matrix on architectures ranging from sequential processors to Symmetric MultiProcessors to distributed memory parallel computers. This inversion is traditionally accomplished in three \"sweeps\": a Cholesky factorization of the SPD matrix, the inversion of the resulting triangular matrix, and finally the multiplication of the inverted triangular matrix by its own transpose. We state different algorithms for each of these sweeps as well as algorithms that compute the result in a single sweep. One algorithm outperforms the current ScaLAPACK implementation by 20-30 percent due to improved load-balance on a distributed memory architecture.", "paper_title": "Families of algorithms related to the inversion of a symmetric positive definite matrix", "paper_id": "WOS:000259432800003"}