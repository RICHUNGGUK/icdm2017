{"auto_keywords": [{"score": 0.029498666301862063, "phrase": "sigma"}, {"score": 0.0050700984714373235, "phrase": "xml"}, {"score": 0.00481495049065317, "phrase": "graph_patterns"}, {"score": 0.0045843245695654875, "phrase": "subgraph_isomorphism"}, {"score": 0.00447316895126645, "phrase": "conventional_keys"}, {"score": 0.0040880724328903, "phrase": "object_identification"}, {"score": 0.004021689117050817, "phrase": "knowledge_fusion"}, {"score": 0.003956379470617348, "phrase": "social_network_reconciliation"}, {"score": 0.0025082540096838246, "phrase": "mapreduce"}, {"score": 0.0024398167078355224, "phrase": "logarithmic_rounds"}, {"score": 0.002157433262687853, "phrase": "vertex-centric_asynchronous_model"}, {"score": 0.0021049977753042253, "phrase": "real-life_and_synthetic_data"}], "paper_keywords": [""], "paper_abstract": "Keys for graphs aim to uniquely identify entities represented by vertices in a graph. We propose a class of keys that are recursively defined in terms of graph patterns, and are interpreted with subgraph isomorphism. Extending conventional keys for relations and XML, these keys find applications in object identification, knowledge fusion and social network reconciliation. As an application, we study the entity matching problem that, given a graph G and a set Sigma of keys, is to find all pairs of entities (vertices) in G that are identified by keys in Sigma. We show that the problem is intractable, and cannot be parallelized in logarithmic rounds. Nonetheless, we provide two parallel scalable algorithms for entity matching, in MapReduce and a vertex-centric asynchronous model. Using real-life and synthetic data, we experimentally verify the effectiveness and scalability of the algorithms.", "paper_title": "Keys for Graphs", "paper_id": "WOS:000386424800023"}