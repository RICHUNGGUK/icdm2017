{"auto_keywords": [{"score": 0.029513985602016755, "phrase": "memory_access_footprint"}, {"score": 0.010770321473622746, "phrase": "energy_consumption"}, {"score": 0.00481495049065317, "phrase": "data_layout_optimization"}, {"score": 0.004721711709176679, "phrase": "embedded_multimedia_applications"}, {"score": 0.004652963867892925, "phrase": "regular_and_irregular_memory_access_patterns"}, {"score": 0.004430920292612374, "phrase": "static_analysis"}, {"score": 0.004345085569121329, "phrase": "access_patterns"}, {"score": 0.004240116703465252, "phrase": "efficient_use"}, {"score": 0.004178351419209898, "phrase": "scratch_pad_memory"}, {"score": 0.004017989546119125, "phrase": "energy_improvements"}, {"score": 0.0038448988429199086, "phrase": "compiler_strategy"}, {"score": 0.0037888687452790953, "phrase": "data_layout"}, {"score": 0.003697287104870263, "phrase": "embedded_multiprocessor_environments"}, {"score": 0.003469398502950151, "phrase": "spm"}, {"score": 0.0034187896011435245, "phrase": "entire_system"}, {"score": 0.003130396338031522, "phrase": "data_placement"}, {"score": 0.003099888654615187, "phrase": "application-wide_reused_data"}, {"score": 0.002966230968271199, "phrase": "processing_elements"}, {"score": 0.0026762874092443197, "phrase": "data_elements"}, {"score": 0.0026501935378083663, "phrase": "fine_granularity"}, {"score": 0.0024866599295898517, "phrase": "energy_gains"}, {"score": 0.0024264776194357993, "phrase": "heuristic_approach"}, {"score": 0.002125735077004312, "phrase": "based_memory_subsystems"}], "paper_keywords": ["algorithms", " design", " experimentation", " compiler", " memory hierarchy", " energy consumption", " data placement"], "paper_abstract": "Embedded multimedia applications consist of regular and irregular memory access patterns. Particularly, irregular pattern are not amenable to static analysis for extraction of access patterns, and thus prevent efficient use of a Scratch Pad Memory (SPM) hierarchy for performance and energy improvements. To resolve this, we present a compiler strategy to optimize data layout in regular/ irregular multimedia applications running on embedded multiprocessor environments. The goal is to maximize the amount of accesses to the SPM over the entire system which leads to a reduction in the energy consumption of the system. This is achieved by optimizing data placement of application-wide reused data so that it resides in the SPMs of processing elements. Specifically, our scheme is based on a profiling that generates a memory access footprint. The memory access footprint is used to identify data elements with fine granularity that can profitably be placed in the SPMs to maximize performance and energy gains. We present a heuristic approach that efficiently exploits the SPMs using memory access footprint. Our experimental results show that our approach is able to reduce energy consumption by 30% and improve performance by 18% over cache based memory subsystems for various multimedia applications.", "paper_title": "Compiler driven data layout optimization for regular/irregular array access patterns", "paper_id": "WOS:000257820500004"}