{"auto_keywords": [{"score": 0.02975135095418626, "phrase": "visual_models"}, {"score": 0.013978825969490828, "phrase": "software_applications"}, {"score": 0.013820796052661266, "phrase": "reliable_yet_flexible_software"}, {"score": 0.010122646740522582, "phrase": "proposed_approach"}, {"score": 0.004814982313179592, "phrase": "reliable"}, {"score": 0.004760017604908536, "phrase": "formal_model_transformation"}, {"score": 0.004179392391349015, "phrase": "hard_problem"}, {"score": 0.0041316803676012155, "phrase": "modeling_methods"}, {"score": 0.003769006950727621, "phrase": "reliable_and_flexible_software"}, {"score": 0.0037402558657576124, "phrase": "formal_modeling_methods"}, {"score": 0.0035997452281985465, "phrase": "high_cost"}, {"score": 0.0035179764329354877, "phrase": "semi-formal_methods"}, {"score": 0.0033599501775954024, "phrase": "practical_large-scale_software_development"}, {"score": 0.0032710562699144814, "phrase": "reliable_software_development"}, {"score": 0.0031967297437935772, "phrase": "new_practical_approach"}, {"score": 0.00290473242917264, "phrase": "formal_modeling"}, {"score": 0.0026698611202305715, "phrase": "complex_mathematical_concepts"}, {"score": 0.0026494723416072316, "phrase": "formal_methods"}, {"score": 0.0025892330566358503, "phrase": "unexpected_behavior"}, {"score": 0.0025206783724309252, "phrase": "design_patterns"}, {"score": 0.0024073421672242486, "phrase": "formal_and_visual_models"}, {"score": 0.0023525950486853937, "phrase": "iterative_and_evolutionary_process"}, {"score": 0.0021049977753042253, "phrase": "multi-lift_case_study"}], "paper_keywords": ["Reliability", " Flexibility", " Model transformation", " Object-Z", " UML", " Design patterns"], "paper_abstract": "The results of literature review show that the need for both reliability and flexibility is increasingly becoming important among the various classes of software applications. Developing reliable yet flexible software is a hard problem. Although modeling methods enjoy a lot of advantages, the use of just one of them, in many cases, may not guarantee the development of reliable and flexible software. Formal modeling methods ensure reliability. However, lack of knowledge and high cost practically force developers to use semi-formal methods instead. Semi-formal (visual) modeling methods, which are widely used in practical large-scale software development, are not good enough for reliable software development. This paper proposes a new practical approach to the development of reliable yet flexible software. In the proposed approach, formal (Object-Z) and semi-formal (UML) models are transformed into each other using a set of bidirectional formal rules. Formal modeling and refinement ensure the reliability of software. Visual models facilitate the interactions among stakeholders who are not familiar enough with the complex mathematical concepts of formal methods. Visual models help detect the unexpected behavior and inconsistencies of software. Applying design patterns to visual models improves the flexibility of software. The transformation of formal and visual models into each other through the iterative and evolutionary process, proposed in this paper, helps develop the software applications that need to be highly reliable yet flexible. The feasibility of the proposed approach is evaluated using the multi-lift case study.", "paper_title": "Reliable yet flexible software through formal model transformation (rule definition)", "paper_id": "WOS:000337033900004"}