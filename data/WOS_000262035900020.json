{"auto_keywords": [{"score": 0.04530554632729569, "phrase": "unsafe_code"}, {"score": 0.007513070538820607, "phrase": "msil"}, {"score": 0.00481495049065317, "phrase": "safer_unsafe_code"}, {"score": 0.004764285994466679, "phrase": "strp"}, {"score": 0.004708152527097594, "phrase": "net_intermediate_language"}, {"score": 0.004586531354697466, "phrase": "statically_verifiable_memory_and_type_safe_code"}, {"score": 0.00436890075128947, "phrase": "direct_pointer_manipulations"}, {"score": 0.003978866233891427, "phrase": "managed_code"}, {"score": 0.003890540531028228, "phrase": "obvious_drawback"}, {"score": 0.0037476503270386903, "phrase": "programming_errors"}, {"score": 0.0036507498735369576, "phrase": "namely_memory_access_errors"}, {"score": 0.003609989117581185, "phrase": "buffer_overruns"}, {"score": 0.003543059748318891, "phrase": "single_piece"}, {"score": 0.00342568771304873, "phrase": "entire_runtime"}, {"score": 0.003238616481108356, "phrase": "new_static_analysis"}, {"score": 0.0032024424195797674, "phrase": "abstract_interpretation"}, {"score": 0.0031666711243198992, "phrase": "memory_safety"}, {"score": 0.002982511360424684, "phrase": "new_numerical_abstract_domain"}, {"score": 0.0028728747019026485, "phrase": "memory_invariants"}, {"score": 0.0028090313440881937, "phrase": "lightweight_abstract_domains"}, {"score": 0.002655544981260646, "phrase": "clousot"}, {"score": 0.002577135713425501, "phrase": "net."}, {"score": 0.0025104241235948143, "phrase": "foxtrot"}, {"score": 0.002391067964886602, "phrase": "static_safety_guarantees"}, {"score": 0.002373214852820709, "phrase": "memory_accesses"}, {"score": 0.002185394402074883, "phrase": "existing_domains"}], "paper_keywords": ["Documentation", " Reliability", " Verification", " Abstract domains", " Abstract interpretation", " Bounds checking", " Pointer indexing", " Design by Contract", " Static analysis", " . NET"], "paper_abstract": "The. NET intermediate language (MSIL) allows expressing both statically verifiable memory and type safe code (typically called managed), as well as unsafe code using direct pointer manipulations. Unsafe code can be expressed in C# by marking regions of code as unsafe. Writing unsafe code can be useful where the rules of managed code are too strict. The obvious drawback of unsafe code is that it opens the door to programming errors typical of C and C++, namely memory access errors such as buffer overruns. Worse, a single piece of unsafe code may corrupt memory and destabilize the entire runtime or allow attackers to compromise the security of the platform. We present a new static analysis based on abstract interpretation to check memory safety for unsafe code in the. NET framework. The core of the analysis is a new numerical abstract domain, Strp, which is used to efficiently compute memory invariants. Strp is combined with lightweight abstract domains to raise the precision, yet achieving scalability. We implemented this analysis in Clousot, a generic static analyzer for. NET. In combination with contracts expressed in FoxTrot, an MSIL based annotation language for. NET, our analysis provides static safety guarantees on memory accesses in unsafe code. We tested it on all the assemblies of the. NET framework. We compare our results with those obtained using existing domains, showing how they are either too imprecise (e. g., Intervals or Octagons) or too expensive (Polyhedra) to be used in practice.", "paper_title": "Safer Unsafe Code for. NET", "paper_id": "WOS:000262035900020"}