{"auto_keywords": [{"score": 0.04180180938967789, "phrase": "project_manager"}, {"score": 0.00481495049065317, "phrase": "verhulst_models"}, {"score": 0.004768649568826951, "phrase": "predict_software_stage_effort"}, {"score": 0.004677372885331908, "phrase": "software_effort_prediction"}, {"score": 0.004587835274176236, "phrase": "crucial_role"}, {"score": 0.004543708337879809, "phrase": "software_project_management"}, {"score": 0.004350308086118336, "phrase": "software_development"}, {"score": 0.0041450181887917135, "phrase": "whole-project_effort"}, {"score": 0.004085333687668526, "phrase": "early_stage"}, {"score": 0.0038364365168131586, "phrase": "different_stages"}, {"score": 0.003744780941673966, "phrase": "software_development_process"}, {"score": 0.003516558537200823, "phrase": "project_plan"}, {"score": 0.0032389001343643064, "phrase": "software_physical_time_stage-effort_prediction"}, {"score": 0.003115917007930759, "phrase": "verhulst"}, {"score": 0.0029830992938695007, "phrase": "particular_types"}, {"score": 0.002954361295811154, "phrase": "stage-effort_sequences"}, {"score": 0.002869793011316547, "phrase": "particular_development_methodologies"}, {"score": 0.002801166393333128, "phrase": "novel_grey_feedback_mechanism"}, {"score": 0.002707829887747594, "phrase": "proposed_method"}, {"score": 0.0026687841359431105, "phrase": "large-scale_real-world_software_engineering_dataset"}, {"score": 0.002579847272930948, "phrase": "linear_regression_method"}, {"score": 0.002542642270762272, "phrase": "kalman_filter_method"}, {"score": 0.0022202042044679984, "phrase": "considerable_potential"}, {"score": 0.0021670777282518424, "phrase": "stage_predictions"}, {"score": 0.0021254913611527455, "phrase": "useful_complement"}, {"score": 0.0021049977753042253, "phrase": "whole-project_effort_prediction_methods"}], "paper_keywords": ["Grey prediction", " software project management", " software project stage-effort prediction"], "paper_abstract": "Background: Software effort prediction clearly plays a crucial role in software project management. Problem: In keeping with more dynamic approaches to software development, it is not sufficient to only predict the whole-project effort at an early stage. Rather, the project manager must also dynamically predict the effort of different stages or activities during the software development process. This can assist the project manager to reestimate effort and adjust the project plan, thus avoiding effort or schedule overruns. Method: This paper presents a method for software physical time stage-effort prediction based on grey models GM(1,1) and Verhulst. This method establishes models dynamically according to particular types of stage-effort sequences, and can adapt to particular development methodologies automatically by using a novel grey feedback mechanism. Result: We evaluate the proposed method with a large-scale real-world software engineering dataset, and compare it with the linear regression method and the Kalman filter method, revealing that accuracy has been improved by at least 28% and 50%, respectively. Conclusion: The results indicate that the method can be effective and has considerable potential. We believe that stage predictions could be a useful complement to whole-project effort prediction methods.", "paper_title": "Integrate the GM(1,1) and Verhulst Models to Predict Software Stage Effort", "paper_id": "WOS:000270761100005"}