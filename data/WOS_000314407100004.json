{"auto_keywords": [{"score": 0.04642207879559624, "phrase": "siqinu"}, {"score": 0.039220917160225174, "phrase": "qinu"}, {"score": 0.00481495049065317, "phrase": "web_applications"}, {"score": 0.004755054742217193, "phrase": "main_goal"}, {"score": 0.004695900553353526, "phrase": "software_quality"}, {"score": 0.004374267836149339, "phrase": "improving_quality"}, {"score": 0.004266067096140677, "phrase": "six-phased_evaluation-driven_strategy"}, {"score": 0.00417793854311445, "phrase": "software_quality_requirements"}, {"score": 0.004125934074896249, "phrase": "systematic_way"}, {"score": 0.00390792986752692, "phrase": "specific_user_tasks"}, {"score": 0.003670608022642996, "phrase": "external_quality"}, {"score": 0.003505749731180509, "phrase": "qinu_weakly_performing_indicators"}, {"score": 0.003418958653159371, "phrase": "eq_attributes"}, {"score": 0.0033622909109253616, "phrase": "qinu_problems"}, {"score": 0.003092690568543981, "phrase": "improvement_recommendations"}, {"score": 0.00300351371036355, "phrase": "eq_indicators"}, {"score": 0.002966084234963723, "phrase": "new_version"}, {"score": 0.0029291198314113608, "phrase": "software_application"}, {"score": 0.002762601646452813, "phrase": "initial_benchmark"}, {"score": 0.002519800066326798, "phrase": "eq_level"}, {"score": 0.0024573577356299765, "phrase": "cyclic_strategy"}, {"score": 0.002346861891137455, "phrase": "repeatable_and_consistent_strategy"}, {"score": 0.0022507188208913394, "phrase": "ontological_base"}, {"score": 0.0021857667493036786, "phrase": "specific_methods"}, {"score": 0.0021049977753042253, "phrase": "real_case_study"}], "paper_keywords": ["Quality in use", " External quality", " Actual usability", " Web applications", " Quality improvement"], "paper_abstract": "The main goal in evaluating software quality is to ultimately improve its quality. In this work, we discuss SIQinU (Strategy for Improving Quality in Use), a six-phased evaluation-driven strategy for understanding and improving software quality requirements in a systematic way. Starting with quality in use (QinU), we design specific user tasks and context of use, and through identifying problems in QinU, we determine external quality (EQ) attributes that could be related to these QinU weakly performing indicators. Then, after deriving EQ attributes related to the QinU problems, we evaluate EQ and derive a benchmark to be used as a basis to make improvements. Once improvement recommendations are made based on poorly performing EQ indicators, a new version of the software application is completed and evaluated again for its EQ to establish a delta from the initial benchmark. Then, we re-evaluate QinU to determine the improvements resulting in QinU from the improvements made at the EQ level, thus leading to a cyclic strategy for improvement and development of relationships. SIQinU is a repeatable and consistent strategy which relies on: a conceptual framework (with ontological base), a process, and specific methods. In order to illustrate SIQinU, a real case study is conducted.", "paper_title": "An integrated strategy to systematically understand and manage quality in use for web applications", "paper_id": "WOS:000314407100004"}