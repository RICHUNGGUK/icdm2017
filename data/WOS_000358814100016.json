{"auto_keywords": [{"score": 0.03478167905660463, "phrase": "swift"}, {"score": 0.014883874132009017, "phrase": "information_flow_analysis"}, {"score": 0.013436570173445803, "phrase": "system-level_emulator"}, {"score": 0.00481495049065317, "phrase": "decoupled_system-wide"}, {"score": 0.004463723624910583, "phrase": "widely-adopted_technique"}, {"score": 0.004025531820226182, "phrase": "dynamic_information_flow_tracking_capability"}, {"score": 0.003970439949538716, "phrase": "dift"}, {"score": 0.0036301992752948956, "phrase": "severe_performance_degradation"}, {"score": 0.003555902292752528, "phrase": "interleaved_system_emulation"}, {"score": 0.0035072146967082083, "phrase": "dift_analysis"}, {"score": 0.0033419808453225516, "phrase": "decoupled_system-wide_information_flow_tracking_scheme"}, {"score": 0.003140888248194296, "phrase": "system-wide_information_flow_tracking"}, {"score": 0.0029928611380840757, "phrase": "memory_locality"}, {"score": 0.0028715299874549245, "phrase": "proposed_methods"}, {"score": 0.002643386043540555, "phrase": "analysis_thread"}, {"score": 0.002302619021497886, "phrase": "conventional_interleaved_design"}, {"score": 0.002224510044064184, "phrase": "pass_mark_performance_test"}, {"score": 0.0021639307835832136, "phrase": "performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "online_analysis"}], "paper_keywords": ["binary translation", " emulator optimization", " information flow tracking", " taint analysis", " sandbox"], "paper_abstract": "Information flow analysis is a widely-adopted technique in software testing and malware analysis. For information flow analysis, a system-level emulator equipped with dynamic information flow tracking capability, DIFT, is needed. However, its effectiveness comes at a price of severe performance degradation due to interleaved system emulation and DIFT analysis. In this paper, a decoupled system-wide information flow tracking scheme, SWIFT, is proposed. Through decoupling system-wide information flow tracking from emulation, SWIFT regains the memory locality and code optimization. The proposed methods are able to aggressively eliminate dependency between the system-level emulator and the analysis thread. Our performance evaluation indicates that, under the same hardware specifications, SWIFT runs 2.74 similar to 7.48 times faster than the conventional interleaved design while being benchmarked by Pass Mark Performance Test 6.0. The performance improvement consequently makes the online analysis feasible in practice.", "paper_title": "SWIFT: Decoupled System-Wide Information Flow Tracking and its Optimizations", "paper_id": "WOS:000358814100016"}