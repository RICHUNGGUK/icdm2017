{"auto_keywords": [{"score": 0.050077262453083825, "phrase": "ciao"}, {"score": 0.043891862951523725, "phrase": "prolog"}, {"score": 0.014476215016392036, "phrase": "important_aspect"}, {"score": 0.0046781613377273774, "phrase": "overall_description"}, {"score": 0.004633429997452688, "phrase": "ciao_multiparadigm_programming_system"}, {"score": 0.0045598218623312675, "phrase": "novel_aspects"}, {"score": 0.00429057323623293, "phrase": "logic_programming"}, {"score": 0.004076157223660074, "phrase": "large_number"}, {"score": 0.004050116768809519, "phrase": "useful_features"}, {"score": 0.004024242000713225, "phrase": "different_programming_paradigms"}, {"score": 0.0036788184374592706, "phrase": "program_module"}, {"score": 0.003204999581724485, "phrase": "simple_and_modular_way"}, {"score": 0.0030839851024657395, "phrase": "powerful_preprocessor"}, {"score": 0.0030446678645538942, "phrase": "associated_assertion_language"}, {"score": 0.0029866270401697906, "phrase": "non-trivial_bugs"}, {"score": 0.002837188425640173, "phrase": "automatic_parallelization"}, {"score": 0.0026523079380037706, "phrase": "static_languages"}, {"score": 0.002585081657512565, "phrase": "interactive_development"}, {"score": 0.0025603123094624265, "phrase": "dynamic_language"}, {"score": 0.002535779689260244, "phrase": "compilation_architecture"}, {"score": 0.0025034338848015166, "phrase": "separate_compilation"}, {"score": 0.0024399717841513354, "phrase": "powerful_autodocumenter"}, {"score": 0.002416589459425828, "phrase": "unit_testing_framework"}, {"score": 0.00236289633510808, "phrase": "assertion_system"}, {"score": 0.0023178219772486868, "phrase": "informal_overview"}, {"score": 0.002280916026414715, "phrase": "program_development_environment"}, {"score": 0.0022302306304023602, "phrase": "design_philosophy"}, {"score": 0.0021390634151482566, "phrase": "single_journal_paper"}, {"score": 0.0021049977753042253, "phrase": "previous_ciao_literature"}], "paper_keywords": ["Prolog", " logic programming system", " assertions", " verification", " extensible languages"], "paper_abstract": "We provide an overall description of the Ciao multiparadigm programming system emphasizing some of the novel aspects and motivations behind its design and implementation. An important aspect of Ciao is that, in addition to supporting logic programming (and, in particular, Prolog), it provides the programmer with a large number of useful features from different programming paradigms and styles and that the use of each of these features (including those of Prolog) can be turned on and off at will for each program module. Thus, a given module may be using, e. g., higher order functions and constraints, while another module may be using assignment, predicates, Prolog meta-programming, and concurrency. Furthermore, the language is designed to be extensible in a simple and modular way. Another important aspect of Ciao is its programming environment, which provides a powerful preprocessor (with an associated assertion language) capable of statically finding non-trivial bugs, verifying that programs comply with specifications, and performing many types of optimizations (including automatic parallelization). Such optimizations produce code that is highly competitive with other dynamic languages or, with the (experimental) optimizing compiler, even that of static languages, all while retaining the flexibility and interactive development of a dynamic language. This compilation architecture supports modularity and separate compilation throughout. The environment also includes a powerful autodocumenter and a unit testing framework, both closely integrated with the assertion system. The paper provides an informal overview of the language and program development environment. It aims at illustrating the design philosophy rather than at being exhaustive, which would be impossible in a single journal paper, pointing instead to previous Ciao literature.", "paper_title": "An overview of Ciao and its design philosophy", "paper_id": "WOS:000299888500009"}