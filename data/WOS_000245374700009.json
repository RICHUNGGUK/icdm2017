{"auto_keywords": [{"score": 0.04329804133557501, "phrase": "knn_retrieval"}, {"score": 0.0425458214491714, "phrase": "object_trajectories"}, {"score": 0.00481495049065317, "phrase": "historical_moving_object_trajectories"}, {"score": 0.00453113241842654, "phrase": "spatial_and_spatio-temporal_databases"}, {"score": 0.00436890075128947, "phrase": "considerable_attention"}, {"score": 0.004289966839994858, "phrase": "database_literature"}, {"score": 0.003531474887552889, "phrase": "r-tree-like_structures"}, {"score": 0.0032629585038738856, "phrase": "best-first_traversal_paradigm"}, {"score": 0.0029783256772952073, "phrase": "static_query_point"}, {"score": 0.0029244418026475832, "phrase": "moving_query_trajectory"}, {"score": 0.002751751956416832, "phrase": "node_access"}, {"score": 0.0026209522797963447, "phrase": "single_access"}, {"score": 0.0025578967205807843, "phrase": "qualifying_nodes"}, {"score": 0.002481200970201421, "phrase": "final_result"}, {"score": 0.002406799309495983, "phrase": "main-memory_consumption"}, {"score": 0.0023632309822037637, "phrase": "cpu_cost"}, {"score": 0.0022508572821818124, "phrase": "extensive_experiments"}, {"score": 0.0022236070278432575, "phrase": "synthetic_and_real_datasets"}, {"score": 0.0021700901058417602, "phrase": "proposed_algorithms"}], "paper_keywords": ["query processing", " k-nearest-neighbor search", " moving object trajectories", " algorithms", " spatio-temporal databases"], "paper_abstract": "k Nearest Neighbor (kNN) search is one of the most important operations in spatial and spatio-temporal databases. Although it has received considerable attention in the database literature, there is little prior work on kNN retrieval for moving object trajectories. Motivated by this observation, this paper studies the problem of efficiently processing kNN (k >= 1) search on R-tree-like structures storing historical information about moving object trajectories. Two algorithms are developed based on best-first traversal paradigm, called BFPkNN and BFTkNN, which handle the kNN retrieval with respect to the static query point and the moving query trajectory, respectively. Both algorithms minimize the number of node access, that is, they perform a single access only to those qualifying nodes that may contain the final result. Aiming at saving main-memory consumption and reducing CPU cost further, several effective pruning heuristics are also presented. Extensive experiments with synthetic and real datasets confirm that the proposed algorithms in this paper outperform their competitors significantly in both efficiency and scalability.", "paper_title": "Efficient k-nearest-neighbor search algorithms for historical moving object trajectories", "paper_id": "WOS:000245374700009"}