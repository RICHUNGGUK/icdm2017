{"auto_keywords": [{"score": 0.0486868426803837, "phrase": "bin_packing"}, {"score": 0.00481495049065317, "phrase": "fixed_number"}, {"score": 0.004299910946753963, "phrase": "polynomial_time"}, {"score": 0.003479692058963528, "phrase": "dynamic_programming"}, {"score": 0.003312486229143855, "phrase": "unary_bin_packing"}, {"score": 0.0031845067058084613, "phrase": "unary_encoding"}, {"score": 0.003107034833468438, "phrase": "running_time"}, {"score": 0.0027741761880779535, "phrase": "standard_complexity_assumptions"}, {"score": 0.002404706573379854, "phrase": "additive_error"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Bin Packing", " Parameterized complexity", " Additive approximation", " Will-hardness"], "paper_abstract": "AS BIN PACKING is NP-hard already for k = 2 bins. it is unlikely to be solvable in polynomial time even if the number of bins is a fixed constant. However, if the sizes of the items are polynomially bounded integers, then the problem can be solved in time n(O(k)) for an input of length n by dynamic programming. We show, by proving the W[1]-hardness of UNARY BIN PACKING (where the sizes are given in unary encoding), that this running time cannot be improved to f (k) . n(O(1)) for any function f (k) (under standard complexity assumptions). On the other hand, we provide an algorithm for BIN PACKING that obtains in time 2(O(k log2 k)) + O (n) a solution with additive error at most 1. i.e., either finds a packing into k + 1 bins or decides that k bins do not suffice. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Bin packing with fixed number of bins revisited", "paper_id": "WOS:000311978600004"}