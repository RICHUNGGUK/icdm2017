{"auto_keywords": [{"score": 0.04632205879989511, "phrase": "replacement_paths_problem"}, {"score": 0.03555377441120232, "phrase": "replacement_paths"}, {"score": 0.013196881425215306, "phrase": "unweighted_directed_graphs"}, {"score": 0.012403494872562402, "phrase": "shortest_paths_tree"}, {"score": 0.012204389767101505, "phrase": "running_time"}, {"score": 0.011500980600084762, "phrase": "k_simple_shortest_paths"}, {"score": 0.010463645284688704, "phrase": "vickrey_pricing"}, {"score": 0.007918597915135897, "phrase": "second_simple_shortest_path"}, {"score": 0.00481495049065317, "phrase": "simple_shortest_paths"}, {"score": 0.004622606031334272, "phrase": "directed_graph"}, {"score": 0.004547827227554161, "phrase": "shortest_path"}, {"score": 0.004474978287446383, "phrase": "g."}, {"score": 0.004318881178805575, "phrase": "edge_e"}, {"score": 0.003991372498491864, "phrase": "trivial_algorithm"}, {"score": 0.0034554281349858836, "phrase": "directed_graphs"}, {"score": 0.003418028113544387, "phrase": "lawler"}, {"score": 0.0031500213134140953, "phrase": "distributed_network"}, {"score": 0.0030905652689424924, "phrase": "open_problem"}, {"score": 0.0030737927058950803, "phrase": "nisan"}, {"score": 0.002848169003629203, "phrase": "first_nontrivial_algorithm"}, {"score": 0.0027641218567092665, "phrase": "small_integer_weights"}, {"score": 0.0027268254983272423, "phrase": "monte-carlo"}, {"score": 0.0025611773887867255, "phrase": "root_n."}, {"score": 0.002353782218079617, "phrase": "different_subgraph"}, {"score": 0.002235040467016128, "phrase": "easier_problem"}, {"score": 0.00214553435813143, "phrase": "k_simple_shortest_paths_algorithm"}, {"score": 0.0021222761634353596, "phrase": "faster_algorithm"}, {"score": 0.0021049977753042253, "phrase": "second_shortest_path_problem"}], "paper_keywords": ["Algorithms", " Theory", " Graph algorithms", " shortest paths", " k simple shortest paths"], "paper_abstract": "Let G = (V, E) be a directed graph and let P be a shortest path from s to t in G. In the replacement paths problem, we are required to find, for every edge e on P, a shortest path from s to t in G that avoids e. The only known algorithm for solving the problem, even for unweighted directed graphs, is the trivial algorithm in which each edge on the path, in its turn, is excluded from the graph and a shortest paths tree is computed from s. The running time is O(mn + n(2) log n). The replacement paths problem is strongly motivated by two different applications: (1) The fastest algorithm to compute the k simple shortest paths between s and t in directed graphs [Yen 1971; Lawler 1972] computes the replacement paths between s and t. Its running time is O(mnk). (2) The replacement paths problem is used to compute the Vickrey pricing of edges in a distributed network. It was raised as an open problem by Nisan and Ronen [2001] whether it is possible to compute the Vickrey pricing faster than n computations of a shortest paths tree. In this article we present the first nontrivial algorithm for computing replacement paths in unweighted directed graphs (and in graphs with small integer weights). Our algorithm is Monte-Carlo and its running time is O(m root n). This result immediately improves the running time of the two applications mentioned above in a factor of root n. We also show how to reduce the problem of computing k simple shortest paths between s and t to O(k) computations of a second simple shortest path from s to t each time in a different subgraph of G. The importance of this result is that computing a second simple shortest path may turn out to be an easier problem than computing the replacement paths, thus, we can focus our efforts to improve the k simple shortest paths algorithm in obtaining a faster algorithm for the second shortest path problem.", "paper_title": "Replacement Paths and k Simple Shortest Paths in Unweighted Directed Graphs", "paper_id": "WOS:000309426300001"}