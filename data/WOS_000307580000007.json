{"auto_keywords": [{"score": 0.03259781833779348, "phrase": "domain_experts"}, {"score": 0.00481495049065317, "phrase": "data-flow_programming_model"}, {"score": 0.004582423717777699, "phrase": "high-level_macro_data-flow_programming_model"}, {"score": 0.004547656324173302, "phrase": "concurrent_collections"}, {"score": 0.004361077072629878, "phrase": "high_performance"}, {"score": 0.004327981760540394, "phrase": "low_energy_consumption"}, {"score": 0.004198082549566806, "phrase": "data-flow_programming"}, {"score": 0.0041662189933067, "phrase": "modern_computing_platforms"}, {"score": 0.004025787455454387, "phrase": "energy_efficiency"}, {"score": 0.0038900709793274484, "phrase": "diverse_spectrum"}, {"score": 0.0038166522763373434, "phrase": "small-scale_embedded_socs"}, {"score": 0.00378767277402891, "phrase": "large-scale_super-computers"}, {"score": 0.0037020429480068653, "phrase": "heterogeneous_platforms"}, {"score": 0.003659954070354848, "phrase": "serious_challenge"}, {"score": 0.0036321600255449613, "phrase": "application_developers"}, {"score": 0.0035500334260484376, "phrase": "software_flow"}, {"score": 0.0035096666710980108, "phrase": "high-level_cnc_programs"}, {"score": 0.0034697573205392887, "phrase": "habanero-c_language"}, {"score": 0.003391290302481397, "phrase": "clear_separation"}, {"score": 0.003352722512047951, "phrase": "application_description"}, {"score": 0.0032519989404960073, "phrase": "application_components"}, {"score": 0.003190584226787897, "phrase": "hardware_platform"}, {"score": 0.0029675701595142656, "phrase": "tuning_expert"}, {"score": 0.002824005136794786, "phrase": "minimal_effort"}, {"score": 0.002760101069870307, "phrase": "habanero-c_runtime_system"}, {"score": 0.002687366778212309, "phrase": "heterogeneous_computing_devices"}, {"score": 0.0026567830878420347, "phrase": "task_affinity"}, {"score": 0.002626546539786707, "phrase": "heterogeneous_components"}, {"score": 0.002547583216040341, "phrase": "runtime_scheduling_decisions"}, {"score": 0.002499438189264537, "phrase": "working_example"}, {"score": 0.0024428607154967806, "phrase": "medical_image-processing_algorithms"}, {"score": 0.0024150528983695446, "phrase": "prototype_heterogeneous_platform"}, {"score": 0.0023157656212149367, "phrase": "medical_imaging_domain"}, {"score": 0.0022806798371116698, "phrase": "fast_and_accurate_results"}, {"score": 0.0022547140008848912, "phrase": "critical_step"}, {"score": 0.0021049977753042253, "phrase": "estimated_usage"}], "paper_keywords": ["Data flow model", " Heterogeneous architectures", " Domain-specific language", " Tuning annotations"], "paper_abstract": "In this paper we explore mapping of a high-level macro data-flow programming model called Concurrent Collections (CnC) onto heterogeneous platforms in order to achieve high performance and low energy consumption while preserving the ease of use of data-flow programming. Modern computing platforms are becoming increasingly heterogeneous in order to improve energy efficiency. This trend is clearly seen across a diverse spectrum of platforms, from small-scale embedded SOCs to large-scale super-computers. However, programming these heterogeneous platforms poses a serious challenge for application developers. We have designed a software flow for converting high-level CnC programs to the Habanero-C language. CnC programs have a clear separation between the application description, the implementation of each of the application components and the abstraction of hardware platform, making it an excellent programming model for domain experts. Domain experts can later employ the help of a tuning expert (either a compiler or a person) to tune their applications with minimal effort. We also extend the Habanero-C runtime system to support work-stealing across heterogeneous computing devices and introduce task affinity for these heterogeneous components to allow users to fine tune the runtime scheduling decisions. We demonstrate a working example that maps a pipeline of medical image-processing algorithms onto a prototype heterogeneous platform that includes CPUs, GPUs and FPGAs. For the medical imaging domain, where obtaining fast and accurate results is a critical step in diagnosis and treatment of patients, we show that our model offers up to 17.72x speedup and an estimated usage of 0.52x of the power used by CPUs alone, when using accelerators (GPUs and FPGAs) and CPUs.", "paper_title": "Mapping a Data-Flow Programming Model onto Heterogeneous Platforms", "paper_id": "WOS:000307580000007"}