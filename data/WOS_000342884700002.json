{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "sparse_triangular_linear_systems"}, {"score": 0.004742290714667451, "phrase": "sparse_triangular_systems"}, {"score": 0.00469445816161498, "phrase": "linear_equations"}, {"score": 0.004623608221548592, "phrase": "performance_bottleneck"}, {"score": 0.00441738161338662, "phrase": "direct_methods"}, {"score": 0.00409382470158851, "phrase": "approximate_solution"}, {"score": 0.00395101799538683, "phrase": "triangular_systems"}, {"score": 0.003736567662016446, "phrase": "parallel_linear_algebra_packages"}, {"score": 0.003606178185661875, "phrase": "significant_parallelism"}, {"score": 0.003462704420080129, "phrase": "novel_parallel_algorithm"}, {"score": 0.003144345057121367, "phrase": "conventional_methods"}, {"score": 0.002840708910768261, "phrase": "nonzero_matrix_entries"}, {"score": 0.0026592094867526803, "phrase": "independent_rows"}, {"score": 0.0025275050635202878, "phrase": "greater_overlap"}, {"score": 0.0024392031587145728, "phrase": "dense_off-diagonal_regions"}, {"score": 0.002271804060642129, "phrase": "mpi"}, {"score": 0.002248755794042486, "phrase": "present_promising_experimental_results"}, {"score": 0.00217017119491777, "phrase": "numerous_sparse_matrices"}, {"score": 0.002148226022654619, "phrase": "real_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Triangular solver", " Parallel algorithms", " Sparse linear systems", " Distributed memory computers"], "paper_abstract": "Solving sparse triangular systems of linear equations is a performance bottleneck in many methods for solving more general sparse systems. Both for direct methods and for many iterative preconditioners, it is used to solve the system or improve an approximate solution, often across many iterations. Solving triangular systems is notoriously resistant to parallelism, however, and existing parallel linear algebra packages appear to be ineffective in exploiting significant parallelism for this problem. We develop a novel parallel algorithm based on various heuristics that adapt to the structure of the matrix and extract parallelism that is unexploited by conventional methods. By analyzing and reordering operations, our algorithm can often extract parallelism even for cases where most of the nonzero matrix entries are near the diagonal. Our main parallelism strategies are: (1) identify independent rows, (2) send data earlier to achieve greater overlap, and (3) process dense off-diagonal regions in parallel. We describe the implementation of our algorithm in Charm(++) and MPI and present promising experimental results on up to 512 cores of BlueGene/P, using numerous sparse matrices from real applications. Published by Elsevier B.V.", "paper_title": "Structure-adaptive parallel solution of sparse triangular linear systems", "paper_id": "WOS:000342884700002"}