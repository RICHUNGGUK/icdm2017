{"auto_keywords": [{"score": 0.008713768692145006, "phrase": "parallel_scheme"}, {"score": 0.008569615100370367, "phrase": "parameter_sweep_applications"}, {"score": 0.007927552448718263, "phrase": "graphics_processing_unit"}, {"score": 0.00721175796766684, "phrase": "multiple_parameters"}, {"score": 0.007052885287688792, "phrase": "single_parameter"}, {"score": 0.004539670116833023, "phrase": "naive_scheme"}, {"score": 0.003829548069657859, "phrase": "simultaneous_sweeps"}, {"score": 0.003724034990158436, "phrase": "computing_behaviors"}, {"score": 0.0036621225944272256, "phrase": "different_parameters"}, {"score": 0.0035811651542886746, "phrase": "memory_accesses"}, {"score": 0.0034630606658026595, "phrase": "single_access"}, {"score": 0.0034245614958572012, "phrase": "similar_irregularities"}, {"score": 0.003348838095597268, "phrase": "parameters'_computational_tasks"}, {"score": 0.003166751241099304, "phrase": "off-chip_memory"}, {"score": 0.002895721231882758, "phrase": "unified_data"}, {"score": 0.002847540262784593, "phrase": "fast_on-chip_memory"}, {"score": 0.00269263690712392, "phrase": "practical_applications"}, {"score": 0.0023021895404322767, "phrase": "application_characteristics"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["parameter sweep", " acceleration", " GPU", " CUDA"], "paper_abstract": "This paper proposes a parallel scheme for accelerating parameter sweep applications on a graphics processing unit. By using hundreds of cores on the graphics processing unit, we found that our scheme simultaneously processes multiple parameters rather than a single parameter. The simultaneous sweeps exploit the similarity of computing behaviors shared by different parameters, thus allowing memory accesses to be coalesced into a single access if similar irregularities appear among the parameters' computational tasks. In addition, our scheme reduces the amount of off-chip memory access by unifying the data that are commonly referenced by multiple parameters and by placing the unified data in the fast on-chip memory. In several experiments, we applied our scheme to practical applications and found that our scheme can perform up to 8.5times faster than a naive scheme that processes a single parameter at a time. We also include a discussion on application characteristics that are required for our scheme to outperform the naive scheme. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "A parallel scheme for accelerating parameter sweep applications on a GPU", "paper_id": "WOS:000329764200012"}