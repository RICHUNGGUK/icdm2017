{"auto_keywords": [{"score": 0.049273293170208544, "phrase": "markov_jump_model"}, {"score": 0.009725849458878801, "phrase": "weighted_majorant_kernel"}, {"score": 0.007740867168753949, "phrase": "simulation_particles"}, {"score": 0.0057712269022811595, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "population_balance-monte_carlo_simulation"}, {"score": 0.004707188147442449, "phrase": "stochastic_algorithm"}, {"score": 0.004680624753255133, "phrase": "gpu_parallel_computing"}, {"score": 0.0046018264570209765, "phrase": "comprehensive_framework"}, {"score": 0.004562923889976588, "phrase": "population_balance-monte_carlo"}, {"score": 0.004486098156258553, "phrase": "particle_coagulation_dynamics"}, {"score": 0.004203343568960231, "phrase": "coagulation-rule_matrix"}, {"score": 0.00417961150804265, "phrase": "differentially-weighted_simulation_particles"}, {"score": 0.004097595199141165, "phrase": "time_evolution"}, {"score": 0.004074457750151711, "phrase": "particle_size_distribution"}, {"score": 0.004051450417410017, "phrase": "low_statistical_noise"}, {"score": 0.0040171817997972335, "phrase": "full_size_range"}, {"score": 0.003893981879985013, "phrase": "time_loopings"}, {"score": 0.003763870829723604, "phrase": "appropriate_coagulation_rule"}, {"score": 0.003627800727103479, "phrase": "pbmc_methods"}, {"score": 0.003467040410632942, "phrase": "two-particle_events"}, {"score": 0.003322781957744817, "phrase": "maximum_coagulation_rates"}, {"score": 0.003285333896994258, "phrase": "acceptance-rejection_processes"}, {"score": 0.003193543910500328, "phrase": "meanwhile_the_mean_time-step"}, {"score": 0.0031131208154718867, "phrase": "coagulation_kernels"}, {"score": 0.0030955250132409964, "phrase": "rejected_and_accepted_particle_pairs"}, {"score": 0.0030347168513348835, "phrase": "fast_differentially-weighted_pbmc_simulations"}, {"score": 0.0028674628275126824, "phrase": "zero-dimensional_system"}, {"score": 0.002671263324230699, "phrase": "multiple_cells"}, {"score": 0.002574590695234404, "phrase": "massively_threaded_data-parallel_tasks"}, {"score": 0.0025097154697345096, "phrase": "cpu_computation"}, {"score": 0.0024884548152669496, "phrase": "speedup_ratio"}, {"score": 0.0024673738215365104, "phrase": "parallel_computing"}, {"score": 0.0023445770108033288, "phrase": "accelerating_approaches"}, {"score": 0.002331315084653705, "phrase": "pbmc"}, {"score": 0.002298486379547017, "phrase": "physically_realistic_brownian_coagulation_case"}, {"score": 0.002246917304058838, "phrase": "benchmark_solution"}, {"score": 0.002234206434819338, "phrase": "discrete-sectional_method"}, {"score": 0.002215274527909304, "phrase": "simulation_results"}, {"score": 0.002190280748985751, "phrase": "comprehensive_approach"}, {"score": 0.002141134176057931, "phrase": "computational_accuracy"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Population balance", " Monte Carlo", " Coagulation", " Markov jump", " Majorant kernel", " GPU parallel computing"], "paper_abstract": "This paper proposes a comprehensive framework for accelerating population balance-Monte Carlo (PBMC) simulation of particle coagulation dynamics. By combining Markov jump model, weighted majorant kernel and GPU (graphics processing unit) parallel computing, a significant gain in computational efficiency is achieved. The Markov jump model constructs a coagulation-rule matrix of differentially-weighted simulation particles, so as to capture the time evolution of particle size distribution with low statistical noise over the full size range and as far as possible to reduce the number of time loopings. Here three coagulation rules are highlighted and it is found that constructing appropriate coagulation rule provides a route to attain the compromise between accuracy and cost of PBMC methods. Further, in order to avoid double looping over all simulation particles when considering the two-particle events (typically, particle coagulation), the weighted majorant kernel is introduced to estimate the maximum coagulation rates being used for acceptance-rejection processes by single-looping over all particles, and meanwhile the mean time-step of coagulation event is estimated by summing the coagulation kernels of rejected and accepted particle pairs. The computational load of these fast differentially-weighted PBMC simulations (based on the Markov jump model) is reduced greatly to be proportional to the number of simulation particles in a zero-dimensional system (single cell). Finally, for a spatially inhomogeneous multi-dimensional (multi-cell) simulation, the proposed fast PBMC is performed in each cell, and multiple cells are parallel processed by multi-cores on a GPU that can implement the massively threaded data-parallel tasks to obtain remarkable speedup ratio (comparing with CPU computation, the speedup ratio of GPU parallel computing is as high as 200 in a case of 100 cells with 10000 simulation particles per cell). These accelerating approaches of PBMC are demonstrated in a physically realistic Brownian coagulation case. The computational accuracy is validated with benchmark solution of discrete-sectional method. The simulation results show that the comprehensive approach can attain very favorable improvement in cost without sacrificing computational accuracy. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Accelerating population balance-Monte Carlo simulation for coagulation dynamics from the Markov jump model, stochastic algorithm and GPU parallel computing", "paper_id": "WOS:000346429300041"}