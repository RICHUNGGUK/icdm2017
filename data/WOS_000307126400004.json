{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "finite_state_automata"}, {"score": 0.004521179256835894, "phrase": "jan_daciuk's_experiments"}, {"score": 0.004450568197899267, "phrase": "space-efficient_finite_state_automata_representation"}, {"score": 0.00414616342377235, "phrase": "main_memory"}, {"score": 0.003684213587410217, "phrase": "memory_footprint"}, {"score": 0.003626626504149897, "phrase": "minimal_automata"}, {"score": 0.003432044343307207, "phrase": "transition_labels_and_transition_pointer_offset_values"}, {"score": 0.0030494153169181334, "phrase": "size_gain"}, {"score": 0.00290855128461017, "phrase": "original_representation"}, {"score": 0.0026252106881752067, "phrase": "state-of-the-art_dictionary_compression_techniques"}], "paper_keywords": [""], "paper_abstract": "This paper is a follow-up to Jan Daciuk's experiments on space-efficient finite state automata representation that can be used directly for traversals in main memory (Daciuk, 2000) [4]. We investigate several techniques for reducing the memory footprint of minimal automata, mainly exploiting the fact that transition labels and transition pointer offset values are not evenly distributed and so are suitable for compression. We achieve a size gain of around 20%-30% compared to the original representation given in [4]. This result is comparable to the state-of-the-art dictionary compression techniques like the LZ-trie (Ristov and Laporte, 1999) [15] method, but remains memory and CPU efficient during construction. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Smaller representation of finite state automata", "paper_id": "WOS:000307126400004"}