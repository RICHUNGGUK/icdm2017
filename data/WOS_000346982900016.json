{"auto_keywords": [{"score": 0.04776974719693073, "phrase": "asynchronous_submission"}, {"score": 0.04072472046898861, "phrase": "asynchronous_query_submission"}, {"score": 0.00481495049065317, "phrase": "batched_query_submission"}, {"score": 0.003499864176875713, "phrase": "synchronous_query_submission"}, {"score": 0.0033160345607565565, "phrase": "data_flow_analysis"}, {"score": 0.003198860258228543, "phrase": "transformation_examples"}, {"score": 0.0031277316566463978, "phrase": "query_executions"}, {"score": 0.0030171910207671205, "phrase": "earlier_work"}, {"score": 0.002897482096228207, "phrase": "novel_approach"}, {"score": 0.0027950561494657633, "phrase": "multiple_asynchronous_requests"}, {"score": 0.0024864612830452254, "phrase": "java_programs"}, {"score": 0.002453116398642071, "phrase": "jdbc_calls"}, {"score": 0.002366361492754389, "phrase": "web_service_calls"}, {"score": 0.002292965705677312, "phrase": "detailed_experimental_study"}, {"score": 0.0021920373388760314, "phrase": "proposed_rewrite_techniques"}, {"score": 0.0021049977753042253, "phrase": "performance_gains"}], "paper_keywords": ["Query optimization", " program analysis", " program transformation"], "paper_abstract": "The performance of database/web-service backed applications can be significantly improved by asynchronous submission of queries/requests well ahead of the point where the results are needed, so that results are likely to have been fetched already when they are actually needed. However, manually writing applications to exploit asynchronous query submission is tedious and error-prone. In this paper, we address the issue of automatically transforming a program written assuming synchronous query submission, to one that exploits asynchronous query submission. Our program transformation method is based on data flow analysis and is framed as a set of transformation examples. Our examples can handle query executions within loops, unlike some of the earlier work in this area. We also present a novel approach that, at runtime, can combine multiple asynchronous requests into batches, thereby achieving the benefits of batching in addition to that of asynchronous submission. We have built a tool that implements our transformation techniques on Java programs that use JDBC calls; our tool can be extended to handle Web service calls. We have carried out a detailed experimental study on several real-life applications, which shows the effectiveness of the proposed rewrite techniques, both in terms of their applicability and the performance gains achieved.", "paper_title": "Program Transformations for Asynchronous and Batched Query Submission", "paper_id": "WOS:000346982900016"}