{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "support_hyperplanes"}, {"score": 0.03989136862838459, "phrase": "test_object"}, {"score": 0.03867712206987222, "phrase": "semi-consistent_hyperplane"}, {"score": 0.033743720768701295, "phrase": "model_complexity"}, {"score": 0.004723322467153553, "phrase": "new_classification_method"}, {"score": 0.004345909305473054, "phrase": "binary_classification_task"}, {"score": 0.003998531873723384, "phrase": "classification_mistakes"}, {"score": 0.003872414709826833, "phrase": "semi-consistent_hyperplanes"}, {"score": 0.003362944428837724, "phrase": "good_balance"}, {"score": 0.0026184796288543878, "phrase": "so-called_margin"}, {"score": 0.0024399717841513354, "phrase": "support_vector_machine_learning"}, {"score": 0.0024088451312725924, "phrase": "class_overlap"}, {"score": 0.002259054486157494, "phrase": "slack_variables"}, {"score": 0.0021597662797996843, "phrase": "standard_classifiers"}], "paper_keywords": ["kernel methods", " large margin and instance-based classifiers"], "paper_abstract": "A new classification method is proposed, called Support Hyperplanes (SHs). To solve the binary classification task, SHs consider the set of all hyperplanes that do not make classification mistakes, referred to as semi-consistent hyperplanes. A test object is classified using that semi-consistent hyperplane, which is farthest away from it. In this way, a good balance between goodness-of-fit and model complexity is achieved, where model complexity is proxied by the distance between a test object and a semi-consistent hyperplane. This idea of complexity resembles the one imputed in the width of the so-called margin between two classes, which arises in the context of Support Vector Machine learning. Class overlap can be handled via the introduction of kernels and/or slack variables. The performance of SHs against standard classifiers is promising on several widely-used empirical data sets.", "paper_title": "Classification with support hyperplanes", "paper_id": "WOS:000242308000065"}