{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "new_interactive_environments"}, {"score": 0.044075968396582184, "phrase": "new_challenges"}, {"score": 0.0047276324024980625, "phrase": "multi-user_approach"}, {"score": 0.004533921350392657, "phrase": "today's_wimp_interfaces"}, {"score": 0.004416885492192237, "phrase": "distributed_display_environments"}, {"score": 0.00439384176522315, "phrase": "large_display_surface_environments"}, {"score": 0.003785115566529808, "phrase": "advanced_drag-and-drop_techniques"}, {"score": 0.003658497569590915, "phrase": "unifying_implementation_model"}, {"score": 0.003435725890684843, "phrase": "advanced_drag-and-drop_support"}, {"score": 0.003364514629929572, "phrase": "new_emerging_environments"}, {"score": 0.0032861588691414667, "phrase": "drag-and-drop_implementations"}, {"score": 0.003192856644372931, "phrase": "dedicated_interaction_model"}, {"score": 0.0031678720736808574, "phrase": "instrumental_interaction"}, {"score": 0.002897977113538355, "phrase": "existing_drag-and-drop_approaches"}, {"score": 0.0025960262223338293, "phrase": "multiple_displays"}, {"score": 0.0025756998692888305, "phrase": "multiple_computers"}, {"score": 0.002469943756401981, "phrase": "large_displays"}, {"score": 0.0024570325245029286, "phrase": "possibly_standard_drag"}, {"score": 0.0023133472707605914, "phrase": "api"}, {"score": 0.0022772115643656153, "phrase": "java-based_implementation"}, {"score": 0.0021951623041245897, "phrase": "orchis"}, {"score": 0.0021216174443025276, "phrase": "poip"}, {"score": 0.0021049977753042253, "phrase": "distributed_drag"}], "paper_keywords": ["Distributed display environments", " Wall-sized displays", " Drag-and-drop", " Multi-user interaction models", " Plasticity"], "paper_abstract": "Drag-and-drop is probably one of the most successful and generic representations of direct manipulation in today's WIMP interfaces. At the same time, emerging new interactive environments such as distributed display environments or large display surface environments have revealed the need for an evolution of drag-and-drop to address new challenges. In this context, several extensions of drag-and-drop have been proposed over the past years. However, implementations for these extensions are difficult to reproduce, integrate and extend. This situation hampers the development or integration of advanced drag-and-drop techniques in applications. The aim of this paper is to propose a unifying implementation model of drag-and-drop and of its extensions. This model-called M-CIU-aims at facilitating the implementation of advanced drag-and-drop support by offering solutions to problems typical of new emerging environments. The model builds upon a synthesis of drag-and-drop implementations, an analysis of requirements for meeting new challenges and a dedicated interaction model based on instrumental interaction. By using this model, a programmer will be able to implement advanced drag-and-drop supporting (1) multi-display environments, (2) large display surfaces and (3) multi-user systems. Furthermore by unifying the implementation of all existing drag-and-drop approaches, this model also provides flexibility by allowing users (or applications) to select the most appropriate drag-and-drop technique depending on the context of use. For example, a user might prefer to use pick-and-drop when interacting with multiple displays attached to multiple computers, push-and-throw or drag-and-throw when interacting with large displays and possibly standard drag-and-drop in a more traditional context. Finally, in order to illustrate the various benefits of this model, we provide an API called PoIP which is a Java-based implementation of the model that can be used with most Java-based applications. We also describe Orchis, an interactive graphical application used to share bookmarks and that uses PoIP to implement distributed drag-and-drop like interactions. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Extending drag-and-drop to new interactive environments: A multi-display, multi-instrument and multi-user approach", "paper_id": "WOS:000261920600006"}