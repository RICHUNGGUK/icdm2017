{"auto_keywords": [{"score": 0.043542824620184634, "phrase": "base_classes"}, {"score": 0.03795656673051686, "phrase": "data-flow_coverage"}, {"score": 0.03756652729061808, "phrase": "state_variables"}, {"score": 0.034701684314205866, "phrase": "data-flow_test_criteria"}, {"score": 0.03215922448390172, "phrase": "test_suites"}, {"score": 0.029182863763134715, "phrase": "test_case"}, {"score": 0.00481495049065317, "phrase": "state_variable_based_data-flow_test_coverage"}, {"score": 0.004663074596384574, "phrase": "data-flow_testing_approaches"}, {"score": 0.004580769304731227, "phrase": "procedural_and_object-oriented_programs"}, {"score": 0.004296264970612285, "phrase": "aspect-oriented_programs"}, {"score": 0.004220406575749275, "phrase": "data-flow_interactions"}, {"score": 0.003646629717560631, "phrase": "tool_implementation"}, {"score": 0.003481465013724763, "phrase": "aspectj_programs"}, {"score": 0.003383552654319383, "phrase": "empirical_study"}, {"score": 0.0029971349193857093, "phrase": "state_variable_definition-use_associations"}, {"score": 0.0025343769150179764, "phrase": "advised_class"}, {"score": 0.0024368006923629476, "phrase": "data_flow_associations"}, {"score": 0.0022933216359142736, "phrase": "control-flow_criteria"}, {"score": 0.002150580119047236, "phrase": "data-flow_criteria"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Aspect-oriented programming", " Control and data flow test criteria", " Empirical study", " Higher order mutation", " Mutation testing", " Testing tools"], "paper_abstract": "Context: Data-flow testing approaches have been used for procedural and object-oriented programs, and shown to be effective in detecting faults. However, few such approaches have been evaluated for aspect-oriented programs. In such programs, data-flow interactions can occur between base classes and aspects, which can affect the behavior of both. Faults resulting from such interactions are hard to detect unless the interactions are specifically targeted during testing. Objective: This paper presents an approach and tool implementation for measuring data-flow coverage based on state variables defined in base classes or aspects in AspectJ programs. The paper also reports on an empirical study that compares the cost and effectiveness of data-flow test criteria that are based on state variables with two control-flow criteria. Method: Effectiveness of the criteria was evaluated for various fault types. Cost-effectiveness of test suites that cover all state variable definition-use associations (DUAs) was evaluated for three coverage levels: 100%, 90%, and 80%. Results: The effort needed to obtain a test case that achieves data-flow coverage is higher than the effort needed to obtain a test case that covers a block or a branch in an advised class. Covering certain data flow associations requires more effort than for other types of data flow associations. The data-flow test criteria based on state variables of a base-class are in general more effective than control-flow criteria. Conclusions: Overall, it is cost-effective to obtain test suites at the 90% coverage level of data-flow criteria. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "An approach and tool for measurement of state variable based data-flow test coverage for aspect-oriented programs", "paper_id": "WOS:000349427200014"}