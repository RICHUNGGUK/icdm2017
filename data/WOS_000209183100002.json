{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.009284090276756328, "phrase": "owl"}, {"score": 0.0046650615456476155, "phrase": "well-known_trade"}, {"score": 0.004610058444728656, "phrase": "imperative_and_declarative_languages"}, {"score": 0.00425951071471662, "phrase": "declarative_languages"}, {"score": 0.003664963414801933, "phrase": "graphical_interfaces"}, {"score": 0.0035648266669315943, "phrase": "java_language"}, {"score": 0.0033460624879847667, "phrase": "owl_language"}, {"score": 0.003241750934419473, "phrase": "binding_process"}, {"score": 0.0030427525339358935, "phrase": "software_development"}, {"score": 0.00289007009553812, "phrase": "programming_paradigms"}, {"score": 0.0027450280220853137, "phrase": "reasoning_capabilities"}, {"score": 0.0026594033724490172, "phrase": "java_applications"}, {"score": 0.002627985415362773, "phrase": "flow_control"}, {"score": 0.002486193594641237, "phrase": "owl_ontologies"}, {"score": 0.002408623172021922, "phrase": "software_developments"}, {"score": 0.0022428042503686053, "phrase": "proposed_architecture"}, {"score": 0.0021901023885734, "phrase": "open_source_framework"}, {"score": 0.002155656133617155, "phrase": "technical_details"}, {"score": 0.0021049977753042253, "phrase": "statistical_results"}], "paper_keywords": ["Semantic Web", " OWL Ontologies", " SWRL Rules", " Java Object-Oriented Programming Language", " Knowledge Representation"], "paper_abstract": "There exists a well-known trade off between imperative and declarative languages. Imperative languages such as Java are suitable to describe processes and how these processes should be done. Declarative languages such as OWL are used to describe systems and what is available in them. Each one has advantages and disadvantages and each one is more convenient in some circumstances than in others. For example, graphical interfaces might be easily implemented using the Java language whereas the description of the state of a system might be easily described in the OWL language. Hence, this proposal describes a binding process between Java and OWL to provide an architecture enabling the usage of both languages during software development and at run-time. The architecture allows getting the advantages of both programming paradigms, declarative and imperative, together. As a result, the reasoning capabilities provided by OWL could be used in Java applications whereas the flow control of applications and the I/O functions available in Java could be used seamlessly for OWL ontologies. The aim is to speed up software developments using the facilities provided by both types of languages. As a proof of concept, the proposed architecture has been implemented as an open source framework, and some technical details of this implementation together with statistical results of performance and scalability are discussed in this paper.", "paper_title": "Towards an Architecture to Bind the Java and OWL Languages", "paper_id": "WOS:000209183100002"}