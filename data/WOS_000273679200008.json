{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "tinynet"}, {"score": 0.004652845998457721, "phrase": "quick_integration"}, {"score": 0.0045348429403481464, "phrase": "wireless_sensor_networks"}, {"score": 0.004438786538918403, "phrase": "tinyos."}, {"score": 0.004162602203448056, "phrase": "divide-and-conquer_approach"}, {"score": 0.004056981775766067, "phrase": "tinyos_application"}, {"score": 0.003920295222165263, "phrase": "flexible_administration"}, {"score": 0.0038868464660354626, "phrase": "network_protocols"}, {"score": 0.0038207994186834015, "phrase": "sample_development"}, {"score": 0.0037078961288626185, "phrase": "environmental_monitoring_application"}, {"score": 0.003598317040926701, "phrase": "floor-wide_wsn_testbed"}, {"score": 0.0034621581245372138, "phrase": "sink_node"}, {"score": 0.0031640918630415566, "phrase": "hop_count"}, {"score": 0.0027702126237754625, "phrase": "transparent_use"}, {"score": 0.0027347937102326285, "phrase": "underlying_network_protocols"}, {"score": 0.0026425357050743003, "phrase": "network_components"}, {"score": 0.0026199603775129516, "phrase": "related_messages"}, {"score": 0.002586457551025025, "phrase": "different_applications"}, {"score": 0.002477837342313456, "phrase": "tinyos_interfaces"}, {"score": 0.0024356742694508662, "phrase": "previously_developed_application"}, {"score": 0.0022936610196951962, "phrase": "global_vision"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["TinyOS", " modular networking framework", " 6LowPAN", " monitoring application"], "paper_abstract": "In this paper we present TinyNET, a modular framework allowing development and quick integration of protocols and applications for Wireless Sensor Networks (WSNs) in TinyOS. The motivation behind TinyNET is two-fold: on one hand it allows to adopt a divide-and-conquer approach in the development of any TinyOS application; on the other hand it provides a flexible administration of network protocols. As a sample development using TinyNET, we consider an environmental monitoring application, and test it over a floor-wide WSN testbed. Data are converge-casted toward a sink node, which gathers all data collected by the sensors. Routing toward the sink is achieved by means of a hop count (HC) based algorithm. Our framework also integrates support for the 6LowPAN standard (providing, e.g., per-sensor queries and pings). Thanks to TinyNET, s these messages will make transparent use of the underlying network protocols. Also, TinyNET transparently manages the network components and related messages, allowing different applications to share the same network stack; furthermore, it translates TinyOS interfaces so that any previously developed application can be easily ported. These features make it possible to have a global vision over any application, as well as to focus on each of its separate components. Copyright (C) 2009 John Wiley & Sons. Ltd.", "paper_title": "TinyNET-a tiny network framework for TinyOS: description, implementation, and experimentation", "paper_id": "WOS:000273679200008"}