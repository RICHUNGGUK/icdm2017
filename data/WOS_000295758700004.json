{"auto_keywords": [{"score": 0.04199668928862169, "phrase": "ksp"}, {"score": 0.00481495049065317, "phrase": "knapsack_sharing_problem"}, {"score": 0.0041136473765874815, "phrase": "exactly_the_knapsack_sharing_problem"}, {"score": 0.003802135020791801, "phrase": "dynamic_programming"}, {"score": 0.0036553070575015344, "phrase": "original_problem"}, {"score": 0.0032054891061528896, "phrase": "knapsack_problems"}, {"score": 0.002962543869356265, "phrase": "correlated_and_uncorrelated_instances"}, {"score": 0.0027741761880779535, "phrase": "computational_results"}, {"score": 0.002464709648714996, "phrase": "optimal_solution"}, {"score": 0.0024007585788965655, "phrase": "large_instances"}, {"score": 0.0023384629381463054, "phrase": "reasonable_computing_time"}, {"score": 0.0022777800735119405, "phrase": "low_memory_occupancy"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Knapsack sharing problem", " Combinatorial optimization", " Max-min programming", " Dynamic programming"], "paper_abstract": "In this paper, we propose a method to solve exactly the knapsack sharing problem (KSP) by using dynamic programming. The original problem (KSP) is decomposed into a set of knapsack problems. Our method is tested on correlated and uncorrelated instances from the literature. Computational results show that our method is able to find an optimal solution of large instances within reasonable computing time and low memory occupancy. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "A dynamic programming method with lists for the knapsack sharing problem", "paper_id": "WOS:000295758700004"}