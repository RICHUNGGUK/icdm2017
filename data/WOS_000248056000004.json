{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.004658426838467567, "phrase": "design_principle"}, {"score": 0.004597244847332915, "phrase": "cyclic_dependencies"}, {"score": 0.004274766964161756, "phrase": "quality_attributes"}, {"score": 0.0037450707321601963, "phrase": "real_object-oriented_systems"}, {"score": 0.0035519826240477444, "phrase": "first_significant_empirical_study"}, {"score": 0.0033465923623290034, "phrase": "closed-source_java_applications"}, {"score": 0.0025340874787959195, "phrase": "intrinsic_interdependencies"}, {"score": 0.00250073564820402, "phrase": "particular_classes"}, {"score": 0.0021049977753042253, "phrase": "minimum_edge_feedback_set"}], "paper_keywords": ["dependency cycles", " Java", " software corpus", " program analysis", " object-oriented design"], "paper_abstract": "Advocates of the design principle avoid cyclic dependencies among modules have argued that cycles are detrimental to software quality attributes such as understandability, testability, reusability, buildability and maintainability, yet folklore suggests such cycles are common in real object-oriented systems. In this paper we present the first significant empirical study of cycles among the classes of 78 open- and closed-source Java applications. We find that, of the applications comprising enough classes to support such a cycle, about 45% have a cycle involving at least 100 classes and around 10% have a cycle involving at least 1,000 classes. We present further empirical evidence to support the contention these cycles are not due to intrinsic interdependencies between particular classes in a domain. Finally, we attempt to gauge the strength of connection among the classes in a cycle using the concept of a minimum edge feedback set.", "paper_title": "An empirical study of cycles among classes in Java", "paper_id": "WOS:000248056000004"}