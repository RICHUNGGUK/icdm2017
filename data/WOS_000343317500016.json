{"auto_keywords": [{"score": 0.037075550342064625, "phrase": "execution_time"}, {"score": 0.034022209837492504, "phrase": "execution_offloading"}, {"score": 0.00481495049065317, "phrase": "minimize_state_transfer"}, {"score": 0.004747997855358171, "phrase": "dynamic_execution_offloading"}, {"score": 0.004703878334423852, "phrase": "mobile_cloud_computing"}, {"score": 0.004552648949390462, "phrase": "increasing_demand"}, {"score": 0.004510336430422002, "phrase": "high_performance"}, {"score": 0.004426882270402403, "phrase": "recent_studies"}, {"score": 0.004385733482617193, "phrase": "mobile_cloud_computing_techniques"}, {"score": 0.004224911726496726, "phrase": "adjacent_powerful_cloud_servers"}, {"score": 0.003994624397219346, "phrase": "execution_offloading_schemes"}, {"score": 0.0035542408902458677, "phrase": "complex_analysis"}, {"score": 0.0034884152484429207, "phrase": "process_state_transfer"}, {"score": 0.0033447157263095223, "phrase": "transfer_cost"}, {"score": 0.00329813918116714, "phrase": "deciding_factor"}, {"score": 0.0030604342671868836, "phrase": "total_size"}, {"score": 0.0030319482153908037, "phrase": "heap_objects"}, {"score": 0.0029343128039167185, "phrase": "previous_work"}, {"score": 0.0027100527874262446, "phrase": "novel_techniques"}, {"score": 0.0026722904884984348, "phrase": "compiler_code_analysis"}, {"score": 0.0026105159490849364, "phrase": "transferred_data_size"}, {"score": 0.002388487669097511, "phrase": "reduced_size"}, {"score": 0.002300734266971646, "phrase": "overall_effectiveness"}, {"score": 0.0021049977753042253, "phrase": "energy_consumption"}], "paper_keywords": ["Mobile computing", " compilers", " cloud computing", " code analysis", " smartphone", " execution offloading"], "paper_abstract": "In order to meet the increasing demand for high performance in smartphones, recent studies suggested mobile cloud computing techniques that aim to connect the phones to adjacent powerful cloud servers to throw their computational burden to the servers. These techniques often employ execution offloading schemes that migrate a process between machines during its execution. In execution offloading, code regions to be executed on the server are decided statically or dynamically based on the complex analysis on execution time and process state transfer costs of every region. Expectedly, the transfer cost is a deciding factor for the success of execution offloading. According to our analysis, it is dominated by the total size of heap objects transferred over the network. But previous work did not try hard to minimize this size. Thus in this paper, we introduce novel techniques based on compiler code analysis that effectively reduce the transferred data size by transferring only the essential heap objects and the stack frames actually referenced in the server. The experiments exhibit that the reduced size positively influences not only the transfer time itself but also the overall effectiveness of execution offloading, and ultimately, improves the performance of our mobile cloud computing significantly in terms of execution time and energy consumption.", "paper_title": "Techniques to Minimize State Transfer Costs for Dynamic Execution Offloading in Mobile Cloud Computing", "paper_id": "WOS:000343317500016"}