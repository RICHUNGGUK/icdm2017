{"auto_keywords": [{"score": 0.03979764938681396, "phrase": "state-action_pairs"}, {"score": 0.023244240790432077, "phrase": "gaussian"}, {"score": 0.010464840002564913, "phrase": "relational_reinforcement_learning"}, {"score": 0.006837789186990486, "phrase": "gaussian_processes"}, {"score": 0.0066482613202208185, "phrase": "graph_kernels"}, {"score": 0.004703267159825335, "phrase": "rrl"}, {"score": 0.004637478829869904, "phrase": "relational_reinforcement_learning_system"}, {"score": 0.004487541157100498, "phrase": "relational_state-action_spaces"}, {"score": 0.004123781267600542, "phrase": "natural_representation"}, {"score": 0.003916098498242888, "phrase": "learning_algorithm"}, {"score": 0.00348202932445197, "phrase": "relational_representation"}, {"score": 0.0030525578912808647, "phrase": "relational_setting"}, {"score": 0.002967634471075658, "phrase": "covariance_function"}, {"score": 0.0028986672783671147, "phrase": "standard_prediction_mechanism"}, {"score": 0.0028312983170567948, "phrase": "matrix_inversion"}, {"score": 0.0027395968397212053, "phrase": "kernel_matrix"}, {"score": 0.0027139447110929586, "phrase": "low_rank"}, {"score": 0.0025409639091476363, "phrase": "better_and_more_stable_performance"}, {"score": 0.0024014759148123736, "phrase": "blocks_world"}, {"score": 0.0023566987138026285, "phrase": "tetris_game"}, {"score": 0.0021857667493036786, "phrase": "regression_trees"}, {"score": 0.0021551222226685648, "phrase": "based_regression"}, {"score": 0.0021249064184347658, "phrase": "generalization_algorithm"}, {"score": 0.0021049977753042253, "phrase": "rrl."}], "paper_keywords": ["reinforcement learning", " relational learning", " graph kernels", " Gaussian processes"], "paper_abstract": "RRL is a relational reinforcement learning system based on Q-learning in relational state-action spaces. It aims to enable agents to learn how to act in an environment that has no natural representation as a tuple of constants. For relational reinforcement learning, the learning algorithm used to approximate the mapping between state-action pairs and their so called Q(uality)-value has to be very reliable, and it has to be able to handle the relational representation of state-action pairs. In this paper we investigate the use of Gaussian processes to approximate the Q-values of state-action pairs. In order to employ Gaussian processes in a relational setting we propose graph kernels as a covariance function between state-action pairs. The standard prediction mechanism for Gaussian processes requires a matrix inversion which can become unstable when the kernel matrix has low rank. These instabilities can be avoided by employing QR-factorization. This leads to better and more stable performance of the algorithm and a more efficient incremental update mechanism. Experiments conducted in the blocks world and with the Tetris game show that Gaussian processes with graph kernels can compete with, and often improve on, regression trees and instance based regression as a generalization algorithm for RRL.", "paper_title": "Graph kernels and Gaussian processes for relational reinforcement learning", "paper_id": "WOS:000240021500005"}