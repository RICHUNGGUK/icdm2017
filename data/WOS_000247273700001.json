{"auto_keywords": [{"score": 0.03166407174619395, "phrase": "abstract_interpretations"}, {"score": 0.014213068569518362, "phrase": "conservative_approximation"}, {"score": 0.010612387000973441, "phrase": "heterogeneous_systems"}, {"score": 0.006246102018205313, "phrase": "conservative_approximations"}, {"score": 0.0047787596516662, "phrase": "embedded_systems"}, {"score": 0.00474283953918251, "phrase": "electronic_devices"}, {"score": 0.0046018264570209765, "phrase": "real_environment"}, {"score": 0.004171730509424374, "phrase": "embedded_system"}, {"score": 0.00409372989087314, "phrase": "different_notations"}, {"score": 0.004062937864702115, "phrase": "different_techniques"}, {"score": 0.0033893426032054366, "phrase": "different_classes"}, {"score": 0.003214730261140886, "phrase": "model's_refinement_relation"}, {"score": 0.0028058141911641225, "phrase": "refinement_verification_results"}, {"score": 0.0027428939498108746, "phrase": "concrete_model"}, {"score": 0.0027119634978446895, "phrase": "false_positives"}, {"score": 0.002572158343938064, "phrase": "necessary_and_sufficient_conditions"}, {"score": 0.002120982646893519, "phrase": "continuous_time"}, {"score": 0.0021049977753042253, "phrase": "discrete_time_models"}], "paper_keywords": ["refinement", " preserving", " approximation", " abstraction", " verification", " heterogeneous", " reuse", " polymorphism", " model of computation", " Galois connection", " abstract interpretation", " conservative approximation", " continuous time", " discrete time", " refinement", " concretization"], "paper_abstract": "Embedded systems are electronic devices that function in the context of a real environment, by sensing and reacting to a set of stimuli. Because of their close interaction with the environment, and to simplify their design, different parts of an embedded system are best described using different notations and different techniques. In this case, we say that the system is heterogeneous. We informally refer to the notation and the rules that are used to specify and verify the elements of heterogeneous systems and their collective behavior as a model of computation. In this paper, we consider different classes of relationships between models of computation and discuss their preservation properties with respect to the model's refinement relation and composition operator. In particular, we focus on abstraction and refinement relationships in the form of abstract interpretations and introduce the notion of conservative approximation. We show that, unlike abstract interpretations, conservative approximations preserve refinement verification results from an abstract to a concrete model while avoiding false positives. We also characterize the relationship between abstract interpretations and conservative approximations, and derive necessary and sufficient conditions to obtain a conservative approximation from a pair of abstract interpretations. In addition, we use the inverse of a conservative approximation to identify components that can be used indifferently in several models, thus enabling reuse across models of computation. The concepts described in this paper are illustrated with examples from continuous time and discrete time models of computation.", "paper_title": "Refinement preserving approximations for the design and verification of heterogeneous systems", "paper_id": "WOS:000247273700001"}