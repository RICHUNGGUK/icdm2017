{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "kernighan-lin_heuristic"}, {"score": 0.004140924670517666, "phrase": "kernighan-lin_algorithm"}, {"score": 0.003945754887845885, "phrase": "circuit_partitioning"}, {"score": 0.003626000977962191, "phrase": "numerous_improvements"}, {"score": 0.0034135407979996673, "phrase": "original_algorithm"}, {"score": 0.002830617996609902, "phrase": "heuristic_work"}, {"score": 0.0025235718883452564, "phrase": "problem_formulation"}, {"score": 0.0023470051993423483, "phrase": "efficient_implementations"}, {"score": 0.0022497569011987587, "phrase": "appropriate_data_structures"}, {"score": 0.0021049977753042253, "phrase": "numerous_empirical_test_results"}], "paper_keywords": ["Kernighan/Lin heuristic", " Fiduccia/Mattheyses heuristic", " hardware/software partitioning", " hardware/software co-design"], "paper_abstract": "In recent years, several heuristics have been proposed for the hardware/software partitioning problem. One of the most promising directions is the adaptation of the Kernighan-Lin algorithm. The Kernighan-Lin heuristic was originally developed for circuit partitioning, but it has been adapted to other domains as well. Moreover, numerous improvements have been suggested so that now several variants of the original algorithm exist. The aim of this paper is to systematically evaluate the possibilities of applying the Kernighan-Lin heuristic to hardware/software partitioning. It is investigated in detail which versions of the heuristic work well in this context. Since hardware/software partitioning also has several formulations, it is also discussed how the problem formulation affects the applicability of this heuristic. Furthermore, possibilities of efficient implementations of the algorithm-by using appropriate data structures-are also presented. These investigations are accompanied by numerous empirical test results.", "paper_title": "Evaluating the Kernighan-Lin heuristic for hardware/software partitioning", "paper_id": "WOS:000255024900010"}