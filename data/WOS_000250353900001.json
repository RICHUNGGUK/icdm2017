{"auto_keywords": [{"score": 0.04858132305104682, "phrase": "flash_memory"}, {"score": 0.027084146457518735, "phrase": "previous_ftl_algorithms"}, {"score": 0.00481495049065317, "phrase": "block_erasures"}, {"score": 0.0044826811976193485, "phrase": "embedded_applications"}, {"score": 0.004342430078306461, "phrase": "strong_points"}, {"score": 0.003503497128638102, "phrase": "software_layer"}, {"score": 0.0032355864829403413, "phrase": "main_functionality"}, {"score": 0.003184513338307259, "phrase": "ftl"}, {"score": 0.0030847461428168614, "phrase": "logical_addresses"}, {"score": 0.002964415652865295, "phrase": "physical_addresses"}, {"score": 0.0028037753646260937, "phrase": "new_ftl_algorithm"}, {"score": 0.0027594936602962075, "phrase": "state_transition"}, {"score": 0.0027159094186967247, "phrase": "fast_flash_translation_layer"}, {"score": 0.002468450551616404, "phrase": "higher_performance"}, {"score": 0.0023346234464901978, "phrase": "performance_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["flash memory", " embedded system", " file system"], "paper_abstract": "Recently, flash memory is widely used in embedded applications since it has strong points: non-volatility, fast access speed, shock resistance, and low power consumption. However, due to its hardware characteristics, it requires a software layer called flash translation layer (FTL). The main functionality of FTL is to convert logical addresses from the host to physical addresses of flash memory. We propose a new FTL algorithm called state transition applied fast flash translation layer (STAFF). Compared to the previous FTL algorithms, STAFF shows higher performance and requires less memory. We provide performance results based on our implementation of STAFF and previous FTL algorithms. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "STAFF: A flash driver algorithm minimizing block erasures", "paper_id": "WOS:000250353900001"}