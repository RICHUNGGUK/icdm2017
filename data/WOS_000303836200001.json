{"auto_keywords": [{"score": 0.04499348387455104, "phrase": "cost_functions"}, {"score": 0.01563076864261439, "phrase": "weighted_constraint_satisfaction"}, {"score": 0.01270343950184826, "phrase": "ac"}, {"score": 0.010465216180607596, "phrase": "hard_global_constraints"}, {"score": 0.00481495049065317, "phrase": "flow-based_projection-safe_global_cost_functions"}, {"score": 0.004507485711694584, "phrase": "minimum_cost"}, {"score": 0.004183393072178239, "phrase": "different_combinations"}, {"score": 0.004159446063902181, "phrase": "variable_assignments"}, {"score": 0.004135635566256163, "phrase": "typical_solution_methods"}, {"score": 0.004111960807556655, "phrase": "weighted_constraint_satisfaction_problems"}, {"score": 0.004030157055463817, "phrase": "branch-and-bound_search"}, {"score": 0.003916098498242888, "phrase": "powerful_consistency_techniques"}, {"score": 0.0037726162825149666, "phrase": "hidden_cost_information"}, {"score": 0.0035722806911457545, "phrase": "binary_and_ternary_cost_functions"}, {"score": 0.0035213462189102713, "phrase": "table_form"}, {"score": 0.0033631691048565324, "phrase": "efficient_representation_scheme"}, {"score": 0.003277327351139926, "phrase": "consistency_techniques"}, {"score": 0.0032585499655442404, "phrase": "also_high_arity_cost_functions"}, {"score": 0.003175370009931047, "phrase": "classical_constraint_satisfaction"}, {"score": 0.0031210959920028357, "phrase": "global_cost_functions"}, {"score": 0.00307657476125683, "phrase": "flow_networks"}, {"score": 0.0030414140732789186, "phrase": "minimum_cost_flow_algorithm"}, {"score": 0.002980844136206734, "phrase": "minimum_costs"}, {"score": 0.0029467742734417255, "phrase": "polynomial_time"}, {"score": 0.00290473242917264, "phrase": "naive_adoption"}, {"score": 0.002879794950644701, "phrase": "flow-based_algorithmic_method"}, {"score": 0.002806256131739047, "phrase": "stronger_form"}, {"score": 0.002790170184447136, "phrase": "circle_divide-inverse_consistency"}, {"score": 0.002687829620652214, "phrase": "cost_projections"}, {"score": 0.0026494723416072316, "phrase": "generalized_versions"}, {"score": 0.0026116612097043927, "phrase": "fdac"}, {"score": 0.0025596276616952516, "phrase": "similar_generalization"}, {"score": 0.0025376454089004376, "phrase": "stronger_edac"}, {"score": 0.002472822097373027, "phrase": "oscillation_problem"}, {"score": 0.0024515836867112493, "phrase": "edac"}, {"score": 0.0023548511815224098, "phrase": "weak_version"}, {"score": 0.002301295044886946, "phrase": "weak_edgac"}, {"score": 0.0022815262950738814, "phrase": "non-binary_cost_functions"}, {"score": 0.002236055625099805, "phrase": "soft_variants"}, {"score": 0.0021049977753042253, "phrase": "traditional_constraint_optimization_approach"}], "paper_keywords": [""], "paper_abstract": "Many combinatorial problems deal with preferences and violations, the goal of which is to find solutions with the minimum cost. Weighted constraint satisfaction is a framework for modeling such problems, which consists of a set of cost functions to measure the degree of violation or preferences of different combinations of variable assignments. Typical solution methods for weighted constraint satisfaction problems (WCSPs) are based on branch-and-bound search, which are made practical through the use of powerful consistency techniques such as AC*, FDAC*, EDAC* to deduce hidden cost information and value pruning during search. These techniques, however, are designed to be efficient only on binary and ternary cost functions which are represented in table form. In tackling many real-life problems, high arity (or global) cost functions are required. We investigate efficient representation scheme and algorithms to bring the benefits of the consistency techniques to also high arity cost functions, which are often derived from hard global constraints from classical constraint satisfaction. The literature suggests some global cost functions can be represented as flow networks, and the minimum cost flow algorithm can be used to compute the minimum costs of such networks in polynomial time. We show that naive adoption of this flow-based algorithmic method for global cost functions can result in a stronger form of circle divide-inverse consistency. We further show how the method can be modified to handle cost projections and extensions to maintain generalized versions of AC* and FDAC* for cost functions with more than two variables. Similar generalization for the stronger EDAC* is less straightforward. We reveal the oscillation problem when enforcing EDAC* on cost functions sharing more than one variable. To avoid oscillation, we propose a weak version of EDAC* and generalize it to weak EDGAC* for non-binary cost functions. Using various benchmarks involving the soft variants of hard global constraints ALLDIFFERENT, GCC, SAME, and REGULAR, empirical results demonstrate that our proposal gives improvements of up to an order of magnitude when compared with the traditional constraint optimization approach, both in terms of time and pruning.", "paper_title": "Consistency Techniques for Flow-Based Projection-Safe Global Cost Functions in Weighted Constraint Satisfaction", "paper_id": "WOS:000303836200001"}