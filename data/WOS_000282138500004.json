{"auto_keywords": [{"score": 0.028930494932271376, "phrase": "coq"}, {"score": 0.00481495049065317, "phrase": "dependently_typed_functional_programming"}, {"score": 0.004709567162738894, "phrase": "dependently_typed_functional_programs"}, {"score": 0.004606479650820579, "phrase": "non-trivial_program_properties"}, {"score": 0.00447251540886613, "phrase": "current_systems"}, {"score": 0.004310501708408856, "phrase": "proof_automation"}, {"score": 0.004185108816866677, "phrase": "proof_patterns"}, {"score": 0.004003798249233137, "phrase": "dependent_types"}, {"score": 0.003353521531649663, "phrase": "nonlinear_arithmetic_properties"}, {"score": 0.003161065111494053, "phrase": "rippling_heuristic"}, {"score": 0.003069006373093756, "phrase": "inductive_and_non-inductive_proofs"}, {"score": 0.0026867260506696455, "phrase": "practical_examples"}, {"score": 0.0026472970609754095, "phrase": "dependently_typed_programs"}, {"score": 0.002570162055835289, "phrase": "useful_program_properties"}, {"score": 0.0021363670305843403, "phrase": "user-defined_functions"}, {"score": 0.0021049977753042253, "phrase": "inductive_data_types"}], "paper_keywords": ["Dependent types", " rippling", " generalisation", " automated theorem proving", " Coq"], "paper_abstract": "Writing dependently typed functional programs that capture non-trivial program properties is difficult in current systems due to lack of proof automation. We identify proof patterns that occur when programming with dependent types and detail how automating such patterns allow us to work more comfortably with types that capture, for example, membership, ordering and nonlinear arithmetic properties. We describe the role of the rippling heuristic, both for inductive and non-inductive proofs, and generalisation in providing such automation. We then discuss an implementation of our ideas in Coq with practical examples of dependently typed programs, that capture useful program properties, which can be verified automatically. We demonstrate that our proof automation is generic in that it can provide support for working with theorems involving user-defined functions and inductive data types.", "paper_title": "Automation for Dependently Typed Functional Programming", "paper_id": "WOS:000282138500004"}