{"auto_keywords": [{"score": 0.05007716658853512, "phrase": "different_profiles"}, {"score": 0.04962778692335991, "phrase": "regression_test_case_reduction"}, {"score": 0.04765248383287824, "phrase": "test_cases"}, {"score": 0.041405795671148986, "phrase": "execution_profiles"}, {"score": 0.030336914577021784, "phrase": "fcs"}, {"score": 0.004528301408585875, "phrase": "high-fault_detection_capability"}, {"score": 0.004401794742140806, "phrase": "code-level_regression_testing"}, {"score": 0.0038930368103015467, "phrase": "previous_studies"}, {"score": 0.003784209997115174, "phrase": "binary_or_numeric_vectors"}, {"score": 0.0037309384824565695, "phrase": "vector_model"}, {"score": 0.0033308077968426937, "phrase": "structural_information"}, {"score": 0.003299460925313939, "phrase": "function_calls"}, {"score": 0.0032529910932231924, "phrase": "vector-based_methods"}, {"score": 0.0031769866037536045, "phrase": "satisfying_results"}, {"score": 0.0030446120560494155, "phrase": "cluster_analysis"}, {"score": 0.002987557906013826, "phrase": "structural_profiles"}, {"score": 0.002822712709335093, "phrase": "function_call_tree"}, {"score": 0.0027437235598539904, "phrase": "empirical_studies"}, {"score": 0.002717886783819971, "phrase": "five_medium-sized_programs"}, {"score": 0.002437645786158106, "phrase": "fault_detection_effectiveness"}, {"score": 0.002281376328251423, "phrase": "optimal_profile"}, {"score": 0.002155412043665635, "phrase": "additional_branch_coverage_reduction_technique"}, {"score": 0.0021049977753042253, "phrase": "detection_effectiveness"}], "paper_keywords": ["program testing", " regression analysis", " vectors", " regression test case reduction", " code-level regression testing", " cluster analysis", " binary vector", " numeric vector", " structural profile", " function execution sequence", " function call sequence", " function call tree", " call relations", " fault detection", " cost-effectiveness", " branch coverage reduction technique"], "paper_abstract": "Determining how to select a subset of test cases with high-fault detection capability becomes a key issue in code-level regression testing. Cluster analysis has been proposed to deal with this issue. It partitions test cases into clusters based on the similarity of execution profiles. In previous studies, execution profiles were represented as binary or numeric vectors. The vector model only considers the number of times that a function or statement is executed. However, it ignores sequential, the relations and structural information between function calls. Therefore vector-based methods do not always generate satisfying results. In this study, the authors presented cluster analysis of three different types of structural profiles, that is, function execution sequence, function call sequence (FCS) and function call tree. They designed and conducted empirical studies on five medium-sized programs to validate the effects of different profiles on regression test case reduction. Experimental results illustrate that sequential, call relations and structural information can aid to further improve fault detection effectiveness. In view of cost-effectiveness, FCS is regarded as to be the optimal profile. Furthermore, cluster analysis of FCSs is comparable to the additional branch coverage reduction technique with respect to fault detection effectiveness.", "paper_title": "Empirical study of the effects of different profiles on regression test case reduction", "paper_id": "WOS:000352738600001"}