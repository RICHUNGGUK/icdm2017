{"auto_keywords": [{"score": 0.043864090843223895, "phrase": "spm"}, {"score": 0.00481495049065317, "phrase": "based_scratchpad_memory_management"}, {"score": 0.004610058444728656, "phrase": "main_on-chip_memory"}, {"score": 0.004466519142879166, "phrase": "energy_consumption"}, {"score": 0.004396426822203258, "phrase": "chip_area"}, {"score": 0.004062057297453209, "phrase": "traditional_compiler-based_spm_allocation_methods"}, {"score": 0.0038890781420303916, "phrase": "frequently_used_data"}, {"score": 0.003812896124654341, "phrase": "data_transfer"}, {"score": 0.003738200814271716, "phrase": "compiling_stage"}, {"score": 0.0035931556794840027, "phrase": "access_pattern"}, {"score": 0.0034537189001268113, "phrase": "embedded_devices"}, {"score": 0.003372658906684677, "phrase": "novel_spm_management"}, {"score": 0.0033454535923602697, "phrase": "spm."}, {"score": 0.003319675107116333, "phrase": "embedded_application_portability"}, {"score": 0.0032161835102640372, "phrase": "novel_runtime_spm_management_method"}, {"score": 0.00316565009987584, "phrase": "core_working_set"}, {"score": 0.0030791137853734152, "phrase": "counting-based_cws_identification_algorithm"}, {"score": 0.0029949359231919307, "phrase": "data_blocks"}, {"score": 0.0029595657769783314, "phrase": "program's_working"}, {"score": 0.0029246121262946384, "phrase": "high_reference_frequency"}, {"score": 0.002867268370615848, "phrase": "promising_blocks"}, {"score": 0.0027668603377225564, "phrase": "spm_management_method"}, {"score": 0.002701877448139625, "phrase": "program's_dynamic_access_pattern"}, {"score": 0.002627985415362773, "phrase": "spm_allocation"}, {"score": 0.002566255769251419, "phrase": "spm_management"}, {"score": 0.002486193594641237, "phrase": "proposed_method"}, {"score": 0.002437425029824563, "phrase": "mmij"}, {"score": 0.002408623172021922, "phrase": "address_redirection"}, {"score": 0.0023896108055582615, "phrase": "data_transfers"}, {"score": 0.0023427323356117365, "phrase": "new_approach"}, {"score": 0.0022876877275935757, "phrase": "cache_system"}, {"score": 0.0022606512324475584, "phrase": "classical_profiling-driven_method"}, {"score": 0.0021901023885734, "phrase": "cws-based_spm_management_method"}, {"score": 0.002155656133617155, "phrase": "considerable_energy_reduction"}, {"score": 0.0021049977753042253, "phrase": "notable_degradation"}], "paper_keywords": ["embedded processor", " scratchpad memory management", " core working set"], "paper_abstract": "Many state-of-the-art embedded systems adopt scratchpad memory (SPM) as the main on-chip memory due to its advantages in terms of energy consumption and on-chip area. The cache is automatically managed by the hardware. while SPM is generally manipulated by the software. Traditional compiler-based SPM allocation methods commonly use static analysis and profiling knowledge to identify the frequently used data during runtime. The data transfer is determined at the compiling stage. However, these methods are fragile when the access pattern is unpredictable at compile time. Also, as embedded devices diversify, we expect a novel SPM management that can support embedded application portability over platforms. This paper proposes a novel runtime SPM management method based on the core working set (CWS) theory. A counting-based CWS identification algorithm is adopted to heuristically determine those data blocks in the program's working set with high reference frequency, and then these promising blocks are allocated to SPM. The novelty of this SPM management method lies in its dependence on the program's dynamic access pattern as the main cue to conduct SPM allocation at runtime, thus offloading SPM management from the compiler. Furthermore, the proposed method needs the assistance of MMIJ to complete address redirection after data transfers. We evaluate the new approach by comparing it with the cache system and a classical profiling-driven method, and the results indicate that the CWS-based SPM management method can achieve a considerable energy reduction compared with the two reference systems without notable degradation on performance.", "paper_title": "Core Working Set Based Scratchpad Memory Management", "paper_id": "WOS:000290125800014"}