{"auto_keywords": [{"score": 0.049593242225692294, "phrase": "ndp"}, {"score": 0.00481495049065317, "phrase": "nested_data-parallelism"}, {"score": 0.004669845451682529, "phrase": "language_mechanism"}, {"score": 0.004598933498016774, "phrase": "programming_irregular_parallel_applications"}, {"score": 0.004529093447865156, "phrase": "declarative_style"}, {"score": 0.004238452771031322, "phrase": "parallel_ml"}, {"score": 0.004007083686875716, "phrase": "manticore_system"}, {"score": 0.003906116922372891, "phrase": "main_challenges"}, {"score": 0.003769006950727621, "phrase": "parallel_decomposition"}, {"score": 0.003104201872147936, "phrase": "lazy_binary_splitting"}, {"score": 0.0029798924689472014, "phrase": "nested_parallel_loops"}, {"score": 0.002949598537993663, "phrase": "flat_arrays"}, {"score": 0.0027459678326877744, "phrase": "binary_trees"}, {"score": 0.0027041907335656782, "phrase": "parallel_arrays"}, {"score": 0.0026630475331025955, "phrase": "new_technique"}, {"score": 0.0025958582759972315, "phrase": "lazy_tree"}, {"score": 0.0024918548761791435, "phrase": "key_advantage"}, {"score": 0.002466510117718297, "phrase": "performance_robustness"}, {"score": 0.0023197517832705297, "phrase": "best_performance"}, {"score": 0.0021928902836049384, "phrase": "standard_ndp_operations"}, {"score": 0.0021705796895687864, "phrase": "lts_and_present_experimental_data"}, {"score": 0.0021050018506740035, "phrase": "lts"}], "paper_keywords": [""], "paper_abstract": "Nested data-parallelism (NDP) is a language mechanism that supports programming irregular parallel applications in a declarative style. In this paper, we describe the implementation of NDP in Parallel ML (PML), which is a part of the Manticore system. One of the main challenges of implementing NDP is managing the parallel decomposition of work. If we have too many small chunks of work, the overhead will be too high, but if we do not have enough chunks of work, processors will be idle. Recently, the technique of Lazy Binary Splitting was proposed to address this problem for nested parallel loops over flat arrays. We have adapted this technique to our implementation of NDP, which uses binary trees to represent parallel arrays. This new technique, which we call Lazy Tree Splitting (LTS), has the key advantage of performance robustness, i.e., it does not require tuning to get the best performance for each program. We describe the implementation of the standard NDP operations using LTS and present experimental data that demonstrate the scalability of LTS across a range of benchmarks.", "paper_title": "Lazy tree splitting", "paper_id": "WOS:000308672600002"}