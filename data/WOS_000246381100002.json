{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "product_measures"}, {"score": 0.004753194996637899, "phrase": "software_maintenance_activity"}, {"score": 0.004552981066668676, "phrase": "project-management_techniques"}, {"score": 0.0044369056710423065, "phrase": "commercial_object-oriented_software"}, {"score": 0.004342430078306461, "phrase": "significant_proportion"}, {"score": 0.0040708542958968605, "phrase": "lean_production_attempt"}, {"score": 0.003967021436047945, "phrase": "team_effort"}, {"score": 0.003916098498242888, "phrase": "pre-empt_issues"}, {"score": 0.0038326698261576023, "phrase": "early_detection"}, {"score": 0.003686935223424015, "phrase": "commercial_application"}, {"score": 0.0035620354052144656, "phrase": "one-year_period"}, {"score": 0.003531474887552889, "phrase": "software_product_measures"}, {"score": 0.003441352119167824, "phrase": "pareto_analysis"}, {"score": 0.003310447652300423, "phrase": "release_cycle"}, {"score": 0.003050166508545763, "phrase": "project_team"}, {"score": 0.0027982016314450717, "phrase": "procedural_code"}, {"score": 0.002726740692380339, "phrase": "object-oriented_code_base"}, {"score": 0.0026456667695073043, "phrase": "predictive_capability"}, {"score": 0.002566997205079849, "phrase": "software_issues"}, {"score": 0.002448061472257196, "phrase": "change_density"}, {"score": 0.002427035025924384, "phrase": "density_modified_measures"}, {"score": 0.0023650305205893353, "phrase": "revision_volume"}, {"score": 0.002226430168622392, "phrase": "cohesive_framework"}, {"score": 0.0021695394558562927, "phrase": "lean_management_philosophy"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software metrics", " code analysis", " Pareto analysis", " project management", " lean production"], "paper_abstract": "This paper is concerned with enhancing aspects of project-management techniques in relation to maintenance in commercial object-oriented software. Maintenance forms a significant proportion of the lifecycle of a product and consequently its costs. Techniques such as lean production attempt to reduce cost by focusing team effort and to pre-empt issues by the use of early detection and resolution strategies. This study involves a commercial application written in C++ and its evolution over a one-year period. Software product measures are used in conjunction with Pareto analysis to determine effective predictive class targeting in a release cycle. We assess the capability of the measures and consider how the results can be used by the project team. The study extends the work of others in this field in three ways. First, other studies have analysed procedural code, whereas we use an object-oriented code base. Second, most studies assess the predictive capability of measures against the number of software issues; we examine these factors, but uniquely test for change density using density modified measures and we also test for revision volume. Finally, we examine the implications of these results and offer a cohesive framework of recommendations placed within the lean management philosophy. Copyright (c) 2007 John Wiley & Sons, Ltd.", "paper_title": "The application of product measures in directing software maintenance activity", "paper_id": "WOS:000246381100002"}