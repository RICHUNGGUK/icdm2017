{"auto_keywords": [{"score": 0.0367698002611785, "phrase": "kure"}, {"score": 0.0313210843742285, "phrase": "datatype-generic_programming"}, {"score": 0.004727413900574584, "phrase": "haskell"}, {"score": 0.004577869668211548, "phrase": "custom_closed_universes"}, {"score": 0.004494570360108983, "phrase": "transformation_systems"}, {"score": 0.00443308765153716, "phrase": "significant_amount"}, {"score": 0.004392565073466714, "phrase": "engineering_effort"}, {"score": 0.004195418010131832, "phrase": "individual_transformations"}, {"score": 0.004157058883925715, "phrase": "specific_targets"}, {"score": 0.004025531820226182, "phrase": "strategic_programming_languages"}, {"score": 0.003988719758707836, "phrase": "general-purpose_infrastructure"}, {"score": 0.003809628721278519, "phrase": "transformation_system"}, {"score": 0.0037231102027070724, "phrase": "algebraic_data_structure"}, {"score": 0.0036052633308076933, "phrase": "typed_strategic_programming_language"}, {"score": 0.0035233696341819437, "phrase": "haskell-embedded_domain-specific_language"}, {"score": 0.0034118234596993836, "phrase": "typed_transformations"}, {"score": 0.00338060449446278, "phrase": "typed_data"}, {"score": 0.0033190180867511605, "phrase": "main_challenge"}, {"score": 0.0031991799574455555, "phrase": "generic_traversal_strategies"}, {"score": 0.003083655376444887, "phrase": "strategic_programming"}, {"score": 0.0030414140732789186, "phrase": "typed_setting"}, {"score": 0.00283870598459543, "phrase": "distinguishing_feature"}, {"score": 0.0028127163745564777, "phrase": "kure's_solution"}, {"score": 0.0023834640793589435, "phrase": "kure's_approach"}, {"score": 0.002329258721870127, "phrase": "generic_traversals"}, {"score": 0.0021049977753042253, "phrase": "strategic_and_datatype-generic_programming"}], "paper_keywords": [""], "paper_abstract": "When writing transformation systems, a significant amount of engineering effort goes into setting up the infrastructure needed to direct individual transformations to specific targets in the data being transformed. Strategic programming languages provide general-purpose infrastructure for this task, which the author of a transformation system can use for any algebraic data structure. The Kansas University Rewrite Engine (KURE) is a typed strategic programming language, implemented as a Haskell-embedded domain-specific language. KURE is designed to support typed transformations over typed data, and the main challenge is how to make such transformations compatible with generic traversal strategies that should operate over any type. Strategic programming in a typed setting has much in common with datatype-generic programming. Compared to other approaches to datatype-generic programming, the distinguishing feature of KURE's solution is that the user can configure the behaviour of traversals based on the location of each datum in the tree, beyond their behaviour being determined by the type of each datum. This article describes KURE's approach to assigning types to generic traversals, and the implementation of that approach. We also compare KURE, its design choices, and their consequences, with other approaches to strategic and datatype-generic programming.", "paper_title": "The Kansas University rewrite engine A Haskell-Embedded Strategic Programming Language with Custom Closed Universes", "paper_id": "WOS:000343204600002"}