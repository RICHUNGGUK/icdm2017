{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "numerous_applications"}, {"score": 0.004632597963417253, "phrase": "dynamic_soft_objects"}, {"score": 0.004388796812234033, "phrase": "current_techniques"}, {"score": 0.004190019394361629, "phrase": "visual_effects"}, {"score": 0.003562322256892338, "phrase": "new_acceleration_structure"}, {"score": 0.003374655868348244, "phrase": "efficient_raytracing"}, {"score": 0.0032972747743006603, "phrase": "large_number"}, {"score": 0.003051887221639784, "phrase": "adapted_sah"}, {"score": 0.002981885091155911, "phrase": "fast_greedy_algorithm"}, {"score": 0.0027813397260607487, "phrase": "interactive-to-real-time_framerates"}, {"score": 0.002554406040896888, "phrase": "complex_secondary_effects"}, {"score": 0.0024574537875026656, "phrase": "soft_shadows"}], "paper_keywords": [""], "paper_abstract": "Raytracing metaballs is a problem that has numerous applications in the rendering of dynamic soft objects such as fluids. However, current techniques are either limited in the visual effects that they can render or their performance drops as the number of metaballs and their density increase. We present a new acceleration structure based on BVH and kd-tree for efficient raytracing of a large number of metaballs. This structure is built from an adapted SAH using a fast greedy algorithm and allows the visualization of several hundreds of thousands metaballs at interactive-to-real-time framerates. Our method can handle arbitrary rays to simulate any complex secondary effects such as reflections or soft shadows, and is robust with respect to the density of metaballs. We achieve this performance thanks to a balanced CPU-GPU (using CUDA) implementation of the animation, structure creation, and rendering.", "paper_title": "Fitted BVH for Fast Raytracing of Metaballs", "paper_id": "WOS:000278182500004"}