{"auto_keywords": [{"score": 0.0393580690921062, "phrase": "search_nodes"}, {"score": 0.0047563776685277314, "phrase": "high-level_synthesis"}, {"score": 0.00461302961851157, "phrase": "in-place_search_algorithm"}, {"score": 0.004501453956464956, "phrase": "exact_solutions"}, {"score": 0.004392565073466714, "phrase": "constrained_scheduling_problem"}, {"score": 0.00405646687267772, "phrase": "underlying_scheduling_problem"}, {"score": 0.0037921662574137535, "phrase": "criterion_values"}, {"score": 0.0036777702949712457, "phrase": "partially_scheduled_data_flow_graphs"}, {"score": 0.0034804536625952596, "phrase": "nonpromising_search_space"}, {"score": 0.00327356326590461, "phrase": "existing_techniques"}, {"score": 0.0031747618267940155, "phrase": "existing_search-based_scheduling_techniques"}, {"score": 0.002985988377995789, "phrase": "search_depth"}, {"score": 0.0028084079003212947, "phrase": "search_tree"}, {"score": 0.0027572166867780275, "phrase": "low_space_complexity"}, {"score": 0.0026576091519087065, "phrase": "combination-generating_algorithm"}, {"score": 0.0022938068444116827, "phrase": "parent_nodes"}, {"score": 0.0022382002476510573, "phrase": "experimental_results"}, {"score": 0.002183938718432764, "phrase": "varying_resource_constraints"}, {"score": 0.0021049977753042253, "phrase": "proposed_algorithm"}], "paper_keywords": ["Design", " Experimentation", " Optimization", " Design automation", " exact scheduling", " optimal scheduling", " high-level synthesis", " resource-constrained scheduling"], "paper_abstract": "We propose an in-place search algorithm for computing the exact solutions to the resource constrained scheduling problem. This algorithm supports operation chaining, pipelining and multicycling in the underlying scheduling problem. Based on two lower-bound estimation mechanisms that are capable of predicting the criterion values of search nodes represented by partially scheduled data flow graphs, the proposed algorithm can effectively prune the nonpromising search space and finds the optimum usually several times faster than existing techniques. As opposed to existing search-based scheduling techniques whose space complexity is squared or exponential in the search depth, our approach requires only a constant storage space during the traversal of the search tree. The low space complexity is accomplished by using a combination-generating algorithm, which leads our approach to visit search nodes in such a way that each one is obtained by making only a small change to its sibling without keeping any parent nodes in memory. Experimental results on several well known benchmarks with varying resource constraints show the effectiveness of the proposed algorithm.", "paper_title": "An In-place Search Algorithm for the Resource Constrained Scheduling Problem during High-Level Synthesis", "paper_id": "WOS:000282762400002"}