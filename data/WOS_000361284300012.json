{"auto_keywords": [{"score": 0.03343200634823433, "phrase": "pemu"}, {"score": 0.007359531075829121, "phrase": "pin"}, {"score": 0.006849187239432336, "phrase": "os_kernels"}, {"score": 0.00494437663933059, "phrase": "semantic_gap"}, {"score": 0.00481495049065317, "phrase": "-vm_dynamic_binary_instrumentation_framework"}, {"score": 0.004634799977448855, "phrase": "widespread_adoption"}, {"score": 0.00459568664065473, "phrase": "dynamic_binary_instrumentation"}, {"score": 0.0045569292884888824, "phrase": "dbi"}, {"score": 0.004499334809770281, "phrase": "numerous_program_analyses"}, {"score": 0.004461359547152617, "phrase": "security_applications"}, {"score": 0.0044237033788643715, "phrase": "program_debugging"}, {"score": 0.004349337717774093, "phrase": "reverse_engineering"}, {"score": 0.004294381488413906, "phrase": "malware_analysis"}, {"score": 0.0039620308501590795, "phrase": "process_instrumentation"}, {"score": 0.0036090884921108086, "phrase": "analysis_routine"}, {"score": 0.003533347967582184, "phrase": "virtual_machine"}, {"score": 0.00350351210784932, "phrase": "vm"}, {"score": 0.003259702394241964, "phrase": "strong_isolation"}, {"score": 0.002870006736445581, "phrase": "user_level_processes"}, {"score": 0.0027978304423349246, "phrase": "-vm_instrumentation"}, {"score": 0.002391068320883259, "phrase": "pin."}, {"score": 0.0022626276288355432, "phrase": "source_code_modification"}, {"score": 0.0021049977753042253, "phrase": "reasonable_overhead"}], "paper_keywords": ["Design", " Security", " Dynamic binary instrumentation", " Introspection"], "paper_abstract": "Over the past 20 years, we have witnessed a widespread adoption of dynamic binary instrumentation (DBI) for numerous program analyses and security applications including program debugging, profiling, reverse engineering, and malware analysis. To date, there are many DBI platforms, and the most popular one is PIN, which provides various instrumentation APIs for process instrumentation. However, PIN does not support the instrumentation of OS kernels. In addition, the execution of the instrumentation and analysis routine is always inside the virtual machine (VM). Consequently, it cannot support any out-of-VM introspection that requires strong isolation. Therefore, this paper presents PEMU, a new open source DBI framework that is compatible with PIN-APIs, but supports out-of-VM introspection for both user level processes and OS kernels. Unlike in-VM instrumentation in which there is no semantic gap, for out-of-VM introspection we have to bridge the semantic gap and provide abstractions (i.e., APIs) for programmers. One important feature of PEMU is its API compatibility with PIN. As such, many PIN plugins are able to execute atop PEMU without any source code modification. We have implemented PEMU, and our experimental results with the SPEC 2006 benchmarks show that PEMU introduces reasonable overhead.", "paper_title": "PEMU: A PIN Highly Compatible Out-of-VM Dynamic Binary Instrumentation Framework", "paper_id": "WOS:000361284300012"}