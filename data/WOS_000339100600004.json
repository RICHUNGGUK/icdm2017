{"auto_keywords": [{"score": 0.04011643449782753, "phrase": "test_cases"}, {"score": 0.011376327107795091, "phrase": "test_suites"}, {"score": 0.005226261413050634, "phrase": "tca"}, {"score": 0.00481495049065317, "phrase": "software_systems"}, {"score": 0.004299910946753963, "phrase": "software_evolution"}, {"score": 0.004236908273106904, "phrase": "complex_and_time_consuming_activity"}, {"score": 0.003935420482629049, "phrase": "eight_scenarios"}, {"score": 0.0036914757355166966, "phrase": "new_ones"}, {"score": 0.0034118234596993836, "phrase": "existing_ones"}, {"score": 0.003016578139595346, "phrase": "java"}, {"score": 0.0028857130140890787, "phrase": "five_different_open_source_projects"}, {"score": 0.002428530921948425, "phrase": "broken_test_cases"}, {"score": 0.002346160830406661, "phrase": "large_amount"}, {"score": 0.0021789194955896124, "phrase": "art_techniques"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software testing", " test case evolution", " test case maintenance"], "paper_abstract": "Software systems evolve incrementally both during and after development, and many test cases become obsolete while software evolves. Updating test suites in the context of software evolution is a complex and time consuming activity. This article focuses on the problem of updating test suites automatically, and identifies eight scenarios that allow either to repair test cases or to use test cases to generate new ones, and proposes eight test evolution algorithms that automatically repair and generate test cases by adapting existing ones. This article presents a framework, TestCareAssistant (TCA), that implements the algorithms to support the evolution of test suites written in Java. The framework has been extensively evaluated on five different open source projects where it has been applied to repair 138 broken test cases, and to generate the test cases for 727 new classes and 2462 new methods. The results obtained with TCA indicate that the approach can successfully repair 90% of the broken test cases, create test cases that cover a large amount of code and complement the test cases that can be generated by state of the art techniques. Copyright (C) 2014 John Wiley & Sons, Ltd.", "paper_title": "Automatic test case evolution", "paper_id": "WOS:000339100600004"}