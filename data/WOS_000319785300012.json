{"auto_keywords": [{"score": 0.03290544586986293, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "amr_computations"}, {"score": 0.004706895428234964, "phrase": "gpu_system"}, {"score": 0.004664352260912174, "phrase": "adaptive_mesh_refinement"}, {"score": 0.004497973025639345, "phrase": "spatio-temporal_resolution"}, {"score": 0.004457309741979921, "phrase": "localized_mesh_regions"}, {"score": 0.004417012437860011, "phrase": "numerical_simulations"}, {"score": 0.004088807948906792, "phrase": "important_role"}, {"score": 0.003925004567341077, "phrase": "domain_structures"}, {"score": 0.0038194503801108324, "phrase": "output_data"}, {"score": 0.0037336520904376687, "phrase": "better_study"}, {"score": 0.003683097597914604, "phrase": "underlying_domain"}, {"score": 0.0033937776228549557, "phrase": "continuous_online_visualization"}, {"score": 0.00330246222643051, "phrase": "amr_applications"}, {"score": 0.002778385486855157, "phrase": "faster_rate"}, {"score": 0.0027159094186967247, "phrase": "asynchronous_executions"}, {"score": 0.0026790983342162887, "phrase": "visualization_steps"}, {"score": 0.0026548344763838213, "phrase": "fix-up_operations"}, {"score": 0.0023694065215394593, "phrase": "response_time"}, {"score": 0.002233301265743633, "phrase": "existing_strategy"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Adaptive Mesh Refinement", " GPGPU", " GAMER", " CPU-GPU asynchronism"], "paper_abstract": "Adaptive Mesh Refinement is a method which dynamically varies the spatio-temporal resolution of localized mesh regions in numerical simulations, based on the strength of the solution features. In-situ visualization plays an important role for analyzing the time evolving characteristics of the domain structures. Continuous visualization of the output data for various timesteps results in a better study of the underlying domain and the model used for simulating the domain. In this paper, we develop strategies for continuous online visualization of time evolving data for AMR applications executed on GPUs. We reorder the meshes for computations on the GPU based on the users input related to the subdomain that he wants to visualize. This makes the data available for visualization at a faster rate. We then perform asynchronous executions of the visualization steps and fix-up operations on the CPUs while the GPU advances the solution. By performing experiments on Tesla S1070 and Fermi C2070 clusters, we found that our strategies result in 60% improvement in response time and 16% improvement in the rate of visualization of frames over the existing strategy of performing fix-ups and visualization at the end of the timesteps. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Efficient asynchronous executions of AMR computations and visualization on a GPU system", "paper_id": "WOS:000319785300012"}