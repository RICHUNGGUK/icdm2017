{"auto_keywords": [{"score": 0.04963361405662032, "phrase": "llc"}, {"score": 0.04579934147576838, "phrase": "processor's_ability"}, {"score": 0.02589352838621193, "phrase": "lacs"}, {"score": 0.00481495049065317, "phrase": "effective_last-level_cache"}, {"score": 0.004447600571127578, "phrase": "overall_system_performance"}, {"score": 0.004304574865291508, "phrase": "llc_miss_penalty"}, {"score": 0.00379452936798156, "phrase": "miss_penalty"}, {"score": 0.003407839062159497, "phrase": "resultant_nonuniformity"}, {"score": 0.0033603864623013733, "phrase": "performance_impact"}, {"score": 0.0031919592786945126, "phrase": "new_cost-sensitive_cache_replacement_algorithm"}, {"score": 0.0029343128039167185, "phrase": "cache_blocks"}, {"score": 0.0023662411481713704, "phrase": "detailed_simulation_environment"}, {"score": 0.002154835714714195, "phrase": "shared_llc"}, {"score": 0.0021050023208991453, "phrase": "lru"}], "paper_keywords": ["Cache memories", " caches", " cache replacement algorithms", " cost-sensitive cache replacement", " shared caches"], "paper_abstract": "The design of an effective last-level cache (LLC) in general-and an effective cache replacement/partitioning algorithm in particular-is critical to the overall system performance. The processor's ability to hide the LLC miss penalty differs widely from one miss to another. The more instructions the processor manages to issue during the miss, the better it is capable of hiding the miss penalty and the lower the cost of that miss. This nonuniformity in the processor's ability to hide LLC miss latencies, and the resultant nonuniformity in the performance impact of LLC misses, opens up an opportunity for a new cost-sensitive cache replacement algorithm. This paper makes two key contributions. First, It proposes a framework for estimating the costs of cache blocks at run-time based on the processor's ability to (partially) hide their miss latencies. Second, It proposes a simple, low-hardware overhead, yet effective, cache replacement algorithm that is locality-aware and cost-sensitive (LACS). LACS is thoroughly evaluated using a detailed simulation environment. LACS speeds up 12 LLC-performance-constrained SPEC CPU2006 benchmarks by up to 51% and 11% on average. When evaluated using a dual/quad-core CMP with a shared LLC, LACS significantly outperforms LRU in terms of performance and fairness, achieving improvements up to 54%.", "paper_title": "LACS: A Locality-Aware Cost-Sensitive Cache Replacement Algorithm", "paper_id": "WOS:000341523800012"}