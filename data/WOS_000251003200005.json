{"auto_keywords": [{"score": 0.04963913874714362, "phrase": "divisible_loads"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_distributed_systems"}, {"score": 0.0047268728636719725, "phrase": "parallel_applications"}, {"score": 0.0046834372388970405, "phrase": "fine_granularity"}, {"score": 0.004640398886726948, "phrase": "negligible_data_dependencies"}, {"score": 0.004451546786101008, "phrase": "arbitrary_sizes"}, {"score": 0.004290112502811656, "phrase": "load_distribution_process"}, {"score": 0.0042506731642425275, "phrase": "considerable_communication_delays"}, {"score": 0.004172874316207784, "phrase": "processor_waiting_time"}, {"score": 0.0041154571996523505, "phrase": "computation_initialization_phase"}, {"score": 0.00398452530840582, "phrase": "multiple_small_installments"}, {"score": 0.003787108326100196, "phrase": "multi-installment_divisible_load_processing"}, {"score": 0.0036328561748082138, "phrase": "heterogeneous_systems"}, {"score": 0.0033739270918502285, "phrase": "computation_capabilities"}, {"score": 0.0031918759137610523, "phrase": "distributed_system"}, {"score": 0.0031333949463567554, "phrase": "arbitrarily_bad_solutions"}, {"score": 0.0030196181347744372, "phrase": "load_chunk_sizes"}, {"score": 0.002991823455621222, "phrase": "different_communication_and_computation_speeds"}, {"score": 0.0027784560880013886, "phrase": "genetic_search_method"}, {"score": 0.00274017282519193, "phrase": "running_times"}, {"score": 0.0024409345168575833, "phrase": "multi-installment_divisible_load_scheduling_problem"}, {"score": 0.0022772782536385717, "phrase": "optimum_solutions"}, {"score": 0.002204697943520258, "phrase": "growing_heterogeneity"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["scheduling and load balancing", " divisible loads", " multi-installment processing", " heterogeneous systems", " combinatorial optimization algorithms"], "paper_abstract": "Divisible loads are parallel applications with fine granularity and negligible data dependencies. Such computations can be divided into parts of arbitrary sizes and processed independently in parallel. The load distribution process incurs considerable communication delays. To reduce processor waiting time during the computation initialization phase, the load is distributed in multiple small installments rather than in one big chunk. In this paper we analyze multi-installment divisible load processing in heterogeneous distributed systems. Scheduling divisible loads in heterogeneous systems is hard because the sizes of the installments should be adjusted to the communication and computation capabilities of the system. We show that ignoring heterogeneity of the distributed system may result in arbitrarily bad solutions. Two algorithms are proposed to gear the load chunk sizes to different communication and computation speeds: an optimization branch-and-bound algorithm and a heuristic based on a genetic search method. The running times of both methods and the quality of the solutions are compared. Then, we use these algorithms to study the features of the multi-installment divisible load scheduling problem. We demonstrate that it has both combinatorial and algebraic nature, and that optimum solutions are harder to find with the growing heterogeneity of the system. Copyright (c) 2007 John Wiley & Sons, Ltd.", "paper_title": "Multi-installment divisible load processing in heterogeneous distributed systems", "paper_id": "WOS:000251003200005"}