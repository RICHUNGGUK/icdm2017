{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multiple_layers"}, {"score": 0.004562362497952548, "phrase": "dominant_practice"}, {"score": 0.00450130420152996, "phrase": "distributed_systems"}, {"score": 0.0043619799095455415, "phrase": "typical_pattern"}, {"score": 0.00415166680936294, "phrase": "data_aggregation"}, {"score": 0.0040050835356293365, "phrase": "amplified_delay"}, {"score": 0.003969250376327401, "phrase": "current_solutions"}, {"score": 0.0037272031155266556, "phrase": "layers_abstraction"}, {"score": 0.0034220655476652683, "phrase": "multithreaded_environment"}, {"score": 0.0032716011062067286, "phrase": "new_style"}, {"score": 0.0032423089921154503, "phrase": "inter-process_communication"}, {"score": 0.002923668065402269, "phrase": "traditional_definition"}, {"score": 0.0028076592725295646, "phrase": "multiple_times"}, {"score": 0.0027206133859493725, "phrase": "extended_remote_procedure"}, {"score": 0.0026962411675196213, "phrase": "framework_quatrain"}, {"score": 0.0026481480455339055, "phrase": "new_multireturn_paradigm"}, {"score": 0.0025202582748972122, "phrase": "multiple_returns"}, {"score": 0.0024311346712789553, "phrase": "new_synchronization_protocol"}, {"score": 0.0023770362063833903, "phrase": "multireturn-related_thread_coordination"}, {"score": 0.002292965705677312, "phrase": "quatrain"}, {"score": 0.0021821915946356168, "phrase": "response_time"}, {"score": 0.0021336208506092173, "phrase": "traditional_calling_paradigm"}, {"score": 0.0021049977753042253, "phrase": "realistic_environments"}], "paper_keywords": ["Distributed programming", " distributed systems", " data communications", " interfaces", " system integration and implementation", " asynchronous/synchronous operation", " client/server", " frameworks", " patterns", " procedures", " functions", " and subroutines"], "paper_abstract": "Composition of multiple layers (or components/services) has been a dominant practice in building distributed systems, meanwhile aggregation has become a typical pattern of data flows nowadays. However, the efficiency of data aggregation is usually impaired by multiple layers due to amplified delay. Current solutions based on data/execution flow optimization mostly counteract flexibility, reusability, and isolation of layers abstraction. Otherwise, programmers have to do much error-prone manual programming to optimize communication, and it is complicated in a multithreaded environment. To resolve the dilemma, we propose a new style of inter-process communication that not only optimizes data aggregation but also retains the advantages of layered (or component-based/service-oriented) architecture. Our approach relaxes the traditional definition of procedure and allows a procedure to return multiple times. Specifically, we implement an extended remote procedure calling framework Quatrain to support the new multireturn paradigm. In this paper, we establish the importance of multiple returns, introduce our very simple semantics, and present a new synchronization protocol that frees programmers from multireturn-related thread coordination. Several practical applications are constructed with Quatrain, and the evaluation shows an average of 56% reduction of response time, compared with the traditional calling paradigm, in realistic environments.", "paper_title": "Quatrain: Accelerating Data Aggregation between Multiple Layers", "paper_id": "WOS:000336672600013"}