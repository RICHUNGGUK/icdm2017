{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "dynamic_reconfiguration"}, {"score": 0.0047283116134926645, "phrase": "instruction-set_customization"}, {"score": 0.004518442937844318, "phrase": "efficient_framework"}, {"score": 0.004357245559948974, "phrase": "application-specific_custom_instructions"}, {"score": 0.003978866233891427, "phrase": "iterative_algorithm"}, {"score": 0.003907212558276185, "phrase": "temporal_and_spatial_partitioning"}, {"score": 0.003802135020791801, "phrase": "loop_kernels"}, {"score": 0.0036332251283046997, "phrase": "performance_gain"}, {"score": 0.00334780964309978, "phrase": "dynamic_reconfiguration_cost"}, {"score": 0.0031990183472675377, "phrase": "appropriate_custom_instructions"}, {"score": 0.0028422946420821075, "phrase": "temporal_partitioning_problem"}, {"score": 0.002765776659294382, "phrase": "k-way_graph"}, {"score": 0.0026427848602443267, "phrase": "dynamic_programming"}, {"score": 0.0026188490199688013, "phrase": "based_solution"}, {"score": 0.002502374576203785, "phrase": "spatial_partitioning"}, {"score": 0.00245724480030654, "phrase": "comprehensive_experimental_results"}], "paper_keywords": ["Customizable processors", " Instruction-set extensions", " Dynamic reconfiguration", " Temporal partitioning", " Runtime reconfiguration", " Custom instructions"], "paper_abstract": "We present an efficient framework for dynamic reconfiguration of application-specific custom instructions. A key component of this framework is an iterative algorithm for temporal and spatial partitioning of the loop kernels. Our algorithm maximizes the performance gain of an application while taking into consideration the dynamic reconfiguration cost. It selects the appropriate custom instructions for the loops and clubs them into one or more configurations. We model the temporal partitioning problem as a k-way graph partitioning problem. A dynamic programming based solution is used for the spatial partitioning. Comprehensive experimental results indicate that our iterative partitioning algorithm is highly scalable while producing optimal or near-optimal (99% of the optimal) performance gain.", "paper_title": "An efficient framework for dynamic reconfiguration of instruction-set customization", "paper_id": "WOS:000266240200008"}