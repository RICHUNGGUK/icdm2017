{"auto_keywords": [{"score": 0.04967710401179305, "phrase": "multicore_systems"}, {"score": 0.04657381885996476, "phrase": "public-key_cryptography"}, {"score": 0.00481495049065317, "phrase": "parallel_implementation_of_montgomery_multiplication"}, {"score": 0.004636836757291033, "phrase": "prototype"}, {"score": 0.004406994912939125, "phrase": "important_applications"}, {"score": 0.004351595642056769, "phrase": "rsa_algorithm"}, {"score": 0.004296889776409743, "phrase": "elliptic-curve_cryptography"}, {"score": 0.004207230913063179, "phrase": "digital_signature_standard"}, {"score": 0.004154332348800334, "phrase": "efficient_implementation"}, {"score": 0.004102096151528319, "phrase": "long-word-length_modular_multiplication"}, {"score": 0.0038996120252338556, "phrase": "strong_momentum"}, {"score": 0.0036759314172445934, "phrase": "parallel-software_implementation"}, {"score": 0.0036296886647898094, "phrase": "montgomery_multiplication"}, {"score": 0.0035091888798162176, "phrase": "proposed_scheme"}, {"score": 0.003378385493203297, "phrase": "balanced_way"}, {"score": 0.0030657684627749364, "phrase": "intercore_communication_overhead"}, {"score": 0.002914288956035066, "phrase": "high_performance"}, {"score": 0.0028654728453890426, "phrase": "different_number"}, {"score": 0.0026782279715171866, "phrase": "different_parameters"}, {"score": 0.002633355582628613, "phrase": "optimal_performance"}, {"score": 0.002556625752785268, "phrase": "prototype_multicore_architecture"}, {"score": 0.0025137856138000014, "phrase": "field_programmable_gate_array"}, {"score": 0.0024302416436559845, "phrase": "sequential_implementation"}, {"score": 0.002131857309586904, "phrase": "communication_latency"}], "paper_keywords": ["Montgomery multiplication", " public-key cryptography", " parallel programming", " tiled processor"], "paper_abstract": "The Montgomery Multiplication is one of the cornerstones of public-key cryptography, with important applications in the RSA algorithm, in Elliptic-Curve Cryptography, and in the Digital Signature Standard. The efficient implementation of this long-word-length modular multiplication is crucial for the performance of public-key cryptography. Along with the strong momentum of shifting from single-core to multicore systems, we present a parallel-software implementation of the Montgomery multiplication for multicore systems. Our comprehensive analysis shows that the proposed scheme, pSHS, partitions the task in a balanced way so that each core has the same amount of job to do. In addition, we also comprehensively analyze the impact of intercore communication overhead on the performance of pSHS. The analysis reveals that pSHS is high performance, scalable over different number of cores, and stable when the communication latency changes. The analysis also tells us how to set different parameters to achieve the optimal performance. We implemented pSHS on a prototype multicore architecture configured in a Field Programmable Gate Array (FPGA). Compared with the sequential implementation, pSHS accelerates 2,048-bit Montgomery multiplication by 1.97, 3.68, and 6.13 times on, respectively, two-core, four-core, and eight-core architectures with communication latency equal to 100 clock cycles.", "paper_title": "A Parallel Implementation of Montgomery Multiplication on Multicore Systems: Algorithm, Analysis, and Prototype", "paper_id": "WOS:000296235300003"}