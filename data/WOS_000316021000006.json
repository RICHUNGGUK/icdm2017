{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "constraint_solver"}, {"score": 0.014549807480251973, "phrase": "search_heuristics"}, {"score": 0.01165979385001917, "phrase": "search_combinators"}, {"score": 0.00470862827326028, "phrase": "essential_asset"}, {"score": 0.004630423009638876, "phrase": "combinatorial_problems"}, {"score": 0.004528156929805637, "phrase": "existing_infrastructure"}, {"score": 0.004306205029641728, "phrase": "modeling_capabilities"}, {"score": 0.004072275820209647, "phrase": "general-purpose_programming_language"}, {"score": 0.0037658881407605445, "phrase": "major_improvements"}, {"score": 0.0032747835779400212, "phrase": "conceptually_simple_modeling_language"}, {"score": 0.003011328068286321, "phrase": "efficient_implementation"}, {"score": 0.00269263690712392, "phrase": "application-tailored_search_strategies"}, {"score": 0.002531933388815139, "phrase": "rich_domain-specific_language"}, {"score": 0.0024620842899061614, "phrase": "modeling_search"}, {"score": 0.0023021895404322767, "phrase": "low_implementation_cost"}, {"score": 0.0021049977753042253, "phrase": "empirical_evaluation"}], "paper_keywords": ["Search heuristics", " Modeling language", " Modularity", " Implementation"], "paper_abstract": "The ability to model search in a constraint solver can be an essential asset for solving combinatorial problems. However, existing infrastructure for defining search heuristics is often inadequate. Either modeling capabilities are extremely limited or users are faced with a general-purpose programming language whose features are not tailored towards writing search heuristics. As a result, major improvements in performance may remain unexplored. This article introduces search combinators, a lightweight and solver-independent method that bridges the gap between a conceptually simple modeling language for search (high-level, functional and naturally compositional) and an efficient implementation (low-level, imperative and highly non-modular). By allowing the user to define application-tailored search strategies from a small set of primitives, search combinators effectively provide a rich domain-specific language (DSL) for modeling search to the user. Remarkably, this DSL comes at a low implementation cost to the developer of a constraint solver. The article discusses two modular implementation approaches and shows, by empirical evaluation, that search combinators can be implemented without overhead compared to a native, direct implementation in a constraint solver.", "paper_title": "Search combinators", "paper_id": "WOS:000316021000006"}