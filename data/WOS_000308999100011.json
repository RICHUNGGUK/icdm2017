{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "context_encoding"}, {"score": 0.004565007074039171, "phrase": "wide_range"}, {"score": 0.00436661740263741, "phrase": "event_logging"}, {"score": 0.004289686492089576, "phrase": "expensive_stack"}, {"score": 0.004158290806404304, "phrase": "resulting_contexts"}, {"score": 0.003995226376780718, "phrase": "call_sites"}, {"score": 0.003770869401884267, "phrase": "current_calling_context"}, {"score": 0.003574929398913029, "phrase": "acyclic_call_path"}, {"score": 0.003449972561293443, "phrase": "recursive_call_paths"}, {"score": 0.003389136094439662, "phrase": "acyclic_subsequences"}, {"score": 0.0032852337992126564, "phrase": "stack_depth"}, {"score": 0.0032416819339366712, "phrase": "safe_way"}, {"score": 0.0031422859551159506, "phrase": "calling_context"}, {"score": 0.0028366012006726896, "phrase": "encoding_and_stack_depth-based_identification"}, {"score": 0.0027495914857929584, "phrase": "different_contexts"}, {"score": 0.002689076130099546, "phrase": "different_ids"}, {"score": 0.0025042115651986332, "phrase": "negligible_overhead"}, {"score": 0.0023113506171584157, "phrase": "large_programs"}, {"score": 0.0021049977753042253, "phrase": "crash-based_failures"}], "paper_keywords": ["Calling context", " context sensitivity", " profiling", " path encoding", " calling context encoding", " call graph"], "paper_abstract": "Calling contexts (CCs) are very important for a wide range of applications such as profiling, debugging, and event logging. Most applications perform expensive stack walking to recover contexts. The resulting contexts are often explicitly represented as a sequence of call sites and hence are bulky. We propose a technique to encode the current calling context of any point during an execution. In particular, an acyclic call path is encoded into one number through only integer additions. Recursive call paths are divided into acyclic subsequences and encoded independently. We leverage stack depth in a safe way to optimize encoding: If a calling context can be safely and uniquely identified by its stack depth, we do not perform encoding. We propose an algorithm to seamlessly fuse encoding and stack depth-based identification. The algorithm is safe because different contexts are guaranteed to have different IDs. It also ensures contexts can be faithfully decoded. Our experiments show that our technique incurs negligible overhead (0-6.4 percent). For most medium-sized programs, it can encode all contexts with just one number. For large programs, we are able to encode most calling contexts to a few numbers. We also present our experience of applying context encoding to debugging crash-based failures.", "paper_title": "Precise Calling Context Encoding", "paper_id": "WOS:000308999100011"}