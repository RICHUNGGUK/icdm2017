{"auto_keywords": [{"score": 0.0475552118410291, "phrase": "multi-user_operations"}, {"score": 0.00481495049065317, "phrase": "temporal_workload-aware"}, {"score": 0.004721162131188487, "phrase": "social_networks"}, {"score": 0.004450568197899267, "phrase": "latest_tweets"}, {"score": 0.004073359218158693, "phrase": "replication_methodologies"}, {"score": 0.003993958025223994, "phrase": "underlying_systems"}, {"score": 0.003954837422946628, "phrase": "existing_solutions"}, {"score": 0.003916098498242888, "phrase": "data_distribution"}, {"score": 0.00376488621224566, "phrase": "graph-based_approaches"}, {"score": 0.0036914757355166966, "phrase": "multi-way_relations"}, {"score": 0.003496868378204657, "phrase": "novel_data"}, {"score": 0.003445591238183763, "phrase": "selective_replication_method"}, {"score": 0.003378385493203297, "phrase": "temporal_information"}, {"score": 0.0033452741392850523, "phrase": "prior_workloads"}, {"score": 0.003296212583539166, "phrase": "future_query_patterns"}, {"score": 0.0032160319265621285, "phrase": "social_network_structure"}, {"score": 0.002899965889623787, "phrase": "simultaneous_partitioning"}, {"score": 0.0027741761880779535, "phrase": "query_span"}, {"score": 0.0027334673433027086, "phrase": "load_balance"}, {"score": 0.0026933542552712033, "phrase": "load_constraints"}, {"score": 0.002551231163230566, "phrase": "cassandra_nosql_system"}, {"score": 0.0025137856138000014, "phrase": "selective_replication"}, {"score": 0.0024525907271610104, "phrase": "social_network_application"}, {"score": 0.0024168042064096075, "phrase": "twitter"}, {"score": 0.0022890371899188466, "phrase": "cloud_computing_environment"}, {"score": 0.0022113879114507577, "phrase": "developed_systems"}, {"score": 0.002157538586313944, "phrase": "proposed_method"}, {"score": 0.0021049977753042253, "phrase": "enhanced_graph-based_schemes"}], "paper_keywords": ["Cassandra", " social network partitioning", " selective replication", " replicated hypergraph partitioning", " twitter", " NoSQL"], "paper_abstract": "Most frequent and expensive queries in social networks involve multi-user operations such as requesting the latest tweets or news-feeds of friends. The performance of such queries are heavily dependent on the data partitioning and replication methodologies adopted by the underlying systems. Existing solutions for data distribution in these systems involve hash-or graph-based approaches that ignore the multi-way relations among data. In this work, we propose a novel data partitioning and selective replication method that utilizes the temporal information in prior workloads to predict future query patterns. Our method utilizes the social network structure and the temporality of the interactions among its users to construct a hypergraph that correctly models multi-user operations. It then performs simultaneous partitioning and replication of this hypergraph to reduce the query span while respecting load balance and I/O load constraints under replication. To test our model, we enhance the Cassandra NoSQL system to support selective replication and we implement a social network application (a Twitter clone) utilizing our enhanced Cassandra. We conduct experiments on a cloud computing environment (Amazon EC2) to test the developed systems. Comparison of the proposed method with hash-and enhanced graph-based schemes indicate that it significantly improves latency and throughput.", "paper_title": "Temporal Workload-Aware Replicated Partitioning for Social Networks", "paper_id": "WOS:000343607500018"}