{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "flexible_resampling_mechanism"}, {"score": 0.0469881015287906, "phrase": "particle_filters"}, {"score": 0.02768765667920818, "phrase": "processing_elements"}, {"score": 0.004751216062917875, "phrase": "high-speed_parallel_particle_filters"}, {"score": 0.004444921827311577, "phrase": "traditional_signal_processing_algorithms"}, {"score": 0.004186105377259855, "phrase": "joint_detection"}, {"score": 0.004075946554498088, "phrase": "wireless_communication"}, {"score": 0.003995226376780718, "phrase": "computer_vision"}, {"score": 0.0035197152758635344, "phrase": "real-time_requirements"}, {"score": 0.003381607100127276, "phrase": "efficient_resampling_architecture"}, {"score": 0.0033367819052051995, "phrase": "parallel_particle_filtering"}, {"score": 0.0032706520949775065, "phrase": "proposed_architecture"}, {"score": 0.0030799988391729464, "phrase": "parallel_resampling_operations"}, {"score": 0.0028052155436760528, "phrase": "possible_error"}, {"score": 0.0027495914857929584, "phrase": "finite_precision_quantization"}, {"score": 0.0026950674053179404, "phrase": "resampling_step"}, {"score": 0.0024875444192203485, "phrase": "implementation_bottleneck"}], "paper_keywords": [""], "paper_abstract": "There are many applications in which particle filters outperform traditional signal processing algorithms. Some of these applications include tracking, joint detection and estimation in wireless communication, and computer vision. However, particle filters are not used in practice for these applications mainly because they cannot satisfy real-time requirements. This paper presents an efficient resampling architecture for parallel particle filtering. The proposed architecture is flexible such that it supports various modes of parallel resampling operations with up to four processing elements. The resampling algorithm is developed in order to compensate for possible error caused by finite precision quantization in the resampling step. Communication between the processing elements after resampling is identified as an implementation bottleneck, and therefore, concurrent buffering is incorporated in order to speed up communication of particles among processing elements. The flexible resampling mechanism is implemented in 0.35 mu m CMOS process and its complexity and performance are analyzed.", "paper_title": "Design and implementation of flexible resampling mechanism for high-speed parallel particle filters", "paper_id": "WOS:000239323300003"}