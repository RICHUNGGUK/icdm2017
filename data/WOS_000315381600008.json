{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parameterised_multiparty_session_types."}, {"score": 0.004205940624913343, "phrase": "interaction_structure"}, {"score": 0.0038721890530859578, "phrase": "dependent_type_theory"}, {"score": 0.0038144050983900286, "phrase": "multiparty_sessions"}, {"score": 0.0033315236647127734, "phrase": "primitive_recursion_operator"}, {"score": 0.0032817813775647756, "phrase": "godel's_system_t"}, {"score": 0.0031845067058084583, "phrase": "wide_range"}, {"score": 0.003136952589428254, "phrase": "communication_patterns"}, {"score": 0.003066945490483524, "phrase": "type_checking"}, {"score": 0.002953711377604328, "phrase": "individual_distributed_processes"}, {"score": 0.0028877818105020434, "phrase": "parameterised_global_type"}, {"score": 0.0027811441123794427, "phrase": "generic_generator"}, {"score": 0.0026384167183586015, "phrase": "possible_end-point_types"}, {"score": 0.0024842242921857705, "phrase": "type-checking_algorithm"}, {"score": 0.0024287485834314027, "phrase": "full_system"}, {"score": 0.0023745087648471613, "phrase": "multiparty_session_types"}, {"score": 0.0023390219342052623, "phrase": "recursive_types"}, {"score": 0.00223570488212345, "phrase": "non-trivial_programming"}, {"score": 0.0021369416775353107, "phrase": "parallel_algorithms"}, {"score": 0.0021049977753042253, "phrase": "web_services_usecases"}], "paper_keywords": ["Session Types", " Dependent Types", " The Pi-Calculus", " Godel T", " Parallel Algorithms", " FFT", " Web services"], "paper_abstract": "For many application-level distributed protocols and parallel algorithms, the set of participants, the number of messages or the interaction structure are only known at run-time. This paper proposes a dependent type theory for multiparty sessions which can statically guarantee type-safe, deadlock-free multiparty interactions among processes whose specifications are parameterised by indices. We use the primitive recursion operator from Godel's System T to express a wide range of communication patterns while keeping type checking decidable. To type individual distributed processes, a parameterised global type is projected onto a generic generator which represents a class of all possible end-point types. We prove the termination of the type-checking algorithm in the full system with both multiparty session types and recursive types. We illustrate our type theory through non-trivial programming and verification examples taken from parallel algorithms and web services usecases.", "paper_title": "PARAMETERISED MULTIPARTY SESSION TYPES", "paper_id": "WOS:000315381600008"}