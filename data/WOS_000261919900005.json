{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "task_order"}, {"score": 0.016017939826855076, "phrase": "hard-first"}, {"score": 0.009662365320326423, "phrase": "maintenance_tasks"}, {"score": 0.004708056866527125, "phrase": "object-oriented_software"}, {"score": 0.00415166680936294, "phrase": "functional_correctness"}, {"score": 0.0037104876694493815, "phrase": "easiest_change_task"}, {"score": 0.00333097896868937, "phrase": "easier_tasks"}, {"score": 0.0031845067058084613, "phrase": "experimental_tasks"}, {"score": 0.003058179790439378, "phrase": "java_system"}, {"score": 0.00295008998986066, "phrase": "design_strategy"}, {"score": 0.002398529964696261, "phrase": "maintainability_tasks"}, {"score": 0.0023033100935570755, "phrase": "change_tasks"}, {"score": 0.002282667669149476, "phrase": "easy-first"}, {"score": 0.0021723899772112423, "phrase": "possible_explanation"}, {"score": 0.0021049977753042253, "phrase": "steeper_learning_curve"}], "paper_keywords": ["Object-oriented design", " Object-oriented programming", " Maintainability", " Maintenance planning", " Software maintenance", " Schedule and organizational issues"], "paper_abstract": "This paper presents results from a quasi-experiment that investigates how the sequence in which maintenance tasks are performed affects the time required to perform them and the functional correctness of the changes made. Specifically, the study compares how time required and correctness are affected by (1) starting with the easiest change task and progressively performing the more difficult tasks (Easy-First), versus (2) starting with the most difficult change task and progressively performing the easier tasks (Hard-First), In both cases, the experimental tasks were performed on two alternative types of design of a Java system to assess whether the choice of the design strategy moderates the effects of task order on effort and correctness. The results show that the time spent on making the changes is not affected significantly by the task order of the maintenance tasks, regardless of the type of design. However, the correctness of the maintainability tasks is significantly higher when the task order of the change tasks is Easy-First compared to Hard-First, again regardless of design. A possible explanation for the results is that a steeper learning curve (Hard-First) causes the programmer to create software that is less maintainable overall. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "The effect of task order on the maintainability of object-oriented software", "paper_id": "WOS:000261919900005"}