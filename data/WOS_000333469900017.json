{"auto_keywords": [{"score": 0.038221549515009653, "phrase": "memory_access"}, {"score": 0.03223276241340444, "phrase": "proposed_one"}, {"score": 0.02579053373109775, "phrase": "power_consumption"}, {"score": 0.00481495049065317, "phrase": "montgomery_modular_multiplication_architecture"}, {"score": 0.0047588556219929756, "phrase": "low-latency_and_low-memory_bandwidth_requirement"}, {"score": 0.004703467068447917, "phrase": "montgomery"}, {"score": 0.0045143706249204905, "phrase": "public-key_cryptosystems"}, {"score": 0.004282391936827106, "phrase": "data_dependency"}, {"score": 0.004232475065285966, "phrase": "conventional_word-based_algorithms"}, {"score": 0.0040385352882334235, "phrase": "current_words"}, {"score": 0.0038989120088094185, "phrase": "greatly_relaxed_data_dependency"}, {"score": 0.00376409764683147, "phrase": "novel_scheduling_scheme"}, {"score": 0.0035705347414368726, "phrase": "developed_scalable_architecture"}, {"score": 0.0035288860880035985, "phrase": "analytical_results"}, {"score": 0.003447035529485425, "phrase": "memory_bandwidth_requirement"}, {"score": 0.0033868916699805224, "phrase": "proposed_scalable_architecture"}, {"score": 0.0031938648476635225, "phrase": "conventional_scalable_architectures"}, {"score": 0.003101503914610488, "phrase": "word_size"}, {"score": 0.002941913249957503, "phrase": "exactly_one_cycle"}, {"score": 0.0027579362569638945, "phrase": "montgomery_modular_multiplication_algorithm"}, {"score": 0.0025854347094662247, "phrase": "related_work"}, {"score": 0.002555247330102505, "phrase": "experimental_results"}, {"score": 0.0023124457559811087, "phrase": "reduced_number"}, {"score": 0.0021049977753042253, "phrase": "scalable_architectures"}], "paper_keywords": ["Cryptosystems", " low-power design", " Montgomery modular multiplication", " scalable architecture", " VLSI"], "paper_abstract": "Montgomery modular multiplication is widely used in public-key cryptosystems. This work shows how to relax the data dependency in conventional word-based algorithms to maximize the possibility of reusing the current words of variables. With the greatly relaxed data dependency, we then proposed a novel scheduling scheme to alleviate the number of memory access in the developed scalable architecture. Analytical results show that the memory bandwidth requirement of the proposed scalable architecture is almost 1/(w - 1) times that of conventional scalable architectures, where w denotes word size. The proposed one also retains a latency of exactly one cycle between the operations of the same words in two consecutive iterations of the Montgomery modular multiplication algorithm when employing enough processing elements. Compared to the design in the related work, experimental results demonstrate that the proposed one achieves an almost 54 percent reduction in power consumption with no degradation in throughput. The reduced number of memory access not only leads to lower power consumption, but also facilitates the design of scalable architectures for any precision of operands.", "paper_title": "Scalable Montgomery Modular Multiplication Architecture with Low-Latency and Low-Memory Bandwidth Requirement", "paper_id": "WOS:000333469900017"}