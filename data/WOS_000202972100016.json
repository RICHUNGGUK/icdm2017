{"auto_keywords": [{"score": 0.033910962391840646, "phrase": "calling_context"}, {"score": 0.00481495049065317, "phrase": "context-sensitive_domain-independent_algorithm_composition"}, {"score": 0.004673290248999786, "phrase": "present-day_languages"}, {"score": 0.004596390584582711, "phrase": "domain-specific_knowledge"}, {"score": 0.004565984572487962, "phrase": "domain-specific_languages"}, {"score": 0.004402295697276237, "phrase": "language_features"}, {"score": 0.0043731680194078046, "phrase": "limited_portability"}, {"score": 0.004329835888760592, "phrase": "language's_semantics"}, {"score": 0.0041745773539728975, "phrase": "dsl_compiler"}, {"score": 0.0041195049121633956, "phrase": "domain-independent_ai_planner"}, {"score": 0.004024863549087511, "phrase": "language_feature"}, {"score": 0.0039323878878973284, "phrase": "common_dsl_problem"}, {"score": 0.003906357144047631, "phrase": "good_library_designers"}, {"score": 0.003728885511755734, "phrase": "call_sequences"}, {"score": 0.003704196857903231, "phrase": "novice_users"}, {"score": 0.00361906209437624, "phrase": "appropriate_sequence"}, {"score": 0.0034545974376846687, "phrase": "abstract_algorithm"}, {"score": 0.003319569552937513, "phrase": "aa_call"}, {"score": 0.003264872488939969, "phrase": "library_calls"}, {"score": 0.0031792196429621888, "phrase": "ai_planners"}, {"score": 0.0030855348881460107, "phrase": "goal_state"}, {"score": 0.0029452441730331617, "phrase": "planner's_initial_state"}, {"score": 0.0027649684074145028, "phrase": "classical_planning"}, {"score": 0.0027375275272639933, "phrase": "procedure_specifications"}, {"score": 0.0026656724016739905, "phrase": "planning_language"}, {"score": 0.002561401523136952, "phrase": "semantic_incompleteness"}, {"score": 0.002544422946205545, "phrase": "unobtrusive_programmer-compiler_interaction"}, {"score": 0.002420611343093316, "phrase": "otherwise_imperative_languages"}, {"score": 0.0023886223145816376, "phrase": "complex_logical_specifications"}, {"score": 0.002287542098172185, "phrase": "memory_usage"}, {"score": 0.0022200746395981876, "phrase": "preferred_solution"}, {"score": 0.0021907299375981356, "phrase": "language_design"}, {"score": 0.002126111716875144, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "bioperl_bioinformatics_library"}], "paper_keywords": ["algorithms", " languages", " performance", " domain-specific languages", " algorithm composition", " algorithm selection", " automated planning", " bioinformatics"], "paper_abstract": "Progressing beyond the productivity of present-day languages appears to require using domain-specific knowledge. Domain-specific languages and libraries (DSLs) proliferate, but most optimizations and language features have limited portability because each language's semantics are related closely to its domain. We explain how any DSL compiler can use a domain-independent AI planner to implement algorithm composition as a language feature. Our notion of composition addresses a common DSL problem: good library designers tend to minimize redundancy by including only fundamental procedures that users must chain together into call sequences. Novice users are confounded by not knowing an appropriate sequence to achieve their goal. Composition allows the programmer to define and call an abstract algorithm (AA) like a procedure. The compiler replaces an AA call with a sequence of library calls, while considering the calling context. Because AI planners compute a sequence of operations to reach a goal state, the compiler can implement composition by analyzing the calling context to provide the planner's initial state. Nevertheless, mapping composition onto planning is not straightforward because applying planning to software requires extensions to classical planning, and procedure specifications may be incomplete when expressed in a planning language. Compositions may not be provably correct, so our approach mitigates semantic incompleteness with unobtrusive programmer-compiler interaction. This tradeoff is key to making composition a practical and natural feature of otherwise imperative languages, whose users eschew complex logical specifications. Compositions satisfying an AA may not be equal in performance, memory usage, or precision and require selection of a preferred solution. We examine language design and implementation issues, and we perform a case study on the BioPerl bioinformatics library.", "paper_title": "Context-sensitive domain-independent algorithm composition and selection", "paper_id": "WOS:000202972100016"}