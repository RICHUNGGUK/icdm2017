{"auto_keywords": [{"score": 0.05007850122175856, "phrase": "memory_safety"}, {"score": 0.030278826585677838, "phrase": "ivory"}, {"score": 0.004539005582217309, "phrase": "low-level_control"}, {"score": 0.004154332348800334, "phrase": "modern_variant"}, {"score": 0.004073407652317574, "phrase": "haskell"}, {"score": 0.0038397509389856625, "phrase": "ghc_compiler"}, {"score": 0.003728000957725218, "phrase": "main_contributions"}, {"score": 0.0030614565460256897, "phrase": "safe-c_language"}, {"score": 0.0029722900280316216, "phrase": "type_extensions"}, {"score": 0.002914288956035066, "phrase": "ghc._second"}, {"score": 0.0026148807877309417, "phrase": "powerful_language"}, {"score": 0.002538687900036229, "phrase": "high-assurance_embedded_programs"}, {"score": 0.0023003498123420237, "phrase": "direct_support"}, {"score": 0.002146926767291475, "phrase": "property-based_testing"}, {"score": 0.0021049977753042253, "phrase": "ivory's_semantics"}], "paper_keywords": ["Embedded Domain Specific Languages", " Embedded Systems"], "paper_abstract": "Ivory is a language that enforces memory safety and avoids most undefined behaviors while providing low-level control of memory-manipulation. Ivory is embedded in a modern variant of Haskell, as implemented by the GHC compiler. The main contributions of the paper are two-fold. First, we demonstrate how to embed the type-system of a safe-C language into the type extensions of GHC. Second, Ivory is of interest in its own right, as a powerful language for writing high-assurance embedded programs. Beyond invariants enforced by its type-system, Ivory has direct support for model-checking, theorem-proving, and property-based testing. Ivory's semantics have been formalized and proved to guarantee memory safety.", "paper_title": "Guilt Free Ivory", "paper_id": "WOS:000370549100018"}