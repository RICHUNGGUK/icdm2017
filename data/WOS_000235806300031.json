{"auto_keywords": [{"score": 0.043891862951523725, "phrase": "modular_decomposition_tree"}, {"score": 0.00481495049065317, "phrase": "modular_decomposition"}, {"score": 0.004466519142879166, "phrase": "undirected_graph"}, {"score": 0.0038673406001234535, "phrase": "input_graph"}, {"score": 0.0036324746826127997, "phrase": "bottom-up_fashion"}, {"score": 0.003327349929456035, "phrase": "intermediate_drawings"}, {"score": 0.0031646057802503526, "phrase": "aesthetically_pleasing_results"}, {"score": 0.003047776993499616, "phrase": "circular_placement_techniques"}, {"score": 0.002953711377604328, "phrase": "appropriate_modification"}, {"score": 0.0028986672783671147, "phrase": "well-known_spring_embedder_algorithm"}, {"score": 0.002477998427152547, "phrase": "running_time"}, {"score": 0.002371531125700046, "phrase": "processing_time"}, {"score": 0.002327310963701377, "phrase": "spring_embedder_algorithm"}, {"score": 0.0021450029487459403, "phrase": "graph_g"}], "paper_keywords": [""], "paper_abstract": "In this paper we present an algorithm for drawing an undirected graph G which takes advantage of the structure of the modular decomposition tree of G. Specifically, our algorithm works by traversing the modular decomposition tree of the input graph G on n vertices and m edges, in a bottom-up fashion until it reaches the root of the tree, while at the same time intermediate drawings are computed. In order to achieve aesthetically pleasing results, we use grid and circular placement techniques, and utilize an appropriate modification of a well-known spring embedder algorithm. It turns out, that for some classes of graphs, our algorithm runs in O(n + m) time, while in general, the running time is bounded in terms of the processing time of the spring embedder algorithm. The result is a drawing that reveals the structure of the graph G and preserves certain aesthetic criteria.", "paper_title": "Drawing graphs using modular decomposition", "paper_id": "WOS:000235806300031"}