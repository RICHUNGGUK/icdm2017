{"auto_keywords": [{"score": 0.0334546270936539, "phrase": "undirected_graphs"}, {"score": 0.00481495049065317, "phrase": "finding_trees"}, {"score": 0.003627800727103479, "phrase": "directed_maximum_leaf_out-tree"}, {"score": 0.003546513036085932, "phrase": "directed_maximum_leaf_out-branching"}, {"score": 0.0030606302942851027, "phrase": "maximum_leaf_spanning_tree"}, {"score": 0.002958281631770322, "phrase": "run_time"}, {"score": 0.0026113524778702624, "phrase": "directed_graphs"}, {"score": 0.0022278779300543548, "phrase": "previously_fastest_algorithms"}, {"score": 0.0021049977753042253, "phrase": "run_times"}], "paper_keywords": ["Graph algorithms", " Algorithms"], "paper_abstract": "We present an algorithm that finds out-trees and out-branchings with at least k leaves in directed graphs. These problems are known as Directed Maximum Leaf Out-Tree and Directed Maximum Leaf Out-Branching, respectively, and-in the case of undirected graphs-as Maximum Leaf Spanning Tree. The run time of our algorithm is O(4 (k) nm) on directed graphs and O(poly(n)+4 (k) k (2)) on undirected graphs. This improves over the previously fastest algorithms for these problems with run times of 2 (O(klog k)) poly(n) and O(poly(n)+6.75 (k) poly(k)) respectively.", "paper_title": "A New Algorithm for Finding Trees with Many Leaves", "paper_id": "WOS:000296284800006"}