{"auto_keywords": [{"score": 0.035973938063167336, "phrase": "invariant_checking"}, {"score": 0.00481495049065317, "phrase": "model_invariant_checking"}, {"score": 0.0042455945330942746, "phrase": "developers'_understanding"}, {"score": 0.004210114198411514, "phrase": "modeled_aspects"}, {"score": 0.004174929128880472, "phrase": "complex_systems"}, {"score": 0.004122699822340296, "phrase": "structural_errors"}, {"score": 0.0040882422992520925, "phrase": "design_models"}, {"score": 0.0038066979615349822, "phrase": "entire_metamodel"}, {"score": 0.003727628340195049, "phrase": "modern_day_software"}, {"score": 0.0030216031606457214, "phrase": "analysis_process"}, {"score": 0.0029340342068081247, "phrase": "system_resources"}, {"score": 0.002766415324343602, "phrase": "invariant_checking_process"}, {"score": 0.0027088948471991454, "phrase": "slicing_technique"}, {"score": 0.0025541050375256992, "phrase": "large_models"}, {"score": 0.0025221012517852907, "phrase": "existing_tools"}, {"score": 0.0024284701569889113, "phrase": "model_slicing"}, {"score": 0.0021049977753042253, "phrase": "checking_results"}], "paper_keywords": ["UML", " Metamodel", " Model", " OCL", " Invariant Checking", " Model Slicing"], "paper_abstract": "In Model Driven Development (MDD), it is important to ensure that a model conforms to the invariants defined in the metamodel. Such invariant checking can improve developers' understanding of modeled aspects of complex systems and uncover structural errors in design models. General-purpose rigorous analysis tools that check invariants are likely to perform the analysis over the entire metamodel and model. Since modern day software is exceedingly complex, the size of the model together with the metamodel can be very large. Consequently, invariant checking can take a very long time. For example, checking a model consisting of 5,000 elements can take up to several hours if the analysis completes. Moreover, sometimes the analysis process cannot be completed as the system resources get exhausted. To this end, we introduce model slicing within the invariant checking process, and use a slicing technique to reduce the size of the inputs in order to make invariant checking of large models feasible with existing tools. The evaluation we performed provides evidence that model slicing can significantly reduce the time to perform the invariant checking. In the experiments that we conducted, we achieved speedups ranging from 1.5 to 36.0 and we also demonstrate the correctness of the checking results.", "paper_title": "Using Slicing to Improve the Performance of Model Invariant Checking", "paper_id": "WOS:000370811700002"}