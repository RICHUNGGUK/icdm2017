{"auto_keywords": [{"score": 0.049636680610423214, "phrase": "different_test_phases"}, {"score": 0.04602747321407116, "phrase": "defect-prone_modules"}, {"score": 0.014876872456199723, "phrase": "prediction_models"}, {"score": 0.011183100010455905, "phrase": "testing_phase"}, {"score": 0.00481495049065317, "phrase": "defective_modules"}, {"score": 0.004726382602809228, "phrase": "defect_prediction"}, {"score": 0.00466102244911872, "phrase": "well-established_research_area"}, {"score": 0.00418892838079239, "phrase": "test_phases"}, {"score": 0.004092774981286263, "phrase": "defect_prediction_models"}, {"score": 0.003961842092184655, "phrase": "version_history"}, {"score": 0.003907013105134715, "phrase": "large-scale_enterprise_software_product"}, {"score": 0.003817306032290766, "phrase": "static_code_metrics"}, {"score": 0.003610292749660581, "phrase": "namely_function"}, {"score": 0.0034624082435775676, "phrase": "learning-based_model"}, {"score": 0.0033051623473192814, "phrase": "different_defect_symptoms"}, {"score": 0.0032593915869553714, "phrase": "testing_phases"}, {"score": 0.0031113369425402287, "phrase": "benchmark_model"}, {"score": 0.0030117065110966414, "phrase": "entire_test_phase"}, {"score": 0.0027827907725673845, "phrase": "test_phase"}, {"score": 0.002744234034162797, "phrase": "defect_prediction_performance"}, {"score": 0.0027062100658653485, "phrase": "defect_detection_time"}, {"score": 0.0026687115458522326, "phrase": "benefit_analysis"}, {"score": 0.002607362103727335, "phrase": "proposed_model"}, {"score": 0.0023210846870653757, "phrase": "software_development_organization"}, {"score": 0.0021049977753042253, "phrase": "testing_teams"}], "paper_keywords": ["Software testing", " Testing phase", " Defect prediction"], "paper_abstract": "Defect prediction is a well-established research area in software engineering . Prediction models in the literature do not predict defect-prone modules in different test phases. We investigate the relationships between defects and test phases in order to build defect prediction models for different test phases. We mined the version history of a large-scale enterprise software product to extract churn and static code metrics. We used three testing phases that have been employed by our industry partner, namely function, system and field, to build a learning-based model for each testing phase. We examined the relation of different defect symptoms with the testing phases. We compared the performance of our proposed model with a benchmark model that has been constructed for the entire test phase (benchmark model). Our results show that building a model to predict defect-prone modules for each test phase significantly improves defect prediction performance and shortens defect detection time. The benefit analysis shows that using the proposed model, the defects are detected on the average 7 months earlier than the actual. The outcome of prediction models should lead to an action in a software development organization. Our proposed model gives a more granular outcome in terms of predicting defect-prone modules in each testing phase so that managers may better organize the testing teams and effort.", "paper_title": "Predicting defective modules in different test phases", "paper_id": "WOS:000351667700001"}