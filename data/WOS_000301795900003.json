{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "refinement_graphs"}, {"score": 0.008743974903800331, "phrase": "similarity_measures"}, {"score": 0.0046834372388970405, "phrase": "crucial_role"}, {"score": 0.004640398886726948, "phrase": "support_vector_machines"}, {"score": 0.004597754207658615, "phrase": "similarity_assessment"}, {"score": 0.004534517530868195, "phrase": "key_role"}, {"score": 0.004492841495994535, "phrase": "lazy_learning_methods"}, {"score": 0.004431041346291019, "phrase": "k-nearest_neighbor"}, {"score": 0.004390312150344245, "phrase": "case-based_reasoning"}, {"score": 0.004077616905584829, "phrase": "inductive_learning"}, {"score": 0.003484864867147635, "phrase": "anti-unification-based_similarity"}, {"score": 0.0030617935728586006, "phrase": "property-based_similarity"}, {"score": 0.002714943351733626, "phrase": "property_sets"}, {"score": 0.0026042472337367015, "phrase": "representation_language"}, {"score": 0.002363150587804677, "phrase": "refinement_graph"}, {"score": 0.002341384304635523, "phrase": "feature_terms"}, {"score": 0.0022772782536385717, "phrase": "increasing_expressiveness"}, {"score": 0.002164264600379492, "phrase": "relational_data"}, {"score": 0.0021049977753042253, "phrase": "different_expressiveness"}], "paper_keywords": ["Similarity measures", " Refinement graphs", " Case-based reasoning", " Feature terms", " Lazy learning"], "paper_abstract": "Similarity also plays a crucial role in support vector machines. Similarity assessment plays a key role in lazy learning methods such as k-nearest neighbor or case-based reasoning. In this paper we will show how refinement graphs, that were originally introduced for inductive learning, can be employed to assess and reason about similarity. We will define and analyze two similarity measures, S (lambda) and S (pi) , based on refinement graphs. The anti-unification-based similarity, S (lambda) , assesses similarity by finding the anti-unification of two instances, which is a description capturing all the information common to these two instances. The property-based similarity, S (pi) , is based on a process of disintegrating the instances into a set of properties, and then analyzing these property sets. Moreover these similarity measures are applicable to any representation language for which a refinement graph that satisfies the requirements we identify can be defined. Specifically, we present a refinement graph for feature terms, in which several languages of increasing expressiveness can be defined. The similarity measures are empirically evaluated on relational data sets belonging to languages of different expressiveness.", "paper_title": "Similarity measures over refinement graphs", "paper_id": "WOS:000301795900003"}