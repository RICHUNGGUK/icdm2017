{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "time-stamp_management"}, {"score": 0.04708187341931182, "phrase": "data_stream_management_systems"}, {"score": 0.004398872331144531, "phrase": "relational_query_languages"}, {"score": 0.0041773934798743405, "phrase": "continuous_queries"}, {"score": 0.0040708542958968605, "phrase": "data_streams"}, {"score": 0.003967021436047945, "phrase": "modest_extensions"}, {"score": 0.003353521531649663, "phrase": "execution_models"}, {"score": 0.003267925215811654, "phrase": "optimization_techniques"}, {"score": 0.002622947550220266, "phrase": "response-time_optimization"}, {"score": 0.0025230952890994236, "phrase": "databases'_relational_algebra_schemes"}, {"score": 0.0021601997088758957, "phrase": "idle-waiting_problems"}, {"score": 0.0021049977753042253, "phrase": "data_stream_operators"}], "paper_keywords": [""], "paper_abstract": "Relational query languages can effectively express continuous queries on data streams after modest extensions. However, implementing such queries efficiently in data stream management systems requires major changes in execution models and optimization techniques. In particular, finer-granularity execution models that are conducive to effective time-stamp management and response-time optimization must replace databases' relational algebra schemes. This article introduces such a model and uses it to solve the idle-waiting problems of data stream operators, such as unions, joins, and aggregates over windows with slides.", "paper_title": "Time-Stamp Management and Query Execution in Data Stream Management Systems", "paper_id": "WOS:000260722800004"}