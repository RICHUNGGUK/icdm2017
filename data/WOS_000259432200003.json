{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "open_answer"}, {"score": 0.022410755640534758, "phrase": "oasp"}, {"score": 0.00672689769122157, "phrase": "generalized_literals"}, {"score": 0.004986523873558321, "phrase": "ggps"}, {"score": 0.004737579882204798, "phrase": "guarded_programs"}, {"score": 0.0046803650677267146, "phrase": "set_programming"}, {"score": 0.004333642054036135, "phrase": "arbitrary_superset"}, {"score": 0.004281284532043714, "phrase": "program's_constants"}, {"score": 0.004195418010131832, "phrase": "fixed-point_logic"}, {"score": 0.004161556419110177, "phrase": "fpl"}, {"score": 0.004094639048362357, "phrase": "clark's_completion"}, {"score": 0.003947973513495612, "phrase": "fpl_formulas"}, {"score": 0.003685067218455088, "phrase": "fpl_translation"}, {"score": 0.0034676182423067307, "phrase": "normal_closed_asp"}, {"score": 0.003329804436286295, "phrase": "first_time"}, {"score": 0.0031974502006267163, "phrase": "mu_lgf_formulas"}, {"score": 0.0029602552900111407, "phrase": "interesting_properties"}, {"score": 0.0028541057064952876, "phrase": "infinity_axioms"}, {"score": 0.0026209522797963447, "phrase": "guarded_fixed-point_logic"}, {"score": 0.0024761702541879213, "phrase": "bound_ggps"}, {"score": 0.0024264193359373977, "phrase": "exptime-complete_satisfiability_checking"}, {"score": 0.00233936726307301, "phrase": "computation_tree_logic"}, {"score": 0.0022738201751000865, "phrase": "datalog_lite_programs"}, {"score": 0.00218334762335187, "phrase": "open_answer_set_semantics"}, {"score": 0.0021308095322224627, "phrase": "gf"}, {"score": 0.0021049977753042253, "phrase": "datalog_lite."}], "paper_keywords": ["theory"], "paper_abstract": "Open answer set programming (OASP) is an extension of answer set programming where one may ground a program with an arbitrary superset of the program's constants. We define a fixed-point logic (FPL) extension of Clark's completion such that open answer sets correspond to models of FPL formulas and identify a syntactic subclass of programs, called (loosely) guarded programs. Whereas reasoning with general programs in OASP is undecidable, the FPL translation of (loosely) guarded programs falls in the decidable (loosely) guarded fixed-point logic (mu(L)GF). Moreover, we reduce normal closed ASP to loosely guarded OASP, enabling, for the first time, a characterization of an answer set semantics by mu LGF formulas. We further extend the open answer set semantics for programs with generalized literals. Such generalized programs (gPs) have interesting properties, for example, the ability to express infinity axioms. We restrict the syntax of gPs such that both rules and generalized literals are guarded. Via a translation to guarded fixed-point logic, we deduce 2-EXPTIME-completeness of satisfiability checking in such guarded gPs (GgPs). Bound GgPs are restricted GgPs with EXPTIME-complete satisfiability checking, but still sufficiently expressive to optimally simulate computation tree logic (CTL). We translate Datalog LITE programs to GgPs, establishing equivalence of GgPs under an open answer set semantics, alternation-free mu GF, and Datalog LITE.", "paper_title": "Open answer set programming with guarded programs", "paper_id": "WOS:000259432200003"}