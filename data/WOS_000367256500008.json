{"auto_keywords": [{"score": 0.0363392912425693, "phrase": "shy"}, {"score": 0.004767261858417823, "phrase": "object_algebras"}, {"score": 0.004696608876994947, "phrase": "complex_abstract_syntax_trees"}, {"score": 0.004558414405811025, "phrase": "large_amounts"}, {"score": 0.004513255056769647, "phrase": "tedious_boilerplate_code"}, {"score": 0.003945467978172845, "phrase": "first_place"}, {"score": 0.003829290275367182, "phrase": "type-safe_java_framework"}, {"score": 0.00367967106192446, "phrase": "boilerplate_code"}, {"score": 0.0036250779580069455, "phrase": "shy_object_algebras"}, {"score": 0.0035358770665604657, "phrase": "complex_and_extensible_ast_structures"}, {"score": 0.003483602066050151, "phrase": "java"}, {"score": 0.0034146585649631692, "phrase": "generic_boilerplate_code"}, {"score": 0.003281186608301359, "phrase": "concrete_traversal"}, {"score": 0.003121636289442593, "phrase": "generated_code"}, {"score": 0.0027557911038816256, "phrase": "shy_framework"}, {"score": 0.002595698433525986, "phrase": "future_changes"}, {"score": 0.0025317627242523104, "phrase": "ast_structure"}, {"score": 0.0023143284925318916, "phrase": "domain-specific_questionnaire_language"}, {"score": 0.002223770196464436, "phrase": "large_number"}, {"score": 0.002158179521369965, "phrase": "significant_reduction"}, {"score": 0.0021049977753042253, "phrase": "user-defined_code"}], "paper_keywords": ["Languages", " Object algebras", " boilerplate code", " Java", " adaptive object-oriented programming"], "paper_abstract": "Traversing complex Abstract Syntax Trees (ASTs) typically requires large amounts of tedious boilerplate code. For many operations most of the code simply walks the structure, and only a small portion of the code implements the functionality that motivated the traversal in the first place. This paper presents a type-safe Java framework called Shy that removes much of this boilerplate code. In Shy Object Algebras are used to describe complex and extensible AST structures. Using Java annotations Shy generates generic boilerplate code for various types of traversals. For a concrete traversal, users of Shy can then inherit from the generated code and override only the interesting cases. Consequently, the amount of code that users need to write is significantly smaller. Moreover, traversals using the Shy framework are also much more structure shy, becoming more adaptive to future changes or extensions to the AST structure. To prove the effectiveness of the approach, we applied Shy in the implementation of a domain-specific questionnaire language. Our results show that for a large number of traversals there was a significant reduction in the amount of user-defined code.", "paper_title": "Scrap Your Boilerplate with Object Algebras", "paper_id": "WOS:000367256500008"}