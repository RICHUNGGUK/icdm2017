{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.033724831257822024, "phrase": "java_platform"}, {"score": 0.028898443224378585, "phrase": "jindy"}, {"score": 0.027394964110376705, "phrase": "runtime_performance"}, {"score": 0.004533685795068016, "phrase": "new_invokedynamic_opcode"}, {"score": 0.004459857205489101, "phrase": "java_virtual_machine"}, {"score": 0.004387225575447685, "phrase": "new_instruction"}, {"score": 0.004245476558619167, "phrase": "method_linkage"}, {"score": 0.003997343989408636, "phrase": "virtual_machine"}, {"score": 0.0038893838564184107, "phrase": "better_runtime_performance"}, {"score": 0.003602302241898501, "phrase": "abstraction_level"}, {"score": 0.0035435867326548665, "phrase": "java_programming_language"}, {"score": 0.0034102660898135155, "phrase": "new_opcode"}, {"score": 0.003246173672295418, "phrase": "existing_languages"}, {"score": 0.0030730639262332698, "phrase": "assembly_level"}, {"score": 0.0029091587159002503, "phrase": "jindy_library"}, {"score": 0.0027996401456881806, "phrase": "programming_language"}, {"score": 0.0024815011359381692, "phrase": "memory_consumption_evaluation"}, {"score": 0.0021994343316143125, "phrase": "dynalink"}, {"score": 0.0021516991383785985, "phrase": "memory_and_performance_costs"}, {"score": 0.0021049977753042253, "phrase": "invokedynamic_opcode"}], "paper_keywords": ["invokedynamic", " Java Virtual Machine", " dynamically generated classes", " reflection", " runtime performance"], "paper_abstract": "Java 7 has included the new invokedynamic opcode in the Java virtual machine. This new instruction allows the user to define method linkage at runtime. Once the link is established, the virtual machine performs its common optimizations, providing better runtime performance than reflection. However, this feature has not been offered at the abstraction level of the Java programming language. Since the functionality of the new opcode is not provided as a library, the existing languages in the Java platform can only use it at the assembly level. For this reason, we have developed the JINDY library that offers invoke dynamic to any programming language in the Java platform. JINDY supports three modes of use, establishing a trade-off between runtime performance and flexibility. A runtime performance and memory consumption evaluation is presented. We analyze the efficiency of JINDY compared to reflection, the MethodHandle class in Java 7 and the Dynalink library. The memory and performance costs compared to the invokedynamic opcode are also measured.", "paper_title": "JINDY: a Java library to support invokedynamic", "paper_id": "WOS:000331779200007"}