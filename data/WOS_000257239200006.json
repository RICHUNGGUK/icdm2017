{"auto_keywords": [{"score": 0.046040545801964705, "phrase": "bpel"}, {"score": 0.00481495049065317, "phrase": "procedural_process_specification_languages"}, {"score": 0.00454090611248773, "phrase": "business_process"}, {"score": 0.004487989502479992, "phrase": "current_process_languages"}, {"score": 0.004332894955218135, "phrase": "control_flow"}, {"score": 0.00408617426304956, "phrase": "inflexible_and_tangled_code"}, {"score": 0.003991449490087454, "phrase": "crosscutting_aspect-synchronization_constraints"}, {"score": 0.003487721546598799, "phrase": "synchronization-aspect_extension"}, {"score": 0.0033473779327638322, "phrase": "dscl"}, {"score": 0.0032889671598112023, "phrase": "-acyclic-graph_synchronization_constraint_language"}, {"score": 0.0028568174308720167, "phrase": "executable_code"}, {"score": 0.0026624684547385718, "phrase": "service_deployment_process"}, {"score": 0.0023124457559811087, "phrase": "evaluation_results"}, {"score": 0.002206290313627494, "phrase": "development_effort"}, {"score": 0.0021805201234139475, "phrase": "process_programmers"}, {"score": 0.0021049977753042253, "phrase": "unwoven_bpel_code"}], "paper_keywords": ["modeling languages", " petri nets", " procedural languages", " process model"], "paper_abstract": "Correct synchronization among activities is critical in a business process. Current process languages such as BPEL specify the control flow of processes procedurally, which can lead to, inflexible and tangled code for managing a crosscutting aspect-synchronization constraints that define permissible sequences of execution for activities. In this article, we present DSCWeaver, a tool that enables a synchronization-aspect extension to procedural languages. It uses DSCL (directed-acyclic-graph synchronization constraint language) to achieve three desirable properties for synchronization modeling: fine granularity, declarative syntax and validation support. DSCWeaver then automatically generates executable code for synchronization. We demonstrate the advantages of our approach in a service deployment process written in BPEL and evaluate its performance using two metrics: lines of code (LoC) and places to visit (PtV). Evaluation results show that our approach can effectively reduce the development effort of process programmers while providing performance competitive to unwoven BPEL code.", "paper_title": "DSCWeaver: Synchronization-constraint aspect extension to procedural process specification languages", "paper_id": "WOS:000257239200006"}