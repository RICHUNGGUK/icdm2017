{"auto_keywords": [{"score": 0.02840703668149855, "phrase": "fpgas"}, {"score": 0.00481495049065317, "phrase": "application-specific_processors"}, {"score": 0.004682288586254123, "phrase": "rendering_algorithm"}, {"score": 0.004626553103375699, "phrase": "high-fidelity_images"}, {"score": 0.004517055580214742, "phrase": "shadow_effects"}, {"score": 0.004254467919664946, "phrase": "processing_speed"}, {"score": 0.004120694410890683, "phrase": "current_implementations"}, {"score": 0.003975200317233532, "phrase": "interactive_real-time_rendering"}, {"score": 0.003850173884725567, "phrase": "virtual_reality_based_applications"}, {"score": 0.003729065012001506, "phrase": "massive_parallelization"}, {"score": 0.0036262124965265015, "phrase": "strong_reason"}, {"score": 0.0034981163169818803, "phrase": "parallel_architecture"}, {"score": 0.0034702685641070283, "phrase": "ray_tracing"}, {"score": 0.0034152340901585374, "phrase": "uniform_spatial_subdivision"}, {"score": 0.003321008590273796, "phrase": "embedded_computation"}, {"score": 0.003294566092612857, "phrase": "ray-triangle_intersections"}, {"score": 0.0032036590920314725, "phrase": "significant_acceleration"}, {"score": 0.003178147973814818, "phrase": "intersection_computations"}, {"score": 0.003065830998810144, "phrase": "total_number"}, {"score": 0.0030292784088033838, "phrase": "required_intersections_checks"}, {"score": 0.0026975894491357176, "phrase": "asip-based_implementation"}, {"score": 0.002644179117033107, "phrase": "gpgpu-based_parallel_implementation"}, {"score": 0.0024117603727471654, "phrase": "second_gpu"}, {"score": 0.0023545567809591804, "phrase": "gpgpu-based_implementation"}, {"score": 0.0022803854904010347, "phrase": "primary_rays"}, {"score": 0.0022174005294867604, "phrase": "parallel_execution"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Ray tracing", " Parallel architecture", " Application specific", " ASIP", " GPGPU", " CUDA"], "paper_abstract": "The ray tracing rendering algorithm can produce high-fidelity images of 3-D scenes, including shadow effects, as well as reflections and transparencies. This is currently done at a processing speed of 30 frames per second. Therefore, current implementations of the algorithm are not yet suitable for interactive real-time rendering, which is required in games and virtual reality based applications. Nonetheless, the algorithm allows for massive parallelization of its computations, which is a strong reason of further improvements. Also, we present a parallel architecture for ray tracing based on a uniform spatial subdivision of the scene that exploits an embedded computation of ray-triangle intersections. This approach allows for a significant acceleration of intersection computations, as well as a reduction of the total number of the required intersections checks. Furthermore, it allows for these checks to be performed in parallel and in advance for each ray. In this paper we discuss and analyze an ASIP-based implementation using FPGAs and a GPGPU-based parallel implementation of the proposed architecture, both running different 3-D scenes. The performance of both implementations are reported and compared. Furthermore, a second GPU has been included in the GPGPU-based implementation, running the same parallel architecture. Thus, primary rays are split among both GPUs for parallel execution and their performance are also presented and compared. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Parallel processing of intersections for ray-tracing in application-specific processors and GPGPUs", "paper_id": "WOS:000326614600022"}