{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cray_xmt"}, {"score": 0.031782944881882304, "phrase": "maximum_number"}, {"score": 0.004671342094877447, "phrase": "comparative_performance"}, {"score": 0.004551647527068771, "phrase": "massively_multithreaded_supercomputers"}, {"score": 0.004415857432588371, "phrase": "memory_accesses"}, {"score": 0.004138309011478741, "phrase": "matrix_multiply"}, {"score": 0.003962998498942111, "phrase": "relative_performance"}, {"score": 0.003465189575252443, "phrase": "small_configurations"}, {"score": 0.0034204548167213545, "phrase": "original_xmt"}, {"score": 0.003361702510958392, "phrase": "slightly_better_performance"}, {"score": 0.003332704619499476, "phrase": "larger_configurations"}, {"score": 0.0031365819432206004, "phrase": "heavy_memory_load"}, {"score": 0.0027304365438083874, "phrase": "specific_run"}, {"score": 0.0026603411931700556, "phrase": "manual_restructuring"}, {"score": 0.002637377202509382, "phrase": "nested_loops"}, {"score": 0.002525489173110693, "phrase": "major_improvements"}, {"score": 0.002227083991228041, "phrase": "production_codes"}, {"score": 0.002188784900536406, "phrase": "extended_periods"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Cray XMT", " Cray XMT-2", " matrix multiply", " dynamic programming", " multithreading", " parallel algorithms", " parallel computing", " reassortment", " sequence alignment", " shared memory", " subset-sum problem"], "paper_abstract": "We explore the comparative performance of the Cray XMT and XMT-2 massively multithreaded supercomputers. We use benchmarks to evaluate memory accesses for various types of loops. We also compare the performance of these machines on matrix multiply and on three previously implemented dynamic programming algorithms. It is shown that the relative performance of these machines is dependent on the size (number of processors) of the configuration, as well as the size of the problem being evaluated. In particular, small configurations of the original XMT can sometimes show slightly better performance than larger configurations of the XMT-2, for the same problem size. We note that, under heavy memory load, performance of loops can saturate well before the maximum number of processors available. This suggests that it may not always be useful to use the maximum number of processors for a specific run. We also show that manual restructuring of nested loops, including decreasing the parallelism, can result in major improvements in performance. The results in this paper indicate that careful exploration of the space of problem sizes, number of processors used, and choices of loop parallelization can yield substantial improvements in performance. These improvements can be very significant for production codes that run for extended periods of time. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "A comparison of the Cray XMT and XMT-2", "paper_id": "WOS:000324307500001"}