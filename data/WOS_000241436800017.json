{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "graph_grammars"}, {"score": 0.0040171817997972335, "phrase": "right-hand_side"}, {"score": 0.0037532257703888315, "phrase": "fresh_parts"}, {"score": 0.003627800727103479, "phrase": "type_graph"}, {"score": 0.003546513036085932, "phrase": "fresh_productions"}, {"score": 0.00302612773666719, "phrase": "straightforward_modeling"}, {"score": 0.002958281631770322, "phrase": "reflexive_mobile_systems"}, {"score": 0.0028919522313933525, "phrase": "dynamic_nets"}, {"score": 0.002795228413298423, "phrase": "join_calculus"}, {"score": 0.002305014991156598, "phrase": "dynamically_generated_structure"}, {"score": 0.0021049977753042253, "phrase": "exactly_all_derivations"}], "paper_keywords": [""], "paper_abstract": "We introduce an extension of Graph Grammars (GGs), called Dynan tic Graph Grammars (DynGGs), where the right-hand side of a production can spawn fresh parts of the type graph and fresh productions operating on it. The features of DynGGs make them suitable for the straightforward modeling of reflexive mobile systems like dynamic nets and the Join calculus. Our main result shows that each DynGG can be modeled as a (finite) GG, so that the dynamically generated structure can be typed statically, still preserving exactly all derivations.", "paper_title": "Dynamic graph transformation systems", "paper_id": "WOS:000241436800017"}