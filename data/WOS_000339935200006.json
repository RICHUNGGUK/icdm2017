{"auto_keywords": [{"score": 0.025372286719485562, "phrase": "everett"}, {"score": 0.004730458558634266, "phrase": "general_framework"}, {"score": 0.004459334186889869, "phrase": "h-join_decomposition"}, {"score": 0.0041666157975446564, "phrase": "graph_h"}, {"score": 0.0039276803200112695, "phrase": "fastest_known_algorithms"}, {"score": 0.0038133810870635844, "phrase": "n-join"}, {"score": 0.003500313767208306, "phrase": "homogeneous_pair"}, {"score": 0.0032800186243040663, "phrase": "vertex_xa_parts"}, {"score": 0.002940248454513279, "phrase": "perfect_graphs"}, {"score": 0.0028885579903645043, "phrase": "graphs_comb"}, {"score": 0.00287221420279077, "phrase": "g-v"}, {"score": 0.0025361866386341796, "phrase": "maximal_homogeneous_pairs"}, {"score": 0.0024622810950164415, "phrase": "previous_bound"}, {"score": 0.002348475124046182, "phrase": "discrete_appl"}, {"score": 0.002259883463607508, "phrase": "nice_structural_property"}, {"score": 0.002246553137021003, "phrase": "homogenous_pairs"}, {"score": 0.0022070310530794097, "phrase": "canonical_decomposition_tree"}, {"score": 0.0021940118003312397, "phrase": "sesquiprime_graphs"}, {"score": 0.0021174899403023965, "phrase": "vertex_vag"}], "paper_keywords": ["Algorithms", " Graph", " Graph decompositions", " H-Join", " Homogeneous pairs"], "paper_abstract": "We present here a general framework to design algorithms that compute H-join. For a given bipartite graph H, we say that a graph G admits a H-join decomposition or simply a H-join, if the vertices of G can be partitioned in |H| parts connected as in H. This graph H is a kind of pattern, that we want to discover in G. This framework allows us to present fastest known algorithms for the computation of P (4)-join (aka N-join), P (5)-join (aka W-join), C (6)-join (aka 6-join). We also generalize this method to find a homogeneous pair (also known as 2-module), a pair {M (1),M (2)} such that for every vertex xa parts per thousand(M (1)a(a)M (2)) and ia{1,2}, x is either adjacent to all vertices in M (i) or to none of them. First used in the context of perfect graphs (Chvatal and Sbihi in Graphs Comb. 3:127-139, 1987), it is a generalization of splits (a.k.a. 1-joins) and of modules. The algorithmics to compute them appears quite involved. In this paper, we describe an O(mn (2))-time algorithm computing all maximal homogeneous pairs of a graph, which not only improves a previous bound of O(mn (3)) for finding only one pair (Everett et al. in Discrete Appl. Math. 72:209-218, 1997), but also uses a nice structural property of homogenous pairs, allowing to compute a canonical decomposition tree for sesquiprime graphs (i.e., graphs G having no module and such that for every vertex vaG, G-v also has no module).", "paper_title": "Computing H-Joins with Application to 2-Modular Decomposition", "paper_id": "WOS:000339935200006"}