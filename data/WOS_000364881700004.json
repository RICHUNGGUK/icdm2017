{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "syb_traversals"}, {"score": 0.013191802238045251, "phrase": "syb"}, {"score": 0.004598960825255982, "phrase": "haskell"}, {"score": 0.004086744751579196, "phrase": "generic_traversals"}, {"score": 0.003631390978147703, "phrase": "concise_expression"}, {"score": 0.003468287913322255, "phrase": "significant_runtime_cost"}, {"score": 0.003423042581201533, "phrase": "existing_techniques"}, {"score": 0.002866817775018445, "phrase": "partial_evaluation"}, {"score": 0.0027741761880779535, "phrase": "domain-specific_knowledge"}, {"score": 0.00268452026617243, "phrase": "syb."}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Optimization", " Partial evaluation", " Datatype-generic programming", " Haskell", " Scrap Your Boilerplate (SYB)"], "paper_abstract": "The most widely used generic-programming system in the Haskell community, Scrap Your Boilerplate (SYB), also happens to be one of the slowest. Generic traversals in SYB are often an order of magnitude slower than equivalent handwritten, non-generic traversals. Thus while SYB allows the concise expression of many traversals, its use incurs a significant runtime cost. Existing techniques for optimizing other generic-programming systems are not able to eliminate this overhead. This paper presents an optimization that eliminates this cost. Essentially, it is a partial evaluation that takes advantage of domain-specific knowledge about the structure of SYB. It optimizes SYB traversals to be as fast as handwritten, non-generic code, and benchmarks show that this optimization improves the speed of SYB traversals by an order of magnitude or more. (C) 2015 Published by Elsevier B.V.", "paper_title": "Optimizing SYB traversals is easy!", "paper_id": "WOS:000364881700004"}