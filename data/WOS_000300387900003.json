{"auto_keywords": [{"score": 0.049545777344370455, "phrase": "crosscutting_concerns"}, {"score": 0.048496350165912715, "phrase": "design_modularity_flaws"}, {"score": 0.037344383137898736, "phrase": "modularity_assessment"}, {"score": 0.033593261234632854, "phrase": "exploratory_study"}, {"score": 0.00481495049065317, "phrase": "concern-sensitive_design_heuristics"}, {"score": 0.004734718930096544, "phrase": "software_systems"}, {"score": 0.004539913872457199, "phrase": "proper_design_evaluation_mechanisms"}, {"score": 0.004476768460196375, "phrase": "harmful_crosscutting_concerns"}, {"score": 0.004280520151174946, "phrase": "basic_mechanisms"}, {"score": 0.004185632403886255, "phrase": "object-oriented_or_aspect-oriented_programs"}, {"score": 0.004024591741595257, "phrase": "effective_identification"}, {"score": 0.003946400753785508, "phrase": "software_system"}, {"score": 0.003752216951715829, "phrase": "existing_metrics"}, {"score": 0.0036792981951416105, "phrase": "primitive_concern_properties"}, {"score": 0.003617921223790589, "phrase": "tangling_and_scattering"}, {"score": 0.003498211093849399, "phrase": "conventional_attributes"}, {"score": 0.0034398445347109396, "phrase": "module_cohesion"}, {"score": 0.0033447157263095223, "phrase": "representative_suite"}, {"score": 0.003326006954887031, "phrase": "concern-sensitive_heuristic_rules"}, {"score": 0.0032430998954652043, "phrase": "prototype_tool"}, {"score": 0.0031182092708983184, "phrase": "proposed_heuristics"}, {"score": 0.0030747771905143273, "phrase": "seven_systems"}, {"score": 0.0030234540584856352, "phrase": "exploratory_analysis"}, {"score": 0.0028826300971889923, "phrase": "conventional_metrics-based_assessments"}, {"score": 0.0028107438825394, "phrase": "false_positives"}, {"score": 0.0027100527874262446, "phrase": "design_instability"}, {"score": 0.0026129593626748326, "phrase": "object-oriented_and_aspect-oriented_programs"}, {"score": 0.002463392170671618, "phrase": "promising_research_direction"}, {"score": 0.0023223663501882917, "phrase": "stepping_stone"}, {"score": 0.002277171099621041, "phrase": "useful_assessment_abstractions"}, {"score": 0.0021407635895366564, "phrase": "concern-sensitive_heuristics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Design heuristics", " Modularity", " Crosscutting concerns", " Software metrics", " Aspect-oriented software development"], "paper_abstract": "Manifestation of crosscutting concerns in software systems is often an indicative of design modularity flaws and further design instabilities as those systems evolve. Without proper design evaluation mechanisms, the identification of harmful crosscutting concerns can become counter-productive and impractical. Nowadays, metrics and heuristics are the basic mechanisms to support their identification and classification either in object-oriented or aspect-oriented programs. However, conventional mechanisms have a number of limitations to support an effective identification and classification of crosscutting concerns in a software system. In this paper, we claim that those limitations are mostly caused by the fact that existing metrics and heuristics are not sensitive to primitive concern properties, such as either their degree of tangling and scattering or their specific structural shapes. This means that modularity assessment is rooted only at conventional attributes of modules, such as module cohesion, coupling and size. This paper proposes a representative suite of concern-sensitive heuristic rules. The proposed heuristics are supported by a prototype tool. The paper also reports an exploratory study to evaluate the accuracy of the proposed heuristics by applying them to seven systems. The results of this exploratory analysis give evidences that the heuristics offer support for: (i) addressing the shortcomings of conventional metrics-based assessments, (ii) reducing the manifestation of false positives and false negatives in modularity assessment, (iii) detecting sources of design instability, and (iv) finding the presence of design modularity flaws in both object-oriented and aspect-oriented programs. Although our results are limited to a number of decisions we made in this study, they indicate a promising research direction. Further analyses are required to confirm or refute our preliminary findings and, so, this study should be seen as a stepping stone on understanding how concerns can be useful assessment abstractions. We conclude this paper by discussing the limitations of this exploratory study focusing on some situations which hinder the accuracy of concern-sensitive heuristics. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Applying and evaluating concern-sensitive design heuristics", "paper_id": "WOS:000300387900003"}