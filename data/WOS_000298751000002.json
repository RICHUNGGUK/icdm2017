{"auto_keywords": [{"score": 0.03675883934633625, "phrase": "encapsulation_system"}, {"score": 0.036171595291928434, "phrase": "topological_system"}, {"score": 0.015719716506582538, "phrase": "ownership_topology"}, {"score": 0.015378599035360272, "phrase": "generic_universe_types"}, {"score": 0.004761889028406426, "phrase": "encapsulation"}, {"score": 0.004580550308652044, "phrase": "powerful_concept"}, {"score": 0.0044800522651664695, "phrase": "object_store"}, {"score": 0.004145287175409325, "phrase": "ownership_type_system"}, {"score": 0.004076858589744185, "phrase": "java-like_programming_language"}, {"score": 0.00370981613076245, "phrase": "earlier_work"}, {"score": 0.0033757067564871494, "phrase": "existential_modifier"}, {"score": 0.003283272764794988, "phrase": "ownership_information"}, {"score": 0.002905629026254221, "phrase": "modifier_discipline"}, {"score": 0.0025570607111118793, "phrase": "owner_objects"}, {"score": 0.00251478366610296, "phrase": "state_changes"}, {"score": 0.002486987042061596, "phrase": "owned_objects"}, {"score": 0.0022502133699402018, "phrase": "cleaner_formalization"}, {"score": 0.002164331818029166, "phrase": "simpler_reuse"}, {"score": 0.0021285340816566906, "phrase": "individual_systems"}, {"score": 0.0021049977753042253, "phrase": "different_contexts"}], "paper_keywords": ["Languages", " Theory", " Verification", " Encapsulation", " generic", " ownership types", " owner-as-modifier", " topology", " universe types"], "paper_abstract": "Ownership is a powerful concept to structure the object store and to control aliasing and modifications of objects. This article presents an ownership type system for a Java-like programming language with generic types. Like our earlier Universe type system, Generic Universe Types structure the heap hierarchically. In contrast to earlier work, we separate the enforcement of an ownership topology from an encapsulation system. The topological system uses an existential modifier to express that no ownership information is available statically. On top of the topological system, we build an encapsulation system that enforces the owner-as-modifier discipline. This discipline does not restrict aliasing, but requires modifications of an object to be initiated by its owner. This allows owner objects to control state changes of owned objects-for instance, to maintain invariants. Separating the topological system from the encapsulation system allows for a cleaner formalization, separation of concerns, and simpler reuse of the individual systems in different contexts.", "paper_title": "Separating Ownership Topology and Encapsulation with Generic Universe Types", "paper_id": "WOS:000298751000002"}