{"auto_keywords": [{"score": 0.049631680892871025, "phrase": "identifier_names"}, {"score": 0.00481495049065317, "phrase": "software_identifiers"}, {"score": 0.004201991568145053, "phrase": "collaborative_software_engineering"}, {"score": 0.004123781267600542, "phrase": "source_codes"}, {"score": 0.004009175817816061, "phrase": "domain_concept"}, {"score": 0.003771631577951067, "phrase": "association_rule_concept"}, {"score": 0.0037363522297378777, "phrase": "data_mining_softwares"}, {"score": 0.003229741076887148, "phrase": "automatic_software_understanding"}, {"score": 0.003154701855951328, "phrase": "domain_concept_categories"}, {"score": 0.003110515172439764, "phrase": "innovative_solution"}, {"score": 0.003066945490483524, "phrase": "data_mining_algorithms"}, {"score": 0.002953711377604328, "phrase": "character_patterns"}, {"score": 0.002885066818322192, "phrase": "main_challenges"}, {"score": 0.002752513434446804, "phrase": "relevant_constituent_subnames"}, {"score": 0.0025770807002632877, "phrase": "domain_concepts"}, {"score": 0.002470237978694949, "phrase": "novel_manner"}, {"score": 0.0023789822182914877, "phrase": "n-grams_based_text_classification"}, {"score": 0.0023346234464901978, "phrase": "related_domain_concept"}, {"score": 0.0022378101636842296, "phrase": "theoretical_method"}, {"score": 0.0021049977753042253, "phrase": "real_software_source_codes"}], "paper_keywords": ["Automatic software understanding", " data mining", " text classification", " software engineering"], "paper_abstract": "Identifier names (e.g., packages, classes, methods, variables) are one of most important software comprehension sources. Identifier names need to be analyzed in order to support collaborative software engineering and to reuse source codes. Indeed, they convey domain concept of softwares. For instance, \"getMinimumSupport\" would be associated with association rule concept in data mining softwares, while some are difficult to recognize such as the case of mixing parts of words (e.g., \"initFeatSet\"). We thus propose methods for assisting automatic software understanding by classifying identifier names into domain concept categories. An innovative solution based on data mining algorithms is proposed. Our approach aims to learn character patterns of identifier names. The main challenges are (1) to automatically split identifier names into relevant constituent subnames (2) to build a model associating such a set of subnames to predefined domain concepts. For this purpose, we propose a novel manner for splitting such identifiers into their constituent words and use N-grams based text classification to predict the related domain concept. In this article, we report the theoretical method and the algorithms we propose, together with the experiments run on real software source codes that show the interest of our approach.", "paper_title": "Software understanding: Automatic classification of software identifiers", "paper_id": "WOS:000357612200006"}