{"auto_keywords": [{"score": 0.031177697743376278, "phrase": "requirements_models"}, {"score": 0.00481495049065317, "phrase": "model-driven_acceptance_test_automation"}, {"score": 0.004734987730139094, "phrase": "use_cases"}, {"score": 0.004682414867878963, "phrase": "acceptance_testing"}, {"score": 0.004378958522416482, "phrase": "final_system"}, {"score": 0.00428222231579898, "phrase": "user_requirements"}, {"score": 0.003916098498242888, "phrase": "acceptance_tests"}, {"score": 0.0037449033166879874, "phrase": "model-driven_approach"}, {"score": 0.0036214184763804034, "phrase": "detailed_use_case_models"}, {"score": 0.003541357671562449, "phrase": "test_cases"}, {"score": 0.003405472159599442, "phrase": "functional_test_cases"}, {"score": 0.0030794433253250476, "phrase": "test_data"}, {"score": 0.002977835845437357, "phrase": "unified_approach"}, {"score": 0.002847540262784593, "phrase": "acceptance_testing_process"}, {"score": 0.002722930209707764, "phrase": "development_process"}, {"score": 0.0026626797255348287, "phrase": "automatic_transformations"}, {"score": 0.002603758927691463, "phrase": "software_development_artefacts"}, {"score": 0.0023807981747706376, "phrase": "case_study"}, {"score": 0.0023281003994670714, "phrase": "new_tool"}, {"score": 0.0022013916728990564, "phrase": "requirements_specification_language"}, {"score": 0.0021049977753042253, "phrase": "newly_proposed_test_specification_language"}], "paper_keywords": ["acceptance testing", " test generation", " use cases", " metamodel", " model transformation"], "paper_abstract": "Acceptance testing is highly dependent on the formulation of requirements, as the final system is tested against user requirements. It is thus highly desirable to be able to automate transition from requirements to acceptance tests. In this paper we present a model-driven approach to this issue, where detailed use case models are transformed into test cases. Importantly, our approach facilitates synchronising functional test cases with other types of tests (non-functional, domain logic, user interface) and introducing test data. This leads to a unified approach where requirements models of various kind drive the acceptance testing process. This process is parallel to the development process which also involves automatic transformations from requirements models to software development artefacts (models and code). To show validity of the approach we present a case study which uses a new tool called ReDSeT, that transforms requirements formulated in the Requirements Specification Language (RSL) into tests in a newly proposed Test Specification Language (TSL).", "paper_title": "Model-Driven Acceptance Test Automation Based on Use Cases", "paper_id": "WOS:000359611300019"}