{"auto_keywords": [{"score": 0.04279254991186493, "phrase": "wildcard_characters"}, {"score": 0.012693029021093597, "phrase": "cole_et_al"}, {"score": 0.00481495049065317, "phrase": "text_indexing"}, {"score": 0.0047735489327932114, "phrase": "fundamental_problem"}, {"score": 0.00474614491353724, "phrase": "computer_science"}, {"score": 0.003958637205284778, "phrase": "first_non-trivial_solution"}, {"score": 0.0037911950902695534, "phrase": "index_space"}, {"score": 0.0032075435331011173, "phrase": "different_space-time_trade-offs"}, {"score": 0.003152531962718477, "phrase": "clear_improvement"}, {"score": 0.0029417327389182285, "phrase": "bits_index"}, {"score": 0.0027056838446692173, "phrase": "size_o"}, {"score": 0.002598587136329808, "phrase": "slightly_higher_query_time"}, {"score": 0.002417751896923312, "phrase": "related_problem"}, {"score": 0.00232202561027509, "phrase": "n_characters"}, {"score": 0.0022494725694725244, "phrase": "distinct_documents"}, {"score": 0.0022300809511147305, "phrase": "query_pattern"}, {"score": 0.002223654214753248, "phrase": "p._for_the_case"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["String indexing", " Data structures", " Wildcards", " Range searching", " Suffix trees"], "paper_abstract": "Text indexing is a fundamental problem in computer science, where the task is to index a given text (string) T[1..n], such that whenever a pattern P[1..p] comes as a query, we can efficiently report all those locations where P occurs as a substring of T. In this paper, we consider the case when P contains wildcard characters (which can match with any other character). The first non-trivial solution for the problem was given by Cole et al. [11], where the index space is O (n log(k) n) words or O (nlog(k+1) n) bits and the query time is O (p +2(h) log logn + occ), where k is the maximum number of wildcard characters allowed in P, h <= k is the number of wildcard characters in P and occ represents the number of occurrences of P in T. Even though many indexes offering different space-time trade-offs were later proposed, a clear improvement on this result is still not known. In this paper, we first propose an O (n log(k+E) n) bits index achieving the same query time as the of Cole et al.'s index, where 0 < epsilon < 1 is an arbitrary small constant. Then we propose another index of size O (n log(k) n log sigma) bits, but with a slightly higher query time of O (p + 2(h) logn + occ), where sigma denotes the alphabet set size. We also study a related problem, where the task is to index a collection of documents (of n characters in total) so as to find the number of distinct documents containing a query pattern P. For the case where P contains at most a single wildcard character, we propose an 0 (n log n)-word index with optimal O(p) query time. Published by Elsevier B.V.", "paper_title": "Less space: Indexing for queries with wildcards", "paper_id": "WOS:000343784800011"}