{"auto_keywords": [{"score": 0.04624543835729454, "phrase": "manhattan_network"}, {"score": 0.00481495049065317, "phrase": "greedy_construction"}, {"score": 0.0046632033374901715, "phrase": "set_t"}, {"score": 0.0046038458731764926, "phrase": "n_points"}, {"score": 0.003872414709826833, "phrase": "vertical_or_horizontal_line_segments"}, {"score": 0.0029203055813347874, "phrase": "minimum_length"}, {"score": 0.0028281000453392272, "phrase": "total_length"}, {"score": 0.0027741761880779535, "phrase": "line_segments"}, {"score": 0.0022159566043745724, "phrase": "linear_programming"}, {"score": 0.0021876814398268775, "phrase": "dynamic_programming_techniques"}, {"score": 0.0021049977753042253, "phrase": "greedy_strategy"}], "paper_keywords": ["Minimum Manhattan networks", " approximation algorithms", " greedy strategy"], "paper_abstract": "Given a set T of n points in R(2), a Manhattan network on T is a graph G = (V, E) with the property that all the edges in E are vertical or horizontal line segments connecting points in V superset of T and for all p, q is an element of T, the graph contains a path having the length exactly L(1) distance between p and q. The Minimum Manhattan Network problem is to find a Manhattan network of minimum length, i.e. minimizing the total length of the line segments of the network. In this paper we present a 2-approximation algorithm with time complexity O(n log n), which improves over a recent combinatorial 2-approximation algorithm with running time O(n(2)). Moreover, compared with other 2-approximation algorithms using linear programming or dynamic programming techniques, we show that a greedy strategy suffices to obtain a 2-approximation algorithm.", "paper_title": "GREEDY CONSTRUCTION OF 2-APPROXIMATE MINIMUM MANHATTAN NETWORKS", "paper_id": "WOS:000292166600005"}