{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "source_code"}, {"score": 0.004779564521350969, "phrase": "source_code_comments"}, {"score": 0.004726970265271088, "phrase": "valuable_instrument"}, {"score": 0.004674952036988355, "phrase": "design_decisions"}, {"score": 0.003584025547693836, "phrase": "source_code_entities"}, {"score": 0.0031377955308198634, "phrase": "eight_different_open_source"}, {"score": 0.0031146967095233586, "phrase": "closed_source_software_systems"}, {"score": 0.0030576885787607796, "phrase": "statistical_significance"}, {"score": 0.0029906503184034634, "phrase": "relative_amount"}, {"score": 0.0028398718024224166, "phrase": "source_code_entity"}, {"score": 0.0027878797103973313, "phrase": "method_declaration"}, {"score": 0.002716681656135794, "phrase": "significant_influence"}, {"score": 0.002551231163230566, "phrase": "eight_systems"}, {"score": 0.002369420749617696, "phrase": "api"}, {"score": 0.0022250584824198218, "phrase": "later_revision"}, {"score": 0.0021522261505574035, "phrase": "quantitative_assessment"}, {"score": 0.0021284812539167112, "phrase": "commenting_process"}, {"score": 0.0021049977753042253, "phrase": "software_system"}], "paper_keywords": ["Software evolution analysis", " Software repositories", " Source code changes", " Comment changes", " Comment quality", " Software maintenance"], "paper_abstract": "Source code comments are a valuable instrument to preserve design decisions and to communicate the intent of the code to programmers and maintainers. Nevertheless, commenting source code and keeping comments up-to-date is often neglected for reasons of time or programmers obliviousness. In this paper, we investigate the question whether developers comment their code and to what extent they add comments or adapt them when they evolve the code. We present an approach to associate comments with source code entities to track their co-evolution over multiple versions. A set of heuristics are used to decide whether a comment is associated with its preceding or its succeeding source code entity. We analyzed the co-evolution of code and comments in eight different open source and closed source software systems. We found with statistical significance that (1) the relative amount of comments and source code grows at about the same rate; (2) the type of a source code entity, such as a method declaration or an if-statement, has a significant influence on whether or not it gets commented; (3) in six out of the eight systems, code and comments co-evolve in 90% of the cases; and (4) surprisingly, API changes and comments do not co-evolve but they are re-documented in a later revision. As a result, our approach enables a quantitative assessment of the commenting process in a software system. We can, therefore, leverage the results to provide feedback during development to increase the awareness of when to add comments or when to adapt comments because of source code changes.", "paper_title": "Analyzing the co-evolution of comments and source code", "paper_id": "WOS:000269536600004"}