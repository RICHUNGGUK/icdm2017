{"auto_keywords": [{"score": 0.043386623096297906, "phrase": "evidence_propagation"}, {"score": 0.03755359252962418, "phrase": "execution_time"}, {"score": 0.00481495049065317, "phrase": "multicore_processors"}, {"score": 0.004692227830462433, "phrase": "parallel_evidence_propagation_method"}, {"score": 0.004644014990871423, "phrase": "general-purpose_multicore_processors"}, {"score": 0.00450231514359539, "phrase": "major_step"}, {"score": 0.004456044928556639, "phrase": "exact_inference"}, {"score": 0.004297795905522757, "phrase": "probabilistic_graphical_models"}, {"score": 0.0039772848945723435, "phrase": "arbitrary_junction_tree"}, {"score": 0.0038758293658651237, "phrase": "directed_acyclic_graph"}, {"score": 0.0037769520261285872, "phrase": "weighted_nodes"}, {"score": 0.003680587852807675, "phrase": "computation_task"}, {"score": 0.0033883824438527316, "phrase": "workload-aware_scheduler"}, {"score": 0.0029620573986902416, "phrase": "load_balance"}, {"score": 0.0026297428083782875, "phrase": "large_potential_tables"}, {"score": 0.0025625729433234623, "phrase": "improved_load_balance"}, {"score": 0.0024971144603069006, "phrase": "proposed_method"}, {"score": 0.00243336527013482, "phrase": "amd"}, {"score": 0.0024082943475265744, "phrase": "intel"}, {"score": 0.0023958326775913165, "phrase": "quadcore_processors"}, {"score": 0.0023467391904246834, "phrase": "representative_set"}, {"score": 0.0023225701080913388, "phrase": "junction_trees"}, {"score": 0.0022749744354271816, "phrase": "almost_linear_speedup"}, {"score": 0.002126907587540404, "phrase": "openmp-based_implementation"}], "paper_keywords": ["Exact inference", " Multicore processor", " Junction tree", " Scheduling", " DAG-structured computation"], "paper_abstract": "We propose a parallel evidence propagation method on general-purpose multicore processors. Evidence propagation is a major step in exact inference, a key problem in exploring probabilistic graphical models. We explore the parallelism in evidence propagation at various levels. First, given an arbitrary junction tree, we construct a directed acyclic graph (DAG) with weighted nodes, each denoting a computation task for evidence propagation. Since the execution time of the tasks varies significantly, we develop a workload-aware scheduler to allocate the tasks to the cores of the processors. The scheduler monitors the workload of each core and dynamically allocates tasks to support load balance across the cores. In addition, we integrate a module in the scheduler to partition the tasks converted from cliques with large potential tables so as to achieve improved load balance. We implemented the proposed method using Pthreads on both AMD and Intel quadcore processors. For a representative set of junction trees, our method achieved almost linear speedup. The execution time of our method was around twice as fast as an OpenMP-based implementation on both the platforms.", "paper_title": "Parallel evidence propagation on multicore processors", "paper_id": "WOS:000292658000009"}