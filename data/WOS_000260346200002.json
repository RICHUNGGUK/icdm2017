{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "code_mobility"}, {"score": 0.004767261858417823, "phrase": "mobile_agents"}, {"score": 0.004490842671590769, "phrase": "open_distributed_applications"}, {"score": 0.0043804319008535555, "phrase": "pervasive_nature"}, {"score": 0.00392586404888927, "phrase": "mobility_scattering"}, {"score": 0.0035712919163869176, "phrase": "mobility_platforms"}, {"score": 0.003448863509392547, "phrase": "architectural_restrictions"}, {"score": 0.003347259612209552, "phrase": "pressing_need"}, {"score": 0.0032486392192981944, "phrase": "architectural_frame-work"}, {"score": 0.0032004205378150354, "phrase": "flexible_incorporation"}, {"score": 0.003121636289442593, "phrase": "agent_applications"}, {"score": 0.003029643234751066, "phrase": "aspect-oriented_software_architecture"}, {"score": 0.0028822890425197582, "phrase": "enhanced_modularization"}, {"score": 0.0028253682745674608, "phrase": "agent_systems"}, {"score": 0.0027284410545226306, "phrase": "otherwise_stationary_agents"}, {"score": 0.0026745503978347143, "phrase": "oo_apis'_restrictions"}, {"score": 0.0026086775334428617, "phrase": "specific_platforms"}, {"score": 0.002544422946205545, "phrase": "archm_implementation"}, {"score": 0.0025066304722422463, "phrase": "fine-grained_problems"}, {"score": 0.00239657981537094, "phrase": "implementation_level"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["mobile agents", " aspect-oriented software development", " reuse"], "paper_abstract": "Mobile agents have come forward as a technique for tackling the complexity of open distributed applications. However. the pervasive nature of code mobility implies that it cannot be modularized using only object-oriented (00) concepts. In fact, developers frequently evidence the presence of mobility scattering in their system's modules. Despite these problems, they usually rely on 00 application programming interfaces (APIs) offered by the mobility platforms. Such classical API-oriented designs suffer a number of architectural restrictions, and there is a pressing need for empowering developers with an architectural frame-work supporting a flexible incorporation of code mobility in the agent applications. This work presents an aspect-oriented software architecture, called ArchM, ensuring that code mobility has an enhanced modularization and variability in agent systems, and is straightforwardly introduced in otherwise stationary agents. It addresses OO APIs' restrictions and is independent of specific platforms and applications. An ArchM implementation also overcomes fine-grained problems related to mobility tangling and scattering at the implementation level. The usefulness and usability of ArchM are assessed within the context of two case studies and through its composition with two mobility platforms. Copyright (C) 2008 John Wiley & Sons, Ltd.", "paper_title": "An aspect-oriented software architecture for code mobility", "paper_id": "WOS:000260346200002"}