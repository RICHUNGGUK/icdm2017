{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "execution_logs"}, {"score": 0.0061762976483307405, "phrase": "log_line"}, {"score": 0.005146415485137983, "phrase": "log_files"}, {"score": 0.004771196027464407, "phrase": "execution_events"}, {"score": 0.004642292792558686, "phrase": "output_statements"}, {"score": 0.004516856326107826, "phrase": "source_code"}, {"score": 0.004122604238556912, "phrase": "complex_enterprise_applications"}, {"score": 0.0040111533608228195, "phrase": "standardized_log_formats"}, {"score": 0.003832031470970347, "phrase": "ad_hoc_non-standardized_logging_formats"}, {"score": 0.0036275736378775757, "phrase": "loosely_defined_structure"}, {"score": 0.0035781807623238905, "phrase": "large_non-fixed_vocabulary"}, {"score": 0.00349734405943853, "phrase": "large_volume"}, {"score": 0.0034027387694902287, "phrase": "enterprise_applications"}, {"score": 0.003310684108128973, "phrase": "manual_analysis_techniques"}, {"score": 0.0032805541677236325, "phrase": "automated_techniques"}, {"score": 0.003105428650735113, "phrase": "uncovered_structure"}, {"score": 0.0030771609361092164, "phrase": "sophisticated_analysis"}, {"score": 0.0028863414975346512, "phrase": "log_abstraction_technique"}, {"score": 0.0028340217672278975, "phrase": "internal_structure"}, {"score": 0.00274472767672686, "phrase": "recovered_structure"}, {"score": 0.0027197343489967322, "phrase": "log_lines"}, {"score": 0.0025627194819793347, "phrase": "complex_behavior"}, {"score": 0.002539379289856756, "phrase": "large_software_applications"}, {"score": 0.002493333098814506, "phrase": "free-form_log_lines"}, {"score": 0.002349357968054713, "phrase": "case_study"}, {"score": 0.0022136780933978612, "phrase": "different_complexities"}, {"score": 0.002193509835371438, "phrase": "high_precision"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["execution logs", " dynamic analysis", " clone detection"], "paper_abstract": "Execution logs are generated by output statements that developers insert into the source code. Execution logs are widely available and are helpful in monitoring, remote issue resolution, and system understanding of complex enterprise applications. There are many proposals for standardized log formats such as the W3C and SNMP formats. However, most applications use ad hoc non-standardized logging formats. Automated analysis of such logs is complex due to the loosely defined structure and a large non-fixed vocabulary of words. The large volume of logs, produced by enterprise applications, limits the usefulness of manual analysis techniques. Automated techniques are needed to uncover the structure of execution logs. Using the uncovered structure, sophisticated analysis of logs call be performed. In this paper, we propose a log abstraction technique that recognizes the internal structure of each log line. Using the recovered structure, log lines call he easily summarized and categorized to help comprehend and investigate the complex behavior of large software applications. Our proposed approach handles free-form log lines with minimal requirements on the format of a log line. Through a case study using log files from four enterprise applications, we demonstrate that our approach abstracts log files of different complexities with high precision and recall. Copyright (C) 2008 John Wiley & Sons, Ltd.", "paper_title": "An automated approach for abstracting execution logs to execution events", "paper_id": "WOS:000258731800003"}