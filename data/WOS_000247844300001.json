{"auto_keywords": [{"score": 0.04472882712454684, "phrase": "time_and_space_efficiencies"}, {"score": 0.038365578567144946, "phrase": "index_structure"}, {"score": 0.00481495049065317, "phrase": "high_storage_utilization"}, {"score": 0.004758457292840376, "phrase": "retrieval_efficiency"}, {"score": 0.0047026237903774895, "phrase": "large_spatial_databases"}, {"score": 0.004565876339189493, "phrase": "high-dimensional_data"}, {"score": 0.00438105507792004, "phrase": "information_retrieval_system"}, {"score": 0.0037797419108291227, "phrase": "good_performance"}, {"score": 0.003584025547693836, "phrase": "multidimensional_data"}, {"score": 0.0034185505275141077, "phrase": "low_storage_utilization_problem"}, {"score": 0.0033584796908285894, "phrase": "imperfect_\"splitting_policies"}, {"score": 0.003299460925313939, "phrase": "unnecessary_splits"}, {"score": 0.002931569771634119, "phrase": "new_data_insertion_algorithm"}, {"score": 0.0028800314406625996, "phrase": "better_splitting_policy"}, {"score": 0.0027796495180095657, "phrase": "data_entries"}, {"score": 0.0027307746993761035, "phrase": "leaf_nodes"}, {"score": 0.002620040660435039, "phrase": "storage_utilization"}, {"score": 0.0025137856138000014, "phrase": "index_size"}, {"score": 0.00246957392654378, "phrase": "smaller_scale"}, {"score": 0.0023003498123420237, "phrase": "analytical_and_experimental_results"}, {"score": 0.0022201273900989416, "phrase": "traditional_kdb-tree"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["spatial database", " KDB-trees", " splitting policy", " storage utilization"], "paper_abstract": "Storing and querying high-dimensional data are important problems in designing an information retrieval system. Two crucial issues, time and space efficiencies, must be considered when evaluating the performance of such a system. The KDB-tree and its variants have been reported to have good performance by using them as the index structure for retrieving multidimensional data. However, they all suffer from low storage utilization problem caused by imperfect \"splitting policies.\" Unnecessary splits increase the size of the index structure and deteriorate the performance of the system. In this paper, a new data insertion algorithm with a better splitting policy was proposed, which arranged data entries in the leaf nodes as many as possible. Our new index scheme can increase the storage utilization up to nearly 100% and reduce the index size to a smaller scale. As a result, both time and space efficiencies are significantly improved. Analytical and experimental results show that our indexing method outperforms the traditional KDB-tree and its variants. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "A new indexing method with high storage utilization and retrieval efficiency for large spatial databases", "paper_id": "WOS:000247844300001"}