{"auto_keywords": [{"score": 0.038521130357784865, "phrase": "koru_et_al"}, {"score": 0.031325598349779195, "phrase": "survival_analysis"}, {"score": 0.010266624572414848, "phrase": "software_systems"}, {"score": 0.006690596598266767, "phrase": "size-defect_relationship"}, {"score": 0.00481495049065317, "phrase": "relative_defect-proneness"}, {"score": 0.00476707052021167, "phrase": "good_understanding"}, {"score": 0.004595529592539951, "phrase": "software_practitioners"}, {"score": 0.00448958076531243, "phrase": "quality_improvement_efforts"}, {"score": 0.00443013401197632, "phrase": "testing_and_code_reviews"}, {"score": 0.004386063799793622, "phrase": "defect_prediction_models"}, {"score": 0.004284923367722827, "phrase": "regression_analysis"}, {"score": 0.0042281749832498, "phrase": "process_metrics"}, {"score": 0.0041721750101390825, "phrase": "single_point"}, {"score": 0.003995226376780718, "phrase": "current_defect_prediction_models"}, {"score": 0.0037624955853577786, "phrase": "software_quality_improvements_efforts"}, {"score": 0.0036269721030245507, "phrase": "survival_analysis_techniques"}, {"score": 0.0035908627899097407, "phrase": "large_number"}, {"score": 0.003370344851760079, "phrase": "source_code_module"}, {"score": 0.0028145947051539354, "phrase": "replication_studies"}, {"score": 0.0027865506182608263, "phrase": "important_component"}, {"score": 0.0027680095380207756, "phrase": "balanced_scholarly_debate"}, {"score": 0.002722193310541633, "phrase": "replication_study"}, {"score": 0.0024627509513027923, "phrase": "original_paper"}, {"score": 0.00235813005446246, "phrase": "traditional_domains"}], "paper_keywords": ["Survival analysis", " Cox models", " defect modelling"], "paper_abstract": "A good understanding of the factors impacting defects in software systems is essential for software practitioners, because it helps them prioritize quality improvement efforts (e.g., testing and code reviews). Defect prediction models are typically built using classification or regression analysis on product and/or process metrics collected at a single point in time (e.g., a release date). However, current defect prediction models only predict if a defect will occur, but not when, which makes the prioritization of software quality improvements efforts difficult. To address this problem, Koru et al. applied survival analysis techniques to a large number of software systems to study how size (i.e., lines of code) influences the probability that a source code module (e.g., class or file) will experience a defect at any given time. Given that 1) the work of Koru et al. has been instrumental to our understanding of the size-defect relationship, 2) the use of survival analysis in the context of defect modelling has not been well studied and 3) replication studies are an important component of balanced scholarly debate, we present a replication study of the work by Koru et al. In particular, we present the details necessary to use survival analysis in the context of defect modelling (such details were missing from the original paper by Koru et al.). We also explore how differences between the traditional domains of survival analysis (i.e., medicine and epidemiology) and defect modelling impact our understanding of the size-defect relationship. Practitioners and researchers considering the use of survival analysis should be aware of the implications of our findings.", "paper_title": "Replicating and Re-Evaluating the Theory of Relative Defect-Proneness", "paper_id": "WOS:000351460400004"}