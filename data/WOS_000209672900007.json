{"auto_keywords": [{"score": 0.026248876287948888, "phrase": "cbmc"}, {"score": 0.007611648348223196, "phrase": "cfg"}, {"score": 0.0056564605531079235, "phrase": "flasher_manager"}, {"score": 0.005173918336888753, "phrase": "dpvs"}, {"score": 0.0048149554965766835, "phrase": "bmc"}, {"score": 0.004720419202969916, "phrase": "safety_property_checking"}, {"score": 0.004643055780443262, "phrase": "validation_process"}, {"score": 0.00461246494886034, "phrase": "critical_software"}, {"score": 0.004566954456805558, "phrase": "formal_verification_tools"}, {"score": 0.004447766706144458, "phrase": "automatic_generation"}, {"score": 0.004331675965350876, "phrase": "important_issue"}, {"score": 0.004067910470129423, "phrase": "program_verification"}, {"score": 0.00404109360612109, "phrase": "counterexample_generation"}, {"score": 0.004014452814186653, "phrase": "real_applications"}, {"score": 0.003961694867182568, "phrase": "dynamic_post-condition_variable-driven_strategy"}, {"score": 0.0037824221315407355, "phrase": "industrial_application"}, {"score": 0.0037450707321601963, "phrase": "car_manufacturer"}, {"score": 0.0036593403276183245, "phrase": "backjumping_strategy"}, {"score": 0.003587415196933649, "phrase": "faulty_path"}, {"score": 0.0034706569037527774, "phrase": "simplified_control_flow_graph"}, {"score": 0.0033465923623290034, "phrase": "backward_way"}, {"score": 0.0030003014343035965, "phrase": "dynamic_and_non-sequential_backward_way"}, {"score": 0.0028739078688746374, "phrase": "simulink_platform"}, {"score": 0.002771115819151223, "phrase": "c_program"}, {"score": 0.0027437235598539904, "phrase": "car_computer"}, {"score": 0.002663156413861478, "phrase": "safety_properties"}, {"score": 0.0026194209399161184, "phrase": "c_code"}, {"score": 0.00250073564820402, "phrase": "model_checker"}, {"score": 0.0023096222276192194, "phrase": "similar_performances"}, {"score": 0.0021049977753042253, "phrase": "dpvs."}], "paper_keywords": ["Embedded systems", " Validation", " Constraint-based bounded model checking", " Counterexample generation"], "paper_abstract": "Safety property checking is mandatory in the validation process of critical software. When formal verification tools fail to prove some properties, the automatic generation of counterexamples for a given loop depth is an important issue in practice. We investigate in this paper the capabilities of constraint-based bounded model checking for program verification and counterexample generation on real applications. We introduce dynamic post-condition variable-driven strategy (DPVS), a new backjumping strategy we developed to handle an industrial application from a car manufacturer, the Flasher Manager. This backjumping strategy is used to search a faulty path and to collect the constraints of such a path. The simplified control flow graph (CFG) of the program is explored in a backward way, starting from the post-condition and jumping to the most promising node where the variables of the post-condition are defined. In other words, the constraints are collected by exploring the CFG in a dynamic and non-sequential backward way. The Flasher Manager application has been designed and simulated using the Simulink platform. However, this module is concretely embedded as a C program in a car computer, thus we have to check that the safety properties are preserved on this C code. We report experiments on the Flasher Manager with our constraint-based bounded model checker, and with CBMC, a state-of-the-art bounded model checker. Experiments show that DPVS and CBMC have similar performances on one property of the Flasher Manager; DPVS outperforms CBMC to find a counterexample for two properties; two of the properties of the Flasher Manager remain intractable for CBMC and DPVS.", "paper_title": "Constraint-based BMC: a backjumping strategy", "paper_id": "WOS:000209672900007"}