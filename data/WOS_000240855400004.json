{"auto_keywords": [{"score": 0.028017230475481696, "phrase": "mpi"}, {"score": 0.01918482563114819, "phrase": "fortran"}, {"score": 0.007711416528388632, "phrase": "ibm"}, {"score": 0.004621671570727774, "phrase": "parallel_divide-and-conquer_delaunay_triangulation_scheme"}, {"score": 0.003922794571908569, "phrase": "affected_zone"}, {"score": 0.003540539868937462, "phrase": "time_complexity"}, {"score": 0.0034686643139273934, "phrase": "divide-and-conquer_scheme"}, {"score": 0.0032173412933955117, "phrase": "affected_region"}, {"score": 0.002497862210672172, "phrase": "experimental_results"}, {"score": 0.002364777610365689, "phrase": "parallel_efficiency"}, {"score": 0.002300912218086077, "phrase": "general_distributions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Delaunay triangulation", " parallel algorithm", " unstructured mesh generation"], "paper_abstract": "This work describes a parallel divide-and-conquer Delaunay triangulation scheme. This algorithm finds the affected zone, which covers the triangulation and may be modified when two sub-block triangulations are merged. Finding the affected zone can reduce the amount of data required to be transmitted between processors. The time complexity of the divide-and-conquer scheme remains O (n log n), and the affected region can be located in O (n) time steps, where n denotes the number of points. The code was implemented with C, FORTRAN and MPI, making it portable to many computer systems. Experimental results on an IBM SP2 show that a parallel efficiency of 44-95% for general distributions can be attained on a 16-node distributed memory system. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Parallel divide-and-conquer scheme for 2D Delaunay triangulation", "paper_id": "WOS:000240855400004"}