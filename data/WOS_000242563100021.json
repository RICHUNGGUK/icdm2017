{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "eqm"}, {"score": 0.0041586840496756474, "phrase": "bandwidth_share"}, {"score": 0.004014923642015515, "phrase": "interfering_flow"}, {"score": 0.0038989120088094185, "phrase": "link_capacity"}, {"score": 0.0038534477978822133, "phrase": "interface_ip_address"}, {"score": 0.003119760592916715, "phrase": "path_drop"}, {"score": 0.0029075757820516634, "phrase": "non-dropped_packets"}, {"score": 0.0028568174308720167, "phrase": "allowable_optimal_throughput"}, {"score": 0.0028069426877159642, "phrase": "next_round"}, {"score": 0.0024813081174066653, "phrase": "allowable_throughput"}, {"score": 0.002409503258044183, "phrase": "returning_acks"}, {"score": 0.002298902547676131, "phrase": "fair_bandwidth_allocation"}, {"score": 0.002258745901862197, "phrase": "fair_queue_management"}, {"score": 0.0021049977753042253, "phrase": "stable_point"}], "paper_keywords": [""], "paper_abstract": "In this paper I present a simple and efficient queue management (EQM) technique based on optimal bandwidth allocation for networks. Each router calculates the bandwidth share (throughput)(1) of each interfering flow at a link using link capacity and Interface IP Address (see RFC 3630) or round trip time (RTT) and congestion window size of the flows which are carried in the packets. The sources send packets and the routers in the path drop or allow the packets based on a certain probability and label the non-dropped packets with the allowable optimal throughput for the next round. Each router in the path modifies this label and the sources eventually adjust their sending rates based on the allowable throughput they get from the returning ACKs. In this way EQM finds the fair bandwidth allocation and gives fair queue management. I also a prove that EQM can converge to a stable point.", "paper_title": "An efficient queue management (EQM) technique for networks", "paper_id": "WOS:000242563100021"}