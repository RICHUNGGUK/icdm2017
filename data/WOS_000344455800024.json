{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "transient_memory_errors"}, {"score": 0.004608730887154718, "phrase": "hardware_memory_systems"}, {"score": 0.004435514622798228, "phrase": "memory_systems"}, {"score": 0.004199247711875386, "phrase": "hardware-based_error_detection"}, {"score": 0.004063547375196532, "phrase": "complete_data_path"}, {"score": 0.003910740988145338, "phrase": "memory_system"}, {"score": 0.00380511089035825, "phrase": "sufficient_redundancy"}, {"score": 0.0035826234811610316, "phrase": "commodity_computing_platforms"}, {"score": 0.0034478392374444177, "phrase": "high-end_systems"}, {"score": 0.003373101013123386, "phrase": "multi-bit_errors"}, {"score": 0.003228434077467506, "phrase": "hardware_error_detection_schemes"}, {"score": 0.0031240075437664314, "phrase": "considerable_interest"}, {"score": 0.002989991779830814, "phrase": "software-level_mechanisms"}, {"score": 0.002925149105307855, "phrase": "transient_memory_faults"}, {"score": 0.002861708609922034, "phrase": "novel_compile-time_algorithms"}, {"score": 0.0027691111795848156, "phrase": "checksum_computation_codes"}, {"score": 0.0027239390917424898, "phrase": "memory_errors"}, {"score": 0.002679501909303057, "phrase": "prior_approaches"}, {"score": 0.0026070408483940535, "phrase": "computational_and_architectural_states"}, {"score": 0.002522662955545598, "phrase": "data_access"}, {"score": 0.002349073225500705, "phrase": "experimental_evaluation"}, {"score": 0.0022980978400845144, "phrase": "proposed_comprehensive_error_detection_solution"}, {"score": 0.0022359278646792153, "phrase": "completely_software-only_scheme"}, {"score": 0.0021516991383785985, "phrase": "limited_hardware_support"}, {"score": 0.0021049977753042253, "phrase": "error_detection"}], "paper_keywords": ["Performance", " Reliability", " Transient memory errors", " def-use tracking", " checksums"], "paper_abstract": "The probability of bit flips in hardware memory systems is projected to increase significantly as memory systems continue to scale in size and complexity. Effective hardware-based error detection and correction require that the complete data path, involving all parts of the memory system, be protected with sufficient redundancy. First, this may be costly to employ on commodity computing platforms, and second, even on high-end systems, protection against multi-bit errors may be lacking. Therefore, augmenting hardware error detection schemes with software techniques is of considerable interest. In this paper, we consider software-level mechanisms to comprehensively detect transient memory faults. We develop novel compile-time algorithms to instrument application programs with checksum computation codes to detect memory errors. Unlike prior approaches that employ checksums on computational and architectural states, our scheme verifies every data access and works by tracking variables as they are produced and consumed. Experimental evaluation demonstrates that the proposed comprehensive error detection solution is viable as a completely software-only scheme. We also demonstrate that with limited hardware support, overheads of error detection can be further reduced.", "paper_title": "Compiler-Assisted Detection of Transient Memory Errors", "paper_id": "WOS:000344455800024"}