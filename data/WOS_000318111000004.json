{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "compressed_parity-check_matrices"}, {"score": 0.014327639846727086, "phrase": "ldpc_code"}, {"score": 0.012050043497563952, "phrase": "cnd"}, {"score": 0.00844239073948088, "phrase": "central_processing_unit"}, {"score": 0.004536244367689415, "phrase": "shannon's_limits"}, {"score": 0.004440648141548589, "phrase": "error_performance"}, {"score": 0.004328576620172575, "phrase": "computer_simulation_time"}, {"score": 0.004255431326383001, "phrase": "primary_concern"}, {"score": 0.0041835168653521, "phrase": "noise-corrupted_codewords"}, {"score": 0.003841699919521703, "phrase": "parity-check_matrix"}, {"score": 0.0037128955884188773, "phrase": "check-node_domain"}, {"score": 0.0036037265181631324, "phrase": "bit-node_domain"}, {"score": 0.0032531501449775064, "phrase": "bnd"}, {"score": 0.0029744042270542655, "phrase": "proposed_message_matrices"}, {"score": 0.002886885861509621, "phrase": "iterative_ldpc_decoding_algorithm"}, {"score": 0.0027781249331615813, "phrase": "small_memory_size"}, {"score": 0.0026507289852980512, "phrase": "cache_memory"}, {"score": 0.0025291601927956765, "phrase": "random_access_memory"}, {"score": 0.002475755804232436, "phrase": "simulation_time"}, {"score": 0.0022634699331607615, "phrase": "conversion_matrices"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["compressed parity-check matrices", " domain conversion matrices", " LDPC codes", " simulation time"], "paper_abstract": "Low-density parity-check (LDPC) codes are very powerful error-correction codes with capabilities approaching the Shannon's limits. In evaluating the error performance of an LDPC code, the computer simulation time taken becomes a primary concern when tens of millions of noise-corrupted codewords are to be decoded, particularly for codes with very long lengths. In this paper, we propose modeling the parity-check matrix of an LDPC code with compressed parity-check matrices in the check-node domain (CND) and in the bit-node domain (BND), respectively. Based on the compressed parity-check matrices, we created two message matrices, one in the CND and another in the BND, and two domain conversion matrices, one from CND to BND and another from BND to CND. With the proposed message matrices, the data used in the iterative LDPC decoding algorithm can be closely packed and stored within a small memory size. Consequently, such data can be mostly stored in the cache memory, reducing the need for the central processing unit to access the random access memory and hence improving the simulation time significantly. Furthermore, the messages in one domain can be easily converted to another domain with the use of the conversion matrices, facilitating the central processing unit to access and update the messages. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "A fast low-density parity-check code simulator based on compressed parity-check matrices", "paper_id": "WOS:000318111000004"}