{"auto_keywords": [{"score": 0.048734215142491696, "phrase": "stream-processing_programs"}, {"score": 0.04710194427159924, "phrase": "buffering_primitives"}, {"score": 0.00481495049065317, "phrase": "type-based_approach"}, {"score": 0.004116440453049531, "phrase": "tree-processing_programs"}, {"score": 0.003752126270661821, "phrase": "input_data"}, {"score": 0.003419943984098415, "phrase": "input_stream"}, {"score": 0.0033001333942688747, "phrase": "constructed_trees"}, {"score": 0.0031845067058084583, "phrase": "output_stream"}, {"score": 0.0027610089418453614, "phrase": "above-mentioned_problems"}, {"score": 0.0025892330566358503, "phrase": "simply-typed_tree-processing_program"}, {"score": 0.002445514186654732, "phrase": "resulting_program"}, {"score": 0.0021049977753042253, "phrase": "equivalent_stream-processing_program"}], "paper_keywords": [""], "paper_abstract": "In our previous paper, we have proposed a framework for automatically translating tree-processing programs into stream-processing programs. However, in writing programs that require buffering of input data, a user has to explicitly use buffering primitives which copy data from input stream to memory or copy constructed trees from memory to an output stream. Such explicit insertion of buffering primitives is often cumbersome and worsens the readability of the program. We overcome the above-mentioned problems by developing an algorithm which, given any simply-typed tree-processing program, automatically inserts buffering primitives. The resulting program is guaranteed to be well-typed under our previous ordered-linear type system, so that the program can be further transformed into an equivalent stream-processing program using our previous framework.", "paper_title": "Extension of type-based approach to generation of stream-processing programs by automatic insertion of buffering primitives", "paper_id": "WOS:000237004300007"}