{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "aspect-oriented_features"}, {"score": 0.0047310525657970615, "phrase": "embedded_systems"}, {"score": 0.004358368398332723, "phrase": "aspect-oriented_modularity_features"}, {"score": 0.004207734323806386, "phrase": "different_implementation_characteristics"}, {"score": 0.0041102032028337366, "phrase": "runtime_data"}, {"score": 0.003742084495435749, "phrase": "low-level_data_representation"}, {"score": 0.0035705347414368696, "phrase": "specifically-tailored_fixed-point_data_representations"}, {"score": 0.0034068225125064586, "phrase": "underlying_hardware"}, {"score": 0.0033277936960179892, "phrase": "digital_signal_processors"}, {"score": 0.0032889671598112023, "phrase": "application-specific_architectures"}, {"score": 0.0032315723330399375, "phrase": "built-in_floating_point_units"}, {"score": 0.0029766550209309127, "phrase": "non-invasive_way"}, {"score": 0.002890557197908352, "phrase": "matlab_functions"}, {"score": 0.0028568174308720167, "phrase": "optimized_implementations"}, {"score": 0.0028234703730349916, "phrase": "different_aspect_modules"}, {"score": 0.002725740264152553, "phrase": "common_matlab_code_bases"}, {"score": 0.002570296816631395, "phrase": "proposed_approach"}, {"score": 0.00249592321829865, "phrase": "representative_examples"}, {"score": 0.0024236964502593254, "phrase": "simple_way"}, {"score": 0.0023124457559811087, "phrase": "experiment_results"}, {"score": 0.002272053079580848, "phrase": "aspect-oriented_software_metrics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Aspect-oriented programming", " MATLAB", " Embedded systems"], "paper_abstract": "This article presents an approach to enrich the MATLAB(1) language with aspect-oriented modularity features, enabling developers to experiment different implementation characteristics and to acquire runtime data and traces without polluting their base MATLAB code. We propose a language through which programmers configure the low-level data representation of variables and expressions. Examples include specifically-tailored fixed-point data representations leading to more efficient support for the underlying hardware, e.g., digital signal processors and application-specific architectures, without built-in floating point units. This approach assists developers in adding handlers and monitoring features in a non-invasive way as well as configuring MATLAB functions with optimized implementations. Different aspect modules can be used to retarget common MATLAB code bases for different purposes and implementations. We validate the proposed approach with a set of representative examples where we attain a simple way to explore a number of properties. Experiment results and collected aspect-oriented software metrics lend support to the claims on its usefulness. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Enriching MATLAB with aspect-oriented features for developing embedded systems", "paper_id": "WOS:000323405100007"}