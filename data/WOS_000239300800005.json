{"auto_keywords": [{"score": 0.04933401710855323, "phrase": "software_system"}, {"score": 0.00481495049065317, "phrase": "source_code"}, {"score": 0.004405348628112645, "phrase": "paramount_importance"}, {"score": 0.004291617358806677, "phrase": "computer_programs"}, {"score": 0.004137288854115515, "phrase": "virtually_every_programming_language"}, {"score": 0.004030449969901066, "phrase": "almost_arbitrary_sequences"}, {"score": 0.003629882559085245, "phrase": "coding_style"}, {"score": 0.003118486096035156, "phrase": "adequate_identifier"}, {"score": 0.0030062165552187086, "phrase": "formal_model"}, {"score": 0.0029438813080245544, "phrase": "bijective_mappings"}, {"score": 0.002823050755743821, "phrase": "solid_foundation"}, {"score": 0.002750056254309311, "phrase": "precise_rules"}, {"score": 0.0027213882346615406, "phrase": "concise_and_consistent_naming"}, {"score": 0.002476424729269258, "phrase": "complete_identifier_dictionary"}, {"score": 0.002362320344521919, "phrase": "identifier_dictionary"}, {"score": 0.0022299587520401747, "phrase": "consistent_naming"}, {"score": 0.0021496083700137305, "phrase": "suitable_names"}, {"score": 0.0021049977753042253, "phrase": "current_context"}], "paper_keywords": [""], "paper_abstract": "Approximately 70% of the source code of a software system consists of identifiers. Hence, the names chosen as identifiers are of paramount importance for the readability of computer programs and therewith their comprehensibility. However, virtually every programming language allows programmers to use almost arbitrary sequences of characters as identifiers which far too often results in more or less meaningless or even misleading naming. Coding style guides somehow address this problem but are usually limited to general and hard to enforce rules like \"identifiers should be self-describing\". This paper renders adequate identifier naming far more precisely. A formal model, based on bijective mappings between concepts and names, provides a solid foundation for the definition of precise rules for concise and consistent naming. The enforcement of these rules is supported by a tool that incrementally builds and maintains a complete identifier dictionary while the system is being developed. The identifier dictionary explains the language used in the software system, aids in consistent naming, and supports programmers by proposing suitable names depending on the current context.", "paper_title": "Concise and consistent naming", "paper_id": "WOS:000239300800005"}