{"auto_keywords": [{"score": 0.004815234261597609, "phrase": "dynamic"}, {"score": 0.004603244077348199, "phrase": "database_tables"}, {"score": 0.004327196832280818, "phrase": "node_splitting_operations"}, {"score": 0.004044822781630218, "phrase": "node_splitting_operation"}, {"score": 0.0036144035798673967, "phrase": "different_flash_blocks"}, {"score": 0.00319348234663792, "phrase": "ipl_scheme"}, {"score": 0.0030017207229983385, "phrase": "frequent_log_overflow"}, {"score": 0.00293487292076612, "phrase": "log_area"}, {"score": 0.0028857130140890787, "phrase": "flash_block"}, {"score": 0.0027741761880779535, "phrase": "page_evaporation_problem"}, {"score": 0.0026971491199975083, "phrase": "contemporary_nand_flash_chips"}, {"score": 0.0026370661343466354, "phrase": "ghost_nodes"}, {"score": 0.0025638362414466278, "phrase": "simple_but_elegant_design"}, {"score": 0.0024926348205500715, "phrase": "significant_performance_improvement"}, {"score": 0.002464709648714996, "phrase": "existing_approaches"}, {"score": 0.0024097920845706795, "phrase": "random_insertion_workload"}, {"score": 0.0022906498741695094, "phrase": "plain_ipl_scheme"}, {"score": 0.0021049977753042253, "phrase": "erase_operations"}], "paper_keywords": ["Dynamic in-page logging", " flash memory indexing", " B+-tree"], "paper_abstract": "Unlike database tables, B+-tree indexes are hierarchical and their structures change over time by node splitting operations, which may propagate changes from one node to another. The node splitting operation is difficult for the basic In-Page Logging (IPL) scheme to deal with, because it involves more than one node that may be stored separately in different flash blocks. In this paper, we propose Dynamic IPL B+-tree (d-IPL B+-tree in short) as a variant of the IPL scheme tailored for flash-based B+-tree indexes. The d-IPL B+-tree addresses the problem of frequent log overflow by allocating a log area in a flash block dynamically. It also avoids a page evaporation problem, imposed by the contemporary NAND flash chips, by introducing ghost nodes to d-IPL B+-tree. This simple but elegant design of the d-IPL B+-tree provides significant performance improvement over existing approaches. For a random insertion workload, the d-IPL B+-tree outperformed a B+-tree with the plain IPL scheme by more than a factor of two in terms of page write and block erase operations.", "paper_title": "Dynamic In-Page Logging for B+-tree Index", "paper_id": "WOS:000304202000006"}