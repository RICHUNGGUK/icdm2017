{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lambda-definable_functions"}, {"score": 0.004539005582217309, "phrase": "static_analysis"}, {"score": 0.003584025547693836, "phrase": "lattice_operations"}, {"score": 0.0032387402145603412, "phrase": "generator_system"}, {"score": 0.0030787405733989615, "phrase": "static_program-analyzers"}, {"score": 0.0028775998963807324, "phrase": "static_analysis_specification"}, {"score": 0.0027819985260847603, "phrase": "lattice_definitions"}, {"score": 0.002735392281320413, "phrase": "function_definitions"}, {"score": 0.0024097920845706795, "phrase": "generated_analyzer"}, {"score": 0.0021773853011112882, "phrase": "extensivity_analysis"}, {"score": 0.0021049977753042253, "phrase": "sound_syntax-driven_deductive_rules"}], "paper_keywords": ["static analysis", " functional static-analysis specification", " function extensivity", " deductive system", " constraints solving"], "paper_abstract": "We employ a static analysis to examine the extensivity (for all x : x <= f (x)) of functions defined over lattices in a lambda-calculus augmented with lattice operations. The need for such a verification procedure has arisen in our work on a generator system (called Zoo) of static program-analyzers. The input to Zoo is a static analysis specification that consists of lattice definitions and function definitions over the lattices. Once the extensivity of the functions is ascertained, the generated analyzer is guaranteed to terminate when the lattices have finite-heights. The extensivity analysis consists of a sound syntax-driven deductive rules whose satisfiability check is done by a constraint solving procedure.", "paper_title": "Static extensivity analysis for lambda-definable functions over lattices", "paper_id": "WOS:000233736000003"}