{"auto_keywords": [{"score": 0.04843603269514023, "phrase": "sbst"}, {"score": 0.03196995629283075, "phrase": "sbst_methodology"}, {"score": 0.00481495049065317, "phrase": "multiple-level_abstractions"}, {"score": 0.00475924837336259, "phrase": "soft_processor_cores"}, {"score": 0.004704187604192605, "phrase": "software-based_self-test"}, {"score": 0.004542780650208743, "phrase": "promising_approach"}, {"score": 0.004412494693940597, "phrase": "processor_core"}, {"score": 0.003996727479807572, "phrase": "different_abstraction_levels"}, {"score": 0.003950453462399077, "phrase": "multilevel_abstraction-based_sbst"}, {"score": 0.003792657064634775, "phrase": "pipeline_processor"}, {"score": 0.003336468343971626, "phrase": "different_types"}, {"score": 0.0032978134802348433, "phrase": "processor_circuits"}, {"score": 0.0032406665327678616, "phrase": "proposed_methodology"}, {"score": 0.0031660031870090434, "phrase": "architecture_information"}, {"score": 0.0030750809317435304, "phrase": "structural_faults"}, {"score": 0.0029694040368299624, "phrase": "automatic_test_pattern_generation_tool"}, {"score": 0.0029009722548088306, "phrase": "constrained_test_patterns"}, {"score": 0.002817639725689939, "phrase": "combinational_fundamental_intellectual_properties"}, {"score": 0.002642615537454746, "phrase": "rtl_code"}, {"score": 0.0026119782818898193, "phrase": "processor_architecture"}, {"score": 0.002435453488008121, "phrase": "routine_development"}, {"score": 0.0022841153001549193, "phrase": "achieved_fault_coverage"}, {"score": 0.0022576249214220187, "phrase": "test_program_size"}, {"score": 0.002205560249972527, "phrase": "cycle_count"}, {"score": 0.002154693685426657, "phrase": "complex_pipeline_processor_core"}, {"score": 0.0021049977753042253, "phrase": "previous_works"}], "paper_keywords": ["automatic test pattern generation (ATPG)", " fault coverage", " functional testing", " processor testing", " scan chain", " software-based self-test (SBST)"], "paper_abstract": "Software-based self-test (SBST) is a promising approach for. testing a processor core embedded in a system-on-chip (SoC) system. Test routine development for SBST can be based on information of different abstraction levels. Multilevel abstraction-based SBST develops the test program for a pipeline processor using the information abstracted from its architecture model, register transfer level (RTL) descriptions, and gate-level netlist for different types of processor circuits. The proposed methodology uses gate-level and architecture information to improve coverage for structural faults. This SBST methodology uses an automatic test pattern generation tool to generate the constrained test patterns to effectively test the combinational fundamental intellectual properties used in the processor. The approach refers to the RTL code and processor architecture for the rest of the control and steering logic for test routine development. The effectiveness of this SBST methodology is demonstrated by the achieved fault coverage, test program size, and testing cycle count, on a complex pipeline processor core. Comparisons with previous works are also made.", "paper_title": "Software-based self-testing with multiple-level abstractions for soft processor cores", "paper_id": "WOS:000246894500003"}