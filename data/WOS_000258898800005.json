{"auto_keywords": [{"score": 0.015719713042815758, "phrase": "one-way_quantum_finite_automata"}, {"score": 0.0073652083679594344, "phrase": "polynomial-time_algorithm"}, {"score": 0.004444317282171449, "phrase": "equal_probability"}, {"score": 0.0040334640350288, "phrase": "bertoni_et_al"}, {"score": 0.003818210967854446, "phrase": "equivalence_problem"}, {"score": 0.0037861265016041813, "phrase": "measure-many_one-way_quantum_finite_automata"}, {"score": 0.003691477107747996, "phrase": "kondacs"}, {"score": 0.003660461022217925, "phrase": "watrous"}, {"score": 0.0033641551050434663, "phrase": "control_languages"}, {"score": 0.0026222551419772867, "phrase": "minimal_dfas"}], "paper_keywords": ["quantum computing", " quantum finite automata", " equivalence"], "paper_abstract": "Two quantum finite automata are equivalent if for any input string x the two automata accept x with equal probability. In this paper, we first focus on determining the equivalence for one-way quantum finite automata with control language (CL-1QFAs) defined by Bertoni et al., and then, as an application, we address the equivalence problem for measure-many one-way quantum finite automata (MM-1QFAs) introduced by Kondacs and Watrous. More specifically, we obtain that: (i) Two CL-1QFAs A(1) and A(2) with control languages (regular languages) L-1 and L-2, respectively, are equivalent if and only if they are (c(1)n(1)(2) + C(2)n(2)(2) - 1)-equivalent, where n(1) and n(2) are the numbers of states in A(1) and A(2), respectively, and cl and C-2 are the numbers of states in the minimal DFAs that recognize L-1 and L-2, respectively. Furthermore, if L-1 and L-2 are given in the form of DFAs, with m(1) and m(2) states, respectively, then there exists a polynomial-time algorithm running in time O((m (1)n(1)(2) + m(2)n(2)(2))(4)) that takes as input A(1) and A(2) and determines whether they are equivalent. (ii) (As an application of item (i)): Two MM-1QFAs A(1) and A(2) with n(1) and n(2) states, respectively, are equivalent if and only if they are (3n(1)(2) + 3n(2)(2) - 1)-equivalent. Furthermore, there is a polynomial-time algorithm running in time O((3n(1)(2) + 3n(2)(2))(4) that takes as input A(1) and A(2) and determines whether A(1) and A(2) are equivalent. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Determining the equivalence for one-way quantum finite automata", "paper_id": "WOS:000258898800005"}