{"auto_keywords": [{"score": 0.04962396550254858, "phrase": "document_stores"}, {"score": 0.00481495049065317, "phrase": "schema_management_for_document_stores"}, {"score": 0.004612376827433774, "phrase": "schema-less_interface"}, {"score": 0.004460703838987562, "phrase": "mobile_and_cloud_applications"}, {"score": 0.004355415885815204, "phrase": "simplicity_developers"}, {"score": 0.004212157020917929, "phrase": "data_management"}, {"score": 0.003920780681351006, "phrase": "schema_management_framework"}, {"score": 0.0037199473428123175, "phrase": "json_records"}, {"score": 0.0035462807506718578, "phrase": "schema_summarization"}, {"score": 0.00349577373145384, "phrase": "major_technical_challenge"}, {"score": 0.0034459835582278746, "phrase": "varied_structures"}, {"score": 0.003348513474852869, "phrase": "schema-less_data_model"}, {"score": 0.0032382660477699695, "phrase": "discovery_phase"}, {"score": 0.003161740194257218, "phrase": "canonical_form"}, {"score": 0.003146652729098066, "phrase": "based_method"}, {"score": 0.003043031131345537, "phrase": "equivalent_sub-trees"}, {"score": 0.0029996699429582835, "phrase": "equivalent_schemas"}, {"score": 0.002845883666777154, "phrase": "new_data_structure"}, {"score": 0.002739001004969201, "phrase": "support_queries"}, {"score": 0.002648768009464535, "phrase": "single_summarized_representation"}, {"score": 0.0026235360404084137, "phrase": "heterogenous_schemas"}, {"score": 0.0023954743066925714, "phrase": "relaxed_form"}, {"score": 0.002305468528385778, "phrase": "small_set"}, {"score": 0.0022834993174767016, "phrase": "core_attributes"}, {"score": 0.0022401855403251653, "phrase": "extensive_experiments"}, {"score": 0.00220823903315848, "phrase": "real_data_sets"}, {"score": 0.0021252533072727707, "phrase": "practical_use_cases"}, {"score": 0.0021049977753042253, "phrase": "real-world_data_exploration_and_integration_scenarios"}], "paper_keywords": [""], "paper_abstract": "Document stores that provide the efficiency of a schema-less interface are widely used by developers in mobile and cloud applications. However, the simplicity developers achieved controversially leads to complexity for data management due to lack of a schema. In this paper, we present a schema management framework for document stores. This framework discovers and persists schemas of JSON records in a repository, and also supports queries and schema summarization. The major technical challenge comes from varied structures of records caused by the schema-less data model and schema evolution. In the discovery phase, we apply a canonical form based method and propose an algorithm based on equivalent sub-trees to group equivalent schemas efficiently. Together with the algorithm, we propose a new data structure, eSiBuTree, to store schemas and support queries. In order to present a single summarized representation for heterogenous schemas in records, we introduce the concept of \"skeleton\", and propose to use it as a relaxed form of the schema, which captures a small set of core attributes. Finally, extensive experiments based on real data sets demonstrate the efficiency of our proposed schema discovery algorithms, and practical use cases in real-world data exploration and integration scenarios are presented to illustrate the effectiveness of using skeletons in these applications.", "paper_title": "Schema Management for Document Stores", "paper_id": "WOS:000362282100004"}