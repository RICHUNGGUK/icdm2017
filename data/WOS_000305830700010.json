{"auto_keywords": [{"score": 0.035729029000976936, "phrase": "clause_measures"}, {"score": 0.014308400579157651, "phrase": "program_p"}, {"score": 0.00481495049065317, "phrase": "logic_program_transformations"}, {"score": 0.004574709094672837, "phrase": "logic_programs"}, {"score": 0.004459101239560164, "phrase": "program_clauses"}, {"score": 0.004099340908974491, "phrase": "suitable_conditions"}, {"score": 0.0031039212233596415, "phrase": "automatic_generation"}, {"score": 0.0029813748433158032, "phrase": "particular_program_transformation"}, {"score": 0.0028014064098604093, "phrase": "linear_equalities"}, {"score": 0.00276066021951467, "phrase": "nonnegative_integers"}, {"score": 0.0022734117274137468, "phrase": "fully_automatic_way"}, {"score": 0.00224032791638295, "phrase": "program_transformations"}, {"score": 0.0021049977753042253, "phrase": "sophisticated_clause_measures"}], "paper_keywords": ["Constraints", " Logic programming", " Program correctness", " Program transformation", " Transformation rules"], "paper_abstract": "Many approaches proposed in the literature for proving the correctness of unfold/fold transformations of logic programs make use of measures associated with program clauses. When from a program P (1) we derive a program P (2) by applying a sequence of transformations, suitable conditions on the measures of the clauses in P (2) guarantee that the transformation of P (1) into P (2) is correct, that is, P (1) and P (2) have the same least Herbrand model. In the approaches proposed so far, clause measures are fixed in advance, independently of the transformations to be proved correct. In this paper we propose a method for the automatic generation of clause measures which, instead, takes into account the particular program transformation at hand. During the application of a sequence of transformations we construct a system of linear equalities and inequalities over nonnegative integers whose unknowns are the clause measures to be found, and the correctness of the transformation is guaranteed by the satisfiability of that system. Through some examples we show that our method is more powerful and practical than other methods proposed in the literature. In particular, we are able to establish in a fully automatic way the correctness of program transformations which, by using other methods, are proved correct at the expense of fixing in advance sophisticated clause measures.", "paper_title": "Constraint-based correctness proofs for logic program transformations", "paper_id": "WOS:000305830700010"}