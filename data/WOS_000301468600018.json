{"auto_keywords": [{"score": 0.044706110038745396, "phrase": "xml_schemas"}, {"score": 0.00481495049065317, "phrase": "xml-based_systems"}, {"score": 0.004779453982525051, "phrase": "xml"}, {"score": 0.004674333455266527, "phrase": "standard_language"}, {"score": 0.004639822587124109, "phrase": "data_exchange"}, {"score": 0.004571559854487074, "phrase": "xml_documents"}, {"score": 0.00452101969521343, "phrase": "different_components"}, {"score": 0.004372712391262538, "phrase": "service-oriented_architecture"}, {"score": 0.004213601332868765, "phrase": "common_practice"}, {"score": 0.00407533728096378, "phrase": "whole_family"}, {"score": 0.003956234229826621, "phrase": "particular_logical_execution_part"}, {"score": 0.0037981086150309885, "phrase": "later_maintenance"}, {"score": 0.00370077772049505, "phrase": "simple_task"}, {"score": 0.003539671663910004, "phrase": "problem_-_evolution"}, {"score": 0.003423445743298995, "phrase": "single_change"}, {"score": 0.0033981387193790353, "phrase": "user_requirements"}, {"score": 0.0033730181385496186, "phrase": "surrounding_environment"}, {"score": 0.0029621948240346092, "phrase": "new_requirement"}, {"score": 0.0027299058905736456, "phrase": "manual_work"}, {"score": 0.002562929776267296, "phrase": "model-driven_development"}, {"score": 0.0024330980793680337, "phrase": "conceptual_schema"}, {"score": 0.002406142201243732, "phrase": "problem_domain"}, {"score": 0.002370663905320869, "phrase": "semi-automatic_coherent_propagation"}, {"score": 0.002344398099179438, "phrase": "affected_xml_schemas"}, {"score": 0.002258924405138231, "phrase": "formal_model"}, {"score": 0.002242206465278159, "phrase": "possible_evolution_changes"}, {"score": 0.002152440300818582, "phrase": "real-world_evolution_scenario"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["XML data modeling", " Model driven architecture", " XML schema evolution", " Propagation of changes"], "paper_abstract": "XML is de-facto a standard language for data exchange. Structure of XML documents exchanged among different components of a system (e.g. services in a Service-Oriented Architecture) is usually described with XML schemas. Iris a common practice that there is not only one but a whole family of XML schemas each applied in a particular logical execution part of the system. In such systems, the design and later maintenance of the XML schemas is not a simple task. In this paper we aim at a part of this problem - evolution of the family of the XML schemas. A single change in user requirements or surrounding environment of the system may influence more XML schemas in the family. A designer needs to identify the XML schemas affected by a change and ensure that they are evolved coherently with each other to meet the new requirement. Doing this manually is very time consuming and error prone. In this paper we show that much of the manual work can be automated. For this, we introduce a technique based on the principles of Model-Driven Development. A designer is required to make a change only once in a conceptual schema of the problem domain and Our technique ensures semi-automatic coherent propagation to all affected XML schemas (and vice versa). We provide a formal model of possible evolution changes and their propagation mechanism. We also evaluate the approach on a real-world evolution scenario. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Evolution and change management of XML-based systems", "paper_id": "WOS:000301468600018"}