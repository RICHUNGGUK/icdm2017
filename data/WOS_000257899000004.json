{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "robust_resource_allocation"}, {"score": 0.03255859068357465, "phrase": "qos_violation"}, {"score": 0.004610058444728656, "phrase": "resource_allocation_heuristics"}, {"score": 0.004466519142879166, "phrase": "target_system"}, {"score": 0.004276390289178831, "phrase": "heterogeneous_applications"}, {"score": 0.004159617445102161, "phrase": "heterogeneous_machines"}, {"score": 0.0040943214728975845, "phrase": "high-speed_heterogeneous_links"}, {"score": 0.0034129490818185595, "phrase": "uncertain_environment"}, {"score": 0.0029362173680378624, "phrase": "static_heuristic"}, {"score": 0.0027341763737751467, "phrase": "allowable_increase"}, {"score": 0.002680556511196791, "phrase": "run-time_reallocation"}, {"score": 0.0023242388639441607, "phrase": "genetic_algorithm"}, {"score": 0.0022967713922705, "phrase": "simulated_annealing_heuristic"}, {"score": 0.0022162970216404927, "phrase": "best_solution"}, {"score": 0.002155656133617155, "phrase": "fast_greedy_heuristics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["heterogeneous distributed computing", " genetic algorithm", " resource allocation", " robustness", " task scheduling", " shipboard computing", " simulated annealing", " static mapping"], "paper_abstract": "We investigate two distinct issues related to resource allocation heuristics: robustness and failure rate. The target system consists of a number of sensors feeding a set of heterogeneous applications continuously executing on a set of heterogeneous machines connected together by high-speed heterogeneous links. There are two quality of service (QoS) constraints that must be satisfied: the maximum end-to-end latency and minimum throughput. A failure occurs if no allocation is found that allows the system to meet its QoS constraints. The system is expected to operate in an uncertain environment where the workload, i.e., the load presented by the set of sensors, is likely to change unpredictably, possibly resulting in a QoS violation. The focus of this paper is the design of a static heuristic that: (a) determines a robust resource allocation, i.e., a resource allocation that maximizes the allowable increase in workload until a run-time reallocation of resources is required to avoid a QoS violation, and (b) has a very low failure rate (i.e., the percentage of instances a heuristic fails). Two such heuristics proposed in this study are a genetic algorithm and a simulated annealing heuristic. Both were \"seeded\" by the best solution found by using a set of fast greedy heuristics. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Static heuristics for robust resource allocation of continuously executing applications", "paper_id": "WOS:000257899000004"}