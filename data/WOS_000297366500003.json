{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fpga"}, {"score": 0.00478557489890886, "phrase": "automatic_re-synchronisation"}, {"score": 0.004669845451682529, "phrase": "floating_point_control_systems_applications"}, {"score": 0.004529093447865156, "phrase": "main_challenges"}, {"score": 0.004473982381245469, "phrase": "systems_designs"}, {"score": 0.004312622975366676, "phrase": "real_time_high_fidelity_models"}, {"score": 0.004260134699483774, "phrase": "suitable_and_feasible_hardware_platforms"}, {"score": 0.0038862297330905836, "phrase": "sample_rates"}, {"score": 0.0037459885494311217, "phrase": "real_time"}, {"score": 0.0035668128900149814, "phrase": "last_line"}, {"score": 0.003459191419478298, "phrase": "increasing_requirements"}, {"score": 0.0033961782274326948, "phrase": "high_fidelity_models"}, {"score": 0.003253560798692431, "phrase": "fpga_applications"}, {"score": 0.0031553611552558986, "phrase": "fpga_toolsets"}, {"score": 0.0030789331635764122, "phrase": "basic_control_systems_blocks"}, {"score": 0.002860546817196148, "phrase": "significant_effort"}, {"score": 0.0027954146872600405, "phrase": "simulink"}, {"score": 0.002791239714439304, "phrase": "feasible_hardware_fpga_implementations"}, {"score": 0.002469032978674379, "phrase": "generic_fpga_implementations"}, {"score": 0.0023798115577749225, "phrase": "pipelining_process"}, {"score": 0.0022797772939670063, "phrase": "rigorous_mathematical_model"}, {"score": 0.0021441057555396013, "phrase": "system_generator"}], "paper_keywords": ["Automatic pipelining", " FPGA", " System generator", " Control system", " Floating point", " High fidelity", " Dataflow analysis"], "paper_abstract": "One of the main challenges in Systems designs is the ability to integrate real time high fidelity models on suitable and feasible hardware platforms. Because of its inherited parallelism, FPGA (Field Programmable Gate Arrays) technology achieves sample rates which are typically faster than real time. This can be seen as the last line of defence against the increasing requirements given by high fidelity models. But as most of the FPGA applications are specialised and the FPGA toolsets do not support basic control systems blocks, designs are constructed and optimised manually. This leads to significant effort required in finding feasible hardware FPGA implementations. Therefore, the work in this paper describes how to automatically optimise the most time consuming process found in generic FPGA implementations: the optimisation of the pipelining process. This is constructed on a rigorous mathematical model and achieved using drag and drop floating point HDL (Hardware Description Language) control systems blocks, under System Generator, in Simulink.", "paper_title": "FPGA automatic re-synchronisation for pipelined, floating point control systems applications", "paper_id": "WOS:000297366500003"}