{"auto_keywords": [{"score": 0.04953289560992989, "phrase": "defect_prediction"}, {"score": 0.04184233791741217, "phrase": "defective_modules"}, {"score": 0.00481495049065317, "phrase": "subgroup_discovery"}, {"score": 0.004581373625744533, "phrase": "software_defect_prediction_techniques"}, {"score": 0.0045464538515249085, "phrase": "machine_learning_approaches"}, {"score": 0.004260134699483774, "phrase": "descriptive_approach"}, {"score": 0.004163427731140163, "phrase": "precise_classification_techniques"}, {"score": 0.003961330917648707, "phrase": "simple_rules"}, {"score": 0.0037402558657576124, "phrase": "highly_accurate_result"}, {"score": 0.0034777887763821425, "phrase": "defect_prone_modules"}, {"score": 0.003438058620195309, "phrase": "empirical_work"}, {"score": 0.0033857878144822906, "phrase": "publicly_available_datasets"}, {"score": 0.003347105144425849, "phrase": "promise_repository"}, {"score": 0.0033215617190376565, "phrase": "object-oriented_metrics"}, {"score": 0.0032836104153151973, "phrase": "eclipse_repository"}, {"score": 0.003208999546225013, "phrase": "subgroup_discovery_algorithms"}, {"score": 0.00307657476125683, "phrase": "classification_algorithms"}, {"score": 0.0029951555610569225, "phrase": "preprocessing_techniques"}, {"score": 0.0028936226331006563, "phrase": "generated_rules"}, {"score": 0.0028278480051602355, "phrase": "testing_effort"}, {"score": 0.0027424619603260837, "phrase": "software_development_projects"}, {"score": 0.0025694584194998335, "phrase": "induced_rules"}, {"score": 0.0024073421672242486, "phrase": "complete_classification"}, {"score": 0.0023798115577749225, "phrase": "whole_dataset"}, {"score": 0.002316788811533867, "phrase": "engineering_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Subgroup discovery", " Rules", " Defect prediction", " Imbalanced datasets"], "paper_abstract": "Context: Although many papers have been published on software defect prediction techniques, machine learning approaches have yet to be fully explored. Objective: In this paper we suggest using a descriptive approach for defect prediction rather than the precise classification techniques that are usually adopted. This allows us to characterise defective modules with simple rules that can easily be applied by practitioners and deliver a practical (or engineering) approach rather than a highly accurate result. Method: We describe two well-known subgroup discovery algorithms, the SD algorithm and the CN2-SD algorithm to obtain rules that identify defect prone modules. The empirical work is performed with publicly available datasets from the Promise repository and object-oriented metrics from an Eclipse repository related to defect prediction. Subgroup discovery algorithms mitigate against characteristics of datasets that hinder the applicability of classification algorithms and so remove the need for preprocessing techniques. Results: The results show that the generated rules can be used to guide testing effort in order to improve the quality of software development projects. Such rules can indicate metrics, their threshold values and relationships between metrics of defective modules. Conclusions: The induced rules are simple to use and easy to understand as they provide a description rather than a complete classification of the whole dataset. Thus this paper represents an engineering approach to defect prediction, i.e., an approach which is useful in practice, easily understandable and can be applied by practitioners. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A study of subgroup discovery approaches for defect prediction", "paper_id": "WOS:000323298000010"}