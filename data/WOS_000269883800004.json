{"auto_keywords": [{"score": 0.045676624020643354, "phrase": "non-reactive_part"}, {"score": 0.022347154451768624, "phrase": "reactive_part"}, {"score": 0.010612387000973441, "phrase": "source_code"}, {"score": 0.01052054773352599, "phrase": "event-driven_systems"}, {"score": 0.004316396683332752, "phrase": "common_design_practice"}, {"score": 0.003802135020791801, "phrase": "application_domain"}, {"score": 0.003438058620195309, "phrase": "event_calls"}, {"score": 0.003219553875143356, "phrase": "existing_event"}, {"score": 0.0031360786664165093, "phrase": "new_event_calls"}, {"score": 0.002823207272381655, "phrase": "time-consuming_and_error-prone_maintenance_task"}, {"score": 0.0023798115577749225, "phrase": "maintenance_task"}, {"score": 0.002287783663138828, "phrase": "controlled_experiments"}], "paper_keywords": ["Event-driven systems", " Source code verification", " Source code transformation", " Formal experiment"], "paper_abstract": "In event-driven systems, separating the reactive part of software (i.e., event-driven control) from the non-reactive part is a common design practice. The reactive part is typically structured according to the states and transitions of a system, whereas the non-reactive part is typically structured according to the concepts of the application domain (e.g., the services provided by the system). In such systems, the non-reactive part of software stimulates the reactive part with event calls. Whenever the non-reactive part is modified (e.g., during evolution), the existing event calls may become invalid, new event calls may become necessary, and the two parts of software may become incompatible. Manually finding and repairing these types of defects is a time-consuming and error-prone maintenance task. In this article, we present a solution that combines source code model checking and aspect-oriented programming techniques, to reduce the time spent by developers and to automatically find defects, while performing the maintenance task mentioned above. In addition, we present controlled experiments showing that the solution can reduce the time by 75%, and enable the prevention of one defect per 140 lines of source code.", "paper_title": "Experimental evaluation of a tool for the verification and transformation of source code in event-driven systems", "paper_id": "WOS:000269883800004"}