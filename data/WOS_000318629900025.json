{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concurrent_programs"}, {"score": 0.03730575590231708, "phrase": "type_systems"}, {"score": 0.004770461993586338, "phrase": "compositional_abstractions"}, {"score": 0.004617949594931096, "phrase": "concurrent_environment"}, {"score": 0.004017437417375057, "phrase": "separation_logic"}, {"score": 0.003712362078915926, "phrase": "disjoint_state"}, {"score": 0.00357689487273538, "phrase": "separating_conjunction"}, {"score": 0.00321425262806329, "phrase": "shared_variables"}, {"score": 0.0030825404960282713, "phrase": "\"concurrent_views_framework"}, {"score": 0.002997735656669146, "phrase": "concurrent_reasoning_principles"}, {"score": 0.0025712297362596574, "phrase": "rely-guarantee_method"}, {"score": 0.0025474193855847074, "phrase": "concurrent_separation_logic"}, {"score": 0.002523828967909659, "phrase": "concurrent_abstract_predicates"}, {"score": 0.0024772998651215964, "phrase": "recursive_references"}, {"score": 0.0024429654627197393, "phrase": "unique_pointers"}, {"score": 0.0024091057723923857, "phrase": "even_an_adaptation"}, {"score": 0.002375714262344562, "phrase": "owicki-gries_method"}, {"score": 0.002278284823857861, "phrase": "concurrent_views_framework"}, {"score": 0.0021049977753042253, "phrase": "operational_semantics"}], "paper_keywords": ["Theory", " Verification", " concurrency", " axiomatic semantics", " compositional reasoning"], "paper_abstract": "Compositional abstractions underly many reasoning principles for concurrent programs: the concurrent environment is abstracted in order to reason about a thread in isolation; and these abstractions are composed to reason about a program consisting of many threads. For instance, separation logic uses formulae that describe part of the state, abstracting the rest; when two threads use disjoint state, their specifications can be composed with the separating conjunction. Type systems abstract the state to the types of variables; threads may be composed when they agree on the types of shared variables. In this paper, we present the \"Concurrent Views Framework\", a metatheory of concurrent reasoning principles. The theory is parameterised by an abstraction of state with a notion of composition, which we call views. The metatheory is remarkably simple, but highly applicable: the rely-guarantee method, concurrent separation logic, concurrent abstract predicates, type systems for recursive references and for unique pointers, and even an adaptation of the Owicki-Gries method can all be seen as instances of the Concurrent Views Framework. Moreover, our metatheory proves each of these systems is sound without requiring induction on the operational semantics.", "paper_title": "Views: Compositional Reasoning for Concurrent Programs", "paper_id": "WOS:000318629900025"}