{"auto_keywords": [{"score": 0.03647922995508278, "phrase": "sdg"}, {"score": 0.009509146716229298, "phrase": "vdfg"}, {"score": 0.008290650766860015, "phrase": "fractal_value"}, {"score": 0.00481495049065317, "phrase": "variable_data-flow_graph"}, {"score": 0.004767826806287385, "phrase": "lightweight_program_slicing"}, {"score": 0.00472147093349653, "phrase": "visualization"}, {"score": 0.004385367803204002, "phrase": "source_code_fragments"}, {"score": 0.004093453936415085, "phrase": "program_slicing"}, {"score": 0.0040334640350288, "phrase": "good_candidate"}, {"score": 0.003916098498242888, "phrase": "data-flow_paths"}, {"score": 0.0036733470451885465, "phrase": "focused_program_elements"}, {"score": 0.003428665921276366, "phrase": "heavyweight_analysis"}, {"score": 0.003296212583539166, "phrase": "daily_uses"}, {"score": 0.0031845067058084583, "phrase": "sdg-based_program_slicing"}, {"score": 0.002928682556953258, "phrase": "variable_data-flow_graphs"}, {"score": 0.0028293966058473476, "phrase": "program_slicing_techniques"}, {"score": 0.002680114113899346, "phrase": "lightweight_analysis"}, {"score": 0.0024891269874339553, "phrase": "vdfg-based_program_slice"}, {"score": 0.002416589459425828, "phrase": "graph_complexity"}, {"score": 0.0023928819778638055, "phrase": "visualization_purposes"}, {"score": 0.0022777800735119405, "phrase": "vdfg_program"}, {"score": 0.0021789194955896124, "phrase": "visualized_program_slice"}, {"score": 0.0021049977753042253, "phrase": "source_code_reading"}], "paper_keywords": ["static analysis", " program slicing", " variable data-flow graph", " visualization"], "paper_abstract": "To understand the behavior of a program, developers often need to read source code fragments in various modules. System-dependence-graph-based (SDG) program slicing is a good candidate for supporting the investigation of data-flow paths among modules, as SDG is capable of showing the data-dependence of focused program elements. However, this technique has two problems. First, constructing SDG requires heavyweight analysis, so SDG is not suitable for daily uses. Second, the results of SDG-based program slicing are difficult to visualize, as they contain many vertices. In this research, we proposed variable data-flow graphs (VDFG) for use in program slicing techniques. In contrast to SDG, VDFG is created by lightweight analysis because several approximations are used. Furthermore, we propose using the fractal value to visualize VDFG-based program slice in order to reduce the graph complexity for visualization purposes. We performed three experiments that demonstrate the accuracy of VDFG program slicing with fractal value, the size of a visualized program slice, and effectiveness of our tool for source code reading.", "paper_title": "Variable Data-Flow Graph for Lightweight Program Slicing and Visualization", "paper_id": "WOS:000359001600010"}