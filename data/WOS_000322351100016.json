{"auto_keywords": [{"score": 0.04596854881204733, "phrase": "software_engineers"}, {"score": 0.008669481028073519, "phrase": "entity_relationship_diagram"}, {"score": 0.005661213117796968, "phrase": "software_engineer"}, {"score": 0.005617976191380363, "phrase": "defect_detection_process"}, {"score": 0.0054622314549364085, "phrase": "eye_tracker_data"}, {"score": 0.00481495049065317, "phrase": "non-formal_inspections"}, {"score": 0.0046813628851623676, "phrase": "diagrammatic_representations"}, {"score": 0.004645574499882206, "phrase": "critical_issue"}, {"score": 0.004586531354697466, "phrase": "software_projects"}, {"score": 0.004470676692857709, "phrase": "related_information"}, {"score": 0.00436890075128947, "phrase": "operational_systems"}, {"score": 0.00434659901732443, "phrase": "different_levels"}, {"score": 0.004324410631569266, "phrase": "information_system_development_process"}, {"score": 0.0042803736905489415, "phrase": "erd"}, {"score": 0.004215149037636021, "phrase": "main_diagrammatic_representations"}, {"score": 0.004182909815479162, "phrase": "conceptual_data_model"}, {"score": 0.004150916144510748, "phrase": "users'_data_requirements"}, {"score": 0.004119166170145527, "phrase": "database_system"}, {"score": 0.004087658051566714, "phrase": "today's_business_environment"}, {"score": 0.004056389961627438, "phrase": "business_model"}, {"score": 0.004015069420294224, "phrase": "constant_change"}, {"score": 0.003984354367664959, "phrase": "highly_dynamic_data_requirements"}, {"score": 0.003943764713436505, "phrase": "additional_processes"}, {"score": 0.003642848214646639, "phrase": "main_motivation"}, {"score": 0.0034169248247486387, "phrase": "erd_defect_detection_process"}, {"score": 0.0033907699663068744, "phrase": "defect_detection_difficulty_level"}, {"score": 0.0029076286259980253, "phrase": "defect_detection_performance"}, {"score": 0.002797977533074319, "phrase": "second_experiment"}, {"score": 0.0027836724009301776, "phrase": "five_participants"}, {"score": 0.0027132333865796713, "phrase": "proposed_metric_results"}, {"score": 0.0026175952455594277, "phrase": "df_and_pp_values"}, {"score": 0.0025124050599971753, "phrase": "software_companies"}, {"score": 0.0024550996632846703, "phrase": "reasoning_process"}, {"score": 0.002392955016407507, "phrase": "better_graphical_representations"}, {"score": 0.00229088962675884, "phrase": "reviewing_instructions"}, {"score": 0.002148631647473042, "phrase": "design_and_review_skills"}, {"score": 0.0021376392890704674, "phrase": "future_software_engineers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Defect detection", " ERD", " Eye tracking"], "paper_abstract": "Designing and understanding of diagrammatic representations is a critical issue for the success of software projects because diagrams in this field provide a collection of related information with various perceptual signs and they help software engineers to understand operational systems at different levels of information system development process. Entity relationship diagram (ERD) is one of the main diagrammatic representations of a conceptual data model that reflects users' data requirements in a database system. In today's business environment, the business model is in a constant change which creates highly dynamic data requirements which also requires additional processes like modifications of ERD. However, in the literature there are not many measures to better understand the behaviors of software engineers during designing and understanding these representations. Hence, the main motivation of this study is to develop measures to better understand performance of software engineers during their understanding process of ERD. Accordingly, this study proposes two measures for ERD defect detection process. The defect detection difficulty level (DF) measures how difficult a defect to be detected according to the other defects for a group of software engineers. Defect detection performance (PP) measure is also proposed to understand the performance of a software engineer during the defect detection process. The results of this study are validated through the eye tracker data collected during the defect detection process of participants. Additionally, a relationship between the defect detection performance (PP) of a software engineer and his/her search patterns within an ERD is analyzed. Second experiment with five participants is also conducted to show the correlation between the proposed metric results and eye tracker data. The results of experiment-2 also found to be similar for DF and PP values. The results of this study are expected to provide insights to the researchers, software companies, and to the educators to improve ERD reasoning process. Through these measures several design guidelines can be developed for better graphical representations and modeling of the information which would improve quality of these diagrams. Moreover, some reviewing instructions can be developed for the software engineers to improve their reviewing process in ERD. These guidelines in turn will provide some tools for the educators to improve design and review skills of future software engineers. (c) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Performing and analyzing non-formal inspections of entity relationship diagram (ERD)", "paper_id": "WOS:000322351100016"}