{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "incremental_planning"}, {"score": 0.007990425926224674, "phrase": "embedded_planners"}, {"score": 0.004329331617724, "phrase": "planning_problem"}, {"score": 0.004225950334493496, "phrase": "rich_set"}, {"score": 0.004185289462328125, "phrase": "partial_orders"}, {"score": 0.003949377440799037, "phrase": "relaxed_plan"}, {"score": 0.0038737214010638745, "phrase": "delete_lists"}, {"score": 0.0038179283509963695, "phrase": "new_algorithm"}, {"score": 0.00320770578058916, "phrase": "subgoal_sets"}, {"score": 0.003100865267124765, "phrase": "overall_planning_problem"}, {"score": 0.0030267296900520217, "phrase": "efficient_strategy"}, {"score": 0.002954361295811154, "phrase": "grain_size"}, {"score": 0.0028421434495262796, "phrase": "total_complexity"}, {"score": 0.002760778494680823, "phrase": "redundant-ordering_scheme"}, {"score": 0.0026687841359431105, "phrase": "solution_quality"}, {"score": 0.0026049517737353365, "phrase": "run-time_efficiency"}, {"score": 0.0025303601055992075, "phrase": "metric-ff"}, {"score": 0.002505972841715811, "phrase": "yahsp"}, {"score": 0.002469830206270585, "phrase": "lpg-td-speed"}, {"score": 0.0024107449502335583, "phrase": "incremental_planning_show"}, {"score": 0.0021049977753042253, "phrase": "incremental_versions"}], "paper_keywords": ["basic planner", " incremental planning", " partitioning", " subgoal ordering", " subgoal grouping"], "paper_abstract": "In this paper, we study strategies in incremental planning for ordering and grouping subproblems partitioned by the subgoals of a planning problem. To generate a rich set of partial orders for ordering subproblems, we propose an algorithm based on a relaxed plan that ignores the delete lists. The new algorithm considers both the initial and the goal states and can effectively order subgoals in such a way that greatly reduces the number of invalidations during incremental planning. We have also considered trade-offs between the granularity of the subgoal sets and the complexity of solving the overall planning problem. We propose an efficient strategy for dynamically adjusting the grain size in partitioning in order to minimize the total complexity. We further evaluate a redundant-ordering scheme that uses two different subgoal orders to improve the solution quality, without greatly sacrificing run-time efficiency. Experimental results on using Metric-FF, YAHSP, and LPG-TD-speed as the embedded planners in incremental planning show that our strategies are general for improving the time and quality of these planners across various benchmarks. Finally, we compare the performance of the three planners, the incremental versions using these planners as embedded planners, and SGPlan(4.1).", "paper_title": "Subgoal ordering and granularity control for incremental planning", "paper_id": "WOS:000251284900010"}