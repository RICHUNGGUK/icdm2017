{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "haskell"}, {"score": 0.04816317144048925, "phrase": "nikola"}, {"score": 0.004260134699483774, "phrase": "array_computations"}, {"score": 0.0038862661285558936, "phrase": "cuda"}, {"score": 0.003769006950727621, "phrase": "new_set"}, {"score": 0.0036928221419965253, "phrase": "type-directed_techniques"}, {"score": 0.003509006038574667, "phrase": "usable_computations"}, {"score": 0.0032336801561165113, "phrase": "low-level_details"}, {"score": 0.002890038861974513, "phrase": "gpu"}, {"score": 0.002831462722290752, "phrase": "size_inference"}, {"score": 0.002718045523483502, "phrase": "memory_management"}, {"score": 0.0026359661683151006, "phrase": "automatic_loop_parallelization"}, {"score": 0.0024289743270061157, "phrase": "run-time_code_generation"}, {"score": 0.0021049977753042253, "phrase": "embedded_programs"}], "paper_keywords": ["Languages", " Design", " Meta programming", " CUDA", " GPU"], "paper_abstract": "We describe Nikola, a first-order language of array computations embedded in Haskell that compiles to GPUs via CUDA using a new set of type-directed techniques to support re-usable computations. Nikola automatically handles a range of low-level details for Haskell programmers, such as marshaling data to/from the GPU, size inference for buffers, memory management, and automatic loop parallelization. Additionally, Nikola supports both compile-time and run-time code generation, making it possible for programmers to choose when and where to specialize embedded programs.", "paper_title": "Nikola: Embedding Compiled GPU Functions in Haskell", "paper_id": "WOS:000285212700008"}