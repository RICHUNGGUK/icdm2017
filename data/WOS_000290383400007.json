{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "imposing_constraints"}, {"score": 0.004654210559456924, "phrase": "finite_automaton"}, {"score": 0.004575854901681043, "phrase": "regular_expression"}, {"score": 0.004498812433096501, "phrase": "effective_way"}, {"score": 0.004423061344624088, "phrase": "additional_a_priori_knowledge"}, {"score": 0.004373267443572639, "phrase": "sequence_alignment_procedures"}, {"score": 0.004203343568960231, "phrase": "regular_expression_constrained_sequence_alignment_problem"}, {"score": 0.0038610400240820307, "phrase": "space_algorithm"}, {"score": 0.0036073064072936626, "phrase": "input_strings"}, {"score": 0.0033893426032054366, "phrase": "non-deterministic_automaton"}, {"score": 0.002975099633631871, "phrase": "regular_language_constrained_sequence_alignment"}, {"score": 0.0026262033625248445, "phrase": "straight-line_programs"}, {"score": 0.0025819015229390663, "phrase": "maxima_computation_subproblem"}, {"score": 0.0025383451160985488, "phrase": "basic_dynamic_programming_algorithm"}, {"score": 0.002398382089724878, "phrase": "steiner_tree_computation"}, {"score": 0.0022919762167777427, "phrase": "worst_case"}, {"score": 0.0021049977753042253, "phrase": "input_automata"}], "paper_keywords": ["dynamic programming", " finite automaton", " regular expression", " sequence alignment", " Steiner minimal trees", " straight-line programs"], "paper_abstract": "Imposing constraints in the form of a finite automaton or a regular expression is an effective way to incorporate additional a priori knowledge into sequence alignment procedures. With this motivation, the Regular Expression Constrained Sequence Alignment Problem was introduced, which proposed an O(n(2)t(4)) time and O(n(2)t(2)) space algorithm for solving it, where n is the length of the input strings and t is the number of states in the input non-deterministic automaton. A faster O(n(2)t(3)) time algorithm for the same problem was subsequently proposed. In this article, we further speed up the algorithms for Regular Language Constrained Sequence Alignment by reducing their worst case time complexity bound to O(n(2)t(3)/log t). This is done by establishing an optimal bound on the size of Straight-Line Programs solving the maxima computation subproblem of the basic dynamic programming algorithm. We also study another solution based on a Steiner Tree computation. While it does not improve the worst case, our simulations show that both approaches are efficient in practice, especially when the input automata are dense.", "paper_title": "Regular Language Constrained Sequence Alignment Revisited", "paper_id": "WOS:000290383400007"}