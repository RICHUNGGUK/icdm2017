{"auto_keywords": [{"score": 0.03450625689256253, "phrase": "static_analysis"}, {"score": 0.00481495049065317, "phrase": "unsigned_integer_casting_check"}, {"score": 0.004752221133109136, "phrase": "gpu_programs"}, {"score": 0.004690305164360866, "phrase": "numerical_programs"}, {"score": 0.004598933498016774, "phrase": "type-casting_instructions"}, {"score": 0.004450568197899267, "phrase": "different_types"}, {"score": 0.004363846362238565, "phrase": "unsafe_type-casting"}, {"score": 0.004223032986655664, "phrase": "undefined_program_behaviors"}, {"score": 0.004140726362519362, "phrase": "serious_problems"}, {"score": 0.00406001734835979, "phrase": "security_vulnerabilities"}, {"score": 0.003752550907120244, "phrase": "sequential_programs"}, {"score": 0.0031223774204093713, "phrase": "potentially_unsafe_type-casting_instructions"}, {"score": 0.002982068153662372, "phrase": "false_alarms"}, {"score": 0.0027200305495826797, "phrase": "manual_hints"}, {"score": 0.00268452026617243, "phrase": "pre-defined_function_contracts"}, {"score": 0.0023850311572318496, "phrase": "artificial_programs"}, {"score": 0.002323142666222693, "phrase": "cuda_sdk."}, {"score": 0.0022041312401435346, "phrase": "gpu_program_analysis_framework"}, {"score": 0.0021049977753042253, "phrase": "dynamic_unsafe_type-casting_checks"}], "paper_keywords": ["unsafe type-casting check", " numerical program analysis", " static analysis", " GPU program analysis"], "paper_abstract": "Numerical programs usually include type-casting instructions which convert data among different types. Identifying unsafe type-casting is important for preventing undefined program behaviors which cause serious problems such as security vulnerabilities and result non-reproducibility. While many tools had been proposed for handling sequential programs, to our best knowledge, there isn't a tool geared toward GPUs. In this paper, we propose a static analysis based method which points out all potentially unsafe type-casting instructions in a program. To reduce false alarms (which are commonly raised by static analysis), we employ two techniques, manual hints and pre-defined function contracts, and we empirically show that these techniques are effective in practice. We evaluated our method with artificial programs and samples from CUDA SDK. Our implementation is currently being integrated into a GPU program analysis framework called GKLEE. We plan to integrate dynamic unsafe type-casting checks also in our future work.", "paper_title": "Unsafe Floating-point to Unsigned Integer Casting Check for GPU Programs", "paper_id": "WOS:000365196900005"}