{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "rapid_releases"}, {"score": 0.009775258806855279, "phrase": "mozilla_firefox"}, {"score": 0.009537115920199131, "phrase": "shorter_release_cycles"}, {"score": 0.004775335634705251, "phrase": "software_quality"}, {"score": 0.0046392209103157936, "phrase": "traditional_multi-month_release_cycle"}, {"score": 0.00446987606516801, "phrase": "google_chrome"}, {"score": 0.004396600680348434, "phrase": "new_versions"}, {"score": 0.004271234971981848, "phrase": "users'_waiting_time"}, {"score": 0.004218602458288531, "phrase": "new_release"}, {"score": 0.0041666157975446564, "phrase": "better_feedback"}, {"score": 0.00389994107619882, "phrase": "software_product"}, {"score": 0.003473529187092258, "phrase": "quality_assurance"}, {"score": 0.0034165310204389682, "phrase": "mozilla_project_members"}, {"score": 0.0033465923623290034, "phrase": "crash_rates"}, {"score": 0.0033190180867511605, "phrase": "median_uptime"}, {"score": 0.0032109670662222416, "phrase": "post-release_bugs"}, {"score": 0.003030247482854539, "phrase": "source_code_changes"}, {"score": 0.0029559346879594254, "phrase": "potential_changes"}, {"score": 0.0029194625087935345, "phrase": "development_process"}, {"score": 0.0027437235598539904, "phrase": "significantly_more_pre-"}, {"score": 0.0024434201175883674, "phrase": "software_execution"}, {"score": 0.002363806685815014, "phrase": "increased_integration_activity"}, {"score": 0.0023249757987087055, "phrase": "harder_bugs"}, {"score": 0.002305799666781492, "phrase": "later_versions"}, {"score": 0.002175913488493802, "phrase": "clear_release_engineering_process"}, {"score": 0.0021049977753042253, "phrase": "major_challenges"}], "paper_keywords": ["Software release", " Release cycle", " Software quality", " Testing", " Bugs"], "paper_abstract": "Many software companies are shifting from the traditional multi-month release cycle to shorter release cycles. For example, Google Chrome and Mozilla Firefox release new versions every 6 weeks. These shorter release cycles reduce the users' waiting time for a new release and offer better feedback and marketing opportunities to companies, but it is unclear if the quality of the software product improves as well, since developers and testers are under more pressure. In this paper, we extend our previous empirical study of Mozilla Firefox on the impact of rapid releases on quality assurance with feedback by Mozilla project members. The study compares crash rates, median uptime, and the proportion of pre- and post-release bugs in traditional releases with those in rapid releases, and we also analyze the source code changes made by developers to identify potential changes in the development process. We found that (1) with shorter release cycles, users do not experience significantly more pre- or post-release bugs (percentage-wise) and (2) bugs are fixed faster, yet (3) users experience these bugs earlier during software execution (the program crashes earlier). Increased integration activity and propagation of harder bugs to later versions account for some of these findings. Overall, our case study suggests that a clear release engineering process with thorough automation is one of the major challenges when switching to rapid releases.", "paper_title": "Understanding the impact of rapid releases on software quality", "paper_id": "WOS:000353824000003"}