{"auto_keywords": [{"score": 0.03548157197921641, "phrase": "content_nodes"}, {"score": 0.015719716506582538, "phrase": "top-k_r-cliques"}, {"score": 0.015381486210624273, "phrase": "polynomial_delay"}, {"score": 0.015191438728188239, "phrase": "structured_data"}, {"score": 0.01137092488290642, "phrase": "current_methods"}, {"score": 0.009606097880651882, "phrase": "run_time"}, {"score": 0.008163891213137204, "phrase": "new_weight_function"}, {"score": 0.0075255070987734615, "phrase": "approximation_algorithm"}, {"score": 0.004680725471654037, "phrase": "keyword_search"}, {"score": 0.004607772051902472, "phrase": "alternative_method"}, {"score": 0.004327104321558231, "phrase": "query_language"}, {"score": 0.003962541905291554, "phrase": "query_keywords"}, {"score": 0.003888493128000547, "phrase": "previous_works"}, {"score": 0.0038519872652579713, "phrase": "minimal_tree"}, {"score": 0.003721029388906273, "phrase": "recent_works"}, {"score": 0.003640011825552854, "phrase": "minimal_trees"}, {"score": 0.0032914631538239003, "phrase": "input_keywords"}, {"score": 0.0030616859252873235, "phrase": "best_answer"}, {"score": 0.003013890317967077, "phrase": "whole_graph"}, {"score": 0.0028930745799089683, "phrase": "poor_performance"}, {"score": 0.0027423420665298646, "phrase": "graph_keyword_search_problem"}, {"score": 0.002336019017122196, "phrase": "np"}, {"score": 0.0021316860248957936, "phrase": "approximation_ratio"}, {"score": 0.002118299959412318, "phrase": "extensive_performance_studies"}], "paper_keywords": ["Keyword search", " Graph data", " Polynomial delay", " Approximation algorithm"], "paper_abstract": "Keyword search over structured data offers an alternative method to explore and query databases for users that are not familiar with the structure of the data and/or a query language. Structured data are usually modeled as graphs. In this context, an answer is a substructure of the graph that contains all or some of the query keywords. In most of the previous works, a minimal tree that covers all the query keywords are found as the answer. Some recent works offer to find subgraphs rather than minimal trees and show that subgraphs might be more informative for the users. However, current methods suffer from the following problems. Although some of the content nodes (i.e., nodes that contain input keywords) are close to each other in an answer, others might be far from each other. While searching for the best answer, current methods explore the whole graph rather than only the content nodes. This might increase the run time and leads to poor performance. To address these problems, we propose to find top-k r-cliques as the answers to the graph keyword search problem. An r-clique is a set of content nodes that cover all the input keywords, and the distance between each pair of nodes is less than or equal to r. We propose a new weight function that is the sum of distances between each pair of content nodes. We prove that minimizing the new weight function is NP-hard and propose an approximation algorithm that produces r-cliques with 2-approximation ratio in polynomial delay. We further improve the run time of the approximation algorithm with the cost of increasing the approximation ratio. Extensive performance studies using three large real datasets confirm the efficiency and accuracy of finding r-cliques in graphs.", "paper_title": "Finding top-k r-cliques for keyword search from graphs in polynomial delay", "paper_id": "WOS:000351520700001"}