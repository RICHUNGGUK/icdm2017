{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "certified_symbolic_management_of_financial_multi-party"}, {"score": 0.004755353864362941, "phrase": "domain-specific_languages"}, {"score": 0.004657653216262924, "phrase": "complex_financial_contracts"}, {"score": 0.004599994523941615, "phrase": "practical_use"}, {"score": 0.004524220016675624, "phrase": "financial_institutions"}, {"score": 0.0042157995925335544, "phrase": "financial_domain"}, {"score": 0.004129138311177554, "phrase": "software_bugs"}, {"score": 0.003977594755967813, "phrase": "increasing_need"}, {"score": 0.003799878496075633, "phrase": "multiple_parties"}, {"score": 0.003660374693346876, "phrase": "multi-party_contract_language"}, {"score": 0.003424850089214916, "phrase": "favourable_algebraic_properties"}, {"score": 0.0033266163944946185, "phrase": "domain-specific_analyses"}, {"score": 0.0032581736321024373, "phrase": "proof_assistant"}, {"score": 0.0030611534228319717, "phrase": "stochastic_aspects"}, {"score": 0.002948689937518561, "phrase": "certified_contract_analyses"}, {"score": 0.002828556054338357, "phrase": "type_system"}, {"score": 0.0027818804382539444, "phrase": "accompanying_type_inference_procedure"}, {"score": 0.002581165831422692, "phrase": "reduction_semantics"}, {"score": 0.0024350966556966757, "phrase": "denotational_semantics"}, {"score": 0.0023948981440134478, "phrase": "verified_coq_definitions"}, {"score": 0.002335838283092986, "phrase": "haskell_implementation"}, {"score": 0.002306855521822739, "phrase": "embedded_contract"}, {"score": 0.002259346051668556, "phrase": "formally_verified_contract_management_functionality"}, {"score": 0.0022036216160494925, "phrase": "road_map"}, {"score": 0.0021314498639048085, "phrase": "analysing_contracts"}, {"score": 0.0021049977753042253, "phrase": "symbolic_instead_of_numeric_methods"}], "paper_keywords": ["Languages", " Verification", " Domain-Specific Language", " Financial Contracts", " Coq", " Haskell", " Certified Code", " Type System", " Semantics"], "paper_abstract": "Domain-specific languages (DSLs) for complex financial contracts are in practical use in many banks and financial institutions today. Given the level of automation and pervasiveness of software in the sector, the financial domain is immensely sensitive to software bugs. At the same time, there is an increasing need to analyse (and report on) the interaction between multiple parties. In this paper, we present a multi-party contract language that rigorously relegates any artefacts of simulation and computation from its core, which leads to favourable algebraic properties, and therefore allows for formalising domain-specific analyses and transformations using a proof assistant. At the centre of our formalisation is a simple denotational semantics independent of any stochastic aspects. Based on this semantics, we devise certified contract analyses and transformations. In particular, we give a type system, with an accompanying type inference procedure, that statically ensures that contracts follow the principle of causality. Moreover, we devise a reduction semantics that allows us to evolve contracts over time, in accordance with the denotational semantics. From the verified Coq definitions, we automatically extract a Haskell implementation of an embedded contract DSL along with the formally verified contract management functionality. This approach opens a road map towards more reliable contract management software, including the possibility of analysing contracts based on symbolic instead of numeric methods.", "paper_title": "Certified Symbolic Management of Financial Multi-party Contracts", "paper_id": "WOS:000367255800028"}