{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "service_compositions"}, {"score": 0.004220086640742953, "phrase": "prerelease_validation"}, {"score": 0.004074212307838049, "phrase": "quality_assessment_activities"}, {"score": 0.003633927813203731, "phrase": "corrective_actions"}, {"score": 0.003447035529485425, "phrase": "self-supervising_bpel_processes"}, {"score": 0.003372019835750424, "phrase": "special-purpose_compositions"}, {"score": 0.0032697235411641695, "phrase": "user-defined_rules"}, {"score": 0.00308788133472785, "phrase": "system's_execution"}, {"score": 0.0029289895726382653, "phrase": "latter_attempts"}, {"score": 0.002646880721119838, "phrase": "bpel_processes"}, {"score": 0.002623669616798891, "phrase": "self-supervision_capabilities"}, {"score": 0.002544017922741882, "phrase": "crosscutting_concern"}, {"score": 0.0024451427672857458, "phrase": "different_stakeholders"}, {"score": 0.0024130437638400404, "phrase": "different_strategies"}, {"score": 0.0023501014144112443, "phrase": "actual_business_logic"}, {"score": 0.0022787359717772976, "phrase": "supervision-aware_runtime_framework"}, {"score": 0.002238930800075706, "phrase": "enriched_processes"}, {"score": 0.0021613897794439227, "phrase": "in-lab_experiments"}, {"score": 0.0021236300589450143, "phrase": "first_evaluation"}, {"score": 0.0021049977753042253, "phrase": "industrial_partners"}], "paper_keywords": ["Software engineering", " software/program verification", " assertion checkers", " assertion languages", " performance", " design tools and techniques", " distributed/Internet-based software engineering tools and techniques"], "paper_abstract": "Service compositions suffer changes in their partner services. Even if the composition does not change, its behavior may evolve over time and become incorrect. Such changes cannot be fully foreseen through prerelease validation, but impose a shift in the quality assessment activities. Provided functionality and quality of service must be continuously probed while the application executes, and the application itself must be able to take corrective actions to preserve its dependability and robustness. We propose the idea of self-supervising BPEL processes, that is, special-purpose compositions that assess their behavior and react through user-defined rules. Supervision consists of monitoring and recovery. The former checks the system's execution to see whether everything is proceeding as planned, while the latter attempts to fix any anomalies. The paper introduces two languages for defining monitoring and recovery and explains how to use them to enrich BPEL processes with self-supervision capabilities. Supervision is treated as a crosscutting concern that is only blended at runtime, allowing different stakeholders to adopt different strategies with no impact on the actual business logic. The paper also presents a supervision-aware runtime framework for executing the enriched processes, and briefly discusses the results of in-lab experiments and of a first evaluation with industrial partners.", "paper_title": "Self-Supervising BPEL Processes", "paper_id": "WOS:000288760900007"}