{"auto_keywords": [{"score": 0.03874050686675407, "phrase": "cilk_plus"}, {"score": 0.00481495049065317, "phrase": "common_and_popular_task-centric_programming_frameworks"}, {"score": 0.004558748120167778, "phrase": "parallel_programming_models"}, {"score": 0.004289966839994858, "phrase": "appropriate_one"}, {"score": 0.004136333933790974, "phrase": "increasingly_popular_programming_model"}, {"score": 0.004086350434865782, "phrase": "structured_parallel_programming_patterns"}, {"score": 0.004012500850311087, "phrase": "portable_and_composable_manner"}, {"score": 0.003939980614608309, "phrase": "task-centric_programming_model"}, {"score": 0.003640516896245813, "phrase": "threading_building_blocks"}, {"score": 0.0033230588808076267, "phrase": "benchmark_suite"}, {"score": 0.0031269043024513567, "phrase": "many-core_processor"}, {"score": 0.0029965439383500166, "phrase": "openmp"}, {"score": 0.0029422942175866057, "phrase": "highest_flexibility"}, {"score": 0.002392188222609101, "phrase": "energy_consumption"}, {"score": 0.0023346234464901978, "phrase": "intel's_implementation"}, {"score": 0.0023063614119692476, "phrase": "openmp_tasks"}, {"score": 0.0021966859554037174, "phrase": "specialized_run-time_systems"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["OpenMP", " cilk", " TBB", " wool", " scheduling task performance", " TILEPro64 NUMA scheduling"], "paper_abstract": "Programmers today face a bewildering array of parallel programming models and tools, making it difficult to choose an appropriate one for each application. An increasingly popular programming model supporting structured parallel programming patterns in a portable and composable manner is the task-centric programming model. In this study, we compare several popular task-centric programming frameworks, including Cilk Plus, Threading Building Blocks, and various implementations of OpenMP 3.0. We have analyzed their performance on the Barcelona OpenMP Tasking Suite benchmark suite both on a 48-core AMD Opteron 6172 server and a 64-core TILEPro64 embedded many-core processor. Our results show that the OpenMP offers the highest flexibility for programmers, and this flexibility comes to a cost. Frameworks supporting only a specific and more restrictive model, such as Cilk Plus and Threading Building Blocks, are generally more efficient both in terms of performance and energy consumption. However, Intel's implementation of OpenMP tasks performs the best and closest to the specialized run-time systems. Copyright (C) 2013 John Wiley & Sons, Ltd.", "paper_title": "A comparative performance study of common and popular task-centric programming frameworks", "paper_id": "WOS:000349085100001"}