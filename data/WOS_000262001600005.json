{"auto_keywords": [{"score": 0.03498048027388705, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "safe_bounds"}, {"score": 0.004624751696958501, "phrase": "java_programming_language"}, {"score": 0.004245051445971095, "phrase": "dynamic_checks"}, {"score": 0.004139401327448807, "phrase": "array_element"}, {"score": 0.00363080961099728, "phrase": "jit_compilers"}, {"score": 0.003469676666252421, "phrase": "thorough_static_range_analyses"}, {"score": 0.0033492947290751996, "phrase": "less-performance-critical_compilation"}, {"score": 0.0032658649336454923, "phrase": "machine-independent_mobile_code"}, {"score": 0.003152531962718477, "phrase": "static_analysis_results"}, {"score": 0.002982307044758515, "phrase": "linear_constraints"}, {"score": 0.0028642924503126154, "phrase": "mobile_code"}, {"score": 0.0027929100418926725, "phrase": "annotation_framework"}, {"score": 0.0026023381988430666, "phrase": "jit_compiler"}, {"score": 0.0025503112711036994, "phrase": "array_bounds_checks"}, {"score": 0.002486734224234698, "phrase": "expensive_runtime_analysis"}, {"score": 0.0024247382451294255, "phrase": "prototype_system"}, {"score": 0.0022365262201954643, "phrase": "prior_work"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["array bounds check elimination", " verifiable annotations", " integer overflow", " Java", " SafeTSA"], "paper_abstract": "The semantics of the Java programming language require that the out-of-bounds array accesses be caught at runtime. In general, this requires dynamic checks at the time the array element is accessed. Some of these checks can be eliminated statically during just-in-time (JIT) compilation, but the most precise analyses are too expensive to run in JIT compilers. This paper presents a framework in which thorough static range analyses can be used safely during the less-performance-critical compilation of Java source into machine-independent mobile code. In this framework, the static analysis results are used to derive proofs that certain linear inequality constraints hold. These linear constraints and their proofs are then added to the mobile code as annotations. The annotation framework is designed so that proofs can be verified efficiently. This allows the JIT compiler to safely eliminate array bounds checks during compilation without an expensive runtime analysis. Experiments with a prototype system that can generate and verify these annotations demonstrate that this framework is more precise than prior work and that verification is efficient. Copyright (c) 2008 John Wiley & Sons, Ltd.", "paper_title": "Safe bounds check annotations", "paper_id": "WOS:000262001600005"}