{"auto_keywords": [{"score": 0.04351475728041089, "phrase": "object_prefetching"}, {"score": 0.042037044315554925, "phrase": "osd."}, {"score": 0.03585763428068606, "phrase": "sequential_patterns"}, {"score": 0.02556638506390357, "phrase": "object_cache"}, {"score": 0.00481495049065317, "phrase": "object-based_storage_device"}, {"score": 0.004631172395820296, "phrase": "storage_system"}, {"score": 0.004535124351828787, "phrase": "active_research_area"}, {"score": 0.004508050765065517, "phrase": "obss"}, {"score": 0.004335932873514455, "phrase": "storage_devices"}, {"score": 0.004108369978176129, "phrase": "effective_method"}, {"score": 0.00396330930564811, "phrase": "existing_methods"}, {"score": 0.003927848423072668, "phrase": "intra-object_prefetching"}, {"score": 0.0038348235692738783, "phrase": "prefetching_capability"}, {"score": 0.003677280504320636, "phrase": "novel_inter-object_prefetching_approach"}, {"score": 0.003600944099419042, "phrase": "object_access"}, {"score": 0.0035051129798529, "phrase": "data_mining_technique"}, {"score": 0.003321008590273796, "phrase": "object_sequential_rules"}, {"score": 0.0031654684543975077, "phrase": "object_access_context"}, {"score": 0.0031371236027587495, "phrase": "whole_process"}, {"score": 0.0030904433394138963, "phrase": "object_request_service_module"}, {"score": 0.003044455555031339, "phrase": "current_object_access_context"}, {"score": 0.0029722900280316216, "phrase": "object_sequence"}, {"score": 0.002919287408226361, "phrase": "new_object_information"}, {"score": 0.0028076592725295646, "phrase": "sequential_rules_mining_module"}, {"score": 0.00274932545791351, "phrase": "object_sequences"}, {"score": 0.002628362641980801, "phrase": "preprocessing_module"}, {"score": 0.002604814679863312, "phrase": "object_access_stream"}, {"score": 0.00255068452076921, "phrase": "discovered_object"}, {"score": 0.0025127084501976745, "phrase": "sequential_pattern_mining_module"}, {"score": 0.00249767641333441, "phrase": "object_access_sequential_rules_table"}, {"score": 0.002467880918630221, "phrase": "prefetching_engine_module"}, {"score": 0.0024384399939984163, "phrase": "current_requested_object"}, {"score": 0.002380605108907738, "phrase": "prefetching_engine"}, {"score": 0.0023592715993204796, "phrase": "matched_rule"}, {"score": 0.0023381288193776778, "phrase": "highest_confidence"}, {"score": 0.0023171750718791713, "phrase": "rules_table"}, {"score": 0.002255431275670053, "phrase": "corresponding_objects"}, {"score": 0.0022019274077124795, "phrase": "simulated_experimental_results"}, {"score": 0.00217565229221241, "phrase": "prediction_accuracy"}, {"score": 0.0021049977753042253, "phrase": "group-based_prefetching_method"}], "paper_keywords": [""], "paper_abstract": "Capturing the advantages of NAS and SAN, Object-based Storage System (OBSS) is becoming an active research area. OBSS is composed of clients, metadata server, and Object-based Storage Devices (OSDs). Similar to the prefetching of file and block, object prefetching is also an effective method to reduce the object access latency in OSD. However, the existing methods focus on intra-object prefetching [1] and they limit the prefetching capability among objects to a certain extent. In this paper, we present a novel inter-object prefetching approach which considers the characteristics of the object access in OSD. This approach adopts a kind of data mining technique called sequential pattern mining to find the object access sequential patterns [2], then produces the object sequential rules according to the patterns, and finally prefetches objects according to the rules and the object access context. The whole process includes the following three modules: Object Request Service Module. It maintains a current object access context, which is a l-length recently accessed object sequence. Furthermore, it appends new object information to the historic object access stream when an object is accessed. Sequential Rules Mining Module. It is composed of the object sequences preprocessing, the sequential pattern mining and the sequential rules producing modules. The preprocessing module divides the object access stream into many subsequences. Base on the discovered object sequential patterns gained by the sequential pattern mining module, object access sequential rules table is constructed. Prefetching Engine Module. When the current requested object is not in the object cache, the prefetching engine selects a matched rule with the highest confidence from the rules table according to the context, then chooses the corresponding objects and preloads them into the object cache. Simulated experimental results show that both prediction accuracy and object hit rate can be improved comparing with the Group-based prefetching method [3] which can also be used for object prefetching.", "paper_title": "A Rule-Based Prefetching Approach for Object-Based Storage Device", "paper_id": "WOS:000265103800054"}