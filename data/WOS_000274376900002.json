{"auto_keywords": [{"score": 0.040062918732317904, "phrase": "context_inconsistencies"}, {"score": 0.009574322541980184, "phrase": "entire_expression"}, {"score": 0.00481495049065317, "phrase": "context_consistency"}, {"score": 0.004767546015485477, "phrase": "pervasive_computing"}, {"score": 0.004720606036240263, "phrase": "pervasive_computing_environments"}, {"score": 0.0045599093158915326, "phrase": "available_resources"}, {"score": 0.00442651096522781, "phrase": "pervasive_computing_use_contexts"}, {"score": 0.00393066798511457, "phrase": "environmental_noises"}, {"score": 0.0034901729647741353, "phrase": "wrong_state"}, {"score": 0.0031453010852936334, "phrase": "timely_way"}, {"score": 0.0029637093924781825, "phrase": "existing_constraint_checking_techniques"}, {"score": 0.0028768722873689432, "phrase": "affected_consistency_constraint"}, {"score": 0.0028484940955893134, "phrase": "context_changes"}, {"score": 0.0027925723953701083, "phrase": "changed_context"}, {"score": 0.0025415366388578465, "phrase": "rigorous_approach"}, {"score": 0.002467038647952607, "phrase": "previous_checking_results"}, {"score": 0.00240662380079115, "phrase": "entire_rechecking"}, {"score": 0.0023245146355917626, "phrase": "cabot_middleware"}, {"score": 0.0022901862321082407, "phrase": "simulation_experiments"}, {"score": 0.0022563636435096457, "phrase": "case_study"}, {"score": 0.002223039450439376, "phrase": "experimental_results"}, {"score": 0.002147180332779021, "phrase": "fifteenfold_performance_improvement"}, {"score": 0.0021259846592569386, "phrase": "context_inconsistency_detection"}, {"score": 0.0021049977753042253, "phrase": "conventional_approaches"}], "paper_keywords": ["Algorithms", " Performances", " Theory", " Constraints", " performance", " pervasive computing", " validation"], "paper_abstract": "Pervasive computing environments typically change frequently in terms of available resources and their properties. Applications in pervasive computing use contexts to capture these changes and adapt their behaviors accordingly. However, contexts available to these applications may be abnormal or imprecise due to environmental noises. This may result in context inconsistencies, which imply that contexts conflict with each other. The inconsistencies may set such an application into a wrong state or lead the application to misadjust its behavior. It is thus desirable to detect and resolve the context inconsistencies in a timely way. One popular approach is to detect context inconsistencies when contexts breach certain consistency constraints. Existing constraint checking techniques recheck the entire expression of each affected consistency constraint upon context changes. When a changed context affects only a constraint's subexpression, rechecking the entire expression can adversely delay the detection of other context inconsistencies. This article proposes a rigorous approach to identifying the parts of previous checking results that are reusable without entire rechecking. We evaluated our work on the Cabot middleware through both simulation experiments and a case study. The experimental results reported that our approach achieved over a fifteenfold performance improvement on context inconsistency detection than conventional approaches.", "paper_title": "Partial Constraint Checking for Context Consistency in Pervasive Computing", "paper_id": "WOS:000274376900002"}