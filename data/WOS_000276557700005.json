{"auto_keywords": [{"score": 0.04469045542220274, "phrase": "parallel_loop"}, {"score": 0.008341708125468425, "phrase": "smt"}, {"score": 0.00481495049065317, "phrase": "parallel_programs"}, {"score": 0.004666598697538815, "phrase": "simultaneous_multithreading"}, {"score": 0.003965468669507077, "phrase": "parallel_execution_overhead"}, {"score": 0.003701401653850141, "phrase": "smt_multiprocessor"}, {"score": 0.0035204268675160257, "phrase": "appropriate_number"}, {"score": 0.0032858981413454802, "phrase": "adaptive_execution_techniques"}, {"score": 0.00320453237792, "phrase": "proper_execution_mode"}, {"score": 0.0030862341714020694, "phrase": "conventional_loop-level_parallel_program"}, {"score": 0.0029722900280316216, "phrase": "compiler_preprocessor"}, {"score": 0.0028446460307503343, "phrase": "dynamic_feedbacks"}, {"score": 0.002756832447586547, "phrase": "run_time"}, {"score": 0.002722468694023035, "phrase": "optimal_number"}, {"score": 0.0025892330566358503, "phrase": "parallel_application"}, {"score": 0.002447101794397243, "phrase": "standard_numerical_applications"}, {"score": 0.0023566987138026285, "phrase": "real_smt_multiprocessor_machine"}], "paper_keywords": ["Simultaneous multithreading", " Adaptive execution", " Multiprocessors", " Multicores", " Performance estimation", " Performance counters", " Compiler preprocessors"], "paper_abstract": "In simultaneous multithreading (SMT) multiprocessors, using all the available threads (logical processors) to run a parallel loop is not always beneficial due to the interference between threads and parallel execution overhead. To maximize the performance of a parallel loop on an SMT multiprocessor, it is important to find an appropriate number of threads for executing the parallel loop. This article presents adaptive execution techniques that find a proper execution mode for each parallel loop in a conventional loop-level parallel program on SMT multiprocessors. A compiler preprocessor generates code that, based on dynamic feedbacks, automatically determines at run time the optimal number of threads for each parallel loop in the parallel application. We evaluate our technique using a set of standard numerical applications and running them on a real SMT multiprocessor machine with 8 hardware contexts. Our approach is general enough to work well with other SMT multiprocessor or multicore systems. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Adaptive execution techniques of parallel programs for multiprocessors", "paper_id": "WOS:000276557700005"}