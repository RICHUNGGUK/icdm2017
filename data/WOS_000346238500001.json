{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "locating_procedure"}, {"score": 0.03312386540905821, "phrase": "tracing_procedure"}, {"score": 0.015719716506582538, "phrase": "synchronous_message"}, {"score": 0.009003852341436247, "phrase": "structural_operational_semantics"}, {"score": 0.00797490086693615, "phrase": "fix_equation"}, {"score": 0.004764220976404241, "phrase": "-based_concurrent_programs"}, {"score": 0.004542441734438654, "phrase": "semantic_framework"}, {"score": 0.004447201233380302, "phrase": "passing-based_concurrent_programs"}, {"score": 0.004285289574869884, "phrase": "parallel_computing"}, {"score": 0.004240116703465252, "phrase": "distributed_systems"}, {"score": 0.004000010693331517, "phrase": "concurrent_programming_language_model"}, {"score": 0.003916098498242888, "phrase": "existing_concurrent_programming_languages"}, {"score": 0.0038339398365449507, "phrase": "sequential_programming_languages"}, {"score": 0.0037336520904376687, "phrase": "communication_statements"}, {"score": 0.003304965389155549, "phrase": "debugging_process"}, {"score": 0.0030039966201398966, "phrase": "failed_test_case"}, {"score": 0.0029565620771207003, "phrase": "specially_designed_data_structures"}, {"score": 0.0029098743621130004, "phrase": "useful_execution_information"}, {"score": 0.0027015344365793016, "phrase": "synchronous_communication"}, {"score": 0.002575526825728026, "phrase": "ill-designed_statement"}], "paper_keywords": ["debugging", " synchronous", " message passing", " concurrent program", " operational semantics"], "paper_abstract": "In this paper, we propose a semantic framework to debug synchronous message passing-based concurrent programs, which are increasingly useful as parallel computing and distributed systems become more and more pervasive. We first design a concurrent programming language model to uniformly represent existing concurrent programming languages. Compared to sequential programming languages, this model contains communication statements, i.e., sending and receiving statements, and a concurrent structure to represent communication and concurrency. We then propose a debugging process consisting of a tracing and a locating procedure. The tracing procedure re-executes a program with a failed test case and uses specially designed data structures to collect useful execution information for locating bugs. We provide for the tracing procedure a structural operational semantics to represent synchronous communication and concurrency. The locating procedure backward locates the ill-designed statement by using information obtained in the tracing procedure, generates a fix equation, and tries to fix the bug by solving the fix equation. We also propose a structural operational semantics for the locating procedure. We supply two examples to test our proposed operational semantics.", "paper_title": "A formal semantics for debugging synchronous message passing-based concurrent programs", "paper_id": "WOS:000346238500001"}