{"auto_keywords": [{"score": 0.02618930228588569, "phrase": "cfg-match_approach"}, {"score": 0.015241037226638922, "phrase": "control_flow_graphs"}, {"score": 0.015040308686576824, "phrase": "program_similarity"}, {"score": 0.007559351540563765, "phrase": "java_program_plagiarism"}, {"score": 0.00481495049065317, "phrase": "similarity_measure"}, {"score": 0.004772137871562584, "phrase": "java_programs"}, {"score": 0.00470862827326028, "phrase": "optimal_matching"}, {"score": 0.004543352284098364, "phrase": "important_role"}, {"score": 0.0044430006374681285, "phrase": "software_engineering"}, {"score": 0.004306205029641728, "phrase": "instruction_sequences"}, {"score": 0.004267896572751978, "phrase": "complex_structures"}, {"score": 0.004229927464182562, "phrase": "semantic_functions"}, {"score": 0.0038855864345030563, "phrase": "difficult_task"}, {"score": 0.0036335821512795026, "phrase": "new_approach"}, {"score": 0.0035851703423654432, "phrase": "java_program_similarity"}, {"score": 0.003474694300991964, "phrase": "low-level_similarity"}, {"score": 0.003367611042980526, "phrase": "bytecode_instruction_sequences"}, {"score": 0.0033227310662785293, "phrase": "structural_property"}, {"score": 0.003278447235176858, "phrase": "basic_blocks"}, {"score": 0.0032059442984238664, "phrase": "error-tolerant_graph"}, {"score": 0.0031210475158175432, "phrase": "structure_transformations"}, {"score": 0.0030113338930933395, "phrase": "cfg"}, {"score": 0.0029447150254434842, "phrase": "basic_block_similarity"}, {"score": 0.002905454531687249, "phrase": "high-level_similarity"}, {"score": 0.002879650740163263, "phrase": "java"}, {"score": 0.0027907771648224273, "phrase": "matched_pairs"}, {"score": 0.0027535633837592597, "phrase": "independent_paths"}, {"score": 0.0027047136845332917, "phrase": "optimal_cfg_matching"}, {"score": 0.0026686444508167875, "phrase": "proposed_cfg-match_approach"}, {"score": 0.0026095920086044145, "phrase": "string-based_approach"}, {"score": 0.002574788013427524, "phrase": "tree-based_approach"}, {"score": 0.0025404470150468387, "phrase": "graph-based_approach"}, {"score": 0.0023861329619604666, "phrase": "semantics-preserving_transformations"}, {"score": 0.0022311596751824416, "phrase": "benchmark_program_pairs"}, {"score": 0.0021915573326125428, "phrase": "students'_submission"}, {"score": 0.0021720199689914464, "phrase": "project_assignments"}, {"score": 0.0021049977753042253, "phrase": "comparative_approaches"}], "paper_keywords": ["Program similarity measure", " control flow graph", " error-tolerant graph matching", " similarity-based program analysis"], "paper_abstract": "Measuring program similarity plays an important role in solving many problems in software engineering. However, because programs are instruction sequences with complex structures and semantic functions and furthermore, programs may be obfuscated deliberately through semantics-preserving transformations, measuring program similarity is a difficult task that has not been adequately addressed. In this paper, we propose a new approach to measuring Java program similarity. The approach first measures the low-level similarity between basic blocks according to the bytecode instruction sequences and the structural property of the basic blocks. Then, an error-tolerant graph matching algorithm that can combat structure transformations is used to match the Control Flow Graphs (CFG) based on the basic block similarity. The high-level similarity between Java programs is subsequently calculated on the matched pairs of the independent paths extracted from the optimal CFG matching. The proposed CFG-Match approach is compared with a string-based approach, a tree-based approach and a graph-based approach. Experimental results show that the CFG-Match approach is more accurate and robust against semantics-preserving transformations. The CFG-Match approach is used to detect Java program plagiarism. Experiments on the collection of benchmark program pairs collected from the students' submission of project assignments demonstrate that the CFG-Match approach outperforms the comparative approaches in the detection of Java program plagiarism.", "paper_title": "Improving Similarity Measure for Java Programs Based on Optimal Matching of Control Flow Graphs", "paper_id": "WOS:000368434300004"}