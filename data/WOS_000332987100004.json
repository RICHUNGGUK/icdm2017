{"auto_keywords": [{"score": 0.033885156102158503, "phrase": "fuel"}, {"score": 0.015544936496918793, "phrase": "object_graphs"}, {"score": 0.00481495049065317, "phrase": "different_environments"}, {"score": 0.0045855181084455444, "phrase": "serialization_frameworks"}, {"score": 0.004551199992546761, "phrase": "different_requirements"}, {"score": 0.004517137548648729, "phrase": "design_trade-offs"}, {"score": 0.004383406949799696, "phrase": "recursive_parsing"}, {"score": 0.0040508247605225214, "phrase": "language-agnostic_format"}, {"score": 0.003975416846030462, "phrase": "language-specific_object_serialization"}, {"score": 0.003771631577951067, "phrase": "class-shape_changes"}, {"score": 0.0036461569988218267, "phrase": "load_actions"}, {"score": 0.002976019715894587, "phrase": "compact_binary_format"}, {"score": 0.002942619810718864, "phrase": "pickling_algorithm"}, {"score": 0.002844646030750337, "phrase": "best_performance"}, {"score": 0.0026986685585382347, "phrase": "special_help"}, {"score": 0.0026784565897324123, "phrase": "vm"}, {"score": 0.002550545394070177, "phrase": "full-featured_language-specific_format"}, {"score": 0.0024655937184857547, "phrase": "pharo"}, {"score": 0.002330233210731173, "phrase": "special_vm_support"}, {"score": 0.0022022878843247274, "phrase": "newspeak"}, {"score": 0.0021857667493036786, "phrase": "debugger_stacks"}, {"score": 0.002161216637621284, "phrase": "full_content_management_system_object_graphs"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["object-oriented programming", " pickle format", " object graphs", " serialization", " Smalltalk"], "paper_abstract": "Because objects need to be stored and reloaded on different environments, serializing object graphs is a very important activity. There is a plethora of serialization frameworks with different requirements and design trade-offs. Most of them are based on recursive parsing of the object graphs, an approach which often is too slow. In addition, most of them prioritize a language-agnostic format instead of speed and language-specific object serialization. For the same reason, such serializers usually do not support features such as class-shape changes, global references or executing pre and post load actions. Looking for speed, some frameworks are partially implemented at Virtual Machine (VM) level, hampering code portability and making them difficult to understand, maintain and extend. In this paper, we present Fuel, a general-purpose object serializer based on these principles: (1) speed, through a compact binary format and a pickling algorithm which invests time in serialization for obtaining the best performance on materialization; (2) good object-oriented design, without special help at VM; and (3) serialize any object, thus have a full-featured language-specific format. We implement and validate this approach in Pharo, where we demonstrate that Fuel is faster than other serializers, even those with special VM support. The extensibility of Fuel made possible to successfully serialize various objects: classes in Newspeak, debugger stacks, and full content management system object graphs. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Fuel: a fast general purpose object graph serializer", "paper_id": "WOS:000332987100004"}