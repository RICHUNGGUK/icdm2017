{"auto_keywords": [{"score": 0.02850486253370364, "phrase": "formal_models"}, {"score": 0.00481495049065317, "phrase": "fault_tolerance"}, {"score": 0.004772593750252861, "phrase": "exception_handling"}, {"score": 0.004606843145343611, "phrase": "dependable_systems"}, {"score": 0.004546174820239776, "phrase": "untrusted_software_components"}, {"score": 0.004198510172614725, "phrase": "architectural_mismatches"}, {"score": 0.003929107176349023, "phrase": "system_design"}, {"score": 0.003709595902020469, "phrase": "architectural_abstraction"}, {"score": 0.0035965032173588753, "phrase": "fault-tolerant_software_systems"}, {"score": 0.00342568771304873, "phrase": "existing_untrusted_software_element"}, {"score": 0.0033805214040814233, "phrase": "idealised_fault-tolerant_architectural_element"}, {"score": 0.0032057142600527, "phrase": "rigorous_software_development_approach"}, {"score": 0.003163439005885435, "phrase": "formal_methods"}, {"score": 0.0030399188412691914, "phrase": "software_architecture"}, {"score": 0.002999823428906084, "phrase": "proposed_approach"}, {"score": 0.0029471818883482688, "phrase": "formal_specification"}, {"score": 0.0028826733506942554, "phrase": "exception_propagation"}, {"score": 0.002832081745025006, "phrase": "important_dependability_properties"}, {"score": 0.00278237555651743, "phrase": "deadlock_freedom"}, {"score": 0.002721464488351771, "phrase": "architectural_reconfiguration"}, {"score": 0.0026267609106294817, "phrase": "model_transformation"}, {"score": 0.0026036031415940563, "phrase": "uml_diagrams"}, {"score": 0.002535344521369057, "phrase": "system_structure"}, {"score": 0.0024579623598183355, "phrase": "system_behaviour"}, {"score": 0.002320449502337321, "phrase": "integration_test"}, {"score": 0.0022101055924375725, "phrase": "source_code"}, {"score": 0.0021521410307795657, "phrase": "proposed_architectural_approach"}, {"score": 0.0021049977753042253, "phrase": "embedded_critical_case_study"}], "paper_keywords": ["exception handling", " fault-tolerant software architecture", " model-based test", " model checking", " software verification and validation"], "paper_abstract": "When building dependable systems by integrating untrusted software components that were not originally designed to interact with each other, it is likely the occurrence of architectural mismatches related to assumptions in their failure behaviour. These mismatches, if not prevented during system design, have to be tolerated during runtime. This paper presents an architectural abstraction based on exception handling for structuring fault-tolerant software systems. This abstraction comprises several components and connectors that promote an existing untrusted software element into an idealised fault-tolerant architectural element. Moreover, it is considered in the context of a rigorous software development approach based on formal methods for representing the structure and behaviour of the software architecture. The proposed approach relies on a formal specification and verification for analysing exception propagation, and verifying important dependability properties, such as deadlock freedom, and scenarios of architectural reconfiguration. The formal models are automatically generated using model transformation from UML diagrams: component diagram representing the system structure, and sequence diagrams representing the system behaviour. Finally, the formal models are also used for generating unit and integration test cases that are used for assessing the correctness of the source code. The feasibility of the proposed architectural approach was evaluated on an embedded critical case study.", "paper_title": "Architecting Fault Tolerance with Exception Handling: Verification and Validation", "paper_id": "WOS:000265041400005"}