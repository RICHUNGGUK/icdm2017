{"auto_keywords": [{"score": 0.04410425397162581, "phrase": "data_overload"}, {"score": 0.015533304978687707, "phrase": "dynamic_data_streams"}, {"score": 0.013379030517122727, "phrase": "frequent-pattern_mining"}, {"score": 0.00481495049065317, "phrase": "frequent_patterns"}, {"score": 0.004700193486903964, "phrase": "data_load_management"}, {"score": 0.004451846834142146, "phrase": "practical_problem"}, {"score": 0.004398457709182882, "phrase": "frequent-itemset_discovery"}, {"score": 0.004345706062641742, "phrase": "data-stream_environments"}, {"score": 0.004140924670517666, "phrase": "main_issues"}, {"score": 0.004042166795461166, "phrase": "data-overload_handling"}, {"score": 0.003922011960904278, "phrase": "mining_algorithm"}, {"score": 0.003692271726952282, "phrase": "basic_information"}, {"score": 0.0034342161742428635, "phrase": "mining_task"}, {"score": 0.0032722454818973853, "phrase": "approximate_counts"}, {"score": 0.0031367803372203498, "phrase": "frequent_ones"}, {"score": 0.002779769492357829, "phrase": "system_throughput"}, {"score": 0.0027298319171606498, "phrase": "data_load"}, {"score": 0.0026646374739979694, "phrase": "experimental_data"}, {"score": 0.002508365161206412, "phrase": "good_accuracy"}, {"score": 0.0023328599525181707, "phrase": "overload-handling_mechanisms"}, {"score": 0.0022361964497681934, "phrase": "feasible_solution"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Data mining", " Data streams", " Frequent patterns", " Combinatorial approximation", " Overload handling", " Load shedding"], "paper_abstract": "In this paper, we study the practical problem of frequent-itemset discovery in data-stream environments which may suffer from data overload. The main issues include frequent-pattern mining and data-overload handling. Therefore, a mining algorithm together with two dedicated overload-handling mechanisms is proposed. The algorithm extracts basic information from streaming data and keeps the information in its data structure. The mining task is accomplished when requested by calculating the approximate counts of itemsets and then returning the frequent ones. When there exists data overload, one of the two mechanisms is executed to settle the overload by either improving system throughput or shedding data load. From the experimental data, we find that our mining algorithm is efficient and possesses good accuracy. More importantly, it could effectively manage data overload with the overload-handling mechanisms. Our research results may lead to a feasible solution for frequent-pattern mining in dynamic data streams. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Mining frequent patterns from dynamic data streams with data load management", "paper_id": "WOS:000303626300010"}