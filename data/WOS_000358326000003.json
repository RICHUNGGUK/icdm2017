{"auto_keywords": [{"score": 0.04826300170743257, "phrase": "predicate_invention"}, {"score": 0.00481495049065317, "phrase": "higher-order_dyadic_datalog"}, {"score": 0.004478308876320956, "phrase": "inductive_logic_programming"}, {"score": 0.004350308086118336, "phrase": "efficient_search_mechanisms"}, {"score": 0.004246428036409373, "phrase": "recent_paper"}, {"score": 0.003949377440799037, "phrase": "regular_and_context-free_grammars"}, {"score": 0.003855034057431947, "phrase": "metalogical_substitutions"}, {"score": 0.00376293585033711, "phrase": "modified_prolog_meta-interpreter"}, {"score": 0.0036730297909962142, "phrase": "learning_engine"}, {"score": 0.003637669525737665, "phrase": "new_predicate_symbols"}, {"score": 0.0034995881411519925, "phrase": "higher-order_variables"}, {"score": 0.003270396852243212, "phrase": "higher-order_logical_reasoning"}, {"score": 0.0031159081999910694, "phrase": "meta-interpretive_learning"}, {"score": 0.002997572637726648, "phrase": "higher-order_dyadic_datalog_programs"}, {"score": 0.002897710777957041, "phrase": "infinite_signature"}, {"score": 0.002869793011316547, "phrase": "higher-order_dyadic_datalog_class"}, {"score": 0.0028284578662792345, "phrase": "turing"}, {"score": 0.0027341763737751467, "phrase": "finite_signature"}, {"score": 0.002655894070657161, "phrase": "knuth-bendix_ordering"}, {"score": 0.0026175952455594277, "phrase": "hypothesis_space"}, {"score": 0.002579847272930948, "phrase": "logarithmic_clause"}, {"score": 0.0024818194799172263, "phrase": "minimal_cardinality_definitions"}, {"score": 0.0023530698447434308, "phrase": "metagol"}, {"score": 0.002319127685733821, "phrase": "compact_definitions"}, {"score": 0.002263639474937039, "phrase": "robotic_strategies"}, {"score": 0.002230984431056064, "phrase": "east-west_train_challenge"}, {"score": 0.0022094759531152072, "phrase": "nell."}, {"score": 0.0021881743793875767, "phrase": "higher-order_concepts"}, {"score": 0.002135812692862058, "phrase": "nell_language_learning_domain"}, {"score": 0.0021049977753042253, "phrase": "metagol_code"}], "paper_keywords": ["Induction", " Abduction", " Meta-interpretation", " Predicate invention", " Learning recursion"], "paper_abstract": "Since the late 1990s predicate invention has been under-explored within inductive logic programming due to difficulties in formulating efficient search mechanisms. However, a recent paper demonstrated that both predicate invention and the learning of recursion can be efficiently implemented for regular and context-free grammars, by way of metalogical substitutions with respect to a modified Prolog meta-interpreter which acts as the learning engine. New predicate symbols are introduced as constants representing existentially quantified higher-order variables. The approach demonstrates that predicate invention can be treated as a form of higher-order logical reasoning. In this paper we generalise the approach of meta-interpretive learning (MIL) to that of learning higher-order dyadic datalog programs. We show that with an infinite signature the higher-order dyadic datalog class has universal Turing expressivity though is decidable given a finite signature. Additionally we show that Knuth-Bendix ordering of the hypothesis space together with logarithmic clause bounding allows our MIL implementation Metagol to PAC-learn minimal cardinality definitions. This result is consistent with our experiments which indicate that Metagol efficiently learns compact definitions involving predicate invention for learning robotic strategies, the East-West train challenge and NELL. Additionally higher-order concepts were learned in the NELL language learning domain. The Metagol code and datasets described in this paper have been made publicly available on a website to allow reproduction of results in this paper.", "paper_title": "Meta-interpretive learning of higher-order dyadic datalog: predicate invention revisited", "paper_id": "WOS:000358326000003"}