{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "resource_usage_analysis"}, {"score": 0.0041102032028337366, "phrase": "usage_policies"}, {"score": 0.0035705347414368696, "phrase": "effect_system"}, {"score": 0.003298631258267805, "phrase": "history_expression"}, {"score": 0.002790511479398411, "phrase": "suitable_transformation"}, {"score": 0.0027417911324611917, "phrase": "history_expressions"}, {"score": 0.0022192891418394514, "phrase": "runtime_monitor"}], "paper_keywords": ["Languages", " Security", " Theory", " Verification", " Usage policies", " type and effect systems", " model-checking"], "paper_abstract": "An extension of the lambda-calculus is proposed, to study resource usage analysis and verification. It features usage policies with a possibly nested, local scope, and dynamic creation of resources. We define a type and effect system that, given a program, extracts a history expression, that is, a sound overapproximation to the set of histories obtainable at runtime. After a suitable transformation, history expressions are model-checked for validity. A program is resource-safe if its history expression is verified valid: If such, no runtime monitor is needed to safely drive its executions.", "paper_title": "Local Policies for Resource Usage Analysis", "paper_id": "WOS:000271214200004"}