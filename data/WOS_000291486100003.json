{"auto_keywords": [{"score": 0.038246058185548, "phrase": "embedded_systems_domain"}, {"score": 0.00481495049065317, "phrase": "classifier_ensembles"}, {"score": 0.004758987153057194, "phrase": "software_defects"}, {"score": 0.004685375117376838, "phrase": "application_layer"}, {"score": 0.004648995193787914, "phrase": "embedded_systems"}, {"score": 0.004523865550323285, "phrase": "software_quality"}, {"score": 0.004471270242168067, "phrase": "real_challenge"}, {"score": 0.004436545340717729, "phrase": "software_testing"}, {"score": 0.004200874581076468, "phrase": "safe_code"}, {"score": 0.004168240841388958, "phrase": "defective_increases"}, {"score": 0.004008820473628357, "phrase": "low_margins"}, {"score": 0.003870541730075597, "phrase": "defect_prediction_model"}, {"score": 0.0036791522245326514, "phrase": "industrial_partner"}, {"score": 0.0035108659422301985, "phrase": "embedded_projects"}, {"score": 0.0034029588672379926, "phrase": "critical_software"}, {"score": 0.0029224275921964724, "phrase": "commercial_products"}, {"score": 0.002490053106007765, "phrase": "publicly_available_data"}, {"score": 0.00228499525153, "phrase": "balance_rates"}, {"score": 0.0022407927161620855, "phrase": "cost-benefit_analysis"}, {"score": 0.0022146817879683204, "phrase": "proposed_model"}, {"score": 0.0021049977753042253, "phrase": "local_datasets"}], "paper_keywords": ["Defect prediction", " Ensemble of classifiers", " Static code attributes", " Embedded software"], "paper_abstract": "As the application layer in embedded systems dominates over the hardware, ensuring software quality becomes a real challenge. Software testing is the most time-consuming and costly project phase, specifically in the embedded software domain. Misclassifying a safe code as defective increases the cost of projects, and hence leads to low margins. In this research, we present a defect prediction model based on an ensemble of classifiers. We have collaborated with an industrial partner from the embedded systems domain. We use our generic defect prediction models with data coming from embedded projects. The embedded systems domain is similar to mission critical software so that the goal is to catch as many defects as possible. Therefore, the expectation from a predictor is to get very high probability of detection (pd). On the other hand, most embedded systems in practice are commercial products, and companies would like to lower their costs to remain competitive in their market by keeping their false alarm (pf) rates as low as possible and improving their precision rates. In our experiments, we used data collected from our industry partners as well as publicly available data. Our results reveal that ensemble of classifiers significantly decreases pf down to 15% while increasing precision by 43% and hence, keeping balance rates at 74%. The cost-benefit analysis of the proposed model shows that it is enough to inspect 23% of the code on local datasets to detect around 70% of defects.", "paper_title": "An industrial case study of classifier ensembles for locating software defects", "paper_id": "WOS:000291486100003"}