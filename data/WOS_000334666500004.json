{"auto_keywords": [{"score": 0.04729970083817859, "phrase": "magiclock"}, {"score": 0.022777775870967357, "phrase": "large-scale_multithreaded_programs"}, {"score": 0.010612387000973441, "phrase": "potential_deadlocks"}, {"score": 0.009057265682919903, "phrase": "execution_traces"}, {"score": 0.003945467978172845, "phrase": "deadlock_occurrence"}, {"score": 0.003643185395780667, "phrase": "removable_lock_dependencies"}, {"score": 0.0035712919163869176, "phrase": "potential_deadlock_localization"}, {"score": 0.0034317185678527672, "phrase": "lock_dependencies"}, {"score": 0.0033306180744375616, "phrase": "specific_partitions"}, {"score": 0.0032324864013225166, "phrase": "equivalent_lock_dependencies"}, {"score": 0.002984665318717504, "phrase": "lock_dependency_chains"}, {"score": 0.0027834145465170292, "phrase": "duplicated_permutations"}, {"score": 0.0021049977753042253, "phrase": "existing_dynamic_detectors"}], "paper_keywords": ["Deadlock detection", " multithreaded programs", " concurrency", " lock order graph", " scalability"], "paper_abstract": "We present Magiclock, a novel potential deadlock detection technique by analyzing execution traces (containing no deadlock occurrence) of large-scale multithreaded programs. Magiclock iteratively eliminates removable lock dependencies before potential deadlock localization. It divides lock dependencies into thread specific partitions, consolidates equivalent lock dependencies, and searches over the set of lock dependency chains without the need to examine any duplicated permutations of the same lock dependency chains. We validate Magiclock through a suite of real-world, large-scale multithreaded programs. The experimental results show that Magiclock is significantly more scalable and efficient than existing dynamic detectors in analyzing and detecting potential deadlocks in execution traces of large-scale multithreaded programs.", "paper_title": "Magiclock: Scalable Detection of Potential Deadlocks in Large-Scale Multithreaded Programs", "paper_id": "WOS:000334666500004"}