{"auto_keywords": [{"score": 0.04756494355891956, "phrase": "tso"}, {"score": 0.01472827365642848, "phrase": "pso"}, {"score": 0.00481495049065317, "phrase": "dynamic_partial_order_reduction"}, {"score": 0.004757643419056999, "phrase": "relaxed_memory_models"}, {"score": 0.004645057834614705, "phrase": "relaxed_memory_model"}, {"score": 0.00429715240295033, "phrase": "shared-memory_multiprocessor"}, {"score": 0.004047296286849109, "phrase": "thread_scheduling"}, {"score": 0.0037664981403399064, "phrase": "large_body"}, {"score": 0.003633464433320317, "phrase": "scheduling_nondeterminism"}, {"score": 0.0035901685646972585, "phrase": "runtime_verification"}, {"score": 0.0032618078775887077, "phrase": "new_dynamic_partial_order_reduction"}, {"score": 0.0031277316566463978, "phrase": "concurrent_programs"}, {"score": 0.0030536016133253935, "phrase": "pso."}, {"score": 0.0028586409810976367, "phrase": "unified_framework"}, {"score": 0.002741091312632307, "phrase": "existing_por_techniques"}, {"score": 0.002612640527241776, "phrase": "verification_algorithm"}, {"score": 0.0025202652156798367, "phrase": "por"}, {"score": 0.0024311346712789553, "phrase": "buffer-bounding_method"}, {"score": 0.0023451553255837317, "phrase": "state_space"}, {"score": 0.0022352169832099153, "phrase": "stateless_model"}, {"score": 0.0021049977753042253, "phrase": "multithreaded_c_benchmarks"}], "paper_keywords": ["Stateless model checking", " partial order reduction", " run-time verification", " relaxed memory model", " DPOR", " TSO", " PSO"], "paper_abstract": "Under a relaxed memory model such as TSO or PSO, a concurrent program running on a shared-memory multiprocessor may observe two types of nondeterminism: the nondeterminism in thread scheduling and the nondeterminism in store buffering. Although there is a large body of work on mitigating the scheduling nondeterminism during runtime verification, methods for soundly mitigating the store buffering nondeterminism are lacking. We propose a new dynamic partial order reduction (POR) algorithm for verifying concurrent programs under TSO and PSO. Our method relies on modeling both types of nondeterminism in a unified framework, which allows us to extend existing POR techniques to TSO and PSO without overhauling the verification algorithm. In addition to sound POR, we also propose a buffer-bounding method for more aggressively reducing the state space. We have implemented our new methods in a stateless model checking tool and demonstrated their effectiveness on a set of multithreaded C benchmarks.", "paper_title": "Dynamic Partial Order Reduction for Relaxed Memory Models", "paper_id": "WOS:000361284200024"}