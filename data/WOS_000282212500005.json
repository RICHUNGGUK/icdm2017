{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "neural_network_simulators"}, {"score": 0.004123781267600542, "phrase": "user_complete_flexibility"}, {"score": 0.003984141889010296, "phrase": "mathematical_model"}, {"score": 0.003816197777388722, "phrase": "high_level_way"}, {"score": 0.003471135453226184, "phrase": "low_level_language"}, {"score": 0.0030239842475439814, "phrase": "different_hardware_platforms"}, {"score": 0.0029467742734417255, "phrase": "inexpensive_high_performance_graphics_processing_units"}, {"score": 0.002822434555587263, "phrase": "code_generation"}, {"score": 0.002680114113899346, "phrase": "computer_algebra_systems"}, {"score": 0.0025014259919355453, "phrase": "generated_code"}, {"score": 0.002236055625099805, "phrase": "simulation_package"}, {"score": 0.0021049977753042253, "phrase": "'brian'_simulator"}], "paper_keywords": ["Code generation", " Spiking neural networks", " Simulation", " Graphics processing units", " Computer algebra systems", " Numerical integration", " Python", " C plus"], "paper_abstract": "We demonstrate a technique for the design of neural network simulation software, runtime code generation. This technique can be used to give the user complete flexibility in specifying the mathematical model for their simulation in a high level way, along with the speed of code written in a low level language such as C++. It can also be used to write code only once but target different hardware platforms, including inexpensive high performance graphics processing units (GPUs). Code generation can be naturally combined with computer algebra systems to provide further simplification and optimisation of the generated code. The technique is quite general and could be applied to any simulation package. We demonstrate it with the 'Brian' simulator (http://www.briansimulator.org).", "paper_title": "Code Generation: A Strategy for Neural Network Simulators", "paper_id": "WOS:000282212500005"}