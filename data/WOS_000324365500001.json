{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "message-based_interactions"}, {"score": 0.004632039024076267, "phrase": "interface_contract"}, {"score": 0.004398872331144531, "phrase": "possible_messages"}, {"score": 0.004231699728933577, "phrase": "multiple_parties"}, {"score": 0.003992729692096799, "phrase": "incoming_messages"}, {"score": 0.003623949225126944, "phrase": "cooperative_runtime_monitoring"}, {"score": 0.002639968630788011, "phrase": "sender's_compliance"}, {"score": 0.0025230952890994236, "phrase": "monitoring_computation"}, {"score": 0.00244278788608393, "phrase": "particular_application"}, {"score": 0.0023346234464901978, "phrase": "web_services"}, {"score": 0.0022897425998475362, "phrase": "service_providers"}, {"score": 0.0022168460543913787, "phrase": "contract_compliance"}, {"score": 0.0021883400011393564, "phrase": "third-party_clients"}, {"score": 0.0021462652605453163, "phrase": "small_cost"}, {"score": 0.0021049977753042253, "phrase": "server_side"}], "paper_keywords": ["runtime monitoring", " temporal logic", " distributed computing", " web services"], "paper_abstract": "Requirements on message-based interactions can be formalised as an interface contract that specifies constraints on the sequence of possible messages that can be exchanged by multiple parties. At runtime, each peer can monitor incoming messages and check that the contract is correctly being followed by their respective senders. We introduce cooperative runtime monitoring, where a recipient delegates' its monitoring task to the sender, which is required to provide evidence that the message it sends complies with the contract. In turn, this evidence can be quickly checked by the recipient, which is then guaranteed of the sender's compliance to the contract without doing the monitoring computation by itself. A particular application of this concept is shown on web services, where service providers can monitor and enforce contract compliance of third-party clients at a small cost on the server side, while avoiding to certify or digitally sign them.", "paper_title": "Cooperative runtime monitoring", "paper_id": "WOS:000324365500001"}