{"auto_keywords": [{"score": 0.039162752668406006, "phrase": "eager_designs"}, {"score": 0.00863023679003318, "phrase": "lazy_ones"}, {"score": 0.00481495049065317, "phrase": "store_management"}, {"score": 0.004768649568826951, "phrase": "eager_hardware_transactional_memory"}, {"score": 0.004165105357908494, "phrase": "effective_techniques"}, {"score": 0.004125027493339274, "phrase": "store_management_results"}, {"score": 0.0040656296649390486, "phrase": "quick_degradation"}, {"score": 0.0039685202936462815, "phrase": "eager_htm_systems"}, {"score": 0.00393032656248792, "phrase": "increasing_contention"}, {"score": 0.003334309053314909, "phrase": "speculative_stores"}, {"score": 0.00317681090697906, "phrase": "migratory_sharing"}, {"score": 0.0030858947334838145, "phrase": "store_latency"}, {"score": 0.002954361295811154, "phrase": "cache_lines"}, {"score": 0.0028421434495262796, "phrase": "substantial_improvements"}, {"score": 0.002814759530655965, "phrase": "execution_time"}, {"score": 0.0027474453262607834, "phrase": "high_contention"}, {"score": 0.002252701813819903, "phrase": "cache_coherent_architectures"}, {"score": 0.0021670777282518424, "phrase": "judicious_management"}], "paper_keywords": ["Parallel programming", " multicore architectures", " transactional memory"], "paper_abstract": "Hardware transactional memory (HTM) designs are very sensitive to the manner in which speculative updates from transactions are handled in the system. This study highlights how the lack of effective techniques for store management results in a quick degradation in the performance of eager HTM systems with increasing contention and, thus, lends credence to the belief that eager designs do not perform as well as their lazy counterparts when conflicts abound. In this work, we present two simple ways to improve handling of speculative stores-a way to effectively manage lines that exhibit migratory sharing and a way to hide store latency, particularly for those stores that target contended cache lines owned by other concurrent transactions. These two mechanisms yield substantial improvements in execution time when running applications with high contention, allowing eager designs to exceed the performance of lazy ones. Interestingly, the benefits that accrue from these enhancements can be at par with those achieved using more complex system-wide HTM techniques. Coupled with the fact that eager designs are easier to integrate into cache coherent architectures than lazy ones, we claim that with judicious management of stores they represent a more compelling design alternative.", "paper_title": "Eager Beats Lazy: Improving Store Management in Eager Hardware Transactional Memory", "paper_id": "WOS:000325170700008"}