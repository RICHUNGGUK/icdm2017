{"auto_keywords": [{"score": 0.040691162217611467, "phrase": "internal_points"}, {"score": 0.004744518409229909, "phrase": "gpu."}, {"score": 0.004561386908745206, "phrase": "novel_parallel_algorithm"}, {"score": 0.00447251540886613, "phrase": "convex_hull"}, {"score": 0.004257806363128601, "phrase": "cuda_programming_model"}, {"score": 0.0041136473765874815, "phrase": "quickhull_approach"}, {"score": 0.003993958025223994, "phrase": "initial_tetrahedron"}, {"score": 0.0037834649508375544, "phrase": "external_points"}, {"score": 0.0032800186243040663, "phrase": "remaining_points"}, {"score": 0.0030017207229983385, "phrase": "furthest_point"}, {"score": 0.002843372121209168, "phrase": "concave_edges"}, {"score": 0.0027741761880779535, "phrase": "concave_vertices"}, {"score": 0.00266693888510356, "phrase": "face_refinement_procedure"}, {"score": 0.0024891269874339553, "phrase": "execution_time"}, {"score": 0.002404706573379854, "phrase": "intensive_point_redistribution"}, {"score": 0.0023231599612928144, "phrase": "cpu."}, {"score": 0.0022777800735119405, "phrase": "cpu-based_qhull_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Convex hull", " Parallel processing", " CPU processing", " CUDA programming"], "paper_abstract": "In this paper, we present a novel parallel algorithm for computing the convex hull of a set of points in 3D using the CUDA programming model. It is based on the QuickHull approach and starts by constructing an initial tetrahedron using four extreme points, discards the internal points, and distributes the external points to the four faces. It then proceeds iteratively. In each iteration, it refines the faces of the polyhedron, discards the internal points, and redistributes the remaining points for each face among its children faces. The refinement of a face is performed by selecting the furthest point from its associated points and generating three children triangles. In each iteration, concave edges are swapped, and concave vertices are removed to maintain convexity. The face refinement procedure is performed on the CPU, because it requires a very small fraction of the execution time (approximately 1%), and the intensive point redistribution is performed in parallel on the CPU. Our implementation outpaced the CPU-based Qhull implementation by 30 times for 10 million points and 40 times for 20 million points. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "CudaHull: Fast parallel 3D convex hull on the GPU", "paper_id": "WOS:000303695300008"}