{"auto_keywords": [{"score": 0.03855766670138288, "phrase": "iterative_redundancy"}, {"score": 0.006924345415312159, "phrase": "software_system"}, {"score": 0.00481495049065317, "phrase": "distributed_software_systems"}, {"score": 0.0047689174754929195, "phrase": "modern_distributed_software_systems"}, {"score": 0.004473027089024405, "phrase": "hardware_and_software_resources"}, {"score": 0.004050116768809519, "phrase": "system_reliability"}, {"score": 0.003922378980031565, "phrase": "self-adaptive_and_self-managing_reliability_facilities"}, {"score": 0.003714368305523811, "phrase": "possible_failure_conditions"}, {"score": 0.003631945391344252, "phrase": "novel_approach"}, {"score": 0.003597181536943779, "phrase": "software_system_reliability"}, {"score": 0.0035173498506324476, "phrase": "system's_deployment"}, {"score": 0.0032672702570491164, "phrase": "unlucky_parts"}, {"score": 0.0031743093007496736, "phrase": "disproportionately_many_compromised_resources"}, {"score": 0.0030642636185693054, "phrase": "priori_estimates"}, {"score": 0.0030446678645538942, "phrase": "resource_reliability"}, {"score": 0.002730023736069673, "phrase": "desired_increase"}, {"score": 0.002703869368554536, "phrase": "system's_reliability"}, {"score": 0.0026865721000905235, "phrase": "iterative_redundancy_guarantees"}, {"score": 0.0026438102161263567, "phrase": "least_resources"}, {"score": 0.002601727192945944, "phrase": "even_the_byzantine_threat_model"}, {"score": 0.0025685423439452907, "phrase": "compromised_resources"}, {"score": 0.0023857603808363527, "phrase": "optimality_properties"}, {"score": 0.002310393431454436, "phrase": "discrete_event_simulation"}, {"score": 0.00220177373403577, "phrase": "globally-distributed_planetlab_testbed_network"}, {"score": 0.0021049977753042253, "phrase": "existing_techniques"}], "paper_keywords": ["Redundancy", " reliability", " fault-tolerance", " iterative redundancy", " self-adaptation", " optimal redundancy"], "paper_abstract": "Developing modern distributed software systems is difficult in part because they have little control over the environments in which they execute. For example, hardware and software resources on which these systems rely may fail or become compromised and malicious. Redundancy can help manage such failures and compromises, but when faced with dynamic, unpredictable resources and attackers, the system reliability can still fluctuate greatly. Empowering the system with self-adaptive and self-managing reliability facilities can significantly improve the quality of the software system and reduce reliance on the developer predicting all possible failure conditions. We present iterative redundancy, a novel approach to improving software system reliability by automatically injecting redundancy into the system's deployment. Iterative redundancy self-adapts in three ways: (1) by automatically detecting when the resource reliability drops, (2) by identifying unlucky parts of the computation that happen to deploy on disproportionately many compromised resources, and (3) by not relying on a priori estimates of resource reliability. Further, iterative redundancy is theoretically optimal in its resource use: Given a set of resources, iterative redundancy guarantees to use those resources to produce the most reliable version of that software system possible; likewise, given a desired increase in the system's reliability, iterative redundancy guarantees achieving that reliability using the least resources possible. Iterative redundancy handles even the Byzantine threat model, in which compromised resources collude to attack the system. We evaluate iterative redundancy in three ways. First, we formally prove its self-adaptation, efficiency, and optimality properties. Second, we simulate it at scale using discrete event simulation. Finally, we modify the existing, open-source, volunteer-computing BOINC software system and deploy it on the globally-distributed PlanetLab testbed network to empirically evaluate that iterative redundancy is self-adaptive and more efficient than existing techniques.", "paper_title": "Self-Adapting Reliability in Distributed Software Systems", "paper_id": "WOS:000359563800003"}