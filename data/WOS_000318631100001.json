{"auto_keywords": [{"score": 0.04336705121455173, "phrase": "code_base"}, {"score": 0.042081110265507024, "phrase": "delta_modules"}, {"score": 0.04009914048870214, "phrase": "product_line_declaration"}, {"score": 0.030891471083329434, "phrase": "dynamic_reconfiguration_graph"}, {"score": 0.00481495049065317, "phrase": "dynamic_delta-oriented_software_product_lines"}, {"score": 0.004608563792163677, "phrase": "dop"}, {"score": 0.004494570360108983, "phrase": "flexible_approach"}, {"score": 0.004410938507689426, "phrase": "software_product_lines"}, {"score": 0.004274981117736524, "phrase": "dop_spls"}, {"score": 0.003916098498242888, "phrase": "object-oriented_programs"}, {"score": 0.0032246835734680377, "phrase": "implemented_product_configuration"}, {"score": 0.0031056437850836326, "phrase": "formal_foundation"}, {"score": 0.003066945490483524, "phrase": "dynamic_dop."}, {"score": 0.003028727936200845, "phrase": "dynamic_dop_spl"}, {"score": 0.0029722900280316216, "phrase": "dop_spl"}, {"score": 0.0027916287357898544, "phrase": "different_feature_configurations"}, {"score": 0.002756832447586547, "phrase": "dynamic_dop"}, {"score": 0.0023419588513908783, "phrase": "currently_running_product"}, {"score": 0.002298288831092204, "phrase": "type_system"}, {"score": 0.0022133711375320244, "phrase": "dynamic_reconfigurations"}, {"score": 0.002172093645267283, "phrase": "type_safe_products"}, {"score": 0.0021049977753042253, "phrase": "runtime_type_errors"}], "paper_keywords": ["Design", " Languages", " Theory", " Dynamic Software Product Lines", " Evolution", " Programming Languages", " Runtime Reconfiguration", " Featherweight Java", " Type Soundness"], "paper_abstract": "Delta-oriented programming (DOP) is a flexible approach for implementing software product lines (SPLs). DOP SPLs are implemented by a code base (a set of delta modules encapsulating changes to object-oriented programs) and a product line declaration (providing the connection of the delta modules with the product features). In this paper, we extend DOP by the capability to switch the implemented product configuration at runtime and present a formal foundation for dynamic DOP. A dynamic DOP SPL is a DOP SPL with a dynamic reconfiguration graph that specifies how to switch between different feature configurations. Dynamic DOP supports (unanticipated) software evolution such that at runtime, the product line declaration, the code base and the dynamic reconfiguration graph can be changed in any (unanticipated) way that preserves the currently running product. The type system of our dynamic DOP core calculus ensures that the dynamic reconfigurations lead to type safe products and do not cause runtime type errors.", "paper_title": "A Formal Foundation for Dynamic Delta-Oriented Software Product Lines", "paper_id": "WOS:000318631100001"}