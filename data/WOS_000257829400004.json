{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "component-based_distributed_applications"}, {"score": 0.004767826806287385, "phrase": "component-based_software_development"}, {"score": 0.004652016085325825, "phrase": "tightly_coupled_style"}, {"score": 0.004583878086896926, "phrase": "loosely_coupled_style"}, {"score": 0.004516733575701128, "phrase": "recent_few_years"}, {"score": 0.004450568197899267, "phrase": "paradigm_shift"}, {"score": 0.004363846362238565, "phrase": "heterogeneous_systems"}, {"score": 0.004278807087784626, "phrase": "open_networks"}, {"score": 0.0041136473765874815, "phrase": "software_development"}, {"score": 0.0040334640350288, "phrase": "management_task"}, {"score": 0.003974349782102708, "phrase": "development_task"}, {"score": 0.003896871009090446, "phrase": "future_applications"}, {"score": 0.0038397509389856625, "phrase": "dynamically_aggregated_component_services"}, {"score": 0.0036914757355166966, "phrase": "quality_of_service"}, {"score": 0.003548905904860611, "phrase": "middleware_layer"}, {"score": 0.003479692058963528, "phrase": "component_services"}, {"score": 0.0031377955308198634, "phrase": "meaningful_aggregated_entities"}, {"score": 0.00307657476125683, "phrase": "logical_compositional_needs"}, {"score": 0.002899965889623787, "phrase": "qos_requirements"}, {"score": 0.0028715299874549245, "phrase": "application_setup_time"}, {"score": 0.0028154895878702633, "phrase": "continuous_maintenance"}, {"score": 0.0027878797103973313, "phrase": "application_runtime"}, {"score": 0.00266693888510356, "phrase": "network_size"}, {"score": 0.002640781900605126, "phrase": "application's_client_population_size"}, {"score": 0.002538687900036229, "phrase": "decentralized_management_solution"}, {"score": 0.0024891269874339553, "phrase": "large_network_size"}, {"score": 0.0024405312482831646, "phrase": "resource_sharing"}, {"score": 0.002323142666222693, "phrase": "multicasting_mechanisms"}, {"score": 0.002255431275670053, "phrase": "local_adaptation_operations"}, {"score": 0.0021049977753042253, "phrase": "runtime_resource_fluctuations"}], "paper_keywords": ["algorithms", " management", " performance", " service composition", " service management", " SOA", " QoS", " multicast", " application-level routing", " overlay networks", " fault tolerance"], "paper_abstract": "Component-based software development has evolved from a tightly coupled style to a loosely coupled style in the recent few years. The paradigm shift will eventually allow heterogeneous systems to interoperate in open networks such as the Internet and will make software development more of a management task than a development task. Envisioning that future applications may comprise dynamically aggregated component services possibly distributed widely, we develop a Quality of Service (QoS)-aware service management framework in the middleware layer to make the component services infrastructure transparent to the applications. Specifically, we manage services not only as individuals, but more importantly as meaningful aggregated entities based on the logical compositional needs coming from the applications, by composing services properly according to QoS requirements at application setup time, and performing continuous maintenance at application runtime seamlessly. Our service management framework is scalable in two dimensions: network size and application's client population size. Specifically, the framework employs a decentralized management solution that scales to large network size, and explores resource sharing in one-to-many group-based applications by means of multicasting mechanisms. Moreover, it incorporates local adaptation operations and distributed failure detection, reporting, and recovery mechanisms to deal with runtime resource fluctuations and failures.", "paper_title": "QoS-aware service management for component-based distributed applications", "paper_id": "WOS:000257829400004"}