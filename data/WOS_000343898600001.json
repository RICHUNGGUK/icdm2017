{"auto_keywords": [{"score": 0.04955461236891121, "phrase": "code-smells_detection"}, {"score": 0.00481495049065317, "phrase": "cooperative_parallel_search-based_software_engineering_approach"}, {"score": 0.004457579615095599, "phrase": "distributed_optimization_problem"}, {"score": 0.004312622975366672, "phrase": "different_methods"}, {"score": 0.004149429072483132, "phrase": "optimization_process"}, {"score": 0.003778253716938922, "phrase": "parallel_evolutionary_algorithms"}, {"score": 0.0035953368057880593, "phrase": "different_adaptations"}, {"score": 0.0034975571855450343, "phrase": "solution_representations"}, {"score": 0.003440166097491567, "phrase": "change_operators"}, {"score": 0.003309877074892399, "phrase": "parallel_cooperative_manner"}, {"score": 0.0032198357970567595, "phrase": "common_goal"}, {"score": 0.0030638704739988595, "phrase": "empirical_evaluation"}, {"score": 0.002789528662623221, "phrase": "detection_techniques"}, {"score": 0.0026986685585382347, "phrase": "meta-heuristics_search"}, {"score": 0.0026543514413663893, "phrase": "statistical_analysis"}, {"score": 0.0026107601878587816, "phrase": "obtained_results"}, {"score": 0.0023507916951658455, "phrase": "art_detection"}, {"score": 0.002261666793030715, "phrase": "nine_large_open_source_systems"}, {"score": 0.0021879624017959493, "phrase": "recall_scores"}, {"score": 0.0021049977753042253, "phrase": "eight_different_types"}], "paper_keywords": ["Search-based software engineering", " code-smells", " software quality", " distributed evolutionary algorithms"], "paper_abstract": "We propose in this paper to consider code-smells detection as a distributed optimization problem. The idea is that different methods are combined in parallel during the optimization process to find a consensus regarding the detection of code-smells. To this end, we used Parallel Evolutionary algorithms (P-EA) where many evolutionary algorithms with different adaptations (fitness functions, solution representations, and change operators) are executed, in a parallel cooperative manner, to solve a common goal which is the detection of code-smells. An empirical evaluation to compare the implementation of our cooperative P-EA approach with random search, two single population-based approaches and two code-smells detection techniques that are not based on meta-heuristics search. The statistical analysis of the obtained results provides evidence to support the claim that cooperative P-EA is more efficient and effective than state of the art detection approaches based on a benchmark of nine large open source systems where more than 85 percent of precision and recall scores are obtained on a variety of eight different types of code-smells.", "paper_title": "A Cooperative Parallel Search-Based Software Engineering Approach for Code-Smells Detection", "paper_id": "WOS:000343898600001"}