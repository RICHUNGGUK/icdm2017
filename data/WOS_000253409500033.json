{"auto_keywords": [{"score": 0.04969466339476691, "phrase": "packet_processing_applications"}, {"score": 0.010612387000973441, "phrase": "software_cache_performance"}, {"score": 0.0047379542803396915, "phrase": "network_processors"}, {"score": 0.004550783060775205, "phrase": "networking_equipment"}, {"score": 0.004370973501074594, "phrase": "software_cache"}, {"score": 0.004283739213556286, "phrase": "hardware_cache"}, {"score": 0.00421520166010848, "phrase": "chip_area"}, {"score": 0.004016072233242585, "phrase": "full_responsibility"}, {"score": 0.00398380712846857, "phrase": "software_cache_management"}, {"score": 0.003734810936407523, "phrase": "effective_use"}, {"score": 0.003675023529026644, "phrase": "long_memory_access_latency"}, {"score": 0.003616189733352126, "phrase": "critical_limiting_factor"}, {"score": 0.003587125711973247, "phrase": "overall_applications"}, {"score": 0.003515479934694842, "phrase": "hardware_multi-threading"}, {"score": 0.003487222504700868, "phrase": "wide-word_accesses"}, {"score": 0.003459191419478298, "phrase": "packet_access_combination"}, {"score": 0.003040050100579337, "phrase": "intraprocedural_optimizations"}, {"score": 0.0029434299787644445, "phrase": "binary_codes"}, {"score": 0.002861402531078998, "phrase": "lower_performance"}, {"score": 0.0028042108531816943, "phrase": "hand-tuned_assembly_programming"}, {"score": 0.002597088221737922, "phrase": "global_adaptive_localization"}, {"score": 0.0024247382451294255, "phrase": "cpba"}, {"score": 0.002385872451981323, "phrase": "localization_instructions"}, {"score": 0.0023100026069269456, "phrase": "gal"}, {"score": 0.002282166507956957, "phrase": "redundant_localization_instructions"}, {"score": 0.002263799931018574, "phrase": "interprocedural_analysis"}, {"score": 0.002182958452794581, "phrase": "representative_applications"}, {"score": 0.002165388556451298, "phrase": "experiment_results"}, {"score": 0.0021049977753042253, "phrase": "average_speedup"}], "paper_keywords": ["algorithms", " performance", " optimization", " local memory", " network processor"], "paper_abstract": "Network processors (NPs) are widely used in many types of networking equipment due to their high performance and flexibility. For most NPs, software cache is used instead of hardware cache due to the chip area, cost and power constraints. Therefore, programmers should take full responsibility for software cache management which is neither intuitive nor easy to most of them. Actually, without an effective use of it, long memory access latency will be a critical limiting factor to overall applications. Prior researches like hardware multi-threading, wide-word accesses and packet access combination for caching have already been applied to help programmers to overcome this bottleneck. However, most of them do not make enough use of the characteristics of packet processing applications and often perform intraprocedural optimizations only. As a result, the binary codes generated by those techniques often get lower performance than that comes from hand-tuned assembly programming for some applications. In this paper, we propose an algorithm including two techniques - Critical Path Based Analysis (CPBA) and Global Adaptive Localization (GAL), to optimize the software cache performance of packet processing applications. Packet processing applications usually have several hot paths and CPBA tries to insert localization instructions according to their execution frequencies. For further optimizations, GAL eliminates some redundant localization instructions by interprocedural analysis and optimizations. Our algorithm is applied on some representative applications. Experiment results show that it leads to an average speedup by a factor of 1.974.", "paper_title": "Optimizing software cache performance of packet processing applications", "paper_id": "WOS:000253409500033"}