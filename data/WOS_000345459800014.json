{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "meta-granular_aggregation"}, {"score": 0.004783105609960904, "phrase": "analytic_database_queries"}, {"score": 0.004688823162073856, "phrase": "decision_support_systems"}, {"score": 0.004358676214574977, "phrase": "partial_results"}, {"score": 0.004258563634666145, "phrase": "derived_objects"}, {"score": 0.004216362268148017, "phrase": "database_schema"}, {"score": 0.0041469500929423595, "phrase": "software_development"}, {"score": 0.003906357144047631, "phrase": "partial_aggregations"}, {"score": 0.0038676325043529524, "phrase": "additional_tables"}, {"score": 0.0035712919163869176, "phrase": "natural_partial_order"}, {"score": 0.003524150055503105, "phrase": "optimisation_process"}, {"score": 0.003341703245432554, "phrase": "stored_metagranules"}, {"score": 0.0032110737733503807, "phrase": "novel_query"}, {"score": 0.0031581587465429593, "phrase": "analytic_queries"}, {"score": 0.003004572722189157, "phrase": "concept_implementation"}, {"score": 0.00293547027122617, "phrase": "extensive_experimental_evaluation"}, {"score": 0.0027649684074145028, "phrase": "database_workload"}, {"score": 0.0026834578825190407, "phrase": "optimal_set"}, {"score": 0.002535975801308951, "phrase": "significant_overhead"}, {"score": 0.002461199256106623, "phrase": "cost_model"}, {"score": 0.0023336530061840244, "phrase": "complete_search"}, {"score": 0.0021980296285911915, "phrase": "identified_optimal_sets"}, {"score": 0.002183454435945014, "phrase": "database_instances"}, {"score": 0.0021049977753042253, "phrase": "aggregated_rows"}], "paper_keywords": [""], "paper_abstract": "Analytic database queries are exceptionally time consuming. Decision support systems employ various execution techniques in order to accelerate such queries and reduce their resource consumption. Probably the most important of them consists in materialization of partial results. However, any introduction of derived objects into the database schema increases the cost of software development, since programmers must take care of their usage and synchronization. In this article we consider using partial aggregations materialized in additional tables. The idea is based on the concept of metagranules that represent the information on grouping and used aggregations. Metagranules have a natural partial order that guides the optimisation process. We present solutions to two problems. Firstly, we assume that a set of stored metagranules is given and we optimize a query. We present a novel query rewriting method to make analytic queries use the information stored in metagranules. We also describe our proof-of-concept implementation of this method and perform an extensive experimental evaluation using databases of the size up to 0.5 TiB and 6 billions rows. Secondly, we assume that a database workload is given and we want to select the optimal set of metagranules to materialize. Although each metagranule accelerates some queries, it also imposes a significant overhead on updates. Therefore, we propose a cost model that includes both benefits for queries and penalties for updates. We experiment with the complete search in the space of sets of metagranules to find the optimum. Finally, we empirically verify identified optimal sets against database instances up to 0.5 TiB with billions of rows and hundreds millions of aggregated rows.", "paper_title": "Query Rewriting Based on Meta-Granular Aggregation", "paper_id": "WOS:000345459800014"}