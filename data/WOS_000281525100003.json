{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lightweight_transactional_memory"}, {"score": 0.004754447398742591, "phrase": "nocs_based_architectures"}, {"score": 0.0045581828632009795, "phrase": "hardware_transactional_memory"}, {"score": 0.004444317282171449, "phrase": "attractive_design_concept"}, {"score": 0.004388450908826472, "phrase": "parallel_programming"}, {"score": 0.004278807087784626, "phrase": "correct_synchronization"}, {"score": 0.004189523950071494, "phrase": "underlying_hardware_memory_system"}, {"score": 0.0040334640350288, "phrase": "hardware_transactional_memory_systems"}, {"score": 0.0038343546245999285, "phrase": "write-back_cache_coherence_protocol"}, {"score": 0.0037701851296383405, "phrase": "existing_htm_system"}, {"score": 0.0036914757355166966, "phrase": "write-through_coherence_protocol"}, {"score": 0.0035389348527719404, "phrase": "original_transactional_memory_system"}, {"score": 0.003479692058963528, "phrase": "write-through_invalidate_directory"}, {"score": 0.0030017207229983385, "phrase": "cycle-accurate_level"}, {"score": 0.002853396755102163, "phrase": "on-chip_communication"}, {"score": 0.0026895647154863405, "phrase": "embedded_domain"}, {"score": 0.002633355582628613, "phrase": "execution_performances"}, {"score": 0.002600194073758015, "phrase": "htm_systems"}, {"score": 0.0024405312482831646, "phrase": "coherence_protocol"}, {"score": 0.0023794391656001466, "phrase": "execution_times"}, {"score": 0.002233301265743633, "phrase": "overall_slightly_better_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Transactional Memory", " Hardware", " Network-on-Chip", " Coherence protocol", " Performance", " Cycle-accurate simulation", " Write-through vs. write-back"], "paper_abstract": "Hardware Transactional Memory (HTM) is an attractive design concept which simplifies parallel programming by shifting the problem of correct synchronization between threads to the underlying hardware memory system. There has recently been much work dealing with Hardware Transactional Memory systems, but to the best of our knowledge, all assume a write-back cache coherence protocol. As no existing HTM system is based on a write-through coherence protocol, we propose the design and implementation of an original Transactional Memory system based on a Write-Through Invalidate directory based cache coherence protocol, and we perform the comparison of this system with a more common write-back MESI (Modified Exclusive Shared Invalid) based HIM system. The comparison is done on an architecture with two possible memory repartitions, either centralized or distributed, at the cycle-accurate level. Additionally, our work takes into account the difficulties related to on-chip communication using network like interconnects, in order to be able to target the embedded domain. We compare the execution performances of both HTM systems on two micro-kernels and on a subset of the SPLASH-2 benchmarks. Results show that the coherence protocol has an impact on the execution times, but that no solution outperforms the other. However, the write-back has overall slightly better results, especially when the memory is not distributed. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Lightweight Transactional Memory systems for NoCs based architectures: Design, implementation and comparison of two policies", "paper_id": "WOS:000281525100003"}