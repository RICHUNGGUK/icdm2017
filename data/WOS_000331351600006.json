{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "invertible_bloom_lookup_tables"}, {"score": 0.04624748036146562, "phrase": "traditional_bloom_filters"}, {"score": 0.0033898953358387075, "phrase": "lookup_operation"}, {"score": 0.0029737652463012318, "phrase": "storage_requirement"}, {"score": 0.0028693932802982417, "phrase": "search_time"}, {"score": 0.0024431289979171505, "phrase": "iblt."}, {"score": 0.002371424085814217, "phrase": "modified_search_procedure"}, {"score": 0.0023018188296933923, "phrase": "standard_iblt_search_procedure"}, {"score": 0.002181626277903721, "phrase": "average_search_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Algorithms", " Bloom filters", " Hash", " Data structures"], "paper_abstract": "Invertible Bloom Lookup Tables (IBLTs) have been recently introduced as an extension of traditional Bloom filters. IBLTs store key-value pairs. Unlike traditional Bloom filters, IBLTs support both a lookup operation (given a key, return a value) and an operation that lists out all the key-value pairs stored. One issue with IBLTs is that there is a probability that a lookup operation will return \"not found\" for a key. In this paper, a technique to reduce this probability without affecting the storage requirement and only moderately increasing the search time is presented and evaluated. The results show that it can significantly reduce the probability of not returning a value that is actually stored in the IBLT. The overhead of the modified search procedure, compared to the standard IBLT search procedure, is small and has little impact on the average search time. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Improving the performance of Invertible Bloom Lookup Tables", "paper_id": "WOS:000331351600006"}