{"auto_keywords": [{"score": 0.04609968630540795, "phrase": "code_coverage"}, {"score": 0.03686325203206044, "phrase": "state_coverage"}, {"score": 0.009929506835261753, "phrase": "faulty_program"}, {"score": 0.008590025353116277, "phrase": "suspicious_statement"}, {"score": 0.00481495049065317, "phrase": "statistically_suspicious_program_states"}, {"score": 0.004721162131188487, "phrase": "fault_localization_techniques"}, {"score": 0.004228577663320847, "phrase": "suspicious_statements"}, {"score": 0.003527998934981411, "phrase": "novel_technique"}, {"score": 0.00314708280192844, "phrase": "branching_statement"}, {"score": 0.0030374213037172803, "phrase": "test_suite"}, {"score": 0.0027741761880779535, "phrase": "failed_cases"}, {"score": 0.0027307746993761035, "phrase": "passed_cases"}, {"score": 0.0026252106881752067, "phrase": "debugging_tool"}, {"score": 0.0025841336988141235, "phrase": "commonly-used_benchmark"}], "paper_keywords": ["automated debugging", " fault localization", " state coverage", " algorithms", " measurement", " reliability", " verification"], "paper_abstract": "A number of fault localization techniques have been developed to reduce the time in manually debugging a faulty program. The technique of code coverage [8] has been recognized by its effectiveness in identifying suspicious statements that may contain the fault. However, a programmer still needs to manually examine each variable referenced in a suspicious statement and such a process can become extremely time-consuming if this suspicious statement is part of a loop. In this paper, we propose a novel technique called state coverage to significantly reduce the time in examining variables. We first insert a set of checkpoints to record the state of each variable referenced in a branching statement. We next execute the faulty program by a test suite consisting of both passed and failed cases. A state is statistically considered to be more suspicious if it appears more in failed cases and less in passed cases. We implemented both code coverage and state coverage in a debugging tool and used a commonly-used benchmark consisting of 58 faulty programs to evaluate their performance. For 34% of these programs, their faults are within 20 statement steps of the most suspicious statement identified by code coverage. By adding state coverage and breaking at the most suspicious state, we increase this ratio to 64%, an 88% performance improvement. Finally, we also explain a few cases in which both state coverage and code coverage cannot perform well.", "paper_title": "Automated fault localization with statistically suspicious program states", "paper_id": "WOS:000253409500003"}