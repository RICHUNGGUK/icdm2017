{"auto_keywords": [{"score": 0.04111569241612981, "phrase": "proposed_algorithm"}, {"score": 0.015488924391631716, "phrase": "lower_bound_tree"}, {"score": 0.013456338253940055, "phrase": "lower_bound"}, {"score": 0.011950528497845838, "phrase": "query_point"}, {"score": 0.009669487991940158, "phrase": "nearest_neighbor"}, {"score": 0.00481495049065317, "phrase": "nearest_neighbor_search"}, {"score": 0.004586531354697466, "phrase": "fast_and_versatile_algorithm"}, {"score": 0.004451360793577698, "phrase": "nearest_neighbor_searches"}, {"score": 0.004418192459607072, "phrase": "efficiency_improvement"}, {"score": 0.004023775199194536, "phrase": "global_minimum_distance"}, {"score": 0.003964007795174772, "phrase": "preprocessing_stage"}, {"score": 0.003543059748318891, "phrase": "sample_point"}, {"score": 0.0034514309280805106, "phrase": "internal_node"}, {"score": 0.003324614337607016, "phrase": "lower_bounds"}, {"score": 0.0032629585038738856, "phrase": "winner-update_search_strategy"}, {"score": 0.0031312981393997355, "phrase": "data_transformation"}, {"score": 0.0030275252142439213, "phrase": "query_points"}, {"score": 0.0028301536956600137, "phrase": "k-nearest_neighbors"}, {"score": 0.0027466028572379455, "phrase": "nearest_neighbors"}, {"score": 0.0027159094186967247, "phrase": "specified_distance_threshold"}, {"score": 0.002548331088496964, "phrase": "minimum_distance"}, {"score": 0.002427177130359851, "phrase": "substantial_computation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["nearest neighbor search", " lower bound tree"], "paper_abstract": "In this paper, we present a fast and versatile algorithm which can rapidly perform a variety of nearest neighbor searches. Efficiency improvement is achieved by utilizing the distance lower bound to avoid the calculation of the distance itself if the lower bound is already larger than the global minimum distance. At the preprocessing stage, the proposed algorithm constructs a lower bound tree (LB-tree) by agglorneratively clustering all the sample points to be searched. Given a query point, the lower bound of its distance to each sample point can be calculated by using the internal node of the LB-tree. To reduce the amount of lower bounds actually calculated, the winner-update search strategy is used for traversing the tree. For further efficiency improvement, data transformation can be applied to the sample and the query points. In addition to finding the nearest neighbor, the proposed algorithm can also (i) provide the k-nearest neighbors progressively; (ii) find the nearest neighbors within a specified distance threshold; and (iii) identify neighbors whose distances to the query are sufficiently close to the minimum distance of the nearest neighbor. Our experiments have shown that the proposed algorithm can save substantial computation, particularly when the distance of the query point to its nearest neighbor is relatively small compared with its distance to most other samples (which is the case for many object recognition problems). (c) 2005 Pattern Recognition Society. Published by Elsevier Ltd. All rights reserved.", "paper_title": "Fast and versatile algorithm for nearest neighbor search based on a lower bound tree", "paper_id": "WOS:000242305700002"}