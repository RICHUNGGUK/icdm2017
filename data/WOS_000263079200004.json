{"auto_keywords": [{"score": 0.050078295336668535, "phrase": "user_constraints"}, {"score": 0.038438565521983284, "phrase": "ucl"}, {"score": 0.004745665541429529, "phrase": "tight_estimation"}, {"score": 0.004677372885331908, "phrase": "worst-case_execution_time"}, {"score": 0.004610058444728656, "phrase": "automated_static_timing_analysis_methods"}, {"score": 0.0045108906244892165, "phrase": "safe_but_usually_overestimated_worst-case_execution_time"}, {"score": 0.003987755561492638, "phrase": "visual_language"}, {"score": 0.00393032656248792, "phrase": "user_constraint_language"}, {"score": 0.0037087324991876727, "phrase": "tight_wcet_estimation"}, {"score": 0.0036026484429137998, "phrase": "intuitive_visual_notations"}, {"score": 0.0033748847621075536, "phrase": "flow_information"}, {"score": 0.0033021988455635403, "phrase": "valid_execution_paths"}, {"score": 0.0030048355421601705, "phrase": "finite_automata"}, {"score": 0.002598652897946253, "phrase": "static_structure"}, {"score": 0.0025611773887867255, "phrase": "possible_dynamic_behavior"}, {"score": 0.0023303871145705954, "phrase": "case_study"}, {"score": 0.0022472527731744974, "phrase": "software_program"}, {"score": 0.0022148335975074904, "phrase": "satellite_flight"}], "paper_keywords": ["worst-case execution time", " user constraint", " control flow graph", " finite automata"], "paper_abstract": "Automated static timing analysis methods provide a safe but usually overestimated worst-case execution time (WCET) due to infeasible execution paths. In this paper, we propose a visual language, User Constraint Language (UCL), to obtain a tight WCET estimation. UCL provides intuitive visual notations with which users can easily specify various levels of flow information to characterize valid execution paths of a program. The user constraints specified in UCL are translated into finite automata. The combined automaton, constructed by a cross-production of the automata for program and user constraints. reflects the static structure and possible dynamic behavior of the program. It contains only the execution paths satisfying user constraints. A case study using part of a software program for satellite flight demonstrates the effectiveness of UCL and our approach.", "paper_title": "Visualization and Formalization of User Constraints for Tight Estimation of Worst-Case Execution Time", "paper_id": "WOS:000263079200004"}