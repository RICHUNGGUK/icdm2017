{"auto_keywords": [{"score": 0.043628703965110455, "phrase": "component_properties"}, {"score": 0.015719716506582538, "phrase": "component-based_software_application_families"}, {"score": 0.012891156784524066, "phrase": "top-down_system_verification"}, {"score": 0.012266410236380771, "phrase": "afa"}, {"score": 0.011455912535719289, "phrase": "reusable_components"}, {"score": 0.004666598697538815, "phrase": "novel_approach"}, {"score": 0.004579780586951551, "phrase": "formal_verification"}, {"score": 0.004301834610818624, "phrase": "effective_compositional_reasoning"}, {"score": 0.003990385737207714, "phrase": "bottom-up_component_verification"}, {"score": 0.003795335309109018, "phrase": "application_family_architectures"}, {"score": 0.0036553070575015344, "phrase": "core_elements"}, {"score": 0.003542557455905503, "phrase": "architectural_styles"}, {"score": 0.003125175084962886, "phrase": "bottom-up_component_compositions"}, {"score": 0.002371531125700046, "phrase": "architectural_style"}, {"score": 0.0023566987138026285, "phrase": "guided_property_decomposition"}, {"score": 0.002298288831092204, "phrase": "verified_component_properties"}, {"score": 0.0022696277881969896, "phrase": "preliminary_case_studies"}, {"score": 0.0021857667493036786, "phrase": "order-of-magnitude_reduction"}, {"score": 0.0021049977753042253, "phrase": "major_verification_reuse"}], "paper_keywords": [""], "paper_abstract": "We present a novel approach which facilitates formal verification of component-based software application families using model checking. This approach enables effective compositional reasoning by facilitating formulation of component properties and their environment assumptions. This approach integrates bottom-up component verification and top-down system verification based on the concept of application family architectures (AFA). The core elements of an AFA are architectural styles and reusable components. Reusable components of a family are defined in the context of its architectural styles and their correctness properties are verified in bottom-up component compositions. Top-down system verification utilizes architectural styles to guide decomposition of properties of a system into properties of its components and formulation of assumptions for the component properties. The component properties are reused if already verified; otherwise, they are verified top-down recursively. Architectural style guided property decomposition facilitates reuse of verified component properties. Preliminary case studies have shown that our approach achieves order-of-magnitude reduction on verification complexities and realizes major verification reuse.", "paper_title": "Verification of component-based software application families", "paper_id": "WOS:000239520500004"}