{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "efficient_locality_aware_parallel_data_stream_processing"}, {"score": 0.00465944657565638, "phrase": "parallel_streaming_systems"}, {"score": 0.004363277689798392, "phrase": "real-time_signal_processing"}, {"score": 0.004199247711875386, "phrase": "high_performance_data"}, {"score": 0.004063547375196532, "phrase": "key_components"}, {"score": 0.0039322149318145845, "phrase": "task_scheduler"}, {"score": 0.003702323283528696, "phrase": "available_cpu_cores"}, {"score": 0.0036419834462626125, "phrase": "multiprocessor_systems"}, {"score": 0.003602302241898501, "phrase": "cpu_architecture"}, {"score": 0.0033363396054797044, "phrase": "challenging_problem"}, {"score": 0.003175792987190496, "phrase": "novel_task_scheduling_strategy"}, {"score": 0.0031411751440831165, "phrase": "parallel_data_stream_systems"}, {"score": 0.0030229485340586473, "phrase": "current_hardware"}, {"score": 0.002877438939246423, "phrase": "numa_aware_memory_allocator"}, {"score": 0.0028305047329728254, "phrase": "data_locality"}, {"score": 0.0027996401456881806, "phrase": "numa_systems"}, {"score": 0.0027539714188091866, "phrase": "proposed_task_scheduler"}, {"score": 0.0026942333853202556, "phrase": "new_memory_allocator"}, {"score": 0.002592784882557155, "phrase": "numa_system"}, {"score": 0.002508867228980776, "phrase": "older_smp_system"}, {"score": 0.0024410093024417527, "phrase": "unoptimized_versions"}, {"score": 0.00221153232497724, "phrase": "task_scheduling"}, {"score": 0.0021399277552314067, "phrase": "different_priorities"}, {"score": 0.0021049977753042253, "phrase": "additional_constraints"}], "paper_keywords": ["Parallel", " multicore CPU", " NUMA", " cache aware", " task scheduling", " memory allocator"], "paper_abstract": "Parallel data processing and parallel streaming systems become quite popular. They are employed in various domains such as real-time signal processing, OLAP database systems, or high performance data extraction. One of the key components of these systems is the task scheduler which plans and executes tasks spawned by the application on available CPU cores. The multiprocessor systems and CPU architecture of the day become quite complex, which makes the task scheduling a challenging problem. In this paper, we propose a novel task scheduling strategy for parallel data stream systems, that reflects many technical issues of the current hardware. In addition, we have implemented a NUMA aware memory allocator that improves data locality in NUMA systems. The proposed task scheduler combined with the new memory allocator achieve up to 3x speed up on a NUMA system and up to 10% speed up on an older SMP system with respect to the unoptimized versions of the scheduler and allocator. Many of the ideas implemented in our parallel framework may be adopted for task scheduling in other domains that focus on different priorities or employ additional constraints.", "paper_title": "Towards Efficient Locality Aware Parallel Data Stream Processing", "paper_id": "WOS:000358988900005"}