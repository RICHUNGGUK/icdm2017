{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "flexible_server"}, {"score": 0.0047409388179452255, "phrase": "assembly-type_queue"}, {"score": 0.004549063619065006, "phrase": "queueing_system"}, {"score": 0.00450231514359539, "phrase": "multiple_stations"}, {"score": 0.004410248125081398, "phrase": "single_flexible_server"}, {"score": 0.0039772848945723435, "phrase": "particular_precedence_relationship"}, {"score": 0.0036996627006622975, "phrase": "assembly_system"}, {"score": 0.0035866734383189396, "phrase": "different_component"}, {"score": 0.0032510690712452147, "phrase": "holding_cost"}, {"score": 0.0027837615811247963, "phrase": "long-run_average_costs"}, {"score": 0.0026297428083782875, "phrase": "system_state"}, {"score": 0.0025892330566358503, "phrase": "sample-path_arguments"}, {"score": 0.0025361866386341796, "phrase": "partial_characterizations"}, {"score": 0.0024971144603069006, "phrase": "optimal_policy"}, {"score": 0.0024586427394152196, "phrase": "sufficient_conditions"}, {"score": 0.002408265305704217, "phrase": "simple_state-independent_policy"}, {"score": 0.002194011800331242, "phrase": "numerical_study"}, {"score": 0.0021601997088758957, "phrase": "supporting_evidence"}, {"score": 0.002126907587540404, "phrase": "superior_performance"}], "paper_keywords": ["Flexible server", " Assembly-like queues", " Fork/join systems", " Setups"], "paper_abstract": "We consider a queueing system with multiple stations attended by a single flexible server. An order arriving at this system needs to go through each station only once but there is no particular precedence relationship among these stations. One can also think of this system as an assembly system where each station processes a different component of an order and once all the components associated with an order are processed they are assembled instantaneously. A holding cost is charged for keeping the orders in the system and there is a penalty associated with the switches of the server between stations. Our objective is to minimize the long-run average costs by dynamically assigning the server to stations based on the system state. Using sample-path arguments, we provide partial characterizations of the optimal policy and provide sufficient conditions under which a simple state-independent policy that works on one order at a time is optimal. We also propose three simple threshold policies and present a numerical study that provides supporting evidence for the superior performance of our double-threshold heuristic.", "paper_title": "Dynamic control of a flexible server in an assembly-type queue with setup costs", "paper_id": "WOS:000301604100002"}