{"auto_keywords": [{"score": 0.04360247103779728, "phrase": "function_symbols"}, {"score": 0.02246846748295755, "phrase": "turing_machines"}, {"score": 0.004814957642010742, "phrase": "chr."}, {"score": 0.00447915782405322, "phrase": "datalog"}, {"score": 0.0035681790580031998, "phrase": "host_language"}, {"score": 0.003370907075333389, "phrase": "first_chr_dialect"}, {"score": 0.002726740692380339, "phrase": "infinite_computation"}, {"score": 0.0026161698049580804, "phrase": "second_dialect"}, {"score": 0.002286781334850213, "phrase": "terminating_computation"}], "paper_keywords": ["constraint programming", " expressivity", " well-structured transition systems"], "paper_abstract": "We study the decidability of termination for two CH R dialects which, similarly to the Datalog like languages, are defined by using a signature which does not allow function symbols (of arity > 0). Both languages allow the use of the = built-in in the body of rules, thus are built on a host language that supports unification. However each imposes one further restriction. The first CHR dialect allows only range-restricted rules, that is, it does not allow the use of variables in the body or in the guard of a rule if they do not appear in the head. We show that the existence of an infinite computation is decidable for this dialect. The second dialect instead limits the number of atoms in the head of rules to one. We prove that in this case, the existence of a terminating computation is decidable. These results show that both dialects are strictly less expressive(1) than Turing Machines. It is worth noting that the language (without function symbols) without these restrictions is as expressive as Turing Machines.", "paper_title": "Decidability properties for fragments of CHR", "paper_id": "WOS:000280508200017"}