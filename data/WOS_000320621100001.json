{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cpm"}, {"score": 0.008621948655168849, "phrase": "code_pointers"}, {"score": 0.004731928080086235, "phrase": "masking_code_pointers"}, {"score": 0.004650330504968421, "phrase": "prevent_code_injection"}, {"score": 0.004530552828603269, "phrase": "code_pointer_masking"}, {"score": 0.004300133642951283, "phrase": "novel_countermeasure"}, {"score": 0.004225950334493496, "phrase": "code_injection_attacks"}, {"score": 0.004153041453795458, "phrase": "native_code"}, {"score": 0.003976203286249396, "phrase": "correct_semantics"}, {"score": 0.0035507457285983268, "phrase": "application's_control_flow"}, {"score": 0.003340768341189764, "phrase": "secret_values"}, {"score": 0.0032546105164772995, "phrase": "stack_canaries"}, {"score": 0.002831158147480665, "phrase": "similar_performance"}, {"score": 0.0021049977753042253, "phrase": "security_benefits"}], "paper_keywords": ["Security", " Algorithms", " Code injection", " code pointer", " countermeasure", " masking"], "paper_abstract": "Code Pointer Masking (CPM) is a novel countermeasure against code injection attacks on native code. By enforcing the correct semantics of code pointers, CPM thwarts attacks that modify code pointers to divert the application's control flow. It does not rely on secret values such as stack canaries and protects against attacks that are not addressed by state-of-the-art countermeasures of similar performance. This article reports on two prototype implementations on very distinct processor architectures, showing that the idea behind CPM is portable. The evaluation also shows that the overhead of using our countermeasure is very small and the security benefits are substantial.", "paper_title": "CPM: Masking Code Pointers to Prevent Code Injection Attacks", "paper_id": "WOS:000320621100001"}