{"auto_keywords": [{"score": 0.04161068393029445, "phrase": "nsac"}, {"score": 0.028198374574417394, "phrase": "sac"}, {"score": 0.0051969160177397925, "phrase": "full_sac_algorithm"}, {"score": 0.004659192888931046, "phrase": "new_kind"}, {"score": 0.004621043537046209, "phrase": "local_consistency"}, {"score": 0.004545675105321216, "phrase": "general_idea"}, {"score": 0.0045084510240032535, "phrase": "singleton_arc_consistency"}, {"score": 0.004362564831572539, "phrase": "reduced_form"}, {"score": 0.004152502093643003, "phrase": "singleton_domain"}, {"score": 0.003904109420378585, "phrase": "ac"}, {"score": 0.003793206550770237, "phrase": "unique_fixpoint"}, {"score": 0.0037312893857519803, "phrase": "nsac_algorithms"}, {"score": 0.0034935290662899488, "phrase": "problem_elements"}, {"score": 0.0033115124244647736, "phrase": "full_sac"}, {"score": 0.0032174507570710835, "phrase": "almost_as_much_filtering"}, {"score": 0.0031910685060552485, "phrase": "significantly_less_cost"}, {"score": 0.0030876784650745973, "phrase": "full_search"}, {"score": 0.0030372426452745073, "phrase": "maintained_neighbourhood_sac_algorithm"}, {"score": 0.002640393540318003, "phrase": "sac."}, {"score": 0.0025865679621853667, "phrase": "partial_sac_procedure"}, {"score": 0.0025547994452342266, "phrase": "almost_as_much_domain_reduction"}, {"score": 0.0023527296826339225, "phrase": "possible_alternative"}, {"score": 0.002304754792740636, "phrase": "new_algorithms"}, {"score": 0.0022670785913397637, "phrase": "experimental_tests"}, {"score": 0.0021049977753042253, "phrase": "problem_classes"}], "paper_keywords": ["Constraint satisfaction", " arc consistency", " singleton arc consistency"], "paper_abstract": "This paper introduces a new kind of local consistency based on the general idea of singleton arc consistency (SAC). This is a reduced form of SAC that only considers neighbourhoods of a variable with a singleton domain; hence, the name \"neighbourhood SAC\" (NSAC). Like AC and SAC, NSAC has a unique fixpoint, so that NSAC algorithms will produce the same result when applied to a problem regardless of the order in which problem elements are processed. Although NSAC is, of course, dominated by full SAC, on many problems these algorithms produce almost as much filtering with significantly less cost. NSAC can also be incorporated into full search, as a maintained neighbourhood SAC algorithm. The implementation of NSAC has also inspired two new SAC algorithms. One is a full SAC algorithm that is somewhat more efficient than the classical SAC-1 algorithm on many problems and is much easier to code than more advanced versions of SAC. The other is a partial SAC procedure that performs almost as much domain reduction as full SAC, while requiring much less time than full SAC algorithm on some problems. It is, therefore, a possible alternative to restricted SAC-1. These new algorithms are evaluated in experimental tests, together with SAC-1 and three well-known advanced SAC procedures, on a variety of problem classes.", "paper_title": "SAC and neighbourhood SAC", "paper_id": "WOS:000349156700011"}