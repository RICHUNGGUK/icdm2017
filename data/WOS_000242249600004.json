{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "adaptive_systems"}, {"score": 0.00471003041684707, "phrase": "synchronized_architectures"}, {"score": 0.004126623209579942, "phrase": "self-adapting_systems"}, {"score": 0.0039053194919285725, "phrase": "state-based_formalism"}, {"score": 0.003615217162972726, "phrase": "fixed_set"}, {"score": 0.003536346954940084, "phrase": "possible_configurations"}, {"score": 0.0033465923623290034, "phrase": "recently-introduced_synchronization_operator"}, {"score": 0.003097865379563127, "phrase": "adaptation_policy"}, {"score": 0.002931569771634119, "phrase": "steady-state_system_execution"}, {"score": 0.0026543514413663893, "phrase": "standard_refinement_techniques"}, {"score": 0.002539689093411356, "phrase": "correct_implementations"}, {"score": 0.0024842242921857705, "phrase": "higher-level_models"}, {"score": 0.0021049977753042253, "phrase": "dynamically-varying_user_requirements"}], "paper_keywords": ["synchronized communication", " adaptive systems", " formal methods", " refinement"], "paper_abstract": "In this paper we show how to specify and refine self-adapting systems, by employing the state-based formalism called action systems. Assuming a fixed set of possible configurations, we use a recently-introduced synchronization operator to achieve separation of concerns between adaptation policy, fault tolerance and steady-state system execution. Using action systems allows us to apply standard refinement techniques, aimed for correct implementations of higher-level models. We illustrate this idea by applying it to the problem of coping with dynamically-varying user requirements and possible fault situations. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Developing adaptive systems with synchronized architectures", "paper_id": "WOS:000242249600004"}