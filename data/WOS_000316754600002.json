{"auto_keywords": [{"score": 0.040301904488830594, "phrase": "pro-mlcs"}, {"score": 0.007947357269670564, "phrase": "better_solutions"}, {"score": 0.00481495049065317, "phrase": "multiple_longest_common_subsequences_problem"}, {"score": 0.004601828963655049, "phrase": "mlcs"}, {"score": 0.004414723336530117, "phrase": "sequence_similarity"}, {"score": 0.004315879542755464, "phrase": "fundamental_problems"}, {"score": 0.00421923944095905, "phrase": "np-hard_problem"}, {"score": 0.004156012879026324, "phrase": "good_approximate_solution"}, {"score": 0.004109212945115815, "phrase": "reasonable_time"}, {"score": 0.0040323765107766335, "phrase": "large-size_problems"}, {"score": 0.0038683363637006902, "phrase": "new_progressive_algorithm"}, {"score": 0.0037674258625824113, "phrase": "dominant_point_approach"}, {"score": 0.0036830211726031946, "phrase": "approximate_solution"}, {"score": 0.0033511469200347907, "phrase": "candidate_points"}, {"score": 0.0031784960695034645, "phrase": "efficient_computation"}, {"score": 0.003154566400499823, "phrase": "dominant_points"}, {"score": 0.00302612773666719, "phrase": "upper_bound_function"}, {"score": 0.0030033417337933625, "phrase": "approximate_solutions"}, {"score": 0.0029807267909921628, "phrase": "experimental_results"}, {"score": 0.002902903244616154, "phrase": "first_approximate_solution"}, {"score": 0.0027532820796396713, "phrase": "entire_running_time"}, {"score": 0.0027119634978446895, "phrase": "optimal_solution"}, {"score": 0.0023848164282879885, "phrase": "dpro-mlcs"}, {"score": 0.002366847878952636, "phrase": "distributed_memory_architecture"}, {"score": 0.0022876463319883634, "phrase": "memory_architecture"}, {"score": 0.0022618378709785172, "phrase": "parallel_algorithms"}, {"score": 0.0022278779300543548, "phrase": "parallel_computing_resources"}, {"score": 0.002202742267484358, "phrase": "nearly_linear_speedups"}, {"score": 0.002153316680437517, "phrase": "desirable_progressiveness_property-finding_better_solutions"}], "paper_keywords": ["Multiple longest common subsequence problem (MLCS)", " skyline problem", " branch-and-bound search", " progressive algorithm", " distributed memory architecture", " SMP cluster"], "paper_abstract": "The multiple longest common subsequence (MLCS) problem, which is related to the measurement of sequence similarity, is one of the fundamental problems in many fields. As an NP-hard problem, finding a good approximate solution within a reasonable time is important for solving large-size problems in practice. In this paper, we present a new progressive algorithm, Pro-MLCS, based on the dominant point approach. Pro-MLCS can find an approximate solution quickly and then progressively generate better solutions until obtaining the optimal one. Pro-MLCS employs three new techniques: 1) a new heuristic function for prioritizing candidate points; 2) a novel d-index-tree data structure for efficient computation of dominant points; and 3) a new pruning method using an upper bound function and approximate solutions. Experimental results show that Pro-MLCS can obtain the first approximate solution almost instantly and needs only a very small fraction, e. g., 3 percent, of the entire running time to get the optimal solution. Compared to existing state-of-the-art algorithms, Pro-MLCS can find better solutions in much shorter time, one to two orders of magnitude faster. In addition, two parallel versions of Pro-MLCS are developed: DPro-MLCS for distributed memory architecture and DSDPro-MLCS for hierarchical distributed shared memory architecture. Both parallel algorithms can efficiently utilize parallel computing resources and achieve nearly linear speedups. They also have a desirable progressiveness property-finding better solutions in shorter time when given more hardware resources.", "paper_title": "A New Progressive Algorithm for a Multiple Longest Common Subsequences Problem and Its Efficient Parallelization", "paper_id": "WOS:000316754600002"}