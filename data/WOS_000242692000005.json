{"auto_keywords": [{"score": 0.01010116213073653, "phrase": "can-based_applications"}, {"score": 0.009762362415421482, "phrase": "can-based_legacy_software"}, {"score": 0.009033644049789954, "phrase": "event_channels"}, {"score": 0.00481495049065317, "phrase": "can-based_legacy_applications"}, {"score": 0.004785022360244881, "phrase": "time-triggered_architectures"}, {"score": 0.004755279364266046, "phrase": "upcoming_car_series"}, {"score": 0.004481740377469438, "phrase": "system_integration"}, {"score": 0.004440005714775306, "phrase": "present_day"}, {"score": 0.004426180319550746, "phrase": "automotive_networks"}, {"score": 0.004145547550709817, "phrase": "bandwidth_limits"}, {"score": 0.004043363653396813, "phrase": "bus_utilization"}, {"score": 0.003993216345115755, "phrase": "transmission_latencies"}, {"score": 0.003906944616017869, "phrase": "upcoming_introduction"}, {"score": 0.0038826383289526857, "phrase": "time-triggered_networks"}, {"score": 0.003693533648584145, "phrase": "high_bandwidth"}, {"score": 0.0036591119109692545, "phrase": "time-triggered_network"}, {"score": 0.003513606861892222, "phrase": "resulting_reduction"}, {"score": 0.00343766112727297, "phrase": "significant_reduction"}, {"score": 0.0034162643819889054, "phrase": "hardware_cost"}, {"score": 0.0033950003609696227, "phrase": "reliability_improvements"}, {"score": 0.003300932921856956, "phrase": "existing_can-based_application_software"}, {"score": 0.0031302806539556145, "phrase": "underlying_time-triggered_network"}, {"score": 0.003015143226706584, "phrase": "conventional_can_system"}, {"score": 0.0029963684169267406, "phrase": "redevelopment_efforts"}, {"score": 0.002859223385284036, "phrase": "operating_system"}, {"score": 0.002797382279419762, "phrase": "first_step"}, {"score": 0.002711344582144154, "phrase": "communication_network"}, {"score": 0.002669320541871186, "phrase": "on-demand_transmission_requests"}, {"score": 0.0026444185820764716, "phrase": "priori_unknown_points"}, {"score": 0.0025710943379540175, "phrase": "carrier_sense"}, {"score": 0.002430474136314913, "phrase": "correct_temporal_order"}, {"score": 0.0023778841785229835, "phrase": "programming_interface"}, {"score": 0.0023630893578091856, "phrase": "api"}, {"score": 0.002311933249234786, "phrase": "handle-based_programming_interface"}, {"score": 0.002283210560032092, "phrase": "message_filtering"}, {"score": 0.002247807356218318, "phrase": "validation_setup"}, {"score": 0.0022268288922192704, "phrase": "time-triggered_protocol"}, {"score": 0.0022129545291464975, "phrase": "ttp"}, {"score": 0.0021314833449798077, "phrase": "real-world_communication_matrix"}, {"score": 0.0021049977753042253, "phrase": "automotive_industry"}], "paper_keywords": ["computer network performance", " distributed algorithms", " legacy systems", " real-time systems", " road vehicle electronics"], "paper_abstract": "Upcoming car series will be deployed with, time-triggered communication protocols due to benefits with respect to bandwidth, predictability, dependability, and system integration. In present day automotive networks, controller area network (CAN) is the most widely used communication protocol. Today, up to five CAN buses and several private CAN networks result from the bandwidth limits of CAN in conjunction with constraints concerning bus utilization aimed at controlling transmission latencies. In this context, the upcoming introduction of time-triggered networks into series production offers the potential to reduce the number of CAN networks by exploiting the high bandwidth of the time-triggered network instead of CAN buses. Due to the elimination of CAN buses, the resulting reduction of wiring and connectors promises a significant reduction in hardware cost and reliability improvements. In order to support the reuse of existing CAN-based application software, this paper presents a solution for the emulation of a CAN communication service on top of an underlying time-triggered network. By providing to CAN-based applications the same interface as in a conventional CAN system, redevelopment efforts for CAN-based legacy software are minimized. For this purpose, a CAN emulation middleware operates between a operating system and the CAN-based applications. In a first step, the middleware establishes event channels on top of the communication network in order to support on-demand transmission requests at a priori unknown points in time. The middleware then emulates the carrier sense multiple access collision avoidance (CSMA/CA) media access protocol of a physical CAN network for passing messages received via event channels to the application in the correct temporal order. Finally, the application. programming interface (API) of the widely used HIS/VectorCAN driver provides a handle-based programming interface with support for message filtering and callbacks. A validation setup with a time-triggered protocol (TTP) cluster demonstrates that the CAN emulation can handle CAN-based legacy software and a real-world communication matrix provided by the automotive industry.", "paper_title": "Reuse of CAN-based legacy applications in time-triggered architectures", "paper_id": "WOS:000242692000005"}