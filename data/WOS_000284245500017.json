{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "expected_time_complexity"}, {"score": 0.008334662229817026, "phrase": "proposed_infrastructure"}, {"score": 0.00471003041684707, "phrase": "theorem_proving"}, {"score": 0.004658426838467567, "phrase": "probabilistic_techniques"}, {"score": 0.004360412703519539, "phrase": "computational_complexity"}, {"score": 0.004241914481080374, "phrase": "computational_problem"}, {"score": 0.004081385289516914, "phrase": "paper-and-pencil_proofs"}, {"score": 0.0039053194919285725, "phrase": "simulation_techniques"}, {"score": 0.003675517796014622, "phrase": "inaccurate_analysis"}, {"score": 0.003516898780234098, "phrase": "formal_technique"}, {"score": 0.0033651019362620866, "phrase": "higher-order-logic_theorem"}, {"score": 0.003097865379563127, "phrase": "indicator_random_variables"}, {"score": 0.0030470127429039497, "phrase": "higher-order_logic"}, {"score": 0.00282048824450047, "phrase": "underlying_algorithm"}, {"score": 0.0027741761880779535, "phrase": "theorem_prover"}, {"score": 0.0026986685585382347, "phrase": "higher-order-logic_formalization"}, {"score": 0.0024569466759289055, "phrase": "practical_effectiveness"}, {"score": 0.002175913488493802, "phrase": "hat-check_problem"}, {"score": 0.0021401625519713577, "phrase": "birthday_paradox"}, {"score": 0.0021049977753042253, "phrase": "hiring_problem"}], "paper_keywords": ["formal method", " higher-order logic", " probability theory", " theorem proving", " birthday paradox", " hat-check problem", " hiring problem"], "paper_abstract": "Probabilistic techniques are widely used in the analysis of algorithms to estimate the computational complexity of algorithms or a computational problem Traditionally, such analyses are performed using paper-and-pencil proofs and the results are sometimes validated using simulation techniques These techniques are informal and thus may result in an inaccurate analysis In this paper, we propose a formal technique for analyzing the expected time complexity of algorithms using higher-order-logic theorem proving The approach calls for mathematically modeling the algorithm along with its inputs, using indicator random variables, in higher-order logic This model is then used to formally reason about the expected time complexity of the underlying algorithm in a theorem prover The paper includes the higher-order-logic formalization of indicator random variables, which are fundamental to the proposed infrastructure In order to illustrate the practical effectiveness and utilization of the proposed infrastructure, the paper also includes the analysis of algorithms for three well-known problems, i e, the hat-check problem, the birthday paradox and the hiring problem", "paper_title": "Formally Analyzing Expected Time Complexity of Algorithms Using Theorem Proving", "paper_id": "WOS:000284245500017"}