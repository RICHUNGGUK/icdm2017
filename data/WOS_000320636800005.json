{"auto_keywords": [{"score": 0.04835227522307675, "phrase": "software_engineering"}, {"score": 0.011123663705974878, "phrase": "graph_transformation"}, {"score": 0.007027616200100342, "phrase": "graph_transformation_systems"}, {"score": 0.006441828378461385, "phrase": "diagrammatic_notations"}, {"score": 0.004814952457274589, "phrase": "textual"}, {"score": 0.0047273577269638725, "phrase": "visual_and_diagrammatic_notations"}, {"score": 0.004473982381245469, "phrase": "chomsky_grammars"}, {"score": 0.004412780054037622, "phrase": "key_tool"}, {"score": 0.004352411290383643, "phrase": "textual_notations"}, {"score": 0.004234129588974058, "phrase": "textual_languages"}, {"score": 0.00410017409033388, "phrase": "spatial_dimensions"}, {"score": 0.003988719758707836, "phrase": "textual_grammars"}, {"score": 0.003916098498242888, "phrase": "new_tools"}, {"score": 0.0037231102027070724, "phrase": "powerful_tool"}, {"score": 0.0035072146967082083, "phrase": "enormous_importance"}, {"score": 0.0034751259234824913, "phrase": "visual_and_diagrammatic_languages"}, {"score": 0.003427540517249369, "phrase": "strong_support"}, {"score": 0.0032436052954996097, "phrase": "big_success"}, {"score": 0.003083655376444887, "phrase": "language_generating_devices"}, {"score": 0.0030135741897058844, "phrase": "system_evolution"}, {"score": 0.002799810685137358, "phrase": "main_features"}, {"score": 0.0026986685585382347, "phrase": "software_engineers"}, {"score": 0.00257735013358606, "phrase": "graph_transformations"}, {"score": 0.0024842242921857705, "phrase": "success_stories"}, {"score": 0.00241658945942583, "phrase": "extent_graph_transformation"}, {"score": 0.002276283303864666, "phrase": "main_causes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Graph transformation", " Software engineering", " Model", " Model transformation", " Visual language", " Dynamic system", " Evolving system"], "paper_abstract": "Textual as well as visual and diagrammatic notations are essential in software engineering, and are used in many different contexts. Chomsky grammars are the key tool to handle textual notations, and find many applications for textual languages. Visual and diagrammatic languages add spatial dimensions that reduce the applicability of textual grammars and call for new tools. Graph transformation systems have been studied for over 40 years and are a powerful tool to deal with syntax, semantics and transformation of diagrammatic notations. The enormous importance of visual and diagrammatic languages and the strong support that graph transformation provide to the manipulation of diagrammatic notations would suggest a big success of graph transformation in software engineering. Graph transformation systems find their application both as language generating devices and specification means for system evolution, and thus can have many applications in software engineering. In this paper we discuss the main features of graph transformation and how they can help software engineers. We look back to the many attempts to use graph transformations in software engineering in the last 15 years, identify some success stories, and discuss to what extent graph transformation succeeded, when they have not succeeded yet, what are the main causes of failures, and how they can help software engineering in the next 15 years. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Graph transformations and software engineering: Success stories and lost chances", "paper_id": "WOS:000320636800005"}