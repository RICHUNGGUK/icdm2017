{"auto_keywords": [{"score": 0.03945629000021421, "phrase": "parallel_simulation"}, {"score": 0.03450752566825341, "phrase": "multithreaded_applications"}, {"score": 0.00481495049065317, "phrase": "parallel_architecture_simulation"}, {"score": 0.004769182299692333, "phrase": "fractal-based_sampling"}, {"score": 0.004612376827433774, "phrase": "microarchitecture_simulation"}, {"score": 0.004546755482549647, "phrase": "design_alternatives"}, {"score": 0.004460703838987562, "phrase": "cycle-accurate_simulation"}, {"score": 0.004232331639807526, "phrase": "real_hardware"}, {"score": 0.004172094622123562, "phrase": "longstanding_problem"}, {"score": 0.003996458454723708, "phrase": "single-threaded_simulation_performance"}, {"score": 0.0038465304237380125, "phrase": "design_space"}, {"score": 0.003702206069379459, "phrase": "promising_approach"}, {"score": 0.0035632774896594524, "phrase": "simulation_challenge"}, {"score": 0.00349577373145384, "phrase": "existing_sampling_techniques"}, {"score": 0.0033806943112103397, "phrase": "single-threaded_applications"}, {"score": 0.0032382660477699695, "phrase": "thread_interaction"}, {"score": 0.0029854925655651244, "phrase": "cantor"}, {"score": 0.0027259252868643926, "phrase": "proposed_methodology"}, {"score": 0.002661474607275484, "phrase": "application's_execution_time"}, {"score": 0.002524985183240859, "phrase": "sniper"}, {"score": 0.002372649454733251, "phrase": "parsec_benchmarks"}, {"score": 0.0022509365210787993, "phrase": "simulation_speed"}, {"score": 0.0022294857939412073, "phrase": "detailed_parallel_simulation"}, {"score": 0.0021049977753042253, "phrase": "average_absolute_execution_time_prediction_error"}], "paper_keywords": ["Microarchitecture simulation", " parallel simulation", " sampled simulation", " fractal", " Cantor set", " performance evaluation"], "paper_abstract": "Computer architects rely heavily on microarchitecture simulation to evaluate design alternatives. Unfortunately, cycle-accurate simulation is extremely slow, being at least 4 to 6 orders of magnitude slower than real hardware. This longstanding problem is further exacerbated in the multi-/many-core era, because single-threaded simulation performance has not improved much, while the design space has expanded substantially. Parallel simulation is a promising approach, yet does not completely solve the simulation challenge. Furthermore, existing sampling techniques, which are widely used for single-threaded applications, do not readily apply to multithreaded applications as thread interaction and synchronization must now be taken into account. This work presents PCantorSim, a novel Cantor set (a classic fractal)-based sampling scheme to accelerate parallel simulation of multithreaded applications. Through the use of the proposed methodology, only less than 5% of an application's execution time is simulated in detail. We have implemented our approach in Sniper (a parallel multicore simulator) and evaluated it by running the PARSEC benchmarks on a simulated 8-core system. The results show that PCantorSim increases simulation speed over detailed parallel simulation by a factor of 20x, on average, with an average absolute execution time prediction error of 5.3%.", "paper_title": "PCantorSim: Accelerating Parallel Architecture Simulation through Fractal-Based Sampling", "paper_id": "WOS:000330509300028"}