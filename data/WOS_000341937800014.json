{"auto_keywords": [{"score": 0.048809793344885305, "phrase": "vobla"}, {"score": 0.00481495049065317, "phrase": "optimized_basic_linear_algebra"}, {"score": 0.004382737590042589, "phrase": "linear_algebra_libraries"}, {"score": 0.0040978781692373005, "phrase": "independent_intermediate_language"}, {"score": 0.004016072233242585, "phrase": "efficient_mapping"}, {"score": 0.0039624406239057944, "phrase": "accelerator_architectures"}, {"score": 0.0035823043879169153, "phrase": "polyhedral_model"}, {"score": 0.003417565253539315, "phrase": "performance_portability_concerns"}, {"score": 0.0033492947290751996, "phrase": "accelerator_programming"}, {"score": 0.003110396267535251, "phrase": "blas_library"}, {"score": 0.0029473940028924748, "phrase": "opencl_code"}, {"score": 0.002541741549046619, "phrase": "highly_hand-optimized_opencl_code"}, {"score": 0.0023603078194781965, "phrase": "straightforward_opencl_code"}, {"score": 0.002282166507956957, "phrase": "vobla_coding"}, {"score": 0.002251637552201872, "phrase": "significantly_less_effort"}, {"score": 0.002206606452557159, "phrase": "hand-optimizing_opencl_code"}, {"score": 0.0021049977753042253, "phrase": "improved_productivity_and_performance_portability"}], "paper_keywords": ["Algorithms", " languages", " performance", " linear algebra", " GPU", " domain-specific language", " parallel", " sparse matrix", " BLAS"], "paper_abstract": "We present VOBLA, a domain-specific language designed for programming linear algebra libraries. VOBLA is compiled to PENCIL, a domain independent intermediate language designed for efficient mapping to accelerator architectures such as GPGPUs. PENCIL is compiled to efficient, platform-specific OpenCL code using techniques based on the polyhedral model. This approach addresses both the programmer productivity and performance portability concerns associated with accelerator programming. We demonstrate our approach by using VOBLA to implement a BLAS library. We have evaluated the performance of OpenCL code generated using our compilation flow on ARM Mali, AMD Radeon, and AMD Opteron platforms. The generated code is currently on average 1 : 9 x slower than highly hand-optimized OpenCL code, but on average 8 : 1 x faster than straightforward OpenCL code. Given that the VOBLA coding takes significantly less effort compared to hand-optimizing OpenCL code, we believe our approach leads to improved productivity and performance portability.", "paper_title": "VOBLA: A Vehicle for Optimized Basic Linear Algebra", "paper_id": "WOS:000341937800014"}