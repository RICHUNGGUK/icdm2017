{"auto_keywords": [{"score": 0.043344204212477706, "phrase": "computational_problem"}, {"score": 0.04113839846181045, "phrase": "matrix_equation"}, {"score": 0.03295633871036615, "phrase": "tensor_product_formula"}, {"score": 0.00481495049065317, "phrase": "block_recursive_algorithms"}, {"score": 0.004560568143816105, "phrase": "tensor_product_notation"}, {"score": 0.004398457709182882, "phrase": "programming_methodology"}, {"score": 0.004293584349522444, "phrase": "recursive_algorithms"}, {"score": 0.003352256019007896, "phrase": "simple_matrices"}, {"score": 0.0027463775689957255, "phrase": "language_constructs"}, {"score": 0.0027133856739937133, "phrase": "high-level_programming_languages"}, {"score": 0.0025853238923610076, "phrase": "computer_programs"}, {"score": 0.002508365161206412, "phrase": "parallel_computers"}, {"score": 0.002478225374613311, "phrase": "distributed-memory_multiprocessors"}, {"score": 0.0024336917123957387, "phrase": "tensor_product_formulas"}, {"score": 0.002304824112812496, "phrase": "parallel_prefix_problem"}, {"score": 0.0022633993976138387, "phrase": "discrete_fourier_transform_problem"}, {"score": 0.00210592817044254, "phrase": "fourier"}], "paper_keywords": ["programming methodology", " tensor product", " block recursive algorithm", " parallel processing", " distributed processing", " parallel prefix", " fast Fourier transform"], "paper_abstract": "In this paper, we use the tensor product notation as the framework of a programming methodology for designing block recursive algorithms. We first express a computational problem in its matrix form. Next, we formulate a matrix equation for the matrix of the computational problem. Then, we try to find a solution of the matrix equation such that the solution is composed of simple matrices. Finally, we recursively factorize the subproblem to obtain a tensor product formula representing an algorithm for the given problem. In this methodology, the operations of a tensor product formula can be mapped to language constructs of high-level programming languages. That is, we can generate computer programs, including programs for parallel computers and distributed-memory multiprocessors, from tensor product formulas. In this paper, we use the parallel prefix problem and the discrete Fourier transform problem as examples to illustrate the methodology and derive various parallel prefix and fast Fourier transform algorithms.", "paper_title": "A programming methodology for designing block recursive algorithms", "paper_id": "WOS:000234908900006"}