{"auto_keywords": [{"score": 0.024988146242154514, "phrase": "relational_data_stream"}, {"score": 0.00481495049065317, "phrase": "large_data_streams"}, {"score": 0.004654642380553263, "phrase": "information_retrieval"}, {"score": 0.004625213618557284, "phrase": "ir"}, {"score": 0.004454158739805578, "phrase": "broad_range"}, {"score": 0.004424087591260246, "phrase": "high_quality_services"}, {"score": 0.004335081499311714, "phrase": "ir-styled_m-keyword_query_processing"}, {"score": 0.004233492114255375, "phrase": "rdbms_framework"}, {"score": 0.004106353084467526, "phrase": "hidden_interconnected_tuple_structures"}, {"score": 0.004051074327962139, "phrase": "connected_trees"}, {"score": 0.003850299959557491, "phrase": "new_challenging_issue"}, {"score": 0.0036968421974412522, "phrase": "open-ended_relational_data_stream"}, {"score": 0.0036594395622282358, "phrase": "user-given_m-keyword_query"}, {"score": 0.003373479748579024, "phrase": "costly_joins"}, {"score": 0.003036832649117453, "phrase": "interconnected_tuple_structures"}, {"score": 0.0029655761366079877, "phrase": "database_schema"}, {"score": 0.002895986736522535, "phrase": "schema_graph"}, {"score": 0.0028184476518849015, "phrase": "new_approaches"}, {"score": 0.0027523011981394835, "phrase": "novel_algorithm"}, {"score": 0.0026335379469691997, "phrase": "m-keyword_query"}, {"score": 0.0025717199672018304, "phrase": "new_demand-driven_approach"}, {"score": 0.0025198864435531055, "phrase": "high_speed_relational_data_stream"}, {"score": 0.002452392552332778, "phrase": "high_efficiency"}, {"score": 0.0023948164534491273, "phrase": "intermediate_results"}, {"score": 0.002322767202375341, "phrase": "proposed_new_techniques"}, {"score": 0.0022836785412390544, "phrase": "high_scalability"}, {"score": 0.0022452462028184654, "phrase": "query_plan_generation"}, {"score": 0.0022300545742463262, "phrase": "query_plan_execution"}, {"score": 0.002199978308846543, "phrase": "extensive_experimental_studies"}, {"score": 0.002185092297972985, "phrase": "synthetic_data"}, {"score": 0.0021703067932421463, "phrase": "real_data"}, {"score": 0.0021049977753042253, "phrase": "existing_algorithms"}], "paper_keywords": ["Keyword search", " Relational databases", " Data streams"], "paper_abstract": "It is widely recognized that the integration of information retrieval (IR) and database (DB) techniques provides users with a broad range of high quality services. Along this direction, IR-styled m-keyword query processing over a relational database in an rdbms framework has been well studied. It finds all hidden interconnected tuple structures, for example connected trees that contain keywords and are interconnected by sequences of primary/foreign key relationships among tuples. A new challenging issue is how to monitor events that are implicitly interrelated over an open-ended relational data stream for a user-given m-keyword query. Such a relational data stream is a sequence of tuple insertion/deletion operations. The difficulty of the problem is related to the number of costly joins to be processed over time when tuples are inserted and/or deleted. Such cost is mainly affected by three parameters, namely, the number of keywords, the maximum size of interconnected tuple structures, and the complexity of the database schema when it is viewed as a schema graph. In this paper, we propose new approaches. First, we propose a novel algorithm to efficiently determine all the joins that need to be processed for answering an m-keyword query. Second, we propose a new demand-driven approach to process such a query over a high speed relational data stream. We show that we can achieve high efficiency by significantly reducing the number of intermediate results when processing joins over a relational data stream. The proposed new techniques allow us to achieve high scalability in terms of both query plan generation and query plan execution. We conducted extensive experimental studies using synthetic data and real data to simulate a relational data stream. Our approach significantly outperforms existing algorithms.", "paper_title": "Scalable keyword search on large data streams", "paper_id": "WOS:000286432000003"}