{"auto_keywords": [{"score": 0.028463284289338604, "phrase": "ja-be-ja"}, {"score": 0.007783561523908314, "phrase": "metis."}, {"score": 0.00481495049065317, "phrase": "distributed_algorithm"}, {"score": 0.004774324145784758, "phrase": "large-scale_graph_partitioning"}, {"score": 0.004734038956773703, "phrase": "balanced_graph"}, {"score": 0.0046544807197808095, "phrase": "np-complete_problem"}, {"score": 0.00459568664065473, "phrase": "wide_range"}, {"score": 0.004330941610682453, "phrase": "optimal_storage"}, {"score": 0.004294381488413906, "phrase": "large_sets"}, {"score": 0.004258128672571261, "phrase": "graph-structured_data"}, {"score": 0.003829877278269543, "phrase": "frequent_global_operations"}, {"score": 0.00378145978325955, "phrase": "entire_graph"}, {"score": 0.003639835714755229, "phrase": "fully_distributed_algorithm"}, {"score": 0.003503497128638099, "phrase": "local_search"}, {"score": 0.0034738975998176323, "phrase": "simulated_annealing_techniques"}, {"score": 0.0031110402375026016, "phrase": "central_coordination"}, {"score": 0.0029191527226078286, "phrase": "small_subset"}, {"score": 0.0028944757265206332, "phrase": "random_vertices"}, {"score": 0.0027741761880779535, "phrase": "strict_synchronization"}, {"score": 0.002603012037901889, "phrase": "distributed_graph-processing_system"}, {"score": 0.002548331088496964, "phrase": "fully_distributed_networks"}, {"score": 0.0024842242921857705, "phrase": "minimal_edge-cut_value"}, {"score": 0.0024012441367538434, "phrase": "state-of-the-art_centralized_algorithms"}, {"score": 0.0023210293050850276, "phrase": "large_social_networks"}], "paper_keywords": ["Design", " Algorithms", " Performance", " graph partitioning", " edge-cut partitioning", " vertex-cut partitioning", " distributed algorithm", " load balancing", " simulated annealing"], "paper_abstract": "Balanced graph partitioning is an NP-complete problem with a wide range of applications. These applications include many large-scale distributed problems, including the optimal storage of large sets of graph-structured data over several hosts. However, in very large-scale distributed scenarios, state-of-the-art algorithms are not directly applicable because they typically involve frequent global operations over the entire graph. In this article, we propose a fully distributed algorithm called JA-BE-JA that uses local search and simulated annealing techniques for two types of graph partitioning: edge-cut partitioning and vertex-cut partitioning. The algorithm is massively parallel: There is no central coordination, each vertex is processed independently, and only the direct neighbors of a vertex and a small subset of random vertices in the graph need to be known locally. Strict synchronization is not required. These features allow JA-BE-JA to be easily adapted to any distributed graph-processing system from data centers to fully distributed networks. We show that the minimal edge-cut value empirically achieved by JA-BE-JA is comparable to state-of-the-art centralized algorithms such as METIS. In particular, on large social networks, JA-BE-JA outperforms METIS. We also show that JA-BE-JA computes very low vertex-cuts, which are proved significantly more effective than edge-cuts for processing most real-world graphs.", "paper_title": "A Distributed Algorithm for Large-Scale Graph Partitioning", "paper_id": "WOS:000356389900006"}