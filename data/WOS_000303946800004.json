{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "approximate_palindromes"}, {"score": 0.004727995968069753, "phrase": "run-length_encoded_string"}, {"score": 0.004476399615305783, "phrase": "palindrome_retrieval_problem"}, {"score": 0.004289966839994858, "phrase": "run-length_encoded_form"}, {"score": 0.0038923605771735838, "phrase": "subsequent_queries"}, {"score": 0.003822003373331997, "phrase": "longest_palindrome"}, {"score": 0.0037301606780397456, "phrase": "specified_position"}, {"score": 0.003640516896245813, "phrase": "specified_number"}, {"score": 0.0032828706086018133, "phrase": "space_polynomial"}, {"score": 0.003223494720348768, "phrase": "compressed_string_size"}, {"score": 0.0028195727965553367, "phrase": "first_algorithm"}, {"score": 0.002751751956416832, "phrase": "small_k"}, {"score": 0.002685558057339722, "phrase": "desired_palindrome"}, {"score": 0.002392188222609101, "phrase": "second_algorithm"}], "paper_keywords": ["Palindrome", " Hamming distance", " Run-length encoding"], "paper_abstract": "In this paper, we study the palindrome retrieval problem with the input string compressed into run-length encoded form. Given a run-length encoded string RLE(T), we show how to preprocess RLE(T) to support subsequent queries of the longest palindrome centered at any specified position and having any specified number of mismatches between its arms. We present two algorithms for the problem, both taking time and space polynomial in the compressed string size. Let n denote the number of runs of RLE(T) and let k denote the number of mismatches. The first algorithm, devised for small k, identifies the desired palindrome in O(log n + min{k, n}) time with O(n log n) preprocessing time, while the second algorithm achieves O(log(2) n) query time, independent of k, after O(n(2) log n)-time preprocessing. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Efficient retrieval of approximate palindromes in a run-length encoded string", "paper_id": "WOS:000303946800004"}