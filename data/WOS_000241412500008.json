{"auto_keywords": [{"score": 0.038114170567752154, "phrase": "storm"}, {"score": 0.00481495049065317, "phrase": "large-scale_parallel_computers"}, {"score": 0.004665296491645837, "phrase": "popular_form"}, {"score": 0.0046164478775379105, "phrase": "high-performance_computing"}, {"score": 0.004402854153653114, "phrase": "sequential_systems"}, {"score": 0.004089991141220082, "phrase": "small_set"}, {"score": 0.004047141845635495, "phrase": "primitive_mechanisms"}, {"score": 0.003720060615588018, "phrase": "resource-management_problems"}, {"score": 0.0032954888655173666, "phrase": "efficient_implementation"}, {"score": 0.0032437952431945724, "phrase": "key_innovation"}, {"score": 0.0031594291695784286, "phrase": "modular_software_architecture"}, {"score": 0.0030935140058168885, "phrase": "resource_management_functionality"}, {"score": 0.0030449789178940787, "phrase": "small_number"}, {"score": 0.0030130446986008277, "phrase": "highly_scalable_mechanisms"}, {"score": 0.0028886123801902517, "phrase": "resource_management"}, {"score": 0.002858313353461727, "phrase": "low-level_network_features"}, {"score": 0.0025722202862084186, "phrase": "best_time"}, {"score": 0.0024272350606639147, "phrase": "parallel_application"}, {"score": 0.0023640560785711923, "phrase": "node_os"}, {"score": 0.0023146962503449186, "phrase": "sequential_application"}, {"score": 0.0021498955164659145, "phrase": "detailed_performance_model"}, {"score": 0.0021049977753042253, "phrase": "storm's_performance"}], "paper_keywords": ["hardware/software interface", " system architectures", " integration", " modeling", " network operating systems", " supercomputers"], "paper_abstract": "Although clusters are a popular form of high-performance computing, they remain more difficult to manage than sequential systems - or even symmetric multiprocessors. In this paper, we identify a small set of primitive mechanisms that are sufficiently general to be used as building blocks to solve a variety of resource-management problems. We then present STORM, a resource-management environment that embodies these mechanisms in a scalable, low-overhead, and efficient implementation. The key innovation behind STORM is a modular software architecture that reduces all resource management functionality to a small number of highly scalable mechanisms. These mechanisms simplify the integration of resource management with low-level network features. As a result of this design, STORM can launch large, parallel applications an order of magnitude faster than the best time reported in the literature and can gang-schedule a parallel application as fast as the node OS can schedule a sequential application. This paper describes the mechanisms and algorithms behind STORM and presents a detailed performance model that shows that STORM's performance can scale to thousands of nodes.", "paper_title": "STORM: Scalable resource management for large-scale parallel computers", "paper_id": "WOS:000241412500008"}