{"auto_keywords": [{"score": 0.02932641508077238, "phrase": "cpu_cores"}, {"score": 0.004815316573636748, "phrase": "gpu"}, {"score": 0.004752221133109136, "phrase": "combinatorial_optimization_problems"}, {"score": 0.004555063707325882, "phrase": "branch"}, {"score": 0.004435996321956133, "phrase": "large_combinatorial_optimization_problems"}, {"score": 0.004406994912939125, "phrase": "cpu-enhanced_multi-core_machines"}, {"score": 0.00433531459712787, "phrase": "tree-based_optimization_method"}, {"score": 0.004073359218158693, "phrase": "highly_irregular_tree"}, {"score": 0.004033464035028803, "phrase": "solution_space"}, {"score": 0.003916098498242888, "phrase": "cpu-accelerated_approach"}, {"score": 0.00376488621224566, "phrase": "cpu_device"}, {"score": 0.003548905904860611, "phrase": "cpu-cpu_communication_latency_and_thread_divergence"}, {"score": 0.003445591238183763, "phrase": "gpu-based_fine-grained_parallelization"}, {"score": 0.0032800186243040663, "phrase": "second_contribution"}, {"score": 0.0031740669025323606, "phrase": "multi-core_processing"}, {"score": 0.0029722900280316216, "phrase": "cooperative_one"}, {"score": 0.0028480459059007468, "phrase": "exploration_process"}, {"score": 0.0027289810731258865, "phrase": "cooperative_approach"}, {"score": 0.002640781900605126, "phrase": "cpu_pools"}, {"score": 0.0026234862160314397, "phrase": "tree_nodes"}, {"score": 0.0025220591847502356, "phrase": "different_approaches"}, {"score": 0.002464709648714996, "phrase": "flowshop_scheduling_problem"}, {"score": 0.002424543908235379, "phrase": "single_cpu-based_execution"}, {"score": 0.002330790244117364, "phrase": "large_problem_instances"}], "paper_keywords": ["Multi-core computing", " GPU accelerators", " Parallel branch-and-bound", " Flowshop scheduling problem"], "paper_abstract": "In this paper, we revisit the design and implementation of Branch-and-Bound (B&B) algorithms for solving large combinatorial optimization problems on CPU-enhanced multi-core machines. B&B is a tree-based optimization method that uses four operators (selection, branching, bounding and pruning) to build and explore a highly irregular tree representing the solution space. In our previous works, we have proposed a CPU-accelerated approach in which only a single CPU core is used and only the bounding operator is performed on the CPU device. Here, we extend the approach (LL-GB&B) in order to minimize the CPU-CPU communication latency and thread divergence. Such an objective is achieved through a GPU-based fine-grained parallelization of the branching and pruning operators in addition to the bounding one. The second contribution consists in investigating the combination of a CPU with multi-core processing. Two scenarios have been explored leading to two approaches: a concurrent (RLL-GB&B) and a cooperative one (PLL-GB&B). In the first one, the exploration process is performed concurrently by the CPU and the CPU cores. In the cooperative approach, the CPU cores prepare and off-load to CPU pools of tree nodes using data streaming while the CPU performs the exploration. The different approaches have been extensively experimented on the Flowshop scheduling problem. Compared to a single CPU-based execution, LL-GB&B allows accelerations up to ( x 160) for large problem instances. Moreover, when combining multi-core and CPU, we figure out that using RLL-GB&B is not beneficial while PLL-GB&B enables an improvement up to 36% compared to LL-GB&B. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Combining multi-core and GPU computing for solving combinatorial optimization problems", "paper_id": "WOS:000326057700005"}