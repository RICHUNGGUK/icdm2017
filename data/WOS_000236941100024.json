{"auto_keywords": [{"score": 0.048734215142491696, "phrase": "seeded_faults"}, {"score": 0.02323542885679788, "phrase": "composite_conditions"}, {"score": 0.00481495049065317, "phrase": "control_flow"}, {"score": 0.004081385289516914, "phrase": "branch_coverage"}, {"score": 0.004035107125458193, "phrase": "predicate_coverage_criteria"}, {"score": 0.003683213029483699, "phrase": "controlled_simulation"}, {"score": 0.003419943984098415, "phrase": "novel_approach"}, {"score": 0.0033619033669956317, "phrase": "minimal_test_suites"}, {"score": 0.0033048445033866795, "phrase": "coverage_criteria"}, {"score": 0.0031573626285069157, "phrase": "relative_performance"}, {"score": 0.0030337085953063125, "phrase": "byte_code_coverage_analyzer"}, {"score": 0.002999274091205852, "phrase": "five_java_programs"}, {"score": 0.002965229277927781, "phrase": "different_sizes"}, {"score": 0.0028167336373711494, "phrase": "five_programs"}, {"score": 0.0027374647587075935, "phrase": "applicable_mutation_operators"}, {"score": 0.002706383680762465, "phrase": "twenty-five_different_minimal_junit_test_suites"}, {"score": 0.0026152363154073707, "phrase": "coverage_criteria-program_pair"}, {"score": 0.0025561788724870974, "phrase": "program's_mutants"}, {"score": 0.0024005409468262203, "phrase": "branch_coverage_criterion"}, {"score": 0.0022672718785099666, "phrase": "structural_testing"}, {"score": 0.002153653728048424, "phrase": "predicate_testing"}], "paper_keywords": ["block coverage", " branch coverage", " predicate coverage", " software testing", " test case generation", " experiment", " mutation operator", " statistical analysis"], "paper_abstract": "In this paper, we describe the results of an experiment comparing the effectiveness of three structural coverage-testing methods, namely, block coverage, branch coverage and predicate coverage criteria on seeded faults. The implications of our work is two-fold: one, we describe a controlled simulation comparing the effectiveness of these criteria and two, we demonstrate a novel approach to generate minimal test suites for these coverage criteria so as to be able to predict relative performance of the three coverage-adequate test suites. Using a byte code coverage analyzer, five java programs of different sizes were tested. Faults were seeded in all five programs using a set of applicable mutation operators. Twenty-five different minimal JUnit test suites were then constructed for each coverage criteria-program pair and executed on program's mutants to compare the effectiveness. Results suggest that generally, branch coverage criterion performed consistently and was found to be most viable option for structural testing. However, in presence of composite conditions, predicate testing does better and its effectiveness increases with increase in the cardinality of the composite conditions.", "paper_title": "An experimental comparison of the effectiveness of control flow based testing approaches on seeded faults", "paper_id": "WOS:000236941100024"}