{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "system_f"}, {"score": 0.03556417972834716, "phrase": "internal_model"}, {"score": 0.00957640357839133, "phrase": "code_type"}, {"score": 0.0046253989970108985, "phrase": "girard's_internal_coding"}, {"score": 0.004195418010131832, "phrase": "type-erasing_coding"}, {"score": 0.0040767015025213625, "phrase": "simply_typed_lambda-calculus"}, {"score": 0.003961330917648707, "phrase": "term_variables"}, {"score": 0.003634371940842838, "phrase": "system_f."}, {"score": 0.0021789194955896124, "phrase": "untyped_beta-eta-equality"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Typed lambda-calculus", " System F", " Semantics of polymorphism", " Compiler", " Decompiler", " de Bruijn level"], "paper_abstract": "This paper considers Girard's internal coding of each term of System F by some term of a code type. This coding is the type-erasing coding definable already in the simply typed lambda-calculus using only abstraction on term variables. It is shown that there does not exist any decompiler for System F in System F. where the decompiler maps a term of System F to its code. An internal model of F is given by interpreting each type of F by some type equipped with maps between the type and the code type. This paper gives a decompiler-normalizer for this internal model in F, where the decompiler-normalizer maps any term of the internal model to the code of its normal form. It is also shown that for any model of F the composition of this internal model and the model produces another model of F whose equational theory is below untyped beta-eta-equality. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Internal models of system F for decompilation", "paper_id": "WOS:000304024100002"}