{"auto_keywords": [{"score": 0.03681065734000902, "phrase": "data_placement_problem"}, {"score": 0.03644451033122438, "phrase": "array_data"}, {"score": 0.0328058024765297, "phrase": "multiple_types"}, {"score": 0.03247814759994787, "phrase": "memory_units"}, {"score": 0.025116947622181113, "phrase": "random_memory_placement_method"}, {"score": 0.00481495049065317, "phrase": "optimizing_data_placement"}, {"score": 0.004765482708043842, "phrase": "loops_for_energy_minimization"}, {"score": 0.004716520738331953, "phrase": "multiple_types_of_memories"}, {"score": 0.004668059458774745, "phrase": "strict_real-time_processing_and_energy_efficiency"}, {"score": 0.00450231514359539, "phrase": "digital_signal_processing"}, {"score": 0.004456089948259119, "phrase": "dsp"}, {"score": 0.004364919932563366, "phrase": "scratch-pad_memory"}, {"score": 0.004081385289516914, "phrase": "small_area"}, {"score": 0.004039423410198574, "phrase": "low_energy_consumption"}, {"score": 0.003531474887552889, "phrase": "optimal_solution"}, {"score": 0.0030083825666563898, "phrase": "energy_and_time_costs"}, {"score": 0.002841971477743441, "phrase": "dynamic_programming_algorithm"}, {"score": 0.0028127163745564777, "phrase": "iterational_optimal_data_placement"}, {"score": 0.0026570998719084153, "phrase": "processor_architectures"}, {"score": 0.0025361866386341796, "phrase": "experimental_results"}, {"score": 0.0024971144603069006, "phrase": "iodp_algorithm"}, {"score": 0.0024586427394152196, "phrase": "energy_consumption"}, {"score": 0.0023225701080913388, "phrase": "greedy_algorithm"}, {"score": 0.0022283519468680475, "phrase": "memory_access_time"}, {"score": 0.0021049977753042253, "phrase": "greedy_approach"}], "paper_keywords": ["Data placement", " Loops", " Scratch-pad memory", " Optimization"], "paper_abstract": "Strict real-time processing and energy efficiency are required by high-performance Digital Signal Processing (DSP) applications. Scratch-Pad Memory (SPM), a software-controlled on-chip memory with small area and low energy consumption, has been widely used in many DSP systems. Various data placement algorithms are proposed to effectively manage data on SPMs. However, none of them can provide optimal solution of data placement problem for array data in loops. In this paper, we study the problem of how to optimally place array data in loops to multiple types of memory units such that the energy and time costs of memory accesses can be minimized. We design a dynamic programming algorithm, Iterational Optimal Data Placement (IODP), to solve data placement problem for loops for processor architectures with multiple types of memory units. According to the experimental results, the IODP algorithm reduced the energy consumption by 20.04 % and 8.98 % compared with a random memory placement method and a greedy algorithm, respectively. It also reduced the memory access time by 19.01 % and 8.62 % compared with a random memory placement method and a greedy approach.", "paper_title": "Optimizing Data Placement of Loops for Energy Minimization with Multiple Types of Memories", "paper_id": "WOS:000321970300002"}