{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "plc_systems"}, {"score": 0.0067804546443207825, "phrase": "system_model"}, {"score": 0.004781498797706604, "phrase": "programmable_logic_controllers"}, {"score": 0.004585590781137879, "phrase": "reactive_systems"}, {"score": 0.004428452434981208, "phrase": "system_state"}, {"score": 0.004246947739596565, "phrase": "system_behavior"}, {"score": 0.004202741104973709, "phrase": "single_cycle"}, {"score": 0.004044534825749132, "phrase": "increasing_demand"}, {"score": 0.003946960862020283, "phrase": "new_rigorous_and_rapid_design_flow"}, {"score": 0.0038249462699142733, "phrase": "component-based_formal_modeling"}, {"score": 0.0037587915908689497, "phrase": "cyclic_execution_platforms"}, {"score": 0.0036937777684258955, "phrase": "plc."}, {"score": 0.003505378950567746, "phrase": "modeling_phase"}, {"score": 0.0033498651263935194, "phrase": "modeling_language"}, {"score": 0.003102195256794215, "phrase": "verification_phase"}, {"score": 0.003027286031578399, "phrase": "timed_automata"}, {"score": 0.0029852932802967224, "phrase": "uppaal_verification"}, {"score": 0.002823050755743821, "phrase": "code_synthesis_phase"}, {"score": 0.0027936239349923464, "phrase": "software_part"}, {"score": 0.0027071661844502992, "phrase": "cyclic_code"}, {"score": 0.0026696020591118344, "phrase": "plc_software"}, {"score": 0.0026233771102489416, "phrase": "software_model"}, {"score": 0.002560000295424659, "phrase": "cyclic_manner"}, {"score": 0.0024807547991927137, "phrase": "high-performance_cyclic_code"}, {"score": 0.002420815160284086, "phrase": "business_work-flow"}, {"score": 0.002370589610989257, "phrase": "program_development"}, {"score": 0.0022338588371647278, "phrase": "industrial_case_study"}, {"score": 0.0022105600003496225, "phrase": "plc_system"}, {"score": 0.002172266188075892, "phrase": "physical_devices"}, {"score": 0.0021496083700137305, "phrase": "huge_palace"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Programmable Logic Controller", " Modeling", " Verification", " Code Synthesis"], "paper_abstract": "Programmable Logic Controllers (PLCs) are widely used in industry. PLC systems are reactive systems which run cyclically. In each cycle, the system state is checked and the program is executed once to determine the system behavior for a single cycle. Development of PLC systems conventionally follows the V-model, but increasing demand for efficiency and reliability requires a new rigorous and rapid design flow. In this paper, we propose a component-based formal modeling and synthesis method for cyclic execution platforms and apply it to PLC. Our method consists of three main phases: modeling, verification and code synthesis. In the modeling phase, the BIP (Behavior-Interaction-Priority) framework which is flexible and expressive is used as the modeling language. Real-time behavior, which is intensely concerned in PLC systems, can be modeled as well. In the verification phase, the system model is translated to timed automata and checked by UPPAAL Verification helps to ensure correctness of the model and further increases reliability of the implementation. In the code synthesis phase, the software part of the system model is extracted and synthesized to cyclic code. Although the PLC software runs cyclically, the software model is not necessarily given in a cyclic manner. We propose an algorithm which can generate high-performance cyclic code from a model which describes the business work-flow. This feature significantly simplifies program development. A set of tools is implemented to support our design flow and they are applied to an industrial case study for a PLC system that controls dozens of physical devices in a huge palace. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Formal component-based modeling and synthesis for PLC systems", "paper_id": "WOS:000325675600012"}