{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "object_allocation"}, {"score": 0.004720419202969916, "phrase": "distributed_object-storage_system"}, {"score": 0.00462773520532301, "phrase": "object-based_storage_system"}, {"score": 0.004303127794432684, "phrase": "object-based_storage_devices"}, {"score": 0.0041084684278314305, "phrase": "storage_system_architecture"}, {"score": 0.003820144626025562, "phrase": "critical_aspect"}, {"score": 0.0037450707321601963, "phrase": "overall_systems_performance"}, {"score": 0.0035285548582081627, "phrase": "managing_objects"}, {"score": 0.0032376465741070274, "phrase": "good_workload_balance"}, {"score": 0.0031739835218110015, "phrase": "rather_high_effectiveness"}, {"score": 0.0029706504420983896, "phrase": "readily_available_parallelism"}, {"score": 0.002931569771634119, "phrase": "large_file"}, {"score": 0.0028549396580672417, "phrase": "full_advantage_device_parallelism"}, {"score": 0.0027803070408286158, "phrase": "clients'_operations"}, {"score": 0.0026194209399161184, "phrase": "small_file"}, {"score": 0.0024678216843278806, "phrase": "efficient_algorithm"}, {"score": 0.0022641658133181115, "phrase": "key_factors"}, {"score": 0.002147265537489893, "phrase": "whole_system"}, {"score": 0.0021049977753042253, "phrase": "objects_allocation"}], "paper_keywords": [""], "paper_abstract": "The object-based storage system, in which files are mapped onto one or more data objects stored on Object-Based Storage Devices (OSDs), has distributed storage system architecture. In such a system, the policy for object allocation is a critical aspect affecting the overall systems performance. Hashing and fragment-strip are two common techniques used for managing objects, but both have their disadvantages, and advantages, e.g. hashing achieves good workload balance and provide rather high effectiveness in allocating data, but it can not provide readily available parallelism for large file; fragment-strip takes full advantage device parallelism, simplifies the clients' operations, but this policy is not fit for small file. In this paper, we present an efficient algorithm that combines the advantages of these two approaches while avoiding their shortcomings. The key factors which can impact the performance of the whole system in the objects allocation are also be discussed.", "paper_title": "A hybrid scheme for object allocation in a distributed object-storage system", "paper_id": "WOS:000238417500057"}