{"auto_keywords": [{"score": 0.04733190377720633, "phrase": "field_failures"}, {"score": 0.005646042050847826, "phrase": "recurring_faulty_functions"}, {"score": 0.00481495049065317, "phrase": "field_traces"}, {"score": 0.004738078275822989, "phrase": "large_industrial_software_system"}, {"score": 0.00441883624011048, "phrase": "faulty_functions"}, {"score": 0.0040334640350288, "phrase": "quite_over-whelming"}, {"score": 0.003947765701573287, "phrase": "software_systems"}, {"score": 0.0038846843242954935, "phrase": "vast_client_base"}, {"score": 0.0037615180375561805, "phrase": "realistic_applications"}, {"score": 0.002985631781749091, "phrase": "new_faults"}, {"score": 0.0029064676523923886, "phrase": "previous_studies"}, {"score": 0.002769209760453212, "phrase": "previously_known_faults"}, {"score": 0.0024868972942701582, "phrase": "new_field_failures"}, {"score": 0.0023950275815082297, "phrase": "decision_trees"}, {"score": 0.0023694065215394593, "phrase": "earlier_resolved_traces"}, {"score": 0.0023440589015485077, "phrase": "system_failures"}, {"score": 0.002306543826130521, "phrase": "current_and_prior_releases"}, {"score": 0.0021975548867457606, "phrase": "large_industrial_system"}], "paper_keywords": ["Crashing failures", " decision tree", " function call traces", " non-crashing failures", " recurrent faults", " software maintenance"], "paper_abstract": "Software maintainers use the traces of field failures to understand and diagnose faulty functions that cause the system to fail. Despite their usefulness, traces from the field can be quite over-whelming, especially for software systems with a vast client base. In the execution of realistic applications, many of them being millions of lines of code, there are just too many traces that are generated. In addition, traces are known to be extraordinarily large, which further complicates matters. Fortunately, not all field failures are caused by new faults. In fact, previous studies showed that 50% to 90% of field failures are due to previously known faults. In this paper, we propose a machine learning approach that automatically detects recurring faulty functions in the traces of new field failures. We achieve our goal by training decision trees on earlier resolved traces of system failures from the current and prior releases of the system. When applied to a large industrial system with 20 million lines of code and 200,000 functions, our approach was able to detect recurring faulty functions in the traces of field failures with an accuracy of 90%, to even 97% in some cases.", "paper_title": "Identifying Recurring Faulty Functions in Field Traces of a Large Industrial Software System", "paper_id": "WOS:000350865900022"}