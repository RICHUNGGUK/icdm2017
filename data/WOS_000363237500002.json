{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_developers"}, {"score": 0.0036660436272785476, "phrase": "timely_or_efficient_recommendations"}, {"score": 0.00355485940716082, "phrase": "timely_and_efficient_coordination_recommendations"}, {"score": 0.0033277936960179892, "phrase": "mylyn_software_project"}, {"score": 0.003170520716404193, "phrase": "developer_actions"}, {"score": 0.002967931416941965, "phrase": "coordination_needs"}, {"score": 0.0028276174348291923, "phrase": "machine_learning"}, {"score": 0.002790511479398411, "phrase": "coordination_recommendations"}, {"score": 0.002646880721119838, "phrase": "information_overload"}, {"score": 0.002544017922741882, "phrase": "developer_interviews"}, {"score": 0.002434396049547248, "phrase": "mylyn_project"}, {"score": 0.0023604768913655463, "phrase": "ide_logging_facilities"}, {"score": 0.002298902547676131, "phrase": "machine_learning_techniques"}, {"score": 0.0022192891418394514, "phrase": "critical_coordination"}, {"score": 0.0021805201234139475, "phrase": "timely_way"}, {"score": 0.0021049977753042253, "phrase": "software_engineering_research"}], "paper_keywords": ["Computer-supported cooperative work", " human factors in software design", " management", " metrics/measurement", " productivity", " programming teams"], "paper_abstract": "When software developers fail to coordinate, build failures, duplication of work, schedule slips and software defects can result. However, developers are often unaware of when they need to coordinate, and existing methods and tools that help make developers aware of their coordination needs do not provide timely or efficient recommendations. We describe our techniques to identify timely and efficient coordination recommendations, which we developed and evaluated in a study of coordination needs in the Mylyn software project. We describe how data obtained from tools that capture developer actions within their Integrated Development Environment (IDE) as they occur can be used to timely identify coordination needs; we also describe how properties of tasks coupled with machine learning can focus coordination recommendations to those that are more critical to the developers to reduce information overload and provide more efficient recommendations. We motivate our techniques through developer interviews and report on our quantitative analysis of coordination needs in the Mylyn project. Our results suggest that by leveraging IDE logging facilities, properties of tasks and machine learning techniques awareness tools could make developers aware of critical coordination needs in a timely way. We conclude by discussing implications for software engineering research and tool design.", "paper_title": "Facilitating Coordination between Software Developers: A Study and Techniques for Timely and Efficient Recommendations", "paper_id": "WOS:000363237500002"}