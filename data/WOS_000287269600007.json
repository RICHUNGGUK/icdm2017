{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_pattern_detection"}, {"score": 0.0496729815270419, "phrase": "software_architecture_reconstruction"}, {"score": 0.03822824368505865, "phrase": "design_patterns"}, {"score": 0.004633888966463624, "phrase": "software_maintenance"}, {"score": 0.0045556080393342165, "phrase": "expensive_activities"}, {"score": 0.004440648141548589, "phrase": "invested_time"}, {"score": 0.004347057700479576, "phrase": "engineering_activities"}, {"score": 0.0041657281535389615, "phrase": "target_system"}, {"score": 0.0038253590626087237, "phrase": "reverse_engineering"}, {"score": 0.0033374705499418377, "phrase": "different_levels"}, {"score": 0.0031845067058084613, "phrase": "overall_architecture"}, {"score": 0.0030776686414001964, "phrase": "programming_details"}, {"score": 0.0029116257477000617, "phrase": "eclipse_plug-in"}, {"score": 0.0028868862911135863, "phrase": "marple"}, {"score": 0.0028638216312087974, "phrase": "metrics"}, {"score": 0.002838033152426417, "phrase": "architecture_reconstruction_plug-"}, {"score": 0.002696366237523415, "phrase": "software_architecture_reconstruction_activities"}, {"score": 0.0026394405584281443, "phrase": "basic_elements"}, {"score": 0.002539978170928796, "phrase": "source_code"}, {"score": 0.0023824468367751365, "phrase": "eclipse_framework"}, {"score": 0.0023123057299992587, "phrase": "different_java_libraries"}, {"score": 0.0022926465161639633, "phrase": "data_access"}, {"score": 0.0022731540640627307, "phrase": "graph_management"}, {"score": 0.002159623311924437, "phrase": "design_pattern_detection_process"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Reverse engineering", " Software architecture reconstruction", " Design pattern detection", " Data mining techniques", " Metrics computations"], "paper_abstract": "It is well known that software maintenance and evolution are expensive activities, both in terms of invested time and money. Reverse engineering activities support the obtainment of abstractions and views from a target system that should help the engineers to maintain, evolve and eventually re-engineer it. Two important tasks pursued by reverse engineering are design pattern detection and software architecture reconstruction, whose main objectives are the identification of the design patterns that have been used in the implementation of a system as well as the generation of views placed at different levels of abstractions, which let the practitioners focus on the overall architecture of the system without worrying about the programming details it has been implemented with. In this context we propose an Eclipse plug-in called MARPLE (Metrics and Architecture Reconstruction Plug-in for Eclipse), which supports both the detection of design patterns and software architecture reconstruction activities through the use of basic elements and metrics that are mechanically extracted from the source code. The development of this platform is mainly based on the exploitation of the Eclipse framework and plug-ins as well as of different Java libraries for data access and graph management and visualization. In this paper we focus our attention on the design pattern detection process. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "A tool for design pattern detection and software architecture reconstruction", "paper_id": "WOS:000287269600007"}