{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "program_slicing"}, {"score": 0.004697308822154191, "phrase": "program_semantics"}, {"score": 0.004382913938427474, "phrase": "natural_extension"}, {"score": 0.0043183186953102805, "phrase": "non-terminating_programs"}, {"score": 0.004171259063201874, "phrase": "weiser"}, {"score": 0.0038727120021750973, "phrase": "accurate_characterisation"}, {"score": 0.003815607281455725, "phrase": "semantic_relationship"}, {"score": 0.003507504253087326, "phrase": "weiser's_original_one"}, {"score": 0.0034047882921717913, "phrase": "strict_standard_semantics"}, {"score": 0.0033379819706003885, "phrase": "'normal'_execution"}, {"score": 0.0032563083791198534, "phrase": "von_neumann_machine"}, {"score": 0.0029637093924781825, "phrase": "main_applications"}, {"score": 0.0029055323737809825, "phrase": "program_comprehension"}, {"score": 0.002710735995572145, "phrase": "finite_trajectories"}, {"score": 0.002336071138145897, "phrase": "important_property"}, {"score": 0.0022010965931147735, "phrase": "meaning-preserving_program_transformations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Program slicing", " Program semantics", " Non-termination", " Program dependence"], "paper_abstract": "We define a program semantics that is preserved by dependence-based slicing algorithms. It is a natural extension, to non-terminating programs, of the semantics introduced by Weiser (which only considered terminating ones) and, as such, is an accurate characterisation of the semantic relationship between a program and the slice produced by these algorithms. Unlike other approaches, apart from Weiser's original one, it is based on strict standard semantics which models the 'normal' execution of programs on a von Neumann machine and, thus, has the advantage of being intuitive. This is essential since one of the main applications of slicing is program comprehension. Although our semantics handles nontermination, it is defined wholly in terms of finite trajectories, without having to resort to complex, counter-intuitive, non-standard models of computation. As well as being simpler, unlike other approaches to this problem, Our semantics is substitutive. Substitutivity is an important property because it greatly enhances the ability to reason about correctness of meaning-preserving program transformations such as slicing. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "A trajectory-based strict semantics for program slicing", "paper_id": "WOS:000275624900003"}