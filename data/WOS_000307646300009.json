{"auto_keywords": [{"score": 0.02626289551256348, "phrase": "inductive_types"}, {"score": 0.00481495049065317, "phrase": "refining_inductive_types._dependently"}, {"score": 0.004635881163634672, "phrase": "sophisticated_properties"}, {"score": 0.004363058588000252, "phrase": "type_system"}, {"score": 0.004264923517966271, "phrase": "particular_use"}, {"score": 0.004200724305692705, "phrase": "dependently_typed_programming"}, {"score": 0.0041374874583908535, "phrase": "indexed_types"}, {"score": 0.003983512316698646, "phrase": "computationally_useful_information"}, {"score": 0.0038062581748678245, "phrase": "n-indexed_type"}, {"score": 0.003448705829033573, "phrase": "similar_ways"}, {"score": 0.0032951702142329357, "phrase": "purpose-specific_refinements"}, {"score": 0.0032209766681045365, "phrase": "ad_hoc_basis"}, {"score": 0.0028525124381208705, "phrase": "redundant_information"}, {"score": 0.0025453546203590364, "phrase": "inductive_characterisations"}, {"score": 0.002254003531073337, "phrase": "aforementioned_difficulties"}, {"score": 0.002203200914130907, "phrase": "ad_hoc_refinements"}, {"score": 0.0021049977753042253, "phrase": "standard_techniques"}], "paper_keywords": ["inductive types", " dependent types", " category theory", " fibrations", " refinement types"], "paper_abstract": "Dependently typed programming languages allow sophisticated properties of data to be expressed within the type system. Of particular use in dependently typed programming are indexed types that refine data by computationally useful information. For example, the N-indexed type of vectors refines lists by their lengths. Other data types may be refined in similar ways, but programmers must produce purpose-specific refinements on an ad hoc basis, developers must anticipate which refinements to include in libraries, and implementations must often store redundant information about data and their refinements. In this paper we show how to generically derive inductive characterisations of refinements of inductive types, and argue that these characterisations can alleviate some of the aforementioned difficulties associated with ad hoc refinements. Our characterisations also ensure that standard techniques for programming with and reasoning about inductive types are applicable to refinements, and that refinements can themselves be further refined.", "paper_title": "REFINING INDUCTIVE TYPES", "paper_id": "WOS:000307646300009"}