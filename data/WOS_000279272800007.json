{"auto_keywords": [{"score": 0.04813978804247332, "phrase": "experimental_data"}, {"score": 0.04771889479404187, "phrase": "discrete_data"}, {"score": 0.02606561207277808, "phrase": "ssd"}, {"score": 0.010579171598859037, "phrase": "inference_methods"}, {"score": 0.00481495049065317, "phrase": "time_series_data"}, {"score": 0.004749106104067268, "phrase": "increasing_number"}, {"score": 0.004662705558154439, "phrase": "biochemical_network_inference"}, {"score": 0.00443308765153716, "phrase": "dynamic_bayesian_network_methods"}, {"score": 0.004273196830970426, "phrase": "finite_dynamical_systems"}, {"score": 0.004195418010131832, "phrase": "boolean_networks"}, {"score": 0.004119049028319832, "phrase": "discrete_input"}, {"score": 0.0038981499110532307, "phrase": "computer_floating_point_numbers"}, {"score": 0.0036721416244816455, "phrase": "variable_dependencies"}, {"score": 0.0035887342563437935, "phrase": "significant_impact"}, {"score": 0.0034911335714333507, "phrase": "network_inference_algorithms"}, {"score": 0.0031845067058084583, "phrase": "dynamic_bayesian_network_framework"}, {"score": 0.0029586543333524904, "phrase": "discretization_algorithms"}, {"score": 0.002748775748298028, "phrase": "ssd._ssd"}, {"score": 0.002686284749214443, "phrase": "short_time_series_data"}, {"score": 0.0026011706232569316, "phrase": "optimal_number"}, {"score": 0.00257735013358606, "phrase": "discretization_states"}, {"score": 0.002286781334850213, "phrase": "dynamic_features"}, {"score": 0.002255431275670053, "phrase": "time_series"}], "paper_keywords": ["gene networks", " genetic algorithms", " linear algebra", " reverse engineering", " time discrete dynamical systems"], "paper_abstract": "An increasing number of algorithms for biochemical network inference from experimental data require discrete data as input. For example, dynamic Bayesian network methods and methods that use the framework of finite dynamical systems, such as Boolean networks, all take discrete input. Experimental data, however, are typically continuous and represented by computer floating point numbers. The translation from continuous to discrete data is crucial in preserving the variable dependencies and thus has a significant impact on the performance of the network inference algorithms. We compare the performance of two such algorithms that use discrete data using several different discretization algorithms. One of the inference methods uses a dynamic Bayesian network framework, the other-a time- and state-discrete dynamical system framework. The discretization algorithms are quantile, interval discretization, and a new algorithm introduced in this article, SSD. SSD is especially designed for short time series data and is capable of determining the optimal number of discretization states. The experiments show that both inference methods perform better with SSD than with the other methods. In addition, SSD is demonstrated to preserve the dynamic features of the time series, as well as to be robust to noise in the experimental data. A C++ implementation of SSD is available from the authors at http://polymath.vbi.vt.edu/discretization.", "paper_title": "Discretization of Time Series Data", "paper_id": "WOS:000279272800007"}