{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "speculative_multithreading"}, {"score": 0.004541377162789232, "phrase": "thread-level_automatic_parallelization_technique"}, {"score": 0.004010342699414496, "phrase": "different_thread"}, {"score": 0.0036198068824262464, "phrase": "cost_estimation"}, {"score": 0.003541182515693916, "phrase": "combined_run-time_effects"}, {"score": 0.0033397385936467204, "phrase": "resulting_performance"}, {"score": 0.003291188255149539, "phrase": "candidate_threads"}, {"score": 0.002905914725757534, "phrase": "additional_performance_benefits"}, {"score": 0.002863652837038965, "phrase": "multilevel_spawning"}, {"score": 0.0028220038404484196, "phrase": "loop_bodies"}, {"score": 0.0027809588979112393, "phrase": "loop_iterations"}, {"score": 0.0027205050618049303, "phrase": "inner_loops"}, {"score": 0.0026035011274172753, "phrase": "proper_thread_boundary"}, {"score": 0.0024915167458844914, "phrase": "loop_branch_instruction"}, {"score": 0.002437339565360659, "phrase": "invalid_spawning_threads"}, {"score": 0.0023843376332011936, "phrase": "core_resources"}, {"score": 0.0023496433751182162, "phrase": "experimental_results"}, {"score": 0.0022817585639886883, "phrase": "proposed_approach"}, {"score": 0.0022158306933307685, "phrase": "significant_increase"}, {"score": 0.0021518035978153878, "phrase": "olden_benchmarks"}, {"score": 0.0021049977753042253, "phrase": "performance_improvement"}], "paper_keywords": ["Speculative multithreading", " Thread partitioning", " Thread-level speculation", " Cost estimation", " Automatic parallelization"], "paper_abstract": "Speculative multithreading (SpMT) is a thread-level automatic parallelization technique, which partitions sequential programs into multithreads to be executed in parallel. This paper presents different thread partitioning strategies for nonloops and loops. For nonloops, we propose a cost estimation based on combined run-time effects of various speculation factors to predict the resulting performance of candidate threads to guide the thread partitioning. For loops, we parallelize all the profitable loops that can potentially offer additional performance benefits by multilevel spawning in loop bodies, loop iterations, and inner loops. Then we select a proper thread boundary located in the front of loop branch instruction to reduce invalid spawning threads that waste core resources. Experimental results show that the proposed approach can obtain a significant increase in speedup and Olden benchmarks reach a performance improvement of 6.62 % on average.", "paper_title": "A thread partitioning approach for speculative multithreading", "paper_id": "WOS:000331981900010"}