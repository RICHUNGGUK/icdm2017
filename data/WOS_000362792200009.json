{"auto_keywords": [{"score": 0.031653507648654204, "phrase": "ftss"}, {"score": 0.011072469769667383, "phrase": "pb"}, {"score": 0.010665546482400938, "phrase": "bb"}, {"score": 0.010084208507285817, "phrase": "overlapping_mechanism"}, {"score": 0.00481495049065317, "phrase": "real-time_tasks"}, {"score": 0.004784909348794283, "phrase": "multiple_earth-observation_satellites"}, {"score": 0.004681226806682058, "phrase": "important_role"}, {"score": 0.004594137808658537, "phrase": "multiple_earth-observing_satellites"}, {"score": 0.004536976344964643, "phrase": "emergent_scenarios"}, {"score": 0.004424768776701965, "phrase": "earthquake_areas"}, {"score": 0.004397151276300207, "phrase": "fault_tolerance"}, {"score": 0.004328856052035968, "phrase": "scheduling_approaches"}, {"score": 0.0042085753823566125, "phrase": "fault-tolerant_scheduling"}, {"score": 0.004053362743156545, "phrase": "novel_dynamic_fault-tolerant_scheduling_model"}, {"score": 0.003953068310598579, "phrase": "multiple_observation_satellites"}, {"score": 0.0038673406001234535, "phrase": "primary-backup_policy"}, {"score": 0.0036782824183282823, "phrase": "fault-tolerant_model"}, {"score": 0.003621111838638197, "phrase": "novel_fault-tolerant_satellite_scheduling_algorithm"}, {"score": 0.003598492288058048, "phrase": "ftss."}, {"score": 0.003553674679835236, "phrase": "resource_utilization"}, {"score": 0.0034984340449789745, "phrase": "overlapping_technology"}, {"score": 0.003154701855951328, "phrase": "time_windows"}, {"score": 0.002944465517142163, "phrase": "task_merging_strategies"}, {"score": 0.0026055251533586804, "phrase": "merging_strategies"}, {"score": 0.002477998427152547, "phrase": "system_schedulability"}, {"score": 0.0023939545398857518, "phrase": "extensive_experiments"}, {"score": 0.002371531125700046, "phrase": "real-world_satellite_parameters"}, {"score": 0.0023419588513908783, "phrase": "satellite_tool_kit"}, {"score": 0.0023273118300167032, "phrase": "stk"}, {"score": 0.002248366278757655, "phrase": "nmftss"}, {"score": 0.002234302459067969, "phrase": "noftss"}, {"score": 0.0022133711375320244, "phrase": "nmnoftss."}, {"score": 0.0021995257343837547, "phrase": "experimental_results"}, {"score": 0.0021517438495635634, "phrase": "scheduling_quality"}, {"score": 0.0021049977753042253, "phrase": "fault-tolerant_satellite_scheduling"}], "paper_keywords": ["Earth-observation satellite", " fault-tolerance", " scheduling", " primary-backup copy", " overlapping", " merging"], "paper_abstract": "Fault-tolerance plays an important role in improving the reliability of multiple earth-observing satellites, especially in emergent scenarios such as obtaining photographs on battlefields or earthquake areas. Fault tolerance can be implemented through scheduling approaches. Unfortunately, little attention has been paid to fault-tolerant scheduling on satellites. To address this issue, we propose a novel dynamic fault-tolerant scheduling model for real-time tasks running on multiple observation satellites. In this model, the primary-backup policy is employed to tolerate one satellite's permanent failure at one time instant. In the light of the fault-tolerant model, we develop a novel fault-tolerant satellite scheduling algorithm named FTSS. To improve the resource utilization, we apply the overlapping technology that includes primary-backup copy overlapping (i.e., PB overlapping) and backup-backup copy overlapping (i.e., BB overlapping). According to the satellites characterized with time windows for observations, we extensively analyze the overlapping mechanism on satellites. We integrate the overlapping mechanism with FTSS, which employs the task merging strategies including primary-backup copy merging (i.e., PB merging), backup-backup copy merging (i.e., BB merging) and primary-primary copy merging (i.e., PP merging). These merging strategies are used to decrease the number of tasks required to be executed, thereby enhancing system schedulability. To demonstrate the superiority of our FTSS, we conduct extensive experiments using the real-world satellite parameters supplied from the satellite tool kit or STK; we compare FTSS with the three baseline algorithms, namely, NMFTSS, NOFTSS, and NMNOFTSS. The experimental results indicate that FTSS efficiently improves the scheduling quality of others and is suitable for fault-tolerant satellite scheduling.", "paper_title": "Fault-Tolerant Scheduling for Real-Time Tasks on Multiple Earth-Observation Satellites", "paper_id": "WOS:000362792200009"}