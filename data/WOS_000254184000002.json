{"auto_keywords": [{"score": 0.04521023644037014, "phrase": "existing_rdbmss"}, {"score": 0.03905383994125658, "phrase": "pist"}, {"score": 0.00481495049065317, "phrase": "historical_spatio-temporal_point_data"}, {"score": 0.004697655699119423, "phrase": "current_relational_database_management_systems"}, {"score": 0.004583205112737672, "phrase": "spatio-temporal_data"}, {"score": 0.004221379262804442, "phrase": "practical_index"}, {"score": 0.0038561471948364723, "phrase": "historical_spatio-temporal_data_points"}, {"score": 0.0036703791815812328, "phrase": "spatial_and_temporal_components"}, {"score": 0.0035661605757956096, "phrase": "spatial_component"}, {"score": 0.0034935290662899488, "phrase": "formal_cost_model"}, {"score": 0.0034506596895901003, "phrase": "partitioning_strategy"}, {"score": 0.00338037259057507, "phrase": "optimal_space"}, {"score": 0.0033388871136347704, "phrase": "uniformly_distributed_data"}, {"score": 0.0032979090806670493, "phrase": "efficient_heuristic"}, {"score": 0.003257432325797907, "phrase": "arbitrary_data_distributions"}, {"score": 0.003204232566468624, "phrase": "temporal_component"}, {"score": 0.0030372426452745073, "phrase": "layer's_performance"}, {"score": 0.0029631248341951064, "phrase": "optimal_maximal_temporal_range"}, {"score": 0.002728847267539957, "phrase": "desirable_and_important_properties"}, {"score": 0.002684257009647205, "phrase": "concurrency_control"}, {"score": 0.002544296663333569, "phrase": "extensive_experiments"}, {"score": 0.0021845387990972543, "phrase": "unarguable_advantage"}, {"score": 0.0021049977753042253, "phrase": "virtually_any_existing_rdbms."}], "paper_keywords": ["relational database management system", " spatio-temporal data", " rdbms", " indexing"], "paper_abstract": "Despite pressing need, current relational database management systems (RDBMS) support for spatio-temporal data is limited and inadequate, and most existing spatio-temporal indices cannot be readily integrated into existing RDBMSs. This paper proposes a practical index for spatio-temporal (PIST) data, an indexing technique, rather than a new indexing structure, for historical spatio-temporal data points that can be fully integrated within existing RDBMSs. PIST separates the spatial and temporal components of the data. For the spatial component, we develop a formal cost model and a partitioning strategy that leads to an optimal space partitioning for uniformly distributed data and an efficient heuristic partitioning for arbitrary data distributions. For the temporal component of the data a B+-tree is used. We show that this layer's performance can be maximized if an optimal maximal temporal range is enforced, and we present a procedure to determine such an optimal value. Being fully mapped onto a RDBMS, desirable and important properties, such as concurrency control, are immediately inherited by PIST. Using ORACLE as our implementation platform we perform extensive experiments with both real and synthetic datasets comparing its performance against other RDBMS-based options, as well as the MV3R-tree. PIST outperforms the former by at least one order of magnitude, and is competitive or better with respect to the latter, with the unarguable advantage that it can readily used on top of virtually any existing RDBMS.", "paper_title": "PIST: An efficient and practical indexing technique for historical spatio-temporal point data", "paper_id": "WOS:000254184000002"}