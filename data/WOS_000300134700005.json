{"auto_keywords": [{"score": 0.034564065191684486, "phrase": "data_dependencies"}, {"score": 0.004815041309047626, "phrase": "dag"}, {"score": 0.004726052718910578, "phrase": "high_performance_computing"}, {"score": 0.004638788604042707, "phrase": "frenetic_development"}, {"score": 0.004553128404612054, "phrase": "current_architectures"}, {"score": 0.004386503433248535, "phrase": "current_state-of-the-art_programming_environments"}, {"score": 0.004096635798793164, "phrase": "tremendous_task"}, {"score": 0.00402094658848301, "phrase": "whole_scientific_computing_community"}, {"score": 0.003617616153730564, "phrase": "distributed_many-core_heterogeneous_architectures"}, {"score": 0.003399466007862412, "phrase": "direct_acyclic_graph"}, {"score": 0.0033159224502739247, "phrase": "labeled_edges"}, {"score": 0.0028917056916949744, "phrase": "totally_distributed_fashion"}, {"score": 0.0028206052780047424, "phrase": "computation_threads"}, {"score": 0.002521623057264411, "phrase": "data-locality_and_task_priority"}, {"score": 0.0022825131641434964, "phrase": "different_components"}, {"score": 0.0021987994275190314, "phrase": "linear_algebra_factorization"}, {"score": 0.0021580985506699105, "phrase": "use_case"}, {"score": 0.0021049977753042253, "phrase": "elsevier_e.v."}], "paper_keywords": ["HPC", " Micro-task DAG", " Heterogeneous architectures", " Architecture aware scheduling"], "paper_abstract": "The frenetic development of the current architectures places a strain on the current state-of-the-art programming environments. Harnessing the full potential of such architectures is a tremendous task for the whole scientific computing community. We present DAGuE a generic framework for architecture aware scheduling and management of micro-tasks on distributed many-core heterogeneous architectures. Applications we consider can be expressed as a Direct Acyclic Graph of tasks with labeled edges designating data dependencies. DAGs are represented in a compact, problem-size independent format that can be queried on-demand to discover data dependencies, in a totally distributed fashion. DAGuE assigns computation threads to the cores, overlaps communications and computations and uses a dynamic, fully-distributed scheduler based on cache awareness, data-locality and task priority. We demonstrate the efficiency of our approach, using several micro-benchmarks to analyze the performance of different components of he framework, and a linear algebra factorization as a use case. Published by Elsevier E.V.", "paper_title": "DAGuE: A generic distributed DAG engine for High Performance Computing", "paper_id": "WOS:000300134700005"}