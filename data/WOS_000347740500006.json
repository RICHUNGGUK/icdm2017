{"auto_keywords": [{"score": 0.03915697229912192, "phrase": "aop"}, {"score": 0.00481495049065317, "phrase": "dynamic_program_analysis"}, {"score": 0.004764859786310636, "phrase": "disl._dynamic_program_analysis"}, {"score": 0.004451676867747938, "phrase": "program_comprehension"}, {"score": 0.004382364826200616, "phrase": "performance_model_construction"}, {"score": 0.004246947739596565, "phrase": "java_platform"}, {"score": 0.0040942189695983185, "phrase": "aspect-oriented_programming"}, {"score": 0.003926359151817743, "phrase": "bytecode_instrumentation"}, {"score": 0.0038450179181069833, "phrase": "base_program_code"}, {"score": 0.0036873373225096624, "phrase": "rapid_tool_development"}, {"score": 0.0034628156490003775, "phrase": "mainstream_aop_languages-developers"}, {"score": 0.0033087142674708635, "phrase": "disl"}, {"score": 0.0032012284065895537, "phrase": "existing_bytecode_manipulation_libraries"}, {"score": 0.0031513240597392843, "phrase": "low-level_details"}, {"score": 0.003069867656852932, "phrase": "tool_development"}, {"score": 0.0028527866590859967, "phrase": "first_complete_presentation"}, {"score": 0.0025156683465194967, "phrase": "bytecode_manipulation_libraries"}, {"score": 0.0023499703712897293, "phrase": "disl_architecture"}, {"score": 0.002218299213266519, "phrase": "case_studies"}, {"score": 0.002195162304124588, "phrase": "successful_deployment"}, {"score": 0.002172266188075892, "phrase": "disl-based_dpa_tools"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Dynamic program analysis", " Bytecode instrumentation", " Aspect-oriented programming", " Domain-specific languages", " Java Virtual Machine"], "paper_abstract": "Dynamic program analysis (DPA) tools assist in many software engineering and development tasks, such as profiling, program comprehension, and performance model construction and calibration. On the Java platform, many DPA tools are implemented either using aspect-oriented programming (AOP), or rely on bytecode instrumentation to modify the base program code. The pointcut/advice model found in AOP enables rapid tool development, but does not allow expressing certain instrumentations due to limitations of mainstream AOP languages-developers thus use bytecode manipulation to gain more expressiveness and performance. However, while the existing bytecode manipulation libraries handle some low-level details, they still make tool development tedious and error-prone. Targeting this issue, we provide the first complete presentation of DiSL, an open-source instrumentation framework that reconciles the conciseness of the AOP pointcut/advice model and the expressiveness and performance achievable with bytecode manipulation libraries. Specifically, we extend our previous work to provide an overview of the DiSL architecture, advanced features, and the programming model. We also include case studies illustrating successful deployment of DiSL-based DPA tools. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Introduction to dynamic program analysis with DiSL", "paper_id": "WOS:000347740500006"}