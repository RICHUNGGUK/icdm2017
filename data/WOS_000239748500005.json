{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "synchronous_cooperative_threads"}, {"score": 0.0047283116134926645, "phrase": "new_methods"}, {"score": 0.00429828390000229, "phrase": "synchronous_model"}, {"score": 0.004201774694043468, "phrase": "cooperative_threads"}, {"score": 0.004144908086646161, "phrase": "synchronous_rounds"}, {"score": 0.003978866233891427, "phrase": "compositional_static_analyses"}, {"score": 0.003378385493203297, "phrase": "first-order_functional_languages"}, {"score": 0.0032725712584012953, "phrase": "standard_termination_techniques"}, {"score": 0.0030847461428168614, "phrase": "computed_values"}, {"score": 0.0028293966058473476, "phrase": "explicit_polynomial"}, {"score": 0.0026069623057065664, "phrase": "second_contribution"}, {"score": 0.002548331088496964, "phrase": "virtual_machine"}, {"score": 0.0025137856138000014, "phrase": "related_bytecode"}, {"score": 0.002468450551616404, "phrase": "precise_description"}, {"score": 0.0022640009579466924, "phrase": "suitable_control_flow_analysis"}, {"score": 0.002203016940021265, "phrase": "static_analyses"}, {"score": 0.0021830553825770097, "phrase": "resource_control"}, {"score": 0.0021632743048552536, "phrase": "bytecode_level"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["synchronous programming", " resource bound", " termination", " quasi-interpretations", " virtual machine", " bytecode verification"], "paper_abstract": "We develop new methods to statically bound the resources needed for the execution of systems of concurrent, interactive threads. Our study is concerned with a synchronous model of interaction based on cooperative threads whose execution proceeds in synchronous rounds called instants. Our contribution is a system of compositional static analyses to guarantee that each instant terminates and to bound the size of the values computed by the system as a function of the size of its parameters at the beginning of the instant. Our method generalises an approach designed for first-order functional languages that relies on a combination of standard termination techniques for term rewriting systems and an analysis of the size of the computed values based on the notion of quasi-interpretation. We show that these two methods can be combined to obtain an explicit polynomial bound on the resources needed for the execution of the system during an instant. As a second contribution, we introduce a virtual machine and a related bytecode thus producing a precise description of the resources needed for the execution of a system. In this context, we present a suitable control flow analysis that allows to formulate the static analyses for resource control at bytecode level. (C) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Resource control for synchronous cooperative threads", "paper_id": "WOS:000239748500005"}