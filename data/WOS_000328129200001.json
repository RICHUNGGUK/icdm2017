{"auto_keywords": [{"score": 0.048488957284440144, "phrase": "dynamic_sandboxing"}, {"score": 0.047972584782519846, "phrase": "linux"}, {"score": 0.004761132425263795, "phrase": "enforcing_security_policies"}, {"score": 0.0045262653692203815, "phrase": "increasing_availability"}, {"score": 0.004475659507646842, "phrase": "cloud_computing_and_scientific_super_computers"}, {"score": 0.004254814649568355, "phrase": "public_or_shared_resources"}, {"score": 0.003717528595128948, "phrase": "important_security_concerns"}, {"score": 0.0034359094594153304, "phrase": "prime_use_case"}, {"score": 0.003247868216333148, "phrase": "single_statistician"}, {"score": 0.0031577303835881964, "phrase": "local_machine"}, {"score": 0.003104849179057156, "phrase": "interactive_console"}, {"score": 0.003035711716881469, "phrase": "execution_environment"}, {"score": 0.002853396755102163, "phrase": "malicious_behavior"}, {"score": 0.0028214413724451442, "phrase": "excessive_use"}, {"score": 0.0027898428590137515, "phrase": "hardware_resources"}, {"score": 0.002743105561254975, "phrase": "shared_environment"}, {"score": 0.00266693888510356, "phrase": "r_process"}, {"score": 0.00257831812581194, "phrase": "complex_problem"}, {"score": 0.0024786330057813204, "phrase": "potential_issues"}, {"score": 0.0023827927890399357, "phrase": "public_web_services"}, {"score": 0.0023035922232490106, "phrase": "rapparmor_package"}, {"score": 0.0021049977753042253, "phrase": "operating_system"}], "paper_keywords": ["R", " security", " Linux", " sandbox", " AppArmor"], "paper_abstract": "The increasing availability of cloud computing and scientific super computers brings great potential for making R accessible through public or shared resources. This allows us to efficiently run code requiring lots of cycles and memory, or embed R functionality into, e.g., systems and web services. However some important security concerns need to be addressed before this can be put in production. The prime use case in the design of R has always been a single statistician running R on the local machine through the interactive console. Therefore the execution environment of R is entirely unrestricted, which could result in malicious behavior or excessive use of hardware resources in a shared environment. Properly securing an R process turns out to be a complex problem. We describe various approaches and illustrate potential issues using some of our personal experiences in hosting public web services. Finally we introduce the RAppArmor package: a Linux based reference implementation for dynamic sandboxing in R on the level of the operating system.", "paper_title": "The RAppArmor Package: Enforcing Security Policies in R Using Dynamic Sandboxing on Linux", "paper_id": "WOS:000328129200001"}