{"auto_keywords": [{"score": 0.04777281030275487, "phrase": "ced"}, {"score": 0.01061237167920707, "phrase": "asynchronous_burst-mode_machines"}, {"score": 0.009416148862251545, "phrase": "abmm"}, {"score": 0.009159646283257404, "phrase": "synchronous_ced_methods"}, {"score": 0.008855528166425375, "phrase": "effective_ced"}, {"score": 0.008125829281270583, "phrase": "redundant_logic"}, {"score": 0.004611554879923759, "phrase": "concurrent_error_detection"}, {"score": 0.004322387850491499, "phrase": "global_clock"}, {"score": 0.004230068512904886, "phrase": "additional_circuitry"}, {"score": 0.003952513974962462, "phrase": "synchronization_method"}, {"score": 0.003750529559133893, "phrase": "false_alarms"}, {"score": 0.003625347557965931, "phrase": "hazard-free_operation"}, {"score": 0.003591935475356008, "phrase": "correct_interaction"}, {"score": 0.0034506596895901003, "phrase": "single_event_transients"}, {"score": 0.0033457659530207306, "phrase": "logic_discrepancies"}, {"score": 0.0030686679245324837, "phrase": "hardware_solutions"}, {"score": 0.0030123335878664064, "phrase": "hazard_detection"}, {"score": 0.0028582571226324293, "phrase": "first_method"}, {"score": 0.0028406735411886388, "phrase": "duplication"}, {"score": 0.002754253119972439, "phrase": "well-known_duplication_method"}, {"score": 0.002687022487756706, "phrase": "second_method"}, {"score": 0.002565345470805401, "phrase": "implementation_cost"}, {"score": 0.0025027144548626975, "phrase": "duplicate_circuit"}, {"score": 0.002404175869425017, "phrase": "third_method"}, {"score": 0.0022740957662393223, "phrase": "check_symbols"}, {"score": 0.00224615642504509, "phrase": "berger_code"}, {"score": 0.0021777973668394737, "phrase": "berger_code-based_ced"}, {"score": 0.002157697367447098, "phrase": "lowest_area_overhead"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": ["concurrent error detection", " asynchronous burst-mode machines", " error-detecting codes", " Berger code"], "paper_abstract": "Asynchronous controllers exhibit various characteristics that limit the effectiveness and applicability of the Concurrent Error Detection (CED) methods developed for their synchronous counterparts. Asynchronous Burst-Mode Machines (ABMMs), for example, do not have a global clock to synchronize the ABMM with the additional circuitry that is typically used by synchronous CED methods (for example, duplication). Therefore, performing effective CED in ABMMs requires a synchronization method that will appropriately enable the checker (for example, comparator) in order to avoid false alarms. Also, ABMMs contain redundant logic, which guarantees the hazard-free operation required for correct interaction between the circuit and its environment. Redundant logic, however, allows some single event transients to manifest themselves only as hazards but not as logic discrepancies. Therefore, performing effective CED in ABMMs requires the ability to detect hazards with which synchronous CED methods are not concerned. In this work, we first devise hardware solutions for performing checking synchronization and hazard detection. We then demonstrate how these solutions enable the development of three complete CED methods for ABMMs. The first method (Duplication-based CED) is an adaptation of the well-known duplication method within the context of ABMMs. The second method (Transition-Trigge red CED) is a variation of duplication wherein the implementation cost is reduced by allowing hazards in the duplicate circuit. In contrast to these two methods, which are nonintrusive, the third method (Berger code-based CED) is intrusive since it requires reencoding of the ABMM with check symbols based on the Berger code. Although this intrusiveness may slightly impact performance, Berger code-based CED incurs the lowest area overhead among the three methods, as indicated through experimental results.", "paper_title": "Concurrent error detection methods for asynchronous burst-mode machines", "paper_id": "WOS:000246477600006"}