{"auto_keywords": [{"score": 0.039027278312474004, "phrase": "reduction_trees"}, {"score": 0.00481495049065317, "phrase": "multi-core_clusters"}, {"score": 0.004730458558634266, "phrase": "new_qr_factorization_algorithm"}, {"score": 0.004647442352794694, "phrase": "massively_parallel_platforms"}, {"score": 0.004620093797504386, "phrase": "parallel_distributed_nodes"}, {"score": 0.004525629293824217, "phrase": "multi-core_processor"}, {"score": 0.004406994912939125, "phrase": "foreseeable_future"}, {"score": 0.00438105507792004, "phrase": "high-performance_computing"}, {"score": 0.004266194308906261, "phrase": "tile_algorithms"}, {"score": 0.004216112320418982, "phrase": "good_data_locality"}, {"score": 0.004178935413340453, "phrase": "sequential_kernels"}, {"score": 0.004045391554481355, "phrase": "low_number"}, {"score": 0.00387011040370557, "phrase": "fine_granularity"}, {"score": 0.0037909219941547373, "phrase": "tile_algorithm"}, {"score": 0.0035210572541244664, "phrase": "inter-processor_communications"}, {"score": 0.0033584796908285894, "phrase": "hierarchical_trees"}, {"score": 0.0033190180867511605, "phrase": "\"inter-node\"_tree"}, {"score": 0.0032510690712452147, "phrase": "intra-node\"_trees"}, {"score": 0.0032128654564385494, "phrase": "intra-node_level"}, {"score": 0.003165739628969694, "phrase": "hierarchical_tree"}, {"score": 0.003082744677284209, "phrase": "ts"}, {"score": 0.0029489527539649737, "phrase": "decoupled_highly_parallel_inter-node_reductions"}, {"score": 0.0028293966058473476, "phrase": "local_reductions"}, {"score": 0.0028127163745564777, "phrase": "global_reductions"}, {"score": 0.002690701018745317, "phrase": "different_distribution_layouts"}, {"score": 0.002573965014439041, "phrase": "numerical_experiments"}, {"score": 0.0025361866386341796, "phrase": "multi-core_nodes"}, {"score": 0.0022665781920241245, "phrase": "new_algorithm"}, {"score": 0.002246553137021003, "phrase": "dague_scheduling_tool"}, {"score": 0.0022267046070925446, "phrase": "currently_available_qr_factorization_software"}, {"score": 0.0021682027434117095, "phrase": "new_advance"}, {"score": 0.002155412043665635, "phrase": "numerical_linear_algebra"}, {"score": 0.002142696637011647, "phrase": "petascale_and_exascale_platforms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["QR factorization", " Numerical linear algebra", " Hierarchical architecture", " Distributed memory", " Cluster", " Multi-core"], "paper_abstract": "This paper describes a new QR factorization algorithm which is especially designed for massively parallel platforms combining parallel distributed nodes, where a node is a multi-core processor. These platforms represent the present and the foreseeable future of high-performance computing. Our new QR factorization algorithm falls in the category of the tile algorithms which naturally enables good data locality for the sequential kernels executed by the cores (high sequential performance), low number of messages in a parallel distributed setting (small latency term), and fine granularity (high parallelism). Each tile algorithm is uniquely characterized by its sequence of reduction trees. In the context of a cluster of nodes, in order to minimize the number of inter-processor communications (aka, \"communication-avoiding\"), it is natural to consider hierarchical trees composed of an \"inter-node\" tree which acts on top of \"intra-node\" trees. At the intra-node level, we propose a hierarchical tree made of three levels: (0) \"TS level\" for cache-friendliness, (1) \"low-level\" for decoupled highly parallel inter-node reductions, (2) \"domino level\" to efficiently resolve interactions between local reductions and global reductions. Our hierarchical algorithm and its implementation are flexible and modular, and can accommodate several kernel types, different distribution layouts, and a variety of reduction trees at all levels, both inter-node and intra-node. Numerical experiments on a cluster of multi-core nodes (i) confirm that each of the four levels of our hierarchical tree contributes to build up performance and (ii) build insights on how these levels influence performance and interact within each other. Our implementation of the new algorithm with the DAGuE scheduling tool significantly outperforms currently available QR factorization software for all matrix shapes, thereby bringing a new advance in numerical linear algebra for petascale and exascale platforms. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Hierarchical QR factorization algorithms for multi-core clusters", "paper_id": "WOS:000318386800003"}