{"auto_keywords": [{"score": 0.04931727328027492, "phrase": "multi-core_heterogeneous_systems"}, {"score": 0.04532290052973521, "phrase": "graphics-processing_units"}, {"score": 0.0446305392042061, "phrase": "field-programmable_gate_arrays"}, {"score": 0.00481495049065317, "phrase": "heuristic_for_automatic_function_specialization"}, {"score": 0.004662913362513954, "phrase": "high-performance_computing_systems"}, {"score": 0.00455202992136173, "phrase": "multi-core_processors"}, {"score": 0.004134137523409649, "phrase": "significant_application_design_complexity"}, {"score": 0.003876996400581697, "phrase": "untapped_performance_potential"}, {"score": 0.0038152404172111815, "phrase": "application_designers"}, {"score": 0.0034647524666821614, "phrase": "device-specialized_implementations"}, {"score": 0.0033822643082593285, "phrase": "heterogeneous_resource"}, {"score": 0.0029034358982402346, "phrase": "racecar_heuristic"}, {"score": 0.002636489396049042, "phrase": "implementation_alternatives"}, {"score": 0.0025736694380861604, "phrase": "different_algorithms"}, {"score": 0.0025326211341475903, "phrase": "parallelization_strategies"}, {"score": 0.002472269923319476, "phrase": "work_distributions"}, {"score": 0.002432834929068545, "phrase": "experimental_results"}, {"score": 0.0023940274498526213, "phrase": "racecar-specialized_implementations"}, {"score": 0.002191366809047192, "phrase": "single_cpu_thread"}, {"score": 0.0021049977753042253, "phrase": "multiple_cores"}], "paper_keywords": ["Algorithms", " Design", " Measurement", " Performance", " elastic computing", " heterogeneous", " optimization", " RACECAR", " speedup"], "paper_abstract": "High-performance computing systems increasingly combine multi-core processors and heterogeneous resources such as graphics-processing units and field-programmable gate arrays. However, significant application design complexity for such systems has often led to untapped performance potential. Application designers targeting such systems currently must determine how to parallelize computation, create device-specialized implementations for each heterogeneous resource, and determine how to partition work for each resource. In this paper, we present the RACECAR heuristic to automate the optimization of applications for multi-core heterogeneous systems by automatically exploring implementation alternatives that include different algorithms, parallelization strategies, and work distributions. Experimental results show RACECAR-specialized implementations achieve speedups up to 117x and average 11x compared to a single CPU thread when parallelizing computation across multiple cores, graphics-processing units, and field-programmable gate arrays.", "paper_title": "RACECAR: A Heuristic for Automatic Function Specialization on Multi-core Heterogeneous Systems", "paper_id": "WOS:000309350200049"}