{"auto_keywords": [{"score": 0.04848034369451246, "phrase": "cia"}, {"score": 0.04592347997333925, "phrase": "proposed_changes"}, {"score": 0.00481495049065317, "phrase": "water_wave_propagation_phenomenon"}, {"score": 0.004760765880314089, "phrase": "software_change_impact_analysis"}, {"score": 0.004689462599037994, "phrase": "impact_analysis"}, {"score": 0.004584495834677719, "phrase": "key_technique"}, {"score": 0.0045158206186680224, "phrase": "potential_effects"}, {"score": 0.004464987136420614, "phrase": "software_changes"}, {"score": 0.004315879542755464, "phrase": "cia_techniques"}, {"score": 0.004283423748543866, "phrase": "reachability_analysis"}, {"score": 0.0042351951710402425, "phrase": "graphical_representation"}, {"score": 0.004047628461126961, "phrase": "large_set"}, {"score": 0.0040171817997972335, "phrase": "potentially_impacted_elements"}, {"score": 0.003882970272082245, "phrase": "later_analysis"}, {"score": 0.0034539685987677376, "phrase": "new_call_graph-based_cia_technique"}, {"score": 0.003363830908814182, "phrase": "multiple_proposed_changes"}, {"score": 0.003251376167695528, "phrase": "impact_results"}, {"score": 0.003142668996712078, "phrase": "natural_phenomenon"}, {"score": 0.003049086085585051, "phrase": "cia_process"}, {"score": 0.0029694830678462787, "phrase": "water_wave_propagation"}, {"score": 0.0027119634978446895, "phrase": "ripple_effects"}, {"score": 0.0026915366885986586, "phrase": "propagation_analysis"}, {"score": 0.0026411384812121503, "phrase": "empirical_evaluations"}, {"score": 0.002486103638234488, "phrase": "better_impact_results"}, {"score": 0.002402921062033032, "phrase": "eclectic_way"}, {"score": 0.0023848164282879885, "phrase": "practical_use"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Water wave propagation", " Change impact analysis", " Core", " Call graph", " Change set", " Impact set"], "paper_abstract": "Software change impact analysis (CIA) is a key technique to identify the potential effects caused by software changes. Given the proposed changes, most commonly used CIA techniques apply reachability analysis on the graphical representation of the software to identify their effects. They often compute a large set of potentially impacted elements with many false-positives, which will waste resource in later analysis. In addition, these techniques do not consider the interference among the proposed changes, which does exist in practice. Faced with these problems, this paper proposed a new call graph-based CIA technique, which takes the interference among multiple proposed changes into account to improve the precision of the impact results. Our proposed CIA is inspired by a natural phenomenon \"water wave propagation\". The CIA process is similar to the process of water wave propagation. First we identify the \"core\" (a special set of methods) generated by the proposed changes. Then we compute the ripple effects through propagation analysis on this core. Empirical evaluations on two real-world software projects demonstrate the effectiveness of our CIA approach. The results show that our CIA technique can predict better impact results when more changes are known, and provide an eclectic way for practical use. Moreover, it can effectively remove the false-positives at the cost of missing a few false-negatives when compared to traditional (call graph based) CIA techniques. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Using water wave propagation phenomenon to study software change impact analysis", "paper_id": "WOS:000316978800005"}