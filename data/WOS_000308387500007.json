{"auto_keywords": [{"score": 0.048929739366992464, "phrase": "dependency_links"}, {"score": 0.035680674196695655, "phrase": "development_objects"}, {"score": 0.01706897295555701, "phrase": "proposed_method"}, {"score": 0.0080352952559763, "phrase": "domain_models"}, {"score": 0.004816900060778353, "phrase": "domain"}, {"score": 0.004800348331871368, "phrase": "model-driven_software_engineering"}, {"score": 0.004642604455537883, "phrase": "dependency_management"}, {"score": 0.004586531354697466, "phrase": "labor_intensity"}, {"score": 0.004476399615305783, "phrase": "dependency_relations"}, {"score": 0.004329254684453746, "phrase": "distributed_development"}, {"score": 0.004199670318539555, "phrase": "wide_variety"}, {"score": 0.004073948834684065, "phrase": "different_interpretations"}, {"score": 0.004049257973730703, "phrase": "software_requirements"}, {"score": 0.004000322474812552, "phrase": "different_terminologies"}, {"score": 0.003916098498242888, "phrase": "change_impact"}, {"score": 0.003764341156823266, "phrase": "change_management"}, {"score": 0.0037415196765275376, "phrase": "geographically_distributed_software_engineering"}, {"score": 0.0034465894339710864, "phrase": "common_reference_point"}, {"score": 0.003333182329983738, "phrase": "dependency_discovery"}, {"score": 0.0029783256772952073, "phrase": "product_traceability"}, {"score": 0.0028802818629647614, "phrase": "laboratory-based_randomized_experiment"}, {"score": 0.002828166765606611, "phrase": "six_participants"}, {"score": 0.0027939468213968683, "phrase": "implemented_prototype"}, {"score": 0.002751751956416832, "phrase": "simulated_tasks"}, {"score": 0.0024437176947749014, "phrase": "fourteen_percent_more_dependency_links"}, {"score": 0.002406799309495983, "phrase": "comparable_tools"}, {"score": 0.0023133947578542, "phrase": "whole_development_life-cycle"}, {"score": 0.0022715134070706174, "phrase": "multi-site_software_engineering"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Information systems development", " Domain model-based information system design", " Dependency management", " Software engineering", " Randomized experiment"], "paper_abstract": "Context: Dependency management often suffers from labor intensity and complexity in creating and maintaining the dependency relations in practice. This is even more critical in a distributed development, in which developers are geographically distributed and a wide variety of tools is used. In those settings, different interpretations of software requirements or usage of different terminologies make it challenging to predict the change impact. Objective: is (a) to describe a method facilitating change management in geographically distributed software engineering by effective discovery and establishment of dependency links using domain models; (b) to evaluate the effectiveness of the proposed method. Method: A domain model, providing a common reference point, is used to manage development objects and to automatically support dependency discovery. We propose to associate (annotate) development objects with the concepts from the model. These associations are used to compute dependency among development objects, and are stepwise refined to direct dependency links (i.e. enabling product traceability). To evaluate the method, we conducted a laboratory-based randomized experiment on two real cases. Six participants were using an implemented prototype and two comparable tools to perform simulated tasks. Results: In the paper we elaborate on the proposed method discussing its functional steps. Results from the experiment show that the method can be effectively used to assist in discovery of dependency links. Users have discovered on average fourteen percent more dependency links than by using the comparable tools. Conclusions: The proposed method advocates the use of domain models throughout the whole development life-cycle and is apt to facilitate multi-site software engineering. The experimental study and results suggest that the method is effective in the discovery of dependencies among development objects. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Domain model-driven software engineering: A method for discovery of dependency links", "paper_id": "WOS:000308387500007"}