{"auto_keywords": [{"score": 0.04779659772491506, "phrase": "concurrent_systems"}, {"score": 0.00481495049065317, "phrase": "assume-guarantee_reasoning"}, {"score": 0.00474827840031692, "phrase": "learning-based_automated_assume-guarantee_reasoning_paradigm"}, {"score": 0.0046176782475198085, "phrase": "compositional_verification"}, {"score": 0.004072851768196397, "phrase": "assume-guarantee_rules"}, {"score": 0.0038651944848734133, "phrase": "counterexample_multiple_strings"}, {"score": 0.0037587915908689497, "phrase": "single_one"}, {"score": 0.0037196472104696157, "phrase": "previous_approaches"}, {"score": 0.0036809089768350496, "phrase": "small_improvement"}, {"score": 0.0036553070575015344, "phrase": "candidate_queries"}, {"score": 0.0035299344877334385, "phrase": "existing_instances"}, {"score": 0.003456777366713296, "phrase": "learning_algorithm"}, {"score": 0.0032462487283717546, "phrase": "internal_structure"}, {"score": 0.002395571076685383, "phrase": "trace_containment"}, {"score": 0.0023540798554571724, "phrase": "finite_state_machines"}, {"score": 0.002289180040240783, "phrase": "comfort_tool"}, {"score": 0.002249527353528286, "phrase": "real-life_examples"}, {"score": 0.002202847728425357, "phrase": "average_speedup"}, {"score": 0.0021496083700137305, "phrase": "assume-guarantee_rule"}, {"score": 0.0021049977753042253, "phrase": "activated_optimizations"}], "paper_keywords": ["software verification", " compositionality", " assume-guarantee", " learning"], "paper_abstract": "The learning-based automated Assume-Guarantee reasoning paradigm has been applied in the last few years for the compositional verification of concurrent systems. Specifically, L* has been used for learning the assumption, based on strings derived from counterexamples, which are given to it by a model-checker that attempts to verify the Assume-Guarantee rules. We suggest three optimizations to this paradigm. First, we derive from each counterexample multiple strings to L*, rather than a single one as in previous approaches. This small improvement saves candidate queries and hence model-checking runs. Second, we observe that in existing instances of this paradigm, the learning algorithm is coupled weakly with the teacher. Thus, the learner completely ignores the details of the internal structure of the system and specification being verified, which are available already to the teacher. We suggest an optimization that uses this information in order to avoid many unnecessary membership queries (it reduces the number of such queries by more than an order of magnitude). Finally, we develop a method for minimizing the alphabet used by the assumption, which reduces the size of the assumption and the number of queries required to construct it. We present these three optimizations in the context of verifying trace containment for concurrent systems composed of finite state machines. We have implemented our approach in the COMFORT tool, and experimented with real-life examples. Our results exhibit an average speedup of between 4 to 11 times, depending on the Assume-Guarantee rule used and the set of activated optimizations.", "paper_title": "Three optimizations for Assume-Guarantee reasoning with L*", "paper_id": "WOS:000256089600005"}