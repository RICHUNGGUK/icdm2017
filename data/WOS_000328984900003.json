{"auto_keywords": [{"score": 0.03731166778906187, "phrase": "possible_conflicts"}, {"score": 0.00481495049065317, "phrase": "contextual_adaptation_behavior_composition"}, {"score": 0.004745260932479212, "phrase": "software_systems"}, {"score": 0.004631335513513859, "phrase": "changing_and_complex_environments"}, {"score": 0.004411588377842043, "phrase": "changing_environments"}, {"score": 0.0043477114072437316, "phrase": "multiple_coexisting_adaptation_goals"}, {"score": 0.004202223763361474, "phrase": "adaptation_framework"}, {"score": 0.004101281992566145, "phrase": "multiple_concerns"}, {"score": 0.004041879818641576, "phrase": "reusable_and_composable_adaptation_modules"}, {"score": 0.0037942165191367366, "phrase": "system_global_adaptation_behavior"}, {"score": 0.003685067218455088, "phrase": "adaptation_plans"}, {"score": 0.0036493838225192883, "phrase": "multiple_adaptation_modules"}, {"score": 0.0035100601949451028, "phrase": "multiple_adaptation_plans"}, {"score": 0.0034423989472667756, "phrase": "conflict_detection"}, {"score": 0.003310951184365485, "phrase": "framework_design_principles"}, {"score": 0.0032629585038738856, "phrase": "supporting_middleware"}, {"score": 0.0031690434364310435, "phrase": "service-oriented_component_model"}, {"score": 0.0030628762739398855, "phrase": "individually_deployable_adaptation_components"}, {"score": 0.0028471655497661528, "phrase": "applicable_adaptation_components"}, {"score": 0.0027651847105654363, "phrase": "multiple_adaptation_concerns"}, {"score": 0.0026337482179592422, "phrase": "context_conditions"}, {"score": 0.00247215300812495, "phrase": "new_features"}, {"score": 0.0024481856932959227, "phrase": "case_studies"}, {"score": 0.002424450174817922, "phrase": "experiment_results"}, {"score": 0.002366110899738696, "phrase": "significant_advantage"}, {"score": 0.0023431692392929353, "phrase": "traditional_approaches"}, {"score": 0.002242647404307089, "phrase": "adaptation_modules"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["dynamic behavior composition", " architecture-based adaptation", " context-awareness", " service-oriented middleware"], "paper_abstract": "As software systems today increasingly operate in changing and complex environments, they are expected to dynamically adapt to the changing environments sometimes with multiple coexisting adaptation goals. In this paper, an adaptation framework to facilitate adaptation with multiple concerns by using reusable and composable adaptation modules is proposed. Rather than using one-size-fits-all approach, in this framework, system global adaptation behavior is generated by contextually fusing adaptation plans from multiple adaptation modules. In order to handle possible conflicts from multiple adaptation plans, supports for conflict detection and resolution are provided. Following the framework design principles, a supporting middleware is implemented based on the service-oriented component model. Adaptation behaviors are realized as individually deployable adaptation components. A strategy called normalized context matching degree is proposed to rate and select applicable adaptation components. Possible conflicts in dealing with multiple adaptation concerns are resolved by using the semantics of actuators and context conditions. This middleware is also designed to be readily reconfigurable to support new features. Case studies and experiment results show that our framework exhibits significant advantage over traditional approaches in light of flexibility and reusability of the adaptation modules, with little complexity and performance overhead. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Transformer: an adaptation framework supporting contextual adaptation behavior composition", "paper_id": "WOS:000328984900003"}