{"auto_keywords": [{"score": 0.04067851598209213, "phrase": "base_graph"}, {"score": 0.03499168655962707, "phrase": "processing_elements"}, {"score": 0.00481495049065317, "phrase": "subgraph_isomorphism"}, {"score": 0.00471811808206897, "phrase": "high_performance_computer_processor"}, {"score": 0.004499647408293102, "phrase": "instruction_scheduling_algorithm"}, {"score": 0.0042912493195237725, "phrase": "directed_acyclic_graph"}, {"score": 0.003249966782844541, "phrase": "high_performance_computer_architecture"}, {"score": 0.0027060037347363987, "phrase": "greedy_list_scheduling_strategy"}, {"score": 0.0026157259734105, "phrase": "spec_and_mediabench_suites"}, {"score": 0.0025113494092413604, "phrase": "average_operation_per_cycle"}, {"score": 0.0021049977753042253, "phrase": "list_scheduling_algorithm"}], "paper_keywords": ["instruction scheduling", " subgraph isomorphism", " 2D-VLIW"], "paper_abstract": "This paper(1) presents an instruction scheduling algorithm based on the Subgraph Isomorphism Problem. Given a Directed Acyclic Graph (DAG) G(1), our algorithm looks for a subgraph G'(2) in a base graph G(2), such that G'(2) is isomorphic to G(1). The base graph G(2) represents the arrangement of the processing elements of a high performance computer architecture named 2D-VLIW and G'(2) is the set of those processing elements required to execute operations in G(1). We have compared this algorithm with a greedy list scheduling strategy using programs of the SPEC and MediaBench suites. In our experiments, the average Operation Per Cycle (OPC) and Operations Per Instruction (OPI) achieved by our algorithm are 1.45 and 1.40 times better than the OPC and OPI obtained by the list scheduling algorithm.", "paper_title": "Instruction Scheduling Based on Subgraph Isomorphism for a High Performance Computer Processor", "paper_id": "WOS:000264754900005"}