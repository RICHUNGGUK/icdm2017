{"auto_keywords": [{"score": 0.04391537553051007, "phrase": "mutation_operators"}, {"score": 0.00481495049065317, "phrase": "mutation_analysis"}, {"score": 0.00473509474652851, "phrase": "testing_coverage_criteria"}, {"score": 0.004687815426832587, "phrase": "empirical_assessment"}, {"score": 0.004656557209439822, "phrase": "test_techniques"}, {"score": 0.004610058444728656, "phrase": "important_role"}, {"score": 0.004579316323166273, "phrase": "software_testing_research"}, {"score": 0.004458375125223899, "phrase": "subject_software"}, {"score": 0.004282900153232246, "phrase": "possible_mutants"}, {"score": 0.003978866233891427, "phrase": "statistical_analysis"}, {"score": 0.003952316497572257, "phrase": "fault_detection_effectiveness"}, {"score": 0.0039259432210911925, "phrase": "test_suites"}, {"score": 0.003809416146761322, "phrase": "empirical_results"}, {"score": 0.003659389341948856, "phrase": "data_flow_criteria"}, {"score": 0.0034223147241452547, "phrase": "important_issue"}, {"score": 0.003376769321692139, "phrase": "middle_size_industrial_program"}, {"score": 0.003343007152920687, "phrase": "comprehensive_pool"}, {"score": 0.0033206861608068025, "phrase": "test_cases"}, {"score": 0.0032985137109323827, "phrase": "known_faults"}, {"score": 0.003115908199991072, "phrase": "investigated_criteria"}, {"score": 0.003003157931633302, "phrase": "trustworthy_results"}, {"score": 0.0029237213120317227, "phrase": "detection_effectiveness"}, {"score": 0.0029041917003677234, "phrase": "real_faults"}, {"score": 0.0028179057379595124, "phrase": "relative_cost"}, {"score": 0.0027710786693798534, "phrase": "above-mentioned_criteria"}, {"score": 0.002743355746391485, "phrase": "fundamental_questions"}, {"score": 0.0026977641744883826, "phrase": "fault_detection"}, {"score": 0.0026797398345997114, "phrase": "test_suite_size"}, {"score": 0.0025740882809779913, "phrase": "previous_studies"}, {"score": 0.002522830979240594, "phrase": "large_number"}, {"score": 0.0024396547357855777, "phrase": "random_variation"}, {"score": 0.002367137788925062, "phrase": "different_analysis_approach"}, {"score": 0.0023122257999320527, "phrase": "published_studies"}, {"score": 0.0022967713922705, "phrase": "plausible_reasons"}, {"score": 0.0021549990311897347, "phrase": "mutation_analysis_process"}, {"score": 0.002140593237903078, "phrase": "possible_differences"}, {"score": 0.0021262835396323623, "phrase": "fault_detection_probabilities"}, {"score": 0.0021049977753042253, "phrase": "specific_environment"}], "paper_keywords": ["testing and debugging", " testing strategies", " test coverage of code", " experimental design"], "paper_abstract": "The empirical assessment of test techniques plays an important role in software testing research. One common practice is to seed faults in subject software, either manually or by using a program that generates all possible mutants based on a set of mutation operators. The latter allows the systematic, repeatable seeding of large numbers of faults, thus facilitating the statistical analysis of fault detection effectiveness of test suites; however, we do not know whether empirical results obtained this way lead to valid, representative conclusions. Focusing on four common control and data flow criteria ( Block, Decision, C-Use, and P-Use), this paper investigates this important issue based on a middle size industrial program with a comprehensive pool of test cases and known faults. Based on the data available thus far, the results are very consistent across the investigated criteria as they show that the use of mutation operators is yielding trustworthy results: Generated mutants can be used to predict the detection effectiveness of real faults. Applying such a mutation analysis, we then investigate the relative cost and effectiveness of the above-mentioned criteria by revisiting fundamental questions regarding the relationships between fault detection, test suite size, and control/data flow coverage. Although such questions have been partially investigated in previous studies, we can use a large number of mutants, which helps decrease the impact of random variation in our analysis and allows us to use a different analysis approach. Our results are then compared with published studies, plausible reasons for the differences are provided, and the research leads us to suggest a way to tune the mutation analysis process to possible differences in fault detection probabilities in a specific environment.", "paper_title": "Using mutation analysis for assessing and comparing testing coverage criteria", "paper_id": "WOS:000240351700007"}