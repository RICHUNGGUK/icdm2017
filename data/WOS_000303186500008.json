{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "inconsistent_changes"}, {"score": 0.048851194509091665, "phrase": "release_level"}, {"score": 0.015558967493238443, "phrase": "code_clones"}, {"score": 0.014627906589395874, "phrase": "software_quality"}, {"score": 0.013540962731172461, "phrase": "revision_level"}, {"score": 0.004272456401437226, "phrase": "fine-grained_analysis"}, {"score": 0.003911010373894104, "phrase": "chaotic_and_experimental_nature"}, {"score": 0.0038304902197108643, "phrase": "on-going_software_development_process"}, {"score": 0.003712796038920873, "phrase": "short-lived_clones"}, {"score": 0.003598705020845104, "phrase": "ill_effects"}, {"score": 0.0034519997658752598, "phrase": "released_software_product"}, {"score": 0.003345895878114341, "phrase": "end_user"}, {"score": 0.0032599633778910516, "phrase": "broader_perspective"}, {"score": 0.0031762308449055305, "phrase": "empirical_study"}, {"score": 0.0029376803941247084, "phrase": "case_study"}, {"score": 0.0027454383581457555, "phrase": "software_defects"}, {"score": 0.002619748321217153, "phrase": "substantially_higher_percentages"}, {"score": 0.002579140290642792, "phrase": "previous_studies"}, {"score": 0.0024103044278902916, "phrase": "significant_impact"}, {"score": 0.002372935208038141, "phrase": "post-release_quality"}, {"score": 0.0023361440016375972, "phrase": "studied_systems"}, {"score": 0.002171836484200008, "phrase": "cloned_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Software engineering", " Maintenance management", " Reuse models", " Clone detection", " Maintainability", " Software evolution"], "paper_abstract": "To study the impact of code clones on software quality, researchers typically carry out their studies based on fine-grained analysis of inconsistent changes at the revision level. As a result, they capture much of the chaotic and experimental nature inherent in any on-going software development process. Analyzing highly fluctuating and short-lived clones is likely to exaggerate the ill effects of inconsistent changes on the quality of the released software product, as perceived by the end user. To gain a broader perspective, we perform an empirical study on the effect of inconsistent changes on software quality at the release level. Based on a case study on three open source software systems, we observe that only 1.02%-4.00% of all clone genealogies introduce software defects at the release level, as opposed to the substantially higher percentages reported by previous studies at the revision level. Our findings suggest that clones do not have a significant impact on the post-release quality of the studied systems, and that the developers are able to effectively manage the evolution of cloned code. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "An empirical study on inconsistent changes to code clones at the release level", "paper_id": "WOS:000303186500008"}