{"auto_keywords": [{"score": 0.03794673338838675, "phrase": "implicit_nodes"}, {"score": 0.02322730111336099, "phrase": "suffix_extensions"}, {"score": 0.010519072916991234, "phrase": "suffix_trees"}, {"score": 0.0075828270000451664, "phrase": "suffix_tree"}, {"score": 0.004626255242038005, "phrase": "prefix_extensions"}, {"score": 0.004195418010131832, "phrase": "suffix_tree_algorithm"}, {"score": 0.004176813742913465, "phrase": "ukkonen"}, {"score": 0.004121490798711703, "phrase": "prevailing_suffix_tree_representation"}, {"score": 0.004013025478863664, "phrase": "repeated_structural_updates"}, {"score": 0.003942299471749811, "phrase": "inherent_complexity"}, {"score": 0.003804550737731054, "phrase": "ended_edges"}, {"score": 0.003754140294151593, "phrase": "gratuitous_leaf_updates"}, {"score": 0.0033442114331500407, "phrase": "suffix_tree's_edges"}, {"score": 0.0032852337992126564, "phrase": "similar_edges"}, {"score": 0.0031845067058084583, "phrase": "identical_behavior"}, {"score": 0.0030868583963299698, "phrase": "open_ended_edges"}, {"score": 0.0026652435674846095, "phrase": "internal_implicit_nodes"}, {"score": 0.00258347644721642, "phrase": "explicit_suffix_tree_nodes"}, {"score": 0.002537880772794665, "phrase": "external_implicit_nodes"}, {"score": 0.0024490834773668153, "phrase": "new_properties"}, {"score": 0.00233202607446404, "phrase": "implicit_node_updates"}, {"score": 0.0022304616068189575, "phrase": "amortized_linear_time"}, {"score": 0.0021620042653528846, "phrase": "worst-case_constant_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Suffix trees", " String algorithms"], "paper_abstract": "Suffix trees are inherently asymmetric: prefix extensions only cause a few updates, while suffix extensions affect all suffixes causing a wave of updates. In his elegant linear-time on-line suffix tree algorithm Ukkonen relaxed the prevailing suffix tree representation and introduced two changes to avoid repeated structural updates and circumvent the inherent complexity of suffix extensions: (1) open ended edges that enjoy gratuitous leaf updates, and (2) the omission of implicit nodes. In this paper we study the implicit nodes as the suffix tree evolves. We partition the suffix tree's edges into collections of similar edges called bands, where implicit nodes exhibit identical behavior, and generalize the notion of open ended edges to allow implicit nodes to \"float\" within bands, only requiring updates when moving from one band to the next, adding up to only O(n) updates. We also show that internal implicit nodes are separated from each other by explicit suffix tree nodes and that all external implicit nodes are related to the same periodicity. These new properties may be used to keep track of the waves of implicit node updates and to build the suffix tree on-line in amortized linear time, providing access to all the implicit nodes in worst-case constant time. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "On suffix extensions in suffix trees", "paper_id": "WOS:000309098600003"}