{"auto_keywords": [{"score": 0.0426592730356598, "phrase": "differential_queries"}, {"score": 0.01271208471078441, "phrase": "graph_query"}, {"score": 0.009067785230960117, "phrase": "relevance_weights"}, {"score": 0.00481495049065317, "phrase": "user_intention"}, {"score": 0.004764859786310636, "phrase": "differential_graph_queries"}, {"score": 0.0047152877145889656, "phrase": "empty_answers"}, {"score": 0.004641890423057823, "phrase": "major_problem"}, {"score": 0.004593591780245872, "phrase": "processing_pattern"}, {"score": 0.004498490110526062, "phrase": "graph_databases"}, {"score": 0.0043367547691560175, "phrase": "multiple_reasons"}, {"score": 0.003946960862020283, "phrase": "missing_parts"}, {"score": 0.0038450179181069833, "phrase": "multiple_heuristics"}, {"score": 0.0036680857629458785, "phrase": "search_space"}, {"score": 0.0030538300202383106, "phrase": "top-k_differential_queries"}, {"score": 0.0029438813080245544, "phrase": "users'_preferences"}, {"score": 0.002867771524071872, "phrase": "users'_understanding"}, {"score": 0.0028378798711397235, "phrase": "query_database_management_systems"}, {"score": 0.002450602177683068, "phrase": "different_strategies"}, {"score": 0.0021049977753042253, "phrase": "dbpedia_data_graph"}], "paper_keywords": ["Differential Queries", " Flooding", " Graph Databases", " Result Ranking", " Routing", " Top-K Queries"], "paper_abstract": "Empty answers are a major problem by processing pattern matching queries in graph databases. Especially, there can be multiple reasons why a query failed. To support users in such situations, differential queries can be used that deliver missing parts of a graph query. Multiple heuristics are proposed for differential queries, which reduce the search space. Although they are successful in increasing the performance, they can discard query subgraphs relevant to a user. To address this issue, the authors extend the concept of differential queries and introduce top-k differential queries that calculate the ranking based on users' preferences and significantly support the users' understanding of query database management systems. A user assigns relevance weights to elements of a graph query that steer the search and are used for the ranking. In this paper the authors propose different strategies for selection of relevance weights and their propagation. As a result, the search is modelled along the most relevant paths. The authors evaluate their solution and both strategies on the DBpedia data graph.", "paper_title": "Considering User Intention in Differential Graph Queries", "paper_id": "WOS:000384849000003"}