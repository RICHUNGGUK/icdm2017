{"auto_keywords": [{"score": 0.04764017646340738, "phrase": "monadic_binds"}, {"score": 0.04212483992856429, "phrase": "association_pattern"}, {"score": 0.00481495049065317, "phrase": "hidden_sequence"}, {"score": 0.004724365740062236, "phrase": "monadic_reflection"}, {"score": 0.004613516457919661, "phrase": "list_appends"}, {"score": 0.004337276328199398, "phrase": "continuation-passing_style"}, {"score": 0.004116440453049531, "phrase": "severe_dependence"}, {"score": 0.003925414526537783, "phrase": "cps_dwindles"}, {"score": 0.003725470458263889, "phrase": "intermediate_result"}, {"score": 0.0032922964156452696, "phrase": "non-determinism_monads"}, {"score": 0.0032149396890830575, "phrase": "alternative_approach"}, {"score": 0.0028140548269469934, "phrase": "efficient_access"}, {"score": 0.002787406053363446, "phrase": "intermediate_results"}, {"score": 0.002657890175649468, "phrase": "efficient_sequence_data_structure"}, {"score": 0.002632716358833918, "phrase": "efficient_sequence_data_structures"}, {"score": 0.0024397017438101726, "phrase": "type-safe_way"}, {"score": 0.0023152577218214804, "phrase": "aligned_sequences"}], "paper_keywords": ["performance", " monads", " reflection", " data structures"], "paper_abstract": "A series of list appends or monadic binds for many monads performs algorithmically worse when left-associated. Continuation-passing style (CPS) is well-known to cure this severe dependence of performance on the association pattern. The advantage of CPS dwindles or disappears if we have to examine or modify the intermediate result of a series of appends or binds, before continuing the series. Such examination is frequently needed, for example, to control search in non-determinism monads. We present an alternative approach that is just as general as CPS but more robust: it makes series of binds and other such operations efficient regardless of the association pattern - and also provides efficient access to intermediate results. The key is to represent such a conceptual sequence as an efficient sequence data structure. Efficient sequence data structures from the literature are homogeneous and cannot be applied as they are in a type-safe way to series of monadic binds. We generalize them to type aligned sequences and show how to construct their (assuredly order-preserving) implementations. We demonstrate that our solution solves previously undocumented, severe performance problems in iteratees, LogicT transformers, free monads and extensible effects.", "paper_title": "Reflection without Remorse Revealing a hidden sequence to speed up monadic reflection", "paper_id": "WOS:000358311500016"}