{"auto_keywords": [{"score": 0.03923307184680597, "phrase": "different_approaches"}, {"score": 0.00481495049065317, "phrase": "algebraic_lambda-calculus."}, {"score": 0.004664352260912174, "phrase": "algebraic_lambda-calculus"}, {"score": 0.004539005582217309, "phrase": "differential_lambda-calculus"}, {"score": 0.004477595431209663, "phrase": "linear-algebraic_lambda-calculus"}, {"score": 0.004357245559948974, "phrase": "quantum_computation"}, {"score": 0.004051828608343507, "phrase": "scalar-multiplicative_structure"}, {"score": 0.0038895008852940323, "phrase": "linear_combinations"}, {"score": 0.0036332251283046997, "phrase": "call-by-name_language"}, {"score": 0.0034092396400930446, "phrase": "algebraic_equalities"}, {"score": 0.00330246222643051, "phrase": "rewrite_rules"}, {"score": 0.0029076695661972114, "phrase": "possible_choices"}, {"score": 0.002753224894944965, "phrase": "algebraic_equality"}, {"score": 0.002559951153813876, "phrase": "subtle_interaction"}, {"score": 0.0025137856138000014, "phrase": "algebraic_rewriting"}, {"score": 0.002423931101340771, "phrase": "additional_hypotheses"}, {"score": 0.0022743274702883456, "phrase": "required_properties"}, {"score": 0.0021049977753042253, "phrase": "corresponding_properties"}], "paper_keywords": ["algebraic lambda-calculus", " linear-algebraic lambda-calculus", " CPS simulation"], "paper_abstract": "We examine the relationship between the algebraic lambda-calculus,a fragment of the differential lambda-calculus and the linear-algebraic lambda-calculus, a candidate lambda-calculus for quantum computation. Both calculi are algebraic: each one is equipped with an additive and a scalar-multiplicative structure, and their set of terms is closed under linear combinations. However, the two languages were built using different approaches: the former is a call-by-name language whereas the latter is call-by-value; the former considers algebraic equalities whereas the latter approaches them through rewrite rules. In this paper, we analyse how these different approaches relate to one another. To this end, we propose four canonical languages based on each of the possible choices: call-byname versus call-by-value, algebraic equality versus algebraic rewriting. We show that the various languages simulate one another. Due to subtle interaction between beta-reduction and algebraic rewriting, to make the languages consistent some additional hypotheses such as confluence or normalisation might be required. We carefully devise the required properties for each proof, making them general enough to be valid for any sub-language satisfying the corresponding properties.", "paper_title": "CALL-BY-VALUE, CALL-BY-NAME AND THE VECTORIAL BEHAVIOUR OF THE ALGEBRAIC lambda-CALCULUS", "paper_id": "WOS:000350399900002"}