{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "haskell"}, {"score": 0.01304151484811312, "phrase": "generic_programming"}, {"score": 0.004521566043596533, "phrase": "earlier_studies"}, {"score": 0.004284302478991387, "phrase": "high-level_evaluation_criteria"}, {"score": 0.0034529760173586583, "phrase": "concept_feature"}, {"score": 0.0030171910207671205, "phrase": "type_classes"}, {"score": 0.0024093494406195386, "phrase": "improved_understanding"}, {"score": 0.002366361492754389, "phrase": "language_support"}, {"score": 0.002143247921132179, "phrase": "ongoing_discussions"}, {"score": 0.0021049977753042253, "phrase": "language_designers"}], "paper_keywords": [""], "paper_abstract": "Earlier studies have introduced a list of high-level evaluation criteria to assess how well a language supports generic programming. Languages that meet all criteria include Haskell because of its type classes and C++ with the concept feature. We refine these criteria into a taxonomy that captures commonalities and differences between type classes in Haskell and concepts in C++ and discuss which differences are incidental and which ones are due to other language features. The taxonomy allows for an improved understanding of language support for generic programming, and the comparison is useful for the ongoing discussions among language designers and users of both languages.", "paper_title": "Generic programming with C plus plus concepts and Haskell type classes-a comparison", "paper_id": "WOS:000286560000003"}