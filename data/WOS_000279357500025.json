{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "reachability-bound_problem"}, {"score": 0.0046477357199085035, "phrase": "symbolic_worst-case"}, {"score": 0.003775803846431323, "phrase": "quantitative_properties"}, {"score": 0.0036932254391253134, "phrase": "boolean_properties"}, {"score": 0.00354909279546064, "phrase": "information_leakage"}, {"score": 0.0035178323426661626, "phrase": "uncertainty_propagation"}, {"score": 0.0032774280543222843, "phrase": "effective_manner"}, {"score": 0.003080548510001051, "phrase": "precise_disjunctive_invariants"}, {"score": 0.0030264946886983833, "phrase": "nested_loops"}, {"score": 0.002934166052954463, "phrase": "non-iterative_proof-rules"}, {"score": 0.002733539375462443, "phrase": "inductive_reasoning"}, {"score": 0.0026267609106294817, "phrase": "smt_solvers"}, {"score": 0.0025806490053534316, "phrase": "abstract_loop-free_fragments"}, {"score": 0.0024579623598183355, "phrase": "precise_symbolic_complexity_bounds"}, {"score": 0.0023935128386292966, "phrase": "net_base-class_libraries"}, {"score": 0.0022396694076443446, "phrase": "disjunctive_invariant_computation"}, {"score": 0.0021049977753042253, "phrase": "benchmark_examples"}], "paper_keywords": ["Verification", " Performance", " Reliability", " Resource Bound Analysis", " Disjunctive Invariants", " Transitive Closure", " Ranking Functions", " Pattern Matching"], "paper_abstract": "We define the reachability-bound problem to be the problem of finding a symbolic worst-case bound on the number of times a given control location inside a procedure is visited in terms of the inputs to that procedure. This has applications in bounding resources consumed by a program such as time, memory, network-traffic, power, as well as estimating quantitative properties (as opposed to boolean properties) of data in programs, such as information leakage or uncertainty propagation. Our approach to solving the reachability-bound problem brings together two different techniques for reasoning about loops in an effective manner. One of these techniques is an abstract-interpretation based iterative technique for computing precise disjunctive invariants (to summarize nested loops). The other technique is a non-iterative proof-rules based technique (for loop bound computation) that takes over the role of doing inductive reasoning, while deriving its power from the use of SMT solvers to reason about abstract loop-free fragments. Our solution to the reachability-bound problem allows us to compute precise symbolic complexity bounds for several loops in. Net base-class libraries for which earlier techniques fail. We also illustrate the precision of our algorithm for disjunctive invariant computation (which has a more general applicability beyond the reachability-bound problem) on a set of benchmark examples.", "paper_title": "The Reachability-Bound Problem", "paper_id": "WOS:000279357500025"}