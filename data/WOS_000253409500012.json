{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "ssa_form"}, {"score": 0.004723847090183984, "phrase": "embedded_processors"}, {"score": 0.004293434614435972, "phrase": "dynamic_compilation"}, {"score": 0.004192078165260057, "phrase": "limited_resources"}, {"score": 0.003809932244103758, "phrase": "new_register_allocation_heuristics"}, {"score": 0.0036845490951857617, "phrase": "embedded_compilation"}, {"score": 0.0035462807506718578, "phrase": "tree_scan"}, {"score": 0.0033166379485150507, "phrase": "good_candidates"}, {"score": 0.003161740194257218, "phrase": "competitive_register_allocators"}, {"score": 0.003043031131345537, "phrase": "side_effect"}, {"score": 0.0030140547908298404, "phrase": "power_consumption"}, {"score": 0.0028053237950173508, "phrase": "important_issue"}, {"score": 0.0027259252868643926, "phrase": "exhaustive_study"}, {"score": 0.002648768009464535, "phrase": "\"spill_everywhere\"_problem"}, {"score": 0.0023840346303791032, "phrase": "np-completeness_results"}, {"score": 0.002327648608736437, "phrase": "polynomial_cases"}, {"score": 0.0022617389804167943, "phrase": "jit_context"}, {"score": 0.0021049977753042253, "phrase": "aggressive_allocators"}], "paper_keywords": ["register allocation", " SSA form", " spill", " complexity", " algorithms", " performance", " theory"], "paper_abstract": "Compilation for embedded processors can be either aggressive ( time consuming cross-compilation) or just in time ( embedded and usually dynamic). The heuristics used in dynamic compilation are highly constrained by limited resources, time and memory in particular. Recent results on the SSA form open promising directions for the design of new register allocation heuristics for embedded systems and especially for embedded compilation. In particular, heuristics based on tree scan with two separated phases-one for spilling, then one for coloring/coalescing - seem good candidates for designing memory-friendly, fast, and competitive register allocators. Still, also because of the side effect on power consumption, the minimization of loads and stores overhead ( spilling problem) is an important issue. This paper provides an exhaustive study of the complexity of the \"spill everywhere\" problem in the context of the SSA form. Unfortunately, conversely to our initial hopes, many of the questions we raised lead to NP-completeness results. We identify some polynomial cases but that are impractical in JIT context. Nevertheless, they can give hints to simplify formulations for the design of aggressive allocators.", "paper_title": "On the complexity of spill everywhere under SSA form", "paper_id": "WOS:000253409500012"}