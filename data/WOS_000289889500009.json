{"auto_keywords": [{"score": 0.025738214685822373, "phrase": "euse_tools"}, {"score": 0.004668957916795845, "phrase": "professional_software_developers"}, {"score": 0.004300830853119242, "phrase": "computational_support"}, {"score": 0.004085579055228594, "phrase": "grading_spreadsheet"}, {"score": 0.004023120753104693, "phrase": "time_grading"}, {"score": 0.003941319912895672, "phrase": "interaction_designer"}, {"score": 0.003861175855298779, "phrase": "interface_builder"}, {"score": 0.003782655283668953, "phrase": "user_interface_design_ideas"}, {"score": 0.0037057255600764475, "phrase": "end-user_programmers"}, {"score": 0.003574830654211291, "phrase": "professional_developers"}, {"score": 0.002836679611901583, "phrase": "end-user_software_engineering"}, {"score": 0.0027646829399573434, "phrase": "related_terminology"}, {"score": 0.0026806884201358537, "phrase": "empirical_research"}, {"score": 0.0026532596852754525, "phrase": "end-user_software_engineering_activities"}, {"score": 0.0022856052476424344, "phrase": "domain_complexity"}, {"score": 0.0021049977753042253, "phrase": "software_engineering_principles"}], "paper_keywords": ["Reliability", " Human Factors", " Languages", " Experimentation", " Design", " End-user software engineering", " end-user programming", " end-user development", " visual programming", " human-computer interaction"], "paper_abstract": "Most programs today are written not by professional software developers, but by people with expertise in other domains working towards goals for which they need computational support. For example, a teacher might write a grading spreadsheet to save time grading, or an interaction designer might use an interface builder to test some user interface design ideas. Although these end-user programmers may not have the same goals as professional developers, they do face many of the same software engineering challenges, including understanding their requirements, as well as making decisions about design, reuse, integration, testing, and debugging. This article summarizes and classifies research on these activities, defining the area of End-User Software Engineering (EUSE) and related terminology. The article then discusses empirical research about end-user software engineering activities and the technologies designed to support them. The article also addresses several crosscutting issues in the design of EUSE tools, including the roles of risk, reward, and domain complexity, and self-efficacy in the design of EUSE tools and the potential of educating users about software engineering principles.", "paper_title": "The State of the Art in End-User Software Engineering", "paper_id": "WOS:000289889500009"}