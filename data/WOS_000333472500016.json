{"auto_keywords": [{"score": 0.03235740424067532, "phrase": "mdrr"}, {"score": 0.031393374493768354, "phrase": "disk_reads"}, {"score": 0.00481495049065317, "phrase": "single_disk_failure_recovery"}, {"score": 0.004772367030970874, "phrase": "x-code-based_parallel_storage_systems"}, {"score": 0.004484596684703308, "phrase": "data_centers"}, {"score": 0.004327981760540394, "phrase": "data_availability_guarantees"}, {"score": 0.004232875294230749, "phrase": "storage_node"}, {"score": 0.004158290806404304, "phrase": "redundancy_coding_schemes"}, {"score": 0.0038900709793274484, "phrase": "optimal_update_complexity"}, {"score": 0.003606866938661143, "phrase": "data_unavailability"}, {"score": 0.003527550673371394, "phrase": "x-code-based_optimal_recovery_scheme"}, {"score": 0.0032129675521135616, "phrase": "single-disk_failure_recovery"}, {"score": 0.003032405563826263, "phrase": "optimal_single-disk_failure_recovery"}, {"score": 0.0029133627624098064, "phrase": "conventional_recovery_approach"}, {"score": 0.002811464848641341, "phrase": "optimal_recovery_scheme"}, {"score": 0.0027131212233443137, "phrase": "different_disks"}, {"score": 0.0026771333996253783, "phrase": "single_stripe"}, {"score": 0.0026534064006291853, "phrase": "general_cases"}, {"score": 0.002572001496778222, "phrase": "efficient_logical_encoding_scheme"}, {"score": 0.002537880772794665, "phrase": "balanced_disk"}, {"score": 0.002438203996977464, "phrase": "recovery_algorithm"}, {"score": 0.002395166073437286, "phrase": "mdrr_scheme"}, {"score": 0.002290858045013009, "phrase": "extensive_testbed_experiments"}, {"score": 0.0022604585778195152, "phrase": "networked_storage_system_prototype"}, {"score": 0.0021716540012278744, "phrase": "recovery_time"}, {"score": 0.002142832962924139, "phrase": "conventional_approach"}], "paper_keywords": ["Parallel storage systems", " coding theory", " data availability", " recovery algorithm"], "paper_abstract": "In modern parallel storage systems (e. g., cloud storage and data centers), it is important to provide data availability guarantees against disk (or storage node) failures via redundancy coding schemes. One coding scheme is X-code, which is double-fault tolerant while achieving the optimal update complexity. When a disk/node fails, recovery must be carried out to reduce the possibility of data unavailability. We propose an X-code-based optimal recovery scheme called minimum-disk-read-recovery (MDRR), which minimizes the number of disk reads for single-disk failure recovery. We make several contributions. First, we show that MDRR provides optimal single-disk failure recovery and reduces about 25 percent of disk reads compared to the conventional recovery approach. Second, we prove that any optimal recovery scheme for X-code cannot balance disk reads among different disks within a single stripe in general cases. Third, we propose an efficient logical encoding scheme that issues balanced disk read in a group of stripes for any recovery algorithm (including the MDRR scheme). Finally, we implement our proposed recovery schemes and conduct extensive testbed experiments in a networked storage system prototype. Experiments indicate that MDRR reduces around 20 percent of recovery time of the conventional approach, showing that our theoretical findings are applicable in practice.", "paper_title": "Single Disk Failure Recovery for X-Code-Based Parallel Storage Systems", "paper_id": "WOS:000333472500016"}