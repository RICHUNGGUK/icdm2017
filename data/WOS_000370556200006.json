{"auto_keywords": [{"score": 0.04516267803280923, "phrase": "spot_price"}, {"score": 0.0394387278651442, "phrase": "spot_pricing"}, {"score": 0.00481495049065317, "phrase": "amazon's_elastic_compute_cloud"}, {"score": 0.00470325458481566, "phrase": "auction_based_spot_pricing"}, {"score": 0.004637478829869904, "phrase": "spare_capacity"}, {"score": 0.004487541157100498, "phrase": "cloud_resources"}, {"score": 0.004424768776701965, "phrase": "highly_reduced_rate"}, {"score": 0.004241648852523704, "phrase": "user_bids"}, {"score": 0.004143413600837395, "phrase": "jobs"}, {"score": 0.004104456271230213, "phrase": "lower_bids"}, {"score": 0.003825173769489887, "phrase": "lower_spot_price"}, {"score": 0.003401148484767927, "phrase": "users'_bidding_strategies"}, {"score": 0.003322140088192527, "phrase": "higher_bid_prices"}, {"score": 0.003038237581227068, "phrase": "users'_cost"}, {"score": 0.0028446460307503343, "phrase": "cloud_provider's_setting"}, {"score": 0.002626034130205569, "phrase": "optimal_bidding_strategies"}, {"score": 0.0026014425686078993, "phrase": "different_job_requirements"}, {"score": 0.0025770807002632877, "phrase": "interruption_overheads"}, {"score": 0.0024586427394152196, "phrase": "mapreduce_jobs"}, {"score": 0.0024356148906608025, "phrase": "master_slave_nodes"}, {"score": 0.0024128022009415476, "phrase": "different_interruption_overheads"}, {"score": 0.002291089893848235, "phrase": "job_sizes"}, {"score": 0.0022696277881969896, "phrase": "instance_types"}, {"score": 0.0022064376000055764, "phrase": "user_cost"}, {"score": 0.0021551222226685648, "phrase": "modest_increase"}, {"score": 0.0021349310877334378, "phrase": "completion_time"}, {"score": 0.0021049977753042253, "phrase": "on-demand_pricing"}], "paper_keywords": ["Cloud pricing", " spot instance", " optimization"], "paper_abstract": "Amazon's Elastic Compute Cloud (EC2) uses auction based spot pricing to sell spare capacity, allowing users to bid for cloud resources at a highly reduced rate. Amazon sets the spot price dynamically and accepts user bids above this price. Jobs with lower bids (in ding those already running) are interrupted and must wait for a lower spot price before resuming. Spot pricing thus raises two basic questions: how might the provider set, the price, and what prices should users bid? Computing users' bidding strategies is particularly challenging: higher bid prices reduce the probability of, and thus extra time to recover front, interruptions, but may increase users' cost. We address these questions in three steps: (1) modeling the cloud provider's setting of the spot price and matching the model to historically offered prices, (2) deriving optimal bidding strategies for different job requirements and interruption overheads, and (3) adapting these strategies to MapReduce jobs with master slave nodes having different interruption overheads. We run our strategies on EC2 for a variety of job sizes and instance types, showing that spot pricing reduces user cost by 90% with a modest increase in completion time compared to on-demand pricing.", "paper_title": "How to Bid the Cloud", "paper_id": "WOS:000370556200006"}