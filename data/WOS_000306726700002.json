{"auto_keywords": [{"score": 0.04954397446159371, "phrase": "braess's_paradox"}, {"score": 0.04249172719136186, "phrase": "equilibrium_flow_delays"}, {"score": 0.03843856552198327, "phrase": "linear_latencies"}, {"score": 0.026288743661917236, "phrase": "optimal_flow"}, {"score": 0.00481495049065317, "phrase": "selfish_network_design"}, {"score": 0.004603244077348199, "phrase": "common_latency"}, {"score": 0.004577440795549049, "phrase": "selfish_flows"}, {"score": 0.004551781491498328, "phrase": "nash_equilibrium"}, {"score": 0.004488257921051031, "phrase": "pervasive_phenomenon"}, {"score": 0.0044630962990919775, "phrase": "real-world_networks"}, {"score": 0.004363846362238565, "phrase": "equilibrium_delays"}, {"score": 0.004339379163693652, "phrase": "selfish_networks"}, {"score": 0.004278807087784626, "phrase": "basic_questions"}, {"score": 0.00397714507836836, "phrase": "edge_latencies"}, {"score": 0.0038668462001710314, "phrase": "np-hard_problems"}, {"score": 0.003749033935324126, "phrase": "natural_restrictions"}, {"score": 0.0035941231858949035, "phrase": "efficient_algorithms"}, {"score": 0.003465036432323081, "phrase": "polynomial-time_algorithm"}, {"score": 0.003070086433952691, "phrase": "optimal_basic_feasible_solutions"}, {"score": 0.003044269254752414, "phrase": "linear_program"}, {"score": 0.0030101827310631915, "phrase": "optimal_traffic_allocations"}, {"score": 0.0029681091946289757, "phrase": "constant_latency"}, {"score": 0.0028775998963807324, "phrase": "almost_optimal_wrt_equilibrium_latency"}, {"score": 0.002735392281320413, "phrase": "polylogarithmic_length"}, {"score": 0.0026296502381720293, "phrase": "best_subnetwork"}, {"score": 0.002600194073758015, "phrase": "known_approximation"}, {"score": 0.002450864311898833, "phrase": "nash_flow"}, {"score": 0.002362741548363011, "phrase": "minimal_modifications"}, {"score": 0.002323142666222693, "phrase": "remaining_ones"}, {"score": 0.0022906498741695094, "phrase": "deeper_understanding"}, {"score": 0.002271372252250557, "phrase": "computational_complexity"}, {"score": 0.0022020622730208514, "phrase": "novel_ways"}, {"score": 0.0021773853011112882, "phrase": "probabilistic_method"}, {"score": 0.0021529842700733974, "phrase": "convex_separable_quadratic_programs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": [""], "paper_abstract": "Intuitively, Braess's paradox states that destroying a part of a network may improve the common latency of selfish flows at Nash equilibrium. Such a paradox is a pervasive phenomenon in real-world networks. Any administrator who wants to improve equilibrium delays in selfish networks, is facing some basic questions: - Is the network paradox-ridden? - How can we delete some edges to optimize equilibrium flow delays? - How can we modify edge latencies to optimize equilibrium flow delays? Unfortunately, such questions lead to NP-hard problems in general. In this work, we impose some natural restrictions on our networks, e.g. we assume strictly increasing linear latencies. Our target is to formulate efficient algorithms for the three questions above. We manage to provide: - A polynomial-time algorithm that decides if a network is paradox-ridden, when latencies are linear and strictly increasing. - A reduction of the problem of deciding if a network with (arbitrary) linear latencies is paradox-ridden to the problem of generating all optimal basic feasible solutions of a Linear Program that describes the optimal traffic allocations to the edges with constant latency. - An algorithm for finding a subnetwork that is almost optimal wrt equilibrium latency. Our algorithm is subexponential when the number of paths is polynomial and each path is of polylogarithmic length. - A polynomial-time algorithm for the problem of finding the best subnetwork which outperforms any known approximation for the case of strictly increasing linear latencies. - A polynomial-time method that turns the optimal flow into a Nash flow by deleting the edges not used by the optimal flow, and performing minimal modifications on the latencies of the remaining ones. Our results provide a deeper understanding of the computational complexity of recognizing the most severe manifestations of Braess's paradox, and our techniques show novel ways of using the probabilistic method and of exploiting convex separable quadratic programs. (C) 2012 Published by Elsevier B.V.", "paper_title": "Efficient methods for selfish network design", "paper_id": "WOS:000306726700002"}