{"auto_keywords": [{"score": 0.047424145546337136, "phrase": "cache_behavior"}, {"score": 0.035201652129139706, "phrase": "judy_structure"}, {"score": 0.02911054128726375, "phrase": "judy"}, {"score": 0.026993093955816224, "phrase": "better_performance"}, {"score": 0.00481495049065317, "phrase": "cache-optimized_main_memory_database_index_structure"}, {"score": 0.004737201825299411, "phrase": "speed_gap"}, {"score": 0.0046987973264610685, "phrase": "main_memory"}, {"score": 0.004660702714929615, "phrase": "modern_processors"}, {"score": 0.004456611869693865, "phrase": "main_memory_database_systems"}, {"score": 0.004366808573435364, "phrase": "indexing_technique"}, {"score": 0.004313793774439379, "phrase": "key_component"}, {"score": 0.004192571571622019, "phrase": "predominant_indexes"}, {"score": 0.003680212979775528, "phrase": "cache-conscious_indexes"}, {"score": 0.003562186600028245, "phrase": "better_cache_performance"}, {"score": 0.0032833625797814474, "phrase": "associative_array_data_structure"}, {"score": 0.0030635374056374016, "phrase": "range_scan_operations"}, {"score": 0.0029291801502381513, "phrase": "reference_values"}, {"score": 0.0029053904956617043, "phrase": "leaf_nodes"}, {"score": 0.002699769374493867, "phrase": "fast_single_value_search"}, {"score": 0.0025189177411152645, "phrase": "range_queries"}, {"score": 0.0024480094603893175, "phrase": "prefetching_techniques"}, {"score": 0.0023026973099101876, "phrase": "range_scans"}], "paper_keywords": ["index structure", " pJ(+)-tree", " prefetching", " cache conscious", " main memory database"], "paper_abstract": "As the speed gap between main memory and modern processors continues to widen, the cache behavior becomes more important for main memory database systems (MMDBs). Indexing technique is a key component of MMDBs. Unfortunately, the predominant indexes - B+-trees and T-trees - have been shown to utilize cache poorly, which triggers the development of many cache-conscious indexes, such as CSB+-trees and pB(+)-trees. Most of these cache-conscious indexes are variants of conventional B+-trees, and have better cache performance than B+-trees. In this paper, we develop a novel J(+)-tree index, inspired by the Judy structure which is an associative array data structure, and propose a more cache-optimized index - Prefetching J(+)-tree (pJ(+)-tree), which applies prefetching to J(+)-tree to accelerate range scan operations. The J(+)-tree stores all the keys in its leaf nodes and keeps the reference values of leaf nodes in a Judy structure, which makes J(+)-tree not only hold the advantages of Judy (such as fast single value search) but also outperform it in other aspects. For example, J(+)-trees can achieve better performance on range queries than Judy. The pJ(+)-tree index exploits prefetching techniques to further improve the cache behavior of J(+)-trees and yields a speedup of 2.0 on range scans. Compared with B+-trees, CSB+-trees, pB(+)-trees and T-trees, our extensive experimental study shows that pJ(+)-trees can provide better performance on both time (search, scan, update) and space aspects.", "paper_title": "Prefetching J(+)-Tree: A Cache-Optimized Main Memory Database Index Structure", "paper_id": "WOS:000268249500008"}