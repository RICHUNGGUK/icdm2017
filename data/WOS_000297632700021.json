{"auto_keywords": [{"score": 0.039853922732353365, "phrase": "semi-formal_methodology"}, {"score": 0.00481495049065317, "phrase": "efficient_fpga_implementation"}, {"score": 0.004720419202969916, "phrase": "low_density_parity_check_forward_error_corrector"}, {"score": 0.004303127794432684, "phrase": "formal_and_semi-formal_methods"}, {"score": 0.0035993041437026225, "phrase": "improved_likelihood"}, {"score": 0.0035285548582081627, "phrase": "correct_implementation"}, {"score": 0.0033911868693238894, "phrase": "design_exploration"}, {"score": 0.003010250522930773, "phrase": "executable_specifications"}, {"score": 0.002931569771634119, "phrase": "functional_language"}, {"score": 0.0029122567634562234, "phrase": "haskell"}, {"score": 0.0028549396580672417, "phrase": "vhdl_implementations"}, {"score": 0.0027256122357680393, "phrase": "manual_edits"}, {"score": 0.002671990515821213, "phrase": "semi-formal_equational_reasoning"}, {"score": 0.0025173564697303836, "phrase": "commutable_functors"}, {"score": 0.00240328454980006, "phrase": "full-scale_example"}], "paper_keywords": ["Design", " Performance", " Reliability", " Verification", " Lava", " DSL", " Error Correction", " LDPC"], "paper_abstract": "Creating correct hardware is hard. Though there is much talk of using formal and semi-formal methods to develop designs and implementations, in practice most implementations are written without the support of any formal or semi-formal methodology. Having such a methodology brings many benefits, including improved likelihood of a correct implementation, lowering the cost of design exploration and lowering the cost of certification. In this paper, we introduce a semi-formal methodology for connecting executable specifications written in the functional language Haskell to efficient VHDL implementations. The connection is performed by manual edits, using semi-formal equational reasoning facilitated by the worker/wrapper transformation, and directed using commutable functors. We explain our methodology on a full-scale example, an efficient Low-Density Parity Check forward error correcting code, which has been implemented on a Virtex-5 FPGA.", "paper_title": "Deriving an Efficient FPGA Implementation of a Low Density Parity Check Forward Error Corrector", "paper_id": "WOS:000297632700021"}