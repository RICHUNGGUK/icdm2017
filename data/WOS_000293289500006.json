{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "modern_microprocessor"}, {"score": 0.03543369467502232, "phrase": "instruction_execution"}, {"score": 0.025299381701068747, "phrase": "architectural_state"}, {"score": 0.004587464246981363, "phrase": "proposed_ced_scheme"}, {"score": 0.004416257191177784, "phrase": "added_hardware"}, {"score": 0.004135387221172467, "phrase": "workload-cognizant_way"}, {"score": 0.003967235882351874, "phrase": "application-level_error"}, {"score": 0.003912712778141845, "phrase": "program_execution"}, {"score": 0.0035025644647418983, "phrase": "typical_workload"}, {"score": 0.0033023994098455457, "phrase": "ced_resources"}, {"score": 0.003157061070428828, "phrase": "alpha-like_superscalar_microprocessor"}, {"score": 0.003102875178186416, "phrase": "hybrid_branch_prediction"}, {"score": 0.0030814613175385672, "phrase": "out-of-order_execution_capabilities"}, {"score": 0.0030390745780621503, "phrase": "extensive_fault-simulation_infrastructure"}, {"score": 0.0029053454026123217, "phrase": "scheduler"}, {"score": 0.0027486699590262343, "phrase": "ced_scheme"}, {"score": 0.0026459054525234706, "phrase": "executed_operation"}, {"score": 0.0026185499482623, "phrase": "utilized_resources"}, {"score": 0.002564682311144514, "phrase": "executed_and_retired_sequence"}, {"score": 0.0025119200240696824, "phrase": "hardware_cost"}, {"score": 0.0024432508011008563, "phrase": "corresponding_ced_scheme"}, {"score": 0.0022096550791379033, "phrase": "average_detection_latency"}, {"score": 0.0021867999937268084, "phrase": "remaining_faults"}, {"score": 0.0021049977753042253, "phrase": "efficient_recovery_methods"}], "paper_keywords": ["Concurrent error detection", " microprocessor", " scheduler", " invariance"], "paper_abstract": "We present a Concurrent Error Detection (CED) scheme for the Scheduler of a modern microprocessor. The proposed CED scheme is based on monitoring a set of invariances imposed through added hardware, violation of which signifies the occurrence of an error. The novelty of our solution stems from the workload-cognizant way in which these invariances are selected so that they leverage the application-level error masking inherent in program execution. Specifically, in order to ensure cost-effectiveness of the hardware employed to construct these invariances, we make use of information regarding the type and frequency of errors affecting the typical workload of the microprocessor. Thereby, we identify the most susceptible aspects of instruction execution and we accordingly distribute CED resources to protect them. Our approach is demonstrated on the Scheduler of an Alpha-like superscalar microprocessor with dynamic scheduling, hybrid branch prediction and out-of-order execution capabilities. Using an extensive fault-simulation infrastructure that we developed around this microprocessor, we profile the impact of Scheduler faults across a variety of different SPEC2000 benchmarks. Based on the results, we construct a CED scheme which monitors the time and location of instruction execution, the executed operation, the utilized resources, as well as the executed and retired sequence of instructions. At a hardware cost of only 32 percent of the Scheduler, the corresponding CED scheme detects over 85 percent of its faults that affect the architectural state of the microprocessor. Furthermore, over 99.5 percent of these faults are detected before they corrupt the architectural state, while the average detection latency for the remaining faults is in the order of a few clock cycles, implying that efficient recovery methods can be developed.", "paper_title": "Workload-Cognizant Concurrent Error Detection in the Scheduler of a Modern Microprocessor", "paper_id": "WOS:000293289500006"}