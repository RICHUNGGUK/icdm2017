{"auto_keywords": [{"score": 0.03371796317805148, "phrase": "paratask"}, {"score": 0.00481495049065317, "phrase": "parallel_task_for_parallelising_object-oriented_desktop_applications"}, {"score": 0.004632388761885302, "phrase": "mainstream_desktop_systems"}, {"score": 0.004125027493339274, "phrase": "interactive_desktop_applications"}, {"score": 0.004007083686875716, "phrase": "traditional_batch-like_applications"}, {"score": 0.003949377440799037, "phrase": "engineering_and_scientific_fields"}, {"score": 0.0036553070575015344, "phrase": "object-oriented_applications"}, {"score": 0.0035852640843794252, "phrase": "unique_feature"}, {"score": 0.0034491650585057754, "phrase": "graphical_user_interface_applications"}, {"score": 0.0033021988455635403, "phrase": "cases_concurrency"}, {"score": 0.0032232653428491435, "phrase": "single_keyword"}, {"score": 0.002925899335792914, "phrase": "object-oriented_principles"}, {"score": 0.002855934865505357, "phrase": "wide_variety"}, {"score": 0.002828418443899226, "phrase": "parallelisation_needs"}, {"score": 0.0027741761880779535, "phrase": "intuitive_support"}, {"score": 0.0027474453262607834, "phrase": "dependence_handling"}, {"score": 0.0026049517737353365, "phrase": "asynchronous_environment"}, {"score": 0.002530359917257626, "phrase": "flexible_task"}, {"score": 0.0021989208893109504, "phrase": "java"}, {"score": 0.0021049977753042253, "phrase": "different_workloads"}], "paper_keywords": ["Parallel computing", " Task parallelism", " Object-oriented programming", " Desktop applications", " Graphical user interface", " Event dispatch thread"], "paper_abstract": "With the arrival of multi-cores for mainstream desktop systems, developers must invest the effort of parallelising their applications in order to benefit from these systems. However, the structure of these interactive desktop applications is noticeably different from the traditional batch-like applications of the engineering and scientific fields. We present Parallel Task (short ParaTask), a solution to assist the parallelisation of object-oriented applications, with the unique feature of including support for the parallelisation of graphical user interface applications. In the simple, but common, cases concurrency is introduced with a single keyword. ParaTask sets itself apart from the many existing object-oriented parallelisation approaches by integrating different task types into the same model and its careful adherence to object-oriented principles. Due to the wide variety of parallelisation needs, ParaTask provides intuitive support for dependence handling, non-blocking notification and exception handling in an asynchronous environment as well as supporting a flexible task scheduling runtime (currently work-sharing, work-stealing and a combination of the two are supported). The performance is excellent compared to traditional Java parallelisation approaches, shown using a variety of different workloads.", "paper_title": "Parallel Task for Parallelising Object-Oriented Desktop Applications", "paper_id": "WOS:000320285000002"}