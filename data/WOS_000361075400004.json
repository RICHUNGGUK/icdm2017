{"auto_keywords": [{"score": 0.048324900566205885, "phrase": "big_data"}, {"score": 0.008492972299992999, "phrase": "mapreduce"}, {"score": 0.006441711997305693, "phrase": "heterogeneous_environments"}, {"score": 0.00481495049065317, "phrase": "aware_virtual_machine_mapping_techniques"}, {"score": 0.004688321299229397, "phrase": "mapreduce_applications"}, {"score": 0.0043511221096418475, "phrase": "processing_capabilities"}, {"score": 0.004304963945457799, "phrase": "traditional_systems"}, {"score": 0.00378767277402891, "phrase": "recent_programming_model"}, {"score": 0.003422462630994095, "phrase": "large_number"}, {"score": 0.0031255543155487234, "phrase": "mapreduce_job"}, {"score": 0.0027058852678238632, "phrase": "mapreduce_execution"}, {"score": 0.0025243592424524764, "phrase": "map_phase"}, {"score": 0.002470987929071079, "phrase": "virtual_machine_mapping"}, {"score": 0.002431699464104896, "phrase": "reduce_phase"}, {"score": 0.0023675986784123656, "phrase": "resource_utilization"}, {"score": 0.002317533977770783, "phrase": "experimental_results"}, {"score": 0.002256435842862802, "phrase": "mapreduce_performance"}, {"score": 0.002220551141101661, "phrase": "data_locality"}, {"score": 0.002196944917134202, "phrase": "total_completion_time"}, {"score": 0.0021735890994119757, "phrase": "different_optimization_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["BigData", " Cloud computing", " Distributed computing", " Heterogeneity", " MapReduce", " Virtual machines"], "paper_abstract": "Big data refers to data that is so large that it exceeds the processing capabilities of traditional systems. Big data can be awkward to work and the storage, processing and analysis of big data can be problematic. MapReduce is a recent programming model that can handle big data. MapReduce achieves this by distributing the storage and processing of data amongst a large number of computers (nodes). However, this means the time required to process a MapReduce job is dependent on whichever node is last to complete a task. Heterogeneous environments exacerbate this problem. In this paper we propose a method to improve MapReduce execution in heterogeneous environments. This is done by dynamically partitioning data before the Map phase and by using virtual machine mapping in the Reduce phase in order to maximize resource utilization. Simulation and experimental results show an improvement in MapReduce performance, including data locality and total completion time with different optimization approaches. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Locality and loading aware virtual machine mapping techniques for optimizing communications in MapReduce applications", "paper_id": "WOS:000361075400004"}