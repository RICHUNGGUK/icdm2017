{"auto_keywords": [{"score": 0.029420333683948783, "phrase": "dasa"}, {"score": 0.013716418927913226, "phrase": "incremental_reprogramming"}, {"score": 0.00481495049065317, "phrase": "reprogramming_wireless_sensor_networks"}, {"score": 0.0046797114400479135, "phrase": "crucial_technique"}, {"score": 0.004613516457919661, "phrase": "large-scale_wireless_sensor_networks"}, {"score": 0.004299455610261106, "phrase": "space_complexity"}, {"score": 0.004136044939878838, "phrase": "promising_approach"}, {"score": 0.004058180509184539, "phrase": "dissemination_cost"}, {"score": 0.003906804492585634, "phrase": "new_code"}, {"score": 0.0038515000499988673, "phrase": "old_code"}, {"score": 0.0036727235025069828, "phrase": "differencing_algorithm"}, {"score": 0.0036207206487324506, "phrase": "key_role"}, {"score": 0.0033875770020590796, "phrase": "small_delta_script"}, {"score": 0.00332375606483146, "phrase": "existing_incremental_algorithms"}, {"score": 0.003154360892955196, "phrase": "smallest_delta_size"}, {"score": 0.0029793675408245047, "phrase": "large_overhead"}, {"score": 0.002923214590192792, "phrase": "execution_time"}, {"score": 0.002895535087931938, "phrase": "memory_consumption"}, {"score": 0.0026705669656375197, "phrase": "suffix_array"}, {"score": 0.0026202187680903063, "phrase": "byte-level_comparison"}, {"score": 0.002570817338292482, "phrase": "optimal_result"}, {"score": 0.0025103699913760057, "phrase": "delta_size"}, {"score": 0.0024281181691350085, "phrase": "low_execution_overhead"}, {"score": 0.0023936956017015696, "phrase": "time_complexity"}, {"score": 0.0021352776064254195, "phrase": "optimal_algorithm"}, {"score": 0.0021049977753042253, "phrase": "lowest_time"}], "paper_keywords": ["Reprogramming", " wireless sensor networks"], "paper_abstract": "Wireless reprogramming is a crucial technique for managing large-scale wireless sensor networks (WSNs). It is, however, energy intensive to disseminate the code to enable reprogramming. Incremental reprogramming is a promising approach to reduce the dissemination cost. In incremental reprogramming, only the delta between the new code and the old code needs to be disseminated, resulting much less energy consumption. The differencing algorithm plays a key role in incremental reprogramming. It takes inputs of two successive versions of codes and generates a small delta script for dissemination. Existing incremental algorithms have several limitations. First, they do not ensure the smallest delta size for dissemination. Second, some of them may incur a large overhead in terms of execution time and memory consumption. To address these issues, we propose DASA, an efficient differencing algorithm based on suffix array. DASA performs byte-level comparison and ensure the optimal result in terms of the delta size. Moreover, DASA has a low execution overhead. The time complexity and space complexity of DASA are 0 (11 log a) and 0(n), respectively. To the best of our knowledge, DASA is the optimal algorithm with the lowest time and space complexity for reprogramming WSNs.", "paper_title": "An Efficient Differencing Algorithm for Reprogramming Wireless Sensor Networks", "paper_id": "WOS:000332680500002"}