{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_transformations"}, {"score": 0.010468888495893074, "phrase": "triple_graph_grammars"}, {"score": 0.00800685265027935, "phrase": "attributed_graph_transformation_systems"}, {"score": 0.007310214523674082, "phrase": "functional_behaviour"}, {"score": 0.005638022193098891, "phrase": "model_transformation"}, {"score": 0.004579147045265106, "phrase": "well-established_concept"}, {"score": 0.004435112270935294, "phrase": "bidirectional_model_transformations"}, {"score": 0.004374772264092067, "phrase": "driven_software_engineering"}, {"score": 0.004276016541197123, "phrase": "automatic_generation"}, {"score": 0.004237138632255772, "phrase": "operational_rules"}, {"score": 0.00419861271409079, "phrase": "forward_and_backward_model_transformations"}, {"score": 0.0037454814403672697, "phrase": "formal_categorical_foundation"}, {"score": 0.0035294580355761506, "phrase": "crucial_properties"}, {"score": 0.0032358709481309913, "phrase": "new_kind"}, {"score": 0.0032064196784562017, "phrase": "operational_rule"}, {"score": 0.003063123420705719, "phrase": "existing_results"}, {"score": 0.002993887707344862, "phrase": "local_confluence"}, {"score": 0.002926212333939311, "phrase": "additional_main_results"}, {"score": 0.0028731719610706214, "phrase": "sufficient_criteria"}, {"score": 0.00274472767672686, "phrase": "necessary_and_sufficient_condition"}, {"score": 0.0027197343489967296, "phrase": "strong_functional_behaviour"}, {"score": 0.0026220103561723066, "phrase": "polynomial_complexity"}, {"score": 0.0024706232839499524, "phrase": "complete_information_preservation"}, {"score": 0.002370955769074803, "phrase": "source_model"}, {"score": 0.002275299774554847, "phrase": "target_model"}, {"score": 0.0021537217025910356, "phrase": "well-known_model_transformation_example"}, {"score": 0.0021049977753042253, "phrase": "relational_database_models"}], "paper_keywords": [""], "paper_abstract": "Triple graph grammars (TGGs) are a well-established concept for the specification and execution of bidirectional model transformations within model driven software engineering. Their main advantage is an automatic generation of operational rules for forward and backward model transformations, which simplifies specification and enhances usability as well as consistency. In this paper we present several important results for analysing model transformations based on the formal categorical foundation of TGGs within the framework of attributed graph transformation systems. Our first main result shows that the crucial properties of correctness and completeness are ensured for model transformations. In order to analyse functional behaviour, we generate a new kind of operational rule, called a forward translation rule. We apply existing results for the analysis of local confluence for attributed graph transformation systems. As additional main results, we provide sufficient criteria for the verification of functional behaviour as well as a necessary and sufficient condition for strong functional behaviour. In fact, these conditions imply polynomial complexity for the execution of the model transformation. We also analyse information and complete information preservation of model transformations, that is, whether a source model can be reconstructed (uniquely) from the target model computed by the model transformation. We illustrate the results for the well-known model transformation example from class diagrams to relational database models.", "paper_title": "Formal analysis of model transformations based on triple graph grammars", "paper_id": "WOS:000343644000008"}