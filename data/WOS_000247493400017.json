{"auto_keywords": [{"score": 0.04835227522307673, "phrase": "development_technology"}, {"score": 0.03644451033122436, "phrase": "rule-based_programming"}, {"score": 0.025948790611858022, "phrase": "et_rules"}, {"score": 0.00481495049065317, "phrase": "component-based_software_development"}, {"score": 0.004446677711302801, "phrase": "existing_verified_components"}, {"score": 0.004339108074589304, "phrase": "target_software"}, {"score": 0.0038862297330905836, "phrase": "query-satisfied_components"}, {"score": 0.003545024951402818, "phrase": "entire_program"}, {"score": 0.0033139366449568565, "phrase": "component-based_programming"}, {"score": 0.003116913644889395, "phrase": "equivalent_transformation"}, {"score": 0.0025615908073796027, "phrase": "conventional_rule-based_programming"}, {"score": 0.002279777293967004, "phrase": "correct_system"}, {"score": 0.0022382002476510573, "phrase": "system_specification"}, {"score": 0.002210903392596343, "phrase": "et_programming"}, {"score": 0.0021049977753042253, "phrase": "conventional_cbsd"}], "paper_keywords": ["component", " computation model", " equivalent transformation", " correctness", " program construction"], "paper_abstract": "Recently, there has been increasing attention to Component-Based Software Development (CBSD). This development technology enhances productivity and reliability by combining existing verified components to construct a target software. This development technology, however, lacks methods to extract and preserve components; methods to retrieve query-satisfied components; and technologies and theories that guarantee the correctness of each component and the entire program. Considering that rule-based programming with theoretical framework provides good, theoretical supports to component-based programming and may solve these problems, this paper uses equivalent transformation (ET) programming that has advantages in the number of rules, granularity of rules, and guarantee of the correctness in each rule and the entire program over the conventional rule-based programming and discusses how to accumulate and use ET rules to, by employing ET rules as components, create a correct system from a system specification. ET programming is expected to overcome the problems the conventional CBSD and rule-based programming have.", "paper_title": "Equivalent transformation rules as components of programs", "paper_id": "WOS:000247493400017"}