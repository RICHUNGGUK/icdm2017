{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "emergent_behavior"}, {"score": 0.004621279527317074, "phrase": "complex_behavior"}, {"score": 0.004504193207111593, "phrase": "relatively_simple_interactions"}, {"score": 0.004404607484597748, "phrase": "emergent_gummy_modules"}, {"score": 0.004322967486451877, "phrase": "software_systems"}, {"score": 0.003782655283668953, "phrase": "significant_amount"}, {"score": 0.0034841647157189985, "phrase": "dedicated_attempt"}, {"score": 0.0034308688638878286, "phrase": "suitable_linguistic_abstractions"}, {"score": 0.0028807718824400697, "phrase": "current_languages"}, {"score": 0.002708399936381754, "phrase": "dedicated_linguistic_abstractions"}, {"score": 0.002357249810661667, "phrase": "gummyj_language"}, {"score": 0.0021821915946356168, "phrase": "event_processing_semantics"}, {"score": 0.002159852420283463, "phrase": "gummyj_programs"}, {"score": 0.0021377414429251647, "phrase": "uppaal_model_checker"}], "paper_keywords": ["Emergent behavior", " event-based modularization", " event-based composition", " aspect-oriented modularization", " Languages", " Design"], "paper_abstract": "Emergent behavior is generally defined as the appearance of complex behavior out of multiplicity of relatively simple interactions. Nowadays, there are various kinds of software systems that deal with detecting the emergence of certain behavior in environment, representing it in the software and providing means to manipulate the behavior. Where significant amount of research has been dedicated to develop algorithms for detecting emergent behavior, there is no dedicated attempt to provide suitable linguistic abstractions to modularize emergent behavior and its related concerns. This results in implementations that are complex and hard to maintain. In this paper, we identify three characteristic features of emergent behavior, and outline the shortcomings of current languages to properly program and modularize emergent behavior. We introduce emergent gummy modules as dedicated linguistic abstractions, which facilitate defining the appearance and disappearance conditions of emergent behavior as well as its utilization operations as one holistic module. We explain the implementation of emergent gummy modules in the GummyJ language, and illustrate that they improve the modularity of implementations. We represent the event processing semantics of GummyJ programs in UPPAAL model checker and verify their correctness.", "paper_title": "Emergent Gummy Modules", "paper_id": "WOS:000357124200003"}