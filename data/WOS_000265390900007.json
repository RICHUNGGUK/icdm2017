{"auto_keywords": [{"score": 0.04940203756018457, "phrase": "software_metrics"}, {"score": 0.039150156501511525, "phrase": "client-based_metrics"}, {"score": 0.03352284676711436, "phrase": "coherent_set"}, {"score": 0.00481495049065317, "phrase": "java_programs"}, {"score": 0.004452078350485375, "phrase": "maintenance_costs"}, {"score": 0.0044047527104545525, "phrase": "code_quality"}, {"score": 0.004357927940322685, "phrase": "emerging_view"}, {"score": 0.003916098498242888, "phrase": "design_pattern"}, {"score": 0.003383552654319383, "phrase": "new_client-based_metric_lcic"}, {"score": 0.002830839166653185, "phrase": "new_interface"}, {"score": 0.0026737455737636867, "phrase": "metric_lcic"}, {"score": 0.002654730366598922, "phrase": "java_projects"}, {"score": 0.0026264601495742295, "phrase": "eclipse_environment"}, {"score": 0.0025892330566358503, "phrase": "lcic_values"}, {"score": 0.0024281181691350085, "phrase": "measured_classes"}, {"score": 0.0022933216359142736, "phrase": "different_design_patterns"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Metrics", " Cohesion", " Refactoring", " Design patterns", " Java"], "paper_abstract": "One purpose of software metrics is to measure the quality of programs. The results can be for example used to predict maintenance costs or improve code quality. An emerging view is that if software metrics are going to be used to improve quality, they must help in finding code that should be refactored. Often refactoring or applying a design pattern is related to the role of the class to be refactored. In client-based metrics, a project gives the class a context. These metrics measure how a class is used by other classes in the context. We present a new client-based metric LCIC (Lack of Coherence in Clients), which analyses if the class being measured has a coherent set of roles in the program. Interfaces represent the roles of classes. If a class does not have a coherent set of roles, it should be refactored, or a new interface should be defined for the class. We have implemented a tool for measuring the metric LCIC for Java projects in the Eclipse environment. We calculated LCIC values for classes of several open source projects. We compare these results with results of other related metrics, and inspect the measured classes to find out what kind of refactorings are needed. We also analyse the relation of different design patterns and refactorings to our metric. Our experiments reveal the usefulness of client-based metrics to improve the quality of code. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Client-based cohesion metrics for Java programs", "paper_id": "WOS:000265390900007"}