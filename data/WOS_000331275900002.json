{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "code_bubbles"}, {"score": 0.004410938507689426, "phrase": "user_interface"}, {"score": 0.004328856052035968, "phrase": "integrated_programming_environment"}, {"score": 0.004169226023596022, "phrase": "whole_new_user_interface"}, {"score": 0.0032858981413454802, "phrase": "narrower_two-way_interface"}, {"score": 0.002688532127821979, "phrase": "different_aspects"}, {"score": 0.002447101794397243, "phrase": "resultant_architecture"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["programming environments", " plug-in architectures", " software development"], "paper_abstract": "Code Bubbles is an attempt to redefine the user interface for an integrated programming environment. As it represents a whole new user interface, implementing it as a plug-in is inherently difficult. We get around this difficulty by combining two different plug-in architectures, a standard one based on registrations and callbacks and a message-based one that puts the plug-in at arm's length and defines a narrower two-way interface. This paper describes both how we have implemented Code Bubbles as a plug-in to Eclipse and how Code Bubbles itself is implemented as a set of plug-ins representing the different aspects of the environment, using both traditional and message-based plug-in architectures as appropriate. It also shows how the resultant architecture is flexible enough to support collaboration, different back ends, and a cloud-based environment. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Plugging in and into code bubbles: the code bubbles architecture", "paper_id": "WOS:000331275900002"}