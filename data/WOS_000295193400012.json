{"auto_keywords": [{"score": 0.04799625947680518, "phrase": "standard_benchmarks"}, {"score": 0.03363896917055258, "phrase": "workload_requirements"}, {"score": 0.012580877433753674, "phrase": "system_performance"}, {"score": 0.009778571232543144, "phrase": "benchmark_method"}, {"score": 0.009210516928170332, "phrase": "test_database"}, {"score": 0.00481495049065317, "phrase": "based_workload_model"}, {"score": 0.004789839974879249, "phrase": "business_intelligence_benchmark"}, {"score": 0.004740009255053372, "phrase": "vital_tools"}, {"score": 0.004702975108536015, "phrase": "performance_measurement"}, {"score": 0.004654043854386197, "phrase": "computer_hardware"}, {"score": 0.004629768581215069, "phrase": "software_systems"}, {"score": 0.0042580715526710795, "phrase": "problem_domain"}, {"score": 0.0042358528628218045, "phrase": "test_results"}, {"score": 0.0041589926969138585, "phrase": "possible_system_performance"}, {"score": 0.0040942189695983185, "phrase": "user_domain"}, {"score": 0.004051595625804513, "phrase": "standard_problem_domain"}, {"score": 0.0040094142308666975, "phrase": "application_workload"}, {"score": 0.003957302057477724, "phrase": "standard_workload"}, {"score": 0.0038854765143440965, "phrase": "accurate_way"}, {"score": 0.0038149496209981776, "phrase": "user_problem_domain"}, {"score": 0.0037653554368382814, "phrase": "actual_problem_domain"}, {"score": 0.0035453686625290886, "phrase": "domain_boundness"}, {"score": 0.003526855696396683, "phrase": "workload_boundness"}, {"score": 0.0034628156490003775, "phrase": "ir-reproducible_performance_readings"}, {"score": 0.003382178337090809, "phrase": "domain-independent_and_workload-independent_benchmark_method"}, {"score": 0.003303412571939192, "phrase": "user_requirements"}, {"score": 0.003260446582969186, "phrase": "user-driven_workload_model"}, {"score": 0.0030220049006970317, "phrase": "actual_user_domain"}, {"score": 0.0029284999172756103, "phrase": "high-level_workload_specification_scheme"}, {"score": 0.002786315148863582, "phrase": "test_suite"}, {"score": 0.0027645030021576926, "phrase": "specification_scheme"}, {"score": 0.0025756998692888305, "phrase": "test_workload"}, {"score": 0.0025555322596460036, "phrase": "web_search"}, {"score": 0.002535522160022571, "phrase": "generic_constructs"}, {"score": 0.002522268994390574, "phrase": "main_common_carriers"}, {"score": 0.0024060573724654553, "phrase": "literature_study"}, {"score": 0.0023499703712897293, "phrase": "ten_baseline_experiments"}, {"score": 0.0022772115643656153, "phrase": "experimental_prototype"}, {"score": 0.0022299587520401747, "phrase": "experimental_results"}, {"score": 0.0021383680500215267, "phrase": "benchmark_requirements"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Data warehouse", " Data mining", " Business intelligence", " Generic construct", " Benchmark", " Workload model", " Performance measurement and evaluation"], "paper_abstract": "Benchmarks are vital tools in the performance measurement and evaluation of computer hardware and software systems. Standard benchmarks such as the TREC, TPC, SPEC, SAP, Oracle, Microsoft, IBM, Wisconsin, AS(3)AP, OO1, OO7, XOO7 benchmarks have been used to assess the system performance. These benchmarks are domain-specific in that they model typical applications and tie to a problem domain. Test results from these benchmarks are estimates of possible system performance for certain predetermined problem types. When the user domain differs from the standard problem domain or when the application workload is divergent from the standard workload, they do not provide an accurate way to measure the system performance of the user problem domain. System performance of the actual problem domain in terms of data and transactions may vary significantly from the standard benchmarks. In this research, we address the issue of domain boundness and workload boundness which results in the ir-representative and ir-reproducible performance readings. We tackle the issue by proposing a domain-independent and workload-independent benchmark method which is developed from the perspective of the user requirements. We present a user-driven workload model to develop a benchmark in a process of workload requirements representation, transformation, and generation. We aim to create a more generalized and precise evaluation method which derives test suites from the actual user domain and application. The benchmark method comprises three main components. They are a high-level workload specification scheme, a translator of the scheme, and a set of generators to generate the test database and the test suite. The specification scheme is used to formalize the workload requirements. The translator is used to transform the specification. The generator is used to produce the test database and the test workload. In web search, the generic constructs are main common carriers we adopt to capture and compose the workload requirements. We determine the requirements via the analysis of literature study. In this study, we have conducted ten baseline experiments to validate the feasibility and validity of the benchmark method. An experimental prototype is built to execute these experiments. Experimental results demonstrate that the method is capable of modeling the standard benchmarks as well as more general benchmark requirements. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "A generic construct based workload model for business intelligence benchmark", "paper_id": "WOS:000295193400012"}