{"auto_keywords": [{"score": 0.04808171687412103, "phrase": "static_analysis"}, {"score": 0.012203711028741468, "phrase": "parameter_configurations"}, {"score": 0.00481495049065317, "phrase": "dynamic_analysis"}, {"score": 0.004693476992528682, "phrase": "good_abstractions"}, {"score": 0.003958049372486465, "phrase": "concrete_trace"}, {"score": 0.003117307618682836, "phrase": "constructive_algorithms"}, {"score": 0.0021968238865548812, "phrase": "six_java_programs"}, {"score": 0.0021049977753042253, "phrase": "thread-escape_analysis"}], "paper_keywords": ["Languages", " Verification", " Parametrised Static Analysis", " Testing", " Thread-Escape Analysis", " Points-to Analysis", " Necessary-Condition Problem"], "paper_abstract": "We present a framework for leveraging dynamic analysis to find good abstractions for static analysis. A static analysis in our framework is parametrised. Our main insight is to directly and efficiently compute from a concrete trace, a necessary condition on the parameter configurations to prove a given query, and thereby prune the space of parameter configurations that the static analysis must consider. We provide constructive algorithms for two instance analyses in our framework: a flow- and context-sensitive thread-escape analysis and a flow-and context-insensitive points-to analysis. We show the efficacy of these analyses, and our approach, on six Java programs comprising two million bytecodes: the thread-escape analysis resolves 80% of queries on average, disproving 28% and proving 52%; the points-to analysis resolves 99% of queries on average, disproving 29% and proving 70%.", "paper_title": "Abstractions from Tests", "paper_id": "WOS:000300548100029"}