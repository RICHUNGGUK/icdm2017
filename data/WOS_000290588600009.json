{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "disjunctive_cuts"}, {"score": 0.004690305164360866, "phrase": "mixed-integer_linear_programs"}, {"score": 0.004479855062309818, "phrase": "egon_balas"}, {"score": 0.003954837422946628, "phrase": "main_ingredients"}, {"score": 0.003877737556673229, "phrase": "disjunctive_cut_separation_procedure"}, {"score": 0.003423042581201533, "phrase": "miplib_library"}, {"score": 0.003334309053314909, "phrase": "alternative_normalization_conditions"}, {"score": 0.0027379609683723938, "phrase": "-weak_cuts"}, {"score": 0.0024325244760735566, "phrase": "new_normalization_condition"}, {"score": 0.0023538840032613535, "phrase": "computational_behavior"}, {"score": 0.0021610874773389096, "phrase": "small_numerical_examples"}], "paper_keywords": [""], "paper_abstract": "Disjunctive cuts for Mixed-Integer Linear Programs (MIPs) were introduced by Egon Balas in the late 1970s and have been successfully exploited in practice since the late 1990s. In this paper we investigate the main ingredients of a disjunctive cut separation procedure, and analyze their impact on the quality of the root-node bound for a set of instances taken from MIPLIB library. We compare alternative normalization conditions, and try to better understand their role. In particular, we point out that constraints that become redundant (because of the disjunction used) can produce over-weak cuts, and analyze this property with respect to the normalization used. Finally, we introduce a new normalization condition and analyze its theoretical properties and computational behavior. Along the way, we make use of a number of small numerical examples to illustrate some basic (and often misinterpreted) disjunctive programming features.", "paper_title": "On the separation of disjunctive cuts", "paper_id": "WOS:000290588600009"}