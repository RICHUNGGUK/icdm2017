{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "architectural_decisions"}, {"score": 0.004652016085325825, "phrase": "system_requirements"}, {"score": 0.004513957235071457, "phrase": "software_architects"}, {"score": 0.004379977556546879, "phrase": "broadly_scoped_impact"}, {"score": 0.004323776691055635, "phrase": "software_architecture"}, {"score": 0.004159446063902181, "phrase": "architecting_process"}, {"score": 0.003967021436047945, "phrase": "architectural_elements"}, {"score": 0.003916098498242888, "phrase": "multiple_views"}, {"score": 0.0038492126993451337, "phrase": "modular_representation"}, {"score": 0.003767203575060969, "phrase": "crucial_choices"}, {"score": 0.0034562118159899772, "phrase": "architectural_breakdowns"}, {"score": 0.0033971539563683174, "phrase": "misinformed_architectural_evaluation"}, {"score": 0.003324743991757282, "phrase": "trade-off_analysis"}, {"score": 0.0031982609080278643, "phrase": "architectural_documentation_approach"}, {"score": 0.0030898642396380662, "phrase": "natural_way"}, {"score": 0.0030501665085457606, "phrase": "widely-scoped_design_decisions"}, {"score": 0.0029089095588612007, "phrase": "simple_high-level_notation"}, {"score": 0.002668582249630492, "phrase": "final_architectural_decomposition"}, {"score": 0.0026342827320931937, "phrase": "different_views"}, {"score": 0.0023855210798264205, "phrase": "heterogeneous_forms"}, {"score": 0.0023650305205893353, "phrase": "crosscutting_architecture_decisions"}, {"score": 0.0022749744354271816, "phrase": "architecture_modularity_analysis"}, {"score": 0.002197801146305747, "phrase": "downstream_traceability"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["architectural decisions", " modularity", " aspect-oriented software development", " early aspects"], "paper_abstract": "When reflecting upon driving system requirements such as security and availability, software architects often face decisions that have a broadly scoped impact on the software architecture. These decisions are the core of the architecting process because they typically have implications intertwined in a multitude of architectural elements and across multiple views. Without a modular representation and management of those crucial choices, architects cannot properly communicate, assess and reason about their crosscutting effects. The result is a number of architectural breakdowns, such as misinformed architectural evaluation, time-consuming trade-off analysis and unmanageable traceability. This paper presents an architectural documentation approach in which aspects are exploited as a natural way to capture widely-scoped design decisions in a modular fashion. The approach consists of a simple high-level notation to describe crosscutting decisions, and a supplementary language that allows architects to formally define how such architectural decisions affect the final architectural decomposition according to different views. On the basis of two case studies, we have systematically assessed to what extent our approach: (i) supports the description of heterogeneous forms of crosscutting architecture decisions, (ii) improves the support for architecture modularity analysis, and (iii) enhances upstream and downstream traceability of crosscutting architectural decisions. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Mastering crosscutting architectural decisions with aspects", "paper_id": "WOS:000314926900003"}