{"auto_keywords": [{"score": 0.04423467024884345, "phrase": "web_applications"}, {"score": 0.036866004068638804, "phrase": "possible_values"}, {"score": 0.0364826355522259, "phrase": "string_variables"}, {"score": 0.004815658224005525, "phrase": "automata"}, {"score": 0.004636340567075841, "phrase": "vulnerability_detection"}, {"score": 0.004440277230269978, "phrase": "crucial_problem"}, {"score": 0.004392565073466714, "phrase": "computer_security"}, {"score": 0.004345363360869553, "phrase": "string_operations"}, {"score": 0.004161553532799662, "phrase": "user_input"}, {"score": 0.003985487777785535, "phrase": "security_vulnerabilities"}, {"score": 0.0038375280115736958, "phrase": "automata-based_approach"}, {"score": 0.0036159990127332315, "phrase": "deterministic_finite_automata"}, {"score": 0.0033888405252810927, "phrase": "reachability_analysis"}, {"score": 0.0031417377608722, "phrase": "program_point"}, {"score": 0.002992456421856031, "phrase": "potential_attack_strings"}, {"score": 0.0028348690177346448, "phrase": "presented_techniques"}, {"score": 0.002759210239469272, "phrase": "stranger"}, {"score": 0.002599763359352916, "phrase": "string-related_security_vulnerabilities"}, {"score": 0.0025717957651433033, "phrase": "php"}, {"score": 0.002222102813520549, "phrase": "proper_sanitization_routines"}], "paper_keywords": ["String analysis", " Automated verification", " Web application security", " Vulnerability analysis"], "paper_abstract": "Verifying string manipulating programs is a crucial problem in computer security. String operations are used extensively within web applications to manipulate user input, and their erroneous use is the most common cause of security vulnerabilities in web applications. We present an automata-based approach for symbolic analysis of string manipulating programs. We use deterministic finite automata (DFAs) to represent possible values of string variables. Using forward reachability analysis we compute an over-approximation of all possible values that string variables can take at each program point. Intersecting these with a given attack pattern yields the potential attack strings if the program is vulnerable. Based on the presented techniques, we have implemented Stranger, an automata-based string analysis tool for detecting string-related security vulnerabilities in PHP applications. We evaluated Stranger on several open-source Web applications including one with 350,000+ lines of code. Stranger is able to detect known/unknown vulnerabilities, and, after inserting proper sanitization routines, prove the absence of vulnerabilities with respect to given attack patterns.", "paper_title": "Automata-based symbolic string analysis for vulnerability detection", "paper_id": "WOS:000330828500002"}