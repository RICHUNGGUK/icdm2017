{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "temporal_properties"}, {"score": 0.00477190623242136, "phrase": "generic_categories"}, {"score": 0.004461051281091779, "phrase": "broad_classes"}, {"score": 0.004421156723819163, "phrase": "syntactically_identifiable_temporal_properties"}, {"score": 0.0042459818200777846, "phrase": "existence_properties"}, {"score": 0.0034841647157189985, "phrase": "relatively_simple_verification_techniques"}, {"score": 0.0031702173541386888, "phrase": "new_properties"}, {"score": 0.002936849401568391, "phrase": "semantic_transformation"}, {"score": 0.0028715299874549245, "phrase": "state_graphs"}, {"score": 0.002845809662579165, "phrase": "underlying_systems"}, {"score": 0.0028076592725295646, "phrase": "generic_procedure"}, {"score": 0.0026126405272417783, "phrase": "existing_code_analysis_systems"}, {"score": 0.00257760787870709, "phrase": "static_code_analysis"}, {"score": 0.0025545134727682716, "phrase": "dataflow_techniques"}, {"score": 0.00247529638625566, "phrase": "identification_procedures"}, {"score": 0.0024202176034746337, "phrase": "property_classes"}, {"score": 0.002387758958649797, "phrase": "needed_foundations"}, {"score": 0.0023346234464901978, "phrase": "automatic_code_analysis_modules"}, {"score": 0.0023033100935570755, "phrase": "aspect_categories"}, {"score": 0.0022520496048464406, "phrase": "simpler_proofs"}, {"score": 0.0021049977753042253, "phrase": "software_development"}], "paper_keywords": ["aspect specification", " spectative", " regulative", " invasive", " aspect categories", " dataflow analysis", " aspect verification"], "paper_abstract": "Generic categories of aspects are described, and their potential value is explained. For some categories, broad classes of syntactically identifiable temporal properties, such as safety, liveness, or existence properties, are guaranteed to hold for a system with any aspect of the category woven into it, if the property was true in the system without the aspect. Thus classes of properties preserved by the aspect are defined. Moreover, relatively simple verification techniques are shown to hold for some classes of temporal properties over systems augmented with some other categories of aspects. Verification of new properties added by the aspects is also considered. Each category is defined in terms of the semantic transformation it makes to the state graphs of underlying systems. A generic procedure to identify syntactically when an aspect belongs to a category is described and related to existing code analysis systems that use static code analysis and dataflow techniques. The definitions of categories, identification procedures, and lemmas about property classes provide the needed foundations that justify and motivate automatic code analysis modules to identify aspect categories. The categories enable simpler proofs of correctness than would otherwise be possible, and exploiting their characteristics can aid in software development.", "paper_title": "Aspect categories and classes of temporal properties", "paper_id": "WOS:000236493800004"}