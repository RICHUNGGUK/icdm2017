{"auto_keywords": [{"score": 0.03368806805252522, "phrase": "reduced_certificate"}, {"score": 0.015488044555915768, "phrase": "acc"}, {"score": 0.012650130582521337, "phrase": "single_pass"}, {"score": 0.00481495049065317, "phrase": "abstraction-carrying_code"}, {"score": 0.004602773636967002, "phrase": "mobile_code_safety"}, {"score": 0.004547782274166457, "phrase": "code_supplier"}, {"score": 0.004413148455148519, "phrase": "abstract_model"}, {"score": 0.004282483226549419, "phrase": "predefined_safety_policy"}, {"score": 0.004193316635088688, "phrase": "safety_certificate"}, {"score": 0.004081385289516914, "phrase": "fixpoint_analyzer"}, {"score": 0.00396050388346298, "phrase": "code_consumer"}, {"score": 0.0037631343866066855, "phrase": "abstract_interpretation-based_checker"}, {"score": 0.0034178160236983226, "phrase": "intuitive_idea"}, {"score": 0.0033465923623290034, "phrase": "certificate_information"}, {"score": 0.002976019715894587, "phrase": "full_certificate"}, {"score": 0.002861822702206142, "phrase": "generic_analysis_algorithm"}, {"score": 0.0028360962841331634, "phrase": "necessary_extensions"}, {"score": 0.0025371413754846474, "phrase": "sufficient_conditions"}, {"score": 0.0021433882705962034, "phrase": "ciaopp_system"}, {"score": 0.002124106476971252, "phrase": "experimental_results"}], "paper_keywords": ["proof-carrying code", " abstraction-carrying code", " static analysis", " reduced certificates", " mobile code"], "paper_abstract": "Carrying Code (ACC) has recently been proposed as a framework for mobile code safety in which the code supplier provides a program together with an abstraction (or abstract model of the program) whose validity entails compliance with a predefined safety policy. The abstraction plays thus the role of safety certificate and its generation is carried out automatically by a fixpoint analyzer. The advantage of providing a (fixpoint) abstraction to the code consumer is that its validity is checked in a single pass (i.e., one iteration) of an abstract interpretation-based checker. A main challenge to make ACC useful in practice is to reduce the size of certificates as much as possible while at the same time not increasing checking time. The intuitive idea is to only include in the certificate information that the checker is unable to reproduce without iterating. We introduce the notion of reduced certificate which characterizes the subset of the abstraction which a checker needs in order to validate (and re-construct) the full certificate in a single pass. Based on this notion, we instrument a generic analysis algorithm with the necessary extensions in order to identify the information relevant to the checker. Interestingly, the fact that the reduced certificate omits (parts of) the abstraction has implications in the design of the checker. We provide the sufficient conditions which allow us to ensure that (1) if the checker succeeds in validating the certificate, then the certificate is valid for the program (correctness) and (2) the checker will succeed for any reduced certificate which is valid (completeness). Our approach has been implemented and benchmarked within the CiaoPP system. The experimental results show that our proposal is able to greatly reduce the size of certificates in practice.", "paper_title": "Certificate size reduction in abstraction-carrying code", "paper_id": "WOS:000304364400001"}