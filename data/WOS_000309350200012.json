{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "gpu"}, {"score": 0.005959637223379936, "phrase": "bfs"}, {"score": 0.00481495049065317, "phrase": "breadth-first_search"}, {"score": 0.004518442937844318, "phrase": "graph_traversal"}, {"score": 0.004064117897000019, "phrase": "parallel_computations"}, {"score": 0.003978866233891427, "phrase": "work_distribution"}, {"score": 0.0037336520904376687, "phrase": "recent_work"}, {"score": 0.003578600071301459, "phrase": "gpu_sparse_graph_traversal"}, {"score": 0.0033817999428800457, "phrase": "asymptotically_inefficient_algorithms"}, {"score": 0.0032184697893776052, "phrase": "non-trivial_diameter"}, {"score": 0.00310664242361199, "phrase": "bfs_parallelization"}, {"score": 0.0030414140732789186, "phrase": "fine-grained_task_management"}, {"score": 0.0029775511937434797, "phrase": "efficient_prefix_sum"}, {"score": 0.0027546167254869493, "phrase": "excellent_performance"}, {"score": 0.0027159094186967247, "phrase": "diverse_graphs"}, {"score": 0.002658863179011018, "phrase": "traversal_rates"}, {"score": 0.002548331088496964, "phrase": "traversed_edges"}, {"score": 0.0024772013657695896, "phrase": "single_and_quad-gpu_configurations"}], "paper_keywords": ["Algorithms", " performance", " Breadth-first search", " GPU", " graph algorithms", " parallel algorithms", " prefix sum", " graph traversal", " sparse graph"], "paper_abstract": "Breadth-first search (BFS) is a core primitive for graph traversal and a basis for many higher-level graph analysis algorithms. It is also representative of a class of parallel computations whose memory accesses and work distribution are both irregular and data-dependent. Recent work has demonstrated the plausibility of GPU sparse graph traversal, but has tended to focus on asymptotically inefficient algorithms that perform poorly on graphs with non-trivial diameter. We present a BFS parallelization focused on fine-grained task management constructed from efficient prefix sum that achieves an asymptotically optimal O(|V|+|E|) work complexity. Our implementation delivers excellent performance on diverse graphs, achieving traversal rates in excess of 3.3 billion and 8.3 billion traversed edges per second using single and quad-GPU configurations, respectively. This level of performance is several times faster than state-of-the-art implementations both CPU and GPU platforms.", "paper_title": "Scalable GPU Graph Traversal", "paper_id": "WOS:000309350200012"}