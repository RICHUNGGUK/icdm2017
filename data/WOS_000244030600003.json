{"auto_keywords": [{"score": 0.038906160240873275, "phrase": "propositional_formulas"}, {"score": 0.004594300910528425, "phrase": "lin"}, {"score": 0.004508731327037773, "phrase": "zhao"}, {"score": 0.004261617028111862, "phrase": "nondisjunctive_logic_program"}, {"score": 0.003771631577951067, "phrase": "equivalent_set"}, {"score": 0.0031845067058084583, "phrase": "original_program"}, {"score": 0.0025892330566358503, "phrase": "computational_complexity"}, {"score": 0.002248366278757655, "phrase": "equivalent_translation"}, {"score": 0.0022064376000055764, "phrase": "logic_programs"}, {"score": 0.0021049977753042253, "phrase": "significant_increase"}], "paper_keywords": ["theory", " answer sets", " loop formulas", " P-completeness", " stable models"], "paper_abstract": "A theorem by Lin and Zhao shows how to turn any nondisjunctive logic program, understood in accordance with the answer set semantics, into an equivalent set of propositional formulas. The set of formulas generated by this process can be significantly larger than the original program. In this article we show ( assuming P not subset of. NC1/poly, a conjecture from the theory of computational complexity that is widely believed to be true) that this is inevitable: any equivalent translation from logic programs to propositional formulas involves a significant increase in size.", "paper_title": "Why are there so many loop formulas?", "paper_id": "WOS:000244030600003"}