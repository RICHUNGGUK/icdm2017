{"auto_keywords": [{"score": 0.03721946204790023, "phrase": "index_structures"}, {"score": 0.012138725433614118, "phrase": "relational_query_processor"}, {"score": 0.00481495049065317, "phrase": "xml_twigs"}, {"score": 0.0047732596509542135, "phrase": "relational_query_processors"}, {"score": 0.004530552828603269, "phrase": "xml_path_expressions"}, {"score": 0.0044524122425287005, "phrase": "existing_xml_path_indices"}, {"score": 0.0041170581247889654, "phrase": "separate_index"}, {"score": 0.004081385289516914, "phrase": "node_content"}, {"score": 0.003941746077126688, "phrase": "simple_path_expressions"}, {"score": 0.0038906171474520756, "phrase": "root-to-leaf_paths"}, {"score": 0.0035974243349266894, "phrase": "unified_framework"}, {"score": 0.003129509028432954, "phrase": "different_space-time_tradeoffs"}, {"score": 0.0030092466988044814, "phrase": "xml"}, {"score": 0.0029830992938695007, "phrase": "path_expressions"}, {"score": 0.002893505913503472, "phrase": "value_conditions"}, {"score": 0.0027104531025934865, "phrase": "access_methods"}, {"score": 0.002675252546913683, "phrase": "underlying_relational_database_system"}, {"score": 0.002594880866651459, "phrase": "experimental_evaluation"}, {"score": 0.0025500402081330394, "phrase": "performance_tradeoff"}, {"score": 0.0025279105573394727, "phrase": "index_space"}, {"score": 0.0025059724686541263, "phrase": "matching_time"}, {"score": 0.002473420909291381, "phrase": "experimental_results"}, {"score": 0.0023990982005125763, "phrase": "magnitude_improvement"}, {"score": 0.002347378595930709, "phrase": "twig_queries"}, {"score": 0.0022967713922705, "phrase": "higher_space_cost"}, {"score": 0.002237477619351199, "phrase": "previously_proposed_xml_path_indices"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["XML", " index", " relational database"], "paper_abstract": "Various index structures have been proposed to speed up the evaluation of XML path expressions. However, existing XML path indices suffer from at least one of three limitations: they focus only on indexing the structure (relying on a separate index for node content), they are useful only for simple path expressions such as root-to-leaf paths, or they cannot be tightly integrated with a relational query processor. Moreover, there is no unified framework to compare these index structures. In this paper, we present a framework defining a family of index structures that includes most existing XML path indices. We also propose two novel index structures in this family, with different space-time tradeoffs, that are effective for the evaluation of XML branching path expressions (i.e., twigs) with value conditions. We also show how this family of index structures can be implemented using the access methods of the underlying relational database system. Finally, we present an experimental evaluation that shows the performance tradeoff between index space and matching time. The experimental results show that our novel indices achieve orders of magnitude improvement in performance for evaluating twig queries, albeit at a higher space cost, over the use of previously proposed XML path indices that can be tightly integrated with a relational query processor. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Index structures for matching XML twigs using relational query processors", "paper_id": "WOS:000244268200003"}