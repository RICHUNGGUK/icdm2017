{"auto_keywords": [{"score": 0.02776862038728529, "phrase": "qfq"}, {"score": 0.00481495049065317, "phrase": "efficient_packet_scheduling_with_tight_guarantees"}, {"score": 0.004777917315737992, "phrase": "packet_scheduling"}, {"score": 0.004526503177267299, "phrase": "tight_bandwidth"}, {"score": 0.004491678520807451, "phrase": "delay_guarantees"}, {"score": 0.00445712058827745, "phrase": "high_packet_rates"}, {"score": 0.004388796812234033, "phrase": "near-optimal_service_guarantees"}, {"score": 0.00415777266387528, "phrase": "timestamp_rounding"}, {"score": 0.004125773078637226, "phrase": "flow_grouping"}, {"score": 0.0040002088320302935, "phrase": "even_the_two_best_proposals"}, {"score": 0.0039085400187964196, "phrase": "per-packet_cost_component"}, {"score": 0.0035076666315744525, "phrase": "actual_execution_time"}, {"score": 0.0032972747743006603, "phrase": "quick_fair_queueing"}, {"score": 0.0031477782772867655, "phrase": "near-optimal_guarantees"}, {"score": 0.0030166837276747816, "phrase": "truly_constant_cost"}, {"score": 0.002891032998395276, "phrase": "packet_length"}, {"score": 0.0028576796380512157, "phrase": "qfq_algorithm"}, {"score": 0.0027706013216537042, "phrase": "data_structures"}, {"score": 0.0026347074232350503, "phrase": "production-quality_implementations"}, {"score": 0.0025054621733192283, "phrase": "detailed_comparative_performance_analysis"}, {"score": 0.0023188652648490874, "phrase": "absolute_terms"}, {"score": 0.0022744242010653997, "phrase": "low-end_workstation"}, {"score": 0.0021378464667924646, "phrase": "drr"}], "paper_keywords": ["Algorithms", " communication systems", " computer network performance", " data structures", " packet scheduling"], "paper_abstract": "Packet scheduling, together with classification, is one of the most expensive processing steps in systems providing tight bandwidth and delay guarantees at high packet rates. Schedulers with near-optimal service guarantees and O(1) time complexity have been proposed in the past, using techniques such as timestamp rounding and flow grouping to keep their execution time small. However, even the two best proposals in this family have a per-packet cost component that is linear either in the number of groups or in the length of the packet being transmitted. Furthermore, no studies are available on the actual execution time of these algorithms. In this paper we make two contributions. First, we present Quick Fair Queueing (QFQ), a new O(1) scheduler that provides near-optimal guarantees and is the first to achieve that goal with a truly constant cost also with respect to the number of groups and the packet length. The QFQ algorithm has no loops and uses very simple instructions and data structures that contribute to its speed of operation. Second, we have developed production-quality implementations of QFQ and of its closest competitors, which we use to present a detailed comparative performance analysis of the various algorithms. Experiments show that QFQ fulfills our expectations, outperforming the other algorithms in the same class. In absolute terms, even on a low-end workstation, QFQ takes about 110 ns for an enqueue()/dequeue() pair (only twice the time of DRR, but with much better service guarantees).", "paper_title": "QFQ: Efficient Packet Scheduling With Tight Guarantees", "paper_id": "WOS:000320605900010"}