{"auto_keywords": [{"score": 0.02855498861512644, "phrase": "sisa"}, {"score": 0.00481495049065317, "phrase": "real-time_object-oriented_models"}, {"score": 0.004649474569983707, "phrase": "extremely_complicated_software"}, {"score": 0.004529093447865156, "phrase": "interrelated_components"}, {"score": 0.0044118153390803405, "phrase": "object-oriented_design_methodologies"}, {"score": 0.0042415434489566995, "phrase": "object-oriented_model"}, {"score": 0.00397217701571219, "phrase": "designed_objects"}, {"score": 0.0037198532511087566, "phrase": "real-time_performance"}, {"score": 0.003671338229632309, "phrase": "resultant_system"}, {"score": 0.0036393456309815166, "phrase": "response_times"}, {"score": 0.003607630811220324, "phrase": "real-time_guarantees"}, {"score": 0.003529543381704363, "phrase": "innate_discrepancies"}, {"score": 0.0031223774204093713, "phrase": "scenario-based_implementation_synthesis_architecture"}, {"score": 0.0028108690791085536, "phrase": "run-time_system_architecture"}, {"score": 0.0026552818091968543, "phrase": "optimal_response_time"}, {"score": 0.0025750928944698673, "phrase": "smallest_possible_number"}, {"score": 0.002443206010337041, "phrase": "rosert_development_tool"}, {"score": 0.0023798115577749225, "phrase": "existing_industrial_pbx"}, {"score": 0.002287783663138828, "phrase": "experimental_results"}, {"score": 0.002228412982799273, "phrase": "best_known_conventional_techniques"}, {"score": 0.0021993066642488237, "phrase": "maximum_response_times"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["object-oriented real-time system design", " embedded software development methodology", " automated multitasking code synthesis", " object-oriented modeling tools", " unified modeling language (UML)"], "paper_abstract": "Contemporary embedded systems quite often employ extremely complicated software consisting of a number of interrelated components, and this has made object-oriented design methodologies widely used in practice. To implement an object-oriented model in given target hardware, it is imperative to derive a set of tasks from the designed objects. This process of determining tasks and the events they handle greatly influences the real-time performance of the resultant system including response times and real-time guarantees. However, the innate discrepancies between objects and tasks make this exceedingly difficult, and many developers are forced to find their task sets through trial and error. In this paper, we propose Scenario-based Implementation Synthesis Architecture (SISA), an architecture consisting of a method for deriving a task set from a given object-oriented model and the development tools and run-time system architecture to support the method. A system developed with SISA guarantees the optimal response time for each event while deriving the smallest possible number of tasks. We have fully implemented SISA by extending the RoseRT development tool and applied it to an existing industrial PBX (private branch exchange) system. The experimental results show that SISA outperforms the best known conventional techniques by reducing maximum response times an average of 30.3%. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Scenario-based multitasking for real-time object-oriented models", "paper_id": "WOS:000239751500006"}