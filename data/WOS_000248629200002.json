{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ad_hoc_aggregate_queries"}, {"score": 0.019459051315461964, "phrase": "data_stream"}, {"score": 0.01682054076746509, "phrase": "pat"}, {"score": 0.0059440539945281295, "phrase": "transient_segment"}, {"score": 0.0047051051659828275, "phrase": "prefix_aggregate_trees"}, {"score": 0.004619027561771169, "phrase": "business_applications"}, {"score": 0.004555499634179394, "phrase": "trading_management"}, {"score": 0.004513631630494221, "phrase": "financial_institutions"}, {"score": 0.004153647187175639, "phrase": "full_data_cube"}, {"score": 0.0041154571996523505, "phrase": "even_its_compression"}, {"score": 0.003822263046602146, "phrase": "previous_studies"}, {"score": 0.003787108326100196, "phrase": "approximate_methods"}, {"score": 0.003752275718257509, "phrase": "continuous_aggregate_queries"}, {"score": 0.0036496814103475174, "phrase": "accurate_answers"}, {"score": 0.0035010071030752883, "phrase": "novel_prefix_aggregate_tree"}, {"score": 0.0034052594710793664, "phrase": "online_warehousing_data_streams"}, {"score": 0.0031918759137610523, "phrase": "historical_segment"}, {"score": 0.00309023627455429, "phrase": "traditional_data_warehouse"}, {"score": 0.0024409345168575833, "phrase": "pat_costs"}, {"score": 0.002363150587804677, "phrase": "fully_materialized_data_cube"}, {"score": 0.0023305762840188145, "phrase": "query_answering_time"}], "paper_keywords": ["data warehousing", " data cube", " data stream", " online analytic processing (OLAP)", " aggregate query"], "paper_abstract": "In some business applications such as trading management in financial institutions, it is required to accurately answer ad hoc aggregate queries over data streams. Materializing and incrementally maintaining a full data cube or even its compression or approximation over a data stream is often computationally prohibitive. On the other hand, although previous studies proposed approximate methods for continuous aggregate queries, they cannot provide accurate answers. In this paper, we develop a novel prefix aggregate tree (PAT) structure for online warehousing data streams and answering ad hoc aggregate queries. Often, a data stream can be partitioned into the historical segment, which is stored in a traditional data warehouse, and the transient segment, which can be stored in a PAT to answer ad hoc aggregate queries. The size of a PAT is linear in the size of the transient segment, and only one scan of the data stream is needed to create and incrementally maintain a PAT. Although the query answering using PAT costs more than the case of a fully materialized data cube, the query answering time is still kept linear in the size of the transient segment. Our extensive experimental results on both synthetic and real data sets illustrate the efficiency and the scalability of our design.", "paper_title": "Answering ad hoc aggregate queries from data streams using prefix aggregate trees", "paper_id": "WOS:000248629200002"}