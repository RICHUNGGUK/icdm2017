{"auto_keywords": [{"score": 0.03268841790136034, "phrase": "smt"}, {"score": 0.00481495049065317, "phrase": "sat_and_sat_modulo_theories"}, {"score": 0.004734448316824488, "phrase": "abstract_davis-putnam-logemann-loveland_procedure"}, {"score": 0.004577440795549049, "phrase": "abstract_dpll"}, {"score": 0.004171891198117439, "phrase": "practical_dpll_algorithms"}, {"score": 0.004016485454498076, "phrase": "simple_way"}, {"score": 0.0037737821324409734, "phrase": "smt."}, {"score": 0.003738502710504415, "phrase": "modern_dpll_implementations"}, {"score": 0.0034944094552943, "phrase": "satisfiability_modulo_background_theories"}, {"score": 0.0033218213825698417, "phrase": "so-called_lazy_approach"}, {"score": 0.002914288956035066, "phrase": "specialized_solver"}, {"score": 0.002735392281320413, "phrase": "high-level_design"}, {"score": 0.00257831812581194, "phrase": "theory_propagation"}, {"score": 0.002450864311898833, "phrase": "industrial_applications"}, {"score": 0.0021049977753042253, "phrase": "better_scaling_properties"}], "paper_keywords": ["theory", " verification", " SAT solvers", " Satisfiability Modulo Theories"], "paper_abstract": "We first introduce Abstract DPLL, a rule-based formulation of the Davis-Putnam-Logemann-Loveland (DPLL) procedure for propositional satisfiability. This abstract framework allows one to cleanly express practical DPLL algorithms and to formally reason about them in a simple way. Its properties, such as soundness, completeness or termination, immediately carry over to the modern DPLL implementations with features such as backjumping or clause learning. We then extend the framework to Satisfiability Modulo background Theories (SMT) and use it to model several variants of the so-called lazy approach for SMT. In particular, we use it to introduce a few variants of a new, efficient and modular approach for SMT based on a general DPLL(X) engine, whose parameter X can be instantiated with a specialized solver Solver(T) for a given theory T, thus producing a DPLL(T) system. We describe the high-level design of DPLL(X) and its cooperation with Solver(T), discuss the role of theory propagation, and describe different DPLL(T) strategies for some theories arising in industrial applications. Our extensive experimental evidence, summarized in this article, shows that DPLL(T) systems can significantly outperform the other state-of-the-art tools, frequently even in orders of magnitude, and have better scaling properties.", "paper_title": "Solving SAT and SAT modulo theories: From an abstract Davis-Putnam-Logemann-Loveland procedure to DPLL(T)", "paper_id": "WOS:000244375500003"}