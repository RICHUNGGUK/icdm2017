{"auto_keywords": [{"score": 0.04650334340899586, "phrase": "transformation_definitions"}, {"score": 0.00481495049065317, "phrase": "rule-based_modularization"}, {"score": 0.004753194996637899, "phrase": "model_transformation_languages"}, {"score": 0.004398872331144531, "phrase": "current_rule-based_model_transformation_languages"}, {"score": 0.00415050117148714, "phrase": "modular_units"}, {"score": 0.003694884775158077, "phrase": "generic_transformation_functionality"}, {"score": 0.0032259472087775138, "phrase": "identified_units"}, {"score": 0.003163985877966426, "phrase": "transformation_language"}, {"score": 0.0031032109441552287, "phrase": "proper_modular_constructs"}, {"score": 0.0028346293790895024, "phrase": "different_transformation_techniques"}, {"score": 0.0027622407190589326, "phrase": "explicit_and_implicit_rule_calls"}, {"score": 0.0026743419827100225, "phrase": "rule_inheritance"}, {"score": 0.002380381895973937, "phrase": "current_languages"}, {"score": 0.0023346234464901978, "phrase": "reasonably_full_set"}, {"score": 0.002304606411453748, "phrase": "modular_constructs"}, {"score": 0.0021883400011393564, "phrase": "composition_tasks"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["model transformation", " transformation language", " modularity", " reusability", " adaptability", " ATL"], "paper_abstract": "This paper studies ways for modularizing transformation definitions in current rule-based model transformation languages. Two scenarios are shown in which the modular units are identified on the basis of relations between source and target metamodels and on the base of generic transformation functionality. Both scenarios justify modularization by requiring adaptability and reusability in transformation definitions. To enable representation and composition of the identified units, a transformation language must provide proper modular constructs and mechanisms for their integration. We evaluate several implementations of the scenarios by applying different transformation techniques: usage of explicit and implicit rule calls, and usage of rule inheritance. ATLAS Transformation Language (ATL) is used to illustrate these implementations. The experience with these scenarios shows that current languages provide a reasonably full set of modular constructs but may have problems in handling some composition tasks. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Rule-based modularization in model transformation languages illustrated with ATL", "paper_id": "WOS:000251771200003"}