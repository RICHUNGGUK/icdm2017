{"auto_keywords": [{"score": 0.036621596446778835, "phrase": "optimal_fcfs_base-stock_policy"}, {"score": 0.00481495049065317, "phrase": "industrial-scale_assemble"}, {"score": 0.004746558955503364, "phrase": "order_systems"}, {"score": 0.004679134285953932, "phrase": "novel_stochastic_programming"}, {"score": 0.00464601904223518, "phrase": "sp"}, {"score": 0.00449859196755507, "phrase": "inventory_control"}, {"score": 0.004217998654053147, "phrase": "new_insights"}, {"score": 0.0040262522882015175, "phrase": "continuous_time_model"}, {"score": 0.00398325070540449, "phrase": "base-stock_levels"}, {"score": 0.003829455440282146, "phrase": "product-specific_backorder_costs"}, {"score": 0.0035141291835319682, "phrase": "asymptotic_optimality_gap"}, {"score": 0.003306559295382181, "phrase": "common_heuristics"}, {"score": 0.0031561148083611647, "phrase": "fcfs_assumption"}, {"score": 0.003111211706454155, "phrase": "first_question"}, {"score": 0.003023307182674672, "phrase": "simultaneous_stock-outs"}, {"score": 0.003001805132473867, "phrase": "iss"}, {"score": 0.0028651539073698525, "phrase": "ibm"}, {"score": 0.002844651110763248, "phrase": "dell"}, {"score": 0.0027941308786390033, "phrase": "iss_performance"}, {"score": 0.002686124293881678, "phrase": "average_newsvendor"}, {"score": 0.0026670619291709755, "phrase": "nv"}, {"score": 0.0026008598632891837, "phrase": "lead-time_demand_correlations"}, {"score": 0.0025638362414466278, "phrase": "second_question"}, {"score": 0.002447101794397243, "phrase": "optimal_allocation"}, {"score": 0.0024296201474342614, "phrase": "fcfs."}, {"score": 0.002369413929859425, "phrase": "fcfs"}, {"score": 0.002285961573963468, "phrase": "nv_fractile_asymmetry"}, {"score": 0.0022133711375320266, "phrase": "average_nv_fractiles"}, {"score": 0.002174041708084857, "phrase": "simple_no-holdback_allocation_policies"}, {"score": 0.0021049977753042253, "phrase": "best_fcfs_policies"}], "paper_keywords": ["continuous-time assemble-to-order systems", " industrial-scale problems", " base-stock policies", " first-come-first-served allocation", " optimal allocation", " stochastic programming"], "paper_abstract": "Using a novel stochastic programming (SP) formulation, we develop an algorithm for inventory control in industrial-size assemble-to-order (ATO) systems that has unparalleled efficiency and scalability. Applying our algorithm to several numerical examples, we generate new insights regarding the control and optimization of these systems. We consider a continuous time model, seeking base-stock levels for components that minimize the sum of holding costs and product-specific backorder costs. Our initial focus is on first-come, first-served (FCFS) allocation of components to products; for this setting our algorithm quickly computes solutions for which the asymptotic optimality gap with the optimal FCFS base-stock policy is less than 1%. We then turn to two related questions: How do common heuristics used in practice compare to our performance, and how costly is the FCFS assumption? For the first question, we investigate the effectiveness of ignoring simultaneous stock-outs (ISS), a heuristic that has been used by companies such as IBM and Dell. Our experiments indicate that ISS performance, when compared to the optimal FCFS base-stock policy, improves as the average newsvendor (NV) fractiles increase but suffers under lead-time demand correlations. For the second question, we develop an efficiently computable upper bound on the benefit of optimal allocation over FCFS. We find that for many large ATO systems, FCFS performs surprisingly well and that its performance improves with decreasing NV fractile asymmetry among products and, again, with increasing average NV fractiles. We also investigate simple no-holdback allocation policies and find that they tend to outperform the best FCFS policies.", "paper_title": "Optimization of Industrial-Scale Assemble-to-Order Systems", "paper_id": "WOS:000363520800008"}