{"auto_keywords": [{"score": 0.030636729125894838, "phrase": "geometry_shader"}, {"score": 0.004765173195920904, "phrase": "image_synthesis_techniques"}, {"score": 0.0046429592670444945, "phrase": "wide_range"}, {"score": 0.004339609346924681, "phrase": "realistic_visualizations"}, {"score": 0.004119762981892093, "phrase": "triangle-based_representation"}, {"score": 0.0038106195546165574, "phrase": "new_and_simple_framework"}, {"score": 0.0032769720645483102, "phrase": "detail_management"}, {"score": 0.003226209534553224, "phrase": "creation_workflow"}, {"score": 0.003143341238802547, "phrase": "presented_method"}, {"score": 0.002968424524565369, "phrase": "coarse_mesh"}, {"score": 0.002847339938387273, "phrase": "rendering_time"}, {"score": 0.0026888503045081505, "phrase": "displacement_steps"}, {"score": 0.0026471739851621143, "phrase": "tessellation_step"}, {"score": 0.002619748321217153, "phrase": "uniform_refinement"}, {"score": 0.0025259712348798323, "phrase": "fixed_subdivision_criterion"}, {"score": 0.002385326947545194, "phrase": "last_computed_mesh"}, {"score": 0.0022760856906838814, "phrase": "flexible_integration"}, {"score": 0.002171836484200008, "phrase": "coherence_exploitation"}, {"score": 0.0021050338257522024, "phrase": "gpu."}], "paper_keywords": ["GPU", " mesh refinement", " shader", " visualization"], "paper_abstract": "Image synthesis techniques are present in a wide range of applications as they leverage the amount of information required for creating realistic visualizations. For fast hardware rendering they usually employ a triangle-based representation describing the geometry of the scene. In this paper, we introduce a new and simple framework for performing on-the-fly refinement and simplification of meshes completely on the GPU. As we aim at making easy the integration of level-of-detail management into the creation workflow of artists, the presented method is easy to be implemented. We only need a coarse mesh, its displacement map and a geometry shader. At rendering time, we employ a geometry shader to parallelize the tessellation and displacement steps. The tessellation step performs uniform refinement or simplification operations by applying a fixed subdivision criterion. Our method also exploits coherence by taking advantage of the last computed mesh. We provide a method which offers a flexible integration with standard 3D tools, easy to be implemented, coherence exploitation and wholly processed by the GPU.", "paper_title": "A Multiresolution Approach to Render 3D Models", "paper_id": "WOS:000329767000006"}