{"auto_keywords": [{"score": 0.04717825877930911, "phrase": "compile_time"}, {"score": 0.025176894586150158, "phrase": "spm"}, {"score": 0.01389258044943207, "phrase": "spm_size"}, {"score": 0.008335261742698134, "phrase": "scratch-pad_memory"}, {"score": 0.00481495049065317, "phrase": "embedded_systems"}, {"score": 0.0047722145315845016, "phrase": "compile-time-unknown_scratch-pad_size"}, {"score": 0.004687871834372534, "phrase": "first_memory_allocation_scheme"}, {"score": 0.004404188306112211, "phrase": "fast_compiler-managed_sram"}, {"score": 0.004352123742308589, "phrase": "hardware-managed_cache"}, {"score": 0.004313477880211006, "phrase": "existing_memory_allocation_schemes"}, {"score": 0.0038640303886081444, "phrase": "different_spm_size"}, {"score": 0.0038297020126219082, "phrase": "-portable_code"}, {"score": 0.0036734771501245878, "phrase": "portable_media"}, {"score": 0.0036516837986048795, "phrase": "code_downloads"}, {"score": 0.003502695291158573, "phrase": "different_spm_sizes"}, {"score": 0.003481911583035097, "phrase": "different_devices"}, {"score": 0.0033999985007372216, "phrase": "vlsi_technology"}, {"score": 0.003241889436209603, "phrase": "downloaded_codes"}, {"score": 0.0031468151597922214, "phrase": "compiler_method"}, {"score": 0.003009390313137981, "phrase": "customized_installer_software"}, {"score": 0.0029649248741435512, "phrase": "spm_allocation"}, {"score": 0.002929824640902227, "phrase": "program's_first_run"}, {"score": 0.002768674345336861, "phrase": "decided_allocation"}, {"score": 0.0026954557881801546, "phrase": "resulting_executable_places"}, {"score": 0.002385595105638277, "phrase": "all-dram_allocation"}, {"score": 0.002357337046408753, "phrase": "optimal_static_allocation_scheme"}, {"score": 0.0021049977753042253, "phrase": "code_size"}], "paper_keywords": ["Performance", " Algorithms", " Management", " Design", " Memory allocation", " scratch-pad", " compiler", " embedded systems", " downloadable codes", " embedded loading", " data linked list"], "paper_abstract": "This article presents the first memory allocation scheme for embedded systems having a scratch-pad memory whose size is unknown at compile time. A scratch-pad memory (SPM) is a fast compiler-managed SRAM that replaces the hardware-managed cache. All existing memory allocation schemes for SPM require the SPM size to be known at compile time. Unfortunately, because of this constraint, the resulting executable is tied to that size of SPM and is not portable to other processor implementations having a different SPM size. Size-portable code is valuable when programs are downloaded during deployment either via a network or portable media. Code downloads are used for fixing bugs or for enhancing functionality. The presence of different SPM sizes in different devices is common because of the evolution in VLSI technology across years. The result is that SPM cannot be used in such situations with downloaded codes. To overcome this limitation, our work presents a compiler method whose resulting executable is portable across SPMs of any size. Our technique is to employ a customized installer software, which decides the SPM allocation just before the program's first run, since the SPM size can be discovered at that time. The installer then, based on the decided allocation, modifies the program executable accordingly. The resulting executable places frequently used objects in SPM, considering both code and data for placement. To keep the overhead low, much of the preprocessing for the allocation is done at compile time. Results show that our benchmarks average a 41% speedup versus an all-DRAM allocation, while the optimal static allocation scheme, which knows the SPM size at compile time and is thus an unachievable upper-bound and is only slightly faster (45% faster than all-DRAM). Results also show that the overhead from our customized installer averages about 1.5% in code size, 2% in runtime, and 3% in compile time for our benchmarks.", "paper_title": "Memory Allocation for Embedded Systems with a Compile-Time-Unknown Scratch-Pad Size", "paper_id": "WOS:000266818500005"}