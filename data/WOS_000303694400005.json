{"auto_keywords": [{"score": 0.048193365666829406, "phrase": "les"}, {"score": 0.03951517191991311, "phrase": "random_noise"}, {"score": 0.004760481990002688, "phrase": "klein"}, {"score": 0.0045726187330434025, "phrase": "dns._klein's_popular_method"}, {"score": 0.004443276312972159, "phrase": "'artificial'_inflow_turbulence"}, {"score": 0.004293049810940742, "phrase": "dns"}, {"score": 0.004123781267600542, "phrase": "computational_effort"}, {"score": 0.0040767015025213625, "phrase": "memory_requirement"}, {"score": 0.0039841418890102925, "phrase": "parallel_scaling_performance"}, {"score": 0.003916098498242888, "phrase": "exponential_filter_kernel"}, {"score": 0.0034911335714333507, "phrase": "prescribed_integral_length-scale"}, {"score": 0.0033922781038328844, "phrase": "filtered_field"}, {"score": 0.0032398798149196432, "phrase": "unique_function"}, {"score": 0.0032028587883593702, "phrase": "physical_time"}, {"score": 0.003130077012135034, "phrase": "logical_coordinates"}, {"score": 0.0030414140732789186, "phrase": "parallel_process"}, {"score": 0.002822434555587263, "phrase": "filtering_operation"}, {"score": 0.0026342827320931937, "phrase": "required_computational_effort"}, {"score": 0.0025014259919355453, "phrase": "memory_footprint"}, {"score": 0.0023889533502525527, "phrase": "inter-process_communication"}, {"score": 0.0022815262950738814, "phrase": "non-periodic_pseudo-turbulent_inflow_conditions"}, {"score": 0.0021789194955896124, "phrase": "code_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["LES", " DNS", " Inflow Conditions", " Artificial Turbulence", " Efficient", " Parallel", " Low-storage"], "paper_abstract": "Klein's popular method for the generation of 'artificial' inflow turbulence for application in LES and DNS computations has been modified to reduce computational effort and memory requirement, and improve parallel scaling performance. An exponential filter kernel is applied to a field of random noise, where the width of the filter is chosen such that a prescribed integral length-scale is recovered from the filtered field. We generate the random noise as a unique function of physical time and space in logical coordinates, such that any parallel process may generate the same random number for any location within the domain. The filtering operation is also decomposed into the three coordinate directions. These modifications reduce the required computational effort by several orders of magnitude, drastically decrease the memory footprint of the method, and negate any inter-process communication. It thus becomes possible to generate non-periodic pseudo-turbulent inflow conditions at very little cost for computation and code implementation. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "An efficient, parallel low-storage implementation of Klein's turbulence generator for LES and DNS", "paper_id": "WOS:000303694400005"}