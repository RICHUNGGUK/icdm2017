{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "low-level_multithreaded_language"}, {"score": 0.004491970050862321, "phrase": "formal_low-level_multithreaded_language"}, {"score": 0.00443000995237127, "phrase": "advanced_region-based_memory_management"}, {"score": 0.004219774794569897, "phrase": "well-typed_programs"}, {"score": 0.0037236852537136547, "phrase": "single_hierarchy"}, {"score": 0.0035965032173588753, "phrase": "uniform_ownership_constraints"}, {"score": 0.0034978813769575233, "phrase": "hierarchical_structure"}, {"score": 0.002704306866425829, "phrase": "formal_language"}, {"score": 0.002666947618172753, "phrase": "cyclone"}, {"score": 0.0024876840172100567, "phrase": "modified_cyclone_compiler"}, {"score": 0.0024533019565858073, "phrase": "highly_optimized_c_programs"}, {"score": 0.002320449502337321, "phrase": "performance_overhead"}, {"score": 0.002288373472756928, "phrase": "guaranteed_race_freedom"}, {"score": 0.0022567398334877847, "phrase": "memory_safety"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Safe multithreading", " Type and effect systems", " Region-based memory management", " Cyclone"], "paper_abstract": "We present the design of a formal low-level multithreaded language with advanced region-based memory management and thread synchronization primitives, where well-typed programs are memory safe and race free. In our language, regions and locks are combined in a single hierarchy and are subject to uniform ownership constraints imposed by this hierarchical structure: deallocating a region causes its sub-regions to be deallocated. Similarly, when a region is read/write-protected, then its sub-regions inherit the same access rights. We discuss aspects of the integration and implementation of the formal language within Cyclone and evaluate the performance of code produced by the modified Cyclone compiler against highly optimized C programs using pthreads. Our results show that the performance overhead for guaranteed race freedom and memory safety is in most cases acceptable. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Static safety guarantees for a low-level multithreaded language with regions", "paper_id": "WOS:000329887100002"}