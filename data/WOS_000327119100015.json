{"auto_keywords": [{"score": 0.03879777167718846, "phrase": "parallel_polygon"}, {"score": 0.029977939187082695, "phrase": "input_polygon"}, {"score": 0.004650896226390719, "phrase": "rectangular_corner_stitching_data_structures"}, {"score": 0.0045709675813472884, "phrase": "parameterized_orthogonal_layouts"}, {"score": 0.004143196873246147, "phrase": "trapezoidal_corner_stitching_data_structures"}, {"score": 0.003443219062200627, "phrase": "parameterized_orthogonal_polygons"}, {"score": 0.0034036089823450385, "phrase": "parameterized_rectangles"}, {"score": 0.003268516165008941, "phrase": "parameterized_trapezoids"}, {"score": 0.0030847461428168614, "phrase": "partition_fixed-coordinate_polygons"}, {"score": 0.0029967610945411593, "phrase": "dual-scanline_technique"}, {"score": 0.0027795345823932406, "phrase": "parallel_partitioning_algorithm"}, {"score": 0.0025780134737796085, "phrase": "partitioning_algorithm"}, {"score": 0.002377260665147444, "phrase": "sequential_partitioning_program"}, {"score": 0.0023228223366301226, "phrase": "single_scanline"}, {"score": 0.0021668575137633317, "phrase": "large_parameterized_polygons"}, {"score": 0.002129527338875116, "phrase": "parameterized_polygons"}, {"score": 0.0021049977753042253, "phrase": "complex_constraints"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Parameterized layouts", " parameterized polygons", " polygon decomposition", " trapezoidal corner stitching"], "paper_abstract": "In order to use rectangular corner stitching data structures in storing parameterized orthogonal layouts, parameterized polygons in the layouts must be partitioned into rectangles. Likewise, in order to use trapezoidal corner stitching data structures in storing parameterized 45-degree layouts, parameterized polygons in the layouts have to be partitioned into trapezoids. In this article, a parallel polygon partitioning algorithm is proposed; the algorithm is capable of partitioning parameterized orthogonal polygons into parameterized rectangles as well as partitioning parameterized 45-degree polygons into parameterized trapezoids. Additionally, the algorithm can be used to partition fixed-coordinate polygons. By adopting the dual-scanline technique, which involves using two scanlines to concurrently sweep an input polygon, the parallel partitioning algorithm can process vertices and edges of the input polygon efficiently. The parallel polygon partitioning algorithm has been implemented in C++ with the use of OpenMP. Compared with a sequential partitioning program which uses a single scanline, our parallel partitioning program can achieve 20% to 30% speedup while partitioning large parameterized polygons or partitioning parameterized polygons with complex constraints.", "paper_title": "A Parallel Dual-Scanline Algorithm for Partitioning Parameterized 45-Degree Polygons", "paper_id": "WOS:000327119100015"}