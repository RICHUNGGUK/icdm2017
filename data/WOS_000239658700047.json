{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "high_dimensional_data_cubes"}, {"score": 0.0045324756541157574, "phrase": "data_cube"}, {"score": 0.0040978781692373005, "phrase": "olap._partition_based_algorithm"}, {"score": 0.0038964032225585117, "phrase": "efficient_methods"}, {"score": 0.003780286517897356, "phrase": "data_cubes"}, {"score": 0.003704797078215222, "phrase": "high_dimensionality"}, {"score": 0.00363080961099728, "phrase": "low_cardinality"}, {"score": 0.003522579870903474, "phrase": "moderate_size_datasets"}, {"score": 0.0033492947290751996, "phrase": "real_applications"}, {"score": 0.0027929100418926725, "phrase": "efficient_indexing_technique"}, {"score": 0.002682370021834353, "phrase": "compressed_bitmap_index"}, {"score": 0.0024493494346360415, "phrase": "experimental_results"}, {"score": 0.002282166507956957, "phrase": "storage_space"}, {"score": 0.0021917966722180132, "phrase": "computation_time"}, {"score": 0.0021049977753042253, "phrase": "frag-cubing_algorithm"}], "paper_keywords": [""], "paper_abstract": "The computation of a data cube is one of the most essential but challenging issues in data warehousing and OLAP. Partition based algorithm is one of the efficient methods to compute data cubes on high dimensionality, low cardinality, and moderate size datasets, which exist in real applications like bioinformatics, statistics, and text processing. To deal with such high dimensional data cubes, we propose an efficient indexing technique consisting of a compressed bitmap index and two algorithms for cube constructing and querying. Experimental results show that our method saves at least 25% on storage space and about 30% on computation time compared with the Frag-Cubing algorithm.", "paper_title": "An efficient indexing technique for computing high dimensional data cubes", "paper_id": "WOS:000239658700047"}