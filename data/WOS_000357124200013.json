{"auto_keywords": [{"score": 0.03779947149805206, "phrase": "staging_parameters"}, {"score": 0.00481495049065317, "phrase": "dynamic_staging"}, {"score": 0.0047527118741586055, "phrase": "partial_evaluation"}, {"score": 0.004600596158672458, "phrase": "program_fragments"}, {"score": 0.003859146369720225, "phrase": "cumbersome_endeavor"}, {"score": 0.003639471039860495, "phrase": "new_metaprogramming_concept"}, {"score": 0.0035228596881051763, "phrase": "first-class_citizen_entities"}, {"score": 0.0031535341431377837, "phrase": "metaml-like_quotations"}, {"score": 0.0025934566395017424, "phrase": "different_stages"}, {"score": 0.0023826870912207303, "phrase": "domain-specific_optimizations"}, {"score": 0.0022912596877648723, "phrase": "proposed_metaprogramming_concept"}, {"score": 0.0021049977753042253, "phrase": "execution_time"}], "paper_keywords": ["Languages", " performance", " Dynamic staging", " partial evaluation", " code specialization"], "paper_abstract": "Partial evaluation allows for specialization of program fragments. This can be realized by staging, where one fragment is executed earlier than its surrounding code. However, taking advantage of these capabilities is often a cumbersome endeavor. In this paper, we present a new metaprogramming concept using staging parameters that are first-class citizen entities and define the order of execution of the program. Staging parameters can be used to define MetaML-like quotations, but can also allow stages to be created and resolved dynamically. The programmer can write generic, polyvariant code which can be reused in the context of different stages. We demonstrate how our approach can be used to define and apply domain-specific optimizations. Our implementation of the proposed metaprogramming concept generates code which is on a par with templated C++ code in terms of execution time.", "paper_title": "Specialization through Dynamic Staging", "paper_id": "WOS:000357124200013"}