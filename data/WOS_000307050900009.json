{"auto_keywords": [{"score": 0.0495133738546852, "phrase": "code_generation"}, {"score": 0.00481495049065317, "phrase": "integrated_code_generation_for_loops"}, {"score": 0.004275173711009189, "phrase": "spill_code_generation"}, {"score": 0.004076533120753605, "phrase": "clustered_architectures"}, {"score": 0.00368442237104581, "phrase": "instruction_selection_phase"}, {"score": 0.003232254571848865, "phrase": "generated_code"}, {"score": 0.0030819219279832224, "phrase": "optimal_methods"}, {"score": 0.003009390313137981, "phrase": "integer_linear_programming"}, {"score": 0.002938560664857691, "phrase": "acyclic_code"}, {"score": 0.002655616553414394, "phrase": "optimal_modulo_scheduling"}, {"score": 0.0025169965861573185, "phrase": "modulo_scheduling"}, {"score": 0.002472412920623605, "phrase": "instruction_selection"}, {"score": 0.0024431289979171505, "phrase": "cluster_assignment"}, {"score": 0.002371424085814217, "phrase": "separate_phase"}, {"score": 0.002181626277903721, "phrase": "integrated_method"}, {"score": 0.002142970278347126, "phrase": "better_solution"}, {"score": 0.0021049977753042253, "phrase": "nonintegrated_method"}], "paper_keywords": ["Algorithms", " Experimentation", " Performance", " Theory", " Code generation", " clustered VLIW architectures", " modulo scheduling"], "paper_abstract": "Code generation in a compiler is commonly divided into several phases: instruction selection, scheduling, register allocation, spill code generation, and, in the case of clustered architectures, cluster assignment. These phases are interdependent; for instance, a decision in the instruction selection phase affects how an operation can be scheduled We examine the effect of this separation of phases on the quality of the generated code. To study this we have formulated optimal methods for code generation with integer linear programming; first for acyclic code and then we extend this method to modulo scheduling of loops. In our experiments we compare optimal modulo scheduling, where all phases are integrated, to modulo scheduling, where instruction selection and cluster assignment are done in a separate phase. The results show that, for an architecture with two clusters, the integrated method finds a better solution than the nonintegrated method for 27% of the instances.", "paper_title": "Integrated Code Generation for Loops", "paper_id": "WOS:000307050900009"}