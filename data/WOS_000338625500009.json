{"auto_keywords": [{"score": 0.05007773449624724, "phrase": "preprocessor_annotations"}, {"score": 0.04795274928516732, "phrase": "cpp"}, {"score": 0.03957774058635368, "phrase": "source_code"}, {"score": 0.03093237514063572, "phrase": "program_comprehension"}, {"score": 0.0046432244185370605, "phrase": "c_preprocessor"}, {"score": 0.004518442937844318, "phrase": "simple_and_language-independent_tool"}, {"score": 0.004397000006837371, "phrase": "variable_software_systems"}, {"score": 0.004357245559948974, "phrase": "conditional_compilation"}, {"score": 0.004201774694043468, "phrase": "annotated_code"}, {"score": 0.004088807948906792, "phrase": "powerful_means"}, {"score": 0.0038895008852940323, "phrase": "arbitrary_annotations"}, {"score": 0.0038194503801108324, "phrase": "underlying_structure"}, {"score": 0.003683097597914604, "phrase": "disciplined_annotations"}, {"score": 0.0033326252993345685, "phrase": "especially_the_latter_type"}, {"score": 0.0027910516355928983, "phrase": "controlled_experiment"}, {"score": 0.002765776659294382, "phrase": "human_subjects"}, {"score": 0.0027159094186967247, "phrase": "similar_tasks"}, {"score": 0.0022640009579466924, "phrase": "disciplined_and_undisciplined_annotations"}, {"score": 0.002233301265743633, "phrase": "program-comprehension_perspective"}, {"score": 0.0021049977753042253, "phrase": "time-consuming_and_tedious_task"}], "paper_keywords": ["variability", " C preprocessor", " controlled experiment", " program comprehension", " disciplined annotations"], "paper_abstract": "The C preprocessor (CPP) is a simple and language-independent tool, widely used to implement variable software systems using conditional compilation (i.e., by including or excluding annotated code). Although CPP provides powerful means to express variability, it has been criticized for allowing arbitrary annotations that break the underlying structure of the source code. We distinguish between disciplined annotations, which align with the structure of the source code, and undisciplined annotations, which do not. Several studies suggest that especially the latter type of annotations makes it hard to (automatically) analyze the code. However, little is known about whether the type of annotations has an effect on program comprehension. We address this issue by means of a controlled experiment with human subjects. We designed similar tasks for both, disciplined and undisciplined annotations, to measure program comprehension. Then, we measured the performance of the subjects regarding correctness and response time for solving the tasks. Our results suggest that there are no differences between disciplined and undisciplined annotations from a program-comprehension perspective. Nevertheless, we observed that finding and correcting errors is a time-consuming and tedious task in the presence of preprocessor annotations.", "paper_title": "Does the Discipline of Preprocessor Annotations Matter? A Controlled Experiment", "paper_id": "WOS:000338625500009"}