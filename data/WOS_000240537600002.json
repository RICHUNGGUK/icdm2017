{"auto_keywords": [{"score": 0.04675404263653011, "phrase": "simultaneous_broadcast"}, {"score": 0.014434174701687457, "phrase": "chor_et_al"}, {"score": 0.013347074786027204, "phrase": "germaro"}, {"score": 0.007727299835876589, "phrase": "synchronous_communication"}, {"score": 0.00481495049065317, "phrase": "composable_simultaneous_broadcast"}, {"score": 0.0047804843375940835, "phrase": "simultaneous_broadcast_protocols"}, {"score": 0.004746263721902201, "phrase": "different_parties"}, {"score": 0.0046118021635786315, "phrase": "mutual_independence"}, {"score": 0.004562362497952548, "phrase": "broadcast_values"}, {"score": 0.004276610897002087, "phrase": "linear-round_solution"}, {"score": 0.004185378364660488, "phrase": "chor"}, {"score": 0.004155410775692565, "phrase": "rabin"}, {"score": 0.003995525132184859, "phrase": "parallel"}, {"score": 0.003965684670332574, "phrase": "distributed_systems"}, {"score": 0.0036509280916606937, "phrase": "common_random_string_model"}, {"score": 0.0035858673522839407, "phrase": "constant_round_complexity"}, {"score": 0.003459191419478298, "phrase": "generic_zero-knowledge_proofs"}, {"score": 0.0034343965063429447, "phrase": "non-interactive_zero-knowledge_proofs"}, {"score": 0.0032774911048411804, "phrase": "security_definitions"}, {"score": 0.003150319576043518, "phrase": "initial_construction"}, {"score": 0.002984794722633428, "phrase": "universally_composable"}, {"score": 0.0025660347613972573, "phrase": "verifiable_secret_sharing_scheme"}, {"score": 0.0025476254812544135, "phrase": "cramer_et_al"}, {"score": 0.002448704249007665, "phrase": "honest_majority"}, {"score": 0.0023033100935570755, "phrase": "uc_model"}, {"score": 0.0022622106662423427, "phrase": "canetti"}, {"score": 0.0021049977753042253, "phrase": "better_understanding"}], "paper_keywords": [""], "paper_abstract": "Simultaneous Broadcast protocols allow different parties to broadcast values in parallel while guaranteeing mutual independence of the broadcast values. The problem of simultaneous broadcast was suggested by Chor et al. (FOCS 1985) who proposed a linear-round solution, and later improved by Chor and Rabin (PODC 1987) and Germaro (IEEE Trans. on Parallel and Distributed Systems 2000). The most efficient solution, in terms of round complexity, is the one due to Germaro, which is in the common random string model. This construction has constant round complexity but is not very practical, as it requires generic zero-knowledge proofs, non-interactive zero-knowledge proofs of knowledge, and commitment schemes. All the mentioned solutions were proven secure under security definitions with weak or no composition guarantees - only sequential composition for the initial construction by Chor et al. In this work, we explore the problem of Simultaneous Broadcast under Universally Composable (UC) security (Canetti 2001). We give a definition of Simultaneous Broadcast in this framework, which is shown to imply all past definitions. We also show this notion can be achieved by a computationally efficient, constant-round construction (building on the verifiable secret sharing scheme of Cramer et al. at Eurocrypt 1999), which is secure under an honest majority. Our results rely on (and benefit from) capturing synchronous communication as a functionality within the UC model, as suggested by Canetti (JACR eprint 2005). Indeed, we show that this approach of modeling synchronous communication can lead to better understanding of where synchronicity is needed, and also simpler constructions and proofs.", "paper_title": "Universally composable simultaneous broadcast", "paper_id": "WOS:000240537600002"}