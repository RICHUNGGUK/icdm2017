{"auto_keywords": [{"score": 0.0374287769677244, "phrase": "type_qualifiers"}, {"score": 0.00481495049065317, "phrase": "flow-insensitive_type_qualifiers"}, {"score": 0.004494570360108983, "phrase": "traditional_type_systems"}, {"score": 0.004234129588974058, "phrase": "static_type_systems"}, {"score": 0.004119162576042987, "phrase": "java"}, {"score": 0.0038624981944755813, "phrase": "automatic_type_qualifier_inference"}, {"score": 0.003809628721278519, "phrase": "remaining_qualifiers"}, {"score": 0.0036052633308076933, "phrase": "cqual"}, {"score": 0.0035072146967082083, "phrase": "c_programming_language"}, {"score": 0.0034118234596993836, "phrase": "visualization_component"}, {"score": 0.0033651019362620866, "phrase": "browsable_inference_results"}, {"score": 0.003140888248194296, "phrase": "const_qualifiers"}, {"score": 0.003097865379563127, "phrase": "security_vulnerabilities"}, {"score": 0.0030135741897058844, "phrase": "initialization_data_usage"}, {"score": 0.0029722900280316216, "phrase": "linux_kernel"}, {"score": 0.002799810685137358, "phrase": "type_qualifier_inference"}, {"score": 0.0027614468443073028, "phrase": "large_programs"}, {"score": 0.0026494723416072316, "phrase": "wide_variety"}, {"score": 0.002124463709529829, "phrase": "verifying"}, {"score": 0.0021052001889339594, "phrase": "reasoning"}], "paper_keywords": ["algorithms", " design", " reliability", " experimentation", " languages", " theory", " verification", " type qualifiers", " types", " security", " constraints", " const", " taint", " static analysis"], "paper_abstract": "We describe flow-insensitive type qualifiers, a lightweight, practical mechanism for specifying and checking properties not captured by traditional type systems. We present a framework for adding new, user-specified type qualifiers to programming languages with static type systems, such as C and Java. In our system, programmers add a few type qualifier annotations to their program, and automatic type qualifier inference determines the remaining qualifiers and checks the annotations for consistency. We describe a tool CQUAL for adding type qualifiers to the C programming language. Our tool CQUAL includes a visualization component for displaying browsable inference results to the programmer. Finally, we present several experiments using our tool, including inferring const qualifiers, finding security vulnerabilities in several popular C programs, and checking initialization data usage in the Linux kernel. Our results suggest that inference and visualization make type qualifiers lightweight, that type qualifier inference scales to large programs, and that type qualifiers are applicable to a wide variety of problems. Categories and Subject Descriptors: D.2.1 [Software Engineering]: Requirements/Specifications; D.2.4 [Software Engineering]: Software/Program Verification; D.3.3 [Programming Languages]: Language Constructs and Features; F.3.1 [Logics and Meanings of Programs]: Specifying and Verifying and Reasoning about Programs.", "paper_title": "Flow-insensitive type qualifiers", "paper_id": "WOS:000242991500003"}