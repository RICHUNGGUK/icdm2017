{"auto_keywords": [{"score": 0.039282223508626896, "phrase": "meshjoin"}, {"score": 0.008044794838337794, "phrase": "meshjoin."}, {"score": 0.006914983752271393, "phrase": "cost_model"}, {"score": 0.00481495049065317, "phrase": "streaming_updates"}, {"score": 0.004782587436296574, "phrase": "archived_master_data"}, {"score": 0.004750440867604888, "phrase": "near-real-time_data_warehousing"}, {"score": 0.004655285779819366, "phrase": "timely_and_effective_decisions"}, {"score": 0.004577440795549049, "phrase": "latest_information"}, {"score": 0.004546666837896004, "phrase": "data_warehouse_repositories"}, {"score": 0.004322333439660409, "phrase": "user_updates"}, {"score": 0.004178935413340453, "phrase": "important_phase"}, {"score": 0.004150829420202823, "phrase": "near-real-time_data_integration"}, {"score": 0.003986103192038901, "phrase": "disk-based_master_data"}, {"score": 0.003945949295597681, "phrase": "stream-based_algorithm"}, {"score": 0.0037638273194268387, "phrase": "fast_streams"}, {"score": 0.0036635429301869527, "phrase": "data_distribution"}, {"score": 0.003626626504149897, "phrase": "real-world_applications"}, {"score": 0.0035779805381654438, "phrase": "skewed_distributions"}, {"score": 0.0030017207229983385, "phrase": "rigorous_experimental_study"}, {"score": 0.0029714533918949798, "phrase": "possible_performance_improvements"}, {"score": 0.0029414903557512663, "phrase": "typical_data_distributions"}, {"score": 0.002853396755102163, "phrase": "extended_hybrid_join"}, {"score": 0.002631131751548729, "phrase": "master_data"}, {"score": 0.0025696192337207155, "phrase": "disk_access"}, {"score": 0.002229529362571334, "phrase": "substantial_room"}, {"score": 0.0022145052062614514, "phrase": "performance_gains"}, {"score": 0.002162711766975021, "phrase": "non-adaptive_approaches"}], "paper_keywords": ["Near-real-time data warehousing", " Stream-based join", " Data transformation", " Performance and tuning"], "paper_abstract": "In order to make timely and effective decisions, businesses need the latest information from data warehouse repositories. To keep these repositories up-to-date with respect to end user updates, near-real-time data integration is required. An important phase in near-real-time data integration is data transformation where the stream of updates is joined with disk-based master data. The stream-based algorithm MESHJOIN (Mesh Join) has been proposed to amortize disk access over fast streams. MESHJOIN makes no assumptions about the data distribution. In real-world applications, however, skewed distributions can be found, such as a stream of products sold, where certain products are sold more frequently than the remainder of the products. The question arises is how much does MESHJOIN lose in terms of performance by not adapting to data skew. In this paper we perform a rigorous experimental study analyzing the possible performance improvements while considering typical data distributions. For this purpose we design an algorithm Extended Hybrid Join (X-HYBRIDJOIN) that is complementary to MESHJOIN in that it can adapt to data skew and stores parts of the master data in memory permanently, reducing the disk access overhead significantly. We compare the performance of X-HYBRIDJOIN against the performance of MESHJOIN. We take several precautions to make sure the comparison is adequate and focuses on the utilization of data skew. The experiments show that considering data skew offers substantial room for performance gains that cannot be found in non-adaptive approaches such as MESHJOIN. We also present a cost model for X-HYBRIDJOIN, and based on that cost model, the algorithm is tuned.", "paper_title": "Efficient processing of streaming updates with archived master data in near-real-time data warehousing", "paper_id": "WOS:000340616300006"}