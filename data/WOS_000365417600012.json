{"auto_keywords": [{"score": 0.041822402724061694, "phrase": "distributed_realizability"}, {"score": 0.00481495049065317, "phrase": "distributed_fault-tolerant_systems."}, {"score": 0.004737579882204798, "phrase": "distributed_systems"}, {"score": 0.004676575291629554, "phrase": "even_simple_consistency_requirements"}, {"score": 0.004527462929045081, "phrase": "complicated_information_flow"}, {"score": 0.004483659121004398, "phrase": "distributed_system"}, {"score": 0.003951175193382119, "phrase": "temporal_specification"}, {"score": 0.003775803846431323, "phrase": "bounded_synthesis"}, {"score": 0.003691048155818806, "phrase": "positive_case"}, {"score": 0.0035848560487286166, "phrase": "realizable_specification"}, {"score": 0.003515758094739175, "phrase": "negative_case"}, {"score": 0.003107935254560724, "phrase": "linear-time_temporal_logic"}, {"score": 0.002941100683384888, "phrase": "different_sequence"}, {"score": 0.002599763359352916, "phrase": "classic_distributed_realizability_problem"}, {"score": 0.002566215899764419, "phrase": "fault-tolerant_realizability_problem"}, {"score": 0.0024842242921857705, "phrase": "larger_sets"}, {"score": 0.0024048460326284416, "phrase": "safety_specifications"}, {"score": 0.002389276641014013, "phrase": "weakly_ordered_architectures"}, {"score": 0.00235843888868088, "phrase": "decision_procedure"}, {"score": 0.002320449502337321, "phrase": "full_ltl"}, {"score": 0.0023054252458274823, "phrase": "arbitrary_architectures"}, {"score": 0.0022756672722130424, "phrase": "infinitely_many_paths"}, {"score": 0.002260932310934101, "phrase": "experimental_results"}, {"score": 0.002224510044064184, "phrase": "qbf-based_prototype_implementation"}, {"score": 0.0021815752957365974, "phrase": "simple_errors"}, {"score": 0.0021464286727045623, "phrase": "even_problems"}, {"score": 0.0021325287436338228, "phrase": "high_combinatorial_complexity"}, {"score": 0.0021049977753042253, "phrase": "byzantine_generals'_problem"}], "paper_keywords": ["Distributed Synthesis", " Fault-tolerance", " Coordination Logic"], "paper_abstract": "Writing formal specifications for distributed systems is difficult. Even simple consistency requirements often turn out to be unrealizable because of the complicated information flow in the distributed system: not all information is available in every component, and information transmitted from other components may arrive with a delay or not at all, especially in the presence of faults. The problem of checking the distributed realizability of a temporal specification is, in general, undecidable. Semi-algorithms for synthesis, such as bounded synthesis, are only useful in the positive case, where they construct an implementation for a realizable specification, but not in the negative case: if the specification is unrealizable, the search for the implementation never terminates. In this paper, we introduce counterexamples to distributed realizability and present a method for the detection of such counterexamples for specifications given in linear-time temporal logic (LTL). A counterexample consists of a set of paths, each representing a different sequence of inputs from the environment, such that, no matter how the components are implemented, the specification is violated on at least one of these paths. We present a method for finding such counterexamples both for the classic distributed realizability problem and for the fault-tolerant realizability problem. Our method considers, incrementally, larger and larger sets of paths until a counterexample is found. For safety specifications in weakly ordered architectures we obtain a decision procedure, while counterexamples for full LTL and arbitrary architectures may consist of infinitely many paths. Experimental results, obtained with a QBF-based prototype implementation, show that our method finds simple errors very quickly, and even problems with high combinatorial complexity, like the Byzantine Generals' Problem, are tractable.", "paper_title": "DETECTING UNREALIZABILITY OF DISTRIBUTED FAULT-TOLERANT SYSTEMS", "paper_id": "WOS:000365417600012"}