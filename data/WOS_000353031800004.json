{"auto_keywords": [{"score": 0.04242092921688311, "phrase": "cost_analysis"}, {"score": 0.015719716506582538, "phrase": "concurrent_objects"}, {"score": 0.0046741260449047976, "phrase": "novel_cost_analysis_framework"}, {"score": 0.004492717291734985, "phrase": "well-established_model"}, {"score": 0.004448471107649881, "phrase": "distributed_concurrent_systems"}, {"score": 0.004254671386496732, "phrase": "concurrency_units"}, {"score": 0.00393066798511457, "phrase": "resource_consumption"}, {"score": 0.003685604033479918, "phrase": "sequential_programming_languages"}, {"score": 0.0036312482387007815, "phrase": "considerable_attention"}, {"score": 0.003421697038352743, "phrase": "main_challenges"}, {"score": 0.0033379819706003885, "phrase": "concurrent_setting"}, {"score": 0.00320826350799124, "phrase": "precise_size_abstractions"}, {"score": 0.0030531596109756895, "phrase": "shared_memory"}, {"score": 0.002670719148310961, "phrase": "diverse_distributed_components"}, {"score": 0.0025415366388578465, "phrase": "novel_form"}, {"score": 0.002516457934208144, "phrase": "object-sensitive_recurrence_equations"}, {"score": 0.002394719113232821, "phrase": "resource_usage"}, {"score": 0.0023476849595393872, "phrase": "different_components"}, {"score": 0.0021902063413831545, "phrase": "classical_examples"}, {"score": 0.00216858686400722, "phrase": "concurrent_and_distributed_programming"}], "paper_keywords": ["static analysis", " resource usage analysis", " cost analysis", " concurrency", " distributed systems", " object-sensitive analysis"], "paper_abstract": "This article presents a novel cost analysis framework for concurrent objects. Concurrent objects form a well-established model for distributed concurrent systems. In this model, objects are the concurrency units that communicate among them via asynchronous method calls. Cost analysis aims at automatically approximating the resource consumption of executing a program in terms of its input parameters. While cost analysis for sequential programming languages has received considerable attention, concurrency and distribution have been notably less studied. The main challenges of cost analysis in a concurrent setting are as follows. First, inferring precise size abstractions for data in the program in the presence of shared memory. This information is essential for bounding the number of iterations of loops. Second, distribution suggests that analysis must infer the cost of the diverse distributed components separately. We handle this by means of a novel form of object-sensitive recurrence equations that use cost centres in order to keep the resource usage assigned to the different components separate. We have implemented our analysis and evaluated it on several small applications that are classical examples of concurrent and distributed programming. Copyright (c) 2015John Wiley & Sons, Ltd.", "paper_title": "Object-sensitive cost analysis for concurrent objects", "paper_id": "WOS:000353031800004"}