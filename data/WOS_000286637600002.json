{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "retargetable_compiler"}, {"score": 0.022951939083888262, "phrase": "multiplatform_binary_translator"}, {"score": 0.01668080909492845, "phrase": "binary_programs"}, {"score": 0.009634470880833938, "phrase": "binary_translator"}, {"score": 0.008168414153658847, "phrase": "ir"}, {"score": 0.007906588606352167, "phrase": "missing_link"}, {"score": 0.004195418010131832, "phrase": "source_programs"}, {"score": 0.004144723510171449, "phrase": "intermediate_representation"}, {"score": 0.003980106938194548, "phrase": "object_code"}, {"score": 0.003947973513495612, "phrase": "different_targets"}, {"score": 0.003760527969356061, "phrase": "code_generation"}, {"score": 0.0037301606780397456, "phrase": "multiple_platforms"}, {"score": 0.0033980439318538605, "phrase": "ir."}, {"score": 0.0030828215204304473, "phrase": "machine_language"}, {"score": 0.003057910095857785, "phrase": "assembly_language"}, {"score": 0.002936331371903168, "phrase": "executable_binary_programs"}, {"score": 0.0028195727965553367, "phrase": "unique_feature"}, {"score": 0.0026103363762901423, "phrase": "prototype_multiplatform_binary_translator"}, {"score": 0.0025579007820962125, "phrase": "gcc"}, {"score": 0.002416589459425828, "phrase": "gcc_ir"}, {"score": 0.0023298892270500983, "phrase": "gcc_backend"}, {"score": 0.002255431275670053, "phrase": "specified_platforms"}, {"score": 0.0022371907579775796, "phrase": "experimental_results"}, {"score": 0.0021221627745801478, "phrase": "alpha_binaries"}, {"score": 0.0021049977753042253, "phrase": "reasonable_code_density"}], "paper_keywords": ["Algorithms", " Performance", " Design", " Experimentation", " Binary translation", " retargeting", " intermediate representation"], "paper_abstract": "This article proposes an alternative yet effective way of constructing a multiplatform binary translator, by converting a retargetable compiler into a binary translator. The rationale is that a retargetable compiler usually parses source programs into an Intermediate Representation (IR), and then translates IR into object code of different targets after performing analysis and optimizations. Specifically, the mechanism of code generation for multiple platforms from IR is already in place, and the missing link of building a multiplatform binary translator is a tool to transform binary programs back into IR. In order to fill in this missing link, this article presents a tool, called the disIRer. Just as a translator from machine language to assembly language is called a disassembler, a tool that translates executable binary programs to IR is called here a disIRer. The unique feature of this approach is that the retargetability of the binary translator is inherited directly from the retargetable compiler. A prototype multiplatform binary translator has been implemented upon GCC (the GNU Compiler Collection). DisIRer first converts binary programs back into GCC IR (Intermediate Representation), and afterward the GCC backend translates the IR to target binary programs of specified platforms. Experimental results show that x86 binary programs can be translated by this technique into ARM and Alpha binaries with reasonable code density and quality.", "paper_title": "DisIRer: Converting a Retargetable Compiler into a Multiplatform Binary Translator", "paper_id": "WOS:000286637600002"}