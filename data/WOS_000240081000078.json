{"auto_keywords": [{"score": 0.011965321767357229, "phrase": "run-time_memory"}, {"score": 0.010013209293906382, "phrase": "dual_run-time_stacks"}, {"score": 0.00481495049065317, "phrase": "ddmb_architecture"}, {"score": 0.004752221133109136, "phrase": "ccb_algorithm"}, {"score": 0.004669845451682529, "phrase": "digital_signal_processors"}, {"score": 0.004548939310612501, "phrase": "harvard_architecture"}, {"score": 0.004149792080414689, "phrase": "multiple_words"}, {"score": 0.004024651422626329, "phrase": "single_instruction_cycle"}, {"score": 0.0038355531523269217, "phrase": "multi-memory_banks"}, {"score": 0.003607630811220324, "phrase": "run-time_environment"}, {"score": 0.0035761913760242697, "phrase": "dual_data_memory_banks"}, {"score": 0.0032764307492734145, "phrase": "activation_records"}, {"score": 0.0031360786664165093, "phrase": "different_size"}, {"score": 0.002749980017065414, "phrase": "on-chip_memory_area"}, {"score": 0.00270221723573854, "phrase": "free_area"}, {"score": 0.0025414699652861667, "phrase": "onchip_memory"}, {"score": 0.002475532161577715, "phrase": "experimental_results"}, {"score": 0.002287783663138828, "phrase": "tun-time_memories"}, {"score": 0.0021049977753042253, "phrase": "target_code"}], "paper_keywords": ["run-time environment", " DSP", " dual data memory banks", " compiler", " and on-chip memory"], "paper_abstract": "Most vendors of digital signal processors (DSPs) support a Harvard architecture, which has two or more memory buses, one for program and one or more for data and allow the processor to access multiple words of data from memory in a single instruction cycle. We already addressed how to efficiently assign data to multi-memory banks in our previous work. This paper reports on our recent attempt to optimize run-time memory. The run-time environment for dual data memory banks (DDMBs) requires two run-time stacks to control activation records located in two memory banks corresponding to calling procedures. However, activation records of two memory banks for a procedure are able to have different size. As a consequence, dual run-time stacks can be unbalanced whenever a procedure is called. This unbalance between two memory banks causes that usage of one memory bank can exceed the extent of on-chip memory area although there is free area in the other memory bank. We attempt balancing dual run-time stacks to enhance efficiently utilization of onchip memory in this paper. The experimental results have revealed that although our call chain balancing (CCB) algorithm is relatively quite simple, it still can utilize tun-time memories efficiently; thus enabling our compiler to run extremely fast, yet minimizing the usage of run-time memory in the target code.", "paper_title": "Run-time memory optimization for DDMB architecture through a CCB algorithm", "paper_id": "WOS:000240081000078"}