{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "javascript"}, {"score": 0.004561019117546361, "phrase": "client-side_web_applications"}, {"score": 0.004300951511110487, "phrase": "javascript_programs"}, {"score": 0.00418595288276353, "phrase": "dynamic_nature"}, {"score": 0.004129607015893271, "phrase": "programming_language"}, {"score": 0.0038590090616766434, "phrase": "parameter-based_value_specialization"}, {"score": 0.003638823482920949, "phrase": "jit_engines"}, {"score": 0.0034780071331554003, "phrase": "javascript_functions"}, {"score": 0.0030783143919343972, "phrase": "classic_compiler_optimizations"}, {"score": 0.00298238929037041, "phrase": "runtime_values"}, {"score": 0.002955533639862811, "phrase": "function's_actual_parameters"}, {"score": 0.0027993885490232677, "phrase": "ionmonkey"}, {"score": 0.0027616550517346066, "phrase": "industrial_quality_javascript_jit_compiler"}, {"score": 0.0026474161485759754, "phrase": "kraken"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Just-in-time compilation", " JavaScript", " Speculation"], "paper_abstract": "JavaScript emerges today as one of the most important programming languages for the development of client-side web applications. Therefore, it is essential that browsers be able to execute JavaScript programs efficiently. However, the dynamic nature of this programming language makes it very challenging to achieve this much needed efficiency. In this paper we propose parameter-based value specialization as a way to improve the quality of the code produced by JIT engines. We have empirically observed that almost 60% of the JavaScript functions found in the world's 100 most popular websites are called only once, or are called with the same parameters. Capitalizing on this observation, we adapt a number of classic compiler optimizations to specialize code based on the runtime values of function's actual parameters. We have implemented the techniques proposed in this paper in IonMonkey, an industrial quality JavaScript JIT compiler developed at the Mozilla Foundation. Our experiments, run across three popular JavaScript benchmarks, SunSpider, V8 and Kraken, show that, in spite of its highly speculative nature, our optimization pays for itself. As an example, we have been able to speed up V8 by 4.83%, and to reduce the size of its generated native code by 18.84%. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Just-in-time value specialization", "paper_id": "WOS:000346620600001"}