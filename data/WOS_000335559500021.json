{"auto_keywords": [{"score": 0.04842456838190479, "phrase": "parallel_file_systems"}, {"score": 0.00470341117804131, "phrase": "parallel_file_system"}, {"score": 0.004282391936827106, "phrase": "diverse_requirements"}, {"score": 0.004207734323806386, "phrase": "storage_resources"}, {"score": 0.004014923642015515, "phrase": "\"one-size-fits-all\"_solution"}, {"score": 0.0038761135052054765, "phrase": "specific_application_needs"}, {"score": 0.0037862398004482253, "phrase": "full_exploitation"}, {"score": 0.003742084495435749, "phrase": "potential_performance"}, {"score": 0.0033277936960179892, "phrase": "file_handle-rich_scheme"}, {"score": 0.003212663446866794, "phrase": "corresponding_optimizations"}, {"score": 0.003119760592916715, "phrase": "consistency_control_algorithms"}, {"score": 0.0030295361111006866, "phrase": "data_consistency"}, {"score": 0.0028069426877159664, "phrase": "proper_optimizations"}, {"score": 0.00270978310478061, "phrase": "small_files"}, {"score": 0.0026781477395106993, "phrase": "large_files"}, {"score": 0.0025254115243261875, "phrase": "case_study"}, {"score": 0.0024667783849055634, "phrase": "data_prefetch_performance"}, {"score": 0.0024379730432321656, "phrase": "real-world_application"}, {"score": 0.0023124457559811087, "phrase": "correct_prefetch_patterns"}, {"score": 0.002258745901862197, "phrase": "large-scale_environment"}, {"score": 0.0021049977753042253, "phrase": "consistency_control_overhead"}], "paper_keywords": ["Parallel file system", " Rich file handle", " I/O path selection", " Consistency control", " Small file optimization", " Data prefetching"], "paper_abstract": "Parallel file systems are experiencing more and more applications from various fields. Various applications have different I/O workload characteristics, which have diverse requirements on accessing storage resources. However, parallel file systems often adopt the \"one-size-fits-all\" solution, which fails to meet specific application needs and hinders the full exploitation of potential performance. This paper presents a framework to enable dynamic file I/O path selection with fine granularity at runtime. The framework adopts a file handle-rich scheme to allow file systems choose corresponding optimizations to serve I/O requests. Consistency control algorithms are proposed to ensure data consistency while changing optimizations at runtime. One case study on our prototype shows that choosing proper optimizations can improve the I/O performance for small files and large files by up to 40 and 64.4 %, respectively. Another case study shows that the data prefetch performance for real-world application traces can be improved by up to 193 % by selecting correct prefetch patterns. Simulations in large-scale environment also show that our method is scalable and both the memory consumption and the consistency control overhead can be negligible.", "paper_title": "Enabling dynamic file I/O path selection at runtime for parallel file system", "paper_id": "WOS:000335559500021"}