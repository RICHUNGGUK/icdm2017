{"auto_keywords": [{"score": 0.04550288640963527, "phrase": "base_analysis"}, {"score": 0.00481495049065317, "phrase": "demand-driven_null-dereference_verification_approach"}, {"score": 0.004466519142879166, "phrase": "java_programs"}, {"score": 0.004248294537944227, "phrase": "enhanced_precision"}, {"score": 0.0041580507929967645, "phrase": "dataflow_analysis"}, {"score": 0.004055176557424983, "phrase": "backward_direction"}, {"score": 0.003940706575253453, "phrase": "necessary_condition"}, {"score": 0.003464150192089816, "phrase": "library_method_calls"}, {"score": 0.0033905067962602515, "phrase": "excessive_analysis_time"}, {"score": 0.0027543636132088332, "phrase": "full_analysis"}, {"score": 0.002695768552609587, "phrase": "first_extension"}, {"score": 0.00266693888510356, "phrase": "novel_scheme"}, {"score": 0.0026008598632891837, "phrase": "def-use_edges"}, {"score": 0.0025638362414466278, "phrase": "second_extension"}, {"score": 0.0025182951088683863, "phrase": "manually_constructed_backward-direction_summary_functions"}, {"score": 0.0023694065215394593, "phrase": "real-life_benchmarks"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Dataflow analysis", " Weakest pre-conditions"], "paper_abstract": "The problem addressed in this paper is sound, scalable, demand-driven null-dereference verification for Java programs. Our approach consists conceptually of a base analysis, plus two major extensions for enhanced precision. The base analysis is a dataflow analysis wherein we propagate formulas in the backward direction from a given dereference, and compute a necessary condition at the entry of the program for the dereference to be potentially unsafe. The extensions are motivated by the presence of certain \"difficult\" constructs in real programs, e.g., virtual calls with too many candidate targets, and library method calls, which happen to need excessive analysis time to be analyzed fully. The base analysis is hence configured to skip such a difficult construct when it is encountered by dropping all information that has been tracked so far that could potentially be affected by the construct. Our extensions are essentially more precise ways to account for the effect of these constructs on information that is being tracked, without requiring full analysis of these constructs. The first extension is a novel scheme to transmit formulas along certain kinds of def-use edges, while the second extension is based on using manually constructed backward-direction summary functions of library methods. We have implemented our approach, and applied it on a set of real-life benchmarks. The base analysis is on average able to declare about 84% of dereferences in each benchmark as safe, while the two extensions push this number up to 91%. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Two techniques to improve the precision of a demand-driven null-dereference verification approach", "paper_id": "WOS:000347741400009"}