{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "asp_programs"}, {"score": 0.03371359419978347, "phrase": "efficient_implementation"}, {"score": 0.004475798524102238, "phrase": "set_programming"}, {"score": 0.004085115444878828, "phrase": "aggregate-free_programs"}, {"score": 0.004029517895918228, "phrase": "significant_amount"}, {"score": 0.0039928721865882, "phrase": "research_work"}, {"score": 0.003849579089885659, "phrase": "asp_community"}, {"score": 0.0037626342268042997, "phrase": "relevant_research_results"}, {"score": 0.0037284841630926095, "phrase": "asp"}, {"score": 0.0035781807623238905, "phrase": "theoretical_and_practical_sides"}, {"score": 0.0035294580355761506, "phrase": "high_expressiveness"}, {"score": 0.003310684108128973, "phrase": "program_size"}, {"score": 0.003265591844292821, "phrase": "suitable_evaluation_methods"}, {"score": 0.0032358709481309913, "phrase": "optimization_techniques"}, {"score": 0.0030771609361092164, "phrase": "above-mentioned_research_developments"}, {"score": 0.0029802289354540507, "phrase": "quite_straightforward_way"}, {"score": 0.0028082176224611542, "phrase": "look-back_techniques"}, {"score": 0.002682669289913153, "phrase": "reason_calculus"}, {"score": 0.0024258208033731154, "phrase": "look-back_heuristics"}, {"score": 0.0022857351723674004, "phrase": "proposed_heuristics"}, {"score": 0.002254571365634257, "phrase": "dlv_system"}, {"score": 0.0021834945657804193, "phrase": "experimental_analysis"}, {"score": 0.0021049977753042253, "phrase": "significant_performance_benefits"}], "paper_keywords": ["Knowledge Representation and Reasoning", " Nonmonotonic Reasoning", " Answer Set Programming", " Heuristics", " Aggregates"], "paper_abstract": "The introduction of aggregates has been one of the most relevant language extensions to Answer Set Programming (ASP). Aggregates are very expressive, they allow to represent many problems in a more succinct and elegant way compared to aggregate-free programs. A significant amount of research work has been devoted to aggregates in the ASP community in the last years, and relevant research results on ASP with aggregates have been published, on both theoretical and practical sides. The high expressiveness of aggregates (eliminating aggregates often causes a quadratic blow-up in program size) requires suitable evaluation methods and optimization techniques for an efficient implementation. Nevertheless, in spite of the above-mentioned research developments, aggregates are treated in a quite straightforward way in most ASP systems. In this paper, we explore the exploitation of look-back techniques for an efficient implementation of aggregates. We define a reason calculus for backjumping in ASP programs with aggregates. Furthermore, we describe how these reasons can be used in order to guide look-back heuristics for programs with aggregates. We have implemented both the new reason calculus and the proposed heuristics in the DLV system, and have carried out an experimental analysis on publicly available, benchmarks which shows significant performance benefits.", "paper_title": "Look-back Techniques for ASP Programs with Aggregates", "paper_id": "WOS:000290637400004"}