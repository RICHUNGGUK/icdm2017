{"auto_keywords": [{"score": 0.034887398305923065, "phrase": "data_tokens"}, {"score": 0.00481495049065317, "phrase": "end-to-end_delays"}, {"score": 0.004527947981009528, "phrase": "data_processing"}, {"score": 0.00422899036681456, "phrase": "health_monitoring"}, {"score": 0.004143196873246147, "phrase": "intrusion_detection"}, {"score": 0.0038170129089059013, "phrase": "time_delays"}, {"score": 0.0037651925588909783, "phrase": "stream_query_processing"}, {"score": 0.0036386875640595944, "phrase": "stream_query"}, {"score": 0.003152006152091526, "phrase": "causality_relationship"}, {"score": 0.002883833572486452, "phrase": "total_time"}, {"score": 0.0023810183846557486, "phrase": "causality_relationships"}, {"score": 0.0023486473525617816, "phrase": "periodic_schedules"}, {"score": 0.0023167153974120083, "phrase": "stream_queries"}, {"score": 0.0021932609696277937, "phrase": "proposed_technique"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Stream data processing", " Distributed environment", " End-to-end delay"], "paper_abstract": "Real-time data processing is essential in many stream-based applications including disaster area monitoring, health monitoring, and intrusion detection. In this work, we propose an approach that measures time delays in stream query processing. We represent a stream query as a graph consisting of operators that process data and channels that transport data tokens between operators. Our model establishes a causality relationship between consumed and produced data tokens at each operator and their corresponding occurrence times. The total time taken for the computation from the input to the output of a query, i.e., end-to-end delay, is computed by the causality relationships and periodic schedules for stream queries. Experiments are conducted to validate the proposed technique. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Computing end-to-end delays in stream query processing", "paper_id": "WOS:000356198600007"}