{"auto_keywords": [{"score": 0.048877326221094704, "phrase": "java"}, {"score": 0.015719074116237117, "phrase": "alting_barriers"}, {"score": 0.0046544807197808095, "phrase": "jcsp._communicating_sequential_processes"}, {"score": 0.004576253356889219, "phrase": "jcsp"}, {"score": 0.004499334809770281, "phrase": "mature_library"}, {"score": 0.0044424917428102445, "phrase": "csp-derived_concurrency_primitives"}, {"score": 0.004349337717774093, "phrase": "jcsp_system"}, {"score": 0.004294381488413906, "phrase": "hierarchical_network"}, {"score": 0.004258128672571261, "phrase": "autonomous_processes"}, {"score": 0.0039119492240482, "phrase": "significant_extension"}, {"score": 0.0038624981944755813, "phrase": "barrier_mechanism"}, {"score": 0.0036864465771943933, "phrase": "barrier_events"}, {"score": 0.0036553070575015344, "phrase": "channel_communications"}, {"score": 0.0034154440860550564, "phrase": "currently_released_libraries"}, {"score": 0.0033437537557378157, "phrase": "csp_concurrency_model"}, {"score": 0.003259702394241964, "phrase": "channel_inputs"}, {"score": 0.002833689453299307, "phrase": "channel_outputs"}, {"score": 0.002762423953243486, "phrase": "simple_consequence"}, {"score": 0.0026475981474045414, "phrase": "efficient_implementation"}, {"score": 0.0026252106881752067, "phrase": "csp's_broadcasting_channels"}, {"score": 0.0025591748412278174, "phrase": "phased_barrier_synchronisation_pattern"}, {"score": 0.0024012441367538434, "phrase": "extended_jcsp"}, {"score": 0.002380934815435267, "phrase": "almost_all_csp-specified_systems"}, {"score": 0.0023013968622710847, "phrase": "new_library"}, {"score": 0.00226262796574118, "phrase": "lgpl"}, {"score": 0.0021501863832966966, "phrase": "ncc_brown"}], "paper_keywords": ["JCSP", " CSP", " choice", " alting barriers", " output guards", " broadcast channels"], "paper_abstract": "Communicating Sequential Processes for Java (JCSP) is a mature library that implements CSP-derived concurrency primitives in Java. A JCSP system is a hierarchical network of autonomous processes communicating over synchronous (optionally buffered) channels, and multiway synchronising through barriers. This paper presents a significant extension to the barrier mechanism: the fast resolution of choice between any number of barrier events, channel communications (in either direction) and timeouts. Previously, and in line with all currently released libraries and languages offering the CSP concurrency model, choice was restricted to channel inputs and timeouts. The paper demonstrates an application of alting barriers and explains the mechanisms used in their implementation that enables their use as guards in a choice. It also shows how choice over channel outputs becomes possible, as a simple consequence of having choice over barriers. Finally, an efficient implementation of CSP's broadcasting channels is presented (using a phased barrier synchronisation pattern) and a mechanism for allowing choice over these is discussed. With this extended JCSP, almost all CSP-specified systems can now be directly implemented. The new library is available under LGPL open source. Copyright (C) 2010 PH Welch, NCC Brown, J Moores, KV Chalmers & B Sputh.", "paper_title": "Alting barriers: synchronisation with choice in Java using JCSP", "paper_id": "WOS:000277746100010"}