{"auto_keywords": [{"score": 0.030408555694276515, "phrase": "internal_pointers"}, {"score": 0.004774324145784758, "phrase": "data_encoding"}, {"score": 0.00459568664065473, "phrase": "desktop_applications"}, {"score": 0.004518442937844318, "phrase": "large_scale_adoption"}, {"score": 0.004480307124735185, "phrase": "actual_system_implementations"}, {"score": 0.004186534737631288, "phrase": "lazy_parsing_techniques"}, {"score": 0.004133627071344356, "phrase": "major_step"}, {"score": 0.004012751049253625, "phrase": "lazy_parsers"}, {"score": 0.003945266418163835, "phrase": "key_drawback"}, {"score": 0.0038461532860146535, "phrase": "entire_xml_document"}, {"score": 0.0037495207047193034, "phrase": "overall_document_structure"}, {"score": 0.0037178503842258087, "phrase": "document_parsing"}, {"score": 0.003548368289666932, "phrase": "efficient_parsing"}, {"score": 0.0034445472801689046, "phrase": "internal_physical_pointers"}, {"score": 0.003400984514637656, "phrase": "xml_document"}, {"score": 0.0033437537557378157, "phrase": "navigation_process"}, {"score": 0.003301461490509176, "phrase": "large_portions"}, {"score": 0.002944039482467119, "phrase": "double-lazy_parser"}, {"score": 0.002658863179011018, "phrase": "backward_compatible-i.e"}, {"score": 0.0026140878612307536, "phrase": "pointer-augmented_documents"}, {"score": 0.0025591748412278174, "phrase": "current_xml_parsers"}, {"score": 0.0024527767211457046, "phrase": "large_documents"}, {"score": 0.0024320326084093465, "phrase": "limited_main_memory"}, {"score": 0.002380934815435267, "phrase": "major_limitation"}, {"score": 0.002360796860462937, "phrase": "current_solutions"}, {"score": 0.0021593396036472777, "phrase": "existing_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["XML", " DOM", " Trees", " Document management", " Optimization"], "paper_abstract": "XML is acknowledged as the most effective format for data encoding and exchange over domains ranging from the World Wide Web to desktop applications. However, large scale adoption into actual system implementations is being slowed down due to the inefficiency of its document-parsing methods. The recent development of lazy parsing techniques is a major step towards improving this situation, but lazy parsers still have a key drawback-they must load the entire XML document in order to extract the overall document structure before document parsing can be performed. We have developed a framework for efficient parsing based on the idea of placing internal physical pointers within the XML document that allow the navigation process to skip large portions of the document during parsing. We show how to generate such internal pointers in a way that optimizes parsing using constructs supported by the current W3C XML standard. A double-lazy parser (2LP) exploits these internal pointers to efficiently parse the document. The usage of supported W3C constructs to create internal pointers allows 2LP to be backward compatible-i.e., the pointer-augmented documents can be parsed by current XML parsers. We also implemented a mechanism to efficiently parse large documents with limited main memory, thereby overcoming a major limitation in current solutions. We study our pointer generation and parsing algorithms both theoretically and experimentally, and show that they perform considerably better than existing approaches. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "2LP: A double-lazy XML parser", "paper_id": "WOS:000262892200008"}