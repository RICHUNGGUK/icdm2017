{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "unsymmetric_multifrontal_method"}, {"score": 0.004761494751659412, "phrase": "multifrontal"}, {"score": 0.004682414867878963, "phrase": "efficient_direct_method"}, {"score": 0.0046046429665581555, "phrase": "large-scale_sparse_and_unsymmetric_linear_systems"}, {"score": 0.00445293569103488, "phrase": "large_sparse_matrix_factorization_process"}, {"score": 0.00428222231579898, "phrase": "smaller_dense_frontal_matrices"}, {"score": 0.0041642891310893, "phrase": "dense_operations"}, {"score": 0.00400459716272594, "phrase": "graphic_processing_unit"}, {"score": 0.003274797704808031, "phrase": "blas"}, {"score": 0.00306227185008558, "phrase": "communication_efficiency"}, {"score": 0.0029282926103224717, "phrase": "page-locked_memory"}, {"score": 0.002895721231882758, "phrase": "zero-copy_memory"}, {"score": 0.002847540262784593, "phrase": "asynchronous_memory_copy"}, {"score": 0.002707741309851526, "phrase": "different_cpu_tasks"}, {"score": 0.0025319522343220584, "phrase": "cpu."}, {"score": 0.0025037596405075866, "phrase": "proposed_acceleration_strategies"}, {"score": 0.0024346862433992584, "phrase": "umfpack"}, {"score": 0.0023675132064088803, "phrase": "unsymmetric_multifrontal_linear_system_solver"}, {"score": 0.002276566401216226, "phrase": "cpu-cpu_hybrid_approach"}, {"score": 0.0022261705957258506, "phrase": "unsymmetric_multifrontal_solver"}, {"score": 0.002176887956041267, "phrase": "computationally_expensive_problems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Sparse and unsymmetric linear systems", " Multifrontal", " CPU-GPU hybrid approach", " Parallel computing"], "paper_abstract": "Multifrontal is an efficient direct method for solving large-scale sparse and unsymmetric linear systems. The method transforms a large sparse matrix factorization process into a sequence of factorizations involving smaller dense frontal matrices. Some of these dense operations can be accelerated by using a graphic processing unit (CPU). We analyze the unsymmetric multifrontal method from both an algorithmic and implementational perspective to see how a CPU, in particular the NVIDIA Tesla C2070, can be used to accelerate the computations. Our main accelerating strategies include (i) performing BLAS on both CPU and CPU, (ii) improving the communication efficiency between the CPU and CPU by using page-locked memory, zero-copy memory, and asynchronous memory copy, and (iii) a modified algorithm that reuses the memory between different CPU tasks and sets thresholds to determine whether certain tasks be performed on the CPU. The proposed acceleration strategies are implemented by modifying UMFPACK, which is an unsymmetric multifrontal linear system solver. Numerical results show that the CPU-CPU hybrid approach can accelerate the unsymmetric multifrontal solver, especially for computationally expensive problems. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A CPU-GPU hybrid approach for the unsymmetric multifrontal method", "paper_id": "WOS:000298522200004"}