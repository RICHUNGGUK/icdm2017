{"auto_keywords": [{"score": 0.049153885406092224, "phrase": "veristar"}, {"score": 0.00481495049065317, "phrase": "verified_heap_theorem_prover"}, {"score": 0.004600596158672458, "phrase": "decidable_subset"}, {"score": 0.004570759604335229, "phrase": "separation_logic"}, {"score": 0.004381463049850675, "phrase": "smallfoot"}, {"score": 0.004296747096249343, "phrase": "c_minor"}, {"score": 0.004172722575842674, "phrase": "static_analyses"}, {"score": 0.004132178452877669, "phrase": "efficient_theorem_provers"}, {"score": 0.004039094712469991, "phrase": "formal_methods"}, {"score": 0.00389702203873437, "phrase": "first_application"}, {"score": 0.003747705541406206, "phrase": "machine-verified_program_logics"}, {"score": 0.003699210979926274, "phrase": "foundational_correctness_guarantees"}, {"score": 0.0031845067058084583, "phrase": "gallina"}, {"score": 0.003082427650896418, "phrase": "coq_theorem_prover"}, {"score": 0.002945021705469588, "phrase": "coq"}, {"score": 0.0028412769256691, "phrase": "checked_entailment"}, {"score": 0.002804478352027886, "phrase": "proved-sound_separation_logic"}, {"score": 0.0026274936167233515, "phrase": "c_minor_program"}, {"score": 0.0025349467677077803, "phrase": "semantically_equivalent_assembly_program"}, {"score": 0.0025021056497407765, "phrase": "real_hardware"}, {"score": 0.002336527289457915, "phrase": "heap_entailments"}, {"score": 0.0022912596877648723, "phrase": "functional_data_structures"}, {"score": 0.0021747784376752776, "phrase": "plug-compatible_entailment_checker"}], "paper_keywords": ["Verification", " Separation Logic", " Paramodulation", " Theorem Proving"], "paper_abstract": "We present VeriStar, a verified theorem prover for a decidable subset of separation logic. Together with VeriSmall [3], a proved-sound Smallfoot-style program analysis for C minor, VeriStar demonstrates that fully machine-checked static analyses equipped with efficient theorem provers are now within the reach of formal methods. As a pair, VeriStar and VeriSmall represent the first application of the Verified Software Toolchain [4], a tightly integrated collection of machine-verified program logics and compilers giving foundational correctness guarantees. VeriStar is (1) purely functional, (2) machine-checked, (3) end-to-end, (4) efficient and (5) modular. By purely functional, we mean it is implemented in Gallina, the pure functional programming language embedded in the Coq theorem prover. By machine-checked, we mean it has a proof in Coq that when the prover says \"valid\", the checked entailment holds in a proved-sound separation logic for C minor. By end-to-end, we mean that when the static analysis+theorem prover says a C minor program is safe, the program will be compiled to a semantically equivalent assembly program that runs on real hardware. By efficient, we mean that the prover implements a state-of-the-art algorithm for deciding heap entailments and uses highly tuned verified functional data structures. By modular, we mean that VeriStar can be retrofitted to other static analyses as a plug-compatible entailment checker and its soundness proof can easily be ported to other separation logics.", "paper_title": "Verified Heap Theorem Prover by Paramodulation", "paper_id": "WOS:000311296000002"}