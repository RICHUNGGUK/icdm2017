{"auto_keywords": [{"score": 0.014374988770743669, "phrase": "lru"}, {"score": 0.013833897658256725, "phrase": "heterogeneous_applications"}, {"score": 0.00481495049065317, "phrase": "shared_storage_cache"}, {"score": 0.004592340708764929, "phrase": "fair_storage_cache_allocation"}, {"score": 0.004552981066668676, "phrase": "multiple_competing_applications"}, {"score": 0.004513957235071457, "phrase": "diversified_access_rates"}, {"score": 0.0044369056710423065, "phrase": "cache_replacement_policies"}, {"score": 0.004268293864953256, "phrase": "cache_allocation"}, {"score": 0.004035946043145475, "phrase": "high_access_rate"}, {"score": 0.003916098498242888, "phrase": "slow_access_rate"}, {"score": 0.003816197777388722, "phrase": "fast_access_rate"}, {"score": 0.0037348894128879082, "phrase": "higher_performance"}, {"score": 0.003686935223424015, "phrase": "additional_cache_blocks"}, {"score": 0.003592859432554987, "phrase": "slow_application"}, {"score": 0.0035620354052144656, "phrase": "poor_performance"}, {"score": 0.0035162927451540065, "phrase": "reduced_cache_size"}, {"score": 0.003310447652300423, "phrase": "cache_blocks"}, {"score": 0.003157174936641705, "phrase": "partition-based_cache_management_algorithm"}, {"score": 0.0028715299874549245, "phrase": "specified_fairness_degree"}, {"score": 0.0028468767420392945, "phrase": "least_performance_degradation"}, {"score": 0.002703327151461985, "phrase": "adaptive_partition_framework"}, {"score": 0.0026456667695073043, "phrase": "shared_cache"}, {"score": 0.002622947550220266, "phrase": "competing_applications"}, {"score": 0.002566997205079849, "phrase": "partition_size"}, {"score": 0.00253400005142168, "phrase": "predicted_utility"}, {"score": 0.002416589459425828, "phrase": "storage_simulator"}, {"score": 0.0023145690608400425, "phrase": "experimental_results"}, {"score": 0.0022168460543913787, "phrase": "large_improvement"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Fairness", " Performance", " Rate-aware", " Heterogeneous", " Storage cache"], "paper_abstract": "In this paper, we investigate the problem of fair storage cache allocation among multiple competing applications with diversified access rates. Commonly used cache replacement policies like LRU and most LRU variants are inherently unfair in cache allocation for heterogeneous applications. They implicitly give more cache to the applications that has high access rate and less cache to the applications of slow access rate. However, applications of fast access rate do not always gain higher performance from the additional cache blocks. In contrast, the slow application suffer poor performance with a reduced cache size. It is beneficial in terms of both performance and fairness to allocate cache blocks by their utility. In this paper, we propose a partition-based cache management algorithm for a shared cache. The goal of our algorithm is to find an allocation such that all heterogeneous applications can achieve a specified fairness degree as least performance degradation as possible. To achieve this goal, we present an adaptive partition framework, which partitions the shared cache among competing applications and dynamically adjusts the partition size based on predicted utility on both fairness and performance. We implement our algorithm in a storage simulator and evaluate the fairness and performance with various workloads. Experimental results show that, compared with LRU, our algorithm achieves large improvement in fairness and slightly in performance. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Heterogeneous-aware cache partitioning: Improving the fairness of shared storage cache", "paper_id": "WOS:000347018800011"}