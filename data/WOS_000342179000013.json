{"auto_keywords": [{"score": 0.049352273134126434, "phrase": "artificial_barrier_synchronization"}, {"score": 0.022539882475418434, "phrase": "barrier_synchronization"}, {"score": 0.00481495049065317, "phrase": "gpu_memory_performance"}, {"score": 0.004260134699483774, "phrase": "data_consistency"}, {"score": 0.0037402558657576124, "phrase": "different_viewpoint"}, {"score": 0.003208999546225013, "phrase": "memory-intensive_applications"}, {"score": 0.003018196463874475, "phrase": "memory_contention_model"}, {"score": 0.00288255520607591, "phrase": "memory_contention"}, {"score": 0.0028170314398963704, "phrase": "data_access_locality"}, {"score": 0.002731971103291716, "phrase": "practical_applications"}, {"score": 0.002629238854352447, "phrase": "program_pattern"}, {"score": 0.0023798115577749225, "phrase": "data_locality"}, {"score": 0.002272794656458419, "phrase": "empirical_results"}], "paper_keywords": ["Graphics processors", " synchronization", " parallel languages", " resource contention"], "paper_abstract": "Barrier synchronization, an essential mechanism for a block of threads to guard data consistency, is regarded as a threat to performance. This study, however, provides a different viewpoint for barrier synchronization on GPUs: adding barrier synchronization, even when functionally unnecessary, can improve the performance of some memory-intensive applications. We explain this phenomenon using a memory contention model in which artificial barrier synchronization helps reduce memory contention and preserve data access locality. To yield practical applications, we identify a program pattern: artificial barrier synchronization can be used to synchronize the memory accesses when the data locality among threads is violated. Empirical results from three real-world applications demonstrate that artificial barrier synchronization can increase performance by 10 to 20 percent.", "paper_title": "Improving GPU Memory Performance with Artificial Barrier Synchronization", "paper_id": "WOS:000342179000013"}