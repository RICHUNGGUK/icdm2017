{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "interpretation_overhead"}, {"score": 0.004779406424192843, "phrase": "r._r"}, {"score": 0.004726579360618152, "phrase": "popular_dynamic_language"}, {"score": 0.004674333455266527, "phrase": "statistical_computing"}, {"score": 0.004622662375029505, "phrase": "r's_huge_user_base"}, {"score": 0.004537804310268603, "phrase": "r's_language_implementation"}, {"score": 0.004487635647709636, "phrase": "major_pain-point"}, {"score": 0.004260719592945006, "phrase": "large_scale_analytics_problems"}, {"score": 0.004120915812750583, "phrase": "dynamic_languages"}, {"score": 0.0038691879515317267, "phrase": "significant_changes"}, {"score": 0.0037283301619292636, "phrase": "development_teams"}, {"score": 0.0036059320136308808, "phrase": "new_approach"}, {"score": 0.003566028957296066, "phrase": "execution_efficiency"}, {"score": 0.003539671663910004, "phrase": "r_programs"}, {"score": 0.0034875380341306468, "phrase": "widely_used_apply_class"}, {"score": 0.0033110234463504125, "phrase": "input_data_elements"}, {"score": 0.0032743731084995515, "phrase": "standard_implementation"}, {"score": 0.0032022811145186974, "phrase": "input_function"}, {"score": 0.0031317713853981064, "phrase": "data_collection"}, {"score": 0.0030856268625708695, "phrase": "data_transformation"}, {"score": 0.0030628094110419697, "phrase": "function_vectorization"}, {"score": 0.0030176779201170306, "phrase": "looping-over-data_execution"}, {"score": 0.0029402874300114537, "phrase": "single_invocation"}, {"score": 0.0029077288662492894, "phrase": "vectorized_function"}, {"score": 0.0028436862612859896, "phrase": "vector_operations"}, {"score": 0.0028121943702224326, "phrase": "input_data"}, {"score": 0.002689666606553487, "phrase": "apply_operations"}, {"score": 0.0026109540617641593, "phrase": "interpretation_steps"}, {"score": 0.002562929776267296, "phrase": "vectorization_transformation"}, {"score": 0.002534539169474629, "phrase": "r_package"}, {"score": 0.0023270490574896804, "phrase": "normal_r_interpreter"}, {"score": 0.002242206465278159, "phrase": "proposed_method"}, {"score": 0.00222561197623787, "phrase": "significant_performance_improvements"}, {"score": 0.0021846599115561832, "phrase": "data_analysis_algorithm_benchmarks"}, {"score": 0.002128587147609537, "phrase": "native_code_generation"}], "paper_keywords": ["Language", " Transformation", " Performance", " Dynamic Language", " R", " Vectorization"], "paper_abstract": "R is a popular dynamic language designed for statistical computing. Despite R's huge user base, the inefficiency in R's language implementation becomes a major pain-point in everyday use as well as an obstacle to apply R to solve large scale analytics problems. The two most common approaches to improve the performance of dynamic languages are: implementing more efficient interpretation strategies and extending the interpreter with Just-In-Time (JIT) compiler. However, both approaches require significant changes to the interpreter, and complicate the adoption by development teams as a result. This paper presents a new approach to improve execution efficiency of R programs by vectorizing the widely used Apply class of operations. Apply accepts two parameters: a function and a collection of input data elements. The standard implementation of Apply iteratively invokes the input function with each element in the data collection. Our approach combines data transformation and function vectorization to convert the looping-over-data execution of the standard Apply into a single invocation of a vectorized function that contains a sequence of vector operations over the input data. This conversion can significantly speed-up the execution of Apply operations in R by reducing the number of interpretation steps. We implemented the vectorization transformation as an R package. To enable the optimization, all that is needed is to invoke the package, and the user can use a normal R interpreter without any changes. The evaluation shows that the proposed method delivers significant performance improvements for a collection of data analysis algorithm benchmarks. This is achieved without any native code generation and using only a single-thread of execution.", "paper_title": "Vectorization of Apply to Reduce Interpretation Overhead of R", "paper_id": "WOS:000367256500023"}