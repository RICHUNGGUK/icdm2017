{"auto_keywords": [{"score": 0.04973174391930041, "phrase": "continuous_intersection"}, {"score": 0.015719716506582538, "phrase": "highly_optimized_algorithm"}, {"score": 0.012037591816421589, "phrase": "real_time"}, {"score": 0.0045591142048535165, "phrase": "nonzero_extents"}, {"score": 0.004476878957065829, "phrase": "query_reports"}, {"score": 0.004412155302768363, "phrase": "intersecting_objects"}, {"score": 0.003969957613513855, "phrase": "multi-billion_dollar_computer_game_industry"}, {"score": 0.003745179888113379, "phrase": "players'_attack_ranges"}, {"score": 0.003704467870496114, "phrase": "players'_interaction"}, {"score": 0.0036375920152538783, "phrase": "computational_cost"}, {"score": 0.0035980453088879393, "phrase": "straightforward_algorithm"}, {"score": 0.00350742771604554, "phrase": "query_type"}, {"score": 0.003357343256340741, "phrase": "great_challenge"}, {"score": 0.003284718806701356, "phrase": "query_answer"}, {"score": 0.0030205408413942272, "phrase": "query_processing"}, {"score": 0.002987682397171167, "phrase": "time_dimension"}, {"score": 0.0028493650087584774, "phrase": "new_concept"}, {"score": 0.0027674397462322435, "phrase": "tc_processing"}, {"score": 0.002717433692385074, "phrase": "effective_improvement_techniques"}, {"score": 0.0026976845075643314, "phrase": "traditional_intersection"}, {"score": 0.0025727581823022268, "phrase": "optimal_value"}, {"score": 0.0025447584328314754, "phrase": "important_parameter"}, {"score": 0.002289285767792039, "phrase": "thorough_experimental_study"}, {"score": 0.0022234280592615756, "phrase": "best_adapted_existing_solution"}], "paper_keywords": ["Spatial databases", " Moving objects", " Continuous intersection join"], "paper_abstract": "Given two sets of moving objects with nonzero extents, the continuous intersection join query reports every pair of intersecting objects, one from each of the two moving object sets, for every timestamp. This type of queries is important for a number of applications, e.g., in the multi-billion dollar computer game industry, massively multiplayer online games like World of Warcraft need to monitor the intersection among players' attack ranges and render players' interaction in real time. The computational cost of a straightforward algorithm or an algorithm adapted from another query type is prohibitive, and answering the query in real time poses a great challenge. Those algorithms compute the query answer for either too long or too short a time interval, which results in either a very large computation cost per answer update or too frequent answer updates, respectively. This observation motivates us to optimize the query processing in the time dimension. In this study, we achieve this optimization by introducing the new concept of time-constrained (TC) processing. Further, TC processing enables a set of effective improvement techniques on traditional intersection join algorithms. Finally, we provide a method to find the optimal value for an important parameter required in our technique, the maximum update interval. As a result, we achieve a highly optimized algorithm for processing continuous intersection join queries on moving objects. With a thorough experimental study, we show that our algorithm outperforms the best adapted existing solution by several orders of magnitude. We also validate the accuracy of our cost model and its effectiveness in optimizing the performance.", "paper_title": "A highly optimized algorithm for continuous intersection join queries over moving objects", "paper_id": "WOS:000306510200006"}