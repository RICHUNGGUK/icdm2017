{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "longest_previous_factor"}, {"score": 0.04913548507380238, "phrase": "linear_time"}, {"score": 0.003945467978172845, "phrase": "string_w."}, {"score": 0.003397683082821229, "phrase": "longest_factor"}, {"score": 0.003044785536429499, "phrase": "w._several_properties"}, {"score": 0.0029257365458607554, "phrase": "lpf"}, {"score": 0.002701361707441567, "phrase": "lempel-ziv_factorization"}, {"score": 0.002234893735225432, "phrase": "integer_alphabet_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["design of algorithms", " analysis of algorithms", " strings", " suffix array", " longest common prefix", " longest previous factor", " Lempel-Ziv factorization", " repetitions", " runs"], "paper_abstract": "We give two optimal linear-time algorithms for computing the Longest Previous Factor (LPF) array corresponding to a string w. For any position i in w, LPF[i] gives the length of the longest factor of w starting at position i that occurs previously in w. Several properties and applications of LPF are investigated. They include computing the Lempel-Ziv factorization of a string and detecting all repetitions (runs) in a string in linear time independently of the integer alphabet size. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Computing longest previous factor in linear time and applications", "paper_id": "WOS:000255072500006"}