{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_faults"}, {"score": 0.00630229394745639, "phrase": "emulation_operators"}, {"score": 0.00439041997682389, "phrase": "fault_tolerance_mechanisms"}, {"score": 0.004220086640742953, "phrase": "computer_systems"}, {"score": 0.003539252646181146, "phrase": "source-code_independent_manner"}, {"score": 0.00346223706087128, "phrase": "important_emulation_requirements"}, {"score": 0.0034168317227203206, "phrase": "fault_representativeness"}, {"score": 0.0033868916699805224, "phrase": "emulation_accuracy"}, {"score": 0.003255364511414329, "phrase": "extensive_collection"}, {"score": 0.003226834737003501, "phrase": "real_software_faults"}, {"score": 0.003142732162296465, "phrase": "large_percentage"}, {"score": 0.00307431840409833, "phrase": "well-defined_classes"}, {"score": 0.002941913249957503, "phrase": "accurate_emulation"}, {"score": 0.0028778584739756786, "phrase": "small_set"}, {"score": 0.0028151944356239952, "phrase": "new_software_fault_injection_technique"}, {"score": 0.0027905114793984084, "phrase": "g-swfit"}, {"score": 0.002693919110230191, "phrase": "field_study"}, {"score": 0.0025892330566358503, "phrase": "key_programming_structures"}, {"score": 0.002555247330102505, "phrase": "machine_code-level"}, {"score": 0.0025328377393370642, "phrase": "high-level_software_faults"}, {"score": 0.0024667783849055634, "phrase": "fault-emulation_accuracy"}, {"score": 0.0023090525096074264, "phrase": "key_aspects"}, {"score": 0.002258745901862197, "phrase": "technique_accuracy"}, {"score": 0.0021049977753042253, "phrase": "high_degree"}], "paper_keywords": ["fault injection", " software faults", " software reliability"], "paper_abstract": "The injection of faults has been widely used to evaluate fault tolerance mechanisms and to assess the impact of faults in computer systems. However, the injection of software faults is not as well understood as other classes of faults (e.g., hardware faults). In this paper, we analyze how software faults can be injected (emulated) in a source-code independent manner. We specifically address important emulation requirements such as fault representativeness and emulation accuracy. We start with the analysis of an extensive collection of real software faults. We observed that a large percentage of faults falls into well-defined classes and can be characterized in a very precise way, allowing accurate emulation of software faults through a small set of emulation operators. A new software fault injection technique (G-SWFIT) based on emulation operators derived from the field study is proposed. This technique consists of finding key programming structures at the machine code-level where high-level software faults can be emulated. The fault-emulation accuracy of this technique is shown. This work also includes a study on the key aspects that may impact the technique accuracy. The portability of the technique is also discussed and it is shown that a high degree of portability can be achieved.", "paper_title": "Emulation of software faults: A field data study and a practical approach", "paper_id": "WOS:000241720900001"}