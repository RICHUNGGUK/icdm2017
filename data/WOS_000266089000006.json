{"auto_keywords": [{"score": 0.04733190377720631, "phrase": "parallel_processing"}, {"score": 0.00481495049065317, "phrase": "image_processing_application"}, {"score": 0.004721162131188487, "phrase": "recent_trends"}, {"score": 0.004421471944783611, "phrase": "new_areas"}, {"score": 0.004223032986655664, "phrase": "many-core_desktop_processors"}, {"score": 0.004167982855788402, "phrase": "multi-processor_system"}, {"score": 0.0038271712887391015, "phrase": "application_areas"}, {"score": 0.0036793800647811365, "phrase": "parallel_programs"}, {"score": 0.003445591238183763, "phrase": "embedded_image_processing_application"}, {"score": 0.003378385493203297, "phrase": "major_challenges"}, {"score": 0.0030414140732789186, "phrase": "load_imbalance"}, {"score": 0.0029238768315330305, "phrase": "immediately_available_parallelism"}, {"score": 0.0027741761880779535, "phrase": "small_data_sets"}, {"score": 0.0027200305495826797, "phrase": "relatively_high_parallelization_overhead"}, {"score": 0.002530359917257626, "phrase": "limited_parallelism"}, {"score": 0.0024485643104830814, "phrase": "non-uniform_memory_latency"}, {"score": 0.0022041312401435346, "phrase": "modifications_relative_speedups"}], "paper_keywords": ["OpenMP", " Image processing", " Parallelization", " Performance evaluation"], "paper_abstract": "The recent trends in processor architecture show that parallel processing is moving into new areas of computing in the form of many-core desktop processors and multi-processor system-on-chips. This means that parallel processing is required in application areas that traditionally have not used parallel programs. This paper investigates parallelism and scalability of an embedded image processing application. The major challenges faced when parallelizing the application were to extract enough parallelism from the application and to reduce load imbalance. The application has limited immediately available parallelism and further extraction of parallelism is limited by small data sets and a relatively high parallelization overhead. Load balance is difficult to obtain due to the limited parallelism and made worse by non-uniform memory latency. Three parallel OpenMP implementations of the application are discussed and evaluated. We show that with some modifications relative speedups in excess of 9 on a 16 CPU system can be reached.", "paper_title": "Parallelism and Scalability in an Image Processing Application", "paper_id": "WOS:000266089000006"}