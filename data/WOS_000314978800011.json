{"auto_keywords": [{"score": 0.004428452434981208, "phrase": "model_instances"}, {"score": 0.004202741104973709, "phrase": "model-driven_development"}, {"score": 0.003988487841970088, "phrase": "model-to-model_transformations"}, {"score": 0.003554661425339528, "phrase": "inter-model_consistency_management"}, {"score": 0.0029438813080245544, "phrase": "different_operational_mechanisms"}, {"score": 0.0028378798711397235, "phrase": "concrete_inter-modelling_scenarios"}, {"score": 0.0026233771102489416, "phrase": "backward_transformations"}, {"score": 0.0025824576209656676, "phrase": "pattern_specification"}, {"score": 0.0023133055945761235, "phrase": "model_matching"}, {"score": 0.002289180040240783, "phrase": "model_traceability"}], "paper_keywords": ["Inter-modelling", " Model-to-model transformation", " Model matching", " Traceability", " Graph transformation", " Graph constraints"], "paper_abstract": "Inter-modelling is the activity of modelling relations between two or more modelling languages. The result of this activity is a model that describes the way in which model instances of these languages can be related. Many tasks in model-driven development can be classified as inter-modelling, for example designing model-to-model transformations, defining model matching and traceability relations, specifying model merging and model weaving, as well as describing mechanisms for inter-model consistency management and model synchronization. This paper presents our approach to inter-modelling in a declarative, relational, visual, and formal style. The approach relies on declarative patterns describing allowed or forbidden relations between two modelling languages. Such specification is then compiled into different operational mechanisms that are tailor-made for concrete inter-modelling scenarios. Up to now, we have used the approach to generate forward and backward transformations from a pattern specification. In this paper we demonstrate that the same specification can be used to derive mechanisms for other inter-modelling tasks, such as model matching and model traceability. In these scenarios the goals are generating the traces between two existing models, checking whether two models are correctly traced, and modifying the traces between two models if they are incorrect.", "paper_title": "Inter-modelling with patterns", "paper_id": "WOS:000314978800011"}