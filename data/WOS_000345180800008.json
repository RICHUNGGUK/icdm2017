{"auto_keywords": [{"score": 0.041712156789843864, "phrase": "historical_information"}, {"score": 0.00481495049065317, "phrase": "general-purpose_history"}, {"score": 0.004721711709176679, "phrase": "version_control_systems"}, {"score": 0.004585212379675535, "phrase": "indispensable_software_development_tools"}, {"score": 0.004518442937844318, "phrase": "version_snapshots"}, {"score": 0.004302791070310513, "phrase": "release_management"}, {"score": 0.00413767314434795, "phrase": "versioned_software"}, {"score": 0.003715425273229361, "phrase": "specific_task"}, {"score": 0.003661275004971829, "phrase": "empirical_validation"}, {"score": 0.0036256123915754303, "phrase": "software_engineering_practices"}, {"score": 0.0035902958977673313, "phrase": "fault_prediction"}, {"score": 0.0035553221885904467, "phrase": "general-purpose_tool_support"}, {"score": 0.0034020946201397057, "phrase": "version_control_system"}, {"score": 0.0032714270066711835, "phrase": "comprehensive_description"}, {"score": 0.0031612033120065747, "phrase": "general-purpose_history_query_tool"}, {"score": 0.0030696773722514105, "phrase": "versioned_smalltalk_system"}, {"score": 0.0030397596289795143, "phrase": "logic_queries"}, {"score": 0.0029807934480637855, "phrase": "regular_path_expressions"}, {"score": 0.0027832502848247303, "phrase": "individual_version"}, {"score": 0.0027159094186967247, "phrase": "successive_software_versions"}, {"score": 0.0026115277372906805, "phrase": "general-purpose_nature"}, {"score": 0.002498873893632726, "phrase": "development_process_constraints"}, {"score": 0.0024503741901918527, "phrase": "temporal_bad_smells"}, {"score": 0.0022434880661725493, "phrase": "absinthe"}, {"score": 0.0021678235581442293, "phrase": "smalltalk"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["History queries", " Meta-programming", " Smalltalk", " Logic programming", " Program analysis"], "paper_abstract": "Version control systems (VCS) have become indispensable software development tools. The version snapshots they store to provide support for change coordination and release management, effectively track the evolution of the versioned software and its development process. Despite this wealth of historical information, it has only been leveraged by tools that are dedicated to a specific task such as empirical validation of software engineering practices or fault prediction. General-purpose tool support for reasoning about the historical information stored in a version control system is limited. This paper provides a comprehensive description of a logic-based, general-purpose history query tool called ABSINTHE. ABSINTHE supports querying versioned Smalltalk system using logic queries in which quantified regular path expressions are embedded. These expressions lend themselves to specifying the properties that each individual version in a sequence of successive software versions ought to exhibit. To demonstrate the general-purpose nature of our history query tool, we use it to verify development process constraints, to identify temporal bad smells and to answer questions that developers commonly ask. Finally, we compare a query written in ABSINTHE to an equivalent one written in Smalltalk. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A logic foundation for a general-purpose history querying tool", "paper_id": "WOS:000345180800008"}