{"auto_keywords": [{"score": 0.049715817986079144, "phrase": "class_constructors"}, {"score": 0.03792346420853086, "phrase": "five_systems"}, {"score": 0.00481495049065317, "phrase": "java_systems"}, {"score": 0.004724158990345732, "phrase": "indispensable_role"}, {"score": 0.004670504053818028, "phrase": "java_language"}, {"score": 0.004582423717777699, "phrase": "object_creation"}, {"score": 0.004495996972278015, "phrase": "empirical_evidence"}, {"score": 0.003964896373751171, "phrase": "creation_methods"}, {"score": 0.0038605361756636667, "phrase": "kerievsky"}, {"score": 0.003831224748279043, "phrase": "five_java_systems"}, {"score": 0.00378767277402891, "phrase": "rcwcm"}, {"score": 0.003443402656397069, "phrase": "improved_code_readability"}, {"score": 0.003391290302481397, "phrase": "program_understanding"}, {"score": 0.0033399639721674954, "phrase": "lesser_extent"}, {"score": 0.003327253821888566, "phrase": "possible_elimination"}, {"score": 0.0033019779616246356, "phrase": "code_duplication"}, {"score": 0.003024705160129876, "phrase": "multiple_constructors"}, {"score": 0.0027918707809612, "phrase": "different_styles"}, {"score": 0.002636587060621144, "phrase": "multiple_dependencies"}, {"score": 0.002567099236341096, "phrase": "leaf_class"}, {"score": 0.002499438189264537, "phrase": "'super'_construct"}, {"score": 0.0022806798371116698, "phrase": "refactoring_effort"}, {"score": 0.0022547140008848912, "phrase": "short_and_long-term_benefits"}, {"score": 0.0021952683716334478, "phrase": "expense_outlay"}, {"score": 0.0021049977753042253, "phrase": "opportunity_cost"}], "paper_keywords": [""], "paper_abstract": "Class constructors play an indispensable role in the Java language as a mechanism for object creation. However, little empirical evidence exists on constructors, trends in their composition and how a class with too many constructors might influence its understandability by developers. Herein, the authors investigate the applicability of the 'replace constructors with creation methods' (RCwCM) refactoring of Kerievsky in five Java systems. The RCwCM was manually applied to a set of classes from each of the five systems in classes containing three or more constructors. The benefits of this refactoring include improved code readability and encapsulation, program understanding and to a lesser extent possible elimination of code duplication. Within each of the five systems, evidence of scope for applying the RCwCM refactoring based on the number of classes with multiple constructors was found. However, problems were encountered that limited its application. These are the nature of inheritance and the different styles of accessing class constructors. In the former, account has to be taken of multiple dependencies if the class is not a leaf class; in the latter, the 'super' construct requires careful handling. When considered against the benefits that the RCwCM provides, care needs to be exercised. As with any refactoring effort, the short and long-term benefits need to be compared with the expense outlay (developer time and effort) as well as the opportunity cost.", "paper_title": "Evaluation of the 'replace constructors with creation methods' refactoring in Java systems", "paper_id": "WOS:000282144900002"}