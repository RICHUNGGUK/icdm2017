{"auto_keywords": [{"score": 0.03557852554231245, "phrase": "path_reliability"}, {"score": 0.015719716506582538, "phrase": "path_testing"}, {"score": 0.014442690298897071, "phrase": "modular_software_systems"}, {"score": 0.010413224215566688, "phrase": "software_reliability"}, {"score": 0.009282089342092206, "phrase": "sensitivity_analysis"}, {"score": 0.004773904938276846, "phrase": "complex_component-based_software_systems"}, {"score": 0.004593467306126913, "phrase": "software_applications"}, {"score": 0.0045543011700929096, "phrase": "traditional_software_reliability_methods"}, {"score": 0.00445783412174435, "phrase": "inter-component_interactions"}, {"score": 0.004326188427877999, "phrase": "test_cases"}, {"score": 0.003971006689166329, "phrase": "software_component_given_resource_limitations"}, {"score": 0.0038207994186834015, "phrase": "adaptive_framework"}, {"score": 0.0037398106866046972, "phrase": "reliability_estimation"}, {"score": 0.003629291866667764, "phrase": "common_program_structures"}, {"score": 0.0033026956021014204, "phrase": "derived_path"}, {"score": 0.0028060889647071787, "phrase": "experimental_results"}, {"score": 0.0027230880516264685, "phrase": "high_correlation"}, {"score": 0.0026882700311968025, "phrase": "actual_software_reliability"}, {"score": 0.0026312238938540787, "phrase": "loop_structures"}, {"score": 0.002597577409911978, "phrase": "smaller_loop_number"}, {"score": 0.0025207284405252914, "phrase": "acceptable_estimation"}, {"score": 0.0023839754995935184, "phrase": "critical_modules"}, {"score": 0.0023434058350520763, "phrase": "resource_allocation"}, {"score": 0.002264321283759897, "phrase": "proposed_methods"}, {"score": 0.0021231452870210965, "phrase": "early_stages"}, {"score": 0.0021049977753042253, "phrase": "software_development"}], "paper_keywords": ["Component-based software system", " path-based software reliability prediction", " path testing", " white-box test"], "paper_abstract": "With the growing size and complexity of software applications, traditional software reliability methods are insufficient to analyze inter-component interactions of modular software systems. The number of test cases may be extremely large for this application; therefore, it is hard for us to extensively test each software component given resource limitations. In this paper, we propose an adaptive framework of incorporating path testing into reliability estimation for modular software systems. Three estimated methods based on common program structures, namely, sequence, branch, and loop structures, are proposed to calculate the path reliability. Consequently, the derived path reliabilities can be applied to the estimates of software reliability. Some experiments are performed based on two real systems. In addition, the accuracy and correlation with respect to the experiments are investigated by simulation and sensitivity analysis. Experimental results show that the path reliability has a high correlation to the actual software reliability. For software with loop structures, a smaller loop number can be assigned to derive an acceptable estimation of path reliability. Further, the sensitivity analysis can be used to identify critical modules and paths for resource allocation. It can be concluded that the proposed methods are useful and helpful for estimating software reliability and can be adaptively used in the early stages of software development.", "paper_title": "An Adaptive Reliability Analysis Using Path Testing for Complex Component-Based Software Systems", "paper_id": "WOS:000287861400019"}