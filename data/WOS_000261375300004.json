{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "functional_partitioning"}, {"score": 0.0044685410845412745, "phrase": "crucial_steps"}, {"score": 0.004230382915464492, "phrase": "classical_combinatorial_optimization_problems"}, {"score": 0.004126349202545883, "phrase": "possible_sequential_or_concurrent_execution"}, {"score": 0.0035358770665604657, "phrase": "proposed_algorithm_partitions"}, {"score": 0.0033639840192975835, "phrase": "highest_benefit-to-area_ratio"}, {"score": 0.003264872488939969, "phrase": "benefit-to-area_ratio"}, {"score": 0.0031845067058084583, "phrase": "iteration_step"}, {"score": 0.0031061129850110994, "phrase": "task_concurrence"}, {"score": 0.0030600032877646263, "phrase": "proposed_algorithm"}, {"score": 0.003029643234751066, "phrase": "task_scheduling"}, {"score": 0.0029403531729828574, "phrase": "hardware-only_critical_path"}, {"score": 0.0028394925080958205, "phrase": "task_forecast"}, {"score": 0.002797329638474873, "phrase": "large_body"}, {"score": 0.002769568481822277, "phrase": "experimental_results"}, {"score": 0.002701361707441567, "phrase": "proposed_heuristic_algorithm"}, {"score": 0.0026086775334428617, "phrase": "latest_efficient_combinatorial_algorithm"}, {"score": 0.002444883254621769, "phrase": "tabu_search"}, {"score": 0.0023259039577313294, "phrase": "proposed_heuristic_solution"}, {"score": 0.002234893735225432, "phrase": "proposed_scheduling_algorithm"}, {"score": 0.002126111716875142, "phrase": "large_increase"}, {"score": 0.0021049977753042253, "phrase": "running_time"}], "paper_keywords": ["Partitioning", " Scheduling", " Task graph", " Heuristic algorithm", " Co-design"], "paper_abstract": "Hardware/software (HW/SW) partitioning and scheduling are the crucial steps during HW/SW co-design. It has been shown that they are classical combinatorial optimization problems. Due to the possible sequential or concurrent execution of the tasks, HW/SW partitioning and scheduling has become more difficult to solve optimally. In this paper more efficient heuristic algorithms are proposed for the HW/SW partitioning and scheduling. The proposed algorithm partitions a task graph by iteratively moving the task with highest benefit-to-area ratio in higher priority. The benefit-to-area ratio is updated in each iteration step to cater for the task concurrence. The proposed algorithm for task scheduling executes the task lying in hardware-only critical path in higher priority to enhance the task forecast. A large body of experimental results conclusively shows that the proposed heuristic algorithm for partitioning is superior to the latest efficient combinatorial algorithm (Tabu search) cited in this paper. Moreover, the Tabu search for partitioning has been further improved by utilizing the proposed heuristic solution as its initial solution. In addition, the proposed scheduling algorithm obtains the improvements over the most widely used approaches by up to 10% without large increase in running time.", "paper_title": "Algorithmic aspects for functional partitioning and scheduling in hardware/software co-design", "paper_id": "WOS:000261375300004"}