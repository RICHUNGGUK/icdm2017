{"auto_keywords": [{"score": 0.03695358254225412, "phrase": "multitasking_applications"}, {"score": 0.00481495049065317, "phrase": "embedded_multitasking_applications"}, {"score": 0.004694700982410345, "phrase": "mobile_and_handheld_devices"}, {"score": 0.004596779715291598, "phrase": "embedded_systems"}, {"score": 0.004519908617935935, "phrase": "key_design_issue"}, {"score": 0.004351595642056769, "phrase": "cache_requirements"}, {"score": 0.004207230913063179, "phrase": "significant_amount"}, {"score": 0.004050514095922329, "phrase": "cache_parameters"}, {"score": 0.0036914757355166966, "phrase": "single-task-based_systems"}, {"score": 0.0034504423179340738, "phrase": "research_work"}, {"score": 0.003266201217790818, "phrase": "instruction_cache_hierarchy"}, {"score": 0.003211617791126635, "phrase": "cache"}, {"score": 0.0031710903727066313, "phrase": "real-time_operating_systems"}, {"score": 0.003027178161479457, "phrase": "user_tasks"}, {"score": 0.0030017207229983385, "phrase": "rtos_components"}, {"score": 0.002770273247998903, "phrase": "proposed_techniques"}, {"score": 0.002723862897844177, "phrase": "predictor-based_filter_cache_hierarchy"}, {"score": 0.00266693888510356, "phrase": "single-task-based_applications"}, {"score": 0.0026445028886931837, "phrase": "rtos-driven_multitasking_applications"}, {"score": 0.0025458479274370832, "phrase": "optimal_or_near-optimal_filter"}, {"score": 0.0023594160789762227, "phrase": "exhaustive_cache_hierarchy_simulation_techniques"}, {"score": 0.002195866991284673, "phrase": "instruction_cache"}, {"score": 0.002131857309586904, "phrase": "instruction_cache_sizes"}, {"score": 0.0021049977753042253, "phrase": "one-time_simulation"}], "paper_keywords": [""], "paper_abstract": "With the advent of mobile and handheld devices, power consumption in embedded systems has become a key design issue. Recently, it has been shown that cache requirements of the applications vary widely and a significant amount of energy can be saved by tuning the cache parameters according to the needs of the application. To this end, techniques have been proposed to tune the cache for single-task-based systems but no work has been done to extend these techniques to multitasking applications. In this research work, the authors present novel, lightweight and fast techniques for energy-sensitive tuning of the instruction cache hierarchy for multitasking applications. Cache tuning for real-time operating systems (RTOS)-driven multitasking applications is achieved by intelligently separating the user tasks and RTOS components and profiling them in isolation to identify the nature of loops in them. We then apply the proposed techniques to tune a predictor-based filter cache hierarchy for instructions for both single-task-based applications and RTOS-driven multitasking applications. The proposed techniques are able to identify optimal or near-optimal filter and L1 cache sizes for all the applications tested and are up to an order of magnitude faster than exhaustive cache hierarchy simulation techniques. The proposed techniques are also highly scalable and can be relied upon to predict the instruction cache hit rate for any range of instruction cache sizes after a one-time simulation and profiling.", "paper_title": "Instruction cache tuning for embedded multitasking applications", "paper_id": "WOS:000283750700001"}