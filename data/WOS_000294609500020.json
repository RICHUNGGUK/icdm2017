{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cegar"}, {"score": 0.0491002972166715, "phrase": "higher-order_model"}, {"score": 0.004123781267600542, "phrase": "higher-order_recursion_schemes"}, {"score": 0.0034236045013591437, "phrase": "simply-typed_lambda-calculus"}, {"score": 0.0032848684681050745, "phrase": "finite_data_domains"}, {"score": 0.0031193028729331667, "phrase": "predicate_abstraction"}, {"score": 0.0030554300179552415, "phrase": "counterexample-guided_abstraction_refinement"}, {"score": 0.0026986685585382347, "phrase": "automatic_verification"}, {"score": 0.0025625729433234623, "phrase": "infinite_data_domains"}, {"score": 0.002408265305704217, "phrase": "prototype_verifier"}, {"score": 0.002358917661465133, "phrase": "higher-order_functional_programs"}], "paper_keywords": ["Languages", " Reliability", " Verification", " Predicate Abstraction", " CEGAR", " Higher-Order Model Checking", " Dependent Types"], "paper_abstract": "Higher-order model checking (more precisely, the model checking of higher-order recursion schemes) has been extensively studied recently, which can automatically decide properties of programs written in the simply-typed lambda-calculus with recursion and finite data domains. This paper formalizes predicate abstraction and counterexample-guided abstraction refinement (CEGAR) for higher-order model checking, enabling automatic verification of programs that use infinite data domains such as integers. A prototype verifier for higher-order functional programs based on the formalization has been implemented and tested for several programs.", "paper_title": "Predicate Abstraction and CEGAR for Higher-Order Model Checking", "paper_id": "WOS:000294609500020"}