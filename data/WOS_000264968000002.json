{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "web_server_performance_optimization"}, {"score": 0.004764859786310636, "phrase": "popular_web_sites"}, {"score": 0.004641890423057823, "phrase": "huge_number"}, {"score": 0.004498490110526062, "phrase": "reasonable_time_frame"}, {"score": 0.004359500411441827, "phrase": "web_sites"}, {"score": 0.004246947739596565, "phrase": "effective_thread_management"}, {"score": 0.004072851768196397, "phrase": "static_and_dynamic_thread_policies"}, {"score": 0.0037066895459425824, "phrase": "commonly_used_policies"}, {"score": 0.0035733198242955634, "phrase": "complex_interaction"}, {"score": 0.0033910448175165004, "phrase": "shared_resource"}, {"score": 0.003320756562046789, "phrase": "new_dynamic_thread-assignment_policies"}, {"score": 0.003251920460276645, "phrase": "average_response_time"}, {"score": 0.0032180376288035296, "phrase": "web_servers"}, {"score": 0.0031678720736808574, "phrase": "web_server"}, {"score": 0.003085989256759819, "phrase": "two-layered_tandem"}, {"score": 0.0030538300202383106, "phrase": "multi-threading_queues"}, {"score": 0.0029905104479072482, "phrase": "active_threads"}, {"score": 0.002897977113538355, "phrase": "common_resource"}, {"score": 0.002823050755743821, "phrase": "two-layered_queueing_model"}, {"score": 0.002721388234661538, "phrase": "performance_modeling"}, {"score": 0.0026649432435828842, "phrase": "intensive_software-hardware_interaction"}, {"score": 0.002542174767860791, "phrase": "application_point"}, {"score": 0.002387214876538434, "phrase": "methodological_point"}, {"score": 0.002289180040240783, "phrase": "optimal_dynamic_thread-assignment_policies"}, {"score": 0.002218299213266519, "phrase": "response_times"}, {"score": 0.0021609076467365247, "phrase": "apache_web_server"}], "paper_keywords": ["Dynamic programming", " Dynamic thread management", " Multi-layered queueing systems", " Web servers"], "paper_abstract": "Popular web sites are expected to handle huge number of requests concurrently within a reasonable time frame. The performance of these web sites is largely dependent on effective thread management of their web servers. Although the implementation of static and dynamic thread policies is common practice, remarkably little is known about the implications on performance. Moreover, the commonly used policies do not take into account the complex interaction between the threads that compete for access to a shared resource. We propose new dynamic thread-assignment policies that minimize the average response time of web servers. The web server is modeled as a two-layered tandem of multi-threading queues, where the active threads compete for access to a common resource. This type of two-layered queueing model, which occurs naturally in the performance modeling of systems with intensive software-hardware interaction, are on the one hand appealing from an application point of view, but on the other hand are challenging from a methodological point of view. Our results show that the optimal dynamic thread-assignment policies yield strong reductions in the response times. Validation on all Apache web server shows that our dynamic thread policies confirm our analytical results. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic thread assignment in web server performance optimization", "paper_id": "WOS:000264968000002"}