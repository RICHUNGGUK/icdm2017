{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data_structure"}, {"score": 0.004526041191525413, "phrase": "zero-order_entropy"}, {"score": 0.004269913167716059, "phrase": "fundamental_building_blocks"}, {"score": 0.004192872425727907, "phrase": "worst-case_time"}, {"score": 0.004102248600058478, "phrase": "worst-case_complexity"}, {"score": 0.004057670872363875, "phrase": "best_previous_results"}, {"score": 0.003941141575848601, "phrase": "data_structures"}, {"score": 0.003870009704443373, "phrase": "highly_compressible_sequences"}, {"score": 0.003272767888056937, "phrase": "similar_frequency"}, {"score": 0.0031212935348800467, "phrase": "fast_uncompressed_representations"}, {"score": 0.0030761074505030184, "phrase": "overall_compression_ratios"}, {"score": 0.00293370839211022, "phrase": "best_current_compressed_representations"}, {"score": 0.0027978827655799495, "phrase": "best_time_complexities"}, {"score": 0.002757365657304833, "phrase": "smallest_existing_full-text_self-indexes"}, {"score": 0.0024625698287060586, "phrase": "dynamic_collections"}, {"score": 0.002444668348634501, "phrase": "disjoint_sets"}, {"score": 0.002374351263279043, "phrase": "inverted_indexes"}, {"score": 0.0023570895666021664, "phrase": "suffix_arrays"}, {"score": 0.002339953069296797, "phrase": "binary_relations"}, {"score": 0.002314481096847367, "phrase": "data_compressors"}, {"score": 0.002264364091368269, "phrase": "large_alphabets"}, {"score": 0.0021049977753042253, "phrase": "synthetic_and_application_scenarios"}], "paper_keywords": ["Compressed sequence representations", " Rank and select on sequences", " Compact data structures", " Entropy-bounded structures", " Compressed text indexing"], "paper_abstract": "We present a data structure that stores a sequence s[1..n] over alphabet [1..sigma] in bits, where is the zero-order entropy of s. This structure supports the queries access, rank and select, which are fundamental building blocks for many other compressed data structures, in worst-case time and average time . The worst-case complexity matches the best previous results, yet these had been achieved with data structures using bits. On highly compressible sequences the o(nlg sigma) bits of the redundancy may be significant compared to the bits that encode the data. Our representation, instead, compresses the redundancy as well. Moreover, our average-case complexity is unprecedented. Our technique is based on partitioning the alphabet into characters of similar frequency. The subsequence corresponding to each group can then be encoded using fast uncompressed representations without harming the overall compression ratios, even in the redundancy. The result also improves upon the best current compressed representations of several other data structures. For example, we achieve (i) compressed redundancy, retaining the best time complexities, for the smallest existing full-text self-indexes; (ii) compressed permutations pi with times for pi() and pi (-1)() improved to loglogarithmic; and (iii) the first compressed representation of dynamic collections of disjoint sets. We also point out various applications to inverted indexes, suffix arrays, binary relations, and data compressors. Our structure is practical on large alphabets. Our experiments show that, as predicted by theory, it dominates the space/time tradeoff map of all the sequence representations, both in synthetic and application scenarios.", "paper_title": "Efficient Fully-Compressed Sequence Representations", "paper_id": "WOS:000332582900011"}