{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_containers"}, {"score": 0.00866806243597145, "phrase": "container_services"}, {"score": 0.004664352260912174, "phrase": "effective_mechanism"}, {"score": 0.004605434064238641, "phrase": "de-coupling_cross-cutting_concerns"}, {"score": 0.004267163206961948, "phrase": "transaction_management"}, {"score": 0.003639835714755229, "phrase": "effective_container_implementations"}, {"score": 0.003437248394635138, "phrase": "informal_natural_language"}, {"score": 0.0033508547759861186, "phrase": "predictable_reasoning"}, {"score": 0.0030071857666598193, "phrase": "formal_model"}, {"score": 0.0026475981474045414, "phrase": "software_components"}, {"score": 0.0022578275190855124, "phrase": "different_container_implementations"}, {"score": 0.0021049977753042253, "phrase": "behavioral_transformations"}], "paper_keywords": [""], "paper_abstract": "Software containers present an effective mechanism for de-coupling cross-cutting concerns in software. System-wide concerns such as persistence, transaction management, security, fault masking, etc., are implemented as container services. While a lot of effort has been expended in developing effective container implementations, specifications for software containers are largely presented in informal natural language, which hampers predictable reasoning about the behavior of components deployed within containers. In this paper, we present a formal model for reasoning about the behavior of software containers. Our model allows developers to reason precisely about how the behaviors of software components deployed within a container are modified by the container. We further present the specifications of a few examples of container services that are found in different container implementations, and use our formal model to prove the correctness of the behavioral transformations that these services cause.", "paper_title": "A behavioral model for software containers", "paper_id": "WOS:000236901100012"}