{"auto_keywords": [{"score": 0.0496213341565463, "phrase": "grammar-based_test_generation"}, {"score": 0.03255786331031157, "phrase": "coverage_tree"}, {"score": 0.031806280910128736, "phrase": "generated_test_cases"}, {"score": 0.028828976454589608, "phrase": "gena"}, {"score": 0.00481495049065317, "phrase": "automatic_grammar-based_test_generation"}, {"score": 0.004611224230543916, "phrase": "test_cases"}, {"score": 0.004458722048888919, "phrase": "naive_grammar-based_test_generation"}, {"score": 0.00429057323623293, "phrase": "exhaustive_random_test_case_production"}, {"score": 0.004030695216899165, "phrase": "unbalanced_testing_coverage"}, {"score": 0.0038600230206554792, "phrase": "automatic_grammar-based_test_generation_approach"}, {"score": 0.0036611708297251645, "phrase": "zero_control_input"}, {"score": 0.0035570425396761122, "phrase": "well-distributed_test_cases"}, {"score": 0.0034558655164987134, "phrase": "novel_dynamic_stochastic_model"}, {"score": 0.003293570937654716, "phrase": "probability_distributions"}, {"score": 0.0027564303939865476, "phrase": "java-based_system"}, {"score": 0.002677964894127131, "phrase": "test_case"}, {"score": 0.0025521085778978042, "phrase": "structural_features"}, {"score": 0.00247944491239733, "phrase": "important_and_effective_role"}, {"score": 0.0023972750359328235, "phrase": "experimental_results"}, {"score": 0.0023066880707738736, "phrase": "well-balanced_distribution"}, {"score": 0.0022626835039082746, "phrase": "grammatical_structures"}, {"score": 0.002219516542316085, "phrase": "case_study"}, {"score": 0.002198242191529979, "phrase": "grammar-based_failure"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["grammar-based test generation", " software testing", " fault localization"], "paper_abstract": "Grammar-based test generation provides a systematic approach to producing test cases from a given context-free grammar. Unfortunately, naive grammar-based test generation is problematic because of the fact that exhaustive random test case production is often explosive, and grammar-based test generation with explicit annotation controls often causes unbalanced testing coverage. In this paper, we present an automatic grammar-based test generation approach, which takes a symbolic grammar as input, requires zero control input from users, and produces well-distributed test cases. Our approach utilizes a novel dynamic stochastic model where each variable is associated with a tuple of probability distributions, which are dynamically adjusted along the derivation. We further present a coverage tree illustrating the distribution of generated test cases and their detailed derivations. More importantly, the coverage tree supports various implicit derivation control mechanisms. We implemented this approach in a Java-based system, named Gena. Each test case generated by Gena automatically comes with a set of structural features, which can play an important and effective role on automated failure causes localization. Experimental results demonstrate the effectiveness of our approach, the well-balanced distribution of generated test cases over grammatical structures, and a case study on grammar-based failure causes localization. Copyright (C) 2014 John Wiley & Sons, Ltd.", "paper_title": "A dynamic stochastic model for automatic grammar-based test generation", "paper_id": "WOS:000363500900004"}