{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "satisfiability_problems"}, {"score": 0.004757436273305987, "phrase": "propositional_satisfiability"}, {"score": 0.004672444473700524, "phrase": "success_story"}, {"score": 0.004644451060812007, "phrase": "computer_science"}, {"score": 0.004386701682320949, "phrase": "formal_verification"}, {"score": 0.004347327095048136, "phrase": "main_reason"}, {"score": 0.004269630481719451, "phrase": "modern_sat_solvers"}, {"score": 0.0040691336206915675, "phrase": "davis-logemann-loveland_procedure"}, {"score": 0.00393675895773741, "phrase": "decision_procedure"}, {"score": 0.003751834457361072, "phrase": "input_set"}, {"score": 0.003480065916355311, "phrase": "returned_assignments"}, {"score": 0.003141675970409644, "phrase": "qualitative_preferences"}, {"score": 0.003076189012372961, "phrase": "partially_ordered_set"}, {"score": 0.0029670762930358394, "phrase": "total_assignments"}, {"score": 0.0029052181875265995, "phrase": "optimal_model"}, {"score": 0.0028446460307503343, "phrase": "minimal_element"}, {"score": 0.0024397439663334055, "phrase": "optimal_models"}, {"score": 0.0024178026341680693, "phrase": "qualitative_preference"}, {"score": 0.0023745087648471613, "phrase": "quantitative_preference"}, {"score": 0.0022833403088699175, "phrase": "resulting_system"}, {"score": 0.002195664530777783, "phrase": "comparable_performances"}, {"score": 0.0021049977753042253, "phrase": "specific_problems"}], "paper_keywords": ["Satisfiability", " Preferences"], "paper_abstract": "Propositional satisfiability (SAT) is a success story in Computer Science and Artificial Intelligence: SAT solvers are currently used to solve problems in many different application domains, including planning and formal verification. The main reason for this success is that modern SAT solvers can successfully deal with problems having millions of variables. All these solvers are based on the Davis-Logemann-Loveland procedure (dll). In its original version, dll is a decision procedure, but it can be very easily modified in order to return one or all assignments satisfying the input set of clauses, assuming at least one exists. However, in many cases it is not enough to compute assignments satisfying all the input clauses: Indeed, the returned assignments have also to be \"optimal\" in some sense, e.g., they have to satisfy as many other constraints-expressed as preferences-as possible. In this paper we start with qualitative preferences on literals, defined as a partially ordered set (poset) of literals. Such a poset induces a poset on total assignments and leads to the definition of optimal model for a formula psi as a minimal element of the poset on the models of psi. We show (i) how dll can be extended in order to return one or all optimal models of psi (once converted in clauses and assuming psi is satisfiable), and (ii) how the same procedures can be used to compute optimal models wrt a qualitative preference on formulas and/or wrt a quantitative preference on literals or formulas. We implemented our ideas and we tested the resulting system on a variety of very challenging structured benchmarks. The results indicate that our implementation has comparable performances with other state-of-the-art systems, tailored for the specific problems we consider.", "paper_title": "Solving satisfiability problems with preferences", "paper_id": "WOS:000280893400003"}