{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "general_metric_spaces"}, {"score": 0.004645057834614705, "phrase": "k-closest_pair_query"}, {"score": 0.0043009005132473325, "phrase": "gis"}, {"score": 0.004256895619944631, "phrase": "data_mining"}, {"score": 0.004191829338769843, "phrase": "recommender_systems"}, {"score": 0.004002513373645485, "phrase": "euclidean_space"}, {"score": 0.003861175855298779, "phrase": "metric_space"}, {"score": 0.0036490529923833884, "phrase": "kcp_query_processing"}, {"score": 0.003574830654211291, "phrase": "namely_metric_kcp_search"}, {"score": 0.0034663083890589235, "phrase": "dynamic_disk-based_metric_indexes"}, {"score": 0.0032256881625734746, "phrase": "arbitrary_type"}, {"score": 0.0030171910207671205, "phrase": "triangle_inequality"}, {"score": 0.0028221322455573624, "phrase": "metric_space_properties"}, {"score": 0.0027789349951704177, "phrase": "counting_information"}, {"score": 0.0027223626424366207, "phrase": "metric_index"}, {"score": 0.0026532596852754525, "phrase": "aggressive_pruning"}, {"score": 0.0025726416100664853, "phrase": "query_efficiency"}, {"score": 0.00250732953434891, "phrase": "node-based_cost_model"}, {"score": 0.002309242063033298, "phrase": "extensive_experiments"}], "paper_keywords": ["k-Closest pair query", " Metric space", " Query processing", " Cost model", " Algorithm"], "paper_abstract": "Given two object sets and , a k-closest pair query finds closest object pairs from . This operation is common in many real-life applications such as GIS, data mining, and recommender systems. Although it has received much attention in the Euclidean space, there is little prior work on the metric space. In this paper, we study the problem of kCP query processing in general metric spaces, namely Metric kCP search, and propose several efficient algorithms using dynamic disk-based metric indexes (e.g., M-tree), which can be applied to arbitrary type of data as long as a certain metric distance is defined and satisfies the triangle inequality. Our approaches follow depth-first and/or best-first traversal paradigm(s), employ effective pruning rules based on metric space properties and the counting information preserved in the metric index, take advantage of aggressive pruning and compensation to further boost query efficiency, and derive a node-based cost model for retrieval. In addition, we extend our techniques to tackle two interesting variants of queries. Extensive experiments with both real and synthetic data sets demonstrate the performance of our proposed algorithms, the effectiveness of our developed pruning rules, and the accuracy of our presented cost model.", "paper_title": "Efficient k-closest pair queries in general metric spaces", "paper_id": "WOS:000354298200005"}