{"auto_keywords": [{"score": 0.04399207751490301, "phrase": "package_merge"}, {"score": 0.00481495049065317, "phrase": "tool_interoperability"}, {"score": 0.004452078350485375, "phrase": "level_l-i"}, {"score": 0.004058180509184539, "phrase": "modeling_concepts"}, {"score": 0.0038332390893263844, "phrase": "new_features"}, {"score": 0.003493900927782043, "phrase": "xmi_representation"}, {"score": 0.0031393948330209255, "phrase": "original_package"}, {"score": 0.003007846011394511, "phrase": "precise_and_comprehensive_definition"}, {"score": 0.0025343906853292956, "phrase": "uml"}, {"score": 0.002326304140277375, "phrase": "possible_remedies"}, {"score": 0.0021049977753042253, "phrase": "model_extension_mechanisms"}], "paper_keywords": [""], "paper_abstract": "The notion of compliance is meant to facilitate tool interoperability. UML 2 offers 4 compliance levels. Level Li+1 is obtained from Level L-i through an operation called package merge. Package merge is intended to allow modeling concepts defined at one level to be extended with new features. To ensure interoperability, package merge has to ensure compatibility: the XMI representation of the result of the merge has to be compatible with that of the original package. UML 2 lacks a precise and comprehensive definition of package merge. This paper reports on our work to understand and formalize package merge. Its main result is that package merge as defined in UML 2.1 does not ensure compatibility. To expose the problem and possible remedies more clearly, we present this result in terms of a very general classification of model extension mechanisms.", "paper_title": "Package merge in UML 2: Practice vs. theory?", "paper_id": "WOS:000241450700014"}