{"auto_keywords": [{"score": 0.049707293588616405, "phrase": "fast_ftl"}, {"score": 0.015479200759850795, "phrase": "nand_flash_memory"}, {"score": 0.009508290774644722, "phrase": "random_writes"}, {"score": 0.009289555239673744, "phrase": "partial_merges"}, {"score": 0.00481495049065317, "phrase": "random_write_performance"}, {"score": 0.004577076689777069, "phrase": "storage_device"}, {"score": 0.0045415338200109345, "phrase": "consumer_electronics"}, {"score": 0.004453874101119545, "phrase": "lower_power_consumption"}, {"score": 0.004119762981892093, "phrase": "block_device_interface"}, {"score": 0.004055998173160551, "phrase": "conventional_disk-based_file_systems"}, {"score": 0.003693533648584145, "phrase": "superior_performance"}, {"score": 0.0033633514001658086, "phrase": "huge_number"}, {"score": 0.0033372020049592726, "phrase": "small-sized_random_writes"}, {"score": 0.0032472646337850042, "phrase": "database_transaction_processing_workloads"}, {"score": 0.0031474338010045386, "phrase": "efficient_selection_schemes"}, {"score": 0.0030865992688177005, "phrase": "random_log_blocks"}, {"score": 0.0030387767523076528, "phrase": "large_overhead"}, {"score": 0.003015143226706584, "phrase": "full_merges"}, {"score": 0.002968424524565369, "phrase": "sequential_log_block_scheme"}, {"score": 0.002854761308379149, "phrase": "large_costs"}, {"score": 0.0026402908398883832, "phrase": "first_technique"}, {"score": 0.002619748321217153, "phrase": "full_merge_costs"}, {"score": 0.002579140290642792, "phrase": "novel_random_log_block_selection_algorithm"}, {"score": 0.0025292620341476283, "phrase": "block_associativity"}, {"score": 0.00243237365704391, "phrase": "key_block_selection_criterion"}, {"score": 0.0024040357029838774, "phrase": "second_technique"}, {"score": 0.002376027109070317, "phrase": "sequential_log_block"}, {"score": 0.00234834406550549, "phrase": "random_log_block"}, {"score": 0.0022760856906838814, "phrase": "experimental_results"}, {"score": 0.002154930852763048, "phrase": "page_migration_amount"}, {"score": 0.002129818297734379, "phrase": "response_time"}, {"score": 0.0021049977753042253, "phrase": "maximum_improvement_level"}], "paper_keywords": ["flash", " flash translation layer", " random write", " performance optimization", " FAST FTL"], "paper_abstract": "The NAND flash memory has gained its popularity as a storage device for consumer electronics due to its higher performance and lower power consumption. In most of these devices, an FTL (Flash Translation Layer) is adopted to emulate a block device interface to support the conventional disk-based file systems that make the flash management much easier. Among various FTLs, the FAST (Fully-Associative Sector Translation) FTL has shown superior performance, becoming one of the state-of-the-art approaches. However, the FAST FTL performs poorly while dealing with a huge number of small-sized random writes brought by upper applications such as database transaction processing workloads. The two important reasons are the absence of efficient selection schemes for the reclaiming of random log blocks that leads to large overhead of full merges, and the sequential log block scheme which no longer applies to random writes due to the large costs of partial merges. To overcome the above two defects in the presence of random writes, two techniques have been proposed. The first technique reduced full merge costs by adopting a novel random log block selection algorithm, based on the block associativity and the relevant-valid-page-amount of random log blocks as the key block selection criterion. The second technique replaced the sequential log block with a random log block to eliminate the overhead of partial merges. Experimental results showed that our optimizations can outperform FAST FTL significantly in three aspects: erase counts, page migration amount, and response time. The maximum improvement level in these cases could reach up to 66.8%, 98.2%, and 51.0%, respectively.", "paper_title": "Optimizing random write performance of FAST FTL for NAND flash memory", "paper_id": "WOS:000349811500004"}