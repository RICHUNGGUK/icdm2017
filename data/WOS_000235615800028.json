{"auto_keywords": [{"score": 0.004562362497952548, "phrase": "current_successful_mainstream_libraries"}, {"score": 0.004322967486451877, "phrase": "programming_techniques"}, {"score": 0.004271490815763164, "phrase": "diverse_areas"}, {"score": 0.004195418010131832, "phrase": "conventional_general-purpose_programming"}, {"score": 0.004096082254543022, "phrase": "safety-critical_embedded_systems"}, {"score": 0.003526186748088922, "phrase": "error_diagnostics"}, {"score": 0.0034633412134999425, "phrase": "expressive_power"}, {"score": 0.0034016119212097826, "phrase": "concept-based_overloading"}, {"score": 0.003361069456060196, "phrase": "function_template_partial_specialization"}, {"score": 0.003109031770476385, "phrase": "separate_compilation"}, {"score": 0.0028758391869611374, "phrase": "precise_way"}, {"score": 0.002724696729311532, "phrase": "ordinary_programmers"}, {"score": 0.0025354258731826148, "phrase": "current_specification"}, {"score": 0.0024311346712789553, "phrase": "far_more_precise_and_complete_specification"}, {"score": 0.0023451553255837317, "phrase": "systematic_way"}, {"score": 0.0022085455097790537, "phrase": "function_signatures"}, {"score": 0.002169132543304098, "phrase": "constraint_sets"}, {"score": 0.0021049977753042253, "phrase": "convenient_basis"}], "paper_keywords": ["C plus plus templates", " C plus plus concepts", " type systems", " separate compilation", " generic programming"], "paper_abstract": "C++ templates are key to the design of current successful mainstream libraries and systems. They are the basis of programming techniques in diverse areas ranging from conventional general-purpose programming to software for safety-critical embedded systems. Current work on improving templates focuses on the notion of concepts (a type system for templates), which promises significantly improved error diagnostics and increased expressive power such as concept-based overloading and function template partial specialization. This paper presents C++ templates with an emphasis on problems related to separate compilation. We consider the problem of how to express concepts in a precise way that is simple enough to be usable by ordinary programmers. In doing so, we expose a few weakness of the current specification of the C++ standard library and suggest a far more precise and complete specification. We also present a systematic way of translating our proposed concept definitions, based on use-patterns rather than function signatures, into constraint sets that can serve as convenient basis for concept checking in a compiler.", "paper_title": "Specifying C++ concepts", "paper_id": "WOS:000235615800028"}