{"auto_keywords": [{"score": 0.04960770684597513, "phrase": "mobile_applications"}, {"score": 0.015719716506582538, "phrase": "phase_change_memory"}, {"score": 0.00943403629880493, "phrase": "pcm"}, {"score": 0.004651057147690674, "phrase": "smart_mobile_platforms"}, {"score": 0.004537401559396022, "phrase": "compelling_need"}, {"score": 0.004404658750724105, "phrase": "sluggish_sqlite_databases"}, {"score": 0.004361276005140776, "phrase": "popular_mobile_applications"}, {"score": 0.004212759658511567, "phrase": "social_network_services"}, {"score": 0.003969784439380027, "phrase": "relatively_short_transactions"}, {"score": 0.003911253966141701, "phrase": "autocommit_mode"}, {"score": 0.0038727120021750973, "phrase": "transactional_consistency"}, {"score": 0.003740770420003364, "phrase": "adverse_effect"}, {"score": 0.003685604033479918, "phrase": "flash_memory_storage"}, {"score": 0.003649277504586372, "phrase": "mobile_devices"}, {"score": 0.0035954555250614197, "phrase": "small_random_updates"}, {"score": 0.0034901729647741353, "phrase": "high_write_latency"}, {"score": 0.0032887360307856635, "phrase": "new_optimization_strategy"}, {"score": 0.003114283314285167, "phrase": "mobile_data_management"}, {"score": 0.003023047748772801, "phrase": "key_functions"}, {"score": 0.0029637093924781825, "phrase": "hardware_component"}, {"score": 0.002710735995572145, "phrase": "physiological_log_record"}, {"score": 0.00263129148531588, "phrase": "pcm_log_sector"}, {"score": 0.0025289662786567896, "phrase": "successive_page"}, {"score": 0.0021049977753042253, "phrase": "transactional_atomicity"}], "paper_keywords": [""], "paper_abstract": "Given its pervasive use in smart mobile platforms, there is a compelling need to optimize the performance of sluggish SQLite databases. Popular mobile applications such as messenger, email and social network services rely on SQLite for their data management need. Those mobile applications tend to execute relatively short transactions in the autocommit mode for transactional consistency in databases. This often has adverse effect on the flash memory storage in mobile devices because the small random updates cause high write amplification and high write latency. In order to address this problem, we propose a new optimization strategy, called per-page logging (PPL), for mobile data management, and have implemented the key functions in SQLite/PPL. The hardware component of SQLite/PPL includes phase change memory (PCM) with a byte-addressable, persistent memory abstraction. By capturing an update in a physiological log record and adding it to the PCM log sector, SQLite/PPL can replace a multitude of successive page writes made to the same logical page with much smaller log writes done to PCM much more efficiently. We have observed that SQLite/PPL would potentially improve the performance of mobile applications by an order of magnitude while supporting transactional atomicity and durability.", "paper_title": "SQLite Optimization with Phase Change Memory for Mobile Applications", "paper_id": "WOS:000386424800011"}