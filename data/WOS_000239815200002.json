{"auto_keywords": [{"score": 0.04763728761784506, "phrase": "jinja"}, {"score": 0.0359313026352313, "phrase": "type_system"}, {"score": 0.0348551379019271, "phrase": "type_safety_proof"}, {"score": 0.03381007459247219, "phrase": "virtual_machine"}, {"score": 0.03164862791969669, "phrase": "jvm"}, {"score": 0.03116902134591119, "phrase": "bytecode_verifier"}, {"score": 0.00481495049065317, "phrase": "java-like_language"}, {"score": 0.0043367547691560175, "phrase": "formal_semantics"}, {"score": 0.004246947739596565, "phrase": "core_features"}, {"score": 0.004180809918117248, "phrase": "java_language_architecture"}, {"score": 0.0035920758080335655, "phrase": "small_step_operational_semantics"}, {"score": 0.003355717283753749, "phrase": "definite_initialisation_analysis"}, {"score": 0.003251920460276645, "phrase": "small_step_semantics"}, {"score": 0.0023133055945761235, "phrase": "particular_language_features"}, {"score": 0.002253461585851626, "phrase": "unified_model"}, {"score": 0.002218299213266519, "phrase": "source_language"}, {"score": 0.0021049977753042253, "phrase": "whole_development"}], "paper_keywords": ["Java", " operational semantics", " theorem proving"], "paper_abstract": "We introduce Jinja, a Java-like programming language with a formal semantics designed to exhibit core features of the Java language architecture. Jinja is a compromise between the realism of the language and the tractability and clarity of its formal semantics. The following aspects are formalised: a big and a small step operational semantics for Jinja and a proof of their equivalence, a type system and a definite initialisation analysis, a type safety proof of the small step semantics, a virtual machine (JVM), its operational semantics and its type system, a type safety proof for the JVM; a bytecode verifier, that is, a data flow analyser for the JVM, a correctness proof of the bytecode verifier with respect to the type system, and a compiler and a proof that it preserves semantics and well-typedness. The emphasis of this work is not on particular language features but on providing a unified model of the source language, the virtual machine, and the compiler. The whole development has been carried out in the theorem prover Isabelle/HOL.", "paper_title": "A machine-checked model for a java-like language, virtual machine, and compiler", "paper_id": "WOS:000239815200002"}