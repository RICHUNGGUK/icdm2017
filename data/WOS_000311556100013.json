{"auto_keywords": [{"score": 0.048992899974696226, "phrase": "dynamic_traces"}, {"score": 0.03693349071862124, "phrase": "sample_applications"}, {"score": 0.031181462923896786, "phrase": "fuda"}, {"score": 0.0047709540557306284, "phrase": "framework-usage_templates"}, {"score": 0.004662705558154439, "phrase": "object-oriented_frameworks"}, {"score": 0.004536029676655286, "phrase": "new_applications"}, {"score": 0.004453488286477661, "phrase": "reusable_concepts"}, {"score": 0.004352411290383643, "phrase": "application_code"}, {"score": 0.004312622975366676, "phrase": "potentially_complex_implementation_steps"}, {"score": 0.004119049028319832, "phrase": "framework_operations"}, {"score": 0.0038802832668554457, "phrase": "frequently_incomplete_user_documentation"}, {"score": 0.003689053436223376, "phrase": "existing_framework_applications"}, {"score": 0.003555902292752528, "phrase": "concept_implementations"}, {"score": 0.0034118234596993836, "phrase": "code_tangling"}, {"score": 0.0031991799574455555, "phrase": "concept-implementation_templates"}, {"score": 0.003126481516783286, "phrase": "necessary_concept-implementation_steps"}, {"score": 0.0030414140732789186, "phrase": "sample_application_code"}, {"score": 0.0026011706232569316, "phrase": "fuda_templates"}, {"score": 0.0025655216052760093, "phrase": "experimental_evaluation"}, {"score": 0.0024956789310376635, "phrase": "five_widely_used_frameworks"}, {"score": 0.0023725232579531273, "phrase": "relatively_few_false_positives"}, {"score": 0.002318566141177149, "phrase": "realistic_concepts"}, {"score": 0.0022041312401435346, "phrase": "user_study"}, {"score": 0.0021049977753042253, "phrase": "concept-implementation_time"}], "paper_keywords": ["Object-oriented application frameworks", " framework comprehension", " framework documentation", " concept-implementation templates", " application programming interface (API)", " dynamic analysis", " concept location", " feature identification"], "paper_abstract": "Object-oriented frameworks are widely used to develop new applications. They provide reusable concepts that are instantiated in application code through potentially complex implementation steps such as subclassing, implementing interfaces, and calling framework operations. Unfortunately, many modern frameworks are difficult to use because of their large and complex APIs and frequently incomplete user documentation. To cope with these problems, developers often use existing framework applications as a guide. However, locating concept implementations in those sample applications is typically challenging due to code tangling and scattering. To address this challenge, we introduce the notion of concept-implementation templates, which summarize the necessary concept-implementation steps and identify them in the sample application code, and a technique, named FUDA, to automatically extract such templates from dynamic traces of sample applications. This paper further presents the results of two experiments conducted to evaluate the quality and usefulness of FUDA templates. The experimental evaluation of FUDA with 14 concepts in five widely used frameworks suggests that the technique is effective in producing templates with relatively few false positives and false negatives for realistic concepts by using two sample applications. Moreover, we observed in a user study with 28 programmers that the use of templates reduced the concept-implementation time compared to when documentation was used.", "paper_title": "Two Studies of Framework-Usage Templates Extracted from Dynamic Traces", "paper_id": "WOS:000311556100013"}