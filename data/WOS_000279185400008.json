{"auto_keywords": [{"score": 0.04558099031824589, "phrase": "register_allocation"}, {"score": 0.035620716932052585, "phrase": "cost_model"}, {"score": 0.004494570360108983, "phrase": "new_register_allocation_technique"}, {"score": 0.003479692058963528, "phrase": "possible_instruction_sequence"}, {"score": 0.0027741761880779535, "phrase": "instruction_execution_time"}, {"score": 0.0026933542552712033, "phrase": "new_technique"}, {"score": 0.0025638362414466278, "phrase": "instruction_scheduling"}, {"score": 0.0023003498123420237, "phrase": "proposed_register_allocation"}, {"score": 0.002233301265743633, "phrase": "integration_techniques"}, {"score": 0.0021896891011033105, "phrase": "significant_improvements"}, {"score": 0.0021049977753042253, "phrase": "widely_used_existing_techniques"}], "paper_keywords": ["compiler", " register allocation", " instruction scheduling", " spill code", " variable reference flow graph"], "paper_abstract": "This paper proposes a new register allocation technique in which register allocation is performed at every reference of a variable. For each reference, the costs of various possible register allocations are estimated by tracing a possible instruction sequence. A cost model is formulated to reduce the scope of tracing. With an extension of the cost model to the estimation of instruction execution time, a new technique for the integration of instruction scheduling and register allocation is also proposed. Experiments show that the proposed register allocation and the integration techniques achieve significant improvements when compared with widely used existing techniques.", "paper_title": "Fine-Grain Register Allocation and Instruction Scheduling in a Reference Flow(1)", "paper_id": "WOS:000279185400008"}