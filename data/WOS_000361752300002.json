{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mutual_termination"}, {"score": 0.004509694461067052, "phrase": "exactly_the_same_inputs"}, {"score": 0.004419703921314433, "phrase": "inference_rules"}, {"score": 0.0043533862892678864, "phrase": "proof_system"}, {"score": 0.0040978781692373005, "phrase": "respective_subprograms"}, {"score": 0.003975781274672803, "phrase": "free_context"}, {"score": 0.003216804708106142, "phrase": "proof_rule"}, {"score": 0.0031684791285366315, "phrase": "weaker_premise"}, {"score": 0.002764856305713066, "phrase": "inherent_incompleteness"}, {"score": 0.0022252591643049744, "phrase": "reported_prototype_implementation"}, {"score": 0.0021049977753042253, "phrase": "mutual_termination_problem"}], "paper_keywords": ["Regression-verification", " Program termination", " Mutual termination"], "paper_abstract": "Two programs are said to be mutually terminating if they terminate on exactly the same inputs. We suggest inference rules and a proof system for proving mutual termination of a given pair of procedures , and the respective subprograms that they call under a free context. Given a (possibly partial) mapping between the procedures of the two programs, the premise of the rule requires proving that given the same arbitrary input in, f(in) and call procedures mapped in the mapping with the same arguments. A variant of this proof rule with a weaker premise allows to prove termination of one of the programs if the other is known to terminate. In addition, we suggest various techniques for battling the inherent incompleteness of our solution, including a case in which the interface of the two procedures is not identical, and a case in which partial equivalence (the equivalence of their input/output behavior) has only been proven for some, but not all, the outputs of the two given procedures. We present an algorithm for decomposing the verification problem of whole programs to that of proving mutual termination of individual procedures, based on our suggested inference rules. The reported prototype implementation of this algorithm is the first to deal with the mutual termination problem.", "paper_title": "Proving mutual termination", "paper_id": "WOS:000361752300002"}