{"auto_keywords": [{"score": 0.04939024695118498, "phrase": "structure_reorganization"}, {"score": 0.0380813097132049, "phrase": "possible_layouts"}, {"score": 0.036003860900282084, "phrase": "composition-based_cache_simulation"}, {"score": 0.004815112813718623, "phrase": "cache"}, {"score": 0.004654826737377134, "phrase": "best_data_layout"}, {"score": 0.00456571874088313, "phrase": "ultimate_goal"}, {"score": 0.004521803560561489, "phrase": "memory_optimization"}, {"score": 0.004435230698216773, "phrase": "data_access_profile"}, {"score": 0.004392565073466714, "phrase": "heuristic_algorithms"}, {"score": 0.004287680323820891, "phrase": "data_layout"}, {"score": 0.004246428036409373, "phrase": "better_locality"}, {"score": 0.004185289462328125, "phrase": "best_layout"}, {"score": 0.003987755561492638, "phrase": "possible_data_layouts"}, {"score": 0.003911367220315185, "phrase": "best_performing_layout"}, {"score": 0.0029400959763737364, "phrase": "component_subsets"}, {"score": 0.0026817365934071486, "phrase": "full_cache_simulation"}, {"score": 0.0026049517737353365, "phrase": "associative_caches"}, {"score": 0.0024224481033945943, "phrase": "extra_instruction_overhead"}, {"score": 0.002263639474937039, "phrase": "read_misses"}, {"score": 0.0021049977753042253, "phrase": "execution_times"}], "paper_keywords": ["Field reorganization", " Performance prediction", " Cache simulation", " Compiler optimization"], "paper_abstract": "Finding the best data layout has been an ultimate goal of memory optimization. Even with data access profile, heuristic algorithms are needed to reorganize data layout for better locality. The best layout could be found by running the given application with all possible data layouts and selecting the best performing layout. This approach, however, can incur too much overhead, particulary when the number of possible layouts are too many. In this paper, we present a composition-based cache simulation for structure reorganization. Instead of running all possible layouts, we simulate only the primary subsets of layouts and compose the cache misses for all layouts by summing up the cache misses of component subsets. Our experiment with the composition-based cache simulation shows that the differences in the cache misses are within 10% of the full cache simulation for 4-way and 8-way set associative caches. In addition to the cache miss estimation, our heuristic algorithm takes account of the extra instruction overhead incurred by structure reorganization. Our experiment with several structure intensive benchmarks shows the 37% reduction in the LID read misses and the 28% reduction in the L2 read misses. As a result, the execution times are also reduced by 19% on average. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Composition-based Cache simulation for structure reorganization", "paper_id": "WOS:000276274400006"}