{"auto_keywords": [{"score": 0.032241722254270376, "phrase": "mutation_analysis"}, {"score": 0.00481495049065317, "phrase": "obvious_target"}, {"score": 0.00475070135279933, "phrase": "model-driven_development"}, {"score": 0.004563028873351776, "phrase": "design_process_reliability"}, {"score": 0.004442032546224076, "phrase": "model_transformations"}, {"score": 0.0037549546301384336, "phrase": "trustable_mda_components"}, {"score": 0.003558294449586273, "phrase": "mda_component"}, {"score": 0.0033045378860812403, "phrase": "associated_test_cases"}, {"score": 0.003238517900104576, "phrase": "testing-for-trust_approach"}, {"score": 0.0023923066544220277, "phrase": "component's_facets"}, {"score": 0.0021049977753042253, "phrase": "component_trustability"}], "paper_keywords": [""], "paper_abstract": "Making model transformations trustable is an obvious target for model-driven development since they impact on the design process reliability. Ideally, model transformations should be designed and tested so that they may be used and reused safely as MDA components. We present a method for building trustable MDA components. We first define the notion of MDA component as composed of its specification, one implementation and a set of associated test cases. The testing-for-trust approach checks the consistency between these three facets using the mutation analysis. It points out the lack of efficiency of the tests and the lack of precision of the specification. The mutation analysis thus gives a rate that evaluates: the level of consistency between the component's facets and the level of trust we can have in a component. Relying on this estimation of the component trustability, developers can consciously trade reliability for resources.", "paper_title": "Reusable MDA components: A testing-for-trust approach", "paper_id": "WOS:000241450700041"}