{"auto_keywords": [{"score": 0.02466578698236496, "phrase": "app"}, {"score": 0.007351084114966223, "phrase": "seamless"}, {"score": 0.004591345494188032, "phrase": "type_safe_web_applications"}, {"score": 0.004456872931482395, "phrase": "new_programming_model"}, {"score": 0.004404188306112211, "phrase": "web_applications"}, {"score": 0.003009390313137981, "phrase": "haskell_library"}, {"score": 0.0028865314258560214, "phrase": "networking_code"}, {"score": 0.002768674345336861, "phrase": "painful_and_error-prone_experience"}, {"score": 0.0027358910467781155, "phrase": "today's_standard_development_methods"}, {"score": 0.0025776913268808124, "phrase": "different_languages"}, {"score": 0.002472412920623605, "phrase": "ad-hoc_protocols"}, {"score": 0.0021049977753042253, "phrase": "compiler_technology"}], "paper_keywords": ["web applications", " distributed systems", " network communication"], "paper_abstract": "We propose a new programming model for web applications which is (1) seamless; one program and one language is used to produce code for both client and server, (2) client-centric; the programmer takes the viewpoint of the client that runs code on the server rather than the other way around, (3) functional and type-safe, and (4) portable; everything is implemented as a Haskell library that implicitly takes care of all networking code. Our aim is to improve the painful and error-prone experience of today's standard development methods, in which clients and servers are coded in different languages and communicate with each other using ad-hoc protocols. We present the design of our library called Haste. App, an example web application that uses it, and discuss the implementation and the compiler technology on which it depends.", "paper_title": "A Seamless, Client-Centric Programming Model for Type Safe Web Applications", "paper_id": "WOS:000358311500009"}