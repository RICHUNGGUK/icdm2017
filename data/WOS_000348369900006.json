{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "service-oriented_computing"}, {"score": 0.004700193486903964, "phrase": "novel_computational_models"}, {"score": 0.004588158931776543, "phrase": "well-disciplined_primitives"}, {"score": 0.004533142516832776, "phrase": "client-server_interaction"}, {"score": 0.004398457709182882, "phrase": "unexpected_events"}, {"score": 0.004091248980678087, "phrase": "conceptual_abstractions"}, {"score": 0.003922011960904278, "phrase": "central_role"}, {"score": 0.0038516336597530614, "phrase": "service-oriented_systems"}, {"score": 0.003496994062890991, "phrase": "caspis_pipelines"}, {"score": 0.003312009953245191, "phrase": "different_sessions"}, {"score": 0.0030434561939032597, "phrase": "partner's_side"}, {"score": 0.0027630232270330402, "phrase": "chosen_set"}, {"score": 0.0026485829604700833, "phrase": "fully_abstract_encoding"}, {"score": 0.002616762777413686, "phrase": "misra_et_al"}, {"score": 0.0025542617599268323, "phrase": "orchestration_language_orc."}, {"score": 0.0025235718883452585, "phrase": "main_result"}, {"score": 0.0024632912250657636, "phrase": "caspis"}, {"score": 0.002361236012575149, "phrase": "'graceful_termination"}, {"score": 0.002318799760022913, "phrase": "nested_sessions"}], "paper_keywords": [""], "paper_abstract": "Service-oriented computing is calling for novel computational models and languages with well-disciplined primitives for client-server interaction, structured orchestration and unexpected events handling. We present CaSPiS, a process calculus where the conceptual abstractions of sessioning and pipelining play a central role for modelling service-oriented systems. CaSPiS sessions are two-sided, uniquely named and can be nested. CaSPiS pipelines permit orchestrating the flow of data produced by different sessions. The calculus is also equipped with operators for handling (unexpected) termination of the partner's side of a session. Several examples are presented to provide evidence of the flexibility of the chosen set of primitives. One key contribution is a fully abstract encoding of Misra et al.' s orchestration language Orc. Another main result shows that in CaSPiS it is possible to program a 'graceful termination' of nested sessions, which guarantees that no session is forced to hang forever after the loss of its partner.", "paper_title": "CaSPiS: a calculus of sessions, pipelines and services", "paper_id": "WOS:000348369900006"}