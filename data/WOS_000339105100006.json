{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "control_coverage"}, {"score": 0.003639471039860495, "phrase": "formal_characterisation"}, {"score": 0.003569050665799723, "phrase": "coverage_criterion"}, {"score": 0.0034322572683276654, "phrase": "test_data"}, {"score": 0.003257960296952439, "phrase": "traditional_programming_techniques"}, {"score": 0.0029163246959273605, "phrase": "algebraic_theorem"}, {"score": 0.0028228178454284825, "phrase": "worst_situation"}, {"score": 0.002679386232765167, "phrase": "specific_test"}, {"score": 0.0025102759256260703, "phrase": "compliant_test_sets"}, {"score": 0.0024456516553345966, "phrase": "model-based_testing"}, {"score": 0.0023982749733789882, "phrase": "formal_models"}, {"score": 0.0021049977753042253, "phrase": "abstract_models"}], "paper_keywords": ["Control coverage", " Semantics", " UTP", " Invariants"], "paper_abstract": "Many tools can check if a test set provides control coverage; they are, however, of little or no help when coverage is not achieved and the test set needs to be completed. In this paper, we describe how a formal characterisation of a coverage criterion can be used to generate test data; we present a procedure based on traditional programming techniques like normalisation, and weakest precondition calculation. It is a basis for automation using an algebraic theorem prover. In the worst situation, if automation fails to produce a specific test, we are left with a specification of the compliant test sets. Many approaches to model-based testing rely on formal models of a system under test. Our work, on the other hand, is not concerned with the use of abstract models for testing, but with coverage based on the text of programs.", "paper_title": "Test-data generation for control coverage by proof", "paper_id": "WOS:000339105100006"}