{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "feature_interactions"}, {"score": 0.049038638823551965, "phrase": "end_system_services"}, {"score": 0.04231365345404785, "phrase": "telecommunication_services"}, {"score": 0.015116518652071965, "phrase": "internet_telephony"}, {"score": 0.01485580749779783, "phrase": "pstn"}, {"score": 0.00439041997682389, "phrase": "dumb_endpoints"}, {"score": 0.004294962474996283, "phrase": "intelligent_endpoints"}, {"score": 0.004183137595671171, "phrase": "performing_services"}, {"score": 0.003916098498242888, "phrase": "entire_telecommunication_network"}, {"score": 0.0035705347414368696, "phrase": "new_techniques"}, {"score": 0.003342471131048328, "phrase": "new_scripting_language"}, {"score": 0.0031151864044353245, "phrase": "end_system_service_creation"}, {"score": 0.0030206579994328975, "phrase": "call_processing_language"}, {"score": 0.002994188797912081, "phrase": "cpl"}, {"score": 0.0029289895726382653, "phrase": "tree-like_structure"}, {"score": 0.0028276174348291923, "phrase": "tree_structure"}, {"score": 0.002693919110230191, "phrase": "tree_merging_algorithm"}, {"score": 0.002658562959236011, "phrase": "potential_feature_interactions"}, {"score": 0.0021998194157393353, "phrase": "service_manager"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Internet telephony", " VoIP", " SIP", " features", " feature interaction", " end system services", " CPL, Call Processing Language", " LESS Language for End System Services"], "paper_abstract": "One big difference between Internet telephony and the Public Switched Telephony Network (PSTN) is that the PSTN usually assumes dumb endpoints, while Internet telephony has intelligent endpoints that can perform services. Performing services on endpoints may introduce many new communication services, make telecommunication services more distributed, and make the entire telecommunication network more robust and efficient. At the same time, it may also make telecommunication services more difficult to manage and require new techniques to create and compose services. In this paper, we first introduce a new scripting language, called the Language for End System Services (LESS), which we define specifically for end system service creation. LESS is extended from the Call Processing Language (CPL) and uses a tree-like structure to represent telecommunication services. Based on this tree structure, we propose a method based on LESS action conflict tables and a tree merging algorithm to detect potential feature interactions and help to resolve any conflicts detected. We integrated the method for handling feature interactions into our LESS-based end system service creation environment, which is part of our Session Initiation Protocol-(SIP) based user agent, SIPc. SIPc can execute LESS scripts for end system services and contains a service manager that can handle feature interactions. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Handling feature interactions in the language for end system services", "paper_id": "WOS:000242558500010"}