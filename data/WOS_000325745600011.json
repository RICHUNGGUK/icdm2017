{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "program_transformation"}, {"score": 0.03872770284886721, "phrase": "transformation_rules"}, {"score": 0.003996727479807572, "phrase": "program_properties"}, {"score": 0.003927516959113487, "phrase": "constraint_logic_programming"}, {"score": 0.0035989687070420977, "phrase": "familiar_unfolding_and_folding_rules"}, {"score": 0.0034551632687788857, "phrase": "clp_programs"}, {"score": 0.0033170847930578473, "phrase": "program_transformation_strategies"}, {"score": 0.0031660031870090434, "phrase": "proving_tactics"}, {"score": 0.0026892447164623247, "phrase": "predicate_equivalences"}, {"score": 0.002551762519273805, "phrase": "ccs_processes"}, {"score": 0.002435453488008121, "phrase": "first_order_formulas"}, {"score": 0.002351705899181029, "phrase": "quantifier_elimination_method"}, {"score": 0.002231441081806766, "phrase": "temporal_properties"}, {"score": 0.002205560249972527, "phrase": "infinite_state_concurrent_systems"}, {"score": 0.002142161017595363, "phrase": "transformation_strategy"}, {"score": 0.0021049977753042253, "phrase": "program_specialization"}], "paper_keywords": ["Automated theorem proving", " program transformation", " constraint logic programming", " program specialization", " bisimilarity", " quantifier elimination", " temporal logics"], "paper_abstract": "In this paper we present an overview of the unfold/fold proof method, a method for proving theorems about programs, based on program transformation. As a metalanguage for specifying programs and program properties we adopt constraint logic programming (CLP), and we present a set of transformation rules (including the familiar unfolding and folding rules) which preserve the semantics of CLP programs. Then, we show how program transformation strategies can be used, similarly to theorem proving tactics, for guiding the application of the transformation rules and inferring the properties to be proved. We work out three examples: (i) the proof of predicate equivalences, applied to the verification of equality between CCS processes, (ii) the proof of first order formulas via an extension of the quantifier elimination method, and (iii) the proof of temporal properties of infinite state concurrent systems, by using a transformation strategy that performs program specialization.", "paper_title": "Proving Theorems by Program Transformation", "paper_id": "WOS:000325745600011"}