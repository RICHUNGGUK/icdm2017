{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "state_explosion"}, {"score": 0.04744460828753238, "phrase": "component-based_systems"}, {"score": 0.045319229878670764, "phrase": "run-time_behavior"}, {"score": 0.0370632148068783, "phrase": "temporal_behavior"}, {"score": 0.004670597652149685, "phrase": "component-based_elevator_control_system"}, {"score": 0.003958937342925219, "phrase": "global_states"}, {"score": 0.0031984060035955292, "phrase": "large_system"}, {"score": 0.003170667618004276, "phrase": "connected_components"}, {"score": 0.002957222630196853, "phrase": "pair-wise_approach"}, {"score": 0.002918826667294298, "phrase": "automatic_verification"}, {"score": 0.002583597507349819, "phrase": "interacting_components"}, {"score": 0.0025059724686541263, "phrase": "temporal_logic"}, {"score": 0.0022768346311104735, "phrase": "component's_interface"}, {"score": 0.0021049977753042253, "phrase": "component-based_elevator_control_algorithm"}], "paper_keywords": [""], "paper_abstract": "Most methods for designing component-based systems and verifying their compatibility address only the syntactic compatibility of components; no analysis of run-time behavior is made. Those methods that do address run-time behavior suffer from state-explosion: the exponential increase of the number of global states, and hence the complexity of the analysis, with the number of components. We present a method for designing component-based systems and verifying their behavioral compatibility and temporal behavior that is not susceptible to state explosion. Our method is mostly automatic, with little manual deduction required, and does not analyze a large system of connected components at once, but instead analyzes components two-at-a-time. This pair-wise approach enables the automatic verification of temporal behavior, using model-checking, in time polynomial in the number and size of all components. Our method checks that behavior of a pair of interacting components conforms to given properties, specified in temporal logic. Interaction of the components is captured in a product of their behavioral automata, which are provided as a part of each component's interface. We demonstrate the effectiveness of our method by applying it to the design and verification of a component-based elevator control algorithm.", "paper_title": "Behavioral compatibility without state explosion: Design and verification of a component-based elevator control system", "paper_id": "WOS:000239520500003"}