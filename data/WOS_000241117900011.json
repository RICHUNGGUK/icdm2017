{"auto_keywords": [{"score": 0.043048455967776025, "phrase": "bengtsson"}, {"score": 0.04274518365190484, "phrase": "chen"}, {"score": 0.00481495049065317, "phrase": "k_maximum-sums_problems"}, {"score": 0.004690025569165577, "phrase": "real_numbers"}, {"score": 0.004637478829869904, "phrase": "integer_k"}, {"score": 0.004383406949799696, "phrase": "k_maximum-sum_segments_problem"}, {"score": 0.004301834610818624, "phrase": "k_segments"}, {"score": 0.004174451361776433, "phrase": "possible_segment_sums"}, {"score": 0.003785846190923495, "phrase": "takaoka"}, {"score": 0.003701401653850141, "phrase": "small_k."}, {"score": 0.0032449610741097992, "phrase": "first_optimal_algorithm"}, {"score": 0.0031965070898750912, "phrase": "k_maximum-sum_segments"}, {"score": 0.003172551230409948, "phrase": "non-decreasing_order"}, {"score": 0.002953711377604328, "phrase": "d-dimensional_version"}, {"score": 0.0023566987138026285, "phrase": "two-dimensional_array"}, {"score": 0.0022610992177831643, "phrase": "k_maximum-sum_subarrays"}, {"score": 0.0022105951175680856, "phrase": "cubic_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["maximum-sum subsequence", " maximum-sum subarray", " sequence analysis"], "paper_abstract": "Given a sequence of n real numbers and an integer k, 1 <= k <= 1/2 n(n - 1), the k maximum-sum segments problem is to locate the k segments whose sums are the k largest among all possible segment sums. Recently, Bengtsson and Chen gave an O(min(k + n log(2) n, n root k})-time algorithm for this problem. Bae and Takaoka later proposed a more efficient algorithm for small k. In this paper, we propose an O(n + k log(min {n, k}))-time algorithm for the same problem, which is superior to both of them when k is o(n log n). We also give the first optimal algorithm for delivering the k maximum-sum segments in non-decreasing order if k <= n. Then we develop an O(n(2d-1) + k log min(n, k})-time algorithm for the d-dimensional version of the problem, where d > 1 and each dimension, without loss of generality, is of the same size n. This improves the best previously known O(n(2d-1) C)-time algorithm, also by Bengtsson and Chen, where C = min{k + n log(2) n, n root k). It should be pointed out that, given a two-dimensional array of size m x n, our algorithm for finding the k maximum-sum subarrays is the first one achieving cubic time provided that k is O(m(2)n/ log n). (C) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Improved algorithms for the k maximum-sums problems", "paper_id": "WOS:000241117900011"}