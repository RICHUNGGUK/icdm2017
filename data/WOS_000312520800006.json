{"auto_keywords": [{"score": 0.04220804600430127, "phrase": "non-canonical_requirements"}, {"score": 0.00481495049065317, "phrase": "non-canonical_requirements_management"}, {"score": 0.004551199992546761, "phrase": "software_requirements_specification"}, {"score": 0.004362870617347183, "phrase": "requirements_engineering_and_software_engineering"}, {"score": 0.003916098498242888, "phrase": "requirements_specification"}, {"score": 0.0038794730876377057, "phrase": "vague_requirements_statements"}, {"score": 0.003825173769489887, "phrase": "redundant_requirements_statements"}, {"score": 0.003701401653850141, "phrase": "inconsistency_handling"}, {"score": 0.003598492288058048, "phrase": "related_non-canonical_requirements"}, {"score": 0.0033851984021896287, "phrase": "intuitive_generalization"}, {"score": 0.003353521531649663, "phrase": "logical_techniques"}, {"score": 0.0028715299874549245, "phrase": "crucial_role"}, {"score": 0.0027395968397212053, "phrase": "measure-driven_logic_framework"}, {"score": 0.002626034130205569, "phrase": "five_main_parts"}, {"score": 0.0025171669791790438, "phrase": "candidate_proposals"}, {"score": 0.002447101794397243, "phrase": "commonly_acceptable_proposals"}, {"score": 0.0023566987138026285, "phrase": "chosen_proposals"}, {"score": 0.002196077907454079, "phrase": "logic-based_inconsistency"}, {"score": 0.0021652891317252994, "phrase": "requirements_engineering"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Inconsistency handling", " Non-canonical requirements", " Redundancy", " Incompleteness", " Requirements engineering"], "paper_abstract": "As a class of defects in software requirements specification, inconsistency has been widely studied in both requirements engineering and software engineering. It has been increasingly recognized that maintaining consistency alone often results in some other types of non-canonical requirements, including incompleteness of a requirements specification, vague requirements statements, and redundant requirements statements. It is therefore desirable for inconsistency handling to take into account the related non-canonical requirements in requirements engineering. To address this issue, we propose an intuitive generalization of logical techniques for handling inconsistency to those that are suitable for managing non-canonical requirements, which deals with incompleteness and redundancy, in addition to inconsistency. We first argue that measuring non-canonical requirements plays a crucial role in handling them effectively. We then present a measure-driven logic framework for managing non-canonical requirements. The framework consists of five main parts, identifying non-canonical requirements, measuring them, generating candidate proposals for handling them, choosing commonly acceptable proposals, and revising them according to the chosen proposals. This generalization can be considered as an attempt to handle non-canonical requirements along with logic-based inconsistency handling in requirements engineering. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "From inconsistency handling to non-canonical requirements management: A logical perspective", "paper_id": "WOS:000312520800006"}