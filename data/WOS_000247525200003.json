{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "electronic_system-level_design"}, {"score": 0.004378309349451268, "phrase": "development_frameworks"}, {"score": 0.0038380787059463075, "phrase": "major_crisis"}, {"score": 0.0036198068824262464, "phrase": "higher_abstraction_levels"}, {"score": 0.003438990973529508, "phrase": "validation_scope"}, {"score": 0.003291188255149539, "phrase": "requirements_engineering_methodology"}, {"score": 0.003081272473508291, "phrase": "functionalities'_behaviours"}, {"score": 0.0028847066125323893, "phrase": "semi-formal_structured_language"}, {"score": 0.0027405092973494293, "phrase": "pure_formal_notation"}, {"score": 0.002401875938287542, "phrase": "consistency_rules"}, {"score": 0.0021996478802839316, "phrase": "boolean_algebra"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": [""], "paper_abstract": "Current electronic systems' complexity severely limits their validation. Even if development frameworks keep improving and are heavily supported by the industry, methods for hardware/software electronic systems co-design are reaching a major crisis. Although the community is heading towards higher abstraction levels, requirements remain out of the validation scope. We therefore present a requirements engineering methodology that intersects formal, linguistic, and scenario views. Modeling consists in abstracting functionalities' behaviours in terms of actions, expressed in a semi-formal structured language, later automatically translated in a pure formal notation. Such a mix makes the language accessible to designers and permits automation. Validation is then performed using consistency rules. Finally, an elicitation of missing functionalities is achieved using Boolean algebra. (c) 2007 Elsevier Ltd. All rights reserved.", "paper_title": "A high-level requirements engineering methodology for electronic system-level design", "paper_id": "WOS:000247525200003"}