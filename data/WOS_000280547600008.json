{"auto_keywords": [{"score": 0.03456150972614419, "phrase": "single_object_model"}, {"score": 0.00481495049065317, "phrase": "classifying_java_class"}, {"score": 0.004742290714667451, "phrase": "pervasive_virtualized_access"}, {"score": 0.004623608221548592, "phrase": "object_accesses"}, {"score": 0.004553822674247401, "phrase": "common_theme"}, {"score": 0.004507882471601552, "phrase": "target_domains"}, {"score": 0.00441738161338662, "phrase": "transparent_distribution"}, {"score": 0.004306795240631196, "phrase": "program_instrumentation"}, {"score": 0.003991305899593133, "phrase": "indirection_methods"}, {"score": 0.0038913443732432468, "phrase": "arbitrary_code"}, {"score": 0.003642962673467835, "phrase": "original_developer"}, {"score": 0.003569763795153386, "phrase": "class_modifications"}, {"score": 0.0034803228231621687, "phrase": "standard_java_virtual_machines"}, {"score": 0.0032415934630668484, "phrase": "local_and_remote_objects"}, {"score": 0.003019189898170698, "phrase": "native_and_system_code"}, {"score": 0.002943502888225748, "phrase": "java's_bootstrap_class_loader"}, {"score": 0.002840708910768261, "phrase": "limited_manner"}, {"score": 0.0026863605504566924, "phrase": "ruggedj's_complex_object_model"}, {"score": 0.002618995204424126, "phrase": "system_code"}, {"score": 0.0023183698048498797, "phrase": "pervasive_class_transformation"}, {"score": 0.0022950562273438883, "phrase": "java"}, {"score": 0.0021923400552366756, "phrase": "arbitrary_applications"}, {"score": 0.0021373366163721518, "phrase": "system_classes"}], "paper_keywords": ["Design", " Languages", " Measurement", " Program transformation", " Java", " Object model"], "paper_abstract": "The indirection of object accesses is a common theme for target domains as diverse as transparent distribution, persistence, and program instrumentation. Virtualizing accesses to fields and methods (by redirecting calls through accessor and indirection methods) allows interposition of arbitrary code, extending the functionality of an application beyond that intended by the original developer. We present class modifications performed by our RuggedJ transparent distribution platform for standard Java virtual machines. RuggedJ abstracts over the location of objects by implementing a single object model for local and remote objects. However the implementation of this model is complicated by the presence of native and system code; classes loaded by Java's bootstrap class loader can be rewritten only in a limited manner, and so cannot be modified to conform to RuggedJ's complex object model. We observe that system code comprises the majority of a given Java application: an average of 76% in the applications we study. We consider the constraints imposed upon pervasive class transformation within Java, and present a framework for systematically rewriting arbitrary applications. Our system accommodates all system classes, allowing both user and system classes alike to be referenced using a single object model.", "paper_title": "Classifying Java Class Transformations for Pervasive Virtualized Access", "paper_id": "WOS:000280547600008"}