{"auto_keywords": [{"score": 0.04968510255692421, "phrase": "dynamic_environments"}, {"score": 0.00481495049065317, "phrase": "robot_navigation"}, {"score": 0.004677711903652145, "phrase": "grid_maps"}, {"score": 0.004525629293824217, "phrase": "collision_checking"}, {"score": 0.004488384083300084, "phrase": "path_planning"}, {"score": 0.0043066860455264, "phrase": "euclidean_distance_maps"}, {"score": 0.004201322694282528, "phrase": "voronoi"}, {"score": 0.003916098498242888, "phrase": "key_challenge"}, {"score": 0.003804381587788162, "phrase": "efficient_update"}, {"score": 0.003773049633656302, "phrase": "potential_changes"}, {"score": 0.0036352070472201086, "phrase": "previously_unknown_area"}, {"score": 0.003502382624110703, "phrase": "novel_algorithms"}, {"score": 0.003459191419478298, "phrase": "incremental_updates"}, {"score": 0.0032780806856932423, "phrase": "incremental_update_algorithms"}, {"score": 0.0031845067058084583, "phrase": "configuration_space"}, {"score": 0.0031582637043009562, "phrase": "non-circular_robots"}, {"score": 0.003042812778470762, "phrase": "highly_efficient_collision_checking"}, {"score": 0.0030177339185643226, "phrase": "holonomic_path_planning"}, {"score": 0.0028953973490895746, "phrase": "multi-core_cpus"}, {"score": 0.002676418520290942, "phrase": "real-world_data"}, {"score": 0.0025678829712650437, "phrase": "substantially_less_cell_visits"}, {"score": 0.002504880563070155, "phrase": "previous_approaches"}, {"score": 0.002393353846080347, "phrase": "non-convex_structures"}, {"score": 0.0023540387251475615, "phrase": "indoor_areas"}, {"score": 0.002315367926547472, "phrase": "actual_euclidean_distances"}, {"score": 0.002203117204010397, "phrase": "open_source_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Incremental algorithms", " Voronoi diagrams", " Distance maps", " Configuration space", " Collision checking", " Robot navigation"], "paper_abstract": "In robotics, grid maps are often used for solving tasks like collision checking, path planning, and localization. Many approaches to these problems use Euclidean distance maps (DMs), generalized Voronoi diagrams (GVDs), or configuration space (c-space) maps. A key challenge for their application in dynamic environments is the efficient update after potential changes due to moving obstacles or when mapping a previously unknown area. To this end, this paper presents novel algorithms that perform incremental updates that only visit cells affected by changes. Furthermore, we propose incremental update algorithms for DMs and GVDs in the configuration space of non-circular robots. These approaches can be used to implement highly efficient collision checking and holonomic path planning for these platforms. Our c-space representations benefit from parallelization on multi-core CPUs and can also be integrated with other state-of-the-art path planners such as rapidly-exploring random trees. In various experiments using real-world data we show that our update strategies for DMs and GVDs require substantially less cell visits and computation time compared to previous approaches. Furthermore, we demonstrate that our GVD algorithm deals better with non-convex structures, such as indoor areas. All our algorithms consider actual Euclidean distances rather than grid steps and are easy to implement. An open source implementation is available online. (C) 2013 Published by Elsevier B.V.", "paper_title": "Efficient grid-based spatial representations for robot navigation in dynamic environments", "paper_id": "WOS:000325196600008"}