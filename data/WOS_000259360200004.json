{"auto_keywords": [{"score": 0.04736619388826607, "phrase": "displacement_mapping_algorithms"}, {"score": 0.04107868567004354, "phrase": "safe_algorithms"}, {"score": 0.03903298079028844, "phrase": "unsafe_techniques"}, {"score": 0.00481495049065317, "phrase": "gpu_-_state"}, {"score": 0.004590820632326585, "phrase": "latest_developments"}, {"score": 0.004262643556463569, "phrase": "graphics_cards"}, {"score": 0.004129248271757936, "phrase": "per-vertex_and_per-pixel_methods"}, {"score": 0.0038339398365449507, "phrase": "correct_solutions"}, {"score": 0.0036167509502276294, "phrase": "extreme_cases"}, {"score": 0.0034118234596993836, "phrase": "combined_methods"}, {"score": 0.0031342307827666675, "phrase": "possible_roles"}, {"score": 0.0028944757265206332, "phrase": "particular_gpu-based_bump"}, {"score": 0.0025214217930287003, "phrase": "uniform_notations"}, {"score": 0.0024423826953133844, "phrase": "different_authors"}, {"score": 0.002416589459425828, "phrase": "similar_concepts"}, {"score": 0.0023408288327263316, "phrase": "basic_displacement_mapping"}, {"score": 0.0022674379203603224, "phrase": "silhouette_processing"}], "paper_keywords": ["displacement mapping", " tangent space", " Direct3D 9 and 10", " HLSL", " silhoucttes", " self shadowing", " GPU"], "paper_abstract": "This paper reviews the latest developments of displacement mapping algorithms implemented on the vertex, geometry, and fragment shaders of graphics cards. Displacement mapping algorithms are classified as per-vertex and per-pixel methods. Per-pixel approaches are further categorized as safe algorithms that aim at correct solutions in all cases, to unsafe techniques that may fail in extreme cases but are usually much faster than safe algorithms, and to combined methods that exploit the robustness of safe and the speed of unsafe techniques. We discuss the possible roles of vertex, geometry and fragment shaders to implement these algorithms. Then the particular GPU-based bump, parallax, relief, sphere, horizon mapping, cone stepping, local ray tracing, pyramidal and view-dependent displacement mapping methods, as well as their numerous variations are reviewed providing also implementation details of the shader programs. We present these methods using uniform notations and also point out when different authors called similar concepts differently. In addition to basic displacement mapping, self-shadowing and silhouette processing are also reviewed. Based on our experiences gained having reimplemented these methods, their performance and quality are compared, and the advantages and disadvantages are fairly presented.", "paper_title": "Displacement mapping on the GPU - State of the art", "paper_id": "WOS:000259360200004"}