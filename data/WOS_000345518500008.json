{"auto_keywords": [{"score": 0.043965416920295285, "phrase": "simulation_time"}, {"score": 0.00481495049065317, "phrase": "-order_parallel_discrete_event_simulation"}, {"score": 0.004593591780245872, "phrase": "system_models"}, {"score": 0.004428452434981208, "phrase": "discrete_event"}, {"score": 0.003988487841970088, "phrase": "multiple_cores"}, {"score": 0.003926359151817743, "phrase": "today's_host_pcs"}, {"score": 0.0038249462699142733, "phrase": "total_order"}, {"score": 0.0037261429556468217, "phrase": "regular_de_simulators"}, {"score": 0.0035361001070845677, "phrase": "parallel_simulation"}, {"score": 0.003102195256794215, "phrase": "individual_threads"}, {"score": 0.0030062165552187086, "phrase": "different_times"}, {"score": 0.0029593432468318745, "phrase": "system_model"}, {"score": 0.002867771524071872, "phrase": "partial_order"}, {"score": 0.002721388234661538, "phrase": "advanced_static_analysis"}, {"score": 0.002693018258362651, "phrase": "compile_time"}, {"score": 0.0025960262223338293, "phrase": "run_time"}, {"score": 0.0024634797027967203, "phrase": "idle_time"}, {"score": 0.0024377918036784336, "phrase": "available_cores"}, {"score": 0.002337684811187166, "phrase": "simulation_speed"}, {"score": 0.002241679436497569, "phrase": "six_embedded_application_examples"}, {"score": 0.002172266188075892, "phrase": "speed_trade-off"}, {"score": 0.0021049977753042253, "phrase": "different_multithreading_libraries"}], "paper_keywords": ["Parallel discrete event simulation (PDES)", " system-level description languages (SLDLs)", " system-level design and validation", " transaction level modeling"], "paper_abstract": "The validation of system models at the transaction-level typically relies on discrete event (DE) simulation. In order to reduce simulation time, parallel discrete event simulation (PDES) can be used by utilizing multiple cores available on today's host PCs. However, the total order of time imposed by regular DE simulators becomes a bottleneck that severely limits the benefits of parallel simulation. In this paper, we present a new out-of-order (OoO) PDES technique for simulating transaction-level models on multicore hosts. By localizing the simulation time to individual threads and carefully handling events at different times, a system model can be simulated following a partial order of time without loss of accuracy. Subject to advanced static analysis at compile time and table-based decisions at run time, threads can be issued early, reducing the idle time of available cores. Our proposed OoO PDES technique shows high performance gains in simulation speed with only a small increase in compile time. Using six embedded application examples, we also show the speed trade-off for multicore PDES based on different multithreading libraries.", "paper_title": "Out-of-Order Parallel Discrete Event Simulation for Transaction Level Models", "paper_id": "WOS:000345518500008"}