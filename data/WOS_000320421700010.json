{"auto_keywords": [{"score": 0.049418985040378574, "phrase": "java-like_languages"}, {"score": 0.04876768085416924, "phrase": "dynamic_trait_replacement"}, {"score": 0.04413646558311552, "phrase": "objects'_methods"}, {"score": 0.00481495049065317, "phrase": "flexible_dynamic_trait_replacement"}, {"score": 0.004586531354697466, "phrase": "programming_language_feature"}, {"score": 0.0044608829094248985, "phrase": "objects'_behavior"}, {"score": 0.004132743580000062, "phrase": "previous_work"}, {"score": 0.0036722834182246933, "phrase": "named_trait"}, {"score": 0.003571591012750155, "phrase": "object's_class_definition"}, {"score": 0.003129623571496151, "phrase": "trait_replacement_operation_code"}, {"score": 0.0030650070965891653, "phrase": "class_declaration_code"}, {"score": 0.0028195727965553367, "phrase": "unanticipated_trait_replacement_operations"}, {"score": 0.002761340122199076, "phrase": "existing_code"}, {"score": 0.00266693888510356, "phrase": "formal_account"}, {"score": 0.002575756583567029, "phrase": "core_calculus"}, {"score": 0.002540160379502092, "phrase": "fdtj"}, {"score": 0.0023529740798601015, "phrase": "static_type_system"}, {"score": 0.002272501735900584, "phrase": "well-typed_program"}, {"score": 0.002241087008892355, "phrase": "runtime_type_error"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Featherweight Java", " Trait", " Type system"], "paper_abstract": "Dynamic trait replacement is a programming language feature for changing the objects' behavior at runtime by replacing some of the objects' methods. In previous work on dynamic trait replacement for JAVA-like languages, the objects' methods that may be replaced must correspond exactly to a named trait used in the object's class definition. In this paper we propose the notion of replaceable: a programming language feature that decouples the trait replacement operation code and the class declaration code, thus making it possible to refactor classes and to perform unanticipated trait replacement operations without invalidating existing code. We give a formal account of our proposal through a core calculus, FDTJ (FEATHERWEIGHT DYNAMIC TRAIT JAVA), equipped With a static type system guaranteeing that in a well-typed program no runtime type error will take place. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "On flexible dynamic trait replacement for JAVA-like languages", "paper_id": "WOS:000320421700010"}