{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ordered_throughput"}, {"score": 0.04964635174824772, "phrase": "autonomic_cloud"}, {"score": 0.03454004118415158, "phrase": "first_stage"}, {"score": 0.028564362307969614, "phrase": "workload_characteristics"}, {"score": 0.004539005582217305, "phrase": "system_efficiency"}, {"score": 0.004457309741979921, "phrase": "cloud_bursting_transparent"}, {"score": 0.0042209023469249205, "phrase": "user_fairness"}, {"score": 0.0041827333568982055, "phrase": "customer-facing_systems"}, {"score": 0.0041074234667687875, "phrase": "stream_processing_systems"}, {"score": 0.003683097597914604, "phrase": "data-intensive_applications"}, {"score": 0.003584025547693833, "phrase": "large_data_transfer_requirements"}, {"score": 0.0035515951985356374, "phrase": "low_intercloud_bandwidth"}, {"score": 0.003503497128638099, "phrase": "best-effort_traffic"}, {"score": 0.0034092396400930446, "phrase": "system_model"}, {"score": 0.0031845067058084583, "phrase": "parallel_processing"}, {"score": 0.0031271133933467575, "phrase": "second_stage"}, {"score": 0.0028944757265206332, "phrase": "arrival_sequence"}, {"score": 0.002491015208328868, "phrase": "operational_regimes"}, {"score": 0.0024349853033241663, "phrase": "stabilization_mode"}, {"score": 0.0024129269611844794, "phrase": "acceleration_mode"}, {"score": 0.002213065910356615, "phrase": "operational_regime_characterization"}, {"score": 0.0021049977753042253, "phrase": "external_cloud"}], "paper_keywords": ["Cloud bursting", " ordered throughput", " autonomic", " data-intensive"], "paper_abstract": "Optimizing ordered throughput not only improves the system efficiency but also makes cloud bursting transparent to the user. This is critical from the perspective of user fairness in customer-facing systems, correctness in stream processing systems, and so on. In this paper, we consider optimizing ordered throughput for near real-time, data-intensive, independent computations using cloud bursting. Intercloud computation of data-intensive applications is a challenge due to large data transfer requirements, low intercloud bandwidth, and best-effort traffic on the Internet. The system model we consider is comprised of two processing stages. The first stage uses cloud bursting opportunistically for parallel processing, while the second stage (sequential) expects the output of the first stage to be in the same order as the arrival sequence. We propose three scheduling heuristics as part of an autonomic cloud bursting approach that adapt to changing workload characteristics, variation in bandwidth, and available resources to optimize ordered throughput. We also characterize the operational regimes for cloud bursting as stabilization mode versus acceleration mode, depending on the workload characteristics like the size of data to be transferred for a given compute load. The operational regime characterization helps in deciding how many instances can be optimally utilized in the external cloud.", "paper_title": "Optimizing Ordered Throughput Using Autonomic Cloud Bursting Schedulers", "paper_id": "WOS:000326501200007"}