{"auto_keywords": [{"score": 0.023325552575137035, "phrase": "petri_nets"}, {"score": 0.00481495049065317, "phrase": "connector_architectures_part"}, {"score": 0.004404994123834589, "phrase": "generic_framework"}, {"score": 0.004267163206961948, "phrase": "component-based_systems"}, {"score": 0.00378145978325955, "phrase": "formal_generic_way"}, {"score": 0.0036167509502276294, "phrase": "semi-formal_or_formal_modelling_approach"}, {"score": 0.003287482882222731, "phrase": "connector_notions"}, {"score": 0.003144222265269426, "phrase": "main_result"}, {"score": 0.0029691377785333872, "phrase": "graph_transformation"}, {"score": 0.0021594080929425116, "phrase": "csp"}, {"score": 0.0021049977753042253, "phrase": "case_study"}], "paper_keywords": ["Architectural connectors", " formal software modelling", " software architecture"], "paper_abstract": "The aim of this paper is to present a generic framework for the modelling of component-based systems using architectural connectors. More precisely, concepts of component, connector and architecture are presented in a formal generic way, which are independent of any semi-formal or formal modelling approach. The idea is that one could use this framework to define component and connector notions for every given modelling formalism. As a main result, we define the semantics of architectures using graph transformation, showing that the semantics is independent of the order in which the connections are computed, and that the semantics is compatible with transformation. In the continuation of this paper, we show the applicability of our ideas. In particular, our framework is instantiated by Petri nets and CSP, including a case study using Petri Nets.", "paper_title": "A Generic Approach to Connector Architectures Part I: The General Framework", "paper_id": "WOS:000276350700004"}