{"auto_keywords": [{"score": 0.02459558878575902, "phrase": "dynamic_programming"}, {"score": 0.00481495049065317, "phrase": "unsplittable_flow"}, {"score": 0.004780926543714981, "phrase": "line_graphs"}, {"score": 0.004696909870731282, "phrase": "unsplittable_flow_problem"}, {"score": 0.0043443560029027195, "phrase": "start_time_s"}, {"score": 0.0033647036658823798, "phrase": "maximum_profit"}, {"score": 0.0033172506969692626, "phrase": "bandwidth_constraints"}, {"score": 0.0030462191741660346, "phrase": "polynomial_time"}, {"score": 0.00297141030969672, "phrase": "previous_results"}, {"score": 0.0027873491386063913, "phrase": "so-called_\"no-bottleneck\"_assumption"}, {"score": 0.0026146595609362715, "phrase": "minimum_demands"}, {"score": 0.00257775722777195, "phrase": "minimum_capacities"}, {"score": 0.0022762383517229957, "phrase": "natural_linear_programming_relaxation"}, {"score": 0.0021503823972534096, "phrase": "lp_relaxation"}], "paper_keywords": ["Approximation algorithms", " resource allocation problem", " unsplittable flow", " scheduling"], "paper_abstract": "We consider the unsplittable flow problem on a line. In this problem, we are given a set of n tasks, each specified by a start time s, an end time t(i), a demand d(i) > 0, and a profit pi > 0. A task, if accepted, requires d(i) units of \"bandwidth\" from time s(i) to t(i) and accrues a profit of p(i). For every time t, we are also specified the available bandwidth c(t), and the goal is to find a subset of tasks with maximum profit subject to the bandwidth constraints. We present the first polynomial time O(logn) approximation algorithm for this problem. This significantly advances the state of the art, as no polynomial time o(n) approximation was known previously. Previous results for this problem were known only in more restrictive settings; in particular, either the instance satisfies the so-called \"no-bottleneck\" assumption: maxi di <= min(t) c(t), or the ratio of both maximum to minimum demands and maximum to minimum capacities are polynomially (or quasi-polynomially) bounded in n. Our result, on the other hand, does not require these assumptions. Our algorithm is based on a combination of dynamic programming and rounding a natural linear programming relaxation for the problem. While there is an Omega(n) integrality gap known for this LP relaxation, our key idea is to exploit certain structural properties of the problem to show that instances that are bad for the LP can in fact be handled using dynamic programming.", "paper_title": "A Logarithmic Approximation for Unsplittable Flow on Line Graphs", "paper_id": "WOS:000333479500001"}