{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "user_examples"}, {"score": 0.004508661664944657, "phrase": "candidate_tuples"}, {"score": 0.004397151276300207, "phrase": "positive_or_negative_examples"}, {"score": 0.004182301599359094, "phrase": "join_result"}, {"score": 0.004066076430818046, "phrase": "arbitrary_n-ary_join"}, {"score": 0.004015458740397976, "phrase": "arbitrary_number_m"}, {"score": 0.003916098498242888, "phrase": "user_interactions"}, {"score": 0.003807242767474929, "phrase": "prior_knowledge"}, {"score": 0.003771631577951067, "phrase": "integrity_constraints"}, {"score": 0.0037363522297378777, "phrase": "involved_relations"}, {"score": 0.0036553070575015344, "phrase": "multiple_relations"}, {"score": 0.003621111838638197, "phrase": "referential_constraints"}, {"score": 0.0035094132888607134, "phrase": "data_integration"}, {"score": 0.003454858296390957, "phrase": "database_queries"}, {"score": 0.003125175084962886, "phrase": "search_space"}, {"score": 0.002953711377604328, "phrase": "informative_ones"}, {"score": 0.002835740601294821, "phrase": "goal_query"}, {"score": 0.002680114113899346, "phrase": "equality_predicates"}, {"score": 0.0021182494144182805, "phrase": "experimental_study"}], "paper_keywords": ["Algorithms", " Theory", " SQL query discovery", " reverse engineering", " incomplete schema"], "paper_abstract": "We investigate the problem of learning join queries from user examples. The user is presented with a set of candidate tuples and is asked to label them as positive or negative examples, depending on whether or not she would like the tuples as part of the join result. The goal is to quickly infer an arbitrary n-ary join predicate across an arbitrary number m of relations while keeping the number of user interactions as minimal as possible. We assume no prior knowledge of the integrity constraints across the involved relations. Inferring the join predicate across multiple relations when the referential constraints are unknown may occur in several applications, such as data integration, reverse engineering of database queries, and schema inference. In such scenarios, the number of tuples involved in the join is typically large. We introduce a set of strategies that let us inspect the search space and aggressively prune what we call uninformative tuples, and we directly present to the user the informative ones that is, those that allow the user to quickly find the goal query she has in mind. In this article, we focus on the inference of joins with equality predicates and also allow disjunctive join predicates and projection in the queries. We precisely characterize the frontier between tractability and intractability for the following problems of interest in these settings: consistency checking, learnability, and deciding the informativeness of a tuple. Next, we propose several strategies for presenting tuples to the user in a given order that allows minimization of the number of interactions. We show the efficiency of our approach through an experimental study on both benchmark and synthetic datasets.", "paper_title": "Learning Join Queries from User Examples", "paper_id": "WOS:000371198500004"}