{"auto_keywords": [{"score": 0.039792317150207805, "phrase": "sl_lambda-calculus"}, {"score": 0.013595127612342247, "phrase": "coherence_spaces"}, {"score": 0.013141655165985049, "phrase": "sl_lambda-category"}, {"score": 0.004675768396728975, "phrase": "categorical_approach"}, {"score": 0.004607686390487483, "phrase": "simple_term_calculus"}, {"score": 0.004540657280190828, "phrase": "sl"}, {"score": 0.004409304640026443, "phrase": "core_calculus"}, {"score": 0.004345085569121329, "phrase": "programming_language"}, {"score": 0.003863758357292741, "phrase": "large_class"}, {"score": 0.0038261310307416475, "phrase": "sound_models"}, {"score": 0.003661275004971829, "phrase": "natural_way"}, {"score": 0.003643401036301565, "phrase": "benton"}, {"score": 0.0036079116254160606, "phrase": "bierman"}, {"score": 0.003572768793162347, "phrase": "hyland"}, {"score": 0.0034863899423238707, "phrase": "linear_category"}, {"score": 0.003239549357111286, "phrase": "key_role"}, {"score": 0.0030696773722514105, "phrase": "numeral_constants"}, {"score": 0.0029229677574293725, "phrase": "sl_lambda-calculus_types"}, {"score": 0.0028106505443369545, "phrase": "sl_lambda-categories"}, {"score": 0.002535876002754739, "phrase": "second_one"}, {"score": 0.0022107428653358715, "phrase": "interesting_models"}, {"score": 0.0021049977753042253, "phrase": "scott_domains"}], "paper_keywords": ["linearity", " PCF", " categorical models", " completeness"], "paper_abstract": "This article is about a categorical approach modelling a simple term calculus, named Sl lambda-calculus. This is the core calculus underlying the programming language SlPCF conceived in order to program only linear functions between coherence spaces. We introduce the notion of Sl lambda-category, which is able to describe a large class of sound models of Sl lambda-calculus. An Sl lambda-category extends in a natural way Benton, Bierman, Hyland and de Paiva's Linear Category by requirements useful to interpret all the programming constructs of the Sl lambda-calculus. In particular, a key role is played by a !-coalgebra p:N ->!N used to interpret the numeral constants of the Sl lambda-calculus. We will define two interpretations of Sl lambda-calculus types and terms into objects and morphisms of Sl lambda-categories: the first one is a generalization of the translation given in [23] but lacks completeness; the second one uses the !-coalgebra p:N ->!N and the comonadic properties of ! to recover completeness. Finally, we show that this notion is general enough to capture interesting models in the category of sets and relations, in Scott Domains and in coherence spaces.", "paper_title": "What is a model for a semantically linear lambda-calculus?", "paper_id": "WOS:000337066700004"}