{"auto_keywords": [{"score": 0.04842950119492684, "phrase": "file_system"}, {"score": 0.0060989814091639925, "phrase": "user_transactions"}, {"score": 0.00481495049065317, "phrase": "transactional_file_systems"}, {"score": 0.004511485198940203, "phrase": "data_integrity"}, {"score": 0.004334280585565239, "phrase": "file_system_sizes"}, {"score": 0.004143196873246147, "phrase": "continuous_access"}, {"score": 0.003766908559075843, "phrase": "arbitrarily_taken_online_backup"}, {"score": 0.003673675864705682, "phrase": "inconsistent_backup_copy"}, {"score": 0.003511613254403125, "phrase": "mutual_serializability"}, {"score": 0.003441891354624516, "phrase": "consistent_backup"}, {"score": 0.0033905067962602515, "phrase": "active_file_system"}, {"score": 0.0031606404966938568, "phrase": "conflicting_operations"}, {"score": 0.003113441660343867, "phrase": "read-read_conflicts"}, {"score": 0.002976019715894587, "phrase": "backup_transaction"}, {"score": 0.002830410693265704, "phrase": "consistent_backup_copy"}, {"score": 0.0026516890043911836, "phrase": "standard_concurrency_control_protocol"}, {"score": 0.002534596206835737, "phrase": "formal_framework"}, {"score": 0.002315658491366464, "phrase": "concurrency_control_protocol"}, {"score": 0.0021476967767071233, "phrase": "consistent_online_backup"}, {"score": 0.0021049977753042253, "phrase": "reasonable_overhead"}], "paper_keywords": ["Online backup", " consistency", " concurrency control", " file system", " transaction"], "paper_abstract": "The backup taken of a file system must be consistent, preserving data integrity across files in the file system. With file system sizes getting very large, and with demand for continuous access to data, backup has to be taken when the file system is active (is online). Arbitrarily taken online backup may result in an inconsistent backup copy. We propose a scheme referred to as mutual serializability to take a consistent backup of an active file system assuming that the file system supports transactions. The scheme extends the set of conflicting operations to include read-read conflicts, and it is shown that if the backup transaction is mutually serializable with every other transaction individually, a consistent backup copy is obtained. The user transactions continue to serialize within themselves using some standard concurrency control protocol such as Strict 2PL. We put our scheme into a formal framework to prove its correctness, and the formalization as well as the correctness proof are independent of the concurrency control protocol used to serialize user transactions. The scheme has been implemented and experiments show that consistent online backup is possible with reasonable overhead.", "paper_title": "Consistent Online Backup in Transactional File Systems", "paper_id": "WOS:000343607500007"}