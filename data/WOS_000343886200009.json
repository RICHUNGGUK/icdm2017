{"auto_keywords": [{"score": 0.043391710083411604, "phrase": "sfs"}, {"score": 0.006269156108795045, "phrase": "log-structured_file_system"}, {"score": 0.005874810972467292, "phrase": "random_writes"}, {"score": 0.004783730450730986, "phrase": "flash-based_solid_state_drives"}, {"score": 0.004630626571109149, "phrase": "random_and_sequential_write_bandwidth"}, {"score": 0.00445332728705756, "phrase": "limited_lifespan"}, {"score": 0.004172722575842674, "phrase": "new_file_system"}, {"score": 0.004012885020428863, "phrase": "traditional_log-structured_file_system"}, {"score": 0.0038466028116681023, "phrase": "file_system_level"}, {"score": 0.0038216374069880038, "phrase": "sequential_ones"}, {"score": 0.0037844916274672544, "phrase": "ssd_level"}, {"score": 0.0036871853429163953, "phrase": "maximum_write_bandwidth"}, {"score": 0.0036513417491720068, "phrase": "ssd."}, {"score": 0.0035923719610602245, "phrase": "traditional_lfs"}, {"score": 0.0035228596881051763, "phrase": "segment_cleaning"}, {"score": 0.0034322572683276654, "phrase": "data_grouping_strategy"}, {"score": 0.003398883295962739, "phrase": "data_blocks"}, {"score": 0.0032899551003641152, "phrase": "similar_update_likelihood"}, {"score": 0.003236802914194731, "phrase": "sharper_bimodal_distribution"}, {"score": 0.0032157824854214313, "phrase": "segment_utilization"}, {"score": 0.003133052778244851, "phrase": "inevitable_segment"}, {"score": 0.0026619761089539595, "phrase": "modern_file_systems"}, {"score": 0.0026104197983396367, "phrase": "block_erase_count"}, {"score": 0.0022033327475266496, "phrase": "slow_random_reads"}], "paper_keywords": ["Log-structured file systems", " segment cleaning", " random write", " solid state drives", " hard disk drives"], "paper_abstract": "Even in modern SSDs, the disparity between random and sequential write bandwidth is more than 10-fold. Moreover, random writes can shorten the limited lifespan of SSDs because they incur more NAND block erases per write. To overcome the problems of random writes, we propose a new file system, SFS, for SSDs. SFS is similar to the traditional log-structured file system (LFS) in that it transforms all random writes at the file system level to sequential ones at the SSD level, as a way to exploit the maximum write bandwidth of the SSD. But, unlike the traditional LFS, which performs hot/cold data separation on segment cleaning, SFS takes a new on writing data grouping strategy. When data blocks are to be written, SFS puts those with similar update likelihood into the same segment for sharper bimodal distribution of segment utilization, and thus aims at minimizing the inevitable segment cleaning overhead that occurs in any log-structured file system. We have implemented a prototype SFS by modifying Linux-based NILFS2 and compared it with three state-of-the-art file systems using several realistic workloads. Our experiments on SSDs show that SFS outperforms LFS by up to 2.5 times in terms of throughput. In comparison to modern file systems, SFS drastically reduces the block erase count inside SSDs by up to 23.3 times. Although SFS was targeted for SSDs, its data grouping on writing would also work well in HDDs. To confirm this, we repeated the same set of experiments over HDDs, and found that SFS is quite promising in HDDs: although the slow random reads in HDDs make SFS slightly less effective, SFS still outperforms LFS by 1.7 times.", "paper_title": "Design and Implementation of a Log-Structured File System for Flash-Based Solid State Drives", "paper_id": "WOS:000343886200009"}