{"auto_keywords": [{"score": 0.0493653882313026, "phrase": "permuterm_index"}, {"score": 0.004625881588444304, "phrase": "time-efficient_and_elegant_solution"}, {"score": 0.004444203710097833, "phrase": "pattern_queries"}, {"score": 0.004291073117901643, "phrase": "tolerant_retrieval"}, {"score": 0.004122490120202936, "phrase": "space_inefficient"}, {"score": 0.004020492138367616, "phrase": "dictionary_size"}, {"score": 0.0038624981944755813, "phrase": "compressed_permuterm_index"}, {"score": 0.003785836059995376, "phrase": "tolerant_retrieval_problem"}, {"score": 0.0036188435232325337, "phrase": "searched_pattern"}, {"score": 0.0034940519373446335, "phrase": "kth_order"}, {"score": 0.003407549468745519, "phrase": "indexed_dictionary"}, {"score": 0.003306559295382181, "phrase": "dynamic_version"}, {"score": 0.0030060256866508606, "phrase": "individual_strings"}, {"score": 0.002858994026623019, "phrase": "navarro"}, {"score": 0.002509284173541882, "phrase": "space_occupancy"}, {"score": 0.0023745087648471613, "phrase": "string_dictionary"}, {"score": 0.0022810491620483737, "phrase": "known_approaches"}, {"score": 0.002246955931290095, "phrase": "front-coding"}, {"score": 0.002224510044064184, "phrase": "witten_et_al"}, {"score": 0.0021476967767071233, "phrase": "absolute_space_occupancy"}, {"score": 0.0021049977753042253, "phrase": "comparable_query_time"}], "paper_keywords": ["Burrows-Wheeler transform", " compressed index", " indexing data structure", " permuterm", " string dictionary"], "paper_abstract": "The Permuterm index [Garfield 19761 is a time-efficient and elegant solution to the string dictionary problem in which pattern queries may possibly include one wild-card symbol (called Tolerant Retrieval problem). Unfortunately the Permuterm index is space inefficient because it quadruples the dictionary size. In this article we propose the Compressed Permuterm Index which solves the Tolerant Retrieval problem in time proportional to the length of the searched pattern, and space close to the kth order empirical entropy of the indexed dictionary. We also design a dynamic version of this index that allows to efficiently manage insertion in, and deletion from, the dictionary of individual strings. The result is based on a simple variant of the Burrows-Wheeler Transform, defined on a dictionary of strings of variable length, that allows to efficiently solve the Tolerant Retrieval problem via known (dynamic) compressed indexes [Navarro and Makinen 2007]. We will complement our theoretical study with a significant set of experiments that show that the Compressed Permuterm Index supports fast queries within a space occupancy that is close to the one achievable by compressing the string dictionary via gzip or bzip2. This improves known approaches based on Front-Coding [Witten et al. 1999] by more than 50% in absolute space occupancy, still guaranteeing comparable query time.", "paper_title": "The Compressed Permuterm Index", "paper_id": "WOS:000288825000010"}