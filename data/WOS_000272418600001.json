{"auto_keywords": [{"score": 0.004614643339546038, "phrase": "elimination_trees"}, {"score": 0.003930000775297499, "phrase": "exceptionally_high_loads"}, {"score": 0.003802135020791801, "phrase": "simple_lock-free_linearizable_stack_algorithm"}, {"score": 0.0035925056609681194, "phrase": "load_increases"}, {"score": 0.003475582268210954, "phrase": "stack_algorithm"}, {"score": 0.0032529910932231924, "phrase": "concurrency_range"}, {"score": 0.0029454679553901613, "phrase": "single_elimination_array"}, {"score": 0.002890266318361907, "phrase": "backoff_scheme"}, {"score": 0.0028495431343111897, "phrase": "simple_lock-free_stack"}, {"score": 0.002641823250595624, "phrase": "resulting_elimination-backoff_stack"}, {"score": 0.0025678829712650437, "phrase": "simple_stack"}, {"score": 0.0025436978068459565, "phrase": "low_loads"}, {"score": 0.0023470862747075228, "phrase": "concurrency_increases"}, {"score": 0.002196609505859369, "phrase": "existing_constructions"}, {"score": 0.0021656385587456952, "phrase": "concurrent_stacks"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Synchronization", " Shared-memory", " Lock-freedom", " Stack", " Elimination", " Compare-and-swap"], "paper_abstract": "The literature describes two high performance concurrent stack algorithms based on combining funnels and elimination trees. Unfortunately, the funnels are linearizable but blocking and the elimination, trees are non-blocking but not linearizable. Neither is used in practice since they perform well only at exceptionally high loads. The literature also describes a simple lock-free linearizable stack algorithm that works at low loads but does not scale as the load increases. The question of designing a stack algorithm that is non-blocking, linearizable, and scales well throughout the concurrency range, has thus remained open. This paper presents such a concurrent stack algorithm. It is based on the following simple observation: that a single elimination array used as a backoff scheme for a simple lock-free stack is lock-free, linearizable, and scalable. As our empirical results show, the resulting elimination-backoff stack performs as well as the simple stack at low loads, and increasingly outperforms all other methods (lock-based and non-blocking) as concurrency increases. We believe its simplicity and scalability make it a viable practical alternative to existing constructions for implementing concurrent stacks. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "A scalable lock-free stack algorithm", "paper_id": "WOS:000272418600001"}