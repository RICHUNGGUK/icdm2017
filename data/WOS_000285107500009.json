{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "montgomery"}, {"score": 0.00481495049065317, "phrase": "generalized_algorithms_for_binary"}, {"score": 0.004777917315737992, "phrase": "modulo_multiplication_and_multiplication-division._this_paper"}, {"score": 0.00445712058827745, "phrase": "binary_modulo-multiplication"}, {"score": 0.004388796812234033, "phrase": "combined_multiplication-division"}, {"score": 0.0042552618754756934, "phrase": "commonly_used_montgomery_modular_multiplier"}, {"score": 0.0039694170761766226, "phrase": "input_operands"}, {"score": 0.003878451139312637, "phrase": "output_result"}, {"score": 0.003534889186471058, "phrase": "combined_multiplication-division_algorithm"}, {"score": 0.00317221667574882, "phrase": "simple_multiplier-dividers"}, {"score": 0.0030994630902300133, "phrase": "proposed_algorithm"}, {"score": 0.0030283730114326014, "phrase": "shift-based_multiplication"}, {"score": 0.0028687545730861665, "phrase": "intermediate_running_product"}, {"score": 0.0027813397260607487, "phrase": "reduction_and_multiplication_operations"}, {"score": 0.0025151755329660837, "phrase": "carry-propagate_adders"}, {"score": 0.002382541887825168, "phrase": "carry-save_adders"}, {"score": 0.0022394839933089074, "phrase": "proposed_algorithms_show_area"}], "paper_keywords": ["Computer arithmetic", " modular multiplication", " cryptography", " Montgomery multiplication", " high-speed arithmetic"], "paper_abstract": "This paper, describes novel a algorithms and circuitry for binary modulo-multiplication and combined multiplication-division. Unlike the commonly used Montgomery modular multiplier, no domain mapping is needed for the input operands or the output result. Further, the new algorithms work for both even and odd moduli. The combined multiplication-division algorithm produces the quotient as well as the remainder thus allowing the implementation of simple multiplier-dividers. The proposed algorithm uses left shift-based multiplication while maintaining the size of the intermediate running product contained by interleaving reduction and multiplication operations. Reduction is determined by examining only the two most significant bits of the running product if Carry-Propagate adders are used or the 3 most significant bits if Carry-Save Adders are used. Hardware implementations of the proposed algorithms show area and delay figures comparable to those of Montgomery.", "paper_title": "GENERALIZED ALGORITHMS FOR BINARY MODULO MULTIPLICATION AND MULTIPLICATION-DIVISION", "paper_id": "WOS:000285107500009"}