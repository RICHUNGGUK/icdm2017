{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "embedded_software"}, {"score": 0.004671342094877447, "phrase": "validation_methodologies"}, {"score": 0.004631099806015235, "phrase": "embedded_systems"}, {"score": 0.0045124316982387315, "phrase": "embedded_software_testing"}, {"score": 0.004396790930873782, "phrase": "existing_hardware_methods"}, {"score": 0.004358903464536199, "phrase": "existing_coverage-directed_validation_methods"}, {"score": 0.004192392802008709, "phrase": "program_code"}, {"score": 0.0038613835226952117, "phrase": "program's_output"}, {"score": 0.003795086335272422, "phrase": "proposed_method"}, {"score": 0.00374610869916551, "phrase": "program_statement"}, {"score": 0.0035873530542209686, "phrase": "executed_path"}, {"score": 0.0034353020860809404, "phrase": "observable_output"}, {"score": 0.0033039560332995136, "phrase": "longest_path"}, {"score": 0.0029519664912853938, "phrase": "mixed_integer_linear_programming"}, {"score": 0.002888692115811987, "phrase": "variable_aliasing"}, {"score": 0.0027304365438083874, "phrase": "milp_problem"}, {"score": 0.0026488343783448273, "phrase": "feasible_paths"}, {"score": 0.0026033013834547507, "phrase": "immediately_the_input_values"}, {"score": 0.0023257824499250653, "phrase": "user-specified_level"}, {"score": 0.002207851585508636, "phrase": "new_path"}, {"score": 0.002179313258573377, "phrase": "statement_coverage"}, {"score": 0.0021049977753042253, "phrase": "previous_paths"}], "paper_keywords": ["Algorithms", " Reliability", " Verification", " Coverage", " embedded software", " observability", " validation"], "paper_abstract": "Motivated by the need for validation methodologies for embedded systems we propose a method for embedded software testing that can be integrated with existing hardware methods. Existing coverage-directed validation methods guarantee the execution of a certain percentage of the program code under test. Yet they do not generally verify whether the statements executed have any influence on the program's output. In the proposed method, a program statement is considered covered not simply for belonging to the executed path, but only if its execution has influence in some observable output. The paths are generated by searching the longest path in terms of the number of statements in the path. Given that not all paths are valid, we check their feasibility using a method based on Mixed Integer Linear Programming (MILP). Variable aliasing is accounted for by representing variables by their memory addresses when building this MILP problem. In this manner, for feasible paths, we obtain immediately the input values that allow the execution of the path. Using these inputs, we determine the statements actually observed. We repeat this process until a user-specified level of coverage has been achieved. In the generation of each new path, the statement coverage obtained so far and the feasibility of previous paths is taken into account. We present results that demonstrate the effectiveness of this methodology.", "paper_title": "Coverage-Directed Observability-Based Validation for Embedded Software", "paper_id": "WOS:000317427700003"}