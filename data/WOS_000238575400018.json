{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "glass-box_composition"}, {"score": 0.01376710148673043, "phrase": "white-box_composition"}, {"score": 0.012768882485953148, "phrase": "aspectwerkz"}, {"score": 0.004750873844061641, "phrase": "spect_mechanisms"}, {"score": 0.004645959941491617, "phrase": "miscellaneous_aspect-oriented_extensions"}, {"score": 0.004306205029641728, "phrase": "aspect_code"}, {"score": 0.004081385289516914, "phrase": "optimal_compound_mechanism"}, {"score": 0.003938040297872074, "phrase": "aspectj"}, {"score": 0.0037490909410974166, "phrase": "high_integration_cost"}, {"score": 0.0036826452656927877, "phrase": "generic_black-box_composition"}, {"score": 0.0036335821512795026, "phrase": "arbitrary_aspect_mechanisms"}, {"score": 0.0035216195857272403, "phrase": "compound_mechanism"}, {"score": 0.0033525843225012918, "phrase": "particular_family"}, {"score": 0.0033227310662785293, "phrase": "aspect_extensions"}, {"score": 0.0031071175640144943, "phrase": "internal_structure"}, {"score": 0.0030248298759040695, "phrase": "pointcut-and-advice_mechanism"}, {"score": 0.0028795712616923462, "phrase": "individual_mechanisms"}, {"score": 0.002644865209801606, "phrase": "subtle_composition_issues"}, {"score": 0.0025404470150468387, "phrase": "secure_and_dependable_computing"}, {"score": 0.0024953686545818587, "phrase": "fault-tolerance_aspect"}, {"score": 0.002418393046947528, "phrase": "access-control_aspect"}, {"score": 0.002386133139592525, "phrase": "aspectj."}, {"score": 0.002291905937251069, "phrase": "tinyaj_extension"}, {"score": 0.0022613292987262177, "phrase": "tinyaw_extension"}, {"score": 0.0021430393104977788, "phrase": "black-box_framework"}, {"score": 0.0021049977753042253, "phrase": "glass-box_framework"}], "paper_keywords": [""], "paper_abstract": "The manifestation of miscellaneous aspect-oriented extensions raises the question of how these extensions can be used together to combine their aspectual capabilities or reuse aspect code across extensions. While white-box composition of aspect mechanisms can produce an optimal compound mechanism, as exemplified by the merger of ASPECTJ and ASPECTWERKZ into ASPECTJ 5, it comes with a high integration cost. Meanwhile, generic black-box composition can compose arbitrary aspect mechanisms, but may result in a compound mechanism that is suboptimal in comparison to white-box composition. For a particular family of aspect extensions, e.g., ASPECTJ-Iike mechanisms, glass-box composition offers the best of two worlds. Glass-box may rely on the internal structure of, e.g., a pointcut-and-advice mechanism, without requiring a change to the code of the individual mechanisms. In this paper we compare white-, black-, and glass-box composition of aspect mechanisms. We explain subtle composition issues using an example drawn from the domain of secure and dependable computing, deploying a fault-tolerance aspect written in ASPECTWERKZ together with an access-control aspect written in ASPECTJ. To compare the three composition methods, we integrate a TinyAJ extension with a TinyAW extension, and compare the results of running the aspects in a black-box framework and in a glass-box framework to the result of running these aspects in ASPECTJ 5.", "paper_title": "Comparing white-box, black-box, and glass-box composition of a spect mechanisms", "paper_id": "WOS:000238575400018"}