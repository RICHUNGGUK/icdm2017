{"auto_keywords": [{"score": 0.043652565151265574, "phrase": "mpi"}, {"score": 0.00481495049065317, "phrase": "mpi_programs"}, {"score": 0.004749646583168342, "phrase": "process_migration"}, {"score": 0.004621671570727774, "phrase": "parallel_environments"}, {"score": 0.004558977045730675, "phrase": "dynamic_load_balancing"}, {"score": 0.004497129150551236, "phrase": "data_access_locality"}, {"score": 0.00422899036681456, "phrase": "in-memory_application-level_checkpoint-based_migration_solution"}, {"score": 0.0037651925588909783, "phrase": "checkpoint_files"}, {"score": 0.003688773272422118, "phrase": "main_features"}, {"score": 0.003613899384402803, "phrase": "proposed_solution"}, {"score": 0.00332924643541238, "phrase": "cppc"}, {"score": 0.003284026247389735, "phrase": "compiler_for_portable_checkpointing"}, {"score": 0.0031305230217636495, "phrase": "application-level_approach"}, {"score": 0.002984173420996039, "phrase": "mpi_implementation"}, {"score": 0.0029436264166293317, "phrase": "operating_system"}, {"score": 0.0027116246112603875, "phrase": "different_architectures"}, {"score": 0.0023167153974120083, "phrase": "in-memory_files"}, {"score": 0.0022083264126633085, "phrase": "in-memory_approach"}, {"score": 0.0021049977753042253, "phrase": "migration_process"}], "paper_keywords": ["Checkpoint", " Migration", " MPI", " HDF5"], "paper_abstract": "Process migration provides many benefits for parallel environments including dynamic load balancing, data access locality or fault tolerance. This paper describes an in-memory application-level checkpoint-based migration solution for MPI codes that uses the Hierarchical Data Format 5 (HDF5) to write the checkpoint files. The main features of the proposed solution are transparency for the user, achieved through the use of CPPC (ComPiler for Portable Checkpointing); portability, as the application-level approach makes the solution adequate for any MPI implementation and operating system, and the use of the HDF5 file format enables the restart on different architectures; and high performance, by saving the checkpoint files to memory instead of to disk through the use of the HDF5 in-memory files. Experimental results prove that the in-memory approach reduces significantly the I/O cost of the migration process.", "paper_title": "In-memory application-level checkpoint-based migration for MPI programs", "paper_id": "WOS:000344552400014"}