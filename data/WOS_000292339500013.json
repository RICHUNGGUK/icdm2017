{"auto_keywords": [{"score": 0.04708187341931182, "phrase": "sai"}, {"score": 0.00481495049065317, "phrase": "interactive_systems"}, {"score": 0.004632039024076267, "phrase": "software_architecture"}, {"score": 0.004204459295724526, "phrase": "interactive_software_systems"}, {"score": 0.0040708542958968605, "phrase": "architectural_style"}, {"score": 0.003916098498242888, "phrase": "computational_primitives"}, {"score": 0.003791621842185417, "phrase": "asynchronous_concurrent_processing_model"}, {"score": 0.003623949225126944, "phrase": "optimal_system_latency"}, {"score": 0.0035087260813209593, "phrase": "sai_style"}, {"score": 0.003289117944111902, "phrase": "incremental_system_design"}, {"score": 0.0031032109441552287, "phrase": "code_development"}, {"score": 0.0029658905122290536, "phrase": "graph-based_notation"}, {"score": 0.0028346293790895024, "phrase": "system_architectures"}, {"score": 0.0027801631944598206, "phrase": "intuitive_and_scalable_manner"}, {"score": 0.002709161672473817, "phrase": "modular_flow_scheduling_middleware"}, {"score": 0.0026743419827100225, "phrase": "mfsm"}, {"score": 0.0023346234464901978, "phrase": "numerous_interactive_systems"}, {"score": 0.0021049977753042253, "phrase": "computer_vision"}], "paper_keywords": ["software architecture", " interactive systems", " visual tracking"], "paper_abstract": "This article presents the Software Architecture for Immersipresence (SAI) framework for the design, analysis and implementation of interactive software systems. SAI defines an architectural style whose data and processing models capture temporal properties of computational primitives. SAI adopts an asynchronous concurrent processing model in order to allow designing for optimal system latency and throughput. The SAI style is modular to enable scalability, and to facilitate incremental system design, integration and evolution, as well as code development, testing and reuse. A graph-based notation for architectural designs aims to communicate system architectures in an intuitive and scalable manner. The open-source Modular Flow Scheduling Middleware (MFSM) provides a multi-threaded, cross-platform implementation of SAI's primitives. The SAI/MFSM framework has been used in the design and implementation of numerous interactive systems in research, education and artistic performance settings. This article illustrates the definition and use of SAI with examples from computer vision.", "paper_title": "An Architectural Framework for the Design, Analysis and Implementation of Interactive Systems", "paper_id": "WOS:000292339500013"}