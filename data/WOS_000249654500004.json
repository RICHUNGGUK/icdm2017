{"auto_keywords": [{"score": 0.03380491744596704, "phrase": "dltsp"}, {"score": 0.011717034991531402, "phrase": "classical_tsp"}, {"score": 0.00851802164036274, "phrase": "approximation_algorithms"}, {"score": 0.008411163538357545, "phrase": "parameterized_complexity"}, {"score": 0.007264753977648917, "phrase": "tsp"}, {"score": 0.00481495049065317, "phrase": "modern_algorithm_theory"}, {"score": 0.0047906082951008665, "phrase": "numerous_techniques"}, {"score": 0.004754324449031752, "phrase": "hard_problems"}, {"score": 0.00437281181878921, "phrase": "natural_problems"}, {"score": 0.0041829001687634015, "phrase": "approximation_guarantee"}, {"score": 0.0038862964996712705, "phrase": "triangle_inequality"}, {"score": 0.0037271003384115034, "phrase": "resulting_problem"}, {"score": 0.0036522170598450835, "phrase": "well-known_tsp"}, {"score": 0.0034364433283188525, "phrase": "hardest_problems"}, {"score": 0.0033759367489122716, "phrase": "polynomial_time"}, {"score": 0.003316491983161284, "phrase": "constant_one"}, {"score": 0.003073322256363375, "phrase": "good_approximation_algorithms"}, {"score": 0.0028990018343924683, "phrase": "time_windows"}, {"score": 0.002833504964489131, "phrase": "metric_inputs"}, {"score": 0.0028120022457134267, "phrase": "constant_approximation_ratio"}, {"score": 0.0025533148412439166, "phrase": "parameterized_approximation"}, {"score": 0.0024766636161181544, "phrase": "running_time"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_small_violation"}], "paper_keywords": [""], "paper_abstract": "Modern algorithm theory includes numerous techniques to attack hard problems, such as approximation algorithms on the one hand and parameterized complexity on the other hand. However, it is still uncommon to use these two techniques simultaneously, which is unfortunate, as there are natural problems that cannot be solved using either technique alone, but rather well if we combine them. The problem to be studied here is not only natural, but also practical: Consider TSP, generalized as follows. We impose deadlines on some of the vertices, deffectively constraining them to be visited prior to a given point of time. The resulting problem DLTSP (a special case of the well-known TSP with time windows) inherits its hardness from classical TSP, which is both well known from practice and renowned to be one of the hardest problems with respect to approximability: Within polynomial time, not even a polynomial approximation ratio (let alone a constant one) can be achieved (unless P = NP). We will show that DLTSP is even harder than classical TSP in the following sense. Classical TSP, despite its hardness, admits good approximation algorithms if restricted to metric (or near-metric) inputs. Not so DLTSP (and hence, neither TSP with time windows): We will prove that even for metric inputs, no constant approximation ratio can ever be achieved (unless P = NP). This is where parameterization becomes crucial: By combining methods from the field of approximation algorithms with ideas from the theory of parameterized complexity, we apply the concept of parameterized approximation. Thereby, we obtain a 2.5-approximation algorithm for DLTSP with a running time of k!- poly (I G I), where k denotes the number of deadlines. Furthermore, we prove that there is no fpt-algorithm with an approximation guarantee of 2 - epsilon for any epsilon > 0, unless P = NP. Finally, we show that, unlike TSP, DLTSP becomes much harder when relaxing the triangle inequality, More precisely, for an arbitrary small violation of the triangle inequality, DLTSP does not admit an fpt-algorithm with approximation guarantee ((1 - epsilon) /2) vertical bar V vertical bar for any epsilon > 0, unless P = NP.", "paper_title": "The parameterized approximability of TSP with deadlines", "paper_id": "WOS:000249654500004"}