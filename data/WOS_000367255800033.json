{"auto_keywords": [{"score": 0.049558064870310475, "phrase": "intersection"}, {"score": 0.00481495049065317, "phrase": "higher-order_contracts"}, {"score": 0.004583579470330216, "phrase": "untyped_calculus"}, {"score": 0.004533685795068016, "phrase": "blame_assignment"}, {"score": 0.004459857205489101, "phrase": "higher-order_contract_system"}, {"score": 0.0040192915527630995, "phrase": "corresponding_type_theoretic_constructions"}, {"score": 0.003910740988145338, "phrase": "intersection_and_union_contracts"}, {"score": 0.003784328428527216, "phrase": "desirable_properties"}, {"score": 0.003661987063211563, "phrase": "subsequent_integration"}, {"score": 0.003602302241898501, "phrase": "gradual_type_system"}, {"score": 0.0035435867326548665, "phrase": "denotational_specification"}, {"score": 0.0028150302583265655, "phrase": "nondeterministic_operational_semantics"}, {"score": 0.0027239390917424898, "phrase": "contract_monitoring"}, {"score": 0.002564505790176378, "phrase": "deterministic_semantics"}, {"score": 0.002388043660169452, "phrase": "nondeterministic_semantics"}, {"score": 0.0022870479900733163, "phrase": "javascript"}, {"score": 0.002285527382381719, "phrase": "formal_basis"}, {"score": 0.002260591903283384, "phrase": "treat_js"}], "paper_keywords": ["Blame", " Higher-Order Contracts", " Intersection", " Union"], "paper_abstract": "We present an untyped calculus of blame assignment for a higher-order contract system with two new operators: intersection and union. The specification of these operators is based on the corresponding type theoretic constructions. This connection makes intersection and union contracts their inevitable dynamic counterparts with a range of desirable properties and makes them suitable for subsequent integration in a gradual type system. A denotational specification provides the semantics of a contract in terms of two sets: a set of terms satisfying the contract and a set of contexts respecting the contract. This kind of specification for contracts is novel and interesting in its own right. A nondeterministic operational semantics serves as the specification for contract monitoring and for proving its correctness. It is complemented by a deterministic semantics that is closer to an implementation and that is connected to the nondeterministic semantics by simulation. The calculus is the formal basis of Treat JS, a language embedded, higher-order contract system implemented for JavaScript.", "paper_title": "Blame Assignment for Higher-Order Contracts with Intersection and Union", "paper_id": "WOS:000367255800033"}