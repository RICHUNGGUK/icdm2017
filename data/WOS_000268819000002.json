{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "low-degree_polynomials"}, {"score": 0.004576253356889219, "phrase": "efficient_randomized_algorithm"}, {"score": 0.003953639783762917, "phrase": "low-degree_polynomial"}, {"score": 0.003829877278269543, "phrase": "local_test"}, {"score": 0.00378145978325955, "phrase": "generalized_reed-muller_codes"}, {"score": 0.0037336520904376687, "phrase": "prime_fields"}, {"score": 0.0034154440860550564, "phrase": "algorithm_queries"}, {"score": 0.0026140878612307536, "phrase": "relative_distance"}, {"score": 0.0025160740422447837, "phrase": "degree_t_polynomial"}, {"score": 0.0021049977753042253, "phrase": "wiley_periodicals"}], "paper_keywords": ["polynomials", " generalized Reed-Muller code", " local testing", " local correction"], "paper_abstract": "We present an efficient randomized algorithm to test if a given function f : F(p)(n) -> F(p) (where p is a prime) is it low-degree polynomial. This gives it local test for Generalized Reed-Muller codes over prime fields. For a given integer t and it given real epsilon > 0, the algorithm queries f at O(1/epsilon + t center dot p(2t/p-1+1)) points to determine whether f can be described by a polynomial of degree at most t. If f is indeed it polynomial degree at most t, out algorithm always accepts, and if f has a relative distance at least E from every degree t polynomial, then our algorithm rejects with probability at least 1/2. Our result is almost optimal since my such algorithm must query f on at least Omega(1/c + p(t+1/p-1)) Points. (C) 2009 Wiley Periodicals, Inc. Random Struct. Alg., 35, 163-193, 2009", "paper_title": "Testing Low-Degree Polynomials Over Prime Fields", "paper_id": "WOS:000268819000002"}