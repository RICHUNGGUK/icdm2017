{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "master-slave_platforms"}, {"score": 0.01134019911726936, "phrase": "input_file_affinity"}, {"score": 0.009453365341324791, "phrase": "dynamic_clustering"}, {"score": 0.004690694501758065, "phrase": "-tasks_applications"}, {"score": 0.004641890423057823, "phrase": "parallel_applications"}, {"score": 0.004569630374630379, "phrase": "independent_tasks"}, {"score": 0.004428452434981208, "phrase": "monte_carlo"}, {"score": 0.004246947739596565, "phrase": "key_breaking"}, {"score": 0.004180809918117248, "phrase": "image_manipulation_applications"}, {"score": 0.004137288854115515, "phrase": "data_mining_algorithms"}, {"score": 0.0037456980766939836, "phrase": "scalability-related_measure"}, {"score": 0.0029131986574478046, "phrase": "new_scheduling_algorithm"}, {"score": 0.0027936239349923464, "phrase": "task_execution_times"}, {"score": 0.002678944072162297, "phrase": "dynamic_clustering_algorithm"}, {"score": 0.0025288869172313674, "phrase": "execution_times"}, {"score": 0.002301211274459965, "phrase": "oblivious_algorithm"}, {"score": 0.0022653055209664284, "phrase": "scalability_performance"}, {"score": 0.0022299587520401747, "phrase": "non-oblivious_algorithms"}, {"score": 0.0021049977753042253, "phrase": "schedule_tasks"}], "paper_keywords": ["Master-slave platforms", " Scalability analysis", " Bag-of-Tasks applications"], "paper_abstract": "Bag-of-Tasks applications are parallel applications composed of independent tasks. Examples of Bag-of-Tasks (BoT) applications include Monte Carlo simulations, massive searches (such as key breaking), image manipulation applications and data mining algorithms. This paper analyzes the scalability of Bag-of-Tasks applications running on master-slave platforms and proposes a scalability-related measure dubbed input file affinity. In this work, we also illustrate how the input file affinity, which is a characteristic of an application, can be used to improve the scalability of Bag-of-Tasks applications running on master-slave platforms. The input file affinity was considered in a new scheduling algorithm dubbed Dynamic Clustering, which is oblivious to task execution times. We compare the scalability of the Dynamic Clustering algorithm to several other algorithms, oblivious and non-oblivious to task execution times, proposed in the literature. We show in this paper that, in several situations, the oblivious algorithm Dynamic Clustering has scalability performance comparable to non-oblivious algorithms, which is remarkable considering that our oblivious algorithm uses much less information to schedule tasks. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Improving scalability of Bag-of-Tasks applications running on master-slave platforms", "paper_id": "WOS:000263659600001"}