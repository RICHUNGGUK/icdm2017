{"auto_keywords": [{"score": 0.046392140382952585, "phrase": "compute_services"}, {"score": 0.024211741215781648, "phrase": "cumulusgenius"}, {"score": 0.00481495049065317, "phrase": "hybrid_decision_support_method"}, {"score": 0.004706206193274572, "phrase": "web_application"}, {"score": 0.004652754203582873, "phrase": "public_clouds"}, {"score": 0.004547656324173302, "phrase": "cloud_service_providers"}, {"score": 0.004478907336898875, "phrase": "increasing_number"}, {"score": 0.00434449804021954, "phrase": "information_systems"}, {"score": 0.004295136518467118, "phrase": "cloud_demands"}, {"score": 0.004246333442872459, "phrase": "best_mix"}, {"score": 0.0041821205529541045, "phrase": "virtual_machine"}, {"score": 0.004150448577888241, "phrase": "vm"}, {"score": 0.003964896373751171, "phrase": "migration_process"}, {"score": 0.003934795713147731, "phrase": "web_applications"}, {"score": 0.003659954070354848, "phrase": "conflicting_selection_criteria"}, {"score": 0.0035096666710980108, "phrase": "multiple_connected_software_components"}, {"score": 0.00348300993356662, "phrase": "web_application_engineers"}, {"score": 0.003443402656397069, "phrase": "heterogeneous_sets"}, {"score": 0.003391290302481397, "phrase": "complex_dependencies"}, {"score": 0.003365529624506815, "phrase": "multiple_layers"}, {"score": 0.0032396224508754387, "phrase": "previously_proposed_cloudgenius_framework"}, {"score": 0.0031422859551159506, "phrase": "single-component_web_applications"}, {"score": 0.003024705160129876, "phrase": "additional_complexity"}, {"score": 0.0029902938871031637, "phrase": "migration_support"}, {"score": 0.0029675701595142656, "phrase": "multi-component_web_applications"}, {"score": 0.0028783840417661694, "phrase": "evolutionary_migration_process"}, {"score": 0.0028565082986974602, "phrase": "web_application_clusters"}, {"score": 0.002824005136794786, "phrase": "multiple_locations"}, {"score": 0.002718301574682098, "phrase": "selection_problem"}, {"score": 0.002646665861584495, "phrase": "multi-criteria-based_selection_algorithm"}, {"score": 0.002616544154458438, "phrase": "analytic_hierarchy_process"}, {"score": 0.002547583216040341, "phrase": "solution_space"}, {"score": 0.0024428607154967806, "phrase": "computational_complexities"}, {"score": 0.0024150528983695446, "phrase": "growing_cloud_market"}, {"score": 0.0023694065215394593, "phrase": "use_case"}, {"score": 0.0023424328921363585, "phrase": "cloudgenius'_applicability"}, {"score": 0.002220551141101661, "phrase": "selection_algorithm"}, {"score": 0.0021955285167089655, "phrase": "ga"}, {"score": 0.0021702728407945976, "phrase": "hadoop_clusters"}, {"score": 0.0021049977753042253, "phrase": "time_complexities"}], "paper_keywords": ["Cloud migration", " migration process", " selection problem", " criteria set", " decision-making", " decision support"], "paper_abstract": "With the increase in cloud service providers, and the increasing number of compute services offered, a migration of information systems to the cloud demands selecting the best mix of compute services and virtual machine (VM) images from an abundance of possibilities. Therefore, a migration process for web applications has to automate evaluation and, in doing so, ensure that Quality of Service (QoS) requirements are met, while satisfying conflicting selection criteria like throughput and cost. When selecting compute services for multiple connected software components, web application engineers must consider heterogeneous sets of criteria and complex dependencies across multiple layers, which is impossible to resolve manually. The previously proposed CloudGenius framework has proven its capability to support migrations of single-component web applications. In this paper, we expand on the additional complexity of facilitating migration support for multi-component web applications. In particular, we present an evolutionary migration process for web application clusters distributed over multiple locations, and clearly identify the most important criteria relevant to the selection problem. Moreover, we present a multi-criteria-based selection algorithm based on Analytic Hierarchy Process (AHP). Because the solution space grows exponentially, we developed a Genetic Algorithm (GA)-based approach to cope with computational complexities in a growing cloud market. Furthermore, a use case example proofs CloudGenius' applicability. To conduct experiments, we implemented CumulusGenius, a prototype of the selection algorithm and the GA deployable on hadoop clusters. Experiments with CumulusGenius give insights on time complexities and the quality of the GA.", "paper_title": "CloudGenius: A Hybrid Decision Support Method for Automating the Migration of Web Application Clusters to Public Clouds", "paper_id": "WOS:000352491300010"}