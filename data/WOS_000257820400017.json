{"auto_keywords": [{"score": 0.03880550409822826, "phrase": "type-preserving_compilation"}, {"score": 0.00481495049065317, "phrase": "object-oriented_compilers"}, {"score": 0.004721162131188487, "phrase": "type-preserving_compilers"}, {"score": 0.00462919213721188, "phrase": "well-typed_source_code"}, {"score": 0.004450813492665302, "phrase": "java"}, {"score": 0.004236908273106904, "phrase": "verifiable_target_code"}, {"score": 0.004073359218158693, "phrase": "typed_assembly_language"}, {"score": 0.003993958025223994, "phrase": "proof-carrying_code"}, {"score": 0.003247868216333148, "phrase": "extensive_optimizations"}, {"score": 0.0030614565460256897, "phrase": "large_portion"}, {"score": 0.0028016507334576216, "phrase": "runtime_system"}, {"score": 0.002538687900036229, "phrase": "complex_optimizing_compilers"}, {"score": 0.002464709648714996, "phrase": "generated_typed_assembly_language"}, {"score": 0.002323142666222693, "phrase": "base_compiler's_generated_untyped_assembly_language"}, {"score": 0.002233301265743633, "phrase": "type-preserving_compiler"}, {"score": 0.0021049977753042253, "phrase": "base_compiler"}], "paper_keywords": ["verification", " type-preserving compilation", " object-oriented compilers"], "paper_abstract": "Type-preserving compilers translate well-typed source code, such as Java or C#, into verifiable target code, such as typed assembly language or proof-carrying code. This paper presents the implementation of type-preserving compilation in a complex, large-scale optimizing compiler. Compared to prior work, this implementation supports extensive optimizations, and it verifies a large portion of the interface between the compiler and the runtime system. This paper demonstrates the practicality of type-preserving compilation in complex optimizing compilers: the generated typed assembly language is only 2.3% slower than the base compiler's generated untyped assembly language, and the type-preserving compiler is 82.8% slower than the base compiler.", "paper_title": "Type-preserving compilation for large-scale optimizing object-oriented compilers", "paper_id": "WOS:000257820400017"}