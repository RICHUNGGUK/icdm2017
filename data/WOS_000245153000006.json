{"auto_keywords": [{"score": 0.049581014501477005, "phrase": "plpp"}, {"score": 0.00481495049065317, "phrase": "entry_point"}, {"score": 0.0047152877145889656, "phrase": "legacy_applications"}, {"score": 0.004593591780245872, "phrase": "legacy_sequential_code"}, {"score": 0.004382364826200616, "phrase": "parallel_hardware"}, {"score": 0.004202741104973709, "phrase": "reengineering_for_parallelism"}, {"score": 0.004030449969901066, "phrase": "new_pattern"}, {"score": 0.0037066895459425824, "phrase": "mattson_tg"}, {"score": 0.0036680857629458816, "phrase": "sanders_ba"}, {"score": 0.003629882559085245, "phrase": "massingill_bl._patterns"}, {"score": 0.0035920758080335655, "phrase": "parallel_programming"}, {"score": 0.003554661953961953, "phrase": "addison"}, {"score": 0.003303412571939192, "phrase": "structured_collection"}, {"score": 0.0031513240597392843, "phrase": "parallel_programs"}, {"score": 0.0030220049006970317, "phrase": "good_understanding"}, {"score": 0.002337684811187166, "phrase": "alternate_point"}, {"score": 0.002253461585851626, "phrase": "particular_issues"}, {"score": 0.002183684303511462, "phrase": "legacy_code"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["parallel programming", " design patterns", " pattern language", " parallelization of legacy code"], "paper_abstract": "Many parallel programs begin as legacy sequential code that is later reengineered to take advantage of parallel hardware. This paper presents a pattern called Reengineering for Parallelism to help with this task. The new pattern is intended to be used in conjunction with PLPP (Pattern Language for Parallel Programming), described in our book (Mattson TG, Sanders BA, Massingill BL. Patterns for Parallel Programming. Addison-Wesley: Reading, MA, 2004). PLPP contains a structured collection of patterns and embodies a methodology for developing parallel programs in which the programmer starts with a good understanding of the problem, works through a sequence of patterns, and finally ends up with the code. Most of the patterns in PLPP are also applicable when reengineering legacy code, but it is not always clear how to get started. Reengineeringfor Parallelism provides an alternate point of entry into PLPP and addresses particular issues that arise when dealing with legacy code. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Reengineering for Parallelism: an entry point into PLPP for legacy applications", "paper_id": "WOS:000245153000006"}