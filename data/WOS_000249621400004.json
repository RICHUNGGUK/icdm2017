{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "lexicographical_generation"}, {"score": 0.004768104290288521, "phrase": "compressed_codes"}, {"score": 0.004540591176992658, "phrase": "combinatorial_objects"}, {"score": 0.004366387782457736, "phrase": "code_tree_representation"}, {"score": 0.004017989546119125, "phrase": "lexicographical_successors"}, {"score": 0.003940122359770492, "phrase": "special_kind"}, {"score": 0.003901754272977278, "phrase": "tree_traversal"}, {"score": 0.003661275004971829, "phrase": "code_tree"}, {"score": 0.0032554492909625653, "phrase": "average_running_time"}, {"score": 0.0030696773722514105, "phrase": "random_code_trees"}, {"score": 0.002995427206425849, "phrase": "simply_generated_trees"}, {"score": 0.0028244513779243107, "phrase": "patricia_data_structure"}, {"score": 0.002769650208851401, "phrase": "general_results"}, {"score": 0.0027159094186967247, "phrase": "average_savings"}, {"score": 0.002391067964886602, "phrase": "random_encodings"}, {"score": 0.002356173823922118, "phrase": "s-ary_alphabet"}, {"score": 0.0021999341184897217, "phrase": "ranking_words"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["analysis of algorithms", " combinatorial problems", " lexicographical generation"], "paper_abstract": "A certain class of algorithms for the lexicographical generation of combinatorial objects can be considered as working on the code tree representation of the objects processed. Then the strategy used by the algorithms in order to find lexicographical successors corresponds to a special kind of tree traversal. If the encoding used is redundant in the sense that the code tree has nodes with only one successor, compression becomes possible which allows for a speed-up in the lexicographical generation. In this note we analyze the average running time saved when compression is applied. For this purpose we consider random code trees within the model of simply generated trees together with the compression as used for the trie and the PATRICIA data structure. We prove general results which quantify the average savings only depending on the generator 0 and the size of the family under consideration. As an example, those results are applied to consider random encodings over an s-ary alphabet. Finally, we comment on connections of our findings to the problem of ranking words of a given language. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "On the lexicographical generation of compressed codes", "paper_id": "WOS:000249621400004"}