{"auto_keywords": [{"score": 0.04780597585803098, "phrase": "paralocks"}, {"score": 0.00481495049065317, "phrase": "paralocks_-_role-based_information_flow_control"}, {"score": 0.004399349717218995, "phrase": "expressive_but_statically_verifiable_fine-grained_information_flow_policies"}, {"score": 0.004161553532799662, "phrase": "flow_locks"}, {"score": 0.003802135020791801, "phrase": "runtime_principles"}, {"score": 0.0035965032173588753, "phrase": "role-based_access_control"}, {"score": 0.0032629585038738856, "phrase": "discretionary_access_control"}, {"score": 0.003129623571496151, "phrase": "paralocks_policy_language"}, {"score": 0.0030437652050982643, "phrase": "simple_encoding"}, {"score": 0.003001761366038359, "phrase": "myers"}, {"score": 0.002960255730500962, "phrase": "liskov"}, {"score": 0.0029193609786176632, "phrase": "decentralized_label_model"}, {"score": 0.002630085891013006, "phrase": "information_flow_semantics"}, {"score": 0.0025937408242280757, "phrase": "full_paralock_policies"}, {"score": 0.0023529740798601015, "phrase": "simple_programming_language"}, {"score": 0.002320449502337321, "phrase": "paralock_policy_specifications"}, {"score": 0.002164432930854161, "phrase": "information_flow_security"}, {"score": 0.0021049977753042253, "phrase": "paralock_semantics"}], "paper_keywords": ["Security", " Languages", " Verification"], "paper_abstract": "This paper presents Paralocks, a language for building expressive but statically verifiable fine-grained information flow policies. Paralocks combine the expressive power of Flow Locks (Broberg & Sands, ESOP'06) with the ability to express policies involving runtime principles, roles (in the style of role-based access control), and relations (such as \"acts-for\" in discretionary access control). We illustrate the Paralocks policy language by giving a simple encoding of Myers and Liskov's Decentralized Label Model (DLM). Furthermore - and unlike the DLM - we provide an information flow semantics for full Paralock policies. Lastly we illustrate how Paralocks can be statically verified by providing a simple programming language incorporating Paralock policy specifications, and a static type system which soundly enforces information flow security according to the Paralock semantics.", "paper_title": "Paralocks - Role-Based Information Flow Control and Beyond", "paper_id": "WOS:000274028100037"}