{"auto_keywords": [{"score": 0.040815785747918255, "phrase": "error_floors"}, {"score": 0.00481495049065317, "phrase": "ldpc_codes"}, {"score": 0.004667541072056214, "phrase": "stochastic_decoding"}, {"score": 0.004626255242038005, "phrase": "ultra-low-complexity_hardware"}, {"score": 0.004585332915477379, "phrase": "high-throughput_parallel_low-density_parity-check"}, {"score": 0.00454489007635893, "phrase": "ldpc"}, {"score": 0.004270665568018583, "phrase": "low_power_dissipation"}, {"score": 0.004232875294230749, "phrase": "high_throughput"}, {"score": 0.004195418010131832, "phrase": "stochastic_decoders"}, {"score": 0.003804550737731054, "phrase": "synchronous_stochastic_decoding"}, {"score": 0.003527550673371394, "phrase": "asynchronous_stochastic_decoding"}, {"score": 0.003299880298525127, "phrase": "computation_nodes"}, {"score": 0.0032561349010603734, "phrase": "previous_work"}, {"score": 0.0032272929113113203, "phrase": "different_computation_delay"}, {"score": 0.003032405563826263, "phrase": "update_timing_increases"}, {"score": 0.0027495914857929584, "phrase": "wdd_scheduling_algorithm"}, {"score": 0.002689076130099546, "phrase": "hardware_implementation"}, {"score": 0.002629889135655667, "phrase": "time-averaging_and_multiplication_functions"}, {"score": 0.00258347644721642, "phrase": "original_wdd_scheduling_algorithm"}, {"score": 0.0025606275020526345, "phrase": "ber"}, {"score": 0.00241658945942583, "phrase": "ldpc_code"}, {"score": 0.0023113506171584157, "phrase": "wire_delay"}, {"score": 0.00221068461235127, "phrase": "proposed_asynchronous_decoder"}, {"score": 0.0021333110194180997, "phrase": "synchronous_decoder"}], "paper_keywords": ["forward error correction (FEC)", " stochastic computation", " asynchronous circuits"], "paper_abstract": "Stochastic decoding provides ultra-low-complexity hardware for high-throughput parallel low-density parity-check (LDPC) decoders. Asynchronous stochastic decoding was proposed to demonstrate the possibility of low power dissipation and high throughput in stochastic decoders, but decoding might stop before convergence due to \"lock-up\", causing error floors that also occur in synchronous stochastic decoding. In this paper, we introduce a wire-delay dependent (WDD) scheduling algorithm for asynchronous stochastic decoding in order to reduce the error floors. Instead of assigning the same delay to all computation nodes in the previous work, different computation delay is assigned to each computation node depending on its wire length. The variation of update timing increases switching activities to decrease the possibility of the \"lock-up\", lowering the error floors. In addition, the WDD scheduling algorithm is simplified for the hardware implementation in order to eliminate time-averaging and multiplication functions used in the original WDD scheduling algorithm. BER performance using a regular (1024, 512) (3.6) LDPC code is simulated based on our timing model that has computation and wire delay estimated under ASPLA 90nm CMOS technology. It is demonstrated that the proposed asynchronous decoder achieves a 6.4-9.8x smaller latency than that of the synchronous decoder with a 0.25-0.3 dB coding gain.", "paper_title": "Asynchronous Stochastic Decoding of LDPC Codes: Algorithm and Simulation Model", "paper_id": "WOS:000342784600010"}