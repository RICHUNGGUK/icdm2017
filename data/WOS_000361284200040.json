{"auto_keywords": [{"score": 0.043891862951523725, "phrase": "lambda_b"}, {"score": 0.036241675507294666, "phrase": "lambda_c"}, {"score": 0.006877700214376026, "phrase": "previous_work"}, {"score": 0.006597811475732508, "phrase": "wadler"}, {"score": 0.0059840361063656965, "phrase": "full_abstraction"}, {"score": 0.00481495049065317, "phrase": "first_time"}, {"score": 0.004753672936032795, "phrase": "dart"}, {"score": 0.004723322467153553, "phrase": "pyret"}, {"score": 0.004663203476031268, "phrase": "typescript"}, {"score": 0.004633442799398613, "phrase": "vb"}, {"score": 0.004574449773348889, "phrase": "dynamic_and_static_types"}, {"score": 0.004430248457624686, "phrase": "gradual_typing"}, {"score": 0.004242203637708676, "phrase": "blame_safety"}, {"score": 0.0041287394089001405, "phrase": "blame_calculus"}, {"score": 0.004076157344831794, "phrase": "findler"}, {"score": 0.003934970057482768, "phrase": "coercion_calculus"}, {"score": 0.003909828033238252, "phrase": "henglein"}, {"score": 0.0037864980290391354, "phrase": "space-efficient_calculus"}, {"score": 0.0037623057647684912, "phrase": "herman"}, {"score": 0.003738258816271584, "phrase": "tomb"}, {"score": 0.00370248213506328, "phrase": "flanagan"}, {"score": 0.00367247057075469, "phrase": "lambda_s"}, {"score": 0.003631945391344252, "phrase": "threesome_calculus"}, {"score": 0.003608732492631878, "phrase": "siek"}, {"score": 0.003204999581724485, "phrase": "gradual_types"}, {"score": 0.0030741085942960814, "phrase": "lambda_s._much_previous_work"}, {"score": 0.0030058503645435455, "phrase": "weak_correctness_criteria"}, {"score": 0.002948547333717581, "phrase": "strongest_correctness_criterion"}, {"score": 0.0026865721000905235, "phrase": "particularly_simple_definition"}, {"score": 0.0026523079380037706, "phrase": "subtle_definition"}, {"score": 0.0025767987652419054, "phrase": "simple_definition"}, {"score": 0.0025439310656198795, "phrase": "lambda_c._our_calculus_lambda_s"}, {"score": 0.002251813863195168, "phrase": "challenging_part"}], "paper_keywords": ["Blame", " lambda calculus", " gradual typing"], "paper_abstract": "C#, Dart, Pyret, Racket, TypeScript, VB: many recent languages integrate dynamic and static types via gradual typing. We systematically develop three calculi for gradual typing and the relations between them, building on and strengthening previous work. The calculi are: lambda B, based on the blame calculus of Wadler and Findler (2009); lambda C, inspired by the coercion calculus of Henglein (1994); lambda S inspired by the space-efficient calculus of Herman, Tomb, and Flanagan (2006) and the threesome calculus of Siek and Wadler (2010). While lambda B is little changed from previous work, lambda C and lambda S are new. Together, lambda B, lambda C, and lambda S provide a coherent foundation for design, implementation, and optimisation of gradual types. We define translations from lambda B to lambda C and from lambda C to lambda S. Much previous work lacked proofs of correctness or had weak correctness criteria; here we demonstrate the strongest correctness criterion one could hope for, that each of the translations is fully abstract. Each of the calculi reinforces the design of the others: lambda C has a particularly simple definition, and the subtle definition of blame safety for lambda B is justified by the simple definition of blame safety for lambda C. Our calculus lambda S is implementation-ready: the first space-efficient calculus that is both straightforward to implement and easy to understand. We give two applications: first, using full abstraction from lambda C to lambda S to validate the challenging part of full abstraction between lambda B and lambda C; and, second, using full abstraction from lambda B to lambda S to easily establish the Fundamental Property of Casts,", "paper_title": "Blame and Coercion: Together Again for the First Time", "paper_id": "WOS:000361284200040"}