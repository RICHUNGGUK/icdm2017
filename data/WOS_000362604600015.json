{"auto_keywords": [{"score": 0.04542025404917132, "phrase": "architecture_technical_debt"}, {"score": 0.03976391276230272, "phrase": "architectural_technical_debt"}, {"score": 0.027886523719983028, "phrase": "development_crises"}, {"score": 0.00481495049065317, "phrase": "architectural_technical_debt_accumulation"}, {"score": 0.004537938301016805, "phrase": "large_software_companies"}, {"score": 0.004405440436639404, "phrase": "long-term_feature_delivery_speed"}, {"score": 0.004290901837174206, "phrase": "sub-optimal_architectural_solutions"}, {"score": 0.004179328666330398, "phrase": "future_feature_development"}, {"score": 0.003938740137673181, "phrase": "software_management"}, {"score": 0.0038616499489536123, "phrase": "current_factors"}, {"score": 0.0036034816680872877, "phrase": "exploratory_multiple-case"}, {"score": 0.0034409976875396596, "phrase": "additional_cross-company_interviews"}, {"score": 0.00295681206994471, "phrase": "studied_companies"}, {"score": 0.002879827926178628, "phrase": "exploratory_propositions"}, {"score": 0.0028608962312791264, "phrase": "possible_refactoring_strategies"}, {"score": 0.0026871217010784143, "phrase": "constant_and_unavoidable_accumulation"}, {"score": 0.002474408907166139, "phrase": "reactive_fashion"}, {"score": 0.0023394450295084286, "phrase": "atd"}, {"score": 0.0022191333270475087, "phrase": "strategic_goals"}, {"score": 0.002132970380372137, "phrase": "automated_tools"}], "paper_keywords": ["Architectural Technical Debt", " Software management", " Software architecture", " Agile software development", " Software life-cycle", " Qualitative model"], "paper_abstract": "Context: A known problem in large software companies is to balance the prioritization of short-term with long-term feature delivery speed. Specifically, Architecture Technical Debt is regarded as sub-optimal architectural solutions taken to deliver fast that might hinder future feature development, which, in turn, would hinder agility. Objective: This paper aims at improving software management by shedding light on the current factors responsible for the accumulation of Architectural Technical Debt and to understand how it evolves over time. Method: We conducted an exploratory multiple-case embedded case study in 7 sites at 5 large companies. We evaluated the results with additional cross-company interviews and an in-depth, company-specific case study in which we initially evaluate factors and models. Results: We compiled a taxonomy of the factors and their influence in the accumulation of Architectural Technical Debt, and we provide two qualitative models of how the debt is accumulated and refactored over time in the studied companies. We also list a set of exploratory propositions on possible refactoring strategies that can be useful as insights for practitioners and as hypotheses for further research. Conclusion: Several factors cause constant and unavoidable accumulation of Architecture Technical Debt, which leads to development crises. Refactorings are often overlooked in prioritization and they are often triggered by development crises, in a reactive fashion. Some of the factors are manageable, while others are external to the companies. ATD needs to be made visible, in order to postpone the crises according to the strategic goals of the companies. There is a need for practices and automated tools to proactively manage ATD. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Investigating Architectural Technical Debt accumulation and refactoring over time: A multiple-case study", "paper_id": "WOS:000362604600015"}