{"auto_keywords": [{"score": 0.04950097558699653, "phrase": "dependent_information_flow_types"}, {"score": 0.04458003012492911, "phrase": "security_level"}, {"score": 0.00481495049065317, "phrase": "novel_notion"}, {"score": 0.004586531354697466, "phrase": "standard_framework"}, {"score": 0.00453113241842654, "phrase": "dependent_type_theory"}, {"score": 0.004395532072377065, "phrase": "usual_dependent_types"}, {"score": 0.003939980614608309, "phrase": "runtime_values"}, {"score": 0.0038453138708790385, "phrase": "dependent_sum_information_flow_types"}, {"score": 0.0036627245728600073, "phrase": "fine_grained_security_policies"}, {"score": 0.0034887749053459584, "phrase": "structured_data_types"}, {"score": 0.0033433365160336842, "phrase": "structure_field"}, {"score": 0.003051713660488494, "phrase": "security_enforcement"}, {"score": 0.0030147970456037274, "phrase": "software_systems"}, {"score": 0.0029602552900111407, "phrase": "data-centric_web-based_applications"}, {"score": 0.0027685531038981847, "phrase": "minimal_lambda-calculus"}, {"score": 0.002526938673434697, "phrase": "relevant_scenarios"}, {"score": 0.002278440725193305, "phrase": "algorithmic_type_checking"}, {"score": 0.0021966859554037174, "phrase": "non-interference_theorems"}, {"score": 0.0021569129153653777, "phrase": "well-typed_programs"}, {"score": 0.0021049977753042253, "phrase": "prescribed_security_policies"}], "paper_keywords": ["Information Flow", " Dependent Type Systems"], "paper_abstract": "In this paper, we develop a novel notion of dependent information flow types. Dependent information flow types fit within the standard framework of dependent type theory, but, unlike usual dependent types, crucially allow the security level of a type, rather than just the structural data type itself, to depend on runtime values. Our dependent function and dependent sum information flow types provide a direct, natural and elegant way to express and enforce fine grained security policies on programs, including programs that manipulate structured data types in which the security level of a structure field may depend on values dynamically stored in other fields, still considered a challenge to security enforcement in software systems such as data-centric web-based applications. We base our development on the very general setting of a minimal lambda-calculus with references and collections. We illustrate its expressiveness, showing how secure operations on relevant scenarios can be modelled and analysed using our dependent information flow type system, which is also shown to be amenable to algorithmic type checking. Our main results include type-safety and non-interference theorems ensuring that well-typed programs do not violate prescribed security policies.", "paper_title": "Dependent Information Flow Types", "paper_id": "WOS:000354800500025"}