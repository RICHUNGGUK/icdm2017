{"auto_keywords": [{"score": 0.04867696472724124, "phrase": "xpath_processing"}, {"score": 0.008425939571190106, "phrase": "storage_unit"}, {"score": 0.0048149664616361195, "phrase": "subtree"}, {"score": 0.004729856080441582, "phrase": "xml_storage"}, {"score": 0.004352123742308589, "phrase": "xml_data"}, {"score": 0.004224627834741731, "phrase": "xml_tree"}, {"score": 0.0038870860864224656, "phrase": "xml_node_labeling"}, {"score": 0.0037507793596022326, "phrase": "xml_node"}, {"score": 0.003369778677878286, "phrase": "xml_subtree"}, {"score": 0.0031374619658664843, "phrase": "major_problem"}, {"score": 0.002991524908432975, "phrase": "stored_subtrees"}, {"score": 0.0022610379771517966, "phrase": "final_query_result"}], "paper_keywords": ["XML storage", " XPath processing", " XML node labeling", " XML tree"], "paper_abstract": "The state-of-the-art techniques of storing XML data, modeled as an XML tree, are node-based in the sense that they are centered around XML node labeling and the storage unit is an XML node. In this paper, we propose a generalization of such techniques so that the storage unit is an XML subtree that consists of one or more nodes. Despite several advantages with such generalization, a major problem would be inefficiency in XPath processing where the stored subtrees are to be parsed on the fly in order for the nodes inside them to be accessed. We solve this problem, proposing a technique whereby no parsing of the subtrees involved in XPath processing is needed at all unless they contain the nodes of the final query result. We prove that the correctness of XPath processing is guaranteed with our technique. Through implementation and experiments, we also show that the overhead of our technique is acceptable.", "paper_title": "Subtree-based XML Storage and XPath Processing", "paper_id": "WOS:000284007800010"}