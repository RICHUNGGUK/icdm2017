{"auto_keywords": [{"score": 0.0441310905193623, "phrase": "ariadne"}, {"score": 0.010298658733225895, "phrase": "floating-point_exceptions"}, {"score": 0.00481495049065317, "phrase": "automatic_detection_of_floating-point_exceptions"}, {"score": 0.004567230180529598, "phrase": "exception-free_numerical_programs"}, {"score": 0.003927203683176278, "phrase": "numerical_program"}, {"score": 0.0037390789999636764, "phrase": "transformed_program"}, {"score": 0.0037109446302945903, "phrase": "real_arithmetic"}, {"score": 0.0036691380448651443, "phrase": "candidate_real-valued_inputs"}, {"score": 0.0035065523764817143, "phrase": "candidate_input"}, {"score": 0.003467040410632942, "phrase": "floating-point_number"}, {"score": 0.0033765627434550432, "phrase": "original_program"}, {"score": 0.0033008858616145205, "phrase": "floating-point_arithmetic"}, {"score": 0.003154566400499823, "phrase": "vice_versa"}, {"score": 0.0031190082119319272, "phrase": "key_insight"}, {"score": 0.0024120247307686084, "phrase": "widely_used_gnu_scientific_library"}, {"score": 0.002287646331988365, "phrase": "large_number"}, {"score": 0.00227040825063645, "phrase": "real_runtime_exceptions"}, {"score": 0.002253300217260406, "phrase": "gsl."}, {"score": 0.0022363199197710385, "phrase": "gsl_developers"}, {"score": 0.0021778895748464024, "phrase": "ariadne's_public_release"}], "paper_keywords": ["Algorithms", " Languages", " Reliability", " Verification", " Floating-point exceptions", " symbolic execution"], "paper_abstract": "It is well-known that floating-point exceptions can be disastrous and writing exception-free numerical programs is very difficult. Thus, it is important to automatically detect such errors. In this paper, we present Ariadne, a practical symbolic execution system specifically designed and implemented for detecting floating-point exceptions. Ariadne systematically transforms a numerical program to explicitly check each exception triggering condition. Ariadne symbolically executes the transformed program using real arithmetic to find candidate real-valued inputs that can reach and trigger an exception. Ariadne converts each candidate input into a floating-point number, then tests it against the original program. In general, approximating floating-point arithmetic with real arithmetic can change paths from feasible to infeasible and vice versa. The key insight of this work is that, for the problem of detecting floating-point exceptions, this approximation works well in practice because, if one input reaches an exception, many are likely to, and at least one of them will do so over both floating-point and real arithmetic. To realize Ariadne, we also devised a novel, practical linearization technique to solve nonlinear constraints. We extensively evaluated Ariadne over 467 scalar functions in the widely used GNU Scientific Library (GSL). Our results show that Ariadne is practical and identifies a large number of real runtime exceptions in GSL. The GSL developers confirmed our preliminary findings and look forward to Ariadne's public release, which we plan to do in the near future.", "paper_title": "Automatic Detection of Floating-Point Exceptions", "paper_id": "WOS:000318629900046"}