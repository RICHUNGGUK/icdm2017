{"auto_keywords": [{"score": 0.04596948808198861, "phrase": "new_version"}, {"score": 0.04506785476449152, "phrase": "evolutionary_algorithm"}, {"score": 0.043891862951523704, "phrase": "hidden_combination"}, {"score": 0.00481495049065317, "phrase": "evolutionary_computation"}, {"score": 0.004652016085325825, "phrase": "evolutionary_mastermind"}, {"score": 0.00405336997294013, "phrase": "mastermind"}, {"score": 0.0035072146967082083, "phrase": "optimal_number"}, {"score": 0.003097865379563127, "phrase": "search_space"}, {"score": 0.0029114187110123105, "phrase": "previous_versions"}, {"score": 0.0028127163745564777, "phrase": "real_time"}, {"score": 0.002755104031926742, "phrase": "world_wide_web"}, {"score": 0.0025361866386341796, "phrase": "theoretical_bounds"}, {"score": 0.0023346234464901978, "phrase": "search_space_size"}, {"score": 0.0022399174232611853, "phrase": "different_values"}, {"score": 0.0021940118003312397, "phrase": "ea_parameters"}, {"score": 0.0021050078070343043, "phrase": "elsevier"}], "paper_keywords": ["evolutionary algorithm", " MasterMind"], "paper_abstract": "In this paper we present a new version of an evolutionary algorithm that finds the hidden combination in the game of MasterMind by using hints on how close is a combination played to it. The evolutionary algorithm finds the hidden combination in an optimal number of guesses, is efficient in terms of memory and CPU, and examines only a minimal part of the search space. The algorithm is fast, and indeed previous versions can be played in real time on the world wide web. This new version of the algorithm is presented and compared with theoretical bounds and other algorithms. We also examine how the algorithm scales with search space size, and its performance for different values of the EA parameters. (C) 2005 Elsevier B. V. All rights reserved.", "paper_title": "Finding a needle in a haystack using hints and evolutionary computation: the case of evolutionary MasterMind", "paper_id": "WOS:000235150500004"}