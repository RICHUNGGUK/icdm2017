{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "periodic_continuous_queries"}, {"score": 0.011096963529092148, "phrase": "bandwidth_utilization"}, {"score": 0.004767546015485477, "phrase": "real-time_data_broadcast_environments"}, {"score": 0.004582528208024817, "phrase": "promising_data_dissemination_approach"}, {"score": 0.004537401559396022, "phrase": "mobile_computing_environments"}, {"score": 0.004339744430169516, "phrase": "dynamic_workload"}, {"score": 0.00427578268550103, "phrase": "important_class"}, {"score": 0.0042336638794732255, "phrase": "emerging_data_broadcast_applications"}, {"score": 0.004150661689086371, "phrase": "multiple_time-varying_data_items"}, {"score": 0.003989487818395848, "phrase": "up-to-date_information"}, {"score": 0.0038727120021750973, "phrase": "broadcast_schedule_problem"}, {"score": 0.003815607281455725, "phrase": "timely_data"}, {"score": 0.0037039021744127783, "phrase": "systematic_and_highly_efficient_solution"}, {"score": 0.0034386894664467003, "phrase": "novel_measure"}, {"score": 0.0033050703534275717, "phrase": "minimum_bandwidth_demand"}, {"score": 0.0032563083791198534, "phrase": "periodic_continuous_query_set"}, {"score": 0.00320826350799124, "phrase": "timing_predictability"}, {"score": 0.0030081030319492343, "phrase": "schedulability_test"}, {"score": 0.0029637093924781825, "phrase": "schedulability_test_techniques"}, {"score": 0.002862648127577722, "phrase": "dynamic_query_arrival"}, {"score": 0.0027925723953701083, "phrase": "efficient_online_scheduling_algorithm"}, {"score": 0.002605329434787829, "phrase": "timing_constraints"}, {"score": 0.0025541693207036167, "phrase": "proposed_query_release"}, {"score": 0.0025289662786567896, "phrase": "deletion_policies"}, {"score": 0.002442693254693416, "phrase": "theoretical_results"}, {"score": 0.00240662380079115, "phrase": "illustrative_algorithm_implementation"}, {"score": 0.0023476849595393872, "phrase": "comprehensive_performance_analysis"}, {"score": 0.0023245146355917626, "phrase": "simulation_results"}, {"score": 0.0022675820982741347, "phrase": "nice_timing_predictability"}, {"score": 0.002168586864007222, "phrase": "dtiu"}, {"score": 0.002147180332779021, "phrase": "different_deadline"}, {"score": 0.0021049977753042253, "phrase": "different_query_workloads"}], "paper_keywords": ["Data broadcast", " periodic continuous query processing", " real-time scheduling"], "paper_abstract": "On-demand broadcast is a promising data dissemination approach in mobile computing environments thanks to its adaptability and scalability for large-scale and dynamic workload. An important class of emerging data broadcast applications needs to monitor multiple time-varying data items continuously to be kept aware of the up-to-date information. This paper investigates the broadcast schedule problem for disseminating timely data to periodic continuous queries, and a systematic and highly efficient solution for applications of this type is provided. In particular, we propose a novel measure, called Bandwidth Utilization, to quantify the minimum bandwidth demand of a periodic continuous query set. The timing predictability can be ensured if a set of periodic continuous queries passes a bandwidth utilization based schedulability test. The schedulability test techniques are also extended to deal with dynamic query arrival and departure. An efficient online scheduling algorithm, called RM-UO, is developed, which can fulfill the timing constraints combined with the proposed query release and deletion policies. To demonstrate the effectiveness of theoretical results, an illustrative algorithm implementation is presented along with comprehensive performance analysis. Simulation results show that our solution offers nice timing predictability whereas other comparable best effort scheduling algorithms such as SIN-alpha and DTIU experience different deadline miss ratios at different query workloads.", "paper_title": "Scheduling Periodic Continuous Queries in Real-Time Data Broadcast Environments", "paper_id": "WOS:000307119200009"}