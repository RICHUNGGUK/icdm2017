{"auto_keywords": [{"score": 0.04183563930934435, "phrase": "use_cases"}, {"score": 0.015719716506582538, "phrase": "predicate_argument_structure_analysis"}, {"score": 0.011319444424744331, "phrase": "semantic_labels"}, {"score": 0.004776669953449352, "phrase": "use_case_description_modeling"}, {"score": 0.004701015188740582, "phrase": "large_software_system_development_project"}, {"score": 0.004039221742250308, "phrase": "requirements_documents"}, {"score": 0.003850173884725567, "phrase": "use_case_descriptions"}, {"score": 0.0038195342195623764, "phrase": "unformatted_text"}, {"score": 0.003758981686762617, "phrase": "model_construction"}, {"score": 0.003190878119415192, "phrase": "existing_general_lexical_resources"}, {"score": 0.0031528393611136704, "phrase": "case_frame_dictionaries"}, {"score": 0.002945669860541221, "phrase": "quality_analysis"}, {"score": 0.00288736193515505, "phrase": "automated_test_case_generation"}, {"score": 0.002818909613625567, "phrase": "document_sets"}, {"score": 0.002730150696072947, "phrase": "existing_use_cases"}, {"score": 0.0026336242881032645, "phrase": "proposed_prototype_system"}, {"score": 0.0026126405272417783, "phrase": "real-world_use_cases"}, {"score": 0.0025202582748972122, "phrase": "packaged_application"}, {"score": 0.002382987346529592, "phrase": "high_precision"}, {"score": 0.0023640794148719925, "phrase": "english"}, {"score": 0.002345172260040296, "phrase": "japanese"}, {"score": 0.002326464619238653, "phrase": "case_data"}, {"score": 0.002262209824105154, "phrase": "good_test_cases"}, {"score": 0.0022174005294867604, "phrase": "real_use_cases"}, {"score": 0.0021909411820497707, "phrase": "manual_improvement"}, {"score": 0.0021049977753042253, "phrase": "quality_analysis_system"}], "paper_keywords": ["use case", " modeling", " predicate argument structure", " semantic constraint"], "paper_abstract": "In a large software system development project, many documents are prepared and updated frequently. In such a situation, support is needed for looking through these documents easily to identify inconsistencies and to maintain traceability. In this research, we focus on the requirements documents such as use cases and consider how to create models from the use case descriptions in unformatted text. In the model construction, we propose a few semantic constraints based on the features of the use cases and use them for a predicate argument structure analysis to assign semantic labels to actors and actions. With this approach, we show that we can assign semantic labels without enhancing any existing general lexical resources such as case frame dictionaries and design a less language-dependent model construction architecture. By using the constructed model, we consider a system for quality analysis of the use cases and automated test case generation to keep the traceability between document sets. We evaluated the reuse of the existing use cases and generated test case steps automatically with the proposed prototype system from real-world use cases in the development of a system using a packaged application. Based on the evaluation, we show how to construct models with high precision from English and Japanese use case data. Also, we could generate good test cases for about 90% of the real use cases through the manual improvement of the descriptions based on the feedback from the quality analysis system.", "paper_title": "Predicate Argument Structure Analysis for Use Case Description Modeling", "paper_id": "WOS:000306198700026"}