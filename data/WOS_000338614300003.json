{"auto_keywords": [{"score": 0.037014371738981165, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "dense_qr_factorization"}, {"score": 0.0047559432344272, "phrase": "hybrid_cpu-gpu_systems"}, {"score": 0.004611554879923759, "phrase": "qr_factorization"}, {"score": 0.004527024978801684, "phrase": "computational_kernel"}, {"score": 0.004471530397729526, "phrase": "scientific_computing"}, {"score": 0.004335739075947899, "phrase": "latest_computer"}, {"score": 0.003952513974962462, "phrase": "dense_qr_factorization_algorithm"}, {"score": 0.0039040344230094164, "phrase": "adaptive_block_sizes"}, {"score": 0.003832423454781517, "phrase": "hybrid_system"}, {"score": 0.003738973626996355, "phrase": "central_processing_unit"}, {"score": 0.0036932858216711215, "phrase": "cpu"}, {"score": 0.003204232566468624, "phrase": "adaptive_scheme"}, {"score": 0.003145417398038261, "phrase": "block_size"}, {"score": 0.0029570303644956128, "phrase": "statistical_surrogate_models"}, {"score": 0.0028670988845838296, "phrase": "online_monitor"}, {"score": 0.002797121441432477, "phrase": "unexpected_occasional_performance_drops"}, {"score": 0.0027120400060701034, "phrase": "highly_optimized_cpu-gpu_based_qr_factorization"}, {"score": 0.002678762872250223, "phrase": "magma"}, {"score": 0.002565345470805401, "phrase": "numerical_results"}, {"score": 0.0024116163689723354, "phrase": "near-optimal_block_sizes"}, {"score": 0.0022255422143095806, "phrase": "lu"}, {"score": 0.0021980949960322214, "phrase": "cholesky"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["QR factorization", " Adaptive block size", " Graphic processing unit (GPU)", " Linear regression"], "paper_abstract": "QR factorization is a computational kernel of scientific computing. How can the latest computer be used to accelerate this task? We investigate this topic by proposing a dense QR factorization algorithm with adaptive block sizes on a hybrid system that contains a central processing unit (CPU) and a graphic processing unit (GPU). To maximize the use of CPU and GPU, we develop an adaptive scheme that chooses block size at each iteration. The decision is based on statistical surrogate models of performance and an online monitor, which avoids unexpected occasional performance drops. We modify the highly optimized CPU-GPU based QR factorization in MAGMA to implement the proposed schemes. Numerical results suggest that our approaches are efficient and can lead to near-optimal block sizes. The proposed algorithm can be extended to other one-sided factorizations, such as LU and Cholesky factorizations. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Adaptive block size for dense QR factorization in hybrid CPU-GPU systems via statistical modeling", "paper_id": "WOS:000338614300003"}