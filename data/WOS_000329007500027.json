{"auto_keywords": [{"score": 0.04624429388440982, "phrase": "tm"}, {"score": 0.027472491264890368, "phrase": "tls"}, {"score": 0.012394335228355844, "phrase": "tls."}, {"score": 0.006167709784352424, "phrase": "setm"}, {"score": 0.0058091651295996295, "phrase": "conflict-tolerant_mechanism"}, {"score": 0.005118868944829667, "phrase": "performance_improvement"}, {"score": 0.00481495049065317, "phrase": "speculative_threads"}, {"score": 0.004751216062917875, "phrase": "hardware_transactional_memory"}, {"score": 0.004719664411221952, "phrase": "thread-level_speculation"}, {"score": 0.004549821572786755, "phrase": "serial_programs"}, {"score": 0.004342430078306461, "phrase": "promising_alternative"}, {"score": 0.004284923367722824, "phrase": "parallel_programming"}, {"score": 0.004144452614362445, "phrase": "similar_underlying_support"}, {"score": 0.003916790017155158, "phrase": "signature"}, {"score": 0.003877121909026298, "phrase": "effective_way"}, {"score": 0.0038385317554884713, "phrase": "speculative_states"}, {"score": 0.003737485125097945, "phrase": "tm_and_tls_performance"}, {"score": 0.003614895644619489, "phrase": "conflict_detection"}, {"score": 0.0035669891404642015, "phrase": "conflict-intensive_tls._setm"}, {"score": 0.003449972561293443, "phrase": "bad_influence"}, {"score": 0.003370344851760079, "phrase": "fast_rollback_mechanism"}, {"score": 0.0033256684464109242, "phrase": "fast_abort_recovery"}, {"score": 0.0033035520810722886, "phrase": "eager_log-based_htm"}, {"score": 0.0031527885391562423, "phrase": "ambiguous_data_conflicts"}, {"score": 0.003049318402401662, "phrase": "efficient_execution"}, {"score": 0.0030189426536422577, "phrase": "un-order_transactions"}, {"score": 0.0029689853349030007, "phrase": "extra_ordering_mechanism"}, {"score": 0.0029198522863606953, "phrase": "ordering_mechanism"}, {"score": 0.0026593184154220123, "phrase": "tls_applications"}, {"score": 0.002641621667026613, "phrase": "six_representative_benchmarks"}, {"score": 0.0025125868638809284, "phrase": "execution_performance"}, {"score": 0.002470987929071079, "phrase": "modest_hardware_cost"}, {"score": 0.002421975107313603, "phrase": "important_scientific_loops"}, {"score": 0.002381872778203302, "phrase": "highest_speedup"}, {"score": 0.0023190823948528953, "phrase": "experimental_results"}, {"score": 0.002295964130868963, "phrase": "good_scalability"}, {"score": 0.0022806798371116698, "phrase": "setm_system"}, {"score": 0.002250415129116109, "phrase": "tm_applications"}, {"score": 0.0021764967557725387, "phrase": "stamp"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Hardware transactional memory", " Thread-level speculation", " Fast rollback", " Conflict-tolerant", " Order"], "paper_abstract": "Thread-level speculation (TLS) was researched to automatically parallelize portions of serial programs for execution, and transactional memory (TM) was studied as a promising alternative of lock for parallel programming due to its simplicity. Both TLS and TM require similar underlying support. In the paper, we present SeTM (sequential transactional memory), a hardware enhanced TM system which supports TLS at minor extra cost. Signature is an effective way to buffer speculative states in TM and TLS. But it cripples TM and TLS performance due to its false-positive in terms of conflict detection, especially for conflict-intensive TLS. SeTM adopts R/W bits and signature concurrently to ameliorate this bad influence. Additionally, SeTM introduces the fast rollback mechanism, which provides fast abort recovery for eager log-based HTM and TLS. The most important contribution of SeTM is the conflict-tolerant mechanism, which tolerates some ambiguous data conflicts in TLS. Finally, in order to achieve an efficient execution for these un-order transactions, we add an extra ordering mechanism for SeTM. With this ordering mechanism, the transactions in TM can also gain the performance improvement with the support of conflict-tolerant mechanism. Our evaluation major on TM and TLS separately. For the TLS applications, six representative benchmarks have been adopted to evaluate the above model. Our experimental results show that our scheme improves the execution performance of most tested codes at a modest hardware cost. For a set of important scientific loops, we report the highest speedup of 6.5 with 15 cores. Besides, experimental results also show good scalability of SeTM system. For the TM applications, with respect to LogTM-SE, the benchmarks from STAMP also gain performance improvement signally. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Efficient execution of speculative threads and transactions with hardware transactional memory", "paper_id": "WOS:000329007500027"}