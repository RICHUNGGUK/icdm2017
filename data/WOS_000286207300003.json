{"auto_keywords": [{"score": 0.04078562747295002, "phrase": "secure_coprocessor"}, {"score": 0.00481495049065317, "phrase": "tamper-resistant_programming_language_system"}, {"score": 0.004729856080441582, "phrase": "important_and_recurring_security_scenario"}, {"score": 0.0045370785151713396, "phrase": "trusted_computations"}, {"score": 0.004404188306112211, "phrase": "untrusted_environments"}, {"score": 0.004224627834741731, "phrase": "tamper-resistant_interpreter"}, {"score": 0.004052367953455934, "phrase": "lisp"}, {"score": 0.0033497809969621267, "phrase": "larger_memory"}, {"score": 0.003290494847464381, "phrase": "associated_untrusted_host"}, {"score": 0.003118838635447237, "phrase": "host's_memory"}, {"score": 0.0029737652463012318, "phrase": "hostile_host"}, {"score": 0.0025020469669826497, "phrase": "language_approach"}, {"score": 0.002385595105638277, "phrase": "tamper_resistance"}, {"score": 0.0022745539101489236, "phrase": "merkle"}, {"score": 0.0022209780222461587, "phrase": "simulated_relative_performance"}, {"score": 0.0021049977753042253, "phrase": "relative_merits"}], "paper_keywords": ["Interpreters", " memory management", " garbage collection", " infrastructure protection"], "paper_abstract": "An important and recurring security scenario involves the need to carry out trusted computations in the context of untrusted environments. It is shown how a tamper-resistant interpreter for a programming language-currently Lisp 1.5-combined with the use of a secure coprocessor can address this problem. This solution executes the interpreter on the secure coprocessor while the code and data of the program reside in the larger memory of an associated untrusted host. This allows the coprocessor to utilize the host's memory without fear of tampering even by a hostile host. This approach has several advantages including ease of use, and the ability to provide tamper-resistance for any program that can be constructed using the language. The language approach enabled the development of two novel mechanisms for implementing tamper resistance. These mechanisms provide alternatives to pure Merkle hash trees. Simulated relative performance of the various mechanisms is provided and shows the relative merits of each mechanism.", "paper_title": "A Tamper-Resistant Programming Language System", "paper_id": "WOS:000286207300003"}