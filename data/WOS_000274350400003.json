{"auto_keywords": [{"score": 0.02988869905879018, "phrase": "fully_wet_domain"}, {"score": 0.004688989566904871, "phrase": "two-dimensional_hydraulic_models"}, {"score": 0.004330450801016359, "phrase": "research_and_industry_modelling_projects"}, {"score": 0.004070573090297285, "phrase": "multiple_cores"}, {"score": 0.003742554019950264, "phrase": "particular_codes"}, {"score": 0.003709595902020469, "phrase": "parallel_efficiency"}, {"score": 0.00342568771304873, "phrase": "parallel_implementations"}, {"score": 0.0032629585038738856, "phrase": "serial_version"}, {"score": 0.003205754795065662, "phrase": "openmp"}, {"score": 0.003066945490483524, "phrase": "similar_speedups"}, {"score": 0.00278237555651743, "phrase": "message_passing_code"}, {"score": 0.0026036031415940563, "phrase": "completely_wet_domain"}, {"score": 0.0025692477422626678, "phrase": "parallel_codes"}, {"score": 0.0025018875576502606, "phrase": "partially_wet_domain_test_case"}, {"score": 0.0024688710065898646, "phrase": "accelerator_card_code"}, {"score": 0.0023724065150232897, "phrase": "standard_code"}, {"score": 0.002341094670523097, "phrase": "single_core"}, {"score": 0.0022496114364599328, "phrase": "longer_development_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Hydraulic model", " LISFLOOD-FP", " Urban flooding", " OpenMP", " MPI", " SIMD", " ClearSpeed"], "paper_abstract": "For many applications two-dimensional hydraulic models are time intensive to run due to their computational requirements, which can adversely affect the progress of both research and industry modelling projects. Computational time can be reduced by running a model in parallel over multiple cores. However, there are many parallelisation methods and these differ in terms of difficulty of implementation, suitability for particular codes and parallel efficiency. This study compares three parallelisation methods based on OpenMP, message passing and specialised accelerator cards. The parallel implementations of the codes were required to produce near identical results to a serial version for two urban inundation test cases. OpenMP was considered the easiest method to develop and produced similar speedups (of similar to 3.9x) to the message passing code on up to four cores for a fully wet domain. The message passing code was more efficient than OpenMP, and remained over 90% efficient on up to 50 cores for a completely wet domain. All parallel codes were less efficient for a partially wet domain test case. The accelerator card code was faster and more power efficient than the standard code on a single core for a fully wet domain, but was subject to longer development time (2 months compared to <2 week for the other methods). (C) 2009 Elsevier Ltd. All rights reserved.", "paper_title": "A comparison of three parallelisation methods for 2D flood inundation models", "paper_id": "WOS:000274350400003"}