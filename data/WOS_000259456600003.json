{"auto_keywords": [{"score": 0.0486868426803837, "phrase": "delta_execution"}, {"score": 0.015567537886639652, "phrase": "object-oriented_programs"}, {"score": 0.014756120618080671, "phrase": "state-space_exploration"}, {"score": 0.005714334388405838, "phrase": "jpf"}, {"score": 0.00481495049065317, "phrase": "efficient_state-space_exploration"}, {"score": 0.004648369839326854, "phrase": "exploration_time"}, {"score": 0.004321118442104989, "phrase": "model_checking"}, {"score": 0.004257806363128601, "phrase": "increasingly_popular_approach"}, {"score": 0.004195418010131832, "phrase": "test_generation"}, {"score": 0.004133940019630129, "phrase": "key_issue"}, {"score": 0.003974349782102708, "phrase": "program_state"}, {"score": 0.003479692058963528, "phrase": "common_parts"}, {"score": 0.0030017207229983385, "phrase": "java_programs"}, {"score": 0.0029578405395201414, "phrase": "box"}, {"score": 0.0028154895878702633, "phrase": "efficient_exploration"}, {"score": 0.0027878797103973313, "phrase": "sequential_java_programs"}, {"score": 0.0027200305495826797, "phrase": "bounded-exhaustive_exploration"}, {"score": 0.002255431275670053, "phrase": "nonexhaustive_exploration"}], "paper_keywords": ["software/program verification", " model checking", " testing and debugging", " performance", " Delta Execution"], "paper_abstract": "We present Delta Execution, a technique that speeds up state-space exploration of object-oriented programs. State-space exploration is the essence of model checking and an increasingly popular approach for automating test generation. A key issue in exploration of object-oriented programs is handling the program state, in particular, the heap. We exploit the fact that many execution paths in state-space exploration partially overlap. Delta Execution simultaneously operates on several states/heaps and shares the common parts across the executions, separately executing only the \"deltas\" where the executions differ. We implemented Delta Execution in two model checkers: JPF, a popular general-purpose model checker for Java programs, and BOX, a specialized model checker that we developed for efficient exploration of sequential Java programs. The results of bounded-exhaustive exploration of 10 basic subject programs and one larger case study show that Delta Execution reduces exploration time from 1.06x to 126.80x (with median 5.60x) in JPF and from 0.58x to 4.16x (with median 2.23x) in BOX. The results of nonexhaustive exploration in JPF show that Delta Execution reduces exploration time from 0.92x to 6.28x (with median 4.52x).", "paper_title": "Delta execution for efficient state-space exploration of object-oriented programs", "paper_id": "WOS:000259456600003"}