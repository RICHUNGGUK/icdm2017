{"auto_keywords": [{"score": 0.004739773204474094, "phrase": "standard_equipment"}, {"score": 0.004485735417293941, "phrase": "inductive_datatype"}, {"score": 0.0036553070575015344, "phrase": "standard_techniques"}, {"score": 0.00327356326590461, "phrase": "suitably_heterogeneous_notion"}, {"score": 0.0030494153169181334, "phrase": "inductive_families"}, {"score": 0.0028857130140890787, "phrase": "vital_components"}, {"score": 0.0027741761880779535, "phrase": "dependently_typed_programs"}, {"score": 0.0027093285574752457, "phrase": "matching_style"}, {"score": 0.0025841336988141235, "phrase": "equivalent_programs"}, {"score": 0.0024842242921857705, "phrase": "induction_principles"}, {"score": 0.0021049977753042253, "phrase": "epigram"}], "paper_keywords": [""], "paper_abstract": "We present four constructions for standard equipment which can be generated for every inductive datatype: case analysis, structural recursion, no confusion, acyclicity. Our constructions follow a two-level approach-they require less work than the standard techniques which inspired them [11, 8]. Moreover, given a suitably heterogeneous notion of equality, they extend without difficulty to inductive families of datatypes. These constructions are vital components of the translation from dependently typed programs in pattern matching style [7] to the equivalent programs expressed in terms of induction principles [21] and as such play a crucial behind-the-scenes r (o) over cap le in Epigram [25].", "paper_title": "A few constructions on constructors", "paper_id": "WOS:000235656800012"}