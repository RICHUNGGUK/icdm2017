{"auto_keywords": [{"score": 0.04289868233502891, "phrase": "fixed_task_priority_policy"}, {"score": 0.00481495049065317, "phrase": "decentralized_task_scheduling"}, {"score": 0.004726052718910578, "phrase": "fixed_priority_multicore"}, {"score": 0.0045249263666466005, "phrase": "multiple_cores"}, {"score": 0.004359328949187473, "phrase": "high-performance_embedded_systems"}, {"score": 0.004252296935371162, "phrase": "real-time_operating_systems"}, {"score": 0.0038737214010638745, "phrase": "high_performance"}, {"score": 0.003617616153730564, "phrase": "decentralized_task"}, {"score": 0.003506851152129303, "phrase": "fixed-priority_multicore_rtos"}, {"score": 0.003399466007862412, "phrase": "sequential_and_parallel_tasks"}, {"score": 0.003336614511719501, "phrase": "aggressive_decentralized_task_scheduling"}, {"score": 0.0032546105164772995, "phrase": "task_priority_inversions"}, {"score": 0.0031944286166257466, "phrase": "high-performance_priority-preserving_solution"}, {"score": 0.0028737647829311587, "phrase": "simulation_studies"}, {"score": 0.0027341763737751467, "phrase": "extensive_evaluations"}, {"score": 0.0026835920552084488, "phrase": "carefully_prepared_performance_metrics"}, {"score": 0.0023546984428119864, "phrase": "sequential_tasks"}, {"score": 0.002325554982412043, "phrase": "small_subtask"}, {"score": 0.0022683432490549064, "phrase": "minimum_number"}, {"score": 0.0021446993452098597, "phrase": "parallel_tasks"}], "paper_keywords": ["Embedded system", " Multicore", " Realtime operating system", " Task scheduling", " Parallel computing"], "paper_abstract": "Parallel task execution on multiple cores is increasingly the norm in high-performance embedded systems. Many multicore real-time operating systems (RTOSes) support a fixed task priority policy, and many applications that execute on such platforms require high performance while adhering to the fixed task priority policy. This paper proposes a decentralized task scheduling problem for a fixed-priority multicore RTOS running a mix of sequential and parallel tasks. Since aggressive decentralized task scheduling can result in task priority inversions, a high-performance priority-preserving solution to the proposed problem is challenging. To address this problem, 32 possible candidate solutions are considered and simulation studies are used to evaluate them. From extensive evaluations based on carefully prepared performance metrics, it is found that policies based on number of tasks, waiting time and priority (NTWP) for sequential tasks and small subtask first, then minimum number of tasks (MIN-MNT) for parallel tasks significantly outperform other possible candidates.", "paper_title": "Decentralized task scheduling for a fixed priority multicore embedded RTOS", "paper_id": "WOS:000354623200002"}