{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "code-based_test_generators"}, {"score": 0.028568317730340426, "phrase": "test_generators"}, {"score": 0.004652016085325825, "phrase": "case_study"}, {"score": 0.004592340708764929, "phrase": "industrial_software_component"}, {"score": 0.004513957235071457, "phrase": "effective_test_suites"}, {"score": 0.004456044928556639, "phrase": "significant_impact"}, {"score": 0.004417848254181138, "phrase": "testing_practice"}, {"score": 0.004361163586439822, "phrase": "extensively_tested_software"}, {"score": 0.004323776691055635, "phrase": "reasonable_effort"}, {"score": 0.004286708921931472, "phrase": "cost_bounds"}, {"score": 0.0041773934798743405, "phrase": "source_code"}, {"score": 0.004035946043145475, "phrase": "test_objectives"}, {"score": 0.003949974260471287, "phrase": "test_case_generation_process"}, {"score": 0.0037028514035425037, "phrase": "random_testing"}, {"score": 0.003382547312072468, "phrase": "state-of-the-research_test_generators"}, {"score": 0.003267925215811654, "phrase": "nontrivial_domain-specific_peculiarities"}, {"score": 0.003157174936641705, "phrase": "software_component"}, {"score": 0.0031166151196841308, "phrase": "real-time_and_safety-critical_control_system"}, {"score": 0.0029980349778590577, "phrase": "labview"}, {"score": 0.0029089095588612007, "phrase": "embedded_systems"}, {"score": 0.0027982016314450717, "phrase": "available_body"}, {"score": 0.0026570998719084153, "phrase": "empirical_data"}, {"score": 0.002427035025924384, "phrase": "different_types"}, {"score": 0.0024061887405214186, "phrase": "test_generation"}, {"score": 0.0022749744354271816, "phrase": "floating_point_arithmetics"}, {"score": 0.002255431275670053, "phrase": "nonlinear_computations"}, {"score": 0.002226430168622392, "phrase": "major_milestone"}, {"score": 0.0021601997088758957, "phrase": "full_potential"}, {"score": 0.0021049977753042253, "phrase": "symbolic_execution"}], "paper_keywords": ["Structural testing", " Automatic test generation", " Experimental study"], "paper_abstract": "Automatically generating effective test suites promises a significant impact on testing practice by promoting extensively tested software within reasonable effort and cost bounds. Code-based test generators rely on the source code of the software under test to identify test objectives and to steer the test case generation process accordingly. Currently, the most mature proposals on this topic come from the research on random testing, dynamic symbolic execution, and search-based testing. This paper studies the effectiveness of a set of state-of-the-research test generators on a family of industrial programs with nontrivial domain-specific peculiarities. These programs are part of a software component of a real-time and safety-critical control system and integrate in a control task specified in LabVIEW, a graphical language for designing embedded systems. The result of this study enhances the available body of knowledge on the strengths and weaknesses of test generators. The empirical data indicate that the test generators can truly expose subtle (previously unknown) bugs in the subject software and that there can be merit in using different types of test generation approaches in a complementary, even synergic fashion. Furthermore, our experiment pinpoints the support for floating point arithmetics and nonlinear computations as a major milestone in the path to exploiting the full potential of the prototypes based on symbolic execution in industry.", "paper_title": "Software testing with code-based test generators: data and lessons learned from a case study with an industrial software component", "paper_id": "WOS:000334917700009"}