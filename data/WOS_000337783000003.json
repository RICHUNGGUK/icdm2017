{"auto_keywords": [{"score": 0.03650725283056864, "phrase": "javelus"}, {"score": 0.00481495049065317, "phrase": "java_applications"}, {"score": 0.004688321299229397, "phrase": "software_systems"}, {"score": 0.004444921827311577, "phrase": "new_features"}, {"score": 0.004347256848088215, "phrase": "running_system"}, {"score": 0.004232875294230749, "phrase": "normal_practice"}, {"score": 0.004158290806404304, "phrase": "service_unavailability"}, {"score": 0.004013025478863664, "phrase": "dynamic_software_updating"}, {"score": 0.003977506101448199, "phrase": "dsu"}, {"score": 0.003907403442285109, "phrase": "running_software_system"}, {"score": 0.0038556354709511818, "phrase": "new_version"}, {"score": 0.003770869401884267, "phrase": "state-of-the-art_java_dsu_systems"}, {"score": 0.0036390887584943723, "phrase": "non-negligible_system_pause"}, {"score": 0.0033442114331500407, "phrase": "java_dsu"}, {"score": 0.003128336741911927, "phrase": "running_application"}, {"score": 0.0030189426536422577, "phrase": "changed_code"}, {"score": 0.0029263562233195423, "phrase": "stale_objects"}, {"score": 0.0027741761880779535, "phrase": "careful_design"}, {"score": 0.0027495914857929584, "phrase": "lazy_approach"}, {"score": 0.0027010719929751, "phrase": "update_flexibility"}, {"score": 0.0026652435674846095, "phrase": "unnecessary_object_validity_checks"}, {"score": 0.00258347644721642, "phrase": "evaluation_experiments"}, {"score": 0.002405853977978678, "phrase": "observable_overheads"}, {"score": 0.002352886041381761, "phrase": "dynamic_updating"}, {"score": 0.0022604585778195152, "phrase": "low-disruptive_and_type-safe_dynamic_updating"}, {"score": 0.002240457455369444, "phrase": "java"}, {"score": 0.0021620042653528846, "phrase": "lazy_updating_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Dynamic software updating", " JVM", " Lazy updating", " Low disruption"], "paper_abstract": "Context: In-use software systems are destined to change in order to fix bugs or add new features. Shutting down a running system before updating it is a normal practice, but the service unavailability can be annoying and sometimes unacceptable. Dynamic software updating (DSU) migrates a running software system to a new version without stopping it. State-of-the-art Java DSU systems are unsatisfactory as they may cause a non-negligible system pause during updating. Objective: In this paper we present Javelus, a Java HotSpot VM-based Java DSU system with very short pausing time. Method: Instead of updating everything at once when the running application is suspended, Javelus only updates the changed code during the suspension, and migrates stale objects on-demand after the application is resumed. With a careful design this lazy approach neither sacrifices the update flexibility nor introduces unnecessary object validity checks or access indirections. Results: Evaluation experiments show that Javelus can reduce the updating pausing time by one to two orders of magnitude without introducing observable overheads before and after the dynamic updating. Conclusion: Our experience with Javelus indicates that low-disruptive and type-safe dynamic updating of Java applications can be practically achieved with a lazy updating approach. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Low-disruptive dynamic updating of Java applications", "paper_id": "WOS:000337783000003"}