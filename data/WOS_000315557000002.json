{"auto_keywords": [{"score": 0.03923307184680597, "phrase": "total_accrued_utility"}, {"score": 0.030408555694276515, "phrase": "uaod"}, {"score": 0.00481495049065317, "phrase": "mpsoc_real-time_embedded_systems"}, {"score": 0.004714023408114857, "phrase": "object-based_real-time_embedded_systems"}, {"score": 0.004518442937844318, "phrase": "real-time_tasks"}, {"score": 0.004330941610682453, "phrase": "tuf"}, {"score": 0.004240116703465252, "phrase": "accrued_utility"}, {"score": 0.003928572641266562, "phrase": "processing_elements"}, {"score": 0.003593812067062062, "phrase": "utility_accrual_object_distribution"}, {"score": 0.0034299649219748513, "phrase": "first_phase"}, {"score": 0.00327356326590461, "phrase": "offline_manner"}, {"score": 0.003150900886669123, "phrase": "proposed_methods"}, {"score": 0.0031242709509664837, "phrase": "object_placement"}, {"score": 0.003097865379563127, "phrase": "object_replication"}, {"score": 0.003071682293903262, "phrase": "deadline_decomposition"}, {"score": 0.003032820755030689, "phrase": "deadline_adaptation"}, {"score": 0.002833689453299307, "phrase": "load-balancing_approach"}, {"score": 0.0027159094186967247, "phrase": "second_phase"}, {"score": 0.002658863179011018, "phrase": "online_scheduling"}, {"score": 0.002548331088496964, "phrase": "offline_object_placement"}, {"score": 0.0024632148715152393, "phrase": "namely_uaod"}, {"score": 0.0023607968604629393, "phrase": "exact_task_execution-times"}, {"score": 0.002196342933346204, "phrase": "proposed_algorithms"}, {"score": 0.0021593396036472777, "phrase": "traditional_object_placement_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Deadline decomposition", " Object placement", " Object replication", " MPSoC real-time systems", " Utility accrual scheduling"], "paper_abstract": "This paper considers object-based real-time embedded systems on MPSoCs. Objects provide system services to the real-time tasks. Each task is subject to a time/utility function (TUF) which determines the accrued utility of the task according to its completion time. One major problem in such systems is to place the objects on the processing elements (PEs) in the MPSoC so as to maximize the total accrued utility. In this regard, we propose a utility accrual object distribution (UAOD) algorithm consisting of two phases. In the first phase, the PEs are reserved for the most beneficial tasks in an offline manner. The reservation is. constituted of some proposed methods for object placement, object replication, deadline decomposition, and deadline adaptation. For the objects which are not placed in the reservation, UAOD follows a load-balancing approach to place them on the PEs. As the second phase, UAOD performs an online scheduling over the tasks assigned to each PE in the offline object placement. An extension of this algorithm, namely UAOD* is also proposed for the situations where the exact task execution-times are not known a priori. Simulation results reveal that the total accrued utility is improved with the proposed algorithms comparing to the traditional object placement methods. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Utility accrual object distribution in MPSoC real-time embedded systems", "paper_id": "WOS:000315557000002"}