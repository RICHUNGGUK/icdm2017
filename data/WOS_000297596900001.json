{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed_systems"}, {"score": 0.04916104605092019, "phrase": "model_checking"}, {"score": 0.004286708921931472, "phrase": "optimal_use"}, {"score": 0.0040708542958968605, "phrase": "scheduling_policies"}, {"score": 0.0038409323908446297, "phrase": "efficient_implementations"}, {"score": 0.003623949225126944, "phrase": "global_states"}, {"score": 0.003267925215811654, "phrase": "knowledge_properties"}, {"score": 0.0031233388358844188, "phrase": "local_information"}, {"score": 0.0028901595183546576, "phrase": "high_priority_transition"}, {"score": 0.0024586427394152196, "phrase": "transformed_version"}, {"score": 0.0023346234464901978, "phrase": "gathered_information"}, {"score": 0.0021049977753042253, "phrase": "original_specification"}], "paper_keywords": ["Model checking", " Synthesis", " Controller design", " Knowledge", " Temporal logic"], "paper_abstract": "Priorities are used to control the execution of systems to meet given requirements for optimal use of resources, e.g., by using scheduling policies. For distributed systems it is hard to find efficient implementations for priorities; because they express constraints on global states, their implementation may incur considerable overhead. Our method is based on performing model checking for knowledge properties. It allows identifying where the local information of a process is sufficient to schedule the execution of a high priority transition. As a result of the model checking, the program is transformed to react upon the knowledge it has at each point. The transformed version has no priorities, and uses the gathered information and its knowledge to limit the enabledness of transitions so that it matches or approximates the original specification of priorities.", "paper_title": "Priority scheduling of distributed systems based on model checking", "paper_id": "WOS:000297596900001"}