{"auto_keywords": [{"score": 0.03925202888072704, "phrase": "oop"}, {"score": 0.028260927869382415, "phrase": "aop"}, {"score": 0.00481495049065317, "phrase": "software_development"}, {"score": 0.00466085208934021, "phrase": "embedded_and_deeply_embedded_systems"}, {"score": 0.0045411156682300695, "phrase": "cost_pressure"}, {"score": 0.004482400730101345, "phrase": "extremely_limited_hardware_resources"}, {"score": 0.004310752197635499, "phrase": "modem_concepts"}, {"score": 0.004145649381700967, "phrase": "software_reuse"}, {"score": 0.0038843558517333327, "phrase": "thereby_induced_memory"}, {"score": 0.003834099867584972, "phrase": "performance_overhead"}, {"score": 0.0037844916274672544, "phrase": "especially_object-oriented_programming"}, {"score": 0.003454687811707182, "phrase": "highly_configurable_fine-grained_system_software_product_lines"}, {"score": 0.003194898129853895, "phrase": "crucial_property"}, {"score": 0.002878556952876824, "phrase": "aspect-oriented_programming"}, {"score": 0.002559859451119449, "phrase": "similar_or_even_better_separation"}, {"score": 0.0024939618994290016, "phrase": "significantly_smaller_memory_footprints"}, {"score": 0.0024297565926197505, "phrase": "case_study"}, {"score": 0.0023826870912207324, "phrase": "embedded_system_product_line"}, {"score": 0.002104998402292434, "phrase": "oop."}], "paper_keywords": [""], "paper_abstract": "Software development in the domain of embedded and deeply embedded systems is dominated by cost pressure and extremely limited hardware resources. As a result, modem concepts for separation of concerns and software reuse are widely ignored, as developers worry about the thereby induced memory and performance overhead. Especially object-oriented programming (OOP) is still little in demand. For the development of highly configurable fine-grained system software product lines, however, separation of concerns (SoC) is a crucial property. As the overhead of object-orientation is not acceptable in this domain, we propose aspect-oriented programming (AOP) as an alternative. Compared to OOP, AOP makes it possible to reach similar or even better separation of concerns with significantly smaller memory footprints. In a case study for an embedded system product line the memory costs for SoC could be reduced from 148-236% to 2-10% by using AOP instead of OOP.", "paper_title": "Lean and efficient system software product lines: Where aspects beat objects", "paper_id": "WOS:000243074900008"}