{"auto_keywords": [{"score": 0.04838112755214283, "phrase": "energy_efficiency"}, {"score": 0.010612387000973441, "phrase": "performance_improvement"}, {"score": 0.00599199967424529, "phrase": "single-server_system"}, {"score": 0.004719359108879602, "phrase": "internet_servers"}, {"score": 0.00455202992136173, "phrase": "internet_services"}, {"score": 0.004515655183335171, "phrase": "datacenter_servers"}, {"score": 0.00432070565627091, "phrase": "self-tuning_request_hatching_mechanism"}, {"score": 0.0041842092128678105, "phrase": "batching_mechanism"}, {"score": 0.004052007312730483, "phrase": "front-tier_web_server"}, {"score": 0.003908246778916674, "phrase": "application's_performance"}, {"score": 0.0038152404172111815, "phrase": "server_system"}, {"score": 0.0037244390953401533, "phrase": "hatching_mechanism"}, {"score": 0.0036504182609411852, "phrase": "practical_two-layer_control_system"}, {"score": 0.0035778632599436024, "phrase": "hatching_interval"}, {"score": 0.0034508665218929745, "phrase": "service_level_agreement"}, {"score": 0.00340954056723008, "phrase": "workload_characteristics"}, {"score": 0.003368707839819003, "phrase": "hatching_control"}, {"score": 0.0033283624928018177, "phrase": "self-tuning_fuzzy_model_predictive_control_approach"}, {"score": 0.003236086384959101, "phrase": "power_control_dynamically"}, {"score": 0.003171740347925348, "phrase": "central_processing_units"}, {"score": 0.003108669771132255, "phrase": "dynamic_voltage"}, {"score": 0.003083793024782014, "phrase": "frequency_scaling"}, {"score": 0.0029982770062678926, "phrase": "workload_fluctuations"}, {"score": 0.002868646843975439, "phrase": "desired_performance"}, {"score": 0.0027778947555117243, "phrase": "self-tuning_hatching"}, {"score": 0.0026792166577171476, "phrase": "multiserver_system"}, {"score": 0.002615381301695394, "phrase": "mimo_expert_fuzzy_control"}, {"score": 0.0025736694380861604, "phrase": "cpu_frequencies"}, {"score": 0.002553063001454623, "phrase": "multiple_servers"}, {"score": 0.002512342528545883, "phrase": "frequency_states"}, {"score": 0.002472269923319476, "phrase": "different_tiers"}, {"score": 0.0023940274498526213, "phrase": "test_bed"}, {"score": 0.002374855916752648, "phrase": "experimental_results"}, {"score": 0.0023369711258107244, "phrase": "new_approach"}, {"score": 0.002299689297293321, "phrase": "application_performance"}, {"score": 0.002253920389285441, "phrase": "system_throughput"}, {"score": 0.0022358683283304533, "phrase": "average_response_time"}, {"score": 0.0021049977753042253, "phrase": "energy_consumption"}], "paper_keywords": ["Design", " Experimentation", " Performance", " Self-tuning batching", " DVFS", " performance improvement", " energy efficiency", " fuzzy model predictive control", " Internet applications"], "paper_abstract": "Performance improvement and energy efficiency are two important goals in provisioning Internet services in datacenter servers. In this article, we propose and develop a self-tuning request hatching mechanism to simultaneously achieve the two correlated goals. The batching mechanism increases the cache hit rate at the front-tier Web server, which provides the opportunity to improve an application's performance and the energy efficiency of the server system. The core of the hatching mechanism is a novel and practical two-layer control system that adaptively adjusts the hatching interval and frequency states of CPUs according to the service level agreement and the workload characteristics. The hatching control adopts a self-tuning fuzzy model predictive control approach for application performance improvement. The power control dynamically adjusts the frequency of Central Processing Units (CPUs) with Dynamic Voltage and Frequency Scaling (DVFS) in response to workload fluctuations for energy efficiency. A coordinator between the two control loops achieves the desired performance and energy efficiency. We further extend the self-tuning hatching with DVFS approach from a single-server system to a multiserver system. It relies on a MIMO expert fuzzy control to adjust the CPU frequencies of multiple servers and coordinate the frequency states of CPUs at different tiers. We implement the mechanism in a test bed. Experimental results demonstrate that the new approach significantly improves the application performance in terms of the system throughput and average response time. At the same time, the results also illustrate the mechanism can reduce the energy consumption of a single-server system by 13% and a multiserver system by 11%, respectively.", "paper_title": "Self-Tuning Batching with DVFS for Performance Improvement and Energy Efficiency in Internet Servers", "paper_id": "WOS:000353435100006"}