{"auto_keywords": [{"score": 0.04126073658431364, "phrase": "type_inference"}, {"score": 0.03414229704911109, "phrase": "chr_programs"}, {"score": 0.00481495049065317, "phrase": "confluence_and_consistent_chr-based_type_inference"}, {"score": 0.00461302961851157, "phrase": "constraint_handling_rules"}, {"score": 0.004392565073466714, "phrase": "type_inference_systems"}, {"score": 0.004208332582080472, "phrase": "haskell"}, {"score": 0.003769006950727621, "phrase": "standard_method"}, {"score": 0.003545024951402818, "phrase": "chr_program"}, {"score": 0.002931569771634119, "phrase": "glasgow_haskell_compiler"}, {"score": 0.0025615908073796027, "phrase": "undecidable_instances_flag"}, {"score": 0.0023652572260178637, "phrase": "relaxed_criteria"}, {"score": 0.0021049977753042253, "phrase": "chr-based_type_inference"}], "paper_keywords": ["Constraint Handling Rules", " confluence", " termination", " type classes"], "paper_abstract": "We consider the application of Constraint Handling Rules (CHR) for the specification of type inference systems, such as that used by Haskell. Confluence of CHR guarantees that the answer provided by type inference is correct and consistent. The standard method for establishing confluence relies on an assumption that the CHR program is terminating. However, many examples in practice give rise to non-terminating CHR programs, rendering this method inapplicable. Despite no guarantee of termination or confluence, the Glasgow Haskell Compiler (GHC) supports options that allow the user to proceed with type inference anyway, e.g. via the use of the Undecidable Instances flag. In this paper we formally identify and verify a set of relaxed criteria, namely range-restrictedness, local confluence, and ground termination, that ensure the consistency of CHR-based type inference that maps to potentially non-terminating CHR programs.", "paper_title": "On Termination, Confluence and Consistent CHR-based Type Inference", "paper_id": "WOS:000343203200015"}