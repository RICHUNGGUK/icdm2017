{"auto_keywords": [{"score": 0.0469988093233022, "phrase": "dbscan"}, {"score": 0.03784929546168969, "phrase": "cudascan"}, {"score": 0.01560542715284355, "phrase": "graphics_processing_units"}, {"score": 0.01009729989450925, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "dataset_partition"}, {"score": 0.0045726187330434025, "phrase": "processing_speed"}, {"score": 0.004139028737420222, "phrase": "existing_gpu-based_dbscan_extensions"}, {"score": 0.003858697684681798, "phrase": "neighbor_objects"}, {"score": 0.0037881238886444332, "phrase": "intermediate_clustering_results"}, {"score": 0.003650842083358054, "phrase": "gpu."}, {"score": 0.003428665921276366, "phrase": "better_use"}, {"score": 0.003390886284555397, "phrase": "gpu._cudascan"}, {"score": 0.003267925215811654, "phrase": "entire_dataset"}, {"score": 0.0031845067058084583, "phrase": "integer_multiple"}, {"score": 0.002882160722418316, "phrase": "local_clustering_results"}, {"score": 0.0026570998719084153, "phrase": "intermediate_results"}, {"score": 0.0024768883044869023, "phrase": "off-chip_global_memory"}, {"score": 0.0022415745160585146, "phrase": "cuda-dclust"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Density-based clustering", " Graphics processing unit", " Massively parallel algorithm", " Dataset partition", " On-chip shared memory"], "paper_abstract": "Graphics processing units (GPUs) have been utilized to improve the processing speed of many conventional data mining algorithms. DBSCAN, a popular clustering algorithm that has been often used in practice, was extended to execute on a GPU. However, existing GPU-based DBSCAN extensions still have impediments in that the distances from all objects need to be repeatedly computed to find the neighbor objects and the objects and intermediate clustering results are stored in costly off-chip memory of the GPU. This paper proposes CudaSCAN, a novel algorithm that improves the efficiency of DBSCAN by making better use of the GPU. CudaSCAN consists of three phases: (1) partitioning the entire dataset into sub-regions of size of an integer multiple of the on-chip shared memory size in the GPU; (2) local clustering within sub-regions in parallel; and (3) merging the local clustering results. CudaSCAN allows an overlap between sub-regions to ensure independent, parallel local clustering in each sub-region, which in turn enables for objects and/or intermediate results to be stored in on-chip shared memory that has an access cost a few hundred times cheaper than that of off-chip global memory. The independence also enables for merging to be parallelized. This paper proves the correctness of CudaSCAN, and according to our extensive experiments, CudaSCAN outperforms CUDA-DClust, a previous GPU-based DBSCAN extension, by up to 163.6 times. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Fast density-based clustering through dataset partition using graphics processing units", "paper_id": "WOS:000353848900008"}