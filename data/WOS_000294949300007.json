{"auto_keywords": [{"score": 0.04909558158843681, "phrase": "hypervisor_failures"}, {"score": 0.00481495049065317, "phrase": "vm_survival_across_hypervisor_failures"}, {"score": 0.004755353864362941, "phrase": "existing_virtualized_systems"}, {"score": 0.004657653216262924, "phrase": "overall_system_failure"}, {"score": 0.004486800020569973, "phrase": "virtual_machines"}, {"score": 0.0040949726088047225, "phrase": "new_instance"}, {"score": 0.0038157022294338454, "phrase": "hypervisor_reboot"}, {"score": 0.003768426876815755, "phrase": "normal_execution"}, {"score": 0.003721735062704032, "phrase": "new_hypervisor_instance"}, {"score": 0.003600022318864217, "phrase": "arbitrary_state_corruption"}, {"score": 0.0033824008297657494, "phrase": "recovered_hypervisor_instance"}, {"score": 0.003285380677401785, "phrase": "different_parts"}, {"score": 0.0032581736321024373, "phrase": "hypervisor_state"}, {"score": 0.0031515923438229765, "phrase": "vms"}, {"score": 0.002960979624379786, "phrase": "xen_hypervisor"}, {"score": 0.002828556054338357, "phrase": "fault_injection_experiments"}, {"score": 0.0027588314610845705, "phrase": "dangerous_state_corruption"}, {"score": 0.0026027349356415735, "phrase": "xen"}, {"score": 0.0025704485156071463, "phrase": "memory_space_overhead"}, {"score": 0.002549146857303602, "phrase": "rehype"}, {"score": 0.002486292595645607, "phrase": "pristine_copy"}, {"score": 0.0024554476124885806, "phrase": "hypervisor_code"}, {"score": 0.0024350966556966757, "phrase": "static_data"}, {"score": 0.002404885278896803, "phrase": "small_reserved_memory_area"}, {"score": 0.0023750478314945303, "phrase": "fault_injection_campaigns"}, {"score": 0.002259346051668556, "phrase": "multiple_vms"}, {"score": 0.0022220423638260015, "phrase": "hypercall-intensive_benchmarks"}, {"score": 0.002167235986623239, "phrase": "rehype_prototype"}, {"score": 0.0021049977753042253, "phrase": "detected_hypervisor_failures"}], "paper_keywords": ["Reliability", " Experimentation", " Performance", " Virtualization", " Reliability", " Recovery", " VMM", " Microreboot", " Xen"], "paper_abstract": "With existing virtualized systems, hypervisor failures lead to overall system failure and the loss of all the work in progress of virtual machines (VMs) running on the system. We introduce ReHype, a mechanism for recovery from hypervisor failures by booting a new instance of the hypervisor while preserving the state of running VMs. VMs are stalled during the hypervisor reboot and resume normal execution once the new hypervisor instance is running. Hypervisor failures can lead to arbitrary state corruption and inconsistencies throughout the system. ReHype deals with the challenge of protecting the recovered hypervisor instance from such corrupted state and resolving inconsistencies between different parts of hypervisor state as well as between the hypervisor and VMs and between the hypervisor and the hardware. We have implemented ReHype for the Xen hypervisor. The implementation was done incrementally, using results from fault injection experiments to identify the sources of dangerous state corruption and inconsistencies. The implementation of ReHype involved only 880 LOC added or modified in Xen. The memory space overhead of ReHype is only 2.1MB for a pristine copy of the hypervisor code and static data plus a small reserved memory area. The fault injection campaigns used to evaluate the effectiveness of ReHype involved a system with multiple VMs running I/O and hypercall-intensive benchmarks. Our experimental results show that the ReHype prototype can successfully recover from over 90% of detected hypervisor failures.", "paper_title": "ReHype: Enabling VM Survival Across Hypervisor Failures", "paper_id": "WOS:000294949300007"}