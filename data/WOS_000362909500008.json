{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "gpu"}, {"score": 0.004669845451682529, "phrase": "random_memory_access"}, {"score": 0.004598933498016774, "phrase": "recent_advent"}, {"score": 0.004552255360140208, "phrase": "high-throughput_sequencing_machines"}, {"score": 0.004437613070853689, "phrase": "short_reads"}, {"score": 0.004303830426772906, "phrase": "efficient_string"}, {"score": 0.0040481944502103505, "phrase": "special_data_structure"}, {"score": 0.0038271712887391015, "phrase": "fast_exact_searches"}, {"score": 0.003788296551609616, "phrase": "large_genomic_references"}, {"score": 0.003636692152882991, "phrase": "pseudo-random_memory_access_pattern"}, {"score": 0.003509006038574667, "phrase": "limiting_factor"}, {"score": 0.0034556603183020407, "phrase": "computation-efficient_implementations"}, {"score": 0.003088384809415812, "phrase": "memory_bottleneck"}, {"score": 0.002860546817196148, "phrase": "larger_memory_blocks"}, {"score": 0.0028026735035370206, "phrase": "k-step_fm-index"}, {"score": 0.0026630475331025955, "phrase": "memory_accesses"}, {"score": 0.002284444272376043, "phrase": "comparable_multi-core_cpu_version"}, {"score": 0.0021817065300196634, "phrase": "fm-index_implementation"}, {"score": 0.0021049977753042253, "phrase": "recently_announced_nvidia_nvbio_bioinformatics_library"}], "paper_keywords": ["GPGPU", " bioinformatics", " short read mapping", " FM-index", " fine-grain parallelism", " memory-level parallelism"], "paper_abstract": "The recent advent of high-throughput sequencing machines producing big amounts of short reads has boosted the interest in efficient string searching techniques. As of today, many mainstream sequence alignment software tools rely on a special data structure, called the FM-index, which allows for fast exact searches in large genomic references. However, such searches translate into a pseudo-random memory access pattern, thus making memory access the limiting factor of all computation-efficient implementations, both on CPUs and GPUs. Here, we show that several strategies can be put in place to remove the memory bottleneck on the GPU: more compact indexes can be implemented by having more threads work cooperatively on larger memory blocks, and a k-step FM-index can be used to further reduce the number of memory accesses. The combination of those and other optimisations yields an implementation that is able to process about two Gbases of queries per second on our test platform, being about 8x faster than a comparable multi-core CPU version, and about 3x to 5x faster than the FM-index implementation on the GPU provided by the recently announced Nvidia NVBIO bioinformatics library.", "paper_title": "Boosting the FM-Index on the GPU: Effective Techniques to Mitigate Random Memory Access", "paper_id": "WOS:000362909500008"}