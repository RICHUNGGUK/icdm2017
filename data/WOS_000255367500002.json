{"auto_keywords": [{"score": 0.03223784073734207, "phrase": "fault_site"}, {"score": 0.004814953351202414, "phrase": "atpg"}, {"score": 0.0047784273577245505, "phrase": "multilevel_compatible_don't-cares"}, {"score": 0.004670504053818028, "phrase": "technology_mapping"}, {"score": 0.00463507149599759, "phrase": "automatic_test_pattern_generation"}, {"score": 0.004118874671285618, "phrase": "technology_independent_logic_optimization"}, {"score": 0.004025787455454387, "phrase": "boolean_satisfiability"}, {"score": 0.0039049226745413224, "phrase": "single_stuck-"}, {"score": 0.0038752755502006442, "phrase": "fault_model"}, {"score": 0.0037589124802364384, "phrase": "compatible_observability"}, {"score": 0.0035096666710980108, "phrase": "atpg_process"}, {"score": 0.0034697573205392887, "phrase": "large_circuits"}, {"score": 0.003378385493203297, "phrase": "approximate_codcs"}, {"score": 0.0032027739752274, "phrase": "fault_propagation"}, {"score": 0.0031542917620807093, "phrase": "active_clauses"}, {"score": 0.003118410827789671, "phrase": "transitive_fanout"}, {"score": 0.003094716540812336, "phrase": "tfo"}, {"score": 0.0029675701595142656, "phrase": "new_j-active_variables"}, {"score": 0.002900426826591772, "phrase": "transitive_fanin"}, {"score": 0.002878385326792572, "phrase": "tfi"}, {"score": 0.0027918707809612, "phrase": "j-active_variables"}, {"score": 0.002760101069870307, "phrase": "additional_clauses"}, {"score": 0.002718301574682098, "phrase": "fault_justification"}, {"score": 0.0026976391682197133, "phrase": "experimental_results"}, {"score": 0.002537880772794665, "phrase": "average_reduction"}, {"score": 0.002499438189264537, "phrase": "atpg_runtimes"}, {"score": 0.002360381056508368, "phrase": "atpg_run-times"}, {"score": 0.0022719915771356354, "phrase": "commercial_structural_atpg_tool"}, {"score": 0.002203663884543687, "phrase": "small_designs"}, {"score": 0.0021702728407945976, "phrase": "large_designs"}, {"score": 0.0021049977753042253, "phrase": "commercial_tool"}], "paper_keywords": ["design", " performance", " reliabilty"], "paper_abstract": "cares are discarded before Technology Mapping or Automatic Test Pattern Generation ( ATPG). In this paper, we present two combinational ATPG algorithms for combinational designs. These algorithms utilize the multilevel don't cares that are computed for the design during technology independent logic optimization. They are based on Boolean Satisfiability ( SAT), and utilize the single stuck- at fault model. Both algorithms make use of the Compatible Observability Don't Cares ( CODCs) associated with nodes of the circuit, to speed up the ATPG process. For large circuits, both algorithms make use of approximate CODCs ( ACODCs), which we can compute efficiently. Our first technique speeds up fault propagation by modifying the active clauses in the transitive fanout ( TFO) of the fault site. In our second technique, we define new j-active variables for specific nodes in the transitive fanin (TFI) of the fault site. Using these j-active variables we write additional clauses to speed up fault justification. Experimental results demonstrate that the combination of these techniques ( when using CODCs) results in an average reduction of 45% in ATPG runtimes. When ACODCs are used, a speed-up of about 30% is obtained in the ATPG run-times for large designs. We compare our method against a commercial structural ATPG tool as well. Our method is slower for small designs, but for large designs, we obtain a 31% average speedup over the commercial tool.", "paper_title": "SAT-based ATPG using multilevel compatible don't-cares", "paper_id": "WOS:000255367500002"}