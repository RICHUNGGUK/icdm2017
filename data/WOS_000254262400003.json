{"auto_keywords": [{"score": 0.04107868567004354, "phrase": "relational_approach"}, {"score": 0.0098293758132953, "phrase": "xml_data"}, {"score": 0.009159841015258035, "phrase": "xml"}, {"score": 0.008226313221155383, "phrase": "xml_queries"}, {"score": 0.006882875091347781, "phrase": "potentially_longer_runtimes"}, {"score": 0.00481495049065317, "phrase": "relational_database"}, {"score": 0.004785356349906913, "phrase": "scalable_xml_search"}, {"score": 0.004712160586409063, "phrase": "flexible_and_powerful_tool"}, {"score": 0.004640079189342692, "phrase": "security_sharing"}, {"score": 0.004611554879923759, "phrase": "heterogeneous_environments"}, {"score": 0.004583205112737672, "phrase": "scalable_technologies"}, {"score": 0.0044853402274804815, "phrase": "growing_volumes"}, {"score": 0.004416713079266374, "phrase": "wide_variety"}, {"score": 0.004243135792625782, "phrase": "conventional_tree-based_and_relational_approaches"}, {"score": 0.0038442670949832523, "phrase": "mature_relational_database"}, {"score": 0.003785415402153494, "phrase": "xml."}, {"score": 0.0037045454048955425, "phrase": "sql"}, {"score": 0.003625347557965931, "phrase": "database_results"}, {"score": 0.0035588302267335046, "phrase": "limited_acceptance"}, {"score": 0.0035043290787032597, "phrase": "xml_processing"}, {"score": 0.0034083145672246067, "phrase": "relational_schema"}, {"score": 0.0033664873319204027, "phrase": "new_xml_hierarchy"}, {"score": 0.0031649018957020337, "phrase": "schema_redesign"}, {"score": 0.0029479120854134996, "phrase": "tree_approach"}, {"score": 0.0029027394930867902, "phrase": "popular_xml_benchmark"}, {"score": 0.002805774617782258, "phrase": "large_collections"}, {"score": 0.0027884948773692153, "phrase": "heterogeneous_xml_documents"}, {"score": 0.0027036751290702406, "phrase": "xbench_benchmark"}, {"score": 0.0025812459787060097, "phrase": "wide_range"}, {"score": 0.0024491648492933615, "phrase": "different_query_features"}, {"score": 0.002426566352219338, "phrase": "collection_size"}, {"score": 0.002316656229510391, "phrase": "result_size"}, {"score": 0.0022185595808679, "phrase": "scalable_approach"}, {"score": 0.0022048882869630114, "phrase": "xml_retrieval"}, {"score": 0.0021845387990972543, "phrase": "existing_relational_database_optimizations"}, {"score": 0.0021049977753042253, "phrase": "tree-based_approach"}], "paper_keywords": ["XML retrieval", " relational database"], "paper_abstract": "XML is a flexible and powerful tool that enables information and security sharing in heterogeneous environments. Scalable technologies are needed to effectively manage the growing volumes of XML data. A wide variety of methods exist for storing and searching XML data; the two most common techniques are conventional tree-based and relational approaches. Tree-based approaches represent XML as a tree and use indexes and path join algorithms to process queries. In contrast, the relational approach utilizes the power of a mature relational database to store and search XML. This method relationally maps XML queries to SQL and reconstructs the XML from the database results. To date, the limited acceptance of the relational approach to XML processing is due to the need to redesign the relational schema each time a new XML hierarchy is defined. We, in contrast, describe a relational approach that is fixed schema eliminating the need for schema redesign at the expense of potentially longer runtimes. We show, however, that these potentially longer runtimes are still significantly shorter than those of the tree approach. We use a popular XML benchmark to compare the scalability of both approaches. We generated large collections of heterogeneous XML documents ranging in size from 500 MB to 8 GB using the XBench benchmark. The scalability of each method was measured by running XML queries that cover a wide range of XML search features on each collection. We measure the scalability of each method over different query features as the collection size increases. In addition, we examine the performance of each method as the result size and the number of predicates increase. Our results show that our relational approach provides a scalable approach to XML retrieval by leveraging existing relational database optimizations. Furthermore, we show that the relational approach typically outperforms the tree-based approach while scaling consistently over all collections studied.", "paper_title": "Using a relational database for scalable XML search", "paper_id": "WOS:000254262400003"}