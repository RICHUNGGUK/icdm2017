{"auto_keywords": [{"score": 0.014217798809309462, "phrase": "neighbor_variables"}, {"score": 0.00481495049065317, "phrase": "central_problem"}, {"score": 0.004745665541429529, "phrase": "structured_peer-to-peer_networks"}, {"score": 0.0037087324991876727, "phrase": "ring_topology"}, {"score": 0.0036288825833675127, "phrase": "basisof_several_peer-to-peer_networks"}, {"score": 0.0030933709720820605, "phrase": "bidirectional_ring"}, {"score": 0.0028352726653271187, "phrase": "membership_change"}, {"score": 0.0026175952455594277, "phrase": "assertional_proof_method"}, {"score": 0.0024519545383399773, "phrase": "global_invariant"}], "paper_keywords": ["concurrency", " distributed algorithm", " distributed data structures", " network protocols", " correctness"], "paper_abstract": "A central problem for structured peer-to-peer networks is topology maintenance, that is, how to properly update neighbor variables when nodes join or leave the network, possibly concurrently. In this paper, we consider the maintenance of the ring topology, the basisof several peer-to-peer networks, in the fault-free environment. We design, and prove the correctness of, protocols that maintain a bidirectional ring under both joins and leaves. Our protocols update neighbor variables once a membership change occurs. We prove the correctness of our protocols using an assertional proof method, that is, we first identify a global invariant for a protocol and then show that every action of the protocol preserves the invariant. Our protocols are simple and our proofs are rigorous and explicit.", "paper_title": "Concurrent maintenance of rings", "paper_id": "WOS:000241726500003"}