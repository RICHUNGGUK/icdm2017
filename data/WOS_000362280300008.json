{"auto_keywords": [{"score": 0.036209461625577755, "phrase": "time_complexity"}, {"score": 0.022602922862279825, "phrase": "existing_techniques"}, {"score": 0.00478579024367007, "phrase": "graph_pattern_matching"}, {"score": 0.004727995968069753, "phrase": "great_deal"}, {"score": 0.004614483128885678, "phrase": "twig-pattern_matching"}, {"score": 0.004544919390397046, "phrase": "extremely_large_number"}, {"score": 0.004276949941406725, "phrase": "high_computational_costs"}, {"score": 0.004136333933790974, "phrase": "top-k_tree_pattern_matching"}, {"score": 0.004049257973730703, "phrase": "rooted_tree_t"}, {"score": 0.003976076057473637, "phrase": "directed_graph_g"}, {"score": 0.0039280214778273925, "phrase": "twig-pattern_matching_semantics"}, {"score": 0.0038336409728616035, "phrase": "optimal_enumeration_paradigm"}, {"score": 0.003764341156823266, "phrase": "lawler's_procedure"}, {"score": 0.0034676182423067307, "phrase": "t._considering"}, {"score": 0.0029602552900111407, "phrase": "transitive_closure"}, {"score": 0.002933354468864442, "phrase": "data_graph_g"}, {"score": 0.0029066973917258655, "phrase": "relevant_nodes"}, {"score": 0.0028195727965553367, "phrase": "worst_case"}, {"score": 0.0027184540871935284, "phrase": "running_time"}, {"score": 0.0024736587129641652, "phrase": "existing_technique"}, {"score": 0.0024288830311280573, "phrase": "maximal_node_degree"}, {"score": 0.0023849158959156026, "phrase": "novel_priority_based_access_technique"}, {"score": 0.0022715134070706174, "phrase": "significant_performance_improvement"}, {"score": 0.0022101055924375725, "phrase": "general_form"}, {"score": 0.0021966859554037174, "phrase": "top-k_graph_pattern_matching_problem"}, {"score": 0.0021049977753042253, "phrase": "comprehensive_empirical_studies"}], "paper_keywords": [""], "paper_abstract": "Driven by many real applications, graph pattern matching has attracted a great deal of attention recently. Consider that a twig-pattern matching may result in an extremely large number of matches in a graph; this may not only confuse users by providing too many results but also lead to high computational costs. In this paper, we study the problem of top-k tree pattern matching; that is, given a rooted tree T, compute its top-k matches in a directed graph G based on the twig-pattern matching semantics. We firstly present a novel and optimal enumeration paradigm based on the principle of Lawler's procedure. We show that our enumeration algorithm runs in O(n(T) + log k) time in each round where n(T) is the number of nodes in T. Considering that the time complexity to output a match of T is O(n(T)) and n(T) >= log k in practice, our enumeration technique is optimal. Moreover, the cost of generating top-1 match of T in our algorithm is O(m(R)) where m(R) is the number of edges in the transitive closure of a data graph G involving all relevant nodes to T. O(m(R)) is also optimal in the worst case without pre-knowledge of G. Consequently, our algorithm is optimal with the running time O(m(R) + k(n(T) + log k)) in contrast to the time complexity O(m(R) log k+ kn(T) (log k+ d(T))) of the existing technique where d(T) is the maximal node degree in T. Secondly, a novel priority based access technique is proposed, which greatly reduces the number of edges accessed and results in a significant performance improvement. Finally, we apply our techniques to the general form of top-k graph pattern matching problem (i.e., query is a graph) to improve the existing techniques. Comprehensive empirical studies demonstrate that our techniques may improve the existing techniques by orders of magnitude.", "paper_title": "Optimal Enumeration: Efficient Top-k Tree Matching", "paper_id": "WOS:000362280300008"}