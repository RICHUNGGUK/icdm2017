{"auto_keywords": [{"score": 0.049100450513748305, "phrase": "aspect-oriented_programming"}, {"score": 0.00481495049065317, "phrase": "existing_object-oriented_code"}, {"score": 0.004479120557712926, "phrase": "crosscutting_concerns_-_functionalities"}, {"score": 0.004275650416511604, "phrase": "base_code"}, {"score": 0.004231699728933577, "phrase": "existing_systems"}, {"score": 0.0041666157975446564, "phrase": "natural_testbed"}, {"score": 0.004102528738941734, "phrase": "aop_approach"}, {"score": 0.003855849747095327, "phrase": "traditional_programming_constructs"}, {"score": 0.0037381083634085424, "phrase": "automated_approach"}, {"score": 0.0036427316134070007, "phrase": "migrating_systems"}, {"score": 0.003353521531649663, "phrase": "simple_set"}, {"score": 0.0033190180867511605, "phrase": "six_refactorings"}, {"score": 0.003071274938566466, "phrase": "aop-migrator_tool"}, {"score": 0.002856721964722374, "phrase": "oop"}, {"score": 0.0027837615811247963, "phrase": "initial_set"}, {"score": 0.0025361866386341796, "phrase": "selected_crosscutting_concerns"}, {"score": 0.0025100713447593773, "phrase": "medium-sized_java_programs"}, {"score": 0.0023467391904246834, "phrase": "equivalent_programs"}, {"score": 0.002286781334850213, "phrase": "study_results"}, {"score": 0.002137947680862631, "phrase": "enabling_transformations"}, {"score": 0.0021049977753042253, "phrase": "preprocessing_step"}], "paper_keywords": ["aspect-oriented software development", " refactoring", " program transformation."], "paper_abstract": "Aspect-Oriented Programming (AOP) provides mechanisms for the separation of crosscutting concerns - functionalities scattered through the system and tangled with the base code. Existing systems are a natural testbed for the AOP approach since they often contain several crosscutting concerns which could not be modularized using traditional programming constructs. This paper presents an automated approach to the problem of migrating systems developed according to the Object-Oriented Programming (OOP) paradigm into Aspect-Oriented Programming ( AOP). A simple set of six refactorings has been defined to transform OOP to AOP and has been implemented in the AOP-Migrator tool, an Eclipse plug-in. A set of enabling transformations from OOP to OOP complement the initial set of refactorings. The paper presents the results of four case studies, which use the approach to migrate selected crosscutting concerns from medium-sized Java programs ( in the range of 10K to 40K lines of code) into equivalent programs in AspectJ. The case study results show the feasibility of the migration and indicate the importance of the enabling transformations as a preprocessing step.", "paper_title": "Tool-supported refactoring of existing object-oriented code into aspects", "paper_id": "WOS:000240774300006"}