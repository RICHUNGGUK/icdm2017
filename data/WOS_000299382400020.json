{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "iteration-level_loop_parallelism"}, {"score": 0.004678785623021003, "phrase": "main_source"}, {"score": 0.004417848254181138, "phrase": "open_problem"}, {"score": 0.004317576641196539, "phrase": "maximal_number"}, {"score": 0.0040767015025213625, "phrase": "chip_multiprocessors"}, {"score": 0.0038271712887391015, "phrase": "parallelism-inhibiting_dependences"}, {"score": 0.003592859432554987, "phrase": "dependence_migration"}, {"score": 0.003471135453226184, "phrase": "classic_loop_parallelization"}, {"score": 0.0034118234596993836, "phrase": "graph_optimization_problem"}, {"score": 0.003277327351139926, "phrase": "retiming_values"}, {"score": 0.003166259444961177, "phrase": "minimum_nonzero_edge_weight"}, {"score": 0.0027424619603260837, "phrase": "optimal_code"}, {"score": 0.0026191799769765063, "phrase": "retimed_graph"}, {"score": 0.0025158514649823724, "phrase": "first_phase"}, {"score": 0.002321234686549485, "phrase": "representative_nonoptimal_algorithms"}, {"score": 0.0022041312401435346, "phrase": "prior_work"}, {"score": 0.0021049977753042253, "phrase": "tgff."}], "paper_keywords": ["Loop parallelization", " loop transformation", " retiming", " data dependence graph", " iteration-level parallelism"], "paper_abstract": "Loops are the main source of parallelism in many applications. This paper solves the open problem of extracting the maximal number of iterations from a loop to run parallel on chip multiprocessors. Our algorithm solves it optimally by migrating the weights of parallelism-inhibiting dependences on dependence cycles in two phases. First, we model dependence migration with retiming and formulate this classic loop parallelization into a graph optimization problem, i.e., one of finding retiming values for its nodes so that the minimum nonzero edge weight in the graph is maximized. We present our algorithm in three stages with each being built incrementally on the preceding one. Second, the optimal code for a loop is generated from the retimed graph of the loop found in the first phase. We demonstrate the effectiveness of our optimal algorithm by comparing with a number of representative nonoptimal algorithms using a set of benchmarks frequently used in prior work and a set of graphs generated by TGFF.", "paper_title": "Optimally Maximizing Iteration-Level Loop Parallelism", "paper_id": "WOS:000299382400020"}