{"auto_keywords": [{"score": 0.04292590502877974, "phrase": "run_time"}, {"score": 0.04144193814003033, "phrase": "distributed_simulations"}, {"score": 0.03986629341595467, "phrase": "shared_resources"}, {"score": 0.03848384552479913, "phrase": "distributed_applications"}, {"score": 0.036625523625658414, "phrase": "dynamic_changes"}, {"score": 0.02980736214951161, "phrase": "proposed_balancing_system"}, {"score": 0.00481495049065317, "phrase": "computation_load"}, {"score": 0.004779876533667754, "phrase": "hla-based_simulations"}, {"score": 0.004745056850725867, "phrase": "large-scale_distributed_systems"}, {"score": 0.004625164125506718, "phrase": "communication_load"}, {"score": 0.004541377162789232, "phrase": "execution_stability"}, {"score": 0.004378309349451268, "phrase": "large-scale_environments"}, {"score": 0.003981106369547929, "phrase": "dynamic_load_changes"}, {"score": 0.0037273513742154237, "phrase": "dynamic_execution_characteristics"}, {"score": 0.0036198068824262464, "phrase": "computational_load"}, {"score": 0.003541182515693916, "phrase": "simulation_entity_change"}, {"score": 0.0034264254358037653, "phrase": "irregular_load"}, {"score": 0.003401431460601017, "phrase": "communication_distribution"}, {"score": 0.0032671775301001483, "phrase": "static_partitioning"}, {"score": 0.0031961879138783012, "phrase": "deterministic_applications"}, {"score": 0.0030476078950483158, "phrase": "external_background_processes"}, {"score": 0.002948798472453167, "phrase": "communication_and_computational_load"}, {"score": 0.00284275228258112, "phrase": "scalable_hierarchical_architecture"}, {"score": 0.0027911639820564897, "phrase": "local_and_cluster_monitoring_mechanisms"}, {"score": 0.002730488910300527, "phrase": "distributed_load_changes"}, {"score": 0.002680932410366204, "phrase": "repartitioning_policies"}, {"score": 0.002565626044684815, "phrase": "migration_technique"}, {"score": 0.002482404507958289, "phrase": "reliable_and_low-latency_load_transfers"}, {"score": 0.0023669270875629205, "phrase": "distributed_simulations'_performance"}, {"score": 0.00234104879370883, "phrase": "communication_latencies"}, {"score": 0.002265095354846931, "phrase": "comparative_analyses"}, {"score": 0.002175594509651082, "phrase": "proposed_balancing_scheme"}, {"score": 0.0021518035978153878, "phrase": "large-scale_distributed_simulations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Parallel simulations", " High Level Architecture", " Dynamic load balancing", " Performance"], "paper_abstract": "Dynamic balancing of computation and communication load is vital for the execution stability and performance of distributed, parallel simulations deployed on the shared, unreliable resources of large-scale environments. High Level Architecture (HLA) based simulations can experience a decrease in performance due to imbalances that are produced initially and/or during run time. These imbalances are generated by the dynamic load changes of distributed simulations or by unknown, non-managed background processes resulting from the non-dedication of shared resources. Due to the dynamic execution characteristics of elements that compose distributed applications, the computational load and interaction dependencies of each simulation entity change during run time. These dynamic changes lead to an irregular load and communication distribution, which increases overhead of resources and latencies. A static partitioning of load is limited to deterministic applications and is incapable of predicting the dynamic changes caused by distributed applications or by external background processes. Therefore, a scheme for balancing the communication and computational load during the execution of distributed simulations is devised in a scalable hierarchical architecture. The proposed balancing system employs local and cluster monitoring mechanisms in order to observe the distributed load changes and identify imbalances, repartitioning policies to determine a distribution of load and minimize imbalances. A migration technique is also employed by this proposed balancing system to perform reliable and low-latency load transfers. Such a system successfully improves the use of shared resources and increases distributed simulations' performance by minimizing communication latencies and partitioning the load evenly. Experiments and comparative analyses were conducted in order to identify the gains that the proposed balancing scheme provides to large-scale distributed simulations. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Dynamic balancing of communication and computation load for HLA-based simulations on large-scale distributed systems", "paper_id": "WOS:000284984200004"}