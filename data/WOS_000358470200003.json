{"auto_keywords": [{"score": 0.04939619318571274, "phrase": "protected_module_architectures"}, {"score": 0.00481495049065317, "phrase": "abstract_trace_semantics"}, {"score": 0.004513450434595191, "phrase": "isolation_mechanisms"}, {"score": 0.004449045430179066, "phrase": "emerging_processors"}, {"score": 0.004354149483556514, "phrase": "security_building_blocks"}, {"score": 0.0042920078348374375, "phrase": "modern_software_systems"}, {"score": 0.004140490129683107, "phrase": "building_blocks"}, {"score": 0.004023120753104693, "phrase": "elaborate_assembly_code"}, {"score": 0.00374399358035391, "phrase": "loose_structure"}, {"score": 0.00333697550984782, "phrase": "well-structured_semantics"}, {"score": 0.0029740732099993706, "phrase": "assembly_language"}, {"score": 0.0029105504820105318, "phrase": "pma."}, {"score": 0.0028689475587958917, "phrase": "trace_semantics"}, {"score": 0.0027675275077806744, "phrase": "protected_assembly_code"}, {"score": 0.002727967804120323, "phrase": "simple_abstractions"}, {"score": 0.0026505322540093783, "phrase": "low-level_details"}, {"score": 0.0025752890978323873, "phrase": "maximum_degree"}, {"score": 0.0023451553255837317, "phrase": "protected_code"}, {"score": 0.0022298571016688335, "phrase": "secure_compiler"}, {"score": 0.0021979660485319523, "phrase": "pma-enhanced_assembly_language"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Fully abstract semantics", " Trace semantics", " Untyped assembly language", " Protected modules architectures", " Formal languages"], "paper_abstract": "Protected module architectures (PMAs) are isolation mechanisms of emerging processors that provide security building blocks for modern software systems. Reasoning about these building blocks means reasoning about elaborate assembly code, which can be very complex due to the loose structure of the code. One way to overcome this complexity is providing the code with a well-structured semantics. This paper presents one such semantics, namely a fully abstract trace semantics, for an assembly language enhanced with PMA. The trace semantics represents the behaviour of protected assembly code with simple abstractions, unburdened by low-level details, at the maximum degree of precision. Furthermore, it captures the capabilities of attackers to protected code and simplifies the formulation of a secure compiler targeting PMA-enhanced assembly language. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Fully abstract trace semantics for protected module architectures", "paper_id": "WOS:000358470200003"}