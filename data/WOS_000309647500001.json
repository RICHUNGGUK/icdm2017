{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "parallelization_techniques"}, {"score": 0.008621156259839134, "phrase": "openmp_programming_model"}, {"score": 0.004664352260912174, "phrase": "embedded_multi-core_processor"}, {"score": 0.004559661374976129, "phrase": "semiconductor_technologies"}, {"score": 0.004377077848734575, "phrase": "small_device_package"}, {"score": 0.004317848984770719, "phrase": "parallel_execution_capability"}, {"score": 0.004015182362035361, "phrase": "numerous_research_activities"}, {"score": 0.0037848978618663684, "phrase": "sequential_applications"}, {"score": 0.0036167509502276294, "phrase": "pc_environment"}, {"score": 0.00334780964309978, "phrase": "embedded_multi-core_architecture"}, {"score": 0.003141364320497748, "phrase": "arm_mpcore"}, {"score": 0.0030017207229983385, "phrase": "analytical_model"}, {"score": 0.0029610472910087176, "phrase": "performance_estimation"}, {"score": 0.0028293966058473476, "phrase": "model_accuracy"}, {"score": 0.0025833500717948343, "phrase": "embedded_multi-core_platform"}, {"score": 0.002423931101340771, "phrase": "parallelization_technique"}, {"score": 0.002401972657236926, "phrase": "data-level_parallelism"}, {"score": 0.0023479408542211875, "phrase": "task-level_parallelism"}, {"score": 0.0022231606165229235, "phrase": "processor_cores"}, {"score": 0.002193013499219711, "phrase": "critical_parameter"}, {"score": 0.0021632743048552536, "phrase": "better_scalability"}], "paper_keywords": ["Parallel programming", " Multimedia codec", " Multi-core processor", " Embedded system", " Design exploration"], "paper_abstract": "Recent advances in semiconductor technologies make it possible to integrate many processor cores in a small device package. The parallel execution capability of such multi-core processors can be exploited to enhance the performance of many traditional sequential applications. There have been numerous research activities to develop parallelization techniques using the OpenMp programming model, in order to speed up sequential applications such as the H.264/AVC codec, but mostly in the PC environment. Therefore, it is difficult to understand which parallelization technique fits well with the H.264/AVC encoder on an embedded multi-core architecture. In this paper, we present parallelization techniques applicable to the H.264/AVC encoder on ARM MPCore using the OpenMP programming model. Further, we propose an analytical model for the performance estimation of the H.264/AVC encoder, and we then verify the model accuracy by performing simulations using hardware/software co-verification tool. Our experimental results show that the parallelization techniques proposed in this paper for the embedded multi-core platform improve the encoder performance by up to 2.36 times, and that the parallelization technique exploiting data-level parallelism outperforms the one using task-level parallelism by 41%. It is also observed that balancing loads among processor cores is a critical parameter in achieving better scalability in the encoder. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Exploring parallelization techniques based on OpenMP in H.264/AVC encoder for embedded multi-core processor", "paper_id": "WOS:000309647500001"}