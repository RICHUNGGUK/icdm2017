{"auto_keywords": [{"score": 0.04222917265668407, "phrase": "j._acm"}, {"score": 0.035780426708331675, "phrase": "proc"}, {"score": 0.015072918884076683, "phrase": "base-compressor_c"}, {"score": 0.014223585224404315, "phrase": "discrete_algorithms"}, {"score": 0.01326115752396047, "phrase": "ferragina_et_al"}, {"score": 0.012537720020514028, "phrase": "makinen"}, {"score": 0.012487741343075792, "phrase": "navarro"}, {"score": 0.012313567945323452, "phrase": "string_processing"}, {"score": 0.011478937782886986, "phrase": "buchsbaum"}, {"score": 0.004699639069624698, "phrase": "input_string_t"}, {"score": 0.004587076469307204, "phrase": "compressed_output"}, {"score": 0.004504419319620337, "phrase": "entire_t"}, {"score": 0.004423244997757109, "phrase": "buchsbaum_et_al"}, {"score": 0.004163038158640067, "phrase": "table_compression"}, {"score": 0.003918078301513502, "phrase": "computer_science"}, {"score": 0.0036209731479122176, "phrase": "poor_solutions"}, {"score": 0.0035198875061709595, "phrase": "dynamic_programming"}, {"score": 0.0034216141517309276, "phrase": "giancarlo"}, {"score": 0.0034078008781061675, "phrase": "sciortino"}, {"score": 0.0033598872463191294, "phrase": "combinatorial_pattern_matching"}, {"score": 0.0029637812196108664, "phrase": "specific_scenarios"}, {"score": 0.0029339437876213193, "phrase": "burrows-wheeler_transform"}, {"score": 0.0029161852846711802, "phrase": "e.g._ferragina_et_al"}, {"score": 0.0027222599656085574, "phrase": "compression_performance"}, {"score": 0.002614250692090107, "phrase": "optimal_solution"}, {"score": 0.002515603877657916, "phrase": "first_algorithm"}, {"score": 0.002122120636497508, "phrase": "bwt-based_compressors"}, {"score": 0.0021049977753042253, "phrase": "compression_booster"}], "paper_keywords": ["Data compression", " Dynamic programming", " Compression boosting", " Table compression", " Empirical entropy", " Burrows-Wheeler transform", " Arithmetic and Huffman coding"], "paper_abstract": "In this paper we investigate the problem of partitioning an input string T in such a way that compressing individually its parts via a base-compressor C gets a compressed output that is shorter than applying C over the entire T at once. This problem was introduced in Buchsbaum et al. (Proc. of 11th ACM-SIAM Symposium on Discrete Algorithms, pp. 175-184, 2000; J. ACM 50(6):825-851, 2003) in the context of table compression, and then further elaborated and extended to strings and trees by Ferragina et al. (J. ACM 52:688-713, 2005; Proc. of 46th IEEE Symposium on Foundations of Computer Science, pp. 184-193, 2005) and Makinen and Navarro (Proc. of 14th Symposium on String Processing and Information Retrieval, pp. 229-241, 2007). Unfortunately, the literature offers poor solutions: namely, we know either a cubic-time algorithm for computing the optimal partition based on dynamic programming (Buchsbaum et al. in J. ACM 50(6):825-851, 2003; Giancarlo and Sciortino in Proc. of 14th Symposium on Combinatorial Pattern Matching, pp. 129-143, 2003), or few heuristics that do not guarantee any bounds on the efficacy of their computed partition (Buchsbaum et al. in Proc. of 11th ACM-SIAM Symposium on Discrete Algorithms, pp. 175-184, 2000; J. ACM 50(6):825-851, 2003), or algorithms that are efficient but work in some specific scenarios (such as the Burrows-Wheeler Transform, see e.g. Ferragina et al. in J. ACM 52:688-713, 2005; Makinen and Navarro in Proc. of 14th Symposium on String Processing and Information Retrieval, pp. 229-241, 2007) and achieve compression performance that might be worse than the optimal-partitioning by a Omega(log n/log log n) factor. Therefore, computing efficiently the optimal solution is still open (Buchsbaum and Giancarlo in Encyclopedia of Algorithms, pp. 939-942, 2008). In this paper we provide the first algorithm which computes in O(nlog (1+epsilon) n) time and O(n) space, a partition of T whose compressed output is guaranteed to be no more than (1+epsilon)-worse the optimal one, where epsilon may be any positive constant fixed in advance. This result holds for any base-compressor C whose compression performance can be bounded in terms of the zero-th or the k-th order empirical entropy of the text T. We will also discuss extensions of our results to BWT-based compressors and to the compression booster of Ferragina et al. (J. ACM 52:688-713, 2005).", "paper_title": "On Optimally Partitioning a Text to Improve Its Compression", "paper_id": "WOS:000291481900004"}