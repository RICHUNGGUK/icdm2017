{"auto_keywords": [{"score": 0.04621662015442936, "phrase": "chemical_reactions"}, {"score": 0.00481495049065317, "phrase": "chemical_programming"}, {"score": 0.004662036750452837, "phrase": "programming_model"}, {"score": 0.0041773934798743405, "phrase": "chemical_solution"}, {"score": 0.00306334226516593, "phrase": "rewrite_rules"}, {"score": 0.002985130390111069, "phrase": "first-class_citizens"}, {"score": 0.0027444334639134217, "phrase": "chemical_model"}, {"score": 0.0025892330566358503, "phrase": "higher-order_chemical_programming"}, {"score": 0.002380381895973937, "phrase": "expressive_patterns"}, {"score": 0.002304606411453748, "phrase": "higher-order_chemical_programming_language"}, {"score": 0.0021049977753042253, "phrase": "infinite_and_negative_multiplicities"}], "paper_keywords": [""], "paper_abstract": "Gamma is a programming model in which computation can be seen as chemical reactions between data represented as molecules floating in a chemical solution. This model can be formalised as associative, commutative, conditional rewritings of multisets where rewrite rules and multisets represent chemical reactions and solutions, respectively. In this article we generalise the notion of multiset used by Gamma and present applications through various programming examples. First, multisets are generalised to include rewrite rules, which become first-class citizens. This extension is formalised by the T-calculus, which is a chemical model that summarises in a few rules the essence of higher-order chemical programming. By extending the gamma-calculus with constants, operators, types and expressive patterns, we build a higher-order chemical programming language called HOCL. Finally, multisets are further generalised by allowing elements to have infinite and negative multiplicities. Semantics, implementation and applications of this extension are considered.", "paper_title": "Generalised multisets for chemical programming", "paper_id": "WOS:000239940300002"}