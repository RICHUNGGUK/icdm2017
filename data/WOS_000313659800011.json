{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "constraint_graph"}, {"score": 0.0047732596509542135, "phrase": "efficient_points"}, {"score": 0.004729668045938467, "phrase": "analysis"}, {"score": 0.004550300345169981, "phrase": "key_compiler_analysis"}, {"score": 0.0041170581247889654, "phrase": "pointer_variables"}, {"score": 0.003644714340300824, "phrase": "efficient_propagation"}, {"score": 0.0035199624440843892, "phrase": "cyclic_components"}, {"score": 0.0034291991359158827, "phrase": "topological_order"}, {"score": 0.0033553473725594003, "phrase": "careful_study"}, {"score": 0.00326881479036966, "phrase": "new_inclusion-based_flow-insensitive_context-sensitive_points-to_analysis_algorithm"}, {"score": 0.0030092017034068666, "phrase": "dominant_pointers"}, {"score": 0.0029701328654852246, "phrase": "significantly_more_opportunities"}, {"score": 0.0027822459052173113, "phrase": "hitherto_unexplored_form"}, {"score": 0.0026986685585382347, "phrase": "new_context-sensitive_flow-insensitive_points-to_analysis_algorithm"}, {"score": 0.002516917671182532, "phrase": "large_suite"}, {"score": 0.0024412911465483225, "phrase": "five_large_open_source_programs"}, {"score": 0.0023168823213024856, "phrase": "bdd-based_lazy_cycle_detection"}, {"score": 0.002266931093770838, "phrase": "deep_propagation"}, {"score": 0.0021892345747666977, "phrase": "dominator-based_pointer-equivalence"}, {"score": 0.0021049977753042253, "phrase": "analysis_efficiency"}], "paper_keywords": ["Algorithms", " Languages", " constraint graph", " dominators", " points-to analysis", " context-sensitivity"], "paper_abstract": "Points-to analysis is a key compiler analysis. Several memory related optimizations use points-to information to improve their effectiveness. Points-to analysis is performed by building a constraint graph of pointer variables and dynamically updating it to propagate more and more points-to information across its subset edges. So far, the structure of the constraint graph has been only trivially exploited for efficient propagation of information, e.g., in identifying cyclic components or to propagate information in topological order. We perform a careful study of its structure and propose a new inclusion-based flow-insensitive context-sensitive points-to analysis algorithm based on the notion of dominant pointers. We also propose a new kind of pointer-equivalence based on dominant pointers which provides significantly more opportunities for reducing the number of pointers tracked during the analysis. Based on this hitherto unexplored form of pointer-equivalence, we develop a new context-sensitive flow-insensitive points-to analysis algorithm which uses incremental dominator update to efficiently compute points-to information. Using a large suite of programs consisting of SPEC 2000 benchmarks and five large open source programs we show that our points-to analysis is 88% faster than BDD-based Lazy Cycle Detection and 2x faster than Deep Propagation. We argue that our approach of detecting dominator-based pointer-equivalence is a key to improve points-to analysis efficiency.", "paper_title": "Exploiting the Structure of the Constraint Graph for Efficient Points-to Analysis", "paper_id": "WOS:000313659800011"}