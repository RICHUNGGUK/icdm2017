{"auto_keywords": [{"score": 0.03821066921635996, "phrase": "user_interaction"}, {"score": 0.00481495049065317, "phrase": "multiparty_computation"}, {"score": 0.004748740786945996, "phrase": "secure_multiparty_computation"}, {"score": 0.004134508282135594, "phrase": "untrusted_server"}, {"score": 0.0037696519417841287, "phrase": "existing_solutions"}, {"score": 0.0032665093519968083, "phrase": "novel_technique"}, {"score": 0.0032215231177304513, "phrase": "additively_homomorphic_encryption"}, {"score": 0.002843450389745497, "phrase": "dynamically_chosen_function"}, {"score": 0.0027784560880013886, "phrase": "different_public_keys"}, {"score": 0.0025683581446365165, "phrase": "cryptographic_protocol"}, {"score": 0.0024409345168575833, "phrase": "semi-honest_model"}, {"score": 0.002396179086883187, "phrase": "application-tailored_variants"}, {"score": 0.0021843879253500894, "phrase": "face_recognition"}, {"score": 0.002164264600379492, "phrase": "private_smart_metering"}, {"score": 0.0021049977753042253, "phrase": "proof-of-concept_implementation"}], "paper_keywords": ["Information security", " homomorphic encryption", " secure multiparty computation", " secure outsourcing"], "paper_abstract": "Secure multiparty computation enables a set of users to evaluate certain functionalities on their respective inputs while keeping these inputs encrypted throughout the computation. In many applications, however, outsourcing these computations to an untrusted server is desirable, so that the server can perform the computation on behalf of the users. Unfortunately, existing solutions are either inefficient, rely heavily on user interaction, or require the inputs to be encrypted under the same public key-drawbacks making the employment in practice very limited. We propose a novel technique based on additively homomorphic encryption that avoids all these drawbacks. This method is efficient, requires no user interaction whatsoever (except for data upload and download), and allows evaluating any dynamically chosen function on inputs encrypted under different public keys. Our solution assumes the existence of two non-colluding but untrusted servers that jointly perform the computation by means of a cryptographic protocol. This protocol is proven to be secure in the semi-honest model. By developing application-tailored variants of our approach, we demonstrate its versatility and apply it in two real-world scenarios from different domains, privacy-preserving face recognition and private smart metering. We also give a proof-of-concept implementation to highlight its feasibility.", "paper_title": "Efficiently Outsourcing Multiparty Computation Under Multiple Keys", "paper_id": "WOS:000327345700013"}