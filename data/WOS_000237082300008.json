{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data-flow_analysis"}, {"score": 0.004190019394361629, "phrase": "library-based_program_development"}, {"score": 0.0035899674590142653, "phrase": "intraprocedural_data-flow_analysis"}, {"score": 0.0032972747743006603, "phrase": "soot_program_analysis_platform"}, {"score": 0.00317221667574882, "phrase": "graph_structures"}, {"score": 0.003123527559542239, "phrase": "java_classes"}, {"score": 0.003075583447856341, "phrase": "data_flow_analyses"}, {"score": 0.002891032998395276, "phrase": "modal_p-calculus"}, {"score": 0.0025347150832077175, "phrase": "flow_graph"}, {"score": 0.002476546030310661, "phrase": "tool_demonstration"}, {"score": 0.002345944657572499, "phrase": "involved_components"}, {"score": 0.0022394839933089074, "phrase": "fully_integrated_implementation"}, {"score": 0.0021049977753042253, "phrase": "software_development_environment"}], "paper_keywords": [""], "paper_abstract": "This paper describes how the jABC, a generic framework for library-based program development, and two of its plugins - the Model Checker and a flow graph converter - form a framework for intraprocedural data-flow analysis via model checking. Based on functionalities provided by the Soot program analysis platform, the converter generates graph structures from Java classes. Data flow analyses are then expressed as formulas in the modal p-calculus. Executing the analysis is carried out by checking the validity of the formulas on the flow graph. The tool demonstration will illustrate the interplay of the involved components, which elegantly provides a fully integrated implementation of Data-Flow Analysis as Model Checking in a software development environment.", "paper_title": "Data-flow analysis as model checking within the jABC", "paper_id": "WOS:000237082300008"}