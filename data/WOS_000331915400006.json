{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "np"}, {"score": 0.004224130367280183, "phrase": "new_string"}, {"score": 0.003386301445203068, "phrase": "known_polynomial_time_dynamic_programming_algorithm"}, {"score": 0.002827740707723551, "phrase": "open_question"}, {"score": 0.0027141975147496264, "phrase": "polynomial_time_algorithm"}, {"score": 0.0022111720236287547, "phrase": "many-one_reduction"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Square shuffle", " NP-completeness"], "paper_abstract": "A shuffle of two strings is formed by interleaving the characters into a new string, keeping the characters of each string in order. A string is a square if it is a shuffle of two identical strings. There is a known polynomial time dynamic programming algorithm to determine if a given string z is the shuffle of two given strings x, y; however, it has been an open question whether there is a polynomial time algorithm to determine if a given string z is a square. We resolve this by proving that this problem is NP-complete via a many-one reduction from 3-PARTITION. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Unshuffling a square is NP-hard", "paper_id": "WOS:000331915400006"}