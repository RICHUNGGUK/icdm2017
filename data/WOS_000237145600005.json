{"auto_keywords": [{"score": 0.037269188141693534, "phrase": "multiple-choice_processes"}, {"score": 0.03548194064995613, "phrase": "maximum_load"}, {"score": 0.012259114615704938, "phrase": "heavily_loaded_case"}, {"score": 0.011271448159014165, "phrase": "single-choice_process"}, {"score": 0.010657136121626696, "phrase": "high_probability"}, {"score": 0.00481495049065317, "phrase": "bins_processes"}, {"score": 0.004694295735569168, "phrase": "multiple-choice_paradigm"}, {"score": 0.004641641877674012, "phrase": "classical_single-choice_variant"}, {"score": 0.0044493728074453, "phrase": "multiple-choice_process"}, {"score": 0.004134703797937116, "phrase": "load_balance"}, {"score": 0.0040998527410276995, "phrase": "formal_analyses"}, {"score": 0.0037776850052383014, "phrase": "first_tight_analysis"}, {"score": 0.003570320280680356, "phrase": "best_previously_known_results"}, {"score": 0.0033934090791564856, "phrase": "upper_bound"}, {"score": 0.003117761489610736, "phrase": "single-choice_variant"}, {"score": 0.0030740412863259226, "phrase": "\"short_memory"}, {"score": 0.0030395056129324575, "phrase": "great_consequence"}, {"score": 0.002929913956904329, "phrase": "optimal_allocation"}, {"score": 0.002572822239596127, "phrase": "azar_et_al"}, {"score": 0.0024870343996757907, "phrase": "vocking"}, {"score": 0.002278393368372069, "phrase": "additive_constant"}, {"score": 0.0021776365628787065, "phrase": "majorization_result"}, {"score": 0.0021531499016013704, "phrase": "always-go-left_scheme"}, {"score": 0.0021049977753042253, "phrase": "greedy_scheme"}], "paper_keywords": ["occupancy problems", " balls-into-bins processes", " randomized resource allocation"], "paper_abstract": "We investigate balls-into-bins processes allocating m balls into n bins based on the multiple-choice paradigm. In the classical single-choice variant each ball is placed into a bin selected uniformly at random. In a multiple-choice process each ball can be placed into one out of d >= 2 randomly selected bins. It is known that in many scenarios having more than one choice for each ball can improve the load balance significantly. Formal analyses of this phenomenon prior to this work considered mostly the lightly loaded case, that is, when m approximate to n. In this paper we present the first tight analysis in the heavily loaded case, that is, when m >> n rather than m approximate to n. The best previously known results for the multiple-choice processes in the heavily loaded case were obtained using majorization by the single-choice process. This yields an upper bound of the maximum load of bins of m/n + O(root m ln n/n) with high probability. We show, however, that the multiple-choice processes are fundamentally different from the single-choice variant in that they have \"short memory.\" The great consequence of this property is that the deviation of the multiple-choice processes from the optimal allocation ( that is, the allocation in which each bin has either [m/n] or [m/n] balls) does not increase with the number of balls as in the case of the single-choice process. In particular, we investigate the allocation obtained by two different multiple-choice allocation schemes, the greedy scheme due to Azar et al. and the always-go-left scheme due to Vocking. We show that these schemes result in a maximum load of only m/n + O( ln ln n) with high probability. All our detailed bounds on the maximum load are tight up to an additive constant. Furthermore, we investigate the two multiple-choice algorithms in a comparative study. We present a majorization result showing that the always-go-left scheme obtains a better load balancing than the greedy scheme for any choice of n, m, and d.", "paper_title": "Balanced allocations: The heavily loaded case", "paper_id": "WOS:000237145600005"}