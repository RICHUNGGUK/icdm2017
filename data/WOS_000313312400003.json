{"auto_keywords": [{"score": 0.04700263522764766, "phrase": "clcs"}, {"score": 0.029494268471696488, "phrase": "sigma"}, {"score": 0.00481495049065317, "phrase": "longest_common_subsequence_problem"}, {"score": 0.004777917315737992, "phrase": "sequential_substring_constraints"}, {"score": 0.0043718794256931435, "phrase": "sequence_inclusion"}, {"score": 0.004304856672196293, "phrase": "string_inclusion"}, {"score": 0.004109865377936045, "phrase": "ssclcs"}, {"score": 0.003804234575698981, "phrase": "alphabet_sigma"}, {"score": 0.003760385494931853, "phrase": "constraint_sequence"}, {"score": 0.003702702337768558, "phrase": "ordered_strings"}, {"score": 0.0034941337957136013, "phrase": "total_length_r."}, {"score": 0.0033877275374263314, "phrase": "longest_common_subsequence_d"}, {"score": 0.002624533657819515, "phrase": "sigma_vertical_bar"}, {"score": 0.0025347150832077175, "phrase": "special_case"}, {"score": 0.0021214429852030045, "phrase": "chen"}, {"score": 0.0021050007526420968, "phrase": "chao"}], "paper_keywords": ["Algorithm design", " Bioinformatics", " Longest common subsequence", " Constrained LCS", " Sequential substring"], "paper_abstract": "In this paper, we generalize the inclusion constrained longest common subsequence (CLCS) problem to the hybrid CLCS problem which is the combination of the sequence inclusion CLCS and the string inclusion CLCS, called the sequential substring constrained longest common subsequence (SSCLCS) problem. In the SSCLCS problem, we are given two strings A and B of lengths m and n, respectively, formed by alphabet Sigma and a constraint sequence C formed by ordered strings (C-1, C-2, C-3, ... , C-l) with total length r. The problem is that of finding the longest common subsequence D of A and B containing C-1, C-2, C-3, ... , C-l as substrings and with the order of the C's retained. This problem has two variants, depending on whether the strings in C cannot overlap or may overlap. We propose algorithms with 0(mnl + (m + n)(vertical bar Sigma vertical bar + r)) and 0(mnr + (m + n)vertical bar Sigma vertical bar) time for the two variants. For the special case with one or two constraints, our algorithm runs in 0(mn + (m + n)(vertical bar Sigma vertical bar + r)) or 0(mnr + (m + n)vertical bar Sigma vertical bar) time, respectively-an order faster than the algorithm proposed by Chen and Chao. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Efficient algorithms for the longest common subsequence problem with sequential substring constraints", "paper_id": "WOS:000313312400003"}