{"auto_keywords": [{"score": 0.03918347337434731, "phrase": "current_label"}, {"score": 0.01571990123565291, "phrase": "haskell"}, {"score": 0.012838470467882187, "phrase": "lio"}, {"score": 0.003991932110277654, "phrase": "labeled_io_monad"}, {"score": 0.003634587156159668, "phrase": "restricted_access"}, {"score": 0.0035731269727067496, "phrase": "io_functionality"}, {"score": 0.002742787059497186, "phrase": "current_clearance"}, {"score": 0.0026058621464926826, "phrase": "discretionary_access_control"}, {"score": 0.0022731540640627307, "phrase": "different_labels"}, {"score": 0.0021968238865548812, "phrase": "precise_semantics"}, {"score": 0.0021049977753042253, "phrase": "integrity_properties"}], "paper_keywords": ["Security", " Languages", " Design", " Information flow control", " Monad", " Library"], "paper_abstract": "We describe a new, dynamic, floating-label approach to language-based information flow control, and present an implementation in Haskell. A labeled IO monad, LIO, keeps track of a current label and permits restricted access to IO functionality, while ensuring that the current label exceeds the labels of all data observed and restricts what can be modified. Unlike other language-based work, LIO also bounds the current label with a current clearance that provides a form of discretionary access control. In addition, programs may encapsulate and pass around the results of computations with different labels. We give precise semantics and prove confidentiality and integrity properties of the system.", "paper_title": "Flexible Dynamic Information Flow Control in Haskell", "paper_id": "WOS:000299326600009"}