{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "frequent_itemsets"}, {"score": 0.004760765880314089, "phrase": "children-parent_equivalence_pruning"}, {"score": 0.004627944735913613, "phrase": "novel_data_structure"}, {"score": 0.003971938976270902, "phrase": "high-performance_algorithm"}, {"score": 0.0036073064072936626, "phrase": "set-enumeration_search_tree"}, {"score": 0.003467040410632942, "phrase": "efficient_pruning_strategy"}, {"score": 0.0034279721355412285, "phrase": "children-parent"}, {"score": 0.0032946562900625187, "phrase": "search_space"}, {"score": 0.0032026066791743866, "phrase": "extensive_experiments"}, {"score": 0.002908394246754633, "phrase": "prepost"}, {"score": 0.002875607606715645, "phrase": "fin"}, {"score": 0.0028271061056520425, "phrase": "fp-growth"}, {"score": 0.002763709443278514, "phrase": "six_various_real_datasets"}, {"score": 0.0027170943110836425, "phrase": "experimental_results"}, {"score": 0.0024257447861185813, "phrase": "good_performance"}, {"score": 0.0023713273141757326, "phrase": "memory_consumption"}, {"score": 0.0021655683497137234, "phrase": "fin."}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Data mining", " Frequent itemset mining", " N-lists", " Pruning", " Algorithm"], "paper_abstract": "N-list is a novel data structure proposed in recent years. It has been proven to be very efficient for mining frequent itemsets. In this paper, we present PrePost(+), a high-performance algorithm for mining frequent itemsets. It employs N-list to represent itemsets and directly discovers frequent itemsets using a set-enumeration search tree. Especially, it employs an efficient pruning strategy named Children-Parent Equivalence pruning to greatly reduce the search space. We have conducted extensive experiments to evaluate PrePost(+) against three state-of-the-art algorithms, which are PrePost, FIN, and FP-growth*, on six various real datasets. The experimental results show that PrePost(+) is always the fastest one on all datasets. Moreover, PrePost(+) also demonstrates good performance in terms of memory consumption since it use only a litter more memory than FP-growth* and less memory than PrePost and FIN. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "PrePost(+): An efficient N-lists-based algorithm for mining frequent itemsets via Children-Parent Equivalence pruning", "paper_id": "WOS:000355036900003"}