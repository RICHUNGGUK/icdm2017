{"auto_keywords": [{"score": 0.03218820616066921, "phrase": "computable_functions"}, {"score": 0.010612387000973441, "phrase": "complex_systems"}, {"score": 0.004723847090183984, "phrase": "dataflow_machines"}, {"score": 0.004612376827433774, "phrase": "unified_functional_formalism"}, {"score": 0.004252602474733162, "phrase": "heterogeneous_components"}, {"score": 0.004132411680987228, "phrase": "physical_devices"}, {"score": 0.004034841146538891, "phrase": "non-standard_analysis"}, {"score": 0.003920780681351006, "phrase": "continuous_time"}, {"score": 0.00386496062825374, "phrase": "discrete_way"}, {"score": 0.0037556843869894566, "phrase": "generalized_turing_machines"}, {"score": 0.0037199473428123175, "phrase": "temporized_input"}, {"score": 0.0036845490951857617, "phrase": "internal_and_output_mechanisms"}, {"score": 0.0035462807506718578, "phrase": "transfer_functions"}, {"score": 0.00349577373145384, "phrase": "transfer_function"}, {"score": 0.003161740194257218, "phrase": "new_class"}, {"score": 0.0028053237950173508, "phrase": "implementable_transfer_functions"}, {"score": 0.0025861368747446324, "phrase": "analytical_functions"}, {"score": 0.002512926336312949, "phrase": "usual_way"}, {"score": 0.0022725931637071852, "phrase": "dynamical_and_hamiltonian_systems"}, {"score": 0.0021049977753042253, "phrase": "physical_systems"}], "paper_keywords": ["Complex system", " Hybrid system", " Non-standard analysis", " Physical system", " Software system", " System modelling", " Temporized systems", " Time scale", " Turing machine"], "paper_abstract": "We develop a unified functional formalism for modelling complex systems, that is to say systems that are composed of a number of heterogeneous components, including typically software and physical devices. Our approach relies on non-standard analysis that allows us to model continuous time in a discrete way. Systems are defined as generalized Turing machines with temporized input, internal and output mechanisms. Behaviors of systems are represented by transfer functions. A transfer function is said to be implementable if it is associated with a system. This notion leads us to define a new class which is natural in our framework-of computable functions on (usual) real numbers. We show that our definitions are robust: on one hand, the class of implementable transfer functions is closed under composition; on the other hand, the class of computable functions in our meaning includes analytical functions whose coefficients are computable in the usual way, and is closed under addition, multiplication, differentiation and integration. Our class of computable functions also includes solutions of dynamical and Hamiltonian systems defined by computable functions. Hence, our notion of system appears to take suitably into account physical systems.", "paper_title": "Modelling of Complex Systems: Systems as Dataflow Machines", "paper_id": "WOS:000265239300004"}