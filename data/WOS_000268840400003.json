{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "prior_code_changes"}, {"score": 0.048171695241769216, "phrase": "software_system"}, {"score": 0.00471811808206897, "phrase": "source_code"}, {"score": 0.0045302298105691615, "phrase": "constant_change"}, {"score": 0.0040373708328770306, "phrase": "sudden_manifestation"}, {"score": 0.003929391999210588, "phrase": "unchanged_parts"}, {"score": 0.003525493807130663, "phrase": "pre-processing_stage"}, {"score": 0.0031845067058084583, "phrase": "particular_period"}, {"score": 0.002724428781940696, "phrase": "dependence_graph"}, {"score": 0.0025456716198597627, "phrase": "change_impact_graphs"}, {"score": 0.002427549902743566, "phrase": "case_study"}, {"score": 0.0023625233416109917, "phrase": "apache_web_server"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Change impact graph", " Defect detection", " Code changes", " Software evolution"], "paper_abstract": "The source code of a software system is in constant change. The impact of these changes spreads out across the software system and may lead to the sudden manifestation of failures in unchanged parts. To help developers fix such failures, we propose a method that, in a pre-processing stage. analyzes prior code changes to determine what functions have been modified. Next, given a particular period of time in the past, the functions changed during that period are propagated throughout the rest of the system using the dependence graph of the system. This information is visualized using Change Impact Graphs (CIGs). Through a case study based on the Apache Web Server, we demonstrate the benefit of using CIGs to investigate several real defects. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Change impact graphs: Determining the impact of prior code changes", "paper_id": "WOS:000268840400003"}