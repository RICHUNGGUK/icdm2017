{"auto_keywords": [{"score": 0.040650574499495426, "phrase": "java"}, {"score": 0.007090956055827263, "phrase": "metaphor"}, {"score": 0.004478308876320956, "phrase": "multi-stage_programming_language_extension"}, {"score": 0.0033021988455635403, "phrase": "multi-stage_language_design_concepts"}, {"score": 0.002542642270762272, "phrase": "pervasive_references"}, {"score": 0.002469830206270585, "phrase": "open_code"}, {"score": 0.0023990982005125763, "phrase": "garbage_collection"}, {"score": 0.0022967713922705, "phrase": "cross-stage_persistence"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["multi-stage languages", " object-oriented programming", " cross-stage persistence"], "paper_abstract": "Metaphor is a multi-stage programming language extension to an imperative, object-oriented language in the style of C# or Java. This paper discusses some issues we faced when applying multi-stage language design concepts to an imperative base language and run-time environment. The issues range from dealing with pervasive references and open code to garbage collection and implementing cross-stage persistence. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Experiences with an object-oriented, multi-stage language", "paper_id": "WOS:000239255500006"}