{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mathematica"}, {"score": 0.02763013211123484, "phrase": "n_dimensions"}, {"score": 0.00842199553867904, "phrase": "linear_dependent_elements"}, {"score": 0.00793762512516065, "phrase": "fire"}, {"score": 0.007787629151242362, "phrase": "lorentz"}, {"score": 0.006743519521046382, "phrase": "distributed_program"}, {"score": 0.006713584346432474, "phrase": "test_data"}, {"score": 0.0054379633444031775, "phrase": "scalar_integrals"}, {"score": 0.004611861762692236, "phrase": "irreducible_ones"}, {"score": 0.0045236118305957175, "phrase": "corresponding_propagators"}, {"score": 0.0045034863733923345, "phrase": "loop_momenta"}, {"score": 0.004417301047282113, "phrase": "loop_calculations"}, {"score": 0.004390571001522761, "phrase": "mathematica_function"}, {"score": 0.0043715765632101975, "phrase": "reduze"}, {"score": 0.004174682801587062, "phrase": "feynarts"}, {"score": 0.004156098763300805, "phrase": "feyncalc"}, {"score": 0.004125314447335291, "phrase": "one-loop_calculations"}, {"score": 0.004113064886401964, "phrase": "double_quarkonium_production"}, {"score": 0.004022340500030924, "phrase": "specific_process"}, {"score": 0.003922476601763347, "phrase": "program"}, {"score": 0.0038297020126219082, "phrase": "cpc_program_library"}, {"score": 0.003818326867123525, "phrase": "queen's_university"}, {"score": 0.0038069855209482205, "phrase": "belfast"}, {"score": 0.003795677450778112, "phrase": "n._ireland"}, {"score": 0.0037731618765688584, "phrase": "standard_cpc"}, {"score": 0.0035817411656328523, "phrase": "tar.gz_programming_language"}, {"score": 0.0033798220908864028, "phrase": "distribution_file"}, {"score": 0.0033398265543234393, "phrase": "traditional_method"}, {"score": 0.0033249501429042996, "phrase": "cross_sections"}, {"score": 0.0033101397746161843, "phrase": "physical_process"}, {"score": 0.0033003027425118005, "phrase": "perturbative_quantum_field_theory"}, {"score": 0.0032709661258673206, "phrase": "feynman_diagrams"}, {"score": 0.003251552926963083, "phrase": "dimensionally_regularized_loop_integrals"}, {"score": 0.0031892496806707896, "phrase": "analytical_level"}, {"score": 0.003165605014237376, "phrase": "essential_part"}, {"score": 0.0031374619658664843, "phrase": "loop_integrals"}, {"score": 0.003123484111361973, "phrase": "small_number"}, {"score": 0.003114200047043145, "phrase": "standard_integrals"}, {"score": 0.003072761019915884, "phrase": "amplitude_level"}, {"score": 0.003063627258654102, "phrase": "tensor_integrals"}, {"score": 0.0030363880573817483, "phrase": "lorentz_indices"}, {"score": 0.002873668281135127, "phrase": "systematic_reduction"}, {"score": 0.002852356597632014, "phrase": "independent_integrals"}, {"score": 0.0028102048802494434, "phrase": "standard_reduction_algorithm"}, {"score": 0.0028018499973603084, "phrase": "laporta"}, {"score": 0.002768674345336861, "phrase": "feynman_integrals"}, {"score": 0.0027358910467781155, "phrase": "resulting_system"}, {"score": 0.0027277558893834273, "phrase": "linear_equations"}, {"score": 0.002719644855867468, "phrase": "alternative_methods"}, {"score": 0.0027075233822935005, "phrase": "ibp_and_li_identities"}, {"score": 0.0026241684260044414, "phrase": "public_implementations"}, {"score": 0.002616364603666959, "phrase": "different_reduction_algorithms"}, {"score": 0.002596956164505192, "phrase": "computer_programs"}, {"score": 0.002450417380442116, "phrase": "independent_ones"}, {"score": 0.002264408670653219, "phrase": "linear_independent_ones"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["CPC classification: 11.1"], "paper_abstract": "We have generalized the MATHEMATICA function Apart from 1 to N dimensions: the generalized function $Apart can decompose any linear dependent elements in v(x)(*) to irreducible ones. The elements in v(x)(*) can be viewed as the corresponding propagators which involve loop momenta, and the decomposition will be useful when one tries to perform loop calculations using packages such as FIRE and REDUZE, which have implemented the integration by parts (IBP) identities and Lorentz invariance (LI) identities. A description on how to use this package, combined with FIRE, FEYNARTS, and FEYNCALC packages, to do one-loop calculations in double quarkonium production in e(+)e(-) colliders is given, and the full source code for a specific process (e(+)e(-) -> J/psi + eta(c)) is also available. Program summary Program title: $Apart Catalogue identifier: AEMK_v1_0 Program summaiy URL: http://cpc.cs.qub.ac.uk/summaries/AEMK_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 451006 No. of bytes in distributed program, including test data, etc.: 4598053 Distribution format: tar.gz Programming language: Mathematica. Computer: Any computer where Mathematica is running. Operating system: Any capable of running Mathematica. Classification: 11.1. External routines: FeynCalc, FeynArts, Fire (all included in the distribution file). Nature of problem: The traditional method of computing cross sections for a physical process in perturbative quantum field theory involves generating the amplitudes via Feynman diagrams and performing the dimensionally regularized loop integrals [1]. Simplifications of the expressions are performed at the analytical level; there, an essential part is the reduction of these loop integrals to a small number of standard integrals. This step can be performed at the amplitude level for tensor integrals or, after contraction of Lorentz indices, at the level of interferences for scalar integrals. Considering the case of scalar integrals, integration by parts (IBP) identities [2,31 and Lorentz invariance (LI) identities [4] may be used for a systematic reduction to a set of independent integrals, called master integrals (MI). The standard reduction algorithm by Laporta [5] defines an ordering for Feynman integrals, generates identities, and solves the resulting system of linear equations. Alternative methods to exploit IBP and LI identities for reductions have been proposed [6-9]; see also [10,11] and references therein. Public implementations of different reduction algorithms are available with the computer programs AIR [12], FIRE [131, and Reduze [14]. The usage of Fire [13], Reduze [14], etc. requires that the propagators must be decomposed to independent ones: for one dimension, there is a Mathematica function Apart to do this, while for N dimensions there is no such package yet, so we want to generalize the Mathematica function Apart to $Apart in N dimensions. Solution method: We first prove that any linear dependent elements in can be decomposed into the summation of linear independent ones: the procedure used in the proof gives us a method to perform the decomposition. $Apart is such an Mathematica package that implements this method and generalizes the Mathematica Apart function from 1 to N dimensions. Running time: Depends on the complexity of the system. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "$Apart: A generalized MATHEMATICA Apart function", "paper_id": "WOS:000306771900015"}