{"auto_keywords": [{"score": 0.04090004467217908, "phrase": "tm"}, {"score": 0.00481495049065317, "phrase": "multi-threaded_environment"}, {"score": 0.0045610429427230354, "phrase": "stm"}, {"score": 0.004293584349522444, "phrase": "non-blocking_process_synchronization"}, {"score": 0.004242085112539693, "phrase": "multi-threaded_computing_environment"}, {"score": 0.00399367108161192, "phrase": "major_limitations"}, {"score": 0.003945754887845885, "phrase": "transactional_memory"}, {"score": 0.003714629047818465, "phrase": "data_consistency"}, {"score": 0.003626000977962191, "phrase": "progress_condition"}, {"score": 0.003352256019007896, "phrase": "new_concurrency_control_mechanism"}, {"score": 0.003232956879952914, "phrase": "existing_tm_implementations"}, {"score": 0.0031941384895530426, "phrase": "obstruction_freedom"}, {"score": 0.003099113156350047, "phrase": "new_stm_methodology"}, {"score": 0.0030434561939032597, "phrase": "primary_objective"}, {"score": 0.0028823939507764238, "phrase": "typical_scenarios"}, {"score": 0.002830617996609902, "phrase": "programming_model"}, {"score": 0.0027133856739937133, "phrase": "update_transactions"}, {"score": 0.0025388705701873075, "phrase": "proposed_approach"}, {"score": 0.0024932498388507084, "phrase": "new_update_transaction"}, {"score": 0.0023470051993423483, "phrase": "earlier_transactions"}, {"score": 0.0022771244331421586, "phrase": "proposed_stm"}, {"score": 0.0021827653135510225, "phrase": "read_and_multiple_update_transactions"}, {"score": 0.0021049977753042253, "phrase": "higher_throughput"}], "paper_keywords": ["Concurrency control", " Software transactional memory", " Obstruction freedom"], "paper_abstract": "Software transactional memory (STM) is one of the techniques used towards achieving non-blocking process synchronization in multi-threaded computing environment. In spite of its high potential, one of the major limitations of transactional memory (TM) is that in order to ensure data consistency as well as progress condition, TM often forces transactions to abort. This paper proposes a new concurrency control mechanism. It starts with the existing TM implementations for obstruction freedom and eventually builds a new STM methodology. The primary objective is to reduce aborting of transactions in some typical scenarios. A programming model is described for a chain of update transactions that share the same data object among themselves. Using the proposed approach, any new update transaction appended in this chain need not wait for the earlier transactions to finish. The proposed STM allows wait-free, non-blocking implementation of a mix of read and multiple update transactions on the same shared data object with higher throughput.", "paper_title": "A new concurrency control mechanism for multi-threaded environment using transactional memory", "paper_id": "WOS:000363723100007"}