{"auto_keywords": [{"score": 0.048992899974696226, "phrase": "current_multimedia_extensions"}, {"score": 0.03964971529740581, "phrase": "multiple_data_streams"}, {"score": 0.0313210843742285, "phrase": "multi-streaming_simd_computing_engine"}, {"score": 0.004814976950417537, "phrase": "simd"}, {"score": 0.004598933498016774, "phrase": "general-purpose_processors"}, {"score": 0.004515252649226697, "phrase": "growing_performance_demand"}, {"score": 0.004473982381245469, "phrase": "multimedia_applications"}, {"score": 0.004372442291178139, "phrase": "computing_performance"}, {"score": 0.004195418010131832, "phrase": "design_conceptions"}, {"score": 0.004138010495069077, "phrase": "single_data_stream"}, {"score": 0.0036385493850693983, "phrase": "proposed_architecture"}, {"score": 0.0035887342563437935, "phrase": "operation_cell"}, {"score": 0.0034911335714333507, "phrase": "logic_gates"}, {"score": 0.0034433297275344877, "phrase": "storage_cells"}, {"score": 0.0033961782274326948, "phrase": "multiple_operation_cells"}, {"score": 0.0032886455096627324, "phrase": "register_file"}, {"score": 0.0031991799574455555, "phrase": "simd_operations"}, {"score": 0.0031553611552558986, "phrase": "multimedia_operation_storage_unit"}, {"score": 0.00283870598459543, "phrase": "subword_parallelisms"}, {"score": 0.0027614468443073028, "phrase": "data_stream"}, {"score": 0.00241658945942583, "phrase": "different_amounts"}, {"score": 0.0023944552329463035, "phrase": "data_streams"}, {"score": 0.0023725232579531273, "phrase": "simulation_results"}, {"score": 0.002318566141177149, "phrase": "multi-streaming_simd_architecture"}, {"score": 0.002183938718432764, "phrase": "traditional_mmx_extensions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["SIMD", " Multimedia processing", " PIM", " Processor-In-Memory", " Multimedia extensions", " MMX"], "paper_abstract": "Current multimedia extensions provide a mechanism for general-purpose processors to meet the growing performance demand of multimedia applications. However, the computing performance of these extensions is often limited for the design conceptions of the single data stream. This paper presents an architecture called \"multi-streaming SIMD\" that enables current multimedia extensions to simultaneously manipulate multiple data streams. To efficiently and flexibly realize the proposed architecture, an operation cell is designed by fusing the logic gates and the storage cells together. Multiple operation cells then are connected to compose a register file with the ability of performing SIMD operations called \"Multimedia Operation Storage Unit (MOSU)\". Further, many MOSUs are used to compose a multi-streaming SIMD computing engine that can simultaneously manipulate multiple data streams and exploit the subword parallelisms of the elements in each data stream. This paper also designs three instruction modes (global, coupling, and isolated modes) for programmers to dynamically configure the multi-streaming SIMD computing engine at the instruction level to manipulate different amounts of data streams. Simulation results show that when the multi-streaming SIMD architecture has four 4-register MOSUs, it provides a factor of 3.3x-5.5x performance enhancement for traditional MMX extensions on 12 multimedia kernels. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "A multi-streaming SIMD multimedia computing engine", "paper_id": "WOS:000282025100001"}