{"auto_keywords": [{"score": 0.04973625252864221, "phrase": "cluster_web_servers"}, {"score": 0.03519805967499629, "phrase": "web_servers"}, {"score": 0.03352183870605411, "phrase": "web_server"}, {"score": 0.00481495049065317, "phrase": "admission_control"}, {"score": 0.004746263721902201, "phrase": "dynamic_workloads"}, {"score": 0.004661775069083667, "phrase": "web-based_applications"}, {"score": 0.004497262692458022, "phrase": "high_performance_web_servers"}, {"score": 0.00441718685609235, "phrase": "lower_user-perceived_latency"}, {"score": 0.0042920078348374375, "phrase": "widespread_substitution"}, {"score": 0.004261268957001927, "phrase": "powerful_single_servers"}, {"score": 0.004230749292148046, "phrase": "robust_newcomers"}, {"score": 0.004066740842661956, "phrase": "load-balancing_algorithms"}, {"score": 0.004023120753104693, "phrase": "important_role"}, {"score": 0.003937273640906994, "phrase": "cluster_servers"}, {"score": 0.0038950367927745267, "phrase": "previous_load-balancing_algorithms"}, {"score": 0.0037845987749316632, "phrase": "static_contents"}, {"score": 0.003757480190200645, "phrase": "web_services"}, {"score": 0.0037171648669537287, "phrase": "significant_performance_degradation"}, {"score": 0.003690527690610707, "phrase": "dynamic_and_database-driven_workloads"}, {"score": 0.0035858673522839407, "phrase": "approximation-based_load-balancing_algorithm"}, {"score": 0.003521961918342562, "phrase": "cluster-based_web_servers"}, {"score": 0.0032893028281789287, "phrase": "distributed_agents"}, {"score": 0.0032075033252058835, "phrase": "analytical_model"}, {"score": 0.0031277316566463978, "phrase": "web_servers'_loads"}, {"score": 0.002942138511829811, "phrase": "outstanding_requests"}, {"score": 0.0028792911886505526, "phrase": "web_server_node"}, {"score": 0.002708399936381754, "phrase": "error_handling"}, {"score": 0.0025752890978323873, "phrase": "estimated_available_capacity"}, {"score": 0.0025112011945912327, "phrase": "load_balancing"}, {"score": 0.002493184318829227, "phrase": "admission_control_decisions"}, {"score": 0.002370625627299064, "phrase": "proposed_scheme"}, {"score": 0.002262209824105154, "phrase": "rival_load-balancing_algorithms"}, {"score": 0.002135542806459067, "phrase": "request_rates"}, {"score": 0.0021049977753042253, "phrase": "cluster_capacity"}], "paper_keywords": ["Cluster-based web server", " Dynamic load-balancing algorithm", " Admission control", " Analytical model of web server", " Feedback controller design"], "paper_abstract": "The growth of web-based applications in business and e-commerce is building up demands for high performance web servers for better throughputs and lower user-perceived latency. These demands are leading to a widespread substitution of powerful single servers by robust newcomers, cluster web servers, in many enterprise companies. In this respect the load-balancing algorithms play an important role in boosting the performance of cluster servers. The previous load-balancing algorithms which were designed for the handling of static contents in web services suffer from significant performance degradation under dynamic and database-driven workloads. Regarding this, we propose an approximation-based load-balancing algorithm with admission control for cluster-based web servers in this study. Since it is difficult to accurately determine the loads of web servers through feedbacks from distributed agents in web servers, we propose an analytical model of a web server to estimate the web servers' loads. To achieve this, the algorithm classifies requests based on their service times and track numbers of outstanding requests for each class of each web server node and also based on their resource demands to dynamically estimate the loads of each node. For the error handling of the model a proportional integral (PI) controller from control theory is used. Then the estimated available capacity of each web server is used for load balancing and admission control decisions. The implementation results with a standard benchmark confirm the effectiveness of the proposed scheme, which improves both the mean response time and the throughput of the cluster compared to rival load-balancing algorithms, and also avoids situations in which the cluster is overloaded, even when the request rates are beyond the cluster capacity.", "paper_title": "An approximation-based load-balancing algorithm with admission control for cluster web servers with dynamic workloads", "paper_id": "WOS:000280650400004"}