{"auto_keywords": [{"score": 0.04297094890897633, "phrase": "virtual_processors"}, {"score": 0.04130510857760028, "phrase": "physical_processors"}, {"score": 0.036670661000854386, "phrase": "user-level_threads"}, {"score": 0.03326822939773261, "phrase": "kernel_threads"}, {"score": 0.03098731050115219, "phrase": "mpi_programs"}, {"score": 0.00481495049065317, "phrase": "original_mpi_semantics"}, {"score": 0.00474946741204285, "phrase": "virtualized_processor_environment"}, {"score": 0.004706305193222972, "phrase": "processor_virtualization"}, {"score": 0.004315249628884236, "phrase": "available_processors"}, {"score": 0.003867206750827, "phrase": "mpi_program"}, {"score": 0.003611034322786669, "phrase": "overlapping_computation"}, {"score": 0.0035133644847622383, "phrase": "load_balancing"}, {"score": 0.003177235604998673, "phrase": "heavy_processes"}, {"score": 0.0030771609361092164, "phrase": "threads_present_issues"}, {"score": 0.0030491497463386924, "phrase": "private_data"}, {"score": 0.0029802289354540507, "phrase": "private_address_space_assumption"}, {"score": 0.0028082176224611542, "phrase": "new_approach"}, {"score": 0.0026582395558737855, "phrase": "thread-local_storage"}, {"score": 0.0023818288346547692, "phrase": "virtualized_environment"}, {"score": 0.002234031373581961, "phrase": "lower_migration_cost"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Processor virtualization", " MPI", " User-level threads", " Privatization", " TLS"], "paper_abstract": "Processor virtualization is a technique in which a programmer divides a computation into many entities, which are mapped to the available processors. The number of these entities, referred to as virtual processors, is typically larger than the number of physical processors. For an MPI program, the user decomposes the computation into more MPI tasks than physical processors. This approach allows overlapping computation and communication, and enables load balancing. User-level threads are often used to implement these virtual processors because they are generally faster to create, manage and migrate than heavy processes or kernel threads. However, these threads present issues concerning private data because they break the private address space assumption typically made by MPI programs. In this paper, we propose a new approach to privatize data in user-level threads. This approach is based on thread-local storage (TLS), which is often used by kernel threads. We apply this technique so that MPI programs can be executed in a virtualized environment while preserving their original semantics. We show that this alternative has a more efficient context switch and lower migration cost and is simpler to implement than other approaches. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Preserving the original MPI semantics in a virtualized processor environment", "paper_id": "WOS:000315978700006"}