{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.00475924837336259, "phrase": "embedded_systems"}, {"score": 0.004704187604192605, "phrase": "specialized_hardware_devices"}, {"score": 0.003973523379376352, "phrase": "standard_java"}, {"score": 0.0038820411362656803, "phrase": "platform-independent_language"}, {"score": 0.003726967166630926, "phrase": "direct_memory_access"}, {"score": 0.00357806560856829, "phrase": "underlying_operating_system"}, {"score": 0.003435092524339692, "phrase": "embedded_systems_domain_resources"}, {"score": 0.003336468343971626, "phrase": "java_virtual_machine"}, {"score": 0.003221837753001224, "phrase": "underlying_middleware"}, {"score": 0.0031660031870090434, "phrase": "attractive_architecture"}, {"score": 0.0029694040368299624, "phrase": "java_packages"}, {"score": 0.0029349892964423197, "phrase": "hardware_objects"}, {"score": 0.0025967927629150715, "phrase": "standard_interpreters"}, {"score": 0.002507511169156787, "phrase": "operating_system"}, {"score": 0.0024496978447849835, "phrase": "latter_solution"}, {"score": 0.0023654615987859402, "phrase": "migration_path"}, {"score": 0.0023380300046435187, "phrase": "java_programs"}, {"score": 0.0022841153001549193, "phrase": "legacy_system_components"}, {"score": 0.002244494905883452, "phrase": "important_aspect"}, {"score": 0.0021049977753042253, "phrase": "real-time_specification"}], "paper_keywords": ["Languages", " Design", " Device driver", " embedded system", " Java", " Java virtual machine"], "paper_abstract": "Embedded systems use specialized hardware devices to interact with their environment, and since they have to be dependable, it is attractive to use a modern, type-safe programming language like Java to develop programs for them. Standard Java, as a platform-independent language, delegates access to devices, direct memory access, and interrupt handling to some underlying operating system or kernel, but in the embedded systems domain resources are scarce and a Java Virtual Machine (JVM) without an underlying middleware is an attractive architecture. The contribution of this article is a proposal for Java packages with hardware objects and interrupt handlers that interface to such a JVM. We provide implementations of the proposal directly in hardware, as extensions of standard interpreters, and finally with an operating system middleware. The latter solution is mainly seen as a migration path allowing Java programs to coexist with legacy system components. An important aspect of the proposal is that it is compatible with the Real-Time Specification for Java (RTSJ).", "paper_title": "A Hardware Abstraction Layer in Java", "paper_id": "WOS:000297636300004"}