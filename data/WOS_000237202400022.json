{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "practical_clock-scheduling_engine"}, {"score": 0.004466519142879166, "phrase": "minimum_feasible_clock-period"}, {"score": 0.004081385289516914, "phrase": "modified_bellman-ford_shortest_path_algorithm"}, {"score": 0.0038431888954930083, "phrase": "optimum_cost_clock-schedule"}, {"score": 0.003511613254403125, "phrase": "bipartite_matching_algorithm"}, {"score": 0.0032571885279065126, "phrase": "useful_information"}, {"score": 0.003113441660343867, "phrase": "synthesis_tools"}, {"score": 0.0022696277881969896, "phrase": "computation_time"}, {"score": 0.0022022878843247274, "phrase": "almost_linear"}, {"score": 0.0021049977753042253, "phrase": "circuit_size"}], "paper_keywords": ["clock-schedule", " shortest path", " negative cycle detection", " semi-synchronous circuits"], "paper_abstract": "In this paper, a practical clock-scheduling engine is introduced. The minimum feasible clock-period is obtained by using a modified Bellman-Ford shortest path algorithm. Then an optimum cost clock-schedule is obtained by using a bipartite matching algorithm. It also provides useful information to circuit synthesis tools. The experiment to a circuit with about 10000 registers and 100000 signal paths shows that a result is obtained within a few minutes. The computation time is almost linear to the circuit size in practice.", "paper_title": "Practical fast clock-schedule design algorithms", "paper_id": "WOS:000237202400022"}