{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "web_applications"}, {"score": 0.03441856679421127, "phrase": "saved_state"}, {"score": 0.004777214679969785, "phrase": "seamless_execution"}, {"score": 0.004575030140694246, "phrase": "css"}, {"score": 0.004521241723235708, "phrase": "javascript"}, {"score": 0.004398331355940011, "phrase": "source_code_format"}, {"score": 0.004363846362238565, "phrase": "web_apps"}, {"score": 0.0042119653427658025, "phrase": "web_browser"}, {"score": 0.003923815926819606, "phrase": "platform_independence"}, {"score": 0.003877737556673229, "phrase": "new_user_experience"}, {"score": 0.003626626504149897, "phrase": "smart_devices"}, {"score": 0.003432044343307207, "phrase": "current_state"}, {"score": 0.0033917213078141373, "phrase": "running_app"}, {"score": 0.003312486229143855, "phrase": "different_device"}, {"score": 0.0031970796597571367, "phrase": "web_app's_state"}, {"score": 0.0030494153169181334, "phrase": "web_app"}, {"score": 0.0028743610212291727, "phrase": "javascript_variables"}, {"score": 0.002851790448644913, "phrase": "dom_trees"}, {"score": 0.0027961342030212353, "phrase": "json_format"}, {"score": 0.002688050388891007, "phrase": "event_handlers"}, {"score": 0.002594342451017822, "phrase": "javascript_engine_internals"}, {"score": 0.002426137929553722, "phrase": "original_app"}, {"score": 0.0023507916951658455, "phrase": "chrome_browser"}, {"score": 0.002286781334850213, "phrase": "non-trivial_sample_apps"}, {"score": 0.002130056082139311, "phrase": "user_experiences"}, {"score": 0.0021049977753042253, "phrase": "web_platform"}], "paper_keywords": ["Algorithms", " Design", " Languages", " App migration", " Web application", " JavaScript", " DOM", " JSON", " Snapshot"], "paper_abstract": "Web applications (apps) are programmed using HTML5, CSS, and JavaScript, and are distributed in the source code format. Web apps can be executed on any devices where a web browser is installed, allowing one-source, multiplatform environment. We can exploit this advantage of platform independence for a new user experience called app migration, which allows migrating an app in the middle of execution seamlessly between smart devices. This paper proposes such a migration framework for web apps where we can save the current state of a running app and resume its execution on a different device by restoring the saved state. We save the web app's state in the form of a snapshot, which is actually another web app whose execution can restore the saved state. In the snapshot, the state of the JavaScript variables and DOM trees are saved using the JSON format. We solved some of the saving/restoring problems related to event handlers and closures by accessing the browser and the JavaScript engine internals. Our framework does not require instrumenting an app or changing its source code, but works for the original app. We implemented the framework on the Chrome browser with the V8 JavaScript engine and successfully migrated non-trivial sample apps with reasonable saving and restoring overhead. We also discuss other usage of the snapshot for optimizations and user experiences for the web platform.", "paper_title": "Migration of Web Applications with Seamless Execution", "paper_id": "WOS:000361284300014"}