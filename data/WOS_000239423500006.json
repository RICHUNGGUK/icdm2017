{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "transformation_chain_modeling_language"}, {"score": 0.004453874101119545, "phrase": "main_artifacts"}, {"score": 0.004384960761826366, "phrase": "software_development"}, {"score": 0.004119762981892093, "phrase": "high_levels"}, {"score": 0.003900853871728297, "phrase": "application's_business_domain"}, {"score": 0.0034162643819889054, "phrase": "necessary_details"}, {"score": 0.0032599633778910516, "phrase": "concrete_implementation"}, {"score": 0.0031107911390188055, "phrase": "large_part"}, {"score": 0.0030387767523076528, "phrase": "total_development_effort"}, {"score": 0.0027240799841720957, "phrase": "necessary_tooling_support"}, {"score": 0.0026609940110902666, "phrase": "transformation_chains"}, {"score": 0.002385326947545194, "phrase": "implementation_independent_composition"}, {"score": 0.0022407927161620855, "phrase": "concrete_syntax"}, {"score": 0.0021049977753042253, "phrase": "uml_activity_diagrams"}], "paper_keywords": [""], "paper_abstract": "The Model Driven Development (MDD) paradigm stimulates the use of models as the main artifacts for software development. These models can be situated at high levels of abstraction, close to the application's business domain. Many consecutive automatic transformations (a transformation chain) can be applied to these models to add the necessary details in order to generate a concrete implementation. This means that a large part of the total development effort is relocated to the development of transformations and hence we should have the necessary tooling support for designing transformation chains. In this paper we propose a metamodel for a transformation chain modeling language that enables implementation independent composition of transformations. We also propose a concrete syntax for this language that is based on UML activity diagrams.", "paper_title": "Towards a transformation chain modeling language", "paper_id": "WOS:000239423500006"}