{"auto_keywords": [{"score": 0.03708984644671887, "phrase": "executable_code"}, {"score": 0.010228393900744589, "phrase": "marlin"}, {"score": 0.00481495049065317, "phrase": "mitigating_code_reuse_attacks"}, {"score": 0.004766683200410046, "phrase": "code_randomization"}, {"score": 0.004718897469501381, "phrase": "code-reuse_attacks"}, {"score": 0.004624751696958501, "phrase": "return-oriented_programming"}, {"score": 0.004419703921314433, "phrase": "buffer_overflow_attacks"}, {"score": 0.0043533862892678864, "phrase": "existing_executable_code"}, {"score": 0.004309725894724034, "phrase": "malicious_purposes"}, {"score": 0.004160319763461951, "phrase": "code_injection_attacks"}, {"score": 0.0038379074449947067, "phrase": "desired_attack_logic"}, {"score": 0.003780286517897356, "phrase": "common_feature"}, {"score": 0.003576286811853861, "phrase": "memory_layout"}, {"score": 0.0034348484776384643, "phrase": "fine_grained_randomization_based_approach"}, {"score": 0.0032006150973842846, "phrase": "code-reuse_attack"}, {"score": 0.003058515297281172, "phrase": "internal_structure"}, {"score": 0.0029374939071038146, "phrase": "function_blocks"}, {"score": 0.0028933521924166287, "phrase": "target_binary"}, {"score": 0.0027929100418926725, "phrase": "necessary_a_priori_knowledge"}, {"score": 0.0026959452932289797, "phrase": "desired_exploit_payload"}, {"score": 0.0025892330566358503, "phrase": "elf_binary"}, {"score": 0.0024742098091226203, "phrase": "different_randomization"}, {"score": 0.0023762535034673017, "phrase": "bash_shell"}, {"score": 0.002202894673025544, "phrase": "low_overhead"}, {"score": 0.0021049977753042253, "phrase": "code-reuse_based_attacks"}], "paper_keywords": ["Return oriented programming", " code randomization", " security", " malware"], "paper_abstract": "Code-reuse attacks, such as return-oriented programming (ROP), are a class of buffer overflow attacks that repurpose existing executable code towards malicious purposes. These attacks bypass defenses against code injection attacks by chaining together sequence of instructions, commonly known as gadgets, to execute the desired attack logic. A common feature of these attacks is the reliance on the knowledge of memory layout of the executable code. We propose a fine grained randomization based approach that breaks these assumptions by modifying the layout of the executable code and hinders code-reuse attack. Our solution, Marlin, randomizes the internal structure of the executable code by randomly shuffling the function blocks in the target binary. This denies the attacker the necessary a priori knowledge of instruction addresses for constructing the desired exploit payload. Our approach can be applied to any ELF binary and every execution of this binary uses a different randomization. We have integrated Marlin into the bash shell that randomizes the target executable before launching it. Our work shows that such an approach incurs low overhead and significantly increases the level of security against code-reuse based attacks.", "paper_title": "Marlin: Mitigating Code Reuse Attacks Using Code Randomization", "paper_id": "WOS:000354468900006"}