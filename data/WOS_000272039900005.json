{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "lambda_delta"}, {"score": 0.00481495049065317, "phrase": "formal_system_lambda_delta"}, {"score": 0.0047026237903774895, "phrase": "typed_lambda-calculus"}, {"score": 0.00414616342377235, "phrase": "main_goal"}, {"score": 0.0038930368103015467, "phrase": "automath-related_lambda-calculi"}, {"score": 0.003742711659195878, "phrase": "pure_type_systems"}, {"score": 0.003378385493203297, "phrase": "pi_construction"}, {"score": 0.0032223742018434856, "phrase": "abbreviation_mechanism"}, {"score": 0.0029781530607129653, "phrase": "important_desirable_properties"}, {"score": 0.002426137929553722, "phrase": "type_assignment"}, {"score": 0.0022958180852458215, "phrase": "typed_terms"}, {"score": 0.0021049977753042253, "phrase": "type_inference_problem"}], "paper_keywords": ["Theory", " Abbreviations", " terms as types", " environments as terms"], "paper_abstract": "The formal system lambda delta is a typed lambda-calculus that pursues the unification of terms, types, environments, and contexts as the main goal. lambda delta takes some features from the Automath-related lambda-calculi and some from the pure type systems, but differs from both in that it does not include the Pi construction while it provides for an abbreviation mechanism at the level of terms. lambda delta enjoys some important desirable properties such as the confluence of reduction, the correctness of types, the uniqueness of types up to conversion, the subject reduction of the type assignment, the strong normalization of the typed terms, and, as a corollary, the decidability of type inference problem.", "paper_title": "The Formal System lambda delta", "paper_id": "WOS:000272039900005"}