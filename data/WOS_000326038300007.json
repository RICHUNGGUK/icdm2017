{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "cuda_programs"}, {"score": 0.03584495564816789, "phrase": "cumapz"}, {"score": 0.015030178858735128, "phrase": "gpgpu_applications"}, {"score": 0.004766727802407676, "phrase": "cuda"}, {"score": 0.004671588539217021, "phrase": "gpu_computing"}, {"score": 0.004419703921314433, "phrase": "cuda_programming_model"}, {"score": 0.0043533862892678864, "phrase": "simple_interface"}, {"score": 0.004139401327448803, "phrase": "high_performance"}, {"score": 0.003935892934907777, "phrase": "numerous_architectural_details"}, {"score": 0.003876806615011266, "phrase": "small_changes"}, {"score": 0.0038379074449947067, "phrase": "source_code"}, {"score": 0.0037423521744765075, "phrase": "memory_access_pattern"}, {"score": 0.003216804708106142, "phrase": "memory_performance"}, {"score": 0.003073988343893906, "phrase": "different_ways"}, {"score": 0.0030278017562213265, "phrase": "shared_and_global_memories"}, {"score": 0.0029374939071038146, "phrase": "efficient_memory_behavior"}, {"score": 0.0028070431733705735, "phrase": "global_memory_access"}, {"score": 0.0025374674652885354, "phrase": "experimental_results"}, {"score": 0.0024247382451294255, "phrase": "correlation_coefficient"}, {"score": 0.0023053339328456234, "phrase": "memory_access_design_space"}, {"score": 0.0021479597698614373, "phrase": "previous_approach"}, {"score": 0.002126382537141136, "phrase": "hong"}, {"score": 0.0021050532561217986, "phrase": "kim"}], "paper_keywords": ["Performance", " Design", " Experimentation", " GPGPU", " CUDA", " memory performance", " program optimization", " performance estimation"], "paper_abstract": "CUDA has successfully popularized GPU computing, and GPGPU applications are now used in various embedded systems. The CUDA programming model provides a simple interface to program on GPUs, but tuning GPGPU applications for high performance is still quite challenging. Programmers need to consider numerous architectural details, and small changes in source code, especially on the memory access pattern, can affect performance significantly. This makes it very difficult to optimize CUDA programs. This article presents CuMAPz, which is a tool to analyze and compare the memory performance of CUDA programs. CuMAPz can help programmers explore different ways of using shared and global memories, and optimize their program for efficient memory behavior. CuMAPz models several memory-performance-related factors: data reuse, global memory access coalescing, global memory latency hiding, shared memory bank conflict, channel skew, and branch divergence. Experimental results show that CuMAPz can accurately estimate performance with correlation coefficient of 0.96. By using CuMAPz to explore the memory access design space, we could improve the performance of our benchmarks by 30% more than the previous approach [Hong and Kim 2010].", "paper_title": "Memory Performance Estimation of CUDA Programs", "paper_id": "WOS:000326038300007"}