{"auto_keywords": [{"score": 0.004544127927346964, "phrase": "component_structure"}, {"score": 0.004199101289890982, "phrase": "standardized_software_development_processes"}, {"score": 0.004089991141220082, "phrase": "system_abstraction"}, {"score": 0.004025885154716127, "phrase": "design_choices"}, {"score": 0.00388016972840459, "phrase": "final_system"}, {"score": 0.003720060615588018, "phrase": "software_architecture_research"}, {"score": 0.0034193226278107346, "phrase": "architectural_specifications"}, {"score": 0.003383475802364289, "phrase": "higher_levels"}, {"score": 0.0032609360162842767, "phrase": "system_requirements"}, {"score": 0.0029657683623403085, "phrase": "state-based_software_architecture_specifications"}, {"score": 0.0029346624184926305, "phrase": "high-level_functional_specifications"}, {"score": 0.002813457986293993, "phrase": "intermediate_specification"}, {"score": 0.002697245874076643, "phrase": "temporal_logic_properties"}, {"score": 0.002440071551819324, "phrase": "particular_case_study"}, {"score": 0.0024017638230939514, "phrase": "aegis_geoserver_simulation_testbed_system"}, {"score": 0.002339246282204109, "phrase": "compact_functional_specification"}, {"score": 0.0023025177990160487, "phrase": "critical_behavioral_property"}], "paper_keywords": ["software architectures", " functional specification", " formal methods", " simulation testbed", " verification", " validation"], "paper_abstract": "Software architecture specifications are predominantly concerned with describing the component structure of systems and how the components interact behaviorally. They are increasingly part of standardized software development processes because they represent a system abstraction in which design choices relevant to the correctness of the final system are taken. Therefore, much of software architecture research has concentrated on specification and analysis, whereas little attention has been paid to formally relating architectural specifications to higher levels of specification, such as the system requirements. In this paper we present our progress toward addressing an instance of this problem, namely relating state-based software architecture specifications to high-level functional specifications. Our approach is to use an intermediate specification given in terms of a set of temporal logic properties to bridge the gap between the two levels of specifications. We describe our approach in the context of a particular case study, the AEGIS GeoServer Simulation Testbed system, showing how a compact functional specification of a critical behavioral property of the system can be used to validate three alternative architectural specifications of that system. (c) 2005 Elsevier B.V. All fights reserved.", "paper_title": "On relating functional specifications to architectural specifications: A case study", "paper_id": "WOS:000234467500001"}