{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "microcontroller_binary_code"}, {"score": 0.04945540937697203, "phrase": "runtime_verification"}, {"score": 0.004598933498016774, "phrase": "formal_verification"}, {"score": 0.0035141291835319682, "phrase": "non-intrusive_fashion"}, {"score": 0.003378385493203297, "phrase": "code_instrumentation"}, {"score": 0.0031845067058084613, "phrase": "analyzed_program"}, {"score": 0.0030414140732789186, "phrase": "dedicated_hardware_unit"}, {"score": 0.002943147037670826, "phrase": "field_programmable_gate_array"}, {"score": 0.0028480459059007468, "phrase": "analyzed_microcontroller_program"}, {"score": 0.0028108690791085536, "phrase": "different_instances"}, {"score": 0.00266693888510356, "phrase": "varying_degrees"}, {"score": 0.0025807396931129926, "phrase": "supported_specification_languages"}, {"score": 0.002497319603143104, "phrase": "hardware_design"}, {"score": 0.0024007585788965655, "phrase": "invariant_checkers"}, {"score": 0.0023538840032613535, "phrase": "restricted_class"}, {"score": 0.002323142666222693, "phrase": "linear_template_constraints"}, {"score": 0.0022777800735119405, "phrase": "programmable_processor"}, {"score": 0.002233301265743633, "phrase": "past-time_linear_temporal_logic"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Runtime verification", " Past time LTL", " Embedded real-time systems"], "paper_abstract": "Runtime verification bridges the gap between formal verification and testing by providing techniques and tools that connect executions of a software to its specification without trying to prove the absence of errors. This article presents a framework for runtime verification of microcontroller binary code, which provides the above mentioned link in a non-intrusive fashion: the framework neither requires code instrumentation nor does it affect the execution of the analyzed program. This is achieved using a dedicated hardware unit that runs on a field programmable gate array in parallel to the analyzed microcontroller program. Different instances of this framework are discussed, with varying degrees of expressiveness of the supported specification languages and complexity in the hardware design. These instances range from invariant checkers for a restricted class of linear template constraints to a programmable processor that supports past-time linear temporal logic with timing constraints. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Runtime verification of microcontroller binary code", "paper_id": "WOS:000329887000009"}