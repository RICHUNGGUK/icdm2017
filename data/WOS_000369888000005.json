{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multiplicity_tree_automata"}, {"score": 0.020779572253035047, "phrase": "target_automaton"}, {"score": 0.020202854168070127, "phrase": "query_complexity"}, {"score": 0.00787411755659841, "phrase": "equivalence_queries"}, {"score": 0.0055727116599872525, "phrase": "largest_counterexample"}, {"score": 0.00470903269511684, "phrase": "computational_complexity"}, {"score": 0.004634799977448855, "phrase": "angluin's_exact_learning_model"}, {"score": 0.004321981087202553, "phrase": "target_automaton_size"}, {"score": 0.004294410362732827, "phrase": "learner"}, {"score": 0.0041074234667687875, "phrase": "equivalence_problem"}, {"score": 0.003966233032752466, "phrase": "polynomial_identity_testing"}, {"score": 0.0038420778359143917, "phrase": "lower_bounds"}, {"score": 0.00369819191449264, "phrase": "fixed_and_arbitrary_fields"}, {"score": 0.00365143309008563, "phrase": "latter_case"}, {"score": 0.003404593678001724, "phrase": "arbitrary_fields"}, {"score": 0.003340208995991135, "phrase": "habrard"}, {"score": 0.003319018210175274, "phrase": "oncina"}, {"score": 0.002912963877144772, "phrase": "smallest_counterexample_tree"}, {"score": 0.002556459595882617, "phrase": "new_learning_algorithm"}, {"score": 0.002250646398370793, "phrase": "dag_counterexamples"}, {"score": 0.002236352450500035, "phrase": "minimal_size"}, {"score": 0.0021049977753042253, "phrase": "best_previously-known_algorithm"}], "paper_keywords": ["exact learning", " query complexity", " multiplicity tree automata", " Hankel matrices", " DAG representations of trees", " polynomial identity testing"], "paper_abstract": "We consider the query and computational complexity of learning multiplicity tree automata in Angluin's exact learning model. In this model, there is an oracle, called the Teacher, that can answer membership and equivalence queries posed by the Learner. Motivated by this feature, we first characterise the complexity of the equivalence problem for multiplicity tree automata, showing that it is logspace equivalent to polynomial identity testing. We then move to query complexity, deriving lower bounds on the number of queries needed to learn multiplicity tree automata over both fixed and arbitrary fields. In the latter case, the bound is linear in the size of the target automaton. The best known upper bound on the query complexity over arbitrary fields derives from an algorithm of Habrard and Oncina (2006), in which the number of queries is proportional to the size of the target automaton and the size of a largest counterexample, represented as a tree, that is returned by the Teacher. However, a smallest counterexample tree may already be exponential in the size of the target automaton. Thus the above algorithm has query complexity exponentially larger than our lower bound, and does not run in time polynomial in the size of the target automaton. We give a new learning algorithm for multiplicity tree automata in which counterexamples to equivalence queries are represented as DAGs. The query complexity of this algorithm is quadratic in the target automaton size and linear in the size of a largest counterexample. In particular, if the Teacher always returns DAG counterexamples of minimal size then the query complexity is quadratic in the target automaton size-almost matching the lower bound, and improving the best previously-known algorithm by an exponential factor.", "paper_title": "Complexity of Equivalence and Learning for Multiplicity Tree Automata", "paper_id": "WOS:000369888000005"}