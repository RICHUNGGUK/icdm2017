{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "hamiltonian_paths"}, {"score": 0.0349694581102903, "phrase": "tournament_size"}, {"score": 0.024837074198054355, "phrase": "linux_cluster"}, {"score": 0.004605748839642513, "phrase": "general_methodology"}, {"score": 0.004544770921520536, "phrase": "communication-efficient_parallelization"}, {"score": 0.004425215632459868, "phrase": "divide-and-conquer_approach"}, {"score": 0.004195418010131832, "phrase": "cluster_environments"}, {"score": 0.004158290806404304, "phrase": "good_communication_efficiency"}, {"score": 0.004066898031169739, "phrase": "first_practical_parallel_algorithm"}, {"score": 0.003977505904363489, "phrase": "general_coarse-grained_model"}, {"score": 0.0034194194985380268, "phrase": "communication_rounds"}, {"score": 0.0032272929113113203, "phrase": "existing_linear-time_algorithm"}, {"score": 0.003128336741911927, "phrase": "theoretical_completeness"}, {"score": 0.003032405563826263, "phrase": "fine-grained_models"}, {"score": 0.002952516738708181, "phrase": "computation_and_communication_throughputs"}, {"score": 0.0027865506182608263, "phrase": "individual_processor"}, {"score": 0.002438203996977464, "phrase": "scalability_factor"}, {"score": 0.00221068461235127, "phrase": "algorithm_performance"}, {"score": 0.0021049977753042253, "phrase": "sgi_origin"}], "paper_keywords": ["cluster computing", " tournaments", " Hamiltonian path", " parallel computing", " graph applications"], "paper_abstract": "This paper presents a general methodology for the communication-efficient parallelization of graph algorithms using the divide-and-conquer approach and shows that this class of problems can be solved in cluster environments with good communication efficiency. Specifically, the first practical parallel algorithm, based on a general coarse-grained model, for finding Hamiltonian paths in tournaments is presented. On any such parallel machines, this algorithm uses only (3 log p + 1), where p is the number of processors, communication rounds, which is independent of the tournament size, and can reuse the existing linear-time algorithm in the sequential setting. For theoretical completeness, the algorithm is revised for fine-grained models, where the ratio of computation and communication throughputs is low or the local memory size, O(N/P) of each individual processor is extremely limited (N/P >= p(epsilon), for any E > 0), solving the problem with O(log p) communication rounds, while the hidden constant grows with the scalability factor 1/epsilon. Experiments have been carried out on a Linux cluster of 32 Sun Ultra5 computers and an SGI Origin 2000 with 32 R10000 processors. The algorithm performance on the Linux Cluster reaches 75% of the performance on the SGI Origin 2000 when the tournament size is about one million.", "paper_title": "Finding Hamiltonian paths in tournaments on clusters", "paper_id": "WOS:000240903400010"}