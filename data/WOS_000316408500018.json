{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "nash_equilibrium"}, {"score": 0.0497037705756037, "phrase": "game_theory"}, {"score": 0.004739773204474094, "phrase": "prescheduling_algorithms"}, {"score": 0.00462919213721188, "phrase": "task_graphs"}, {"score": 0.004592905436175987, "phrase": "optimal_scheduling"}, {"score": 0.004556901872357751, "phrase": "task_graph_scheduling"}, {"score": 0.004503422625191897, "phrase": "np-complete_problem"}, {"score": 0.004398331355940011, "phrase": "prescheduling_algorithm"}, {"score": 0.004228577663320847, "phrase": "homogeneous_processors"}, {"score": 0.004178935413340453, "phrase": "proposed_algorithm"}, {"score": 0.0040334640350288, "phrase": "overall_completion_time"}, {"score": 0.0034185505275141077, "phrase": "task_graph"}, {"score": 0.0033255627814855163, "phrase": "distinct_parallel_processors"}, {"score": 0.0030254743224136247, "phrase": "appropriate_number"}, {"score": 0.002931569771634119, "phrase": "overall_idle_time"}, {"score": 0.002785133616425661, "phrase": "communication_delay"}, {"score": 0.0026355812883224203, "phrase": "known_benchmarks"}, {"score": 0.0025038930574283174, "phrase": "gauss-jordan"}, {"score": 0.002455009746748708, "phrase": "distinguished_scheduling_results"}, {"score": 0.0023507916951658455, "phrase": "ten_scheduling_algorithms"}, {"score": 0.0021049977753042253, "phrase": "task_duplication"}], "paper_keywords": ["Prescheduling", " Scheduling", " Task graph", " Game theory", " Nash equilibrium"], "paper_abstract": "Prescheduling algorithms are targeted at restructuring of task graphs for optimal scheduling. Task graph scheduling is a NP-complete problem. This article offers a prescheduling algorithm for tasks to be executed on the networks of homogeneous processors. The proposed algorithm merges tasks to minimize their earliest start time while reducing the overall completion time. To this end, considering each task as a player attempting to reduce its earliest time as much as possible, we have applied the idea of Nash equilibrium in game theory to determine the most appropriate merging. Also, considering each level of a task graph as a player, seeking for distinct parallel processors to execute each of its independent tasks in parallel with the others, the idea of Nash equilibrium in game theory can be applied to determine the appropriate number of processors in a way that the overall idle time of the processors is minimized and the throughput is maximized. The communication delay will be explicitly considered in the comparisons. Our experiments with a number of known benchmarks task graphs and also two well-known problems of linear algebra, LU decomposition and Gauss-Jordan elimination, demonstrate the distinguished scheduling results provided by applying our algorithm. In our study, we consider ten scheduling algorithms: min-min, chaining, A (au), genetic algorithms, simulated annealing, tabu search, HLFET, ISH, DSH with task duplication, and our proposed algorithm (PSGT).", "paper_title": "Task graph pre-scheduling, using Nash equilibrium in game theory", "paper_id": "WOS:000316408500018"}