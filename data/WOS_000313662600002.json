{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "heterogeneous_data"}, {"score": 0.004518442937844318, "phrase": "inverted_index"}, {"score": 0.003887894704361635, "phrase": "data_features"}, {"score": 0.0038210283935447473, "phrase": "real_dataspaces"}, {"score": 0.0034832884999421374, "phrase": "query_processing"}, {"score": 0.0033450437338616596, "phrase": "vertical_partitioning_index"}, {"score": 0.0028446460307503343, "phrase": "compressed_list"}, {"score": 0.002795671770303977, "phrase": "horizontal_partitioning_index"}, {"score": 0.0026691455928407022, "phrase": "top-k_query"}, {"score": 0.002548331088496964, "phrase": "computation_overhead"}, {"score": 0.002518989593177879, "phrase": "irrelevant_candidate_tuples"}, {"score": 0.002363532907211947, "phrase": "hybrid_index"}, {"score": 0.0023228223366301226, "phrase": "vertical_and_horizontal_partitioning"}, {"score": 0.0022828113789751694, "phrase": "extensive_experiment_results"}, {"score": 0.0022565201625076876, "phrase": "real_data_sets"}, {"score": 0.0021794454466797382, "phrase": "previous_techniques"}, {"score": 0.0021049977753042253, "phrase": "large_data_size"}], "paper_keywords": ["partitioning index", " dataspaces"], "paper_abstract": "Dataspaces are recently proposed to manage heterogeneous data, with features like partially unstructured, high dimension and extremely sparse. The inverted index has been previously extended to retrieve dataspaces. In order to achieve more efficient access to dataspaces, in this paper, we first introduce our survey of data features in the real dataspaces. Based on the features observed in our study, several partitioning based index approaches are proposed to accelerate the query processing in dataspaces. Specifically, the vertical partitioning index utilizes the partitions on tokens to merge and compress data. We can both reduce the number of I/O reads and avoid aggregation of data inside a compressed list. The horizontal partitioning index supports pruning partitions of tuples in the top-k query. Thus, we can reduce the computation overhead of irrelevant candidate tuples to the query. Finally, we also propose a hybrid index with both vertical and horizontal partitioning. The extensive experiment results in real data sets demonstrate that our approaches outperform the previous techniques and scale well with the large data size.", "paper_title": "Indexing dataspaces with partitions", "paper_id": "WOS:000313662600002"}