{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "reflective_runtime_environment"}, {"score": 0.029662559436015954, "phrase": "proposed_algorithm"}, {"score": 0.004754600386388821, "phrase": "message_dispatch"}, {"score": 0.00469500313566324, "phrase": "object-oriented_programming"}, {"score": 0.004636164587117596, "phrase": "oop"}, {"score": 0.004549242970806199, "phrase": "target_method_lookup"}, {"score": 0.004435885269134359, "phrase": "reflective_environment"}, {"score": 0.004380265418103948, "phrase": "dispatch_data-structure"}, {"score": 0.003984665807155269, "phrase": "reflective_environments"}, {"score": 0.003934681262271618, "phrase": "dynamic_data_structure"}, {"score": 0.0036707250689857348, "phrase": "tree-based_algorithm"}, {"score": 0.0035120164504478437, "phrase": "new_classes"}, {"score": 0.00301801991152303, "phrase": "polymorphic_arguments"}, {"score": 0.0027625134766418266, "phrase": "type-safe_approach"}, {"score": 0.002512650904797186, "phrase": "dispatch_mechanism"}, {"score": 0.0024192705050330955, "phrase": "java"}, {"score": 0.0023887709892250765, "phrase": "microsoft"}, {"score": 0.0023587312574818208, "phrase": "common_language_runtime"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["object-oriented programming", " message dispatch", " dynamic dispatch", " multimethods", " reflection", " virtual table", " Java", " Microsoft's common language runtime"], "paper_abstract": "Message dispatch in object-oriented programming (OOP) involves target method lookup in dispatch table/tree. Reflective environment builds dispatch data-structure at runtime as types can be added at runtime. Hence, algorithms for reflective environments require dynamic data structure for dispatch. In this paper, we propose a tree-based algorithm for multiple dispatch in reflective runtime environment. New classes can be added to the system at runtime. Proposed algorithm per-forms lookup in time proportional to log(n) times the polymorphic arguments, where n is number of classes in a system. Proposed algorithm uses type-safe approach for multimethod lookup resolving ambiguities. We compare performance of the proposed algorithm with the dispatch mechanism in commonly used virtual/reflexive systems, e.g., Java and Microsoft's Common Language Runtime (MS-CLR), in respect of efficiency and type-safety. (c) 2005 Elsevier Ltd. All rights reserved.", "paper_title": "Multiple dispatch in reflective runtime environment", "paper_id": "WOS:000243811700002"}