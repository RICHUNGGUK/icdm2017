{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "queue_compiler"}, {"score": 0.004747429622531595, "phrase": "queue_processors"}, {"score": 0.004647911247507267, "phrase": "viable_alternative"}, {"score": 0.004582722012454012, "phrase": "high_performance_embedded_computing"}, {"score": 0.004092937456065441, "phrase": "queue-based_processor"}, {"score": 0.003950846696972114, "phrase": "queue_processor"}, {"score": 0.0037073529462522403, "phrase": "false_dependencies"}, {"score": 0.003578600071301459, "phrase": "queue_machine"}, {"score": 0.003503497128638099, "phrase": "traditional_compilation_methods"}, {"score": 0.0034543031591181546, "phrase": "register_machines"}, {"score": 0.003195787852087248, "phrase": "level-order_manner"}, {"score": 0.0031286936417685178, "phrase": "natural_parallelism"}, {"score": 0.0030414140732789186, "phrase": "relative_offset_values"}, {"score": 0.00281371157349156, "phrase": "data_structures"}, {"score": 0.002677744558540711, "phrase": "c_programs"}, {"score": 0.002640114583897493, "phrase": "assembly_code"}, {"score": 0.0025846562485378247, "phrase": "queuecore"}, {"score": 0.0024597305738431226, "phrase": "experimental_results"}, {"score": 0.0023742031943872464, "phrase": "good_code"}, {"score": 0.002275477757478827, "phrase": "code_size"}, {"score": 0.0021501863832966966, "phrase": "traditional_compiler"}, {"score": 0.0021049977753042253, "phrase": "risc_processor"}], "paper_keywords": ["Compiler", " Queue processor", " Code generation", " Intermediate representation"], "paper_abstract": "Queue processors are a viable alternative for high performance embedded computing and parallel processing. We present the design and implementation of a compiler for a queue-based processor. Instructions of a queue processor implicitly reference their operands making the programs free of false dependencies. Compiling for a queue machine differs from traditional compilation methods for register machines. The queue compiler is responsible for scheduling the program in level-order manner to expose natural parallelism and calculating instructions relative offset values to access their operands. This paper describes the phases and data structures used in the queue compiler to compile C programs into assembly code for the QueueCore, an embedded queue processor. Experimental results demonstrate that our compiler produces good code in terms of parallelism and code size when compared to code produced by a traditional compiler for a RISC processor. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Design and implementation of a queue compiler", "paper_id": "WOS:000264968700004"}