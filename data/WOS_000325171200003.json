{"auto_keywords": [{"score": 0.046481645015043, "phrase": "flash-based_storage_devices"}, {"score": 0.035289135098248124, "phrase": "bagc"}, {"score": 0.03063672912589485, "phrase": "buffer_cache"}, {"score": 0.028976366055935968, "phrase": "buffer-aware_block_merge"}, {"score": 0.00481495049065317, "phrase": "flash-based_storage_systems"}, {"score": 0.004765173195920904, "phrase": "nand_flash-based_storage_device"}, {"score": 0.004667149874736771, "phrase": "viable_storage_solution"}, {"score": 0.004618893461411858, "phrase": "mobile_and_desktop_systems"}, {"score": 0.004500414250942443, "phrase": "erase-before-write_nature"}, {"score": 0.004317109072311102, "phrase": "significant_performance_degradation"}, {"score": 0.00422826362023938, "phrase": "large_number"}, {"score": 0.004184526032558792, "phrase": "page_migrations"}, {"score": 0.0038106195546165574, "phrase": "efficient_garbage_collection_algorithm"}, {"score": 0.0036363418376496484, "phrase": "novel_garbage_collection_technique"}, {"score": 0.003226209534553224, "phrase": "garbage_collection"}, {"score": 0.0026471739851621143, "phrase": "unnecessary_page_migrations"}, {"score": 0.0026061419474030633, "phrase": "dirty_data"}, {"score": 0.0025259712348798323, "phrase": "block_merge_step"}, {"score": 0.0024868131939261716, "phrase": "buffer-aware_victim_block_selection"}, {"score": 0.0023361440016375972, "phrase": "victim_block"}, {"score": 0.0021049977753042253, "phrase": "existing_buffer-unaware_schemes"}], "paper_keywords": ["NAND flash memory", " flash translation layer (FTL)", " buffer management", " garbage collection"], "paper_abstract": "NAND flash-based storage device is becoming a viable storage solution for mobile and desktop systems. Because of the erase-before-write nature, flash-based storage devices require garbage collection that causes significant performance degradation, incurring a large number of page migrations and block erasures. To improve I/O performance, therefore, it is important to develop an efficient garbage collection algorithm. In this paper, we propose a novel garbage collection technique, called buffer-aware garbage collection (BAGC), for flash-based storage devices. The BAGC improves the efficiency of two main steps of garbage collection, a block merge step and a victim block selection step, by taking account of the contents of a buffer cache, which is typically used to enhance I/O performance. The buffer-aware block merge (BABM) scheme eliminates unnecessary page migrations by evicting dirty data from a buffer cache during a block merge step. The buffer-aware victim block selection (BAVBS) scheme, on the other hand, selects a victim block so that the benefit of the buffer-aware block merge is maximized. Our experimental results show that BAGC improves I/O performance by up to 43 percent over existing buffer-unaware schemes for various benchmarks.", "paper_title": "BAGC: Buffer-Aware Garbage Collection for Flash-Based Storage Systems", "paper_id": "WOS:000325171200003"}