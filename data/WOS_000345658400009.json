{"auto_keywords": [{"score": 0.04204898741255952, "phrase": "full_aeolus_model"}, {"score": 0.040204964897104456, "phrase": "non-functional_requirements"}, {"score": 0.00481495049065317, "phrase": "aeolus_component_model"}, {"score": 0.004667833113864304, "phrase": "realistic_scenarios"}, {"score": 0.004560438999891081, "phrase": "distributed_applications"}, {"score": 0.004507667881645218, "phrase": "so-called_cloud_environments"}, {"score": 0.004319322238010043, "phrase": "heterogeneous_virtual_machines"}, {"score": 0.003756021561809324, "phrase": "load_limits"}, {"score": 0.003627028894710926, "phrase": "component_interfaces"}, {"score": 0.0035024506353894644, "phrase": "internal_component_state"}, {"score": 0.0029292922955739963, "phrase": "desired_target_system_configuration"}, {"score": 0.0026477564788515984, "phrase": "achievability_problem"}, {"score": 0.0024119038123496454, "phrase": "ackermann"}, {"score": 0.0022664208122072657, "phrase": "polynomial_time_algorithm"}, {"score": 0.0021799789348982534, "phrase": "inter-component_conflicts"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software component", " Model", " Cloud computing", " Distributed systems"], "paper_abstract": "We introduce the Aeolus component model, which is specifically designed to capture realistic scenarios arising when configuring and deploying distributed applications in the so-called cloud environments, where interconnected components can be deployed on clusters of heterogeneous virtual machines, which can be in turn created, destroyed, and connected on-the-fly. The full Aeolus model is able to describe several component characteristics such as dependencies, conflicts, non-functional requirements (replication requests and load limits), as well as the fact that component interfaces to the world might vary depending on the internal component state. When the number of components needed to build an application grows, it becomes important to be able to automate activities such as deployment and reconfiguration. This corresponds, at the level of the model, to the ability to decide whether a desired target system configuration is reachable, which we call the achievability problem, and producing a path to reach it. In this work we show that the achievability problem is undecidable for the full Aeolus model, a strong limiting result for automated configuration in the cloud. We also show that the problem becomes decidable, but Ackermann-hard, as soon as one drops non-functional requirements. Finally, we provide a polynomial time algorithm for the further restriction of the model where support for inter-component conflicts is also removed. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Aeolus: A component model for the cloud", "paper_id": "WOS:000345658400009"}