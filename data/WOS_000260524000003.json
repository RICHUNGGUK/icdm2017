{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "suffix_trees"}, {"score": 0.033967181989756026, "phrase": "suffix_arrays"}, {"score": 0.017046374595211702, "phrase": "sigma"}, {"score": 0.00783942791582363, "phrase": "enhanced_suffix_array"}, {"score": 0.006187519135283611, "phrase": "efficient_index_data_structures"}, {"score": 0.005046796676754959, "phrase": "suffix_tree"}, {"score": 0.004683618147754759, "phrase": "fundamental_full-text_index_data_structures"}, {"score": 0.004587464246981363, "phrase": "string_processing"}, {"score": 0.004477765573115626, "phrase": "different_capabilities"}, {"score": 0.004201808675654529, "phrase": "linearized_suffix_tree"}, {"score": 0.0036891952845575036, "phrase": "enhanced_suffix_arrays"}, {"score": 0.0030601947866320403, "phrase": "linearized_suffix_trees"}, {"score": 0.002739165532192527, "phrase": "pattern_search"}, {"score": 0.0026367554281038572, "phrase": "different_point"}, {"score": 0.0025558124513934584, "phrase": "practical_implementation"}, {"score": 0.0024945743145462144, "phrase": "vertical_bar"}, {"score": 0.0023600418563602303, "phrase": "suffix_links"}, {"score": 0.002271773887265199, "phrase": "first_algorithms"}, {"score": 0.0021049977753042253, "phrase": "previous_algorithms"}], "paper_keywords": ["Suffix trees", " Suffix arrays", " Index data structures", " String algorithms"], "paper_abstract": "Suffix trees and suffix arrays are fundamental full-text index data structures to solve problems occurring in string processing. Since suffix trees and suffix arrays have different capabilities, some problems are solved more efficiently using suffix trees and others are solved more efficiently using suffix arrays. We consider efficient index data structures with the capabilities of both suffix trees and suffix arrays without requiring much space. When the size of an alphabet is small, enhanced suffix arrays are such index data structures. However, when the size of an alphabet is large, enhanced suffix arrays lose the power of suffix trees. Pattern searching in an enhanced suffix array takes O(m vertical bar Sigma vertical bar) time while pattern searching in a suffix tree takes O(m log vertical bar Sigma vertical bar) time where m is the length of a pattern and Sigma is an alphabet. In this paper, we present linearized suffix trees which are efficient index data structures with the capabilities of both suffix trees and suffix arrays even when the size of an alphabet is large. A linearized suffix tree has all the functionalities of the enhanced suffix array and supports the pattern search in O(m log vertical bar Sigma vertical bar) time. In a different point of view, it can be considered a practical implementation of the suffix tree supporting O(m log vertical bar Sigma vertical bar)-time pattern search. In addition, we also present two efficient algorithms for computing suffix links on the enhanced suffix array and the linearized suffix tree. These are the first algorithms that run in O(n) time without using the range minima query. Our experimental results show that our algorithms are faster than the previous algorithms.", "paper_title": "Linearized Suffix Tree: an Efficient Index Data Structure with the Capabilities of Suffix Trees and Suffix Arrays", "paper_id": "WOS:000260524000003"}