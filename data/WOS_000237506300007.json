{"auto_keywords": [{"score": 0.049496721057450455, "phrase": "direct_search"}, {"score": 0.00481495049065317, "phrase": "whole_applications"}, {"score": 0.004669845451682529, "phrase": "performance-based_transformation_system"}, {"score": 0.004501453956464956, "phrase": "simple_analytical_models"}, {"score": 0.004419538941706716, "phrase": "traditional_compilers"}, {"score": 0.004234129588974058, "phrase": "effectively_optimized_code"}, {"score": 0.0041825926310470616, "phrase": "complex_programs"}, {"score": 0.004081385289516914, "phrase": "enormous_complexity"}, {"score": 0.004031699976413366, "phrase": "processor_architectures"}, {"score": 0.003958299299658418, "phrase": "promising_alternative_approach"}, {"score": 0.003910106508089187, "phrase": "optimizing_applications"}, {"score": 0.0037459885494311217, "phrase": "search-based_empirical_methods"}, {"score": 0.0036329805216306576, "phrase": "empirically_tuned_library_generators"}, {"score": 0.0035676388246264367, "phrase": "atlas"}, {"score": 0.0033548062793973144, "phrase": "domain-specific_programs"}, {"score": 0.0031553611552558986, "phrase": "general-purpose_tool"}, {"score": 0.003116913644889395, "phrase": "effective_empirical_optimization"}, {"score": 0.0030789331635764122, "phrase": "whole_programs"}, {"score": 0.003022825806274343, "phrase": "main_obstacle"}, {"score": 0.002825681384008326, "phrase": "prohibitively_large_number"}, {"score": 0.002791239714439304, "phrase": "alternative_program_variants"}, {"score": 0.0026091594819333654, "phrase": "prototype_tool"}, {"score": 0.00257735013358606, "phrase": "automatic_application_tuning"}, {"score": 0.002530359917257626, "phrase": "loop-level_performance_feedback"}, {"score": 0.0024842242921857705, "phrase": "direct_search_strategy"}, {"score": 0.0023944552329463035, "phrase": "best_set"}, {"score": 0.0023652572260178637, "phrase": "optimization_parameters"}, {"score": 0.002210903392596343, "phrase": "effective_technique"}, {"score": 0.0021705796895687864, "phrase": "good_values"}, {"score": 0.0021441057555396013, "phrase": "transformation_parameters"}, {"score": 0.0021049977753042253, "phrase": "reasonable_time"}], "paper_keywords": [""], "paper_abstract": "In many cases, simple analytical models used by traditional compilers are no longer able to yield effectively optimized code for complex programs because of the enormous complexity of processor architectures. A promising alternative approach for optimizing applications effectively has been the use of search-based empirical methods. The success of empirically tuned library generators such as ATLAS has shown that this strategy can be effective for domain-specific programs. However, to date there has been no general-purpose tool for effective empirical optimization of whole programs. The main obstacle to this approach has been the need for evaluating a prohibitively large number of alternative program variants. To address this problem, we have developed a prototype tool for automatic application tuning that uses loop-level performance feedback and a direct search strategy to guide search for the best set of optimization parameters. Experiments on four different architectures show that direct search can be an effective technique for finding good values for transformation parameters in a reasonable time.", "paper_title": "Automatic tuning of whole applications using direct search and a performance-based transformation system", "paper_id": "WOS:000237506300007"}