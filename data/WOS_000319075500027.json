{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "gridsolve"}, {"score": 0.005326163666862013, "phrase": "service_trading_component"}, {"score": 0.0047588556219929756, "phrase": "request_sequencing"}, {"score": 0.00470341117804131, "phrase": "service_trading"}, {"score": 0.004567596860086148, "phrase": "rpc-based_client-agent-server_model"}, {"score": 0.004207734323806386, "phrase": "computational_problem"}, {"score": 0.0039218440805789965, "phrase": "data_dependencies"}, {"score": 0.0037862398004482253, "phrase": "intermediate_results"}, {"score": 0.0035705347414368696, "phrase": "unnecessary_data_transport"}, {"score": 0.0033868916699805224, "phrase": "individual_task"}, {"score": 0.0033277936960179892, "phrase": "separate_rpc_session"}, {"score": 0.003175175896313016, "phrase": "potential_parallelism"}, {"score": 0.0030295361111006866, "phrase": "request_sequencing_technique"}, {"score": 0.0029075757820516634, "phrase": "workflow_executions"}, {"score": 0.0028234703730349916, "phrase": "request_sequencing_work"}, {"score": 0.0026624684547385718, "phrase": "higher_level_service_requests"}, {"score": 0.002540285736232122, "phrase": "simpler_service_requests"}, {"score": 0.002272053079580848, "phrase": "new_dynamic_request_sequencing"}, {"score": 0.0021805201234139475, "phrase": "automatic_dag_construction"}, {"score": 0.0021550502873107654, "phrase": "data_dependency_analysis"}, {"score": 0.002129877319760485, "phrase": "direct_interserver_data_transfer"}, {"score": 0.0021049977753042253, "phrase": "parallel_task_execution_capabilities"}], "paper_keywords": ["Grid computing", " Workflow applications", " Service trading"], "paper_abstract": "GridSolve employs a RPC-based client-agent-server model for solving computational problems. There are two deficiencies associated with GridSolve when a computational problem essentially forms a workflow consisting of a sequence of tasks with data dependencies between them. First, intermediate results are always passed through the client, resulting in unnecessary data transport. Second, since the execution of each individual task is a separate RPC session, it is difficult to enable any potential parallelism among tasks. This paper presents a request sequencing technique that addresses these deficiencies and enables workflow executions. Building on the request sequencing work, one way to generate workflows is by taking higher level service requests and decomposing them into a sequence of simpler service requests using a technique called service trading. A service trading component is added to GridSolve to take advantage of the new dynamic request sequencing. The features described here include automatic DAG construction and data dependency analysis, direct interserver data transfer, parallel task execution capabilities, and a service trading component.", "paper_title": "Enabling workflows in GridSolve: request sequencing and service trading", "paper_id": "WOS:000319075500027"}