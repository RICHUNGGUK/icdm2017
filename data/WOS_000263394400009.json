{"auto_keywords": [{"score": 0.03612945938560607, "phrase": "parameter_space"}, {"score": 0.01250973706204784, "phrase": "pqo"}, {"score": 0.00481495049065317, "phrase": "commercial_applications"}, {"score": 0.004693167092003573, "phrase": "precompiled_parameterized_procedures"}, {"score": 0.004076157223660074, "phrase": "compilation_time"}, {"score": 0.0035627492415494216, "phrase": "optimal_plans"}, {"score": 0.0033845816848753073, "phrase": "compile_time"}, {"score": 0.0025034338848015187, "phrase": "parametric_plan"}, {"score": 0.0023029886389559122, "phrase": "parametric_plans"}, {"score": 0.0021049977753042253, "phrase": "optimal_or_near-optimal_plans"}], "paper_keywords": ["Parametric query optimization", " adaptive optimization", " selectivity estimation"], "paper_abstract": "Commercial applications usually rely on precompiled parameterized procedures to interact with a database. Unfortunately, executing a procedure with a set of parameters different from those used at compilation time may be arbitrarily suboptimal. Parametric query optimization (PQO) attempts to solve this problem by exhaustively determining the optimal plans at each point of the parameter space at compile time. However, PQO is likely not cost-effective if the query is executed infrequently or if it is executed with values only within a subset of the parameter space. In this paper, we propose instead to progressively explore the parameter space and build a parametric plan during several executions of the same query. We introduce algorithms that, as parametric plans are populated, are able to frequently bypass the optimizer but still execute optimal or near-optimal plans.", "paper_title": "Progressive Parametric Query Optimization", "paper_id": "WOS:000263394400009"}