{"auto_keywords": [{"score": 0.048670301158495306, "phrase": "array_shapes"}, {"score": 0.025384655869190576, "phrase": "symbolic_shapes"}, {"score": 0.0044685410845412745, "phrase": "implicit_and_dynamic_typing"}, {"score": 0.004402295697276237, "phrase": "critical_one"}, {"score": 0.004230382915464492, "phrase": "better_organization"}, {"score": 0.004188459638572375, "phrase": "array_storage"}, {"score": 0.003984968827278219, "phrase": "high-performance_code"}, {"score": 0.00367967106192446, "phrase": "dynamically_typed_array_language"}, {"score": 0.0036432065233260235, "phrase": "matlab."}, {"score": 0.0035358770665604657, "phrase": "language's_shape_semantics"}, {"score": 0.0034834098902271626, "phrase": "algebraic_system"}, {"score": 0.0032324864013225166, "phrase": "prior_efforts"}, {"score": 0.0032004205378150354, "phrase": "array_shape_determination"}, {"score": 0.0030906666356950887, "phrase": "valuable_shape_information"}, {"score": 0.003044785536429499, "phrase": "array_extents"}, {"score": 0.003014576010931602, "phrase": "compile-time_unknowns"}, {"score": 0.002925728709297618, "phrase": "previous_methods"}, {"score": 0.0028394925080958205, "phrase": "monotonicity_requirements"}, {"score": 0.002797329638474873, "phrase": "operator's_shape_semantics"}, {"score": 0.002701361707441567, "phrase": "inference_methodology"}, {"score": 0.0026217213613095322, "phrase": "type_inference_engine"}, {"score": 0.0025571463140118805, "phrase": "benchmark_suite"}, {"score": 0.0024941578231560055, "phrase": "shape_inference_subsystem"}, {"score": 0.0023609780669713288, "phrase": "six_programs"}, {"score": 0.0021907299375981356, "phrase": "remaining_nine_programs"}, {"score": 0.0021049977753042253, "phrase": "compile-time_constants"}], "paper_keywords": ["typeless array languages", " shape algebras", " term rewriting"], "paper_abstract": "The problem of inferring array shapes ahead of time in languages that exhibit both implicit and dynamic typing is a critical one because the ramifications of its solution are the better organization of array storage through compaction and reuse, and the generation of high-performance code through specialization by shape. This article addresses the problem in a prototypical implicitly and dynamically typed array language called MATLAB. The approach involves modeling the language's shape semantics using an algebraic system, and applying term rewriting techniques to evaluate expressions under this algebra. Unlike prior efforts at array shape determination, this enables the deduction of valuable shape information even when array extents are compile-time unknowns. Furthermore, unlike some previous methods, our approach doesn't impose monotonicity requirements on an operator's shape semantics. The work also describes an inference methodology and reports measurements from a type inference engine called. In a benchmark suite of 17 programs, the shape inference subsystem in detected the equivalence of over 61% of the symbolic shapes in six programs, and over 57% and 37% of the symbolic shapes in two others. In the remaining nine programs, all array shapes were inferred to be compile-time constants.", "paper_title": "An algebraic array shape inference system for MATLAB (R)", "paper_id": "WOS:000240456900002"}