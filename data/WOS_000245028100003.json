{"auto_keywords": [{"score": 0.04411400524709544, "phrase": "sampling_filter"}, {"score": 0.012711581360622344, "phrase": "trace_cache"}, {"score": 0.005940100350824794, "phrase": "\"hot_traces"}, {"score": 0.0055773964145386075, "phrase": "\"cold_traces"}, {"score": 0.00481495049065317, "phrase": "simple_mechanism"}, {"score": 0.00470983237900705, "phrase": "small_trace_cache"}, {"score": 0.004572774978079945, "phrase": "previously_proposed_filters"}, {"score": 0.004478061063857035, "phrase": "selective_storage"}, {"score": 0.004325339932975582, "phrase": "new_concept"}, {"score": 0.004298134888203576, "phrase": "computer_architecture"}, {"score": 0.004022568802760774, "phrase": "first_group"}, {"score": 0.0039800890878974905, "phrase": "miss_rate"}, {"score": 0.0038124354878360032, "phrase": "committed_instructions"}, {"score": 0.003776504983530801, "phrase": "second_group"}, {"score": 0.00355665081072721, "phrase": "unfiltered_cache"}, {"score": 0.003467940281748612, "phrase": "prior_knowledge"}, {"score": 0.0032148229832850215, "phrase": "cache_turnover"}, {"score": 0.0031644543425642575, "phrase": "higher_quality_traces"}, {"score": 0.002905752244360772, "phrase": "minimal_hardware"}, {"score": 0.002626317051411829, "phrase": "performance-power_efficiency"}, {"score": 0.0025285834281312705, "phrase": "basic_sampling_filter"}, {"score": 0.002373690110881497, "phrase": "replacement_policy"}, {"score": 0.0021317885325570604, "phrase": "sampling_principle"}], "paper_keywords": ["performance", " measurement", " trace cache", " sampling filter", " power dissipation", " cache utilization"], "paper_abstract": "A simple mechanism to increase the utilization of a small trace cache, and simultaneously reduce its power consumption, is presented in this article. The mechanism uses selective storage of traces (filtering) that is based on a new concept in computer architecture: random sampling. The sampling filter exploits the \"hot/cold trace\" principle, which divides the population of traces into two groups. The first group contains \"hot traces\" that are executed many times from the trace cache and contribute the majority of committed instructions. The second group contains \"cold traces\" that are rarely executed, but are responsible for the majority of writes to an unfiltered cache. The sampling filter selects traces without any prior knowledge of their quality. However, as most writes to the cache are of \"cold traces\" it statistically filters out those traces, reducing cache turnover and eventually leading to higher quality traces residing in the cache. In contrast with previously proposed filters, which perform bookkeeping for all traces in the program, the sampling filter can be implemented with minimal hardware. Results show that the sampling filter can increase the number of hits per build (utilization) by a factor of 38, reduce the miss rate by 20% and improve the performance-power efficiency by 15%. Further improvements can be obtained by extensions to the basic sampling filter: allowing \"hot traces\" to bypass the sampling filter, combining of sampling together with previously proposed filters, and changing the replacement policy in the trace cache. Those techniques combined with the sampling filter can reduce the miss rate of the trace cache by up to 40%. Although the effectiveness of the sampling filter is demonstrated for a trace cache, the sampling principle is applicable to other micro-architectural structures with similar access patterns.", "paper_title": "Trace cache sampling filter", "paper_id": "WOS:000245028100003"}