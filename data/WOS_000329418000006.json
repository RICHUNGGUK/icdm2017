{"auto_keywords": [{"score": 0.04950097558699653, "phrase": "dynamic_languages"}, {"score": 0.0395439695747933, "phrase": "prototype-based_object_model"}, {"score": 0.03161667651468132, "phrase": "competitive_runtime_performance"}, {"score": 0.00481495049065317, "phrase": "language-neutral_structural_intercession"}, {"score": 0.004628522534620679, "phrase": "specific_applications"}, {"score": 0.0046004861111734185, "phrase": "runtime_adaptability"}, {"score": 0.004558748120167778, "phrase": "important_issue"}, {"score": 0.004517387079319428, "phrase": "net_and_java_platforms"}, {"score": 0.004136333933790974, "phrase": "rigid_class-based_object_model"}, {"score": 0.004024716151211568, "phrase": "flexible_prototype-based_model"}, {"score": 0.0037873013080596137, "phrase": "hybrid_class-"}, {"score": 0.0037188360359702182, "phrase": "structural_intercession"}, {"score": 0.003685067218455088, "phrase": "object_model"}, {"score": 0.0035967016100685416, "phrase": "java"}, {"score": 0.003520751317164754, "phrase": "previous_work"}, {"score": 0.0034152842718313888, "phrase": "shared-source_implementation"}, {"score": 0.003384262486955773, "phrase": "net_platform"}, {"score": 0.003292872031718798, "phrase": "formal_semantics"}, {"score": 0.0032629585038738856, "phrase": "proposed_reflective_model"}, {"score": 0.0032137033371524852, "phrase": "existing_implementation"}, {"score": 0.0031748333717241456, "phrase": "hybrid_model"}, {"score": 0.003098493792759094, "phrase": "memory_consumption"}, {"score": 0.003051713660488494, "phrase": "existing_approaches"}, {"score": 0.0028454331415283213, "phrase": "second_fastest_system"}, {"score": 0.002828166765606611, "phrase": "short-_and_long-running_applications"}, {"score": 0.002751751956416832, "phrase": "jit-compiler_approach"}, {"score": 0.0027019561451518746, "phrase": "proposed_approach"}, {"score": 0.002669259222649505, "phrase": "hybrid_object-model"}, {"score": 0.002644995764097807, "phrase": "virtual_machine"}, {"score": 0.0025578967205807843, "phrase": "existing_alternative"}, {"score": 0.002526938673434697, "phrase": "extra_software_layer"}, {"score": 0.0024511688853030168, "phrase": "new_features"}, {"score": 0.0023560464785206095, "phrase": "original_net_implementation"}, {"score": 0.0022101055924375725, "phrase": "existing_jit-compiler_class-based_platforms"}, {"score": 0.0021438155673297377, "phrase": "low_memory_consumption"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Structural intercession", " Duck typing", " Prototype-based object model", " Reflection", " Virtual machine", " Dynamic languages"], "paper_abstract": "Context: Dynamic languages have turned out to be suitable for developing specific applications where runtime adaptability is an important issue. Although NET and Java platforms have gradually incorporated features to improve their support of dynamic languages, they do not provide intercession for every object or class. This limitation is mainly caused by the rigid class-based object model these platforms implement, in contrast to the flexible prototype-based model used by most dynamic languages. Objective: Our approach is to provide intercession for any object or class by defining a hybrid class- and prototype-based object model that efficiently incorporates structural intercession into the object model implemented by the widespread.NET and Java platforms. Method: In a previous work, we developed and evaluated an extension of a shared-source implementation of the NET platform. In this work, we define the formal semantics of the proposed reflective model, and modify the existing implementation to include the hybrid model. Finally, we assess its runtime performance and memory consumption, comparing it to existing approaches. Results: Our platform shows a competitive runtime performance compared to 9 widespread systems. On average, it performs 73% and 61% better than the second fastest system for short- and long-running applications, respectively. Besides, it is the JIT-compiler approach that consumes less average memory. The proposed approach of including a hybrid object-model into the virtual machine involves a 444% performance improvement (and 65% less memory consumption) compared to the existing alternative of creating an extra software layer (the DLR). When none of the new features are used, our platform requires 12% more execution time and 13% more memory than the original NET implementation. Conclusion: Our proposed hybrid class- and prototype-based object model supports structural intercession for any object or class. It can be included in existing JIT-compiler class-based platforms to support common dynamic languages, providing competitive runtime performance and low memory consumption. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A hybrid class- and prototype-based object model to support language-neutral structural intercession", "paper_id": "WOS:000329418000006"}