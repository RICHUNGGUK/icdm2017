{"auto_keywords": [{"score": 0.003490056936165004, "phrase": "encountered_program"}, {"score": 0.0034134024569847264, "phrase": "new_natural_language"}, {"score": 0.0029544572689681934, "phrase": "program_language"}, {"score": 0.0028260302580927856, "phrase": "program_semantics"}, {"score": 0.002643753276264565, "phrase": "code_semantics"}, {"score": 0.0023265270905455334, "phrase": "new_insight"}, {"score": 0.0021885300925245516, "phrase": "new_perspective"}, {"score": 0.002152332983488664, "phrase": "intense_complexity"}], "paper_keywords": ["Languages", " Program Language"], "paper_abstract": "In this paper we explore the idea that the code that constitutes a program actually forms a higher-level, program specific language. The symbols of the language are the abstractions of the program, and the grammar of the language is the set of (generally unwritten) rules about the allowable combinations of those abstractions. As such, a program is both a language definition, and the only use of that language. This specificity means that reading a never-before encountered program involves learning a new natural language, and that porting code from one program to another requires translation from one natural language into another. We suggest that the complexity and depth of the program language is affected by the gap between the program semantics (what the program is meant to do) and the code semantics (the way in which the machine runs). We believe that in seeing that programs are languages, we gain new insight into our own experience as programmers, and are able to gain new perspective on the intense complexity of code and its creation.", "paper_title": "An Exploration of Program as Language", "paper_id": "WOS:000271211300032"}