{"auto_keywords": [{"score": 0.049404922364310676, "phrase": "avalanche"}, {"score": 0.00481495049065317, "phrase": "messy_web"}, {"score": 0.004713594814274419, "phrase": "recent_efforts"}, {"score": 0.004598027492787762, "phrase": "entire_semantic_web"}, {"score": 0.004469400468609653, "phrase": "centralised_store"}, {"score": 0.004437807397753662, "phrase": "link_traversal"}, {"score": 0.004406436661912347, "phrase": "uri_dereferencing"}, {"score": 0.00428314621261913, "phrase": "linked_open_data"}, {"score": 0.004207840198934805, "phrase": "additional_assumptions"}, {"score": 0.0037031937016576695, "phrase": "semantic_web"}, {"score": 0.003650984439966844, "phrase": "prior_assumptions"}, {"score": 0.0036123093557208492, "phrase": "data_location"}, {"score": 0.003400736815046841, "phrase": "up-to-date_answers"}, {"score": 0.0033527816629072885, "phrase": "sparql"}, {"score": 0.0032820992275066274, "phrase": "on-line_statistical_information"}, {"score": 0.0030788521585190802, "phrase": "concurrent_and_distributed_manner"}, {"score": 0.003024655649924378, "phrase": "first_answers"}, {"score": 0.0029399127512711493, "phrase": "realistic_fedbench"}, {"score": 0.002837305633114947, "phrase": "varying_degrees"}, {"score": 0.0028172167834968477, "phrase": "instance-level_distribution"}, {"score": 0.0027577972695911825, "phrase": "lubm_synthetic_data-set"}, {"score": 0.0025869338215971536, "phrase": "network_latency"}, {"score": 0.0025686131021181134, "phrase": "first_results"}, {"score": 0.0022361384265153677, "phrase": "data_presence"}, {"score": 0.0021503823972534096, "phrase": "query_execution"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Federated SPARQL", " RDF distribution messiness", " Query planning", " Adaptive querying", " Changing network conditions"], "paper_abstract": "Recent efforts have enabled applications to query the entire Semantic Web. Such approaches are either based on a centralised store or link traversal and URI dereferencing as often used in the case of Linked Open Data. These approaches make additional assumptions about the structure and/or location of data on the Web and are likely to limit the diversity of resulting usages. In this article we propose a technique called Avalanche, designed for querying the Semantic Web without making any prior assumptions about the data location or distribution, schema-alignment, pertinent statistics, data evolution, and accessibility of servers. Specifically, Avalanche finds up-to-date answers to queries over SPARQL endpoints. It first gets on-line statistical information about potential data sources and their data distribution. Then, it plans and executes the query in a concurrent and distributed manner trying to quickly provide first answers. We empirically evaluate Avalanche using the realistic FedBench data-set over 26 servers and investigate its behaviour for varying degrees of instance-level distribution \"messiness'' using the LUBM synthetic data-set spread over 100 servers. Results show that Avalanche is robust and stable in spite of varying network latency finding first results for 80% of the queries in under 1 s. It also exhibits stability for some classes of queries when instance-level distribution messiness increases. We also illustrate, how Avalanche addresses the other sources of messiness (pertinent data statistics, data evolution and data presence) by design and show its robustness by removing endpoints during query execution. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Querying a messy web of data with Avalanche", "paper_id": "WOS:000336630500001"}