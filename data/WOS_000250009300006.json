{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "ccs"}, {"score": 0.01231522051281357, "phrase": "parallel_jobs"}, {"score": 0.009460885283646093, "phrase": "cooperating_nodes"}, {"score": 0.00481495049065317, "phrase": "non-dedicated_heterogeneous_nows"}, {"score": 0.004688894532233354, "phrase": "non-dedicated_homogeneous_networks_of_workstations"}, {"score": 0.004429727701202369, "phrase": "single_parallel_job"}, {"score": 0.004379631619412168, "phrase": "coscheduling_deals"}, {"score": 0.004248782702870078, "phrase": "parallel_processes"}, {"score": 0.0040444053843446326, "phrase": "implicit_runtime_information"}, {"score": 0.004013843843250455, "phrase": "basically_communication_events"}, {"score": 0.003953409087444568, "phrase": "implicit_coscheduling_techniques"}, {"score": 0.0038498211283780484, "phrase": "local_and_parallel_jobs"}, {"score": 0.0036093693971289754, "phrase": "low_efficiency_use"}, {"score": 0.0035685175471526823, "phrase": "idle_computational_resources"}, {"score": 0.0034096661914349577, "phrase": "new_technique"}, {"score": 0.003371066990851953, "phrase": "cooperating_coscheduling"}, {"score": 0.0032209766681045365, "phrase": "traditional_implicit_coscheduling_techniques"}, {"score": 0.0030658872249549893, "phrase": "local_events"}, {"score": 0.0029182434479165884, "phrase": "foreign_events"}, {"score": 0.002798865807872575, "phrase": "social_contract"}, {"score": 0.0027048247303526583, "phrase": "memory_resources"}, {"score": 0.0026040262154057607, "phrase": "local_users"}, {"score": 0.002555040841339798, "phrase": "communicating_tasks"}, {"score": 0.002488001663771768, "phrase": "ccs_algorithm"}, {"score": 0.0024691719264774165, "phrase": "status_information"}, {"score": 0.0023412849215629986, "phrase": "experimental_results"}, {"score": 0.002314752262613559, "phrase": "non-dedicated_heterogeneous_now"}, {"score": 0.0022625835448873495, "phrase": "idle_resources"}, {"score": 0.0021865218861454256, "phrase": "satisfactory_speedup"}, {"score": 0.0021049977753042253, "phrase": "local_user"}], "paper_keywords": ["job scheduling", " non-dedicated and heterogeneous NOW computing", " resource allocation"], "paper_abstract": "Implicit coscheduling techniques applied to non-dedicated homogeneous Networks Of Workstations (NOWs) have shown they can perform well when many local users compete with a single parallel job. Implicit coscheduling deals with minimizing the communication waiting time of parallel processes by identifying the processes in need of coscheduling through gathering and analyzing implicit runtime information, basically communication events. Unfortunately, implicit coscheduling techniques do not guarantee the performance of local and parallel jobs, when the number of parallel jobs competing against each other is increased. Thus, a low efficiency use of the idle computational resources is achieved. In order to solve these problems, a new technique, named Cooperating CoScheduling (CCS), is presented in this work. Unlike traditional implicit coscheduling techniques, under CCS, each node takes its scheduling decisions from the occurrence of local events, basically communication, memory, Input/Output and CPU, together with foreign events received from cooperating nodes. This allows CCS to provide a social contract based on reserving a percentage of CPU and memory resources to ensure the progress of parallel jobs without disturbing the local users, while coscheduling of communicating tasks is ensured. Besides, the CCS algorithm uses status information from the cooperating nodes to balance the resources across the cluster when necessary. Experimental results in a non-dedicated heterogeneous NOW reveal that CCS allows the idle resources to be exploited efficiently, thus obtaining a satisfactory speedup and provoking an overhead that is imperceptible to the local user.", "paper_title": "Cooperating CoScheduling: A coscheduling proposal aimed at non-dedicated heterogeneous NOWs", "paper_id": "WOS:000250009300006"}