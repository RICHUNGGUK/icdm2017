{"auto_keywords": [{"score": 0.041239278820985326, "phrase": "elexir"}, {"score": 0.00481495049065317, "phrase": "parallelizing_plan_recognition"}, {"score": 0.004737579882204798, "phrase": "modern_multi_core_computers"}, {"score": 0.004512814529823301, "phrase": "plan-recognition_algorithms"}, {"score": 0.004263972370406983, "phrase": "plan_recognition"}, {"score": 0.004061584718427419, "phrase": "complete_breadth"}, {"score": 0.004028796143006953, "phrase": "first_search"}, {"score": 0.003806541299696042, "phrase": "lexi-calized_intent_recognition"}, {"score": 0.0036553070575015344, "phrase": "geib"}, {"score": 0.0035965342364431, "phrase": "goldman"}, {"score": 0.0030086877092638945, "phrase": "multiple_possible_algorithms"}, {"score": 0.0028890603352364273, "phrase": "parallel_threads"}, {"score": 0.0028195727965553367, "phrase": "associated_performance"}, {"score": 0.0024963543716522087, "phrase": "linear_speedup"}, {"score": 0.0023970487263732737, "phrase": "maximum_number"}, {"score": 0.0022101055924375725, "phrase": "problem_domain"}, {"score": 0.0021049977753042253, "phrase": "achieved_speedup"}], "paper_keywords": [""], "paper_abstract": "Modern multi core computers provide an opportunity to parallelize plan-recognition algorithms to decrease run time. Viewing plan recognition as parsing based on a complete breadth first search, makes ELEXIR (engine for lexi-calized intent recognition) (Geib 2009, Geib and Goldman 2011) particularly suited for parallelization. This article documents the extension of ELEXIR to utilize such modern computing platforms. We will discuss multiple possible algorithms for distributing work between parallel threads and the associated performance wins. We will show that the best of these algorithms provides close to linear speedup (up to a maximum number of processors), and that features of the problem domain have an impact on the achieved speedup.", "paper_title": "Parallelizing Plan Recognition", "paper_id": "WOS:000357055000003"}