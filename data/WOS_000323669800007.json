{"auto_keywords": [{"score": 0.03926714714893431, "phrase": "workflow_bundles"}, {"score": 0.004815554375485717, "phrase": "bundle"}, {"score": 0.004648995193787914, "phrase": "scalable_workflow_executions"}, {"score": 0.004488734023485018, "phrase": "previous_work"}, {"score": 0.004436545340717729, "phrase": "shiwa_bundling_format"}, {"score": 0.004266907250334316, "phrase": "workflow_execution"}, {"score": 0.004217286731331736, "phrase": "multi-workflow_environment"}, {"score": 0.004135859558144883, "phrase": "scalable_and_robust_execution_pool_environment"}, {"score": 0.003946766004066276, "phrase": "different_workflow_engines"}, {"score": 0.0038255128976509545, "phrase": "common_workflow_representation"}, {"score": 0.0037957839728524046, "phrase": "seamless_connectivity"}, {"score": 0.0036505565334886227, "phrase": "meta-workflow_scenario"}, {"score": 0.0035245918797629804, "phrase": "lightweight_open_archives_initiative_object_reuse"}, {"score": 0.003443031148055198, "phrase": "web-based_standard"}, {"score": 0.00337650257503995, "phrase": "common_format"}, {"score": 0.0032727116186194584, "phrase": "associated_metadata"}, {"score": 0.003196960816092101, "phrase": "generalized_bundling_approach"}, {"score": 0.0031351720217878917, "phrase": "five_workflow_engines"}, {"score": 0.0030745737579268876, "phrase": "useful_environment"}, {"score": 0.0030506626796257077, "phrase": "inter-workflow_experimentation"}, {"score": 0.003015143226706584, "phrase": "execution_pool"}, {"score": 0.0029916929549256297, "phrase": "federated_access"}, {"score": 0.002968424524565369, "phrase": "multiple_distributed_computing_infrastructures"}, {"score": 0.0029224275921964724, "phrase": "underlying_workflow_engines"}, {"score": 0.0027995677499976406, "phrase": "extensible_messaging"}, {"score": 0.002681859084438076, "phrase": "necessary_communication_backbone"}, {"score": 0.0026506222660465104, "phrase": "multiple_workflow_engine_agents"}, {"score": 0.002559072326933071, "phrase": "meta-workflow_pipelines"}, {"score": 0.0024418934977061876, "phrase": "pool_execution_approach"}, {"score": 0.0021803388613879896, "phrase": "java-based_music_analysis_workflow"}, {"score": 0.0021049977753042253, "phrase": "triana_and_moteur_workflow_engines"}], "paper_keywords": ["Scientific workflows", " Distributed computing infrastructure", " Grid computing", " Cloud computing", " Interoperability", " Data modelling"], "paper_abstract": "In this paper, we leverage the previous work on the SHIWA bundling format and expand on this specification in order to facilitate workflow execution within a multi-workflow environment. We introduce a scalable and robust execution pool environment that supports workflows consisting of sub-workflows built upon a multitude of different workflow engines and environments, and also provide a common workflow representation for seamless connectivity through serialization to workflow bundles. We also present a meta-workflow scenario based upon this system. Workflow bundles employ the lightweight Open Archives Initiative Object Reuse and Exchange (ORE) Web-based standard, to provide a common format for representing and sharing workflows and the associated metadata required for their execution. This generalized bundling approach is already available within five workflow engines and has proven a useful environment for inter-workflow experimentation. The execution pool facilitates federated access to multiple distributed computing infrastructures supported by the underlying workflow engines subscribed to the pool. Workflow bundles are exposed using the eXtensible Messaging and Presence Protocol (XMPP), which provides the necessary communication backbone to enable multiple workflow engine agents to asynchronously publish and subscribe to bundles in meta-workflow pipelines. We present experiments showing the scalability and robustness of the pool execution approach with results showing that overheads remain controlled for up to 150 workflow agents, and that agent failures have very limited impact. We then demonstrate the applicability of our architecture by describing how a Java-based music analysis workflow can be distributed within such a multi-workflow environment consisting of the Triana and MOTEUR workflow engines.", "paper_title": "Bundle and Pool Architecture for Multi-Language, Robust, Scalable Workflow Executions", "paper_id": "WOS:000323669800007"}