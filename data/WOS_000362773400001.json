{"auto_keywords": [{"score": 0.03613346133936676, "phrase": "openacc"}, {"score": 0.03300232988009187, "phrase": "multiple_gpus"}, {"score": 0.00481495049065317, "phrase": "multi-gpu_support"}, {"score": 0.004767826806287385, "phrase": "single_node_using_directive-based_programming_model"}, {"score": 0.004606479650820579, "phrase": "single_gpu"}, {"score": 0.004494570360108983, "phrase": "significant_performance_gains"}, {"score": 0.004174824849669107, "phrase": "multiple_cpus"}, {"score": 0.004093453936415085, "phrase": "immense_potential"}, {"score": 0.003954837422946628, "phrase": "leading_candidate"}, {"score": 0.003896871009090446, "phrase": "complex_scientific_applications"}, {"score": 0.003820896867623235, "phrase": "heterogeneous_systems"}, {"score": 0.0036733470451885465, "phrase": "traditional_multicore_systems"}, {"score": 0.0036373553416391823, "phrase": "directive-based_programming_approaches"}, {"score": 0.003462643587114328, "phrase": "openmp"}, {"score": 0.00307657476125683, "phrase": "plausible_solution"}, {"score": 0.002899965889623787, "phrase": "hybrid_model"}, {"score": 0.0027200305495826797, "phrase": "necessary_compilers'_support"}, {"score": 0.0025892330566358503, "phrase": "direct_device-to-device_communication"}, {"score": 0.0024891269874339553, "phrase": "alternate_strategy"}, {"score": 0.0023346234464901978, "phrase": "task-based_implementation"}, {"score": 0.0022005118194652704, "phrase": "hybrid_model_approach"}, {"score": 0.002157538586313944, "phrase": "proposed_strategy"}], "paper_keywords": [""], "paper_abstract": "Existing studies show that using single GPU can lead to obtaining significant performance gains. We should be able to achieve further performance speedup if we use more than one GPU. Heterogeneous processors consisting of multiple CPUs and GPUs offer immense potential and are often considered as a leading candidate for porting complex scientific applications. Unfortunately programming heterogeneous systems requires more effort than what is required for traditional multicore systems. Directive-based programming approaches are being widely adopted since they make it easy to use/port/maintain application code. OpenMP and OpenACC are two popular models used to port applications to accelerators. However, neither of the models provides support for multiple GPUs. A plausible solution is to use combination of OpenMP and OpenACC that forms a hybrid model; however, building this model has its own limitations due to lack of necessary compilers' support. Moreover, the model also lacks support for direct device-to-device communication. To overcome these limitations, an alternate strategy is to extend OpenACC by proposing and developing extensions that follow a task-based implementation for supporting multiple GPUs. We critically analyze the applicability of the hybrid model approach and evaluate the proposed strategy using several case studies and demonstrate their effectiveness.", "paper_title": "Multi-GPU Support on Single Node Using Directive-Based Programming Model", "paper_id": "WOS:000362773400001"}