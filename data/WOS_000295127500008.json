{"auto_keywords": [{"score": 0.04923905880448851, "phrase": "working_set"}, {"score": 0.015090245427865166, "phrase": "software_code_cache"}, {"score": 0.00481495049065317, "phrase": "code_cache_management"}, {"score": 0.004674952036988355, "phrase": "dynamic_binary_translator"}, {"score": 0.004278807087784626, "phrase": "dynamic_binary_translation"}, {"score": 0.004178935413340453, "phrase": "stored-altered_copies"}, {"score": 0.004129873531628877, "phrase": "original_program_instructions"}, {"score": 0.003626626504149897, "phrase": "classic_dynamic_binary_translators"}, {"score": 0.003338690782620756, "phrase": "additional_unnecessary_overhead"}, {"score": 0.002846175473457555, "phrase": "cache_schemes"}, {"score": 0.002573965014439041, "phrase": "new_schemes"}, {"score": 0.0025137856138000014, "phrase": "translation_rate"}, {"score": 0.0023976048394496446, "phrase": "new_replacement_policies"}, {"score": 0.0023139986108451967, "phrase": "dynamic_binary_translator-crossbit"}, {"score": 0.002233301265743633, "phrase": "experiment_results"}, {"score": 0.0021940118003312397, "phrase": "benchmark_specint"}, {"score": 0.002130056082139311, "phrase": "better_performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "cache_space_utilization_ratio"}], "paper_keywords": ["Code cache management", " Working set", " Replacement strategy", " Code block", " Bounded code cache"], "paper_abstract": "Software code cache employed to store translated or optimized codes, amortizes the overhead of dynamic binary translation via reusing of stored-altered copies of original program instructions. Though many conventional code cache managements, such as Flush, Least-Recently Used (LRU), have been applied on some classic dynamic binary translators, actually they are so unsophisticated yet unadaptable that it not only brings additional unnecessary overhead, but also wastes much cache space, since there exist several noticeable features in software code cache, unlike pages in memory. Consequently, this paper presents two novel alternative cache schemes-SCC (Static Code Cache) and DCC (Dynamic Code Cache) based on working set. In these new schemes, we utilize translation rate to judge working set. To evaluate these new replacement policies, we implement them on dynamic binary translator-CrossBit with several commonplace code cache managements. Through the experiment results based on benchmark SPECint 2000, we achieve better performance improvement and cache space utilization ratio.", "paper_title": "Code Cache Management Based on Working Set in Dynamic Binary Translator", "paper_id": "WOS:000295127500008"}