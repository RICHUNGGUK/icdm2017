{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "systematic_transformation"}, {"score": 0.0043560464825349275, "phrase": "real-world_requirements"}, {"score": 0.004248294537944227, "phrase": "non-formal_approaches"}, {"score": 0.004101886428528311, "phrase": "formal_structures"}, {"score": 0.0038239757564863057, "phrase": "computing_treats"}, {"score": 0.003729335910488339, "phrase": "real_world"}, {"score": 0.0036370297611938796, "phrase": "essentially_formal_machine"}, {"score": 0.003459191419478298, "phrase": "new_approach"}, {"score": 0.0029909851863915283, "phrase": "natural_cause-and-effect_structures"}, {"score": 0.002902304851882577, "phrase": "non-formal_requirements_descriptions"}, {"score": 0.0027741761880779535, "phrase": "software_specification"}, {"score": 0.0027327327233891865, "phrase": "theoretical_contribution"}, {"score": 0.0026252106881752067, "phrase": "jackson's_idea"}, {"score": 0.0025989960809479104, "phrase": "problem_progression"}, {"score": 0.002496722870659199, "phrase": "graph_grammar"}, {"score": 0.002459414063407306, "phrase": "problem_models"}, {"score": 0.0022925278792429553, "phrase": "substantial_benchmark_example-swartout's_and_balzer's_package_router"}, {"score": 0.0021802872319258977, "phrase": "initial_empirical_evaluation"}, {"score": 0.0021049977753042253, "phrase": "prototype_problem_progression_tool"}], "paper_keywords": ["Requirements", " Specifications", " Problem Frames", " Problem progression", " Graph transformation"], "paper_abstract": "Formal approaches to development are widely acknowledged to have difficulty in the validation of real-world requirements; in contrast, non-formal approaches find it difficult to identify the formal structures in requirements that are useful in a solution. That the problems that computing treats are embedded in the real world with solutions being an essentially formal machine means this dichotomy will always exist, with some new approach to the development needed which can draw a boundary between what is formalised and what can be left informal. In this paper, we show how the natural cause-and-effect structures that can be found in non-formal requirements descriptions can be used systematically to arrive at a software specification. The theoretical contribution of the work is the formalisation of Jackson's idea of problem progression in his Problem Frames framework through the use of a graph grammar to capture problem models as graphs and their manipulation as transformations. The approach is illustrated through a substantial benchmark example-Swartout's and Balzer's package router. We also report on the results of an initial empirical evaluation of the approach based on a prototype problem progression tool we have constructed.", "paper_title": "On the systematic transformation of requirements to specifications", "paper_id": "WOS:000343825300005"}