{"auto_keywords": [{"score": 0.049233068058238634, "phrase": "verification_system"}, {"score": 0.010612387000973441, "phrase": "sound_refinement_calculus"}, {"score": 0.0077553333434285734, "phrase": "extended_language"}, {"score": 0.004404188306112211, "phrase": "formal_system"}, {"score": 0.004275173711009189, "phrase": "inductively_defined_term"}, {"score": 0.003980687255880282, "phrase": "verification_systems"}, {"score": 0.003933609372601274, "phrase": "hoare_logics"}, {"score": 0.0038870860864224656, "phrase": "type_systems"}, {"score": 0.0037507793596022326, "phrase": "term_language"}, {"score": 0.00368442237104581, "phrase": "specification_terms"}, {"score": 0.0034304883989739804, "phrase": "sound_and_conservative_extension"}, {"score": 0.003369778677878286, "phrase": "original_system"}, {"score": 0.0033101397746161843, "phrase": "extended_system"}, {"score": 0.0031374619658664843, "phrase": "resulting_refinement_calculus"}, {"score": 0.0027852126030055305, "phrase": "freefinement"}, {"score": 0.0026556165534143915, "phrase": "abstract_level"}, {"score": 0.002414191082427217, "phrase": "original_language"}, {"score": 0.0022077827041801193, "phrase": "simple_type_system"}, {"score": 0.002168664249034287, "phrase": "lambda_calculus"}, {"score": 0.0021049977753042253, "phrase": "hoare_logic"}], "paper_keywords": ["Languages", " Theory", " Verification", " Formal Systems", " Proof Theory", " Refinement"], "paper_abstract": "Freefinement is an algorithm that constructs a sound refinement calculus from a verification system under certain conditions. In this paper, a verification system is any formal system for establishing whether an inductively defined term, typically a program, satisfies a specification. Examples of verification systems include Hoare logics and type systems. Freefinement first extends the term language to include specification terms, and builds a verification system for the extended language that is a sound and conservative extension of the original system. The extended system is then transformed into a sound refinement calculus. The resulting refinement calculus can interoperate closely with the verification system - it is even possible to reuse and translate proofs between them. Freefinement gives a semantics to refinement at an abstract level: it associates each term of the extended language with a set of terms from the original language, and refinement simply reduces this set. The paper applies freefinement to a simple type system for the lambda calculus and also to a Hoare logic.", "paper_title": "Freefinement", "paper_id": "WOS:000300548100001"}