{"auto_keywords": [{"score": 0.025650094613660787, "phrase": "gb"}, {"score": 0.00481495049065317, "phrase": "software_development_artifacts"}, {"score": 0.004776853267973129, "phrase": "deployed_software_systems"}, {"score": 0.00446490613141384, "phrase": "main_development_team"}, {"score": 0.004342430078306461, "phrase": "included_components"}, {"score": 0.004273951631010383, "phrase": "external_libraries"}, {"score": 0.004240116703465252, "phrase": "cloned_source_code"}, {"score": 0.004042635935882651, "phrase": "technical_and_ethical_concerns"}, {"score": 0.003947358102140903, "phrase": "system_owners"}, {"score": 0.0036167509502276294, "phrase": "software_entities"}, {"score": 0.003573859492987647, "phrase": "broad_set"}, {"score": 0.0034895911869254146, "phrase": "signature_matching"}, {"score": 0.0034619440946558186, "phrase": "source_code_fact_extraction"}, {"score": 0.0034345152879289025, "phrase": "software_clone_detection"}, {"score": 0.0031342307827666675, "phrase": "bertillonage"}, {"score": 0.0026836723685046407, "phrase": "source_origin"}, {"score": 0.002662393295121998, "phrase": "binary_libraries"}, {"score": 0.002548331088496964, "phrase": "structured_signature_matching"}, {"score": 0.002381566880282456, "phrase": "open_source_java_libraries"}, {"score": 0.0022434880661725493, "phrase": "empirical_study"}, {"score": 0.002147333949483224, "phrase": "industrial_case_study"}, {"score": 0.0021049977753042253, "phrase": "e-commerce_application"}], "paper_keywords": ["Reuse", " Provenance", " Code evolution", " Code fingerprints"], "paper_abstract": "Deployed software systems are typically composed of many pieces, not all of which may have been created by the main development team. Often, the provenance of included components-such as external libraries or cloned source code-is not clearly stated, and this uncertainty can introduce technical and ethical concerns that make it difficult for system owners and other stakeholders to manage their software assets. In this work, we motivate the need for the recovery of the provenance of software entities by a broad set of techniques that could include signature matching, source code fact extraction, software clone detection, call flow graph matching, string matching, historical analyses, and other techniques. We liken our provenance goals to that of Bertillonage, a simple and approximate forensic analysis technique based on bio-metrics that was developed in 19th century France before the advent of fingerprints. As an example, we have developed a fast, simple, and approximate technique called anchored signature matching for identifying the source origin of binary libraries within a given Java application. This technique involves a type of structured signature matching performed against a database of candidates drawn from the Maven2 repository, a 275 GB collection of open source Java libraries. To show the approach is both valid and effective, we conducted an empirical study on 945 jars from the Debian GNU/Linux distribution, as well as an industrial case study on 81 jars from an e-commerce application.", "paper_title": "Software Bertillonage Determining the provenance of software development artifacts", "paper_id": "WOS:000324229600006"}