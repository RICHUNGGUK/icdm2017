{"auto_keywords": [{"score": 0.02503239220832903, "phrase": "diet"}, {"score": 0.00481495049065317, "phrase": "remotely_distributed_computing_resources"}, {"score": 0.004736045157669388, "phrase": "single_system"}, {"score": 0.004684157900507474, "phrase": "great_potential"}, {"score": 0.0046328364646343375, "phrase": "compute-intensive_applications"}, {"score": 0.004058951880810154, "phrase": "reasonable_user_experience"}, {"score": 0.003820144626025562, "phrase": "great_majority"}, {"score": 0.003778253716938922, "phrase": "job_schedulers"}, {"score": 0.003097865379563127, "phrase": "optimal_arrangement"}, {"score": 0.002947790697936243, "phrase": "hierarchically_organized_systems"}, {"score": 0.002851790448644913, "phrase": "optimal_deployment"}, {"score": 0.00280496585980086, "phrase": "complete_spanning_d-ary_tree"}, {"score": 0.002669042572650594, "phrase": "scheduling_literature"}, {"score": 0.002497976173193543, "phrase": "optimal_degree_d"}, {"score": 0.002261666793030715, "phrase": "hierarchical_schedulers"}, {"score": 0.0022122603123901114, "phrase": "detailed_performance_models"}, {"score": 0.0021049977753042253, "phrase": "real-world_environment"}], "paper_keywords": ["deployment", " grid middleware", " hierarchical scheduler", " cluster computing"], "paper_abstract": "The use of remotely distributed computing resources as a single system offers great potential for compute-intensive applications. Increasingly, users have access to hundreds or thousands of machines at once and wish to utilize those resources concurrently. To provide a reasonable user experience, such systems must provide an effective, scalable scheduling system. Unfortunately, the great majority of job schedulers are centralized and many do not scale well to thousands or even hundreds of nodes. In this paper we study how distributed scheduling systems can be designed most effectively; we focus on the problem of selecting an optimal arrangement of schedulers, or a deployment, for hierarchically organized systems. We show that the optimal deployment is a complete spanning d-ary tree; this result conforms with results from the scheduling literature. More importantly, we present an approach for determining the optimal degree d for the tree. To test our approach, we use DIET, a middleware system that uses hierarchical schedulers. We develop detailed performance models for DIET and validate these models in a real-world environment. Finally, we demonstrate that our approach selects deployments that are near-optimal in practice.", "paper_title": "Automatic middleware deployment planning on clusters", "paper_id": "WOS:000242290400008"}