{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "low-delay_high-bandwidth"}, {"score": 0.004768739216860887, "phrase": "peer-to-peer_live_streaming"}, {"score": 0.004603042715684748, "phrase": "promising_scalable_solution"}, {"score": 0.004573537724320323, "phrase": "live_streaming"}, {"score": 0.00452963285314407, "phrase": "large_group"}, {"score": 0.004302463542835521, "phrase": "low_source"}, {"score": 0.004247466494836417, "phrase": "peer_delay"}, {"score": 0.004206678601411097, "phrase": "asymmetric_and_diverse_uplink_bandwidth"}, {"score": 0.0040866404150657005, "phrase": "existing_pool"}, {"score": 0.00399564102224961, "phrase": "streaming_mesh"}, {"score": 0.0038941106036522216, "phrase": "multiple_spanning_trees"}, {"score": 0.0036986954643952203, "phrase": "scheduling_delay"}, {"score": 0.003369076363771074, "phrase": "mesh_protocol"}, {"score": 0.0031589756301986763, "phrase": "mildly_dynamic_network"}, {"score": 0.003078639412163634, "phrase": "content_distribution_servers"}, {"score": 0.002963145910285802, "phrase": "np"}, {"score": 0.002886598310196588, "phrase": "centralized_heuristic"}, {"score": 0.002858841145587906, "phrase": "complete_knowledge"}, {"score": 0.002697799358876857, "phrase": "optimal_benchmark"}, {"score": 0.0026122745966589795, "phrase": "simple_distributed_algorithm"}, {"score": 0.002371589020876307, "phrase": "network_power"}, {"score": 0.0023412157039327665, "phrase": "low_delay"}, {"score": 0.0023037942361136205, "phrase": "continuous_improvement"}, {"score": 0.002266969545521751, "phrase": "minimum_delay"}, {"score": 0.0022379331011153163, "phrase": "simulation_and_planetlab_experiments"}, {"score": 0.002153031476985805, "phrase": "source_workload"}, {"score": 0.0021049977753042253, "phrase": "state-of-the_art_approaches"}], "paper_keywords": ["Minimize mesh delay", " multimedia communication", " P2P live streaming"], "paper_abstract": "Peer-to-peer (P2P) technology has emerged as a promising scalable solution for live streaming to a large group. In this paper, we address the design of an overlay mesh which achieves low source-to-peer delay, accommodates asymmetric and diverse uplink bandwidth, and continuously improves delay based on an existing pool of peers. By considering a streaming mesh as an aggregation of data flows along multiple spanning trees, the peer delay in the mesh is then its longest delay (including both propagation and scheduling delay) among all the trees. Clearly, such delay can be very high if the mesh is not designed well. In this paper, we propose and study a mesh protocol called Fast-Mesh, which optimizes such delay while meeting a certain streaming bandwidth requirement. Fast-Mesh is particularly suitable for a mildly dynamic network consisting of proxies, supernodes, or content distribution servers. We first formulate the minimum delay multiple trees (MDMT) problem and show that it is NP-hard. Then we propose a centralized heuristic based on complete knowledge, which may be used when the network is small or managed, and serves as an optimal benchmark for all the other schemes under comparison. We then propose a simple distributed algorithm, Fast-Mesh, where peers select their parents based on the concept of power in networks given by the ratio of throughput and delay. By maximizing the network power, our algorithm achieves low delay. The algorithm makes continuous improvement on delay until some minimum delay is reached. Simulation and PlanetLab experiments show that our distributed algorithm performs very well in terms of delay and source workload, and substantially outperforms traditional and state-of-the art approaches.", "paper_title": "Fast-Mesh: A Low-Delay High-Bandwidth Mesh for Peer-to-Peer Live Streaming", "paper_id": "WOS:000271843000005"}