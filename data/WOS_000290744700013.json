{"auto_keywords": [{"score": 0.031067175579703947, "phrase": "new_architecture"}, {"score": 0.013697923462175113, "phrase": "dbt"}, {"score": 0.012377027722531074, "phrase": "higher_performance"}, {"score": 0.010183834236263655, "phrase": "dbt_system"}, {"score": 0.00481495049065317, "phrase": "conventional_dbt_system"}, {"score": 0.004736820055728928, "phrase": "noticeable_performance_improvement"}, {"score": 0.004698229304089357, "phrase": "ever-increasing_transistors"}, {"score": 0.004418601451254075, "phrase": "hardware_resource"}, {"score": 0.004346874334971379, "phrase": "multi-core_resource"}, {"score": 0.004258843584164121, "phrase": "inevitable_problem"}, {"score": 0.004224130367280183, "phrase": "dynamic_binary_translation"}, {"score": 0.0040052617265655035, "phrase": "aide_tool"}, {"score": 0.0033176589215021353, "phrase": "compatible_software_architecture"}, {"score": 0.003250403288147613, "phrase": "platform_dependence"}, {"score": 0.0031327496009959464, "phrase": "novel_multithreaded_architecture"}, {"score": 0.003069230909006614, "phrase": "distinct_function_module"}, {"score": 0.0027817658627604653, "phrase": "dynamic_translation"}, {"score": 0.0027141975147496264, "phrase": "code_execution_phases"}, {"score": 0.002637433799290365, "phrase": "different_threads"}, {"score": 0.002459902948098627, "phrase": "intractable_work"}, {"score": 0.0023903140267755576, "phrase": "communication_mechanism"}, {"score": 0.002370794661629904, "phrase": "cache_layout"}, {"score": 0.0023418133729330303, "phrase": "mutual_exclusion"}, {"score": 0.002303720729387236, "phrase": "experimental_results"}, {"score": 0.00219311232069446, "phrase": "higher_performance_speed"}, {"score": 0.0021049977753042253, "phrase": "better_cpu_utilization"}], "paper_keywords": ["DBT", " optimization", " microprocessor", " multi-core", " SPECint 2000"], "paper_abstract": "Noticeable performance improvement via ever-increasing transistors is gradually trapped into a predicament since software cannot logically and efficiently utilize hardware resource, such as multi-core resource. This is an inevitable problem in dynamic binary translation (DBT) system as well. Though special purpose hardware as aide tool, through some interfaces, provided by DBT enables the system to achieve higher performance, the limitation of it is significant, that is, it is impossible to be used widely by another one. To overcome this drawback, we focus on building compatible software architecture to acquire higher performance without platform dependence. In this paper, we propose a novel multithreaded architecture for DBT system through partitioning distinct function module, which is to adequately utilize multiprocessors resource. This new architecture devides couples the common DBT system (DBTs) working routine into dynamic translation, optimization, and translated code execution phases, and then ramifies them into different threads to enable them concurrently executed. In this new architecture, several efficient novel methods are presented to cope with intractable work that puzzles most researchers, such as communication mechanism, cache layout, and mutual exclusion between threads. Experimental results using SPECint 2000 indicate that this new architecture for DBT system can achieve higher performance speed up the traditional DBT system by about average 10.75%, with better CPU utilization.", "paper_title": "Partitioning the Conventional DBT System for Multiprocessors", "paper_id": "WOS:000290744700013"}