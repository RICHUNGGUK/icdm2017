{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "communication_contention"}, {"score": 0.04832675252243853, "phrase": "task_scheduling"}, {"score": 0.0047555023078686386, "phrase": "apn_list"}, {"score": 0.004553128404612054, "phrase": "essential_aspect"}, {"score": 0.0044968982227349625, "phrase": "parallel_process_system"}, {"score": 0.004413846562278824, "phrase": "np-hard_problem"}, {"score": 0.004359328949187473, "phrase": "fully_connected_homogeneous_processors"}, {"score": 0.004199766284749713, "phrase": "communication_links"}, {"score": 0.004071249707923223, "phrase": "arbitrary_processor_network"}, {"score": 0.0038737214010638745, "phrase": "strong_influence"}, {"score": 0.003802135020791801, "phrase": "execution_time"}, {"score": 0.0037318666008429014, "phrase": "parallel_application"}, {"score": 0.0035507457285983268, "phrase": "contention_awareness"}, {"score": 0.003115908199991072, "phrase": "earliest_finish_communication_time_search_algorithm"}, {"score": 0.0030582832134483685, "phrase": "shortest-path_search_method"}, {"score": 0.0028206052780047424, "phrase": "recursive_rank_computation"}, {"score": 0.0027857115172243226, "phrase": "heterogeneous_arbitrary_processor_network"}, {"score": 0.00265038878247831, "phrase": "time_complexity"}, {"score": 0.0025691622090542304, "phrase": "parallel_algorithm"}, {"score": 0.002414082940963702, "phrase": "comparison_study"}, {"score": 0.002340081450249521, "phrase": "randomly_generated_graphs"}, {"score": 0.0022542611024997474, "phrase": "real_applications"}, {"score": 0.0021580985506699105, "phrase": "classic_and_static_communication_contention_awareness_algorithm"}, {"score": 0.0021049977753042253, "phrase": "high_data_transmission_rate_parallel_application"}], "paper_keywords": ["list scheduling", " arbitrary processor network", " DAG", " communication contention", " parallel algorithm"], "paper_abstract": "Task scheduling is an essential aspect of parallel process system. This NP-hard problem assumes fully connected homogeneous processors and ignores contention on the communication links. However, as arbitrary processor network (APN), communication contention has a strong influence on the execution time of a parallel application. This paper investigates the incorporation of contention awareness into task scheduling. The innovation is the idea of dynamically scheduling edges to links, for which we use the earliest finish communication time search algorithm based on shortest-path search method. The other novel idea proposed in this paper is scheduling priority based on recursive rank computation on heterogeneous arbitrary processor network. In the end, to reduce time complexity of algorithm, a parallel algorithm is proposed and speedup O(PPE) is achieved. The comparison study, based on both randomly generated graphs and the graphs of some real applications, shows that our scheduling algorithm significantly surpasses classic and static communication contention awareness algorithm, especially for high data transmission rate parallel application.", "paper_title": "Communication contention in APN list scheduling algorithm", "paper_id": "WOS:000262702000007"}