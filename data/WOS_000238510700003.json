{"auto_keywords": [{"score": 0.04654990829410417, "phrase": "programming_languages"}, {"score": 0.00481495049065317, "phrase": "software_developers"}, {"score": 0.004769182299692333, "phrase": "design_methods"}, {"score": 0.004634459424542272, "phrase": "conceptual_structures"}, {"score": 0.004546755482549647, "phrase": "programming_language_features"}, {"score": 0.004397230847865867, "phrase": "programming_paradigms"}, {"score": 0.004192078165260057, "phrase": "industrial_and_academic_circles"}, {"score": 0.003996458454723708, "phrase": "imperative_programming"}, {"score": 0.0037377733149169573, "phrase": "multiparadigm_languages"}, {"score": 0.0033166379485150507, "phrase": "partial_disability"}, {"score": 0.003222814590544802, "phrase": "programming_language"}, {"score": 0.003176899769744057, "phrase": "incongruous_design_methods"}, {"score": 0.003146652729098066, "phrase": "software_design_patterns"}, {"score": 0.003087017178815267, "phrase": "reusable_design"}, {"score": 0.003043031131345537, "phrase": "specific_context"}, {"score": 0.0029147869733574844, "phrase": "pattern_context"}, {"score": 0.0028053237950173508, "phrase": "language_change"}, {"score": 0.002739001004969201, "phrase": "design_dysphasia"}, {"score": 0.002350041573006264, "phrase": "concrete_'modify'_phase"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["dysphasia", " pattern maintenance cycle", " multiparadigm"], "paper_abstract": "Software developers utilize design methods that enable them to manipulate conceptual structures that correlate to programming language features. However, programming languages and the programming paradigms they embody co-evolve over time. Within industrial and academic circles, for example, object-oriented programming has evolved and effectively replaced imperative programming. More recently, many object-oriented languages have assimilated features from other programming paradigms, evolving into multiparadigm languages we refer to as 'object-oriented plus-plus' or OO+ +. This language evolution may weaken the interface between design and implementation, introducing what we call 'design dysphasia'-a partial disability in the use of a programming language because of incongruous design methods. Software design patterns capture elements of reusable design within a specific context. When the programming languages that are part of pattern context evolve, patterns must adapt to the language change or they may reinforce design dysphasia in the practitioner. We assert that the current 'capture/recapture' pattern maintenance model is suboptimal for adapting patterns to language evolution and propose a new 'capture/modify/recapture' maintenance cycle as a more effective approach. We then suggest a concrete 'modify' phase for current patterns to be adapted to object-oriented based multiparadigm language trends. We present an OO+ + Iterator pattern as an example throughout. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Design dysphasia and the pattern maintenance cycle", "paper_id": "WOS:000238510700003"}