{"auto_keywords": [{"score": 0.04114310378308459, "phrase": "user_requirements"}, {"score": 0.00481495049065317, "phrase": "scientific_computing"}, {"score": 0.004691273968935458, "phrase": "great_benefits"}, {"score": 0.00466085208934021, "phrase": "computational_grids"}, {"score": 0.0045559136361908795, "phrase": "wide_range"}, {"score": 0.004526365546684684, "phrase": "scientific_software"}, {"score": 0.004467840466181518, "phrase": "different_architectures"}, {"score": 0.004338898899247236, "phrase": "huge_variety"}, {"score": 0.004092026656771699, "phrase": "best_solution"}, {"score": 0.004065474891313382, "phrase": "grid_service_trading"}, {"score": 0.003999843765164458, "phrase": "best_combination"}, {"score": 0.003973887756331297, "phrase": "software_and_execution_platform"}, {"score": 0.003859146369720225, "phrase": "crucial_issue"}, {"score": 0.0037599278182081056, "phrase": "available_services"}, {"score": 0.0036871853429163953, "phrase": "current_state"}, {"score": 0.0035458802311188497, "phrase": "large_amount"}, {"score": 0.0033331024978484843, "phrase": "simple_service_name"}, {"score": 0.0033006894756949776, "phrase": "sophisticated_service_specification_approach"}, {"score": 0.0032685906228558706, "phrase": "algebraic_data_type"}, {"score": 0.003012919635505122, "phrase": "algorithms_and_objects_properties"}, {"score": 0.0027591477674456227, "phrase": "user_request"}, {"score": 0.002723409977992608, "phrase": "major_benefit"}, {"score": 0.0026019244311765964, "phrase": "high-level_domain-specific_expressions"}, {"score": 0.0025021056497407765, "phrase": "almost_all_application_domains"}, {"score": 0.0024061070225431525, "phrase": "dense_linear_algebra"}, {"score": 0.0023289250129331705, "phrase": "philadelphia"}, {"score": 0.0021049977753042253, "phrase": "multi-domain_possibilities"}], "paper_keywords": ["Grid computing", " Semantic-based service trading", " Equational unification", " Linear algebra", " Multi-domain"], "paper_abstract": "One of the great benefits of computational grids is to give access to a wide range of scientific software and computers with different architectures. It is then possible to use a huge variety of tools for solving the same problem and even to combine these tools in order to obtain the best solution. Grid service trading (searching for the best combination of software and execution platform according to the user requirements) is thus a crucial issue. Trading relies on the description of available services and computers, on the current state of the grid, and on the user requirements. Given the large amount of services that may be deployed over the grid, this description cannot be reduced to a simple service name. A sophisticated service specification approach similar to algebraic data type is presented in this paper. Services are described in terms of their algebraic and semantic properties. This is nothing else than proceeding to a description of algorithms and objects properties for a given application domain. We then illustrate how this specification can be used to determine the service or the combination of services that best answer a user request. As a major benefit, users are not required to explicitly call grid-services, but instead manipulate high-level domain-specific expressions. Our approach is fully generic and can be used in almost all application domains. We illustrate this approach and its possible limitations within the framework of dense linear algebra. More precisely, we focus on Level 3 BLAS (ACM Trans Math Softw 16:1-17, 1990; ibid 16:18-28, 1990) and LAPACK (Society for Industrial and Applied Mathematics, Philadelphia, 1999). Some examples in nonlinear optimization are also given to demonstrate how generic our approach is and report on experiments where both domains interact to show the multi-domain possibilities.", "paper_title": "Advanced service trading for scientific computing over the grid", "paper_id": "WOS:000267593600005"}