{"auto_keywords": [{"score": 0.047945806992428605, "phrase": "security_policies"}, {"score": 0.036247390364484336, "phrase": "api"}, {"score": 0.03491849620366406, "phrase": "security-sensitive_events"}, {"score": 0.00481495049065317, "phrase": "security_policy_oracle"}, {"score": 0.004764648644792333, "phrase": "security_holes"}, {"score": 0.0047314049780079765, "phrase": "multiple_api_implementations"}, {"score": 0.004426882270402403, "phrase": "standard_java_libraries"}, {"score": 0.004304574865291508, "phrase": "permission_checks"}, {"score": 0.0042446888127531945, "phrase": "untrusted_applications"}, {"score": 0.004200319352919505, "phrase": "native_calls"}, {"score": 0.004156411748278609, "phrase": "private_class_variables"}, {"score": 0.004098578483988551, "phrase": "previous_techniques"}, {"score": 0.004069963083642548, "phrase": "static_verification"}, {"score": 0.004041546659145336, "phrase": "authorization_enforcement"}, {"score": 0.003999292102785413, "phrase": "manually_specified_policies"}, {"score": 0.0035006643351909246, "phrase": "context-sensitive_analysis"}, {"score": 0.003415812499773905, "phrase": "multiple_implementations"}, {"score": 0.0033330104902937383, "phrase": "security_checks"}, {"score": 0.003263631515158206, "phrase": "api_entry_point"}, {"score": 0.003096417317829492, "phrase": "native_method_calls"}, {"score": 0.0030747771905143273, "phrase": "api_returns"}, {"score": 0.0028765701985514294, "phrase": "missing_checks"}, {"score": 0.002796975007007085, "phrase": "rare_pattern"}, {"score": 0.00277742178063459, "phrase": "security-policy_differencing"}, {"score": 0.0027483472371835865, "phrase": "intrinsic_false_positives"}, {"score": 0.0025018236844165168, "phrase": "sun"}, {"score": 0.0024825152200580063, "phrase": "harmony"}, {"score": 0.002456486927713543, "phrase": "classpath_implementations"}, {"score": 0.0024307637980373552, "phrase": "java_class_library"}, {"score": 0.002363474907331799, "phrase": "prior_analyses"}, {"score": 0.0022187920251626257, "phrase": "cloud-based_software_services"}, {"score": 0.0021878600131802453, "phrase": "library_interfaces"}, {"score": 0.0021649437083408425, "phrase": "software_implementations"}, {"score": 0.002127280894809367, "phrase": "new_approach"}, {"score": 0.0021049977753042253, "phrase": "\"deep\"_bugs"}], "paper_keywords": ["Languages", " Security", " Verification", " Security", " Authorization", " Access Control", " Static Analysis", " Java Class Libraries"], "paper_abstract": "Even experienced developers struggle to implement security policies correctly. For example, despite 15 years of development, standard Java libraries still suffer from missing and incorrectly applied permission checks, which enable untrusted applications to execute native calls or modify private class variables without authorization. Previous techniques for static verification of authorization enforcement rely on manually specified policies or attempt to infer the policy by code-mining. Neither approach guarantees that the policy used for verification is correct. In this paper, we exploit the fact that many modern APIs have multiple, independent implementations. Our flow- and context-sensitive analysis takes as input an API, multiple implementations thereof, and the definitions of security checks and security-sensitive events. For each API entry point, the analysis computes the security policies enforced by the checks before security-sensitive events such as native method calls and API returns, compares these policies across implementations, and reports the differences. Unlike code-mining, this technique finds missing checks even if they are part of a rare pattern. Security-policy differencing has no intrinsic false positives: implementations of the same API must enforce the same policy, or at least one of them is wrong! Our analysis finds 20 new, confirmed security vulnerabilities and 11 interoperability bugs in the Sun, Harmony, and Classpath implementations of the Java Class Library, many of which were missed by prior analyses. These problems manifest in 499 entry points in these mature, well-studied libraries. Multiple API implementations are proliferating due to cloud-based software services and standardization of library interfaces. Comparing software implementations for consistency is a new approach to discovering \"deep\" bugs in them.", "paper_title": "A Security Policy Oracle: Detecting Security Holes Using Multiple API Implementations", "paper_id": "WOS:000294609500030"}