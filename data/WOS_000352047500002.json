{"auto_keywords": [{"score": 0.046133894713162954, "phrase": "cop"}, {"score": 0.03212397587448788, "phrase": "contexterlang"}, {"score": 0.01154370295658772, "phrase": "dynamic_change"}, {"score": 0.00481495049065317, "phrase": "distributed_context-aware_self-adaptive_applications"}, {"score": 0.004623224002010226, "phrase": "run_time"}, {"score": 0.004561019117546361, "phrase": "changing_requirements"}, {"score": 0.004499647408293102, "phrase": "dynamic_environment"}, {"score": 0.004459190343665408, "phrase": "context-oriented_programming"}, {"score": 0.004262273304740847, "phrase": "specialized_programming_paradigm"}, {"score": 0.004223941453664225, "phrase": "context-aware_and_adaptive_systems"}, {"score": 0.004110993414942228, "phrase": "run_time_adaptation"}, {"score": 0.004055652445791872, "phrase": "application's_behavior"}, {"score": 0.0040010534672646775, "phrase": "modular_descriptions"}, {"score": 0.003965061486705487, "phrase": "behavioral_variations"}, {"score": 0.00389404213807752, "phrase": "self-adaptive_applications"}, {"score": 0.003841610436545169, "phrase": "additional_requirements"}, {"score": 0.003671865026158296, "phrase": "unforeseen_changes"}, {"score": 0.0036060781902674207, "phrase": "correct_behavior"}, {"score": 0.003415681637907093, "phrase": "language_level"}, {"score": 0.003369669078274226, "phrase": "holistic_design"}, {"score": 0.003220709449062307, "phrase": "possibly_cumbersome_interaction"}, {"score": 0.0029289191071848403, "phrase": "adaptive_abstractions"}, {"score": 0.0027867539356701302, "phrase": "contexterlang's_formal_semantics"}, {"score": 0.002724428781940696, "phrase": "executable_prototype"}, {"score": 0.002627587221594597, "phrase": "formal_proofs"}, {"score": 0.002592163447843447, "phrase": "language_design"}, {"score": 0.0025000115574335693, "phrase": "empirical_evidence"}, {"score": 0.0024440836179156593, "phrase": "effective_solution"}, {"score": 0.0024220634963019114, "phrase": "case_studies"}, {"score": 0.002389403849342894, "phrase": "performance_assessment"}, {"score": 0.0021925226977381244, "phrase": "contextual_extensions"}, {"score": 0.0021434588322608653, "phrase": "concrete_example"}], "paper_keywords": ["Context-oriented programming", " Context", " Self-adaptive software", " Concurrency", " Distribution"], "paper_abstract": "Self-adaptive software modifies its behavior at run time to satisfy changing requirements in a dynamic environment. Context-oriented programming (COP) has been recently proposed as a specialized programming paradigm for context-aware and adaptive systems. COP mostly focuses on run time adaptation of the application's behavior by supporting modular descriptions of behavioral variations. However, self-adaptive applications must satisfy additional requirements, such as distribution and concurrency, support for unforeseen changes and enforcement of correct behavior in the presence of dynamic change. Addressing these issues at the language level requires a holistic design that covers all aspects and takes into account the possibly cumbersome interaction of those features, for example concurrency and dynamic change. We present CONTEXTERLANG, a COP programming language in which adaptive abstractions are seamlessly integrated with distribution and concurrency. We define CONTEXTERLANG's formal semantics, validated through an executable prototype, and we show how it supports formal proofs that the language design ensures satisfaction of certain safety requirements. We provide empirical evidence that CONTEXTERLANG is an effective solution through case studies and a performance assessment. We also show how the same design principles that lead to the development of CONTEXTERLANG can be followed to systematically design contextual extensions of other languages. A concrete example is presented concerning CONTEXTSCALA. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "ContextErlang: A language for distributed context-aware self-adaptive applications", "paper_id": "WOS:000352047500002"}