{"auto_keywords": [{"score": 0.03661306378153703, "phrase": "operating_system"}, {"score": 0.00481495049065317, "phrase": "asymmetric_single-isa_multi-core"}, {"score": 0.004701556483912018, "phrase": "thread_level_parallelism"}, {"score": 0.004273951631010383, "phrase": "chip_multi-core_processors"}, {"score": 0.00385431710959668, "phrase": "growing_number"}, {"score": 0.0033937776228549557, "phrase": "increasingly_larger_amounts"}, {"score": 0.0033402088717816416, "phrase": "cpu_time"}, {"score": 0.0028037753646260937, "phrase": "scheduling_mechanism"}, {"score": 0.002508073621696602, "phrase": "multi-threaded_application_bottlenecks"}, {"score": 0.0024488738006005133, "phrase": "thread_synchronization_sections"}, {"score": 0.002391067964886602, "phrase": "fairness-aware_scheduler_method"}, {"score": 0.0022977342663599042, "phrase": "average_speed"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_fairness-aware_scheduler"}], "paper_keywords": ["Asymmetric chip multiprocessor (ACMP)", " HW/SW thread scheduling", " multi-threaded applications"], "paper_abstract": "As thread level parallelism in applications has continued to expand, so has research in chip multi-core processors. As more and more applications become multi-threaded we expect to find a growing number of threads executing on a machine. As a consequence, the operating system will require increasingly larger amounts of CPU time to schedule these threads efficiently. Instead of perpetuating the trend of performing more complex thread scheduling in the operating system, we propose a scheduling mechanism that can be efficiently implemented in hardware as well. Our approach of identifying multi-threaded application bottlenecks such as thread synchronization sections complements the Fairness-aware Scheduler method. It achieves an average speed up of 11.5 percent (geometric mean) compared to the state-of-the-art Fairness-aware Scheduler.", "paper_title": "Thread Lock Section-Aware Scheduling on Asymmetric Single-ISA Multi-Core", "paper_id": "WOS:000367259100019"}