{"auto_keywords": [{"score": 0.04935889043076212, "phrase": "distributed_computing_systems"}, {"score": 0.045242984852269096, "phrase": "previous_rollback-recovery_protocols"}, {"score": 0.04206483306533287, "phrase": "rollback-recovery_protocol"}, {"score": 0.041153750933824076, "phrase": "operating_system"}, {"score": 0.00481495049065317, "phrase": "tolerant_system"}, {"score": 0.004583464412234181, "phrase": "fault_tolerant_and_recovery_system"}, {"score": 0.004514491994233911, "phrase": "fault_tolerant"}, {"score": 0.004248782702870078, "phrase": "inherent_communication"}, {"score": 0.004200724305692705, "phrase": "underlying_operating_system"}, {"score": 0.004090682761004765, "phrase": "computing_performance"}, {"score": 0.0038498211283780484, "phrase": "increasing_portability"}, {"score": 0.003650687199498576, "phrase": "recovery_agent"}, {"score": 0.0034881908940439213, "phrase": "information_agent"}, {"score": 0.0034618177773967015, "phrase": "domain_knowledge"}, {"score": 0.0033967510986397946, "phrase": "fault_tolerance"}, {"score": 0.0033329032920236994, "phrase": "failure-free_operation"}, {"score": 0.0032578629307203097, "phrase": "facilitator_agent"}, {"score": 0.0031010029460927864, "phrase": "useless_fault_tolerance_information"}, {"score": 0.0030658872249549893, "phrase": "agent_failures"}, {"score": 0.0030196821790309165, "phrase": "inconsistent_states"}, {"score": 0.002951673109860487, "phrase": "domino_effect"}, {"score": 0.002896167001212006, "phrase": "agent_recovery_algorithm"}, {"score": 0.00286336417751658, "phrase": "garbage_collection_protocol"}, {"score": 0.0028309318332306703, "phrase": "performance_degradation"}, {"score": 0.0027671619871474764, "phrase": "saved_fault_tolerance_information"}, {"score": 0.002735816302446788, "phrase": "stable_storage"}, {"score": 0.0026440340366878003, "phrase": "java"}, {"score": 0.002623890620298988, "phrase": "corba"}, {"score": 0.0025843206540392184, "phrase": "proposed_rollback-recovery_protocol"}, {"score": 0.0022369407711124775, "phrase": "first_rollback-recovery_protocol"}], "paper_keywords": ["Fault tolerance", " Multi-agent system", " Distributed computing system", " Rollback-recovery", " Garbage-collection"], "paper_abstract": "In this paper, we present a fault tolerant and recovery system called FRASystem (Fault Tolerant & Recovery Agent System) using multi-agent in distributed computing systems. Previous rollback-recovery protocols were dependent on an inherent communication and an underlying operating system, which caused a decline of computing performance. We propose a rollback-recovery protocol that works independently on an operating system and leads to an increasing portability and extensibility. We define four types of agents: (1) a recovery agent performs a rollback-recovery protocol after a failure, (2) an information agent constructs domain knowledge as a rule of fault tolerance and information during a failure-free operation, (3) a facilitator agent controls the communication between agents, (4) a garbage collection agent performs garbage collection of the useless fault tolerance information. Since agent failures may lead to inconsistent states of a system and a domino effect, we propose an agent recovery algorithm. A garbage collection protocol addresses the performance degradation caused by the increment of saved fault tolerance information in a stable storage. We implemented a prototype of FRASystem using Java and CORBA and experimented the proposed rollback-recovery protocol. The simulations results indicate that the performance of our protocol is better than previous rollback-recovery protocols which use independent checkpointing and pessimistic message logging without using agents. Our contributions are as follows: (1) this is the first rollback-recovery protocol using agents, (2) FRASystem is not dependent on an operating system, and (3) FRASystem provides a portability and extensibility.", "paper_title": "FRASystem: fault tolerant system using agents in distributed computing systems", "paper_id": "WOS:000287754100002"}