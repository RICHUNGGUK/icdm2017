{"auto_keywords": [{"score": 0.03518935768963286, "phrase": "architectural_knowledge"}, {"score": 0.015719716506582538, "phrase": "architectural_design_decisions"}, {"score": 0.004768104290288521, "phrase": "tool_support"}, {"score": 0.004721711709176679, "phrase": "current_software_architecture_practices"}, {"score": 0.004452641437293878, "phrase": "software_system"}, {"score": 0.004240116703465252, "phrase": "standard_architecture_documentation"}, {"score": 0.004198839649063847, "phrase": "explicit_description"}, {"score": 0.003959447096055027, "phrase": "knowledge_loss"}, {"score": 0.0038261310307416475, "phrase": "maintenance_activities"}, {"score": 0.003715425273229361, "phrase": "additional_effort"}, {"score": 0.003287482882222731, "phrase": "challenging_task"}, {"score": 0.003239549357111286, "phrase": "adequate_tool_support"}, {"score": 0.0030696773722514105, "phrase": "architecture_design_decision_support_system"}, {"score": 0.0029807934480637855, "phrase": "web-based_tool"}, {"score": 0.0026762874092443197, "phrase": "addss"}, {"score": 0.002573424607574822, "phrase": "trace_links"}, {"score": 0.002535876002754739, "phrase": "design_decisions"}, {"score": 0.0024383967028975616, "phrase": "maintenance_operations"}, {"score": 0.002276717177453959, "phrase": "potential_benefits"}, {"score": 0.0021784745589727246, "phrase": "maintenance_and_evolution_activities"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software architecture", " design decisions", " architectural knowledge", " design rationale", " traceability", " software maintenance"], "paper_abstract": "Current software architecture practices have been focused on modeling and documenting the architecture of a software system by means of several architectural views. In practice, the standard architecture documentation lacks explicit description of the decisions made and their underlying rationale, which often leads to knowledge loss. This fact strongly affects the maintenance activities as we need to spend additional effort to replay the decisions made as well as to understand the changes performed in the design. Hence, codifying this architectural knowledge is a challenging task that requires adequate tool support. In this research, we test the capabilities of Architecture Design Decision Support System (ADDSS), a web-based tool for supporting the creation, maintenance, use, and documentation of architectural design decisions (ADD) with their architectures. We used ADDSS to codify architectural knowledge and to maintain those trace links between the design decisions and other software artefacts that would help in the maintenance operations. We illustrate the usage of the tool through four different experiences and discuss the potential benefits of using this architectural knowledge and its impact on the maintenance and evolution activities. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Viability for codifying and documenting architectural design decisions with tool support", "paper_id": "WOS:000276257500001"}