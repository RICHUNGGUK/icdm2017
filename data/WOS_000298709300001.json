{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "raster-based_transparency_techniques"}, {"score": 0.004645057834614705, "phrase": "important_effect"}, {"score": 0.004513450434595191, "phrase": "correct_transparency_rendering"}, {"score": 0.0041703614123283165, "phrase": "geometry_primitives"}, {"score": 0.0038256426589560774, "phrase": "geometry_space"}, {"score": 0.0037171648669537287, "phrase": "object_interpenetrations"}, {"score": 0.0035346515636097533, "phrase": "different_transparency_techniques"}, {"score": 0.003361069456060196, "phrase": "processing_time"}, {"score": 0.003313053707792957, "phrase": "memory_consumption"}, {"score": 0.0031277316566463978, "phrase": "perfect_method"}, {"score": 0.0030830390264125923, "phrase": "correct_transparency"}, {"score": 0.002995554770117301, "phrase": "low_memory_usage"}, {"score": 0.0027675275077806744, "phrase": "challenging_task"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Transparency", " Fragment sorting", " Order-independent transparency"], "paper_abstract": "Transparency is an important effect for several graphics applications. Correct transparency rendering requires fragment-sorting, which can be more expensive than sorting geometry primitives, and can handle situations that might not be solved in geometry space, such as object interpenetrations. In this paper we survey different transparency techniques and analyze them in terms of processing time, memory consumption, and accuracy. Ideally, the perfect method computes correct transparency in real-time with low memory usage. However, achieving these goals simultaneously is still a challenging task. We describe features and trade-offs adopted by each technique, pointing out pros and cons that can be used to help with the decision of which method to use in a given situation. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "A survey of raster-based transparency techniques", "paper_id": "WOS:000298709300001"}