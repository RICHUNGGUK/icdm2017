{"auto_keywords": [{"score": 0.040043316347254894, "phrase": "function_symbols"}, {"score": 0.00481495049065317, "phrase": "termination_proofs"}, {"score": 0.004747429622531595, "phrase": "simply_typed_higher-order_calculi"}, {"score": 0.004300453431933622, "phrase": "computability_path"}, {"score": 0.0037336520904376687, "phrase": "first_version"}, {"score": 0.003478813491904962, "phrase": "higher-order_recursive_path"}, {"score": 0.003310813458610484, "phrase": "type_checks"}, {"score": 0.003241312187060814, "phrase": "recursive_calls"}, {"score": 0.0030847461428168614, "phrase": "bound_variables"}, {"score": 0.002998688867384969, "phrase": "so-called_computability_closure"}, {"score": 0.0029357204796552653, "phrase": "well-foundedness_proof"}, {"score": 0.0028538210899072556, "phrase": "cpo"}, {"score": 0.0027546167254869493, "phrase": "computability_arguments"}, {"score": 0.002658872281461854, "phrase": "girard"}, {"score": 0.0021049977753042253, "phrase": "core_cpo"}], "paper_keywords": ["termination", " path order", " rewriting", " lambda-calculus", " reducibility", " inductive types"], "paper_abstract": "This paper aims at carrying out termination proofs for simply typed higher-order calculi automatically by using ordering comparisons. To this end, we introduce the computability path ordering (CPO), a recursive relation on terms obtained by lifting a precedence on function symbols. A first version, core CPO, is essentially obtained from the higher-order recursive path ordering (HORPO) by eliminating type checks from some recursive calls and by incorporating the treatment of bound variables as in the so-called computability closure. The well-foundedness proof shows that core CPO captures the essence of computability arguments a la Tait and Girard, therefore explaining its name. We further show that no further type check can be eliminated from its recursive calls without loosing well-foundedness, but one for which we found no counter-example yet. Two extensions of core CPO are then introduced which allow one to consider: the first, higher-order inductive types; the second, a precedence in which some function symbols are smaller than application and abstraction.", "paper_title": "THE COMPUTABILITY PATH ORDERING", "paper_id": "WOS:000373922900003"}