{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "racket"}, {"score": 0.00481495049065317, "phrase": "multilingual_component_programming"}, {"score": 0.003901407184706592, "phrase": "inter-operating_components"}, {"score": 0.003785836059995376, "phrase": "different_programming_languages"}, {"score": 0.0036188435232325337, "phrase": "component's_implementation_language"}, {"score": 0.003407549468745519, "phrase": "full_functionality"}, {"score": 0.002976019715894587, "phrase": "small_domain-specific_notation"}, {"score": 0.0026384167183586015, "phrase": "racket_components"}, {"score": 0.0024105326885334962, "phrase": "new_languages"}], "paper_keywords": ["Languages", " Design", " Multi-Lingual Component Programming"], "paper_abstract": "In the world of Racket, software systems consist of inter-operating components in different programming languages. A component's implementation language may provide the full functionality of Racket, or it may support a small domain-specific notation. Naturally, Racketeers construct languages as Racket components and compose them to create new languages. This talk will present the ideas behind Racket: language-specific components, the composition of components, and, most importantly, the rich support for building languages.", "paper_title": "Multilingual Component Programming in Racket", "paper_id": "WOS:000303558100002"}