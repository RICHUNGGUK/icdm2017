{"auto_keywords": [{"score": 0.0490881866285214, "phrase": "javascript"}, {"score": 0.038225482098955335, "phrase": "browser"}, {"score": 0.004428452434981208, "phrase": "ubiquitous_web"}, {"score": 0.00427159312582265, "phrase": "racket"}, {"score": 0.004115697805448384, "phrase": "event-driven_functional_programs"}, {"score": 0.0038249462699142733, "phrase": "rich_control_flow_operators"}, {"score": 0.0036680857629458816, "phrase": "whalesong"}, {"score": 0.003373334961160647, "phrase": "javascript_code"}, {"score": 0.003069867656852932, "phrase": "implementation_strategy"}, {"score": 0.0030062165552187086, "phrase": "delimited_continuations"}, {"score": 0.0026233771102489394, "phrase": "javascript_libraries"}, {"score": 0.002542174767860791, "phrase": "new_platform-dependent_reactive_features"}, {"score": 0.0022653055209664284, "phrase": "racket's_functional_event-driven_programming_model"}, {"score": 0.0021049977753042253, "phrase": "implementation_details"}], "paper_keywords": ["Languages", " Performance", " Racket", " Web", " browsers", " JavaScript"], "paper_abstract": "JavaScript is the language of the ubiquitous Web, but it only poorly supports event-driven functional programs due to its singlethreaded, asynchronous nature and lack of rich control flow operators. We present Whalesong, a compiler from Racket that generates JavaScript code that masks these problems. We discuss the implementation strategy using delimited continuations, an interface to the DOM, and an FFI for adapting JavaScript libraries to add new platform-dependent reactive features. In the process, we also describe extensions to Racket's functional event-driven programming model. We also briefly discuss the implementation details.", "paper_title": "Whalesong: Running Racket in the Browser", "paper_id": "WOS:000331121000010"}