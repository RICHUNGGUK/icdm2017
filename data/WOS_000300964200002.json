{"auto_keywords": [{"score": 0.02826191055301246, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "buffers_offline"}, {"score": 0.0047135086583390585, "phrase": "offline_sorting_buffer_problem"}, {"score": 0.004516962628112147, "phrase": "different_types"}, {"score": 0.004148014765950199, "phrase": "random-access_buffer"}, {"score": 0.003841699919521703, "phrase": "scheduling_strategy"}, {"score": 0.003542786326740931, "phrase": "type_change"}, {"score": 0.003512702405367876, "phrase": "unit_cost"}, {"score": 0.0033517342967390065, "phrase": "total_number"}, {"score": 0.0033232673019931206, "phrase": "type_changes"}, {"score": 0.003267054216881229, "phrase": "entire_sequence"}, {"score": 0.0031440159350875057, "phrase": "manufacturing_processes"}, {"score": 0.003117307618682836, "phrase": "computer_science"}, {"score": 0.003038532168038565, "phrase": "significant_attention"}, {"score": 0.0029744042270542655, "phrase": "main_focus"}, {"score": 0.002924074850256874, "phrase": "online_competitive_algorithms"}, {"score": 0.0028259493298659288, "phrase": "basic_offline_problem"}, {"score": 0.0027078974645805736, "phrase": "sorting_buffer_problem"}, {"score": 0.00268488398249084, "phrase": "uniform_cost"}, {"score": 0.0025076619172878945, "phrase": "offline_problem"}, {"score": 0.002465210678474529, "phrase": "positive_side"}, {"score": 0.0022731540640627307, "phrase": "original_size"}, {"score": 0.002215663255682209, "phrase": "fast_dynamic_programming_algorithm"}, {"score": 0.002187464225869713, "phrase": "special_case"}, {"score": 0.0021688641066186817, "phrase": "buffer_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["NP-hard", " Approximation algorithm", " Resource augmentation", " Buffer sorting"], "paper_abstract": "We consider the offline sorting buffer problem. The input is a sequence of items of different types. All items must be processed one by one by a server. The server is equipped with a random-access buffer of limited capacity which can be used to rearrange items. The problem is to design a scheduling strategy that decides upon the order in which items from the buffer are sent to the server. Each type change incurs unit cost, and thus, the objective is to minimize the total number of type changes for serving the entire sequence. This problem is motivated by various applications in manufacturing processes and computer science, and it has attracted significant attention in the last few years. The main focus has been on online competitive algorithms. Surprisingly little is known on the basic offline problem. In this paper, we show that the sorting buffer problem with uniform cost is NP-hard and, thus, close one of the most fundamental questions for the offline problem. On the positive side, we give an O(1)-approximation algorithm when the scheduler is given a buffer only slightly larger than double the original size. We also sketch a fast dynamic programming algorithm for the special case of buffer size 2. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "A note on sorting buffers offline", "paper_id": "WOS:000300964200002"}