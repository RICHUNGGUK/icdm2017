{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "static_system"}, {"score": 0.004692227830462433, "phrase": "checking_determinism"}, {"score": 0.0041773934798743405, "phrase": "concurrent_processes"}, {"score": 0.003916098498242888, "phrase": "partial_confluence"}, {"score": 0.003531474887552889, "phrase": "different_kinds"}, {"score": 0.003441352119167824, "phrase": "communication_methods"}, {"score": 0.002726740692380339, "phrase": "partial_confluence_checking_problem"}, {"score": 0.0021049977753042253, "phrase": "rational_linear_inequalities"}], "paper_keywords": ["algorithms", " languages", " theory", " determinism", " capabilities", " type systems"], "paper_abstract": "This article presents a static system for checking determinism (technically, partial confluence) of communicating concurrent processes. Our approach automatically detects partial confluence in programs communicating via a mix of different kinds of communication methods: rendezvous channels, buffered channels, broadcast channels, and reference cells. Our system reduces the partial confluence checking problem in polynomial time (in the size of the program) to the problem of solving a system of rational linear inequalities, and is thus efficient.", "paper_title": "A capability calculus for concurrency and determinism", "paper_id": "WOS:000259445600003"}