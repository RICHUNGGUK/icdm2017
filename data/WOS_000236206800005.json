{"auto_keywords": [{"score": 0.036020302585102346, "phrase": "agent_server"}, {"score": 0.01292712017532037, "phrase": "fault_tolerance"}, {"score": 0.012570375170092593, "phrase": "mobile_agents"}, {"score": 0.01242047611182994, "phrase": "agent_server_crash_failures"}, {"score": 0.01084023881191771, "phrase": "agent_server_crash"}, {"score": 0.00481495049065317, "phrase": "fault-tolerant_mobile_agents"}, {"score": 0.004606148097788071, "phrase": "online_information_retrieval"}, {"score": 0.0045324756541157574, "phrase": "computational_elements"}, {"score": 0.004442032546224076, "phrase": "self-managed_computing_systems"}, {"score": 0.0043533862892678864, "phrase": "human_interference"}, {"score": 0.004283739213556286, "phrase": "large_scales"}, {"score": 0.004249332848326785, "phrase": "full_distribution"}, {"score": 0.00418134346679498, "phrase": "poor_system_dependability"}, {"score": 0.0038728990904778678, "phrase": "fault_tolerance_schemes"}, {"score": 0.003749908582313067, "phrase": "autonomie_environment"}, {"score": 0.003601628511550962, "phrase": "remote_agent_servers"}, {"score": 0.003487222504700868, "phrase": "stable_storage"}, {"score": 0.0031020367403802773, "phrase": "failure_model"}, {"score": 0.00301560261110296, "phrase": "mobile_agent_systems"}, {"score": 0.0029792984108210525, "phrase": "exception_handling_scheme"}, {"score": 0.002861402531078998, "phrase": "replica_mobile_agent"}, {"score": 0.0026181517251690606, "phrase": "proposed_scheme"}, {"score": 0.002545165985686468, "phrase": "simple_time-out_scheme"}, {"score": 0.0024642355970277497, "phrase": "performance_results"}, {"score": 0.0023381630439887184, "phrase": "fault_tolerance_measures"}, {"score": 0.0021917966722180132, "phrase": "mobile_agent_trip"}, {"score": 0.0021049977753042253, "phrase": "agent_servers"}], "paper_keywords": ["autonomic computing", " exception handling", " fault tolerance", " mobile agents", " performance evaluation", " server crash failures"], "paper_abstract": "Large-scale distributed applications such as online information retrieval and collaboration over computational elements demand an approach to self-managed computing systems with a minimum of human interference. However, large scales and full distribution often lead to poor system dependability and security, and increase the difficulty in managing and controlling redundancy for fault tolerance. In particular, fault tolerance schemes for mobile agents to survive agent server crash failures in an autonomie environment are complex since developers normally have no control over remote agent servers. Some solutions inject a replica into stable storage upon its arrival at an agent server. But in the event of an agent server crash the replica is unavailable until the agent server recovers. In this paper we present a failure model and an exception handling framework for mobile agent systems. An exception handling scheme is developed for mobile agents to survive agent server crash failures. A replica mobile agent operates at the agent server visited prior to its master's current location. If a master crashes its replica is available as a replacement. The proposed scheme is examined in comparison with a simple time-out scheme. Experimental evaluation is performed, and performance results show that the scheme leads to some overhead in the round trip time when fault tolerance measures are exercised. However the scheme offers the advantage that fault tolerance is provided during the mobile agent trip, i.e. in the event of an agent server crash all agent servers are not revisited.", "paper_title": "A dynamic shadow approach to fault-tolerant mobile agents in an autonomic environment", "paper_id": "WOS:000236206800005"}