{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "line_detection_algorithms"}, {"score": 0.004724708238414131, "phrase": "memory_architecture_utilization"}, {"score": 0.00452063603944825, "phrase": "new_methodology"}, {"score": 0.004217537792708984, "phrase": "improved_performance"}, {"score": 0.003317970131738248, "phrase": "data_cache_accesses"}, {"score": 0.0032763212574036748, "phrase": "data_cache"}, {"score": 0.0032148229832850215, "phrase": "memory_hierarchy"}, {"score": 0.0031544754107802413, "phrase": "algorithm_memory_size"}, {"score": 0.002887450071878095, "phrase": "hardware_parameters"}, {"score": 0.002609770322855842, "phrase": "line_detection"}, {"score": 0.0024968185204913935, "phrase": "computer_vision_application"}, {"score": 0.002419136901298873, "phrase": "microblaze_soft_processor"}, {"score": 0.0023290951071300433, "phrase": "flow_fronts"}, {"score": 0.002285335999629823, "phrase": "microfluid_device"}, {"score": 0.0021049977753042253, "phrase": "conventional_software_implementations"}], "paper_keywords": ["Data reuse", " Data cache", " Assosiativity", " FPGA", " Memory management", " Tiling", " Canny", " Hough"], "paper_abstract": "In this paper, a new methodology for speeding up edge and line detection algorithms is presented, achieving improved performance over the state of the art software library OpenCV (speedup from 1.35 up to 2.22) and other conventional implementations, in both general and embedded processors, by reducing the number of load/store and arithmetic instructions, the number of data cache accesses and data cache misses in memory hierarchy and the algorithm memory size. This is achieved by fully exploiting the combination of the software and hardware parameters which are considered simultaneously as one problem and not separately. Furthermore, the edge and line detection algorithms have been simplified for a computer vision application in a Virtex-5 Xilinx FPGA using Microblaze soft processor (detection and measurement of flow fronts in a microfluid device); it achieves speedup up to 660 times in comparison with conventional software implementations.", "paper_title": "A methodology for speeding up edge and line detection algorithms focusing on memory architecture utilization", "paper_id": "WOS:000334577000018"}