{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "python"}, {"score": 0.04340974385757325, "phrase": "vectorized_operations"}, {"score": 0.04188095992992683, "phrase": "algopy"}, {"score": 0.004638788604042707, "phrase": "scientific_computing"}, {"score": 0.004359328949187473, "phrase": "heavy_use"}, {"score": 0.004305481798183612, "phrase": "numerical_linear_algebra"}, {"score": 0.004252302622447653, "phrase": "nla"}, {"score": 0.003802135020791801, "phrase": "arbitrary_order"}, {"score": 0.0037551444630619015, "phrase": "taylor_approximations"}, {"score": 0.0034851070574149993, "phrase": "univariate_taylor_polynomial_arithmetic"}, {"score": 0.0033159224502739247, "phrase": "algorithmic_differentiation"}, {"score": 0.0031549249117721946, "phrase": "existing_ad_tools"}, {"score": 0.003077372515276563, "phrase": "nla_functions"}, {"score": 0.0029097582786754444, "phrase": "scalar_elementary_functions"}, {"score": 0.0028382152567141784, "phrase": "dedicated_algorithms"}, {"score": 0.0027857115172243226, "phrase": "matrix_product"}, {"score": 0.0027512482368183596, "phrase": "matrix_inverse"}, {"score": 0.0027003621937947355, "phrase": "cholesky"}, {"score": 0.0026175952455594277, "phrase": "symmetric_eigenvalue_decomposition"}, {"score": 0.002429161048032688, "phrase": "alternative_approach"}, {"score": 0.0023694065215394593, "phrase": "underlying_idea"}, {"score": 0.002212535878761148, "phrase": "user's_point"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Automatic differentiation", " Cholesky decomposition", " Hierarchical approach", " Higher-order derivatives", " Numerical linear algebra", " NumPy", " Taylor arithmetic"], "paper_abstract": "Many programs for scientific computing in Python are based on NumPy and therefore make heavy use of numerical linear algebra (NLA) functions, vectorized operations, slicing and broadcasting. AlgoPy provides the means to compute derivatives of arbitrary order and Taylor approximations of such programs. The approach is based on a combination of univariate Taylor polynomial arithmetic and matrix calculus in the (combined) forward/reverse mode of Algorithmic Differentiation (AD). In contrast to existing AD tools, vectorized operations and NLA functions are not considered to be a sequence of scalar elementary functions. Instead, dedicated algorithms for the matrix product, matrix inverse and the Cholesky, QR, and symmetric eigenvalue decomposition are implemented in AlgoPy. We discuss the reasons for this alternative approach and explain the underlying idea. Examples illustrate how AlgoPy can be used from a user's point of view. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Algorithmic differentiation in Python with AlgoPy", "paper_id": "WOS:000328297100004"}