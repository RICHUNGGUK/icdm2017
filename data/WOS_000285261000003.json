{"auto_keywords": [{"score": 0.009405907274710242, "phrase": "database_connections"}, {"score": 0.00481495049065317, "phrase": "resource_pools"}, {"score": 0.004771435352180973, "phrase": "web_application_servers"}, {"score": 0.004685575787741084, "phrase": "web_application_server_resources"}, {"score": 0.004377077848734575, "phrase": "service_request"}, {"score": 0.004201774694043468, "phrase": "significant_part"}, {"score": 0.003871869188502677, "phrase": "major_portion"}, {"score": 0.0038368442918503072, "phrase": "request_rejections"}, {"score": 0.003802135020791801, "phrase": "server_overload_conditions"}, {"score": 0.003584025547693836, "phrase": "optimal_pool_sizes"}, {"score": 0.00334780964309978, "phrase": "incoming_request_flow"}, {"score": 0.00330246222643051, "phrase": "fine-grained_server_resource_utilization"}, {"score": 0.0032282396745967504, "phrase": "different_types"}, {"score": 0.003141364320497748, "phrase": "online_request"}, {"score": 0.0029076695661972114, "phrase": "database_connection_pooling_mechanism"}, {"score": 0.0027910516355928983, "phrase": "service_request_execution"}, {"score": 0.002536763634539386, "phrase": "tpc-w_web_application"}, {"score": 0.002423931101340771, "phrase": "optimal_number"}, {"score": 0.002401972657236928, "phrase": "server_threads"}, {"score": 0.002316105585203396, "phrase": "sustainable_request_throughput"}, {"score": 0.002193013499219711, "phrase": "actual_value"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Internet services", " web application server performance", " database connection caching", " provisioning and optimization of server resource pools", " mathematical modeling"], "paper_abstract": "Among the web application server resources, the most critical for their performance are those that are held exclusively by a service request for the duration of its execution (or some significant part of it). Such exclusively held server resources become performance bottleneck points, with failures to obtain such a resource constituting a major portion of request rejections under server overload conditions. In this paper, we propose a methodology that computes the optimal pool sizes for two such critical resources: web server threads and database connections. Our methodology uses information about incoming request flow and about fine-grained server resource utilization by service requests of different types, obtained through offline and online request profiling. In our methodology, we advocate (and show its benefits) the use of a database connection pooling mechanism that caches database connections for the duration of a service request execution (so-called request-wide database connection caching). We evaluate our methodology by testing it on the TPC-W web application. Our method is able to accurately compute the optimal number of server threads and database connections, and the value of sustainable request throughput computed by the method always lies within a 5% margin of the actual value determined experimentally. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Optimizing utilization of resource pools in web application servers", "paper_id": "WOS:000285261000003"}