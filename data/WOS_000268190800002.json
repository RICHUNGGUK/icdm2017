{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed"}, {"score": 0.004601508848655033, "phrase": "top-k_query_processing"}, {"score": 0.0045324756541157574, "phrase": "fundamental_building_block"}, {"score": 0.0044870272550540415, "phrase": "efficient_ranking"}, {"score": 0.004419703921314433, "phrase": "large_number"}, {"score": 0.004266501496765747, "phrase": "central_issue"}, {"score": 0.00418134346679498, "phrase": "distributed_settings"}, {"score": 0.004016072233242585, "phrase": "different_nodes"}, {"score": 0.0038573081851680656, "phrase": "novel_optimization_methods"}, {"score": 0.0038186039088445524, "phrase": "top-k_aggregation_queries"}, {"score": 0.0038025812227605134, "phrase": "klee"}, {"score": 0.0034348484776384643, "phrase": "prior_tput"}, {"score": 0.0031684791285366315, "phrase": "input_lists"}, {"score": 0.0031366648074858555, "phrase": "top-k_operator_trees"}, {"score": 0.003073988343893906, "phrase": "tree_structure"}, {"score": 0.0029973957125353306, "phrase": "data-adaptive_scan_depths"}, {"score": 0.0027788478707700274, "phrase": "small_subset"}, {"score": 0.002750934994181092, "phrase": "input_sources"}, {"score": 0.0026688629249775925, "phrase": "query-relevant_network_nodes"}, {"score": 0.002563219920877287, "phrase": "statistical_cost_model"}, {"score": 0.002524688179363081, "phrase": "local_synopses"}, {"score": 0.0023053339328456234, "phrase": "order_statistics"}, {"score": 0.0022478501955483007, "phrase": "comprehensive_experiments"}, {"score": 0.002137137933768807, "phrase": "packet-level_simulation"}, {"score": 0.0021049977753042253, "phrase": "large_internet-style_network"}], "paper_keywords": ["Top-k", " Distributed queries", " Query optimization", " Cost models"], "paper_abstract": "Top-k query processing is a fundamental building block for efficient ranking in a large number of applications. Efficiency is a central issue, especially for distributed settings, when the data is spread across different nodes in a network. This paper introduces novel optimization methods for top-k aggregation queries in such distributed environments. The optimizations can be applied to all algorithms that fall into the frameworks of the prior TPUT and KLEE methods. The optimizations address three degrees of freedom: 1) hierarchically grouping input lists into top-k operator trees and optimizing the tree structure, 2) computing data-adaptive scan depths for different input sources, and 3) data-adaptive sampling of a small subset of input sources in scenarios with hundreds or thousands of query-relevant network nodes. All optimizations are based on a statistical cost model that utilizes local synopses, e.g., in the form of histograms, efficiently computed convolutions, and estimators based on order statistics. The paper presents comprehensive experiments, with three different real-life datasets and using the ns-2 network simulator for a packet-level simulation of a large Internet-style network.", "paper_title": "Distributed top-k aggregation queries at large", "paper_id": "WOS:000268190800002"}