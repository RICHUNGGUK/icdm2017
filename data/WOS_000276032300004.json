{"auto_keywords": [{"score": 0.049692788583269344, "phrase": "process_modeling"}, {"score": 0.04492795963065823, "phrase": "normative_process"}, {"score": 0.00481495049065317, "phrase": "exception_handling_patterns_for_process_modeling"}, {"score": 0.004586531354697466, "phrase": "multiple_people"}, {"score": 0.004012500850311087, "phrase": "real-world_processes"}, {"score": 0.003791141540467091, "phrase": "process_model"}, {"score": 0.0036553070575015344, "phrase": "exceptional_situations"}, {"score": 0.0034676182423067307, "phrase": "abstract_patterns"}, {"score": 0.003384262486955773, "phrase": "exception_handling_tasks"}, {"score": 0.003289534854212415, "phrase": "object-oriented_design_patterns"}, {"score": 0.003158776195052182, "phrase": "object-oriented_programs"}, {"score": 0.0030953529970646626, "phrase": "process_patterns"}, {"score": 0.0029602552900111407, "phrase": "process_models"}, {"score": 0.0025683064072350914, "phrase": "bpmn"}, {"score": 0.002311047934798247, "phrase": "preliminary_statistical_survey_data"}, {"score": 0.0022011501095573747, "phrase": "actual_use"}, {"score": 0.002165688807780663, "phrase": "relative_merits"}], "paper_keywords": ["Exception handling patterns", " process modeling", " process modeling languages"], "paper_abstract": "Process modeling allows for analysis and improvement of processes that coordinate multiple people and tools working together to carry out a task. Process modeling typically focuses on the normative process, that is, how the collaboration transpires when everything goes as desired. Unfortunately, real-world processes rarely proceed that smoothly. A more complete analysis of a process requires that the process model also include details about what to do when exceptional situations arise. We have found that, in many cases, there are abstract patterns that capture the relationship between exception handling tasks and the normative process. Just as object-oriented design patterns facilitate the development, documentation, and maintenance of object-oriented programs, we believe that process patterns can facilitate the development, documentation, and maintenance of process models. In this paper, we focus on the exception handling patterns that we have observed over many years of process modeling. We describe these patterns using three process modeling notations: UML 2.0 Activity Diagrams, BPMN, and Little-JIL. We present both the abstract structure of the pattern as well as examples of the pattern in use. We also provide some preliminary statistical survey data to support the claim that these patterns are found commonly in actual use and discuss the relative merits of the three notations with respect to their ability to represent these patterns.", "paper_title": "Exception Handling Patterns for Process Modeling", "paper_id": "WOS:000276032300004"}