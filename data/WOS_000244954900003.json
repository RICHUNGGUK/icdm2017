{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "iterative_algorithms"}, {"score": 0.049613254104042076, "phrase": "matrix_operations"}, {"score": 0.03502296972836849, "phrase": "fpga_implementation"}, {"score": 0.004721711709176679, "phrase": "efficient_fpga_design-implementation"}, {"score": 0.004675768396728975, "phrase": "finite_interval_constant_modulus_algorithm"}, {"score": 0.004323886831151445, "phrase": "hardware_implementation"}, {"score": 0.00428179779071721, "phrase": "field_programmable_gate_arrays"}, {"score": 0.0041579627441997, "phrase": "integer_linear_programming"}, {"score": 0.0038827100184187805, "phrase": "finite_interval"}, {"score": 0.0037336520904376687, "phrase": "equalization_algorithm"}, {"score": 0.003661275004971829, "phrase": "modern_communication_systems"}, {"score": 0.003503497128638102, "phrase": "floating-point_calculations"}, {"score": 0.0032237268289353983, "phrase": "logarithmic_number_system"}, {"score": 0.0031457622320220364, "phrase": "floating-point_number_system"}, {"score": 0.003099888654615187, "phrase": "standard_ieee_format"}, {"score": 0.003024909947609294, "phrase": "pipelined_modules"}, {"score": 0.002995427206425849, "phrase": "traditional_approaches"}, {"score": 0.0029229677574293725, "phrase": "nested_loops"}, {"score": 0.0028662606272282926, "phrase": "relatively_large_code"}, {"score": 0.0027026375053777543, "phrase": "new_high-level_synthesis_methodology"}, {"score": 0.0026243534128245886, "phrase": "imperfectly_nested_loops"}, {"score": 0.002523481637809674, "phrase": "linear_inequalities"}, {"score": 0.002474505516708906, "phrase": "memory_access"}, {"score": 0.002414616656410503, "phrase": "additional_resource_constraint"}, {"score": 0.0023446797955300937, "phrase": "ilp"}, {"score": 0.0022216045996270974, "phrase": "important_part"}, {"score": 0.0021049977753042253, "phrase": "problem_size"}], "paper_keywords": ["high-level synthesis", " cyclic scheduling", " iterative algorithms", " imperfectly nested loops", " integer linear programming", " FPGA", " VLSI design", " blind equalization", " implementation"], "paper_abstract": "This paper deals with the optimization of iterative algorithms with matrix operations or nested loops for hardware implementation in Field Programmable Gate Arrays (FPGA), using Integer Linear Programming (ILP). The method is demonstrated on an implementation of the Finite Interval Constant Modulus Algorithm. It is an equalization algorithm, suitable for modern communication systems (4G and behind). For the floating-point calculations required in the algorithm, two arithmetic libraries were used in the FPGA implementation: one based on the logarithmic number system, the other using floating-point number system in the standard IEEE format. Both libraries use pipelined modules. Traditional approaches to the scheduling of nested loops lead to a relatively large code, which is unsuitable for FPGA implementation. This paper presents a new high-level synthesis methodology, which models both, iterative loops and imperfectly nested loops, by means of the system of linear inequalities. Moreover, memory access is considered as an additional resource constraint. Since the solutions of ILP formulated problems are known to be computationally intensive, an important part of the article is devoted to the reduction of the problem size.", "paper_title": "Scheduling of iterative algorithms with matrix operations for efficient FPGA design-implementation of finite interval constant modulus algorithm", "paper_id": "WOS:000244954900003"}