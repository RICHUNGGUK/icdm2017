{"auto_keywords": [{"score": 0.04586846484671967, "phrase": "gpu"}, {"score": 0.027380826439163838, "phrase": "dedicated_throughput"}, {"score": 0.00481495049065317, "phrase": "gpu-accelerated_grid_systems"}, {"score": 0.004641351004344458, "phrase": "cooperative_multitasking_method"}, {"score": 0.00458488025289647, "phrase": "concurrent_execution"}, {"score": 0.004529093447865156, "phrase": "scientific_and_graphics_applications"}, {"score": 0.004446677711302801, "phrase": "graphics_processing_unit"}, {"score": 0.004157058883925715, "phrase": "unified_device_architecture-based_applications"}, {"score": 0.0038862297330905836, "phrase": "significant_slow-down"}, {"score": 0.003700371064796848, "phrase": "scientific_tasks"}, {"score": 0.0036553070575015344, "phrase": "smaller_pieces"}, {"score": 0.003459191419478298, "phrase": "appropriate_intervals"}, {"score": 0.003253560798692431, "phrase": "best_tradeoff_point"}, {"score": 0.003213920601037463, "phrase": "scientific_applications"}, {"score": 0.0031747618267940155, "phrase": "graphics_applications"}, {"score": 0.0031360786664165093, "phrase": "experimental_results"}, {"score": 0.0030601162942933665, "phrase": "proposed_method"}, {"score": 0.002949598537993663, "phrase": "frame_rate"}, {"score": 0.0028958411976400646, "phrase": "graphics_application"}, {"score": 0.002791239714439304, "phrase": "scientific_application"}, {"score": 0.0027069560455629917, "phrase": "biological_sequence_alignment"}, {"score": 0.002530359917257626, "phrase": "interactive_rendering"}, {"score": 0.0023798115577749225, "phrase": "matrix_multiplication"}, {"score": 0.002224510044064184, "phrase": "word_processing"}, {"score": 0.002197379785587054, "phrase": "web_browsing"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multitasking", " GPU", " CUDA", " grid computing"], "paper_abstract": "This paper presents a cooperative multitasking method for concurrent execution of scientific and graphics applications on the graphics processing unit (GPU). Our method is designed to accelerate compute unified device architecture-based applications using idle GPU cycles in the office. To prevent significant slow-down of graphics applications, the method divides scientific tasks into smaller pieces, which are then sequentially executed at the appropriate intervals. The method also has flexibility in finding the best tradeoff point between scientific applications and graphics applications. Experimental results show that the proposed method is useful to control the frame rate of the graphics application and the throughput of the scientific application. For example, biological sequence alignment can be processed at approximately 30% of the dedicated throughput while achieving interactive rendering at 58 frames per second. We also show that matrix multiplication can be efficiently processed at 60% of the dedicated throughput during word processing and web browsing. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Cooperative multitasking for GPU-accelerated grid systems", "paper_id": "WOS:000298584200010"}