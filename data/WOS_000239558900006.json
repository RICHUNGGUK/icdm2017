{"auto_keywords": [{"score": 0.049581014501477005, "phrase": "real-time_systems"}, {"score": 0.03246370464213872, "phrase": "scoped_types"}, {"score": 0.00481495049065317, "phrase": "real-time_java"}, {"score": 0.004072851768196397, "phrase": "higher-level_programming_models"}, {"score": 0.00396767023935381, "phrase": "real-time_specification"}, {"score": 0.0038651944848734133, "phrase": "real-time_programmers"}, {"score": 0.003355717283753749, "phrase": "real-time_execution"}, {"score": 0.0032689949867583633, "phrase": "memory_allocation"}, {"score": 0.0027790254309734428, "phrase": "clear_model"}, {"score": 0.0026096659285441384, "phrase": "run-time_memory_errors"}, {"score": 0.0025288869172313674, "phrase": "rtsj."}, {"score": 0.002412371116984224, "phrase": "real-time_concerns"}, {"score": 0.002337684811187166, "phrase": "applications'_base_code"}, {"score": 0.002289180040240783, "phrase": "integrated_scoped_types"}, {"score": 0.0022653055209664284, "phrase": "aspects_approach"}, {"score": 0.0021496083700137305, "phrase": "real-time_java_systems"}, {"score": 0.0021049977753042253, "phrase": "simpler_systems"}], "paper_keywords": [""], "paper_abstract": "Real-time systems are notoriously difficult to design and implement, and, as many real-time problems are safety-critical, their solutions must be reliable as well as efficient and correct. While higher-level programming models (such as the Real-Time Specification for Java) permit real-time programmers to use language features that most programmers take for granted (objects, type checking, dynamic dispatch, and memory safety) the compromises required for real-time execution, 'especially concerning memory allocation, can create as many problems as they solve. This paper presents Scoped Types and Aspects for Real-Time Systems (STARS) a novel programming model for real-time systems. Scoped Types give programmers a clear model of their programs' memory use, and, being statically checkable, prevent the run-time memory errors that bedevil models such as RTSJ. Our Aspects build on Scoped Types guarantees so that Real-Time concerns can be completely separated from applications' base code. Adopting the integrated Scoped Types and Aspects approach can significantly improve both the quality and performance of a real-time Java systems, resulting in simpler systems that are reliable, efficient, and correct.", "paper_title": "Scoped types and aspects for real-time Java", "paper_id": "WOS:000239558900006"}