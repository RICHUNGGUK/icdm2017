{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "functional_test-suites"}, {"score": 0.004735651915966323, "phrase": "software_systems"}, {"score": 0.004580933283492972, "phrase": "deficient_software_testing_process"}, {"score": 0.004505471345843642, "phrase": "unfortunate_consequences"}, {"score": 0.004449688143230257, "phrase": "data_losses"}, {"score": 0.004412881870378388, "phrase": "large_economic_losses"}, {"score": 0.004376378707877484, "phrase": "security_breaches"}, {"score": 0.004322186889256224, "phrase": "even_bodily_harm"}, {"score": 0.004180919839686364, "phrase": "effective_and_economical_testing"}, {"score": 0.004129138311177554, "phrase": "key_issue"}, {"score": 0.0040949726088047225, "phrase": "combinatorial_testing"}, {"score": 0.0038796562792487, "phrase": "software_testing"}, {"score": 0.003737234606207431, "phrase": "economical_sized_test-suites"}, {"score": 0.0035113478590679133, "phrase": "combinatorial_structures"}, {"score": 0.003340475943517995, "phrase": "combinatorial_objects"}, {"score": 0.0032581736321024373, "phrase": "test_case"}, {"score": 0.0030995835539697893, "phrase": "exhaustive_approach"}, {"score": 0.003010651173285521, "phrase": "interaction_coverage"}, {"score": 0.00288800021194675, "phrase": "metaheuristic_approach"}, {"score": 0.00284034646798833, "phrase": "simulated_annealing"}, {"score": 0.002657445352746803, "phrase": "efficient_heuristic"}, {"score": 0.002624482632439123, "phrase": "good_quality_initial_solutions"}, {"score": 0.0023750478314945303, "phrase": "software_components"}, {"score": 0.002345579707333727, "phrase": "experimental_evidence"}, {"score": 0.002306855521822739, "phrase": "sa_algorithm"}, {"score": 0.002259346051668556, "phrase": "obtained_results"}, {"score": 0.0021492686054379755, "phrase": "optimal_solution"}, {"score": 0.0021049977753042253, "phrase": "solved_cases"}], "paper_keywords": [""], "paper_abstract": "Today, software systems are complex and have many possible configurations. A deficient software testing process often leads to unfortunate consequences, including data losses, large economic losses, security breaches, and even bodily harm. Thus, the problem of performing effective and economical testing is a key issue. Combinatorial testing is a method that can reduce cost and increase the effectiveness of software testing for many applications. It is based on constructing economical sized test-suites that provide coverage of the most prevalent configurations. Mixed covering arrays (MCAs) are combinatorial structures that can be used to represent these test-suites. MCAs are combinatorial objects represented as matrices having a test case per row. MCAs are small, in comparison to an exhaustive approach, and guarantee a level of interaction coverage among the parameters involved. This study presents a metaheuristic approach based on a simulated annealing (SA) algorithm for constructing MCAs. This algorithm incorporates several distinguishing features, including an efficient heuristic to generate good quality initial solutions, and a compound neighbourhood function that combines two carefully designed neighbourhood functions. The experimental design involved a benchmark reported in the literature and two real cases of software components. The experimental evidence showed that the SA algorithm equals or improves the obtained results by other approaches reported in the literature, and also finds the optimal solution in some of the solved cases.", "paper_title": "Metaheuristic approach for constructing functional test-suites", "paper_id": "WOS:000321893100005"}