{"auto_keywords": [{"score": 0.03861529053005002, "phrase": "nuca_cache"}, {"score": 0.006276600275687795, "phrase": "data_migrations"}, {"score": 0.004780780407878596, "phrase": "anticipating_data_promotion"}, {"score": 0.0047468516620285525, "phrase": "dynamic_nuca_caches"}, {"score": 0.004696407360309416, "phrase": "exponential_increase"}, {"score": 0.004663074596384574, "phrase": "multicore_processor"}, {"score": 0.0045971138571344345, "phrase": "cache_sizes"}, {"score": 0.004483909657713567, "phrase": "wire_delays"}, {"score": 0.004389089062127892, "phrase": "traditional_caches"}, {"score": 0.004160681553892794, "phrase": "nuca"}, {"score": 0.004116440453049531, "phrase": "whole_cache_memory"}, {"score": 0.004087207102190335, "phrase": "smaller_banks"}, {"score": 0.004000741805312148, "phrase": "processor_core"}, {"score": 0.003958194802333944, "phrase": "lower_access_latencies"}, {"score": 0.0037924666577694222, "phrase": "cache's_internal_wires"}, {"score": 0.0037387746981660717, "phrase": "best_placement"}, {"score": 0.003633652174971415, "phrase": "particular_moment"}, {"score": 0.003607834976869384, "phrase": "program_execution"}, {"score": 0.0034567253581991226, "phrase": "dynamic_nuca"}, {"score": 0.0033119237381809617, "phrase": "multiple_banks"}, {"score": 0.003218764138744059, "phrase": "data_migration"}, {"score": 0.0031845067058084583, "phrase": "data_placement"}, {"score": 0.003150612723641925, "phrase": "program's_behavior"}, {"score": 0.003105979498529766, "phrase": "standard_migration_scheme"}, {"score": 0.002975826686621829, "phrase": "half_the_hits"}, {"score": 0.0029336622847544857, "phrase": "non-optimal_banks"}, {"score": 0.002780783274864117, "phrase": "optimal_banks"}, {"score": 0.002683304054823427, "phrase": "prefetcher_component"}, {"score": 0.0026171036268367713, "phrase": "next_memory_request"}, {"score": 0.0025343769150179764, "phrase": "realistic_implementation"}, {"score": 0.0024368006923629476, "phrase": "perfect_prefetcher"}, {"score": 0.0021582723621960693, "phrase": "access_latency"}, {"score": 0.0021049977753042253, "phrase": "performance_improvements"}], "paper_keywords": ["Design", " Management", " Performance", " Memory hierarchy", " cache memory", " NUCA", " migration", " prefetching"], "paper_abstract": "The exponential increase in multicore processor (CMP) cache sizes accompanied by growing on-chip wire delays make it difficult to implement traditional caches with a single, uniform access latency. Non-Uniform Cache Architecture (NUCA) designs have been proposed to address this problem. A NUCA divides the whole cache memory into smaller banks and allows banks nearer a processor core to have lower access latencies than those further away, thus mitigating the effects of the cache's internal wires. Determining the best placement for data in the NUCA cache at any particular moment during program execution is crucial for exploiting the benefits that this architecture provides. Dynamic NUCA (D-NUCA) allows data to be mapped to multiple banks within the NUCA cache, and then uses data migration to adapt data placement to the program's behavior. Although the standard migration scheme is effective in moving data to its optimal position within the cache, half the hits still occur within non-optimal banks. This paper reduces this number by anticipating data migrations and moving data to the optimal banks in advance of being required. We introduce a prefetcher component to the NUCA cache that predicts the next memory request based on the past. We develop a realistic implementation of this prefetcher and, furthermore, experiment with a perfect prefetcher that always knows where the data resides, in order to evaluate the limits of this approach. We show that using our realistic data prefetching to anticipate data migrations in the NUCA cache can reduce the access latency by 15% on average and achieve performance improvements of up to 17%.", "paper_title": "The Migration Prefetcher: Anticipating Data Promotion in Dynamic NUCA Caches", "paper_id": "WOS:000299995000028"}