{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "managed_runtime_environments"}, {"score": 0.03441652477229554, "phrase": "vmkit"}, {"score": 0.0046131834555742796, "phrase": "jvm"}, {"score": 0.0045543031998987685, "phrase": "cli"}, {"score": 0.004476963405985556, "phrase": "attractive_environment"}, {"score": 0.00443878620915958, "phrase": "program_execution"}, {"score": 0.0041984140090404985, "phrase": "bytecode_language"}, {"score": 0.004162602203448056, "phrase": "automatic_memory_management"}, {"score": 0.003937136912336851, "phrase": "mre"}, {"score": 0.0038868464660354626, "phrase": "e._g._a_garbage_collector"}, {"score": 0.0037719988989298983, "phrase": "herculean_task"}, {"score": 0.0036762529165489644, "phrase": "new_languages"}, {"score": 0.003359816816853762, "phrase": "existing_mre_based_languages"}, {"score": 0.0031505544969981096, "phrase": "common_substrate"}, {"score": 0.0030705342386533083, "phrase": "high-level_mres"}, {"score": 0.0029165216647792924, "phrase": "java_virtual_machine"}, {"score": 0.0027940789980683, "phrase": "extensive_study"}, {"score": 0.002608744950946475, "phrase": "new_mres"}, {"score": 0.002586457551025025, "phrase": "mre_extensions"}, {"score": 0.002553382046204689, "phrase": "resulting_performance"}, {"score": 0.0023942269247089277, "phrase": "common_language_runtime"}, {"score": 0.002283839204519042, "phrase": "well_established_open_source"}, {"score": 0.002244969789802093, "phrase": "apache_harmony"}, {"score": 0.0021049977753042253, "phrase": "dacapo_benchmarks"}], "paper_keywords": ["Design", " Performance", " Experimentation", " Virtual machine", " Just in Time Compiler", " VMKit", " LLVM"], "paper_abstract": "Managed Runtime Environments (MREs), such as the JVM and the CLI, form an attractive environment for program execution, by providing portability and safety, via the use of a bytecode language and automatic memory management, as well as good performance, via just-in-time (JIT) compilation. Nevertheless, developing a fully featured MRE, including e. g. a garbage collector and JIT compiler, is a herculean task. As a result, new languages cannot easily take advantage of the benefits of MREs, and it is difficult to experiment with extensions of existing MRE based languages. This paper describes and evaluates VMKit, a first attempt to build a common substrate that eases the development of high-level MREs. We have successfully used VMKit to build two MREs: a Java Virtual Machine and a Common Language Runtime. We provide an extensive study of the lessons learned in developing this infrastructure, and assess the ease of implementing new MREs or MRE extensions and the resulting performance. In particular, it took one of the authors only one month to develop a Common Language Runtime using VMKit. VMKit furthermore has performance comparable to the well established open source MREs Cacao, Apache Harmony and Mono, and is 1.2 to 3 times slower than JikesRVM on most of the DaCapo benchmarks.", "paper_title": "VMKit: a Substrate for Managed Runtime Environments", "paper_id": "WOS:000280548400005"}