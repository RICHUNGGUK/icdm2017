{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "partitioned_real-time_application"}, {"score": 0.004640079189342692, "phrase": "temporal_isolation"}, {"score": 0.004583205112737672, "phrase": "critical_activities"}, {"score": 0.004471530397729526, "phrase": "important_design_criterion"}, {"score": 0.004416713079266374, "phrase": "real-time_open_systems"}, {"score": 0.004230068512904886, "phrase": "resource_reservation_techniques"}, {"score": 0.004076352180903171, "phrase": "reservation_servers"}, {"score": 0.004026359831748917, "phrase": "virtual_processor"}, {"score": 0.003808845109556467, "phrase": "computing_power"}, {"score": 0.0037159680715717056, "phrase": "physical_platform"}, {"score": 0.003625347557965931, "phrase": "implementation_details"}, {"score": 0.0034294219963679857, "phrase": "general_framework"}, {"score": 0.003284361433827464, "phrase": "hard_real-time_tasks"}, {"score": 0.0031845067058084583, "phrase": "multiple_virtual_processors"}, {"score": 0.0031068064097811844, "phrase": "communication_latencies"}, {"score": 0.0030123335878664064, "phrase": "novel_method"}, {"score": 0.0028848643090508205, "phrase": "activation_times"}, {"score": 0.0027457584014804574, "phrase": "different_virtual_processors"}, {"score": 0.0026458370516131255, "phrase": "well-established_theories"}, {"score": 0.0025812459787060097, "phrase": "extensive_simulations"}, {"score": 0.0023819914954155905, "phrase": "existing_algorithms"}, {"score": 0.0023382335380460304, "phrase": "proposed_method"}, {"score": 0.00230950802983053, "phrase": "better_performance"}, {"score": 0.002225426912273257, "phrase": "total_bandwidth"}, {"score": 0.0021845387990972543, "phrase": "maximum_individual_bandwidth"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Real-time systems", " Resource reservation", " Deadline assignment", " Multiprocessor"], "paper_abstract": "Providing temporal isolation between critical activities has been an important design criterion in real-time open systems, which can be achieved using resource reservation techniques. As an abstraction of reservation servers, virtual processor is often used to represent a portion of computing power available on a physical platform while hiding the implementation details. In this paper, we present a general framework of partitioning an application comprised of hard real-time tasks with precedence constraints onto multiple virtual processors in consideration of communication latencies between tasks. A novel method is proposed for assigning deadlines and activation times to tasks such that tasks partitioned onto different virtual processors can be analyzed separately using well-established theories for uniprocessor. Extensive simulations have been performed and the results have shown that, compared to existing algorithms, the proposed method achieves better performance in terms of minimizing both total bandwidth and the maximum individual bandwidth. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Deadline and activation time assignment for partitioned real-time application on multiprocessor reservations", "paper_id": "WOS:000333856800002"}