{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "faster_twig_pattern_matching"}, {"score": 0.004693476992528682, "phrase": "dewey_id."}, {"score": 0.004497762477097628, "phrase": "twig_pattern"}, {"score": 0.0043842558719324526, "phrase": "xml_database"}, {"score": 0.004273601449537163, "phrase": "core_operation"}, {"score": 0.004201381218977942, "phrase": "efficient_evaluation"}, {"score": 0.004130376386308024, "phrase": "xml_queries"}, {"score": 0.003991932110277654, "phrase": "lu_et_al"}, {"score": 0.003760685138103153, "phrase": "tjfast_algorithm"}, {"score": 0.003634587156159668, "phrase": "extended_dewey_labelling_scheme"}, {"score": 0.003542786326740931, "phrase": "better_performance"}, {"score": 0.0033660587983313536, "phrase": "of-the-art_holistic_twig"}, {"score": 0.002539978170928796, "phrase": "extended_dewey_id."}, {"score": 0.0024547103576350233, "phrase": "cpu_cost"}, {"score": 0.002372298201966367, "phrase": "indexed_inputs"}], "paper_keywords": [""], "paper_abstract": "Finding all the occurrences of a twig pattern in an XML database is a core operation for efficient evaluation of XML queries. Recently, Lu et al. [7] proposed the TJFast algorithm that uses the extended Dewey labelling scheme and reported better performance compared with other state-of-the-art holistic twig join algorithms, both in terms of number of elements scanned and stored during the computation. In this paper, we designed an enhancement to further exploit the power of the extended Dewey ID. This reduces the CPU cost and also favors indexed inputs. Our algorithm can be shown analytically as efficient as TJFast in terms of worst case I/O, and experimentally performs significantly better.", "paper_title": "Faster twig pattern matching using extended Dewey ID", "paper_id": "WOS:000241155300029"}