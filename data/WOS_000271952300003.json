{"auto_keywords": [{"score": 0.049604883316905664, "phrase": "real-time_ray_tracing"}, {"score": 0.03794869647631241, "phrase": "scene_database"}, {"score": 0.02923053475292051, "phrase": "trax_architecture"}, {"score": 0.00481495049065317, "phrase": "multicore_hardware_architecture"}, {"score": 0.004696608876994947, "phrase": "ray_execution"}, {"score": 0.004558414405811025, "phrase": "highly_parallel_multithreaded_multicore_processor_architecture"}, {"score": 0.004272724011826495, "phrase": "thread_processors"}, {"score": 0.003945467978172845, "phrase": "larger_fus"}, {"score": 0.0038869467872381957, "phrase": "programmable_interconnect"}, {"score": 0.003829290275367182, "phrase": "memory_system"}, {"score": 0.0035712919163869176, "phrase": "write-only_access"}, {"score": 0.0035183010916001664, "phrase": "frame_buffer_output"}, {"score": 0.0034660938095219846, "phrase": "efficient_data_delivery"}, {"score": 0.0034146585649631692, "phrase": "relatively_simple_memory_system"}, {"score": 0.003281186608301359, "phrase": "single-ray_performance"}, {"score": 0.0032004205378150354, "phrase": "ray_packets"}, {"score": 0.0031686717525002935, "phrase": "single-instruction-multiple-data_mode"}, {"score": 0.0026480044868438875, "phrase": "ray_tracing"}, {"score": 0.0026217213613095322, "phrase": "simulated_results"}, {"score": 0.00256993314099902, "phrase": "multicore_version"}, {"score": 0.002481747081849503, "phrase": "modest_speed"}, {"score": 0.0024327171018928458, "phrase": "real-time_ray-traced_images"}, {"score": 0.002337537183727731, "phrase": "video_games"}, {"score": 0.0022573076362326135, "phrase": "secondary_rays"}, {"score": 0.0021049977753042253, "phrase": "packet-based_ray_tracers"}], "paper_keywords": ["Computer architecture", " computer graphics", " ray tracing"], "paper_abstract": "Threaded Ray eXecution (TRaX) is a highly parallel multithreaded multicore processor architecture designed for real-time ray tracing. The TRaX architecture consists of a set of thread processors that include commonly used functional units (FUs) for each thread and that share larger FUs through a programmable interconnect. The memory system takes advantage of the application's read-only access to the scene database and write-only access to the frame buffer output to provide efficient data delivery with a relatively simple memory system. One specific motivation behind TRaX is to accelerate single-ray performance instead of relying on ray packets in single-instruction-multiple-data mode to boost throughput, which can fail as packets become incoherent with respect to the objects in the scene database. In this paper, we describe the TRaX architecture and our performance results compared to other architectures used for ray tracing. Simulated results indicate that a multicore version of the TRaX architecture running at a modest speed of 500 MHz provides real-time ray-traced images for scenes of a complexity found in video games. We also measure performance as secondary rays become less coherent and find that TRaX exhibits only minor slowdown in this case while packet-based ray tracers show more significant slowdown.", "paper_title": "TRaX: A Multicore Hardware Architecture for Real-Time Ray Tracing", "paper_id": "WOS:000271952300003"}