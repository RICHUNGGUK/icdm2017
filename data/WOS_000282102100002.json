{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "object-oriented_languages"}, {"score": 0.031715250194684734, "phrase": "normal_form"}, {"score": 0.0046073860169839305, "phrase": "algebraic_approach"}, {"score": 0.0045318666714939905, "phrase": "provably_correct_compilers"}, {"score": 0.004149429072483132, "phrase": "sequential_subset"}, {"score": 0.0041041684435503415, "phrase": "java"}, {"score": 0.004014452814186653, "phrase": "recursive_classes"}, {"score": 0.0039269071382230444, "phrase": "dynamic_binding"}, {"score": 0.003675517796014622, "phrase": "class-based_visibility"}, {"score": 0.0035953368057880593, "phrase": "copy_semantics"}, {"score": 0.0034024277222012597, "phrase": "compiler_correctness"}, {"score": 0.0032198357970567595, "phrase": "program_refinement"}, {"score": 0.0030470127429039497, "phrase": "source_program"}, {"score": 0.0028993944292191433, "phrase": "object_code"}, {"score": 0.0027437235598539904, "phrase": "correctness-preserving_transformations"}, {"score": 0.002639740960006001, "phrase": "basic_laws"}, {"score": 0.0024569466759289055, "phrase": "main_advantages"}, {"score": 0.0023249757987087055, "phrase": "uniform_framework"}, {"score": 0.0021049977753042253, "phrase": "resulting_compiler"}], "paper_keywords": ["Algebraic transformation", " Refinement", " Compiler correctness"], "paper_abstract": "In this paper we describe an algebraic approach to construct provably correct compilers for object-oriented languages; this is illustrated for programs written in a language similar to a sequential subset of Java. It includes recursive classes, inheritance, dynamic binding, recursion, type casts and test, assignment, and class-based visibility, but a copy semantics. In our approach, we tackle the problem of compiler correctness by reducing the task of compilation to that of program refinement. Compilation is identified with the reduction of a source program to a normal form that models the execution of object code. The normal form is generated by a series of correctness-preserving transformations that are proved sound from the basic laws of the language; therefore it is correct by construction. The main advantages of our approach are the characterisation of compilation within a uniform framework, where comparisons and translations between semantics are avoided, and the modularity and extensibility of the resulting compiler.", "paper_title": "An algebraic approach to the design of compilers for object-oriented languages", "paper_id": "WOS:000282102100002"}