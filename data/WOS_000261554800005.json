{"auto_keywords": [{"score": 0.04693309902024463, "phrase": "software_adaptation"}, {"score": 0.00481495049065317, "phrase": "aspect-oriented_software_development"}, {"score": 0.004719816332271661, "phrase": "current_software_development"}, {"score": 0.004445494322321316, "phrase": "consequent_need"}, {"score": 0.004322967486451877, "phrase": "new_environment"}, {"score": 0.004039221742250308, "phrase": "formal_descriptions"}, {"score": 0.003991110291836103, "phrase": "interface_behaviour"}, {"score": 0.0038965930422333035, "phrase": "aspect-oriented_programming"}, {"score": 0.003714195746979591, "phrase": "dynamic_adaptation"}, {"score": 0.0031277316566463978, "phrase": "final_behaviour"}, {"score": 0.0028529310661977577, "phrase": "protocol_level"}, {"score": 0.0027964537059186893, "phrase": "potential_semantic_problems"}, {"score": 0.002741091312632307, "phrase": "main_focus"}, {"score": 0.002708399936381754, "phrase": "present_communication"}, {"score": 0.0024604876113911173, "phrase": "algebraic_calculus"}, {"score": 0.002244178699939059, "phrase": "modeled_system's_behaviour"}, {"score": 0.0021049977753042253, "phrase": "new_running_system"}], "paper_keywords": ["Aspect-Oriented Programming", " Software Adaptation", " UML", " CCS", " Extended State Machines", " Interaction Pattern Specification"], "paper_abstract": "One focus of current software development is the re-use of components in the construction of systems. Software Adaptation facilitates the consequent need to adapt these components to the new environment by employing adaptors which are obtained automatically and hence with a certain guarantee of suitability, from formal descriptions of the interface behaviour. One appropriate technique for Software Adaptation is Aspect-Oriented Programming (AOP) which makes use of aspects to facilitate the dynamic adaptation of components transparently and non-intrusively. However, owing to the way that aspects are integrated, these can unexpectedly modify the functionality of the system, and consequently completely alter its semantics. It is hence necessary to study the final behaviour of the system to ensure its correctness after adding aspects for its adaptation. This study must go beyond just detecting problems at the protocol level, to analyze the potential semantic problems. This is the main focus of the present communication. We start from the Unified Modeling Language (UML 2.0) specification of both the initial system and the aspects. This specification is validated by generating an algebraic Calculus of Communicating Systems (CCS) description of the system. Next, extended ( finite) state machines are automatically generated to verify, simulate, and test the modeled system's behaviour. The result of that process can also be compared with the behaviour of the new running system. To facilitate this task, we propose grouping components so as to centre the study on the points actually affected by the behaviour of the aspects.", "paper_title": "A Safe Dynamic Adaptation Framework for Aspect-Oriented Software Development", "paper_id": "WOS:000261554800005"}