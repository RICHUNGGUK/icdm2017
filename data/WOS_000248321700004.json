{"auto_keywords": [{"score": 0.045887875964980236, "phrase": "pattern_languages"}, {"score": 0.015719716506582538, "phrase": "pattern_language"}, {"score": 0.004757917303420435, "phrase": "design_space_analysis"}, {"score": 0.004720269202737973, "phrase": "software_patterns"}, {"score": 0.004682917599491709, "phrase": "reusable_solutions"}, {"score": 0.004645860180714466, "phrase": "recurring_design_problems"}, {"score": 0.004590820632326585, "phrase": "particular_context"}, {"score": 0.00453643016617164, "phrase": "software_architect"}, {"score": 0.004429566229017728, "phrase": "relevant_patterns"}, {"score": 0.004223299391912042, "phrase": "appropriate_patterns"}, {"score": 0.004123781267600542, "phrase": "best_order"}, {"score": 0.003916098498242888, "phrase": "multiple_pattern_authors"}, {"score": 0.0036023971109946946, "phrase": "possible_multitude"}, {"score": 0.0035455471410184404, "phrase": "pattern_combinations"}, {"score": 0.0034345152879289025, "phrase": "particular_design_problem"}, {"score": 0.003248483521309273, "phrase": "sufficient_expertise"}, {"score": 0.0029060170624404242, "phrase": "desired_quality_attributes"}, {"score": 0.002882980094838904, "phrase": "systematic_design_decisions"}, {"score": 0.0027704982687041147, "phrase": "pattern_relationships"}, {"score": 0.002737615043512257, "phrase": "pattern_language_grammar"}, {"score": 0.0026412824985309323, "phrase": "quality_goals"}, {"score": 0.002599560451267203, "phrase": "second_step"}, {"score": 0.002578946584040053, "phrase": "complex_design_decisions"}, {"score": 0.0025180781216911246, "phrase": "design_spaces"}, {"score": 0.0024586427394152196, "phrase": "related_software_patterns"}, {"score": 0.0023532890136269986, "phrase": "appropriate_software_patterns"}, {"score": 0.0023069016803337365, "phrase": "different_sources"}, {"score": 0.0021645053655350703, "phrase": "distributed_object_middleware"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software patterns", " pattern languages", " pattern selection", " design space analysis", " software design"], "paper_abstract": "Software patterns provide reusable solutions to recurring design problems in a particular context. The software architect or designer must find the relevant patterns and pattern languages that need to be considered, and select the appropriate patterns, as well as the best order to apply them. If the patterns and pattern languages are written by multiple pattern authors, it might be necessary to identify interdependencies and overlaps between these patterns and pattern languages first. Out of the possible multitude of patterns and pattern combinations that might provide a solution to a particular design problem, one fitting solution must be selected. This can only be mastered with a sufficient expertise for both the relevant patterns and the domain in which they are applied. To remedy these issues we provide an approach to support the selection of patterns based on desired quality attributes and systematic design decisions based on patterns. We propose to formalize the pattern relationships in a pattern language grammar and to annotate the grammar with effects on quality goals. In a second step, complex design decisions are analyzed further using the design spaces covered by a set of related software patterns. This approach helps to systematically find and categorize the appropriate software patterns-possibly even from different sources. As a case study of our approach, we analyze patterns from a pattern language for distributed object middleware. Copyright (C) 2006 John Wiley & Sons, Ltd.", "paper_title": "Systematic pattern selection using pattern language grammars and design space analysis", "paper_id": "WOS:000248321700004"}