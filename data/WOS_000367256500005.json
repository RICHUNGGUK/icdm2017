{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "layout_engines"}, {"score": 0.04963419481547922, "phrase": "relational_constraints"}, {"score": 0.040029450721471016, "phrase": "functional_attribute_grammars"}, {"score": 0.004595356579614969, "phrase": "efficient_document_layout_engines"}, {"score": 0.004552648949390462, "phrase": "compact_relational_specifications"}, {"score": 0.00436530211426514, "phrase": "single_specification"}, {"score": 0.004304574865291508, "phrase": "multiple_engines"}, {"score": 0.004205226397573506, "phrase": "distinct_layout_situation"}, {"score": 0.0040133278382101885, "phrase": "unknown_attributes"}, {"score": 0.0039024014688338964, "phrase": "relational_attribute_grammars"}, {"score": 0.0033603864623013733, "phrase": "fixed_schedule"}, {"score": 0.00329813918116714, "phrase": "backtracking_search"}, {"score": 0.0030891871245908665, "phrase": "non-trivial_data_visualizations"}, {"score": 0.0029206231857112305, "phrase": "general-purpose_constraint_solvers"}, {"score": 0.002800247197692108, "phrase": "synthesis_problems"}, {"score": 0.002562123444678208, "phrase": "smaller_subproblems"}, {"score": 0.002479579797152119, "phrase": "off-the-shelf_synthesis_procedures"}, {"score": 0.002289993730291138, "phrase": "correct_attribute_grammar"}, {"score": 0.0021347607855562102, "phrase": "efficient_reduction"}, {"score": 0.0021049977753042253, "phrase": "smt_problem"}], "paper_keywords": ["Languages", " Algorithms", " Performance", " Program Synthesis", " Attribute Grammars", " Layout"], "paper_abstract": "We present an algorithm for synthesizing efficient document layout engines from compact relational specifications. These specifications are compact in that a single specification can produce multiple engines, each for a distinct layout situation, i.e., a different combination of known vs. unknown attributes. Technically, our specifications are relational attribute grammars, while our engines are functional attribute grammars. By synthesizing functions from relational constraints, we obviate the need for constraint solving at runtime, because functional attribute grammars can be easily evaluated according to a fixed schedule, sidestepping the backtracking search performed by constraint solvers. Our experiments show that we can generate layout engines for non-trivial data visualizations, and that our synthesized engines are between 39- and 200-times faster than general-purpose constraint solvers. Relational specifications of layout give rise to synthesis problems that have previously proved intractable. Our algorithm exploits the hierarchical, grammar-based structure of the specification, decomposing the specification into smaller subproblems, which can be tackled with off-the-shelf synthesis procedures. The new synthesis problem then becomes the composition of the functions thus generated into a correct attribute grammar, which might be recursive. We show how to solve this problem by efficient reduction to an SMT problem.", "paper_title": "Synthesis of Layout Engines from Relational Constraints", "paper_id": "WOS:000367256500005"}