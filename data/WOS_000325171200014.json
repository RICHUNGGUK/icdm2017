{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "symbolic_program-level"}, {"score": 0.004528156929805637, "phrase": "symplfied"}, {"score": 0.004258372598568333, "phrase": "arbitrary_error_detectors"}, {"score": 0.00409508755819924, "phrase": "hardware_errors"}, {"score": 0.003960101604693806, "phrase": "transient_hardware_errors"}, {"score": 0.0035216195857272403, "phrase": "program_failure"}, {"score": 0.0034245614958572012, "phrase": "symbolic_execution"}, {"score": 0.003311604528903634, "phrase": "erroneous_values"}, {"score": 0.002895721231882758, "phrase": "widely_deployed_aircraft_collision_avoidance_application"}, {"score": 0.0027535633837592597, "phrase": "symplfied_framework"}, {"score": 0.0025892330566358503, "phrase": "catastrophic_cases"}, {"score": 0.0025461386232786356, "phrase": "transient_errors"}, {"score": 0.0024211009463218484, "phrase": "random_fault_injection-based_validation"}, {"score": 0.0022137465420508785, "phrase": "error_detectors"}, {"score": 0.002128694000627911, "phrase": "catastrophic_case"}], "paper_keywords": ["Fault injection", " model checking", " error detection"], "paper_abstract": "This paper introduces SymPLFIED, a program-level framework that allows specification of arbitrary error detectors and the verification of their efficacy against hardware errors. SymPLFIED comprehensively enumerates all transient hardware errors in registers, memory, and computation (expressed symbolically as value errors) that potentially evade detection and cause program failure. The framework uses symbolic execution to abstract the state of erroneous values in the program and model checking to comprehensively find all errors that evade detection. We demonstrate the use of SymPLFIED on a widely deployed aircraft collision avoidance application, tcas. Our results show that the SymPLFIED framework can be used to uncover hard-to-detect catastrophic cases caused by transient errors in programs that may not be exposed by random fault injection-based validation. Further, the errors exposed by the framework help us formulate a set of error detectors for the application to avoid the catastrophic case and other incorrect outcomes.", "paper_title": "SymPLFIED: Symbolic Program-Level Fault Injection and Error Detection Framework", "paper_id": "WOS:000325171200014"}