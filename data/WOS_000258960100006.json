{"auto_keywords": [{"score": 0.028036624933288918, "phrase": "clustering_algorithm"}, {"score": 0.00481495049065317, "phrase": "highest_possible_speedup"}, {"score": 0.004488734023485018, "phrase": "computational_nodes"}, {"score": 0.004217286731331736, "phrase": "concurrent_execution"}, {"score": 0.004119762981892093, "phrase": "distributed_modules"}, {"score": 0.0038106195546165574, "phrase": "two-stage_approach"}, {"score": 0.0036363418376496484, "phrase": "first_stage"}, {"score": 0.0035245918797629804, "phrase": "statement-reordering_algorithm"}, {"score": 0.0031597433845085092, "phrase": "call_instruction"}, {"score": 0.002702887319160534, "phrase": "second_stage"}, {"score": 0.002499798127196099, "phrase": "modular_structure"}, {"score": 0.00234834406550549, "phrase": "highest_concurrency"}, {"score": 0.002206045784326466, "phrase": "novel_performance_evaluation_function"}, {"score": 0.0021049977753042253, "phrase": "program_code"}], "paper_keywords": [""], "paper_abstract": "The aim is to achieve the highest possible speedup when distributing a program across a cluster of computational nodes. The speedup may be achieved by concurrent execution of the distributed modules. In order to maximise the concurrency, a two-stage approach is proposed. In the first stage, a novel statement-reordering algorithm reorders the statements within a given program, to maximise the distance between each call instruction and the instructions, which are data-dependent on any value affected by the call. In the second stage, a clustering algorithm is applied to look for a modular structure of the program which results in the highest concurrency in its execution. The clustering algorithm applies a novel performance evaluation function which is derived from the program code, automatically.", "paper_title": "Performance-driven object-oriented program re-modularisation", "paper_id": "WOS:000258960100006"}