{"auto_keywords": [{"score": 0.03424838397119819, "phrase": "shared_resources"}, {"score": 0.00481495049065317, "phrase": "performance_estimation"}, {"score": 0.00466877910546307, "phrase": "process_petri_nets"}, {"score": 0.004471530397729526, "phrase": "discrete_dynamic_systems"}, {"score": 0.00428257928723, "phrase": "different_tasks"}, {"score": 0.004001593118269276, "phrase": "system_requirement"}, {"score": 0.0033457659530207306, "phrase": "steady-state_performance"}, {"score": 0.0030876784650745973, "phrase": "heuristic_strategy"}, {"score": 0.0029570303644956128, "phrase": "system_performance"}, {"score": 0.002678734566245688, "phrase": "large_systems"}, {"score": 0.0026133424923929227, "phrase": "service-oriented_architecture"}, {"score": 0.002456744238900652, "phrase": "particular_class"}, {"score": 0.002426566352219338, "phrase": "petri_nets"}, {"score": 0.002239225269052105, "phrase": "state_explosion_problem"}, {"score": 0.002198084195030656, "phrase": "discrete_models"}, {"score": 0.0021576973674470997, "phrase": "proposed_techniques"}, {"score": 0.0021311850321045767, "phrase": "intensive_use"}, {"score": 0.0021049977753042253, "phrase": "linear_programming"}], "paper_keywords": ["Discrete event systems (DESs)", " performance evaluation", " Petri nets (PNs)", " software performance"], "paper_abstract": "Many artificial systems can be modeled as discrete dynamic systems in which resources are shared among different tasks. The performance of such systems, which is usually a system requirement, heavily relies on the number and distribution of such resources. The goal of this paper is twofold: first, to design a technique to estimate the steady-state performance of a given system with shared resources, and second, to propose a heuristic strategy to distribute shared resources so that the system performance is enhanced as much as possible. The systems under consideration are assumed to be large systems, such as service-oriented architecture (SOA) systems, and modeled by a particular class of Petri nets (PNs) called process PNs. In order to avoid the state explosion problem inherent to discrete models, the proposed techniques make intensive use of linear programming (LP) problems.", "paper_title": "On the Performance Estimation and Resource Optimization in Process Petri Nets", "paper_id": "WOS:000326499800010"}