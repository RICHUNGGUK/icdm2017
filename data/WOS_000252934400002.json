{"auto_keywords": [{"score": 0.0422401343060347, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "customized_method_dispatchers"}, {"score": 0.004526503177267299, "phrase": "programming_languages"}, {"score": 0.0034538466642399976, "phrase": "multi-method_extensions"}, {"score": 0.0032972747743006603, "phrase": "particular_functionality"}, {"score": 0.003075583447856341, "phrase": "user-defined_dispatching_mechanisms"}, {"score": 0.002675797331220082, "phrase": "polyd"}, {"score": 0.0025151755329660837, "phrase": "custom_dispatching_strategies"}, {"score": 0.002382541887825168, "phrase": "dispatching_process"}, {"score": 0.0023099082804523044, "phrase": "excellent_performance"}, {"score": 0.0022222152430170254, "phrase": "existing_tools"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["dispatching", " multimethods", " visitor pattern", " Java"], "paper_abstract": "The standard dispatching mechanisms built into programming languages sometimes fail to satisfy the needs of the programmer. In the case of Java, the need for more flexibility has led to the development of a number of tools, including visitors and multi-method extensions, that each add some particular functionality, but lack the generality necessary to support user-defined dispatching mechanisms. In this paper we advocate a more modular approach to dispatching, and we present a tool, PolyD, that allows the programmer to design custom dispatching strategies and to parametrize many aspects of the dispatching process. Polyp exhibits excellent performance and compares well against existing tools. Copyright (c) 2007 John Wiley & Sons, Ltd.", "paper_title": "An efficient and flexible toolkit for composing customized method dispatchers", "paper_id": "WOS:000252934400002"}