{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multithreaded_barnes-hut_algorithm"}, {"score": 0.004745665541429529, "phrase": "multicore_clusters"}, {"score": 0.004381962669035583, "phrase": "barnes-hut_algorithm"}, {"score": 0.004135010810625326, "phrase": "partitioned_global_address_space"}, {"score": 0.0038737214010638745, "phrase": "intranode_multithreading"}, {"score": 0.0037903327482565097, "phrase": "one-sided_communication"}, {"score": 0.0031614748814351823, "phrase": "network_latency"}, {"score": 0.0029615198132465236, "phrase": "private_caches"}, {"score": 0.002876747208161839, "phrase": "shared_caches"}, {"score": 0.00241658945942583, "phrase": "better_load-balancing_strategies"}, {"score": 0.002263639474937039, "phrase": "non-multithreaded_counterpart"}, {"score": 0.0022148335975074904, "phrase": "detailed_comparison"}], "paper_keywords": ["Barnes-Hut", " n-body", " PGAS", " cluster", " multicore"], "paper_abstract": "We describe in this paper an implementation of the Barnes-Hut algorithm on multicore clusters. Based on a partitioned global address space (PGAS) library, the design integrates intranode multithreading and internode one-sided communication, exemplifying a PGAS + X programming style. Within a node, the computation is decomposed into tasks (subtasks) and multitasking is used to hide network latency. We study the tradeoffs between locality in private caches and locality in shared caches and bring the insights into the design. As a result, our implementation consumes less memory per core, invokes less internode communication, and enjoys better load-balancing strategies. The final code achieves up to 41 percent performance improvement over a non-multithreaded counterpart. Through detailed comparison, we also show its advantages over other well-known Barnes-Hut implementations, both in programming complexity and in performance.", "paper_title": "Design of a Multithreaded Barnes-Hut Algorithm for Multicore Clusters", "paper_id": "WOS:000356138700007"}