{"auto_keywords": [{"score": 0.04797130800606525, "phrase": "heapo"}, {"score": 0.008713768692145006, "phrase": "heap-based_persistent_object_store"}, {"score": 0.00707781960127016, "phrase": "nvram."}, {"score": 0.0045284072672385975, "phrase": "persistent_objects"}, {"score": 0.004491506786670695, "phrase": "byte-addressable_nonvolatile_ram"}, {"score": 0.0043114466990006334, "phrase": "persistent_object_format"}, {"score": 0.003797690272118125, "phrase": "lightweight_and_flexible_layer"}, {"score": 0.003736004578001584, "phrase": "dram-like_access_latency"}, {"score": 0.0035568733052778177, "phrase": "nvram"}, {"score": 0.0034847851398628546, "phrase": "in-core_and_on-disk_copies"}, {"score": 0.003250403288147613, "phrase": "burst_trie-based_global_name_space"}, {"score": 0.002994701080666466, "phrase": "commodity_os"}, {"score": 0.002970277764096534, "phrase": "linux"}, {"score": 0.0028510114763213596, "phrase": "metadata_redundancy"}, {"score": 0.0025523518748506347, "phrase": "memory-mapped_file-based_persistent_object_store"}, {"score": 0.0024001337476063094, "phrase": "hashed_b-tree-based_name_space"}, {"score": 0.002256973121326987, "phrase": "hash_table_update"}, {"score": 0.0022385401780982204, "phrase": "heapo-based_memcachedb"}, {"score": 0.002202123699556382, "phrase": "original_memcachedb_implementation"}, {"score": 0.0021398115287338693, "phrase": "ramdisk_approach"}, {"score": 0.0021049977753042253, "phrase": "key-value_store"}], "paper_keywords": ["Design", " Algorithms", " Performance", " Persistent heap", " Persistent objects", " Nonvolatile memory"], "paper_abstract": "In this work, we developed a Heap-Based Persistent Object Store (HEAPO) to manage persistent objects in byte-addressable Nonvolatile RAM (NVRAM). HEAPO defines its own persistent heap layout, the persistent object format, name space organization, object sharing and protection mechanism, and undo-only log-based crash recovery, all of which are effectively tailored for NVRAM. We put our effort into developing a lightweight and flexible layer to exploit the DRAM-like access latency of NVRAM. To address this objective, we developed (i) a native management layer for NVRAM to eliminate redundancy between in-core and on-disk copies of the metadata, (ii) an expandable object format, (iii) a burst trie-based global name space with local name space caching, (iv) static address binding, and (v) minimal logging for undo-only crash recovery. We implemented HEAPO at commodity OS (Linux 2.6.32) and measured the performance. By eliminating metadata redundancy, HEAPO improved the speed of creating, attaching, and expanding an object by 1.3x, 4.5x, and 3.8x, respectively, compared to memory-mapped file-based persistent object store. Burst trie-based name space organization of HEAPO yielded 7.6x better lookup performance compared to hashed B-tree-based name space of EXT4. We modified memcachedb to use HEAPO in maintaining its search structure. For hash table update, HEAPO-based memcachedb yielded 3.4x performance improvement against original memcachedb implementation which uses mmap () over ramdisk approach to maintain the key-value store in memory.", "paper_title": "HEAPO: Heap-Based Persistent Object Store", "paper_id": "WOS:000351323300003"}