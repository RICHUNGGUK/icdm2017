{"auto_keywords": [{"score": 0.04702899831726304, "phrase": "embedded_systems"}, {"score": 0.03786165600609578, "phrase": "high_load"}, {"score": 0.00481495049065317, "phrase": "java_applications"}, {"score": 0.004725385523804256, "phrase": "code_offloading"}, {"score": 0.004594137808658537, "phrase": "promising_effort"}, {"score": 0.004028054020045027, "phrase": "nearby_computers"}, {"score": 0.003953068310598579, "phrase": "large-scale_applications"}, {"score": 0.003401148484767927, "phrase": "runtime_infrastructure"}, {"score": 0.0032145922365231093, "phrase": "interconnected_workstations"}, {"score": 0.003154701855951328, "phrase": "application_source_code"}, {"score": 0.0028986672783671147, "phrase": "extended_virtual_machine"}, {"score": 0.0026633568650501873, "phrase": "runtime_policies"}, {"score": 0.0023566987138026285, "phrase": "first_evaluation"}, {"score": 0.0021652891317252994, "phrase": "transaction_rate"}, {"score": 0.0021049977753042253, "phrase": "web_server"}], "paper_keywords": [""], "paper_abstract": "Code offloading is a promising effort for embedded systems and load-balancing. Embedded systems will be able to offload computation to nearby computers and large-scale applications will be able to load-balance computation during high load. This paper presents a runtime infrastructure that transparently distributes computation between interconnected workstations. Application source code is not modified: instead, dynamic aspect weaving within an extended virtual machine allows to monitor and distribute entities dynamically. Runtime policies for distribution can be dynamically adapted depending on the environment. A first evaluation of the system shows that our technique increases the transaction rate of a Web server during high load by 73%.", "paper_title": "Transparent and dynamic code offloading for Java applications", "paper_id": "WOS:000243318600051"}