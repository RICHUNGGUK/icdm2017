{"auto_keywords": [{"score": 0.047316542085835606, "phrase": "best_solver"}, {"score": 0.03900713276455515, "phrase": "conjugate_gradient"}, {"score": 0.034621646708644975, "phrase": "sla"}, {"score": 0.030849498683056906, "phrase": "mps_method"}, {"score": 0.00481495049065317, "phrase": "parallel_solvers"}, {"score": 0.00474946741204285, "phrase": "particle_semi-implicit_method"}, {"score": 0.004706305193222972, "phrase": "purpose_-_the_purpose"}, {"score": 0.004475798524102238, "phrase": "particle_methods"}, {"score": 0.0043947942344037105, "phrase": "pressure_poisson_equation"}, {"score": 0.0041226152676348314, "phrase": "ppe"}, {"score": 0.0037798652680135106, "phrase": "six_krylov_solvers"}, {"score": 0.00349734405943853, "phrase": "bi-conjugate_gradient_stabilized"}, {"score": 0.0034027387694902287, "phrase": "conjugate_gradient_squared"}, {"score": 0.003371844098834852, "phrase": "cgs"}, {"score": 0.003310684108128973, "phrase": "symmetric_lanczos_algorithm"}, {"score": 0.003221111762383486, "phrase": "incomplete_cholesky_conjugate_gradient_method"}, {"score": 0.002953097497434808, "phrase": "semiimplicit_particle_method"}, {"score": 0.002782647772219627, "phrase": "dam-break_flow"}, {"score": 0.0027573101010593863, "phrase": "channel_flow_simulations"}, {"score": 0.0026582395558737855, "phrase": "different_solvers"}, {"score": 0.0024706232839499546, "phrase": "serial_way"}, {"score": 0.0024258208033731154, "phrase": "least_memory"}, {"score": 0.0023927516438886445, "phrase": "highest_openmp_parallel_efficiency"}, {"score": 0.0021537217025910356, "phrase": "recommended_parallel_solver"}, {"score": 0.002104999969752951, "phrase": "cg."}], "paper_keywords": ["Hybrid OpenMP/MPI", " Krylov subspace solver", " Moving Particle Semi-Implicit method", " Parallelization", " Particle method", " Pressure Poisson Equation"], "paper_abstract": "Purpose - The purpose of this paper is to find the best solver for parallelizing particle methods based on solving Pressure Poisson Equation (PPE) by taking Moving Particle Semi-Implicit (MPS) method as an example because the solution for PPE is usually the most time-consuming part difficult to parallelize. Design/methodology/approach - To find the best solver, the authors compare six Krylov solvers, namely, Conjugate Gradient method (CG), Scaled Conjugate Gradient method (SCG), Bi-Conjugate Gradient Stabilized (BiCGStab) method, Conjugate Gradient Squared (CGS) method with Symmetric Lanczos Algorithm (SLA) method and Incomplete Cholesky Conjugate Gradient method (ICCG) in terms of convergence, time consumption, parallel efficiency and memory consumption for the semiimplicit particle method. The MPS method is parallelized by the hybrid Open Multi-Processing(OpenMP)/Message Passing Interface (MPI) model. The dam-break flow and channel flow simulations are used to evaluate the performance of different solvers. Findings - It is found that CG converges stably, runs fastest in the serial way, uses the least memory and has highest OpenMP parallel efficiency, but its MPI parallel efficiency is lower than SLA because SLA requires less synchronization than CG. Originality/value - With all these criteria considered and weighed, the recommended parallel solver for the MPS method is CG.", "paper_title": "Comparison of parallel solvers for Moving Particle Semi-Implicit method", "paper_id": "WOS:000355829900013"}