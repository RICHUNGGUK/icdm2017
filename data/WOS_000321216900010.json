{"auto_keywords": [{"score": 0.04483027936171081, "phrase": "address_buses"}, {"score": 0.03418287568362411, "phrase": "different_banks"}, {"score": 0.00481495049065317, "phrase": "bank_selection_instruction_optimization_for_partitioned_memory_architectures"}, {"score": 0.004360412703519539, "phrase": "limited_memory_space"}, {"score": 0.004172360444377281, "phrase": "bank_switching"}, {"score": 0.0040366412779632085, "phrase": "memory_size"}, {"score": 0.0039269071382230444, "phrase": "bank_selection_instructions"}, {"score": 0.003716273882758735, "phrase": "original_programs"}, {"score": 0.0036352070472201086, "phrase": "bank_register"}, {"score": 0.003536346954940087, "phrase": "desired_banks"}, {"score": 0.0034212450542713607, "phrase": "code_size_and_execution_time_overheads"}, {"score": 0.0031495640320537252, "phrase": "different_positions"}, {"score": 0.002610760187858779, "phrase": "multi-copy_approach"}, {"score": 0.002525708155510053, "phrase": "multiple_copies"}, {"score": 0.0024299678474208023, "phrase": "memory_space"}, {"score": 0.0021879624017959493, "phrase": "proposed_algorithms"}, {"score": 0.0021520139248317333, "phrase": "bsl_overheads"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_techniques"}], "paper_keywords": ["Algorithms", " Languages", " Performance", " Bank switching", " bank selection instruction", " variable partitioning"], "paper_abstract": "About 55% of all CPUs sold in the world are 8-bit microcontrollers or microprocessors which can only access limited memory space without extending address buses. Partitioned memory with bank switching is a technique to increase memory size without extending address buses. Bank Selection Instructions (BSLs) need to be inserted into the original programs to modify the bank register to point to the desired banks. These BSLs introduce both code size and execution time overheads. In this paper, we partition variables into different banks and insert BSLs at different positions of programs so that the overheads can be minimized. Minimizing speed (execution time) overhead and minimizing space (code size) overhead are two objectives investigated in this paper. A multi-copy approach is also proposed to store multiple copies of several variables on different banks when the memory space allows. It takes the read/write properties of variables into consideration and achieves more BSL overhead reduction. Experiments show that the proposed algorithms can reduce BSL overheads effectively compared to state-of-the-art techniques.", "paper_title": "Joint Variable Partitioning and Bank Selection Instruction Optimization for Partitioned Memory Architectures", "paper_id": "WOS:000321216900010"}