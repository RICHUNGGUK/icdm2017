{"auto_keywords": [{"score": 0.04960202571834177, "phrase": "session_types"}, {"score": 0.0067889040538004425, "phrase": "previous_work"}, {"score": 0.00481495049065317, "phrase": "asynchronous_session_types"}, {"score": 0.004695900553353526, "phrase": "type-theoretic_formulation"}, {"score": 0.0045269374261484785, "phrase": "functional_setting"}, {"score": 0.004466519142879166, "phrase": "communication_behaviour"}, {"score": 0.0043560464825349275, "phrase": "distributed_system_call"}, {"score": 0.004269630481719451, "phrase": "static_typechecking"}, {"score": 0.004184921610672245, "phrase": "network_protocols"}, {"score": 0.004143196873246147, "phrase": "business_processes"}, {"score": 0.004101886428528311, "phrase": "operating_system_services"}, {"score": 0.003940706575253453, "phrase": "multithread_functional_language"}, {"score": 0.0035827424231607784, "phrase": "operational_semantics"}, {"score": 0.00354700018079049, "phrase": "buffered_channels"}, {"score": 0.003459191419478298, "phrase": "synchronous_communication"}, {"score": 0.0032900200522703923, "phrase": "session_type"}, {"score": 0.003129096013910626, "phrase": "necessary_size"}, {"score": 0.0029169007179202164, "phrase": "standard_structures"}, {"score": 0.002873331232538783, "phrase": "linear_type_theory"}, {"score": 0.0027741761880779535, "phrase": "new_forms"}, {"score": 0.0025859868507329634, "phrase": "standard_subtyping_relation"}, {"score": 0.0024348510123716424, "phrase": "novel_form"}, {"score": 0.0023864566654035924, "phrase": "standard_and_linear_function_types"}, {"score": 0.0022925278792429553, "phrase": "linear_types"}, {"score": 0.0021262403223013242, "phrase": "secure_foundation"}, {"score": 0.0021049977753042253, "phrase": "language_developments"}], "paper_keywords": [""], "paper_abstract": "Session types Support a type-theoretic formulation of structured patterns of communication, so that the communication behaviour of agents in a distributed system call be verified by static typechecking. Applications include network protocols, business processes and operating system services-In this paper we define a multithread functional language with session types, which unifies, simplifies and extends previous work. There are four main contributions. First is an operational semantics with buffered channels, instead of the synchronous communication of previous work. Second, we prove that the session type of a channel gives all upper bound on the necessary size of the buffer. Third, Session types are Manipulated by means of the standard structures Of a linear type theory, rather than by means of new forms of typing judgement. Fourth, a notion Of subtyping, including the standard subtyping relation for session types (imported into the functional setting), and a novel form of subtyping between standard and linear function types, which allows the typechecker to handle linear types conveniently. Our new approach significantly simplifies session types ill the functional setting clarifies their essential features and provides a secure foundation for language developments Such as polymorphism and object-orientation.", "paper_title": "Linear type theory for asynchronous session types", "paper_id": "WOS:000275074100003"}