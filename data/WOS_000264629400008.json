{"auto_keywords": [{"score": 0.049217710328296, "phrase": "multimedia_applications"}, {"score": 0.0251141556507648, "phrase": "energy_consumption"}, {"score": 0.00481495049065317, "phrase": "adaptive_scratch_pad_memory_management"}, {"score": 0.004771435352180973, "phrase": "dynamic_behavior"}, {"score": 0.004664352260912174, "phrase": "runtime_memory_access"}, {"score": 0.004559661374976129, "phrase": "complementary_approach"}, {"score": 0.004518442937844318, "phrase": "compiler_optimizations"}, {"score": 0.004457309741979921, "phrase": "energy_reduction"}, {"score": 0.004417012437860011, "phrase": "memory_hierarchy"}, {"score": 0.004278807087784626, "phrase": "emerging_multimedia_applications"}, {"score": 0.0041827333568982055, "phrase": "input-sensitive_runtime_behavior"}, {"score": 0.0038895008852940323, "phrase": "static_compiler_optimizations"}, {"score": 0.0034560481756572632, "phrase": "integrated_approach"}, {"score": 0.0032725712584012953, "phrase": "multiprocessor_systems"}, {"score": 0.0031271133933467575, "phrase": "scratch_pad_data_layouts"}, {"score": 0.0030429511467945525, "phrase": "dynamic_memory_accesses"}, {"score": 0.0030017207229983385, "phrase": "scratch_pad_data_layout"}, {"score": 0.002947611960613497, "phrase": "input_data_pattern"}, {"score": 0.0028682668647074397, "phrase": "runtime_scratch_pad_memory_manager"}, {"score": 0.0028165598683988187, "phrase": "os."}, {"score": 0.0027910516355928983, "phrase": "runtime_data_placement_strategy"}, {"score": 0.0027159094186967247, "phrase": "efficient_scratch_pad_utilization"}, {"score": 0.0026790983342162887, "phrase": "dynamic_applications"}, {"score": 0.002525248554951453, "phrase": "main_memory"}, {"score": 0.002491015208328868, "phrase": "entire_runtime"}, {"score": 0.0021632743048552536, "phrase": "dynamic_memory_access_behavior"}, {"score": 0.002133937537670314, "phrase": "existing_compiler_technique"}, {"score": 0.0021049977753042253, "phrase": "alternative_hardware_technique"}], "paper_keywords": ["Compiler optimizations", " dynamic memory access pattern", " multiprocessor system on chip (MPSoC)", " scratch pad memory (SPM)"], "paper_abstract": "Exploiting runtime memory access traces can be a complementary approach to compiler optimizations for the energy reduction in memory hierarchy. This is particularly important for emerging multimedia applications since they usually have input-sensitive runtime behavior which results in dynamic and/or irregular memory access patterns. These types of applications are normally hard to optimize by static compiler optimizations. The reason is that their behavior stays unknown until runtime and may even change during computation. To tackle this problem, we propose an integrated approach of software [compiler and operating system (OS)] and hardware (data access record table) techniques to exploit data reusability of multimedia applications in Multiprocessor Systems on Chip. Guided by compiler analysis for generating scratch pad data layouts and hardware components for tracking dynamic memory accesses, the scratch pad data layout adapts to an input data pattern with the help of a runtime scratch pad memory manager incorporated in the OS. The runtime data placement strategy presented in this paper provides efficient scratch pad utilization for the dynamic applications. The goal is to minimize the amount of accesses to the main memory over the entire runtime of the system, which leads to a reduction in the energy consumption of the system. Our experimental results show that our approach is able to significantly improve the energy consumption of multimedia applications with dynamic memory access behavior over an existing compiler technique and an alternative hardware technique.", "paper_title": "Adaptive Scratch Pad Memory Management for Dynamic Behavior of Multimedia Applications", "paper_id": "WOS:000264629400008"}