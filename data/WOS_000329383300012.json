{"auto_keywords": [{"score": 0.049486545799943334, "phrase": "sprint_planning"}, {"score": 0.042711058666183695, "phrase": "user_stories"}, {"score": 0.038182416208762074, "phrase": "sprint_plan"}, {"score": 0.03712438214850083, "phrase": "business_value"}, {"score": 0.004818361526248422, "phrase": "lagrangian"}, {"score": 0.004716031208088975, "phrase": "agile_software_development"}, {"score": 0.004677032188041644, "phrase": "agile_methods"}, {"score": 0.004638354165775803, "phrase": "software_development"}, {"score": 0.004599994523941615, "phrase": "iterative_design"}, {"score": 0.00399415558125301, "phrase": "sprint_planning_phase"}, {"score": 0.003895810929926511, "phrase": "project_success"}, {"score": 0.003784120134537663, "phrase": "difficult_problem"}, {"score": 0.0035554096354423756, "phrase": "estimated_complexity"}, {"score": 0.0031647054743284947, "phrase": "integer_linear_programming_model"}, {"score": 0.0030611534228319717, "phrase": "project_team"}, {"score": 0.0029981559422442693, "phrase": "development_constraints"}, {"score": 0.002960979624379786, "phrase": "optimal_solution"}, {"score": 0.0026135859312619875, "phrase": "ibm_llog_cplex"}, {"score": 0.002496659907186784, "phrase": "feasible_solution"}, {"score": 0.0024452510143564057, "phrase": "operational_use"}, {"score": 0.0023651843133643785, "phrase": "effective_lagrangian_heuristic"}, {"score": 0.002297274552621268, "phrase": "proposed_model"}, {"score": 0.002268769196700254, "phrase": "greedy_and_exchange_algorithms"}, {"score": 0.002212812864395738, "phrase": "real_and_synthetic_projects"}, {"score": 0.002158233639156017, "phrase": "proposed_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Mixed integer linear programming", " Software engineering", " Agile methods", " Optimization models", " Matheuristics", " Lagrangian heuristics"], "paper_abstract": "Agile methods for software development promote iterative design and implementation. Most of them divide a project into functionalities, called user stories; at each iteration, often called a sprint, a subset of user stories are developed. The sprint planning phase is critical to ensure the project success, but it is also a difficult problem because several factors impact on the optimality of a sprint plan, e.g., the estimated complexity, business value, and affinity of the user stories to be included in each sprint. In this paper we present an approach for sprint planning based on an integer linear programming model. Given the estimates made by the project team and a set of development constraints, the optimal solution of the model is a sprint plan that maximizes the business value perceived by users. Solving to optimality the model by a general-purpose MIP solver, such as IBM llog Cplex, takes time and for some instances even finding a feasible solution requires too large computing times for an operational use. For this reason we propose an effective Lagrangian heuristic based on a relaxation of the proposed model and some greedy and exchange algorithms. Computational results on both real and synthetic projects show the effectiveness of the proposed approach. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "A Lagrangian heuristic for sprint planning in agile software development", "paper_id": "WOS:000329383300012"}