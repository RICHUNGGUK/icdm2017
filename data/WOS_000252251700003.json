{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_load"}, {"score": 0.004372442291178139, "phrase": "arbitrary_nodes"}, {"score": 0.004081385289516914, "phrase": "non-empty_node"}, {"score": 0.0033190180867511605, "phrase": "total_load"}, {"score": 0.0030414140732789186, "phrase": "underlying_''_communication_''_graph"}, {"score": 0.002825681384008326, "phrase": "new_tasks"}, {"score": 0.002748775748298028, "phrase": "major_contribution"}, {"score": 0.002673957615079041, "phrase": "fully_saturated_case"}, {"score": 0.0024501740852758505, "phrase": "moderate_multiplicative_constant"}, {"score": 0.0023400004981080818, "phrase": "system_load"}, {"score": 0.0023079225317714815, "phrase": "particular_example"}, {"score": 0.002276283303864666, "phrase": "linear_array"}, {"score": 0.0021739117830106365, "phrase": "simple_negative_results"}, {"score": 0.0021049977753042253, "phrase": "work-stealing_based_diffusion-type_algorithms"}], "paper_keywords": ["load balancing", " diffusion", " stability"], "paper_abstract": "We consider the problem of dynamic load balancing in arbitrary (connected) networks on n nodes. Our load generation model is such that during each round, n tasks are generated on arbitrary nodes, and then (possibly after some balancing) one task is deleted from every non-empty node. Notice that this model fully saturates the resources of the network in the sense that we generate just as many new tasks per round as the network is able to delete. We show that even in this situation the system is stable, in that the total load remains bounded (as a function of n alone) over time. Our proof only requires that the underlying '' communication '' graph be connected. (It of course also works if we generate less than n new tasks per round, but the major contribution of this paper is the fully saturated case.) We further show that the upper bound we obtain is asymptotically tight (up to a moderate multiplicative constant) by demonstrating a corresponding lower bound on the system load for the particular example of a linear array (or path). We also show some simple negative results (i.e., instability) for work-stealing based diffusion-type algorithms in this setting.", "paper_title": "On the stability of dynamic diffusion load balancing", "paper_id": "WOS:000252251700003"}