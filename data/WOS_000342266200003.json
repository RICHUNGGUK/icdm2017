{"auto_keywords": [{"score": 0.037161489612595994, "phrase": "hippos"}, {"score": 0.00481495049065317, "phrase": "high-performance_key-value_cache"}, {"score": 0.004157446556371582, "phrase": "recent_kv-store_implementations"}, {"score": 0.0040541116060860355, "phrase": "cpu"}, {"score": 0.003838791650587681, "phrase": "available_bandwidth"}, {"score": 0.0038066979615349822, "phrase": "poor_energy_efficiency"}, {"score": 0.003665552439863732, "phrase": "heavy_load"}, {"score": 0.0031512402798625056, "phrase": "operating_system's_kernel"}, {"score": 0.0030089355635315005, "phrase": "network_stack"}, {"score": 0.002909482525367989, "phrase": "netfilter_framework"}, {"score": 0.002860992017190221, "phrase": "udp_packets"}, {"score": 0.002789763110395331, "phrase": "udp-based_get_requests"}, {"score": 0.0027203027216256013, "phrase": "lock-free_multithreaded_data_access"}, {"score": 0.0025974077149412, "phrase": "kv-store_application"}, {"score": 0.0025221012517852907, "phrase": "linux_loadable_kernel_module"}, {"score": 0.002459288755782293, "phrase": "ubiquitous_memcached"}, {"score": 0.0023980368333253147, "phrase": "facebook's_production_systems"}, {"score": 0.002158780936704905, "phrase": "memcached"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Key-value cache", " Netfilter", " Clock cache policy", " Skb buffer reuse"], "paper_abstract": "Key-value (KV) stores have become a critical infrastructure component supporting various services in the cloud. Long considered an application that is memory-bound and network-bound, recent KV-store implementations on multicore servers grow increasingly CPU-bound instead. This limitation often leads to under-utilization of available bandwidth and poor energy efficiency, as well as long response times under heavy load. To address these issues, we present Hippos, a high-throughput, low-latency, and energy-efficient key-value store implementation. Hippos moves the IN store into the operating system's kernel and thus removes most of the overhead associated with the network stack and system calls. Hippos uses the Netfilter framework to quickly handle UDP packets, removing the overhead of UDP-based GET requests almost entirely. Combined with lock-free multithreaded data access, Hippos removes several performance bottlenecks both internal and external to the KV-store application. We prototyped Hippos as a Linux loadable kernel module and evaluated it against the ubiquitous Memcached using various micro-benchmarks and workloads from Facebook's production systems. The experiments show that Hippos provides some 20%-200% throughput improvements on a 1 Gbps network (up to 590% improvement on a 10 Gbps network) and 5%-20% saving of power compared with Memcached. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Building a high-performance key-value cache as an energy-efficient appliance", "paper_id": "WOS:000342266200003"}