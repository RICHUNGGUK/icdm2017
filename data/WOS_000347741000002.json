{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "programming_languages"}, {"score": 0.004555371402128666, "phrase": "empirical_evidence"}, {"score": 0.004442032546224076, "phrase": "software_engineers"}, {"score": 0.004245051445971095, "phrase": "particular_development_project"}, {"score": 0.004202472962684885, "phrase": "software_architecture"}, {"score": 0.0037235274565193665, "phrase": "ill-defined_notions"}, {"score": 0.003366233863411861, "phrase": "shared_common_basis"}, {"score": 0.0032658649336454923, "phrase": "empirical_results"}, {"score": 0.0031684791285366315, "phrase": "feature_model"}, {"score": 0.003105168935158648, "phrase": "programmer's_perspective"}, {"score": 0.0029672941061574375, "phrase": "general-purpose_programming_languages"}, {"score": 0.0026420518944303716, "phrase": "concrete_mappings"}, {"score": 0.0026155094974689595, "phrase": "well-known_languages"}, {"score": 0.0022365262201954643, "phrase": "detailed_investigations"}, {"score": 0.002214048743052355, "phrase": "feature_usage"}, {"score": 0.0021697677572213086, "phrase": "specific_development_contexts"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Programming languages", " Programming language constructs", " Agent-oriented programming", " Functional programming", " Object-oriented programming"], "paper_abstract": "The number of programming languages is large and steadily increasing. However, little structured information and empirical evidence is available to help software engineers assess the suitability of a language for a particular development project or software architecture. We argue that these shortages are partly due to a lack of high-level, objective programming language feature assessment criteria: existing advice to practitioners is often based on ill-defined notions of 'paradigms' [3, p. xiii] and 'orientation', while researchers lack a shared common basis for generalisation and synthesis of empirical results. This paper presents a feature model constructed from the programmer's perspective, which can be used to precisely compare general-purpose programming languages in the actor-oriented, agent-oriented, functional, object-oriented, and procedural categories. The feature model is derived from the existing literature on general concepts of programming, and validated with concrete mappings of well-known languages in each of these categories. The model is intended to act as a tool for both practitioners and researchers, to facilitate both further high-level comparative studies of programming languages, and detailed investigations of feature usage and efficacy in specific development contexts. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A feature model of actor, agent, functional, object, and procedural programming languages", "paper_id": "WOS:000347741000002"}