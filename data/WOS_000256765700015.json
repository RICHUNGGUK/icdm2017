{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "initial_tree"}, {"score": 0.02905077291658201, "phrase": "cpu_cost"}, {"score": 0.00481495049065317, "phrase": "efficient_frequent_itemset_mining"}, {"score": 0.004608879242346434, "phrase": "research_efforts"}, {"score": 0.004263972370406983, "phrase": "large_number"}, {"score": 0.004161553532799662, "phrase": "different_data_mining_queries"}, {"score": 0.004061584718427419, "phrase": "new_needs"}, {"score": 0.003775803846431323, "phrase": "pattern-growth_method"}, {"score": 0.0036493838225192883, "phrase": "frequent_pattern_mining"}, {"score": 0.003579046565851265, "phrase": "initial_tree_and_mines_frequent_patterns"}, {"score": 0.0033433365160336842, "phrase": "data_mining_proxy_approach"}, {"score": 0.002711842889248926, "phrase": "mining_patterns"}, {"score": 0.0022756672722130424, "phrase": "unique_coding_scheme"}, {"score": 0.0021886732310288128, "phrase": "on-disk_trees"}, {"score": 0.0021674482571326283, "phrase": "in-memory_trees"}, {"score": 0.0021049977753042253, "phrase": "data_mining_proxy"}], "paper_keywords": [""], "paper_abstract": "Data mining has attracted a lot of research efforts during the past decade. However, little work has been reported on the efficiency of supporting a large number of users who issue different data mining queries periodically when there are new needs and when data is updated. Our work is motivated by the fact that the pattern-growth method is one of the most efficient methods for frequent pattern mining which constructs an initial tree and mines frequent patterns on top of the tree. In this paper, we present a data mining proxy approach that can reduce the I/O costs to construct an initial tree by utilizing the trees that have already been resident in memory. The tree we construct is the smallest for a given data mining query. In addition, our proxy approach can also reduce CPU cost in mining patterns, because the cost of mining relies on the sizes of trees. The focus of the work is to construct an initial tree efficiently. We propose three tree operations to construct a tree. With a unique coding scheme, we can efficiently project subtrees from on-disk trees or in-memory trees. Our performance study indicated that the data mining proxy significantly reduces the I/O cost to construct trees and CPU cost to mine patterns over the trees constructed.", "paper_title": "A data mining proxy approach for efficient frequent itemset mining", "paper_id": "WOS:000256765700015"}