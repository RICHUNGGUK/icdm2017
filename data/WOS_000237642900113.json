{"auto_keywords": [{"score": 0.03474424005747293, "phrase": "max-pl"}, {"score": 0.010575628935489438, "phrase": "max"}, {"score": 0.00481495049065317, "phrase": "main-memory_storage_systems"}, {"score": 0.004719664411221952, "phrase": "main_memory_system"}, {"score": 0.004626255242038005, "phrase": "main_memory"}, {"score": 0.004415395176043526, "phrase": "primary_storage"}, {"score": 0.00421410521089045, "phrase": "high_performance"}, {"score": 0.003813017794036879, "phrase": "real_time_service"}, {"score": 0.003737485125097945, "phrase": "fast_index_reconstruction"}, {"score": 0.003663443192307343, "phrase": "essential_step"}, {"score": 0.003614895644619489, "phrase": "data_recovery"}, {"score": 0.003359119985242403, "phrase": "max-pl."}, {"score": 0.0031422859551159506, "phrase": "max_keys"}, {"score": 0.0030799988391729464, "phrase": "leaf_nodes"}, {"score": 0.003039159447717346, "phrase": "backup_time"}, {"score": 0.002900426826591769, "phrase": "pre-stored_max_keys"}, {"score": 0.002520990102833368, "phrase": "time_complexity"}, {"score": 0.002389839896897424, "phrase": "experimental_evaluation"}, {"score": 0.0021333110194180997, "phrase": "batch_construction"}], "paper_keywords": [""], "paper_abstract": "A main memory system employs a main memory rather than a disk as a primary storage and efficiently supports various real time applications that require high performance. The time to recover the system from failure needs to be shortened for real time service, and fast index reconstruction is an essential step for data recovery. In this paper, we present a snappy B+-Tree reconstruction algorithm called Max-PL. The basic Max-PL (called Max) stores the max keys of the leaf nodes at backup time and reconstructs the B+-Tree index structure using the pre-stored max keys at restoration time. Max-PL employs a parallelism to Max in order to improve the performance. We analyze the time complexity of the algorithm, and perform the experimental evaluation to compare its performance with others. Using Max-PL, we achieve a speedup of 2 over Batch Construction and 6.7 over B+-tree Insertion at least.", "paper_title": "A snappy B+-trees index reconstruction for main-memory storage systems", "paper_id": "WOS:000237642900113"}