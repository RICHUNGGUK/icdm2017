{"auto_keywords": [{"score": 0.04973325992892519, "phrase": "data_flow_tomography"}, {"score": 0.04497393203275299, "phrase": "whole_system"}, {"score": 0.00481495049065317, "phrase": "full_systems"}, {"score": 0.004660453113061494, "phrase": "modern_systems"}, {"score": 0.004527269879990066, "phrase": "interacting_services"}, {"score": 0.004462105963334103, "phrase": "multiple_machines"}, {"score": 0.004046020290832207, "phrase": "extraordinary_complexity"}, {"score": 0.004016782710006123, "phrase": "relative_ease"}, {"score": 0.0038596974575361574, "phrase": "abstraction_layers"}, {"score": 0.0037087324991876727, "phrase": "communication_patterns"}, {"score": 0.0036288825833675127, "phrase": "critical_data"}, {"score": 0.003338344648070587, "phrase": "source_code"}, {"score": 0.003219368413618912, "phrase": "inherent_information_flow"}, {"score": 0.003115908199991072, "phrase": "complex_and_interwoven_components"}, {"score": 0.0029615198132465236, "phrase": "short-lived_radioactive_isotopes"}, {"score": 0.002887210021573995, "phrase": "cardiovascular_system"}, {"score": 0.0027441220799352926, "phrase": "extraneous_layers"}, {"score": 0.002460876181416983, "phrase": "prototype_system"}, {"score": 0.0021987994275190314, "phrase": "system-level_challenges"}, {"score": 0.0021670777282518424, "phrase": "working_system_tomography_tool"}], "paper_keywords": ["design", " management", " data flow tracking", " tomography understanding"], "paper_abstract": "It is not uncommon for modern systems to be composed of a variety of interacting services, running across multiple machines in such a way that most developers do not really understand the whole system. As abstraction is layered atop abstraction, developers gain the ability to compose systems of extraordinary complexity with relative ease. However, many software properties, especially those that cut across abstraction layers, become very difficult to understand in such compositions. The communication patterns involved, the privacy of critical data, and the provenance of information, can be difficult to find and understand, even with access to all of the source code. The goal of Data Flow Tomography is to use the inherent information flow of such systems to help visualize the interactions between complex and interwoven components across multiple layers of abstraction. In the same way that the injection of short-lived radioactive isotopes help doctors trace problems in the cardiovascular system, the use of \"data tagging\" can help developers slice through the extraneous layers of software and pin-point those portions of the system interacting with the data of interest. To demonstrate the feasibility of this approach we have developed a prototype system in which tags are tracked both through the machine and in between machines over the network, and from which novel visualizations of the whole system can be derived. We describe the system-level challenges in creating a working system tomography tool and we qualitatively evaluate our system by examining several example real world scenarios.", "paper_title": "Understanding and visualizing full systems with Data Flow Tomography", "paper_id": "WOS:000256501300022"}